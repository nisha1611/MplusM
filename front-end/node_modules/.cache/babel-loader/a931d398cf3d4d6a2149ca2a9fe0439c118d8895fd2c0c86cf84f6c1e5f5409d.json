{"ast":null,"code":"var test = require('tape');\nvar v = require('es-value-fixtures');\nvar forEach = require('for-each');\nvar inspect = require('../');\ntest('negative zero', function (t) {\n  t.equal(inspect(0), '0', 'inspect(0) === \"0\"');\n  t.equal(inspect(Object(0)), 'Object(0)', 'inspect(Object(0)) === \"Object(0)\"');\n  t.equal(inspect(-0), '-0', 'inspect(-0) === \"-0\"');\n  t.equal(inspect(Object(-0)), 'Object(-0)', 'inspect(Object(-0)) === \"Object(-0)\"');\n  t.end();\n});\ntest('numericSeparator', function (t) {\n  forEach(v.nonBooleans, function (nonBoolean) {\n    t['throws'](function () {\n      inspect(true, {\n        numericSeparator: nonBoolean\n      });\n    }, TypeError, inspect(nonBoolean) + ' is not a boolean');\n  });\n  t.test('3 digit numbers', function (st) {\n    var failed = false;\n    for (var i = -999; i < 1000; i += 1) {\n      var actual = inspect(i);\n      var actualSepNo = inspect(i, {\n        numericSeparator: false\n      });\n      var actualSepYes = inspect(i, {\n        numericSeparator: true\n      });\n      var expected = String(i);\n      if (actual !== expected || actualSepNo !== expected || actualSepYes !== expected) {\n        failed = true;\n        t.equal(actual, expected);\n        t.equal(actualSepNo, expected);\n        t.equal(actualSepYes, expected);\n      }\n    }\n    st.notOk(failed, 'all 3 digit numbers passed');\n    st.end();\n  });\n  t.equal(inspect(1e3), '1000', '1000');\n  t.equal(inspect(1e3, {\n    numericSeparator: false\n  }), '1000', '1000, numericSeparator false');\n  t.equal(inspect(1e3, {\n    numericSeparator: true\n  }), '1_000', '1000, numericSeparator true');\n  t.equal(inspect(-1e3), '-1000', '-1000');\n  t.equal(inspect(-1e3, {\n    numericSeparator: false\n  }), '-1000', '-1000, numericSeparator false');\n  t.equal(inspect(-1e3, {\n    numericSeparator: true\n  }), '-1_000', '-1000, numericSeparator true');\n  t.equal(inspect(1234.5678, {\n    numericSeparator: true\n  }), '1_234.567_8', 'fractional numbers get separators');\n  t.equal(inspect(1234.56789, {\n    numericSeparator: true\n  }), '1_234.567_89', 'fractional numbers get separators');\n  t.equal(inspect(1234.567891, {\n    numericSeparator: true\n  }), '1_234.567_891', 'fractional numbers get separators');\n  t.end();\n});","map":{"version":3,"names":["test","require","v","forEach","inspect","t","equal","Object","end","nonBooleans","nonBoolean","numericSeparator","TypeError","st","failed","i","actual","actualSepNo","actualSepYes","expected","String","notOk"],"sources":["C:/Users/91930/Desktop/Github projects/Pharmacy Demo/back-end/node_modules/object-inspect/test/number.js"],"sourcesContent":["var test = require('tape');\r\nvar v = require('es-value-fixtures');\r\nvar forEach = require('for-each');\r\n\r\nvar inspect = require('../');\r\n\r\ntest('negative zero', function (t) {\r\n    t.equal(inspect(0), '0', 'inspect(0) === \"0\"');\r\n    t.equal(inspect(Object(0)), 'Object(0)', 'inspect(Object(0)) === \"Object(0)\"');\r\n\r\n    t.equal(inspect(-0), '-0', 'inspect(-0) === \"-0\"');\r\n    t.equal(inspect(Object(-0)), 'Object(-0)', 'inspect(Object(-0)) === \"Object(-0)\"');\r\n\r\n    t.end();\r\n});\r\n\r\ntest('numericSeparator', function (t) {\r\n    forEach(v.nonBooleans, function (nonBoolean) {\r\n        t['throws'](\r\n            function () { inspect(true, { numericSeparator: nonBoolean }); },\r\n            TypeError,\r\n            inspect(nonBoolean) + ' is not a boolean'\r\n        );\r\n    });\r\n\r\n    t.test('3 digit numbers', function (st) {\r\n        var failed = false;\r\n        for (var i = -999; i < 1000; i += 1) {\r\n            var actual = inspect(i);\r\n            var actualSepNo = inspect(i, { numericSeparator: false });\r\n            var actualSepYes = inspect(i, { numericSeparator: true });\r\n            var expected = String(i);\r\n            if (actual !== expected || actualSepNo !== expected || actualSepYes !== expected) {\r\n                failed = true;\r\n                t.equal(actual, expected);\r\n                t.equal(actualSepNo, expected);\r\n                t.equal(actualSepYes, expected);\r\n            }\r\n        }\r\n\r\n        st.notOk(failed, 'all 3 digit numbers passed');\r\n\r\n        st.end();\r\n    });\r\n\r\n    t.equal(inspect(1e3), '1000', '1000');\r\n    t.equal(inspect(1e3, { numericSeparator: false }), '1000', '1000, numericSeparator false');\r\n    t.equal(inspect(1e3, { numericSeparator: true }), '1_000', '1000, numericSeparator true');\r\n    t.equal(inspect(-1e3), '-1000', '-1000');\r\n    t.equal(inspect(-1e3, { numericSeparator: false }), '-1000', '-1000, numericSeparator false');\r\n    t.equal(inspect(-1e3, { numericSeparator: true }), '-1_000', '-1000, numericSeparator true');\r\n\r\n    t.equal(inspect(1234.5678, { numericSeparator: true }), '1_234.567_8', 'fractional numbers get separators');\r\n    t.equal(inspect(1234.56789, { numericSeparator: true }), '1_234.567_89', 'fractional numbers get separators');\r\n    t.equal(inspect(1234.567891, { numericSeparator: true }), '1_234.567_891', 'fractional numbers get separators');\r\n\r\n    t.end();\r\n});\r\n"],"mappings":"AAAA,IAAIA,IAAI,GAAGC,OAAO,CAAC,MAAM,CAAC;AAC1B,IAAIC,CAAC,GAAGD,OAAO,CAAC,mBAAmB,CAAC;AACpC,IAAIE,OAAO,GAAGF,OAAO,CAAC,UAAU,CAAC;AAEjC,IAAIG,OAAO,GAAGH,OAAO,CAAC,KAAK,CAAC;AAE5BD,IAAI,CAAC,eAAe,EAAE,UAAUK,CAAC,EAAE;EAC/BA,CAAC,CAACC,KAAK,CAACF,OAAO,CAAC,CAAC,CAAC,EAAE,GAAG,EAAE,oBAAoB,CAAC;EAC9CC,CAAC,CAACC,KAAK,CAACF,OAAO,CAACG,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,WAAW,EAAE,oCAAoC,CAAC;EAE9EF,CAAC,CAACC,KAAK,CAACF,OAAO,CAAC,CAAC,CAAC,CAAC,EAAE,IAAI,EAAE,sBAAsB,CAAC;EAClDC,CAAC,CAACC,KAAK,CAACF,OAAO,CAACG,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,YAAY,EAAE,sCAAsC,CAAC;EAElFF,CAAC,CAACG,GAAG,EAAE;AACX,CAAC,CAAC;AAEFR,IAAI,CAAC,kBAAkB,EAAE,UAAUK,CAAC,EAAE;EAClCF,OAAO,CAACD,CAAC,CAACO,WAAW,EAAE,UAAUC,UAAU,EAAE;IACzCL,CAAC,CAAC,QAAQ,CAAC,CACP,YAAY;MAAED,OAAO,CAAC,IAAI,EAAE;QAAEO,gBAAgB,EAAED;MAAW,CAAC,CAAC;IAAE,CAAC,EAChEE,SAAS,EACTR,OAAO,CAACM,UAAU,CAAC,GAAG,mBAAmB,CAC5C;EACL,CAAC,CAAC;EAEFL,CAAC,CAACL,IAAI,CAAC,iBAAiB,EAAE,UAAUa,EAAE,EAAE;IACpC,IAAIC,MAAM,GAAG,KAAK;IAClB,KAAK,IAAIC,CAAC,GAAG,CAAC,GAAG,EAAEA,CAAC,GAAG,IAAI,EAAEA,CAAC,IAAI,CAAC,EAAE;MACjC,IAAIC,MAAM,GAAGZ,OAAO,CAACW,CAAC,CAAC;MACvB,IAAIE,WAAW,GAAGb,OAAO,CAACW,CAAC,EAAE;QAAEJ,gBAAgB,EAAE;MAAM,CAAC,CAAC;MACzD,IAAIO,YAAY,GAAGd,OAAO,CAACW,CAAC,EAAE;QAAEJ,gBAAgB,EAAE;MAAK,CAAC,CAAC;MACzD,IAAIQ,QAAQ,GAAGC,MAAM,CAACL,CAAC,CAAC;MACxB,IAAIC,MAAM,KAAKG,QAAQ,IAAIF,WAAW,KAAKE,QAAQ,IAAID,YAAY,KAAKC,QAAQ,EAAE;QAC9EL,MAAM,GAAG,IAAI;QACbT,CAAC,CAACC,KAAK,CAACU,MAAM,EAAEG,QAAQ,CAAC;QACzBd,CAAC,CAACC,KAAK,CAACW,WAAW,EAAEE,QAAQ,CAAC;QAC9Bd,CAAC,CAACC,KAAK,CAACY,YAAY,EAAEC,QAAQ,CAAC;MACnC;IACJ;IAEAN,EAAE,CAACQ,KAAK,CAACP,MAAM,EAAE,4BAA4B,CAAC;IAE9CD,EAAE,CAACL,GAAG,EAAE;EACZ,CAAC,CAAC;EAEFH,CAAC,CAACC,KAAK,CAACF,OAAO,CAAC,GAAG,CAAC,EAAE,MAAM,EAAE,MAAM,CAAC;EACrCC,CAAC,CAACC,KAAK,CAACF,OAAO,CAAC,GAAG,EAAE;IAAEO,gBAAgB,EAAE;EAAM,CAAC,CAAC,EAAE,MAAM,EAAE,8BAA8B,CAAC;EAC1FN,CAAC,CAACC,KAAK,CAACF,OAAO,CAAC,GAAG,EAAE;IAAEO,gBAAgB,EAAE;EAAK,CAAC,CAAC,EAAE,OAAO,EAAE,6BAA6B,CAAC;EACzFN,CAAC,CAACC,KAAK,CAACF,OAAO,CAAC,CAAC,GAAG,CAAC,EAAE,OAAO,EAAE,OAAO,CAAC;EACxCC,CAAC,CAACC,KAAK,CAACF,OAAO,CAAC,CAAC,GAAG,EAAE;IAAEO,gBAAgB,EAAE;EAAM,CAAC,CAAC,EAAE,OAAO,EAAE,+BAA+B,CAAC;EAC7FN,CAAC,CAACC,KAAK,CAACF,OAAO,CAAC,CAAC,GAAG,EAAE;IAAEO,gBAAgB,EAAE;EAAK,CAAC,CAAC,EAAE,QAAQ,EAAE,8BAA8B,CAAC;EAE5FN,CAAC,CAACC,KAAK,CAACF,OAAO,CAAC,SAAS,EAAE;IAAEO,gBAAgB,EAAE;EAAK,CAAC,CAAC,EAAE,aAAa,EAAE,mCAAmC,CAAC;EAC3GN,CAAC,CAACC,KAAK,CAACF,OAAO,CAAC,UAAU,EAAE;IAAEO,gBAAgB,EAAE;EAAK,CAAC,CAAC,EAAE,cAAc,EAAE,mCAAmC,CAAC;EAC7GN,CAAC,CAACC,KAAK,CAACF,OAAO,CAAC,WAAW,EAAE;IAAEO,gBAAgB,EAAE;EAAK,CAAC,CAAC,EAAE,eAAe,EAAE,mCAAmC,CAAC;EAE/GN,CAAC,CAACG,GAAG,EAAE;AACX,CAAC,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}