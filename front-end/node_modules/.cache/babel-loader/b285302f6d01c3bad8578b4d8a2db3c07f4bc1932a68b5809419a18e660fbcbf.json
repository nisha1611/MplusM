{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.makeUpdateStatement = exports.ReplaceOneOperation = exports.UpdateManyOperation = exports.UpdateOneOperation = exports.UpdateOperation = void 0;\nconst error_1 = require(\"../error\");\nconst utils_1 = require(\"../utils\");\nconst command_1 = require(\"./command\");\nconst operation_1 = require(\"./operation\");\n/** @internal */\nclass UpdateOperation extends command_1.CommandOperation {\n  constructor(ns, statements, options) {\n    super(undefined, options);\n    this.options = options;\n    this.ns = ns;\n    this.statements = statements;\n  }\n  get canRetryWrite() {\n    if (super.canRetryWrite === false) {\n      return false;\n    }\n    return this.statements.every(op => op.multi == null || op.multi === false);\n  }\n  execute(server, session, callback) {\n    var _a;\n    const options = (_a = this.options) !== null && _a !== void 0 ? _a : {};\n    const ordered = typeof options.ordered === 'boolean' ? options.ordered : true;\n    const command = {\n      update: this.ns.collection,\n      updates: this.statements,\n      ordered\n    };\n    if (typeof options.bypassDocumentValidation === 'boolean') {\n      command.bypassDocumentValidation = options.bypassDocumentValidation;\n    }\n    if (options.let) {\n      command.let = options.let;\n    }\n    // we check for undefined specifically here to allow falsy values\n    // eslint-disable-next-line no-restricted-syntax\n    if (options.comment !== undefined) {\n      command.comment = options.comment;\n    }\n    const unacknowledgedWrite = this.writeConcern && this.writeConcern.w === 0;\n    if (unacknowledgedWrite) {\n      if (this.statements.find(o => o.hint)) {\n        // TODO(NODE-3541): fix error for hint with unacknowledged writes\n        callback(new error_1.MongoCompatibilityError(`hint is not supported with unacknowledged writes`));\n        return;\n      }\n    }\n    super.executeCommand(server, session, command, callback);\n  }\n}\nexports.UpdateOperation = UpdateOperation;\n/** @internal */\nclass UpdateOneOperation extends UpdateOperation {\n  constructor(collection, filter, update, options) {\n    super(collection.s.namespace, [makeUpdateStatement(filter, update, {\n      ...options,\n      multi: false\n    })], options);\n    if (!(0, utils_1.hasAtomicOperators)(update)) {\n      throw new error_1.MongoInvalidArgumentError('Update document requires atomic operators');\n    }\n  }\n  execute(server, session, callback) {\n    super.execute(server, session, (err, res) => {\n      var _a, _b;\n      if (err || !res) return callback(err);\n      if (this.explain != null) return callback(undefined, res);\n      if (res.code) return callback(new error_1.MongoServerError(res));\n      if (res.writeErrors) return callback(new error_1.MongoServerError(res.writeErrors[0]));\n      callback(undefined, {\n        acknowledged: (_b = ((_a = this.writeConcern) === null || _a === void 0 ? void 0 : _a.w) !== 0) !== null && _b !== void 0 ? _b : true,\n        modifiedCount: res.nModified != null ? res.nModified : res.n,\n        upsertedId: Array.isArray(res.upserted) && res.upserted.length > 0 ? res.upserted[0]._id : null,\n        upsertedCount: Array.isArray(res.upserted) && res.upserted.length ? res.upserted.length : 0,\n        matchedCount: Array.isArray(res.upserted) && res.upserted.length > 0 ? 0 : res.n\n      });\n    });\n  }\n}\nexports.UpdateOneOperation = UpdateOneOperation;\n/** @internal */\nclass UpdateManyOperation extends UpdateOperation {\n  constructor(collection, filter, update, options) {\n    super(collection.s.namespace, [makeUpdateStatement(filter, update, {\n      ...options,\n      multi: true\n    })], options);\n    if (!(0, utils_1.hasAtomicOperators)(update)) {\n      throw new error_1.MongoInvalidArgumentError('Update document requires atomic operators');\n    }\n  }\n  execute(server, session, callback) {\n    super.execute(server, session, (err, res) => {\n      var _a, _b;\n      if (err || !res) return callback(err);\n      if (this.explain != null) return callback(undefined, res);\n      if (res.code) return callback(new error_1.MongoServerError(res));\n      if (res.writeErrors) return callback(new error_1.MongoServerError(res.writeErrors[0]));\n      callback(undefined, {\n        acknowledged: (_b = ((_a = this.writeConcern) === null || _a === void 0 ? void 0 : _a.w) !== 0) !== null && _b !== void 0 ? _b : true,\n        modifiedCount: res.nModified != null ? res.nModified : res.n,\n        upsertedId: Array.isArray(res.upserted) && res.upserted.length > 0 ? res.upserted[0]._id : null,\n        upsertedCount: Array.isArray(res.upserted) && res.upserted.length ? res.upserted.length : 0,\n        matchedCount: Array.isArray(res.upserted) && res.upserted.length > 0 ? 0 : res.n\n      });\n    });\n  }\n}\nexports.UpdateManyOperation = UpdateManyOperation;\n/** @internal */\nclass ReplaceOneOperation extends UpdateOperation {\n  constructor(collection, filter, replacement, options) {\n    super(collection.s.namespace, [makeUpdateStatement(filter, replacement, {\n      ...options,\n      multi: false\n    })], options);\n    if ((0, utils_1.hasAtomicOperators)(replacement)) {\n      throw new error_1.MongoInvalidArgumentError('Replacement document must not contain atomic operators');\n    }\n  }\n  execute(server, session, callback) {\n    super.execute(server, session, (err, res) => {\n      var _a, _b;\n      if (err || !res) return callback(err);\n      if (this.explain != null) return callback(undefined, res);\n      if (res.code) return callback(new error_1.MongoServerError(res));\n      if (res.writeErrors) return callback(new error_1.MongoServerError(res.writeErrors[0]));\n      callback(undefined, {\n        acknowledged: (_b = ((_a = this.writeConcern) === null || _a === void 0 ? void 0 : _a.w) !== 0) !== null && _b !== void 0 ? _b : true,\n        modifiedCount: res.nModified != null ? res.nModified : res.n,\n        upsertedId: Array.isArray(res.upserted) && res.upserted.length > 0 ? res.upserted[0]._id : null,\n        upsertedCount: Array.isArray(res.upserted) && res.upserted.length ? res.upserted.length : 0,\n        matchedCount: Array.isArray(res.upserted) && res.upserted.length > 0 ? 0 : res.n\n      });\n    });\n  }\n}\nexports.ReplaceOneOperation = ReplaceOneOperation;\nfunction makeUpdateStatement(filter, update, options) {\n  if (filter == null || typeof filter !== 'object') {\n    throw new error_1.MongoInvalidArgumentError('Selector must be a valid JavaScript object');\n  }\n  if (update == null || typeof update !== 'object') {\n    throw new error_1.MongoInvalidArgumentError('Document must be a valid JavaScript object');\n  }\n  const op = {\n    q: filter,\n    u: update\n  };\n  if (typeof options.upsert === 'boolean') {\n    op.upsert = options.upsert;\n  }\n  if (options.multi) {\n    op.multi = options.multi;\n  }\n  if (options.hint) {\n    op.hint = options.hint;\n  }\n  if (options.arrayFilters) {\n    op.arrayFilters = options.arrayFilters;\n  }\n  if (options.collation) {\n    op.collation = options.collation;\n  }\n  return op;\n}\nexports.makeUpdateStatement = makeUpdateStatement;\n(0, operation_1.defineAspects)(UpdateOperation, [operation_1.Aspect.RETRYABLE, operation_1.Aspect.WRITE_OPERATION, operation_1.Aspect.SKIP_COLLATION]);\n(0, operation_1.defineAspects)(UpdateOneOperation, [operation_1.Aspect.RETRYABLE, operation_1.Aspect.WRITE_OPERATION, operation_1.Aspect.EXPLAINABLE, operation_1.Aspect.SKIP_COLLATION]);\n(0, operation_1.defineAspects)(UpdateManyOperation, [operation_1.Aspect.WRITE_OPERATION, operation_1.Aspect.EXPLAINABLE, operation_1.Aspect.SKIP_COLLATION]);\n(0, operation_1.defineAspects)(ReplaceOneOperation, [operation_1.Aspect.RETRYABLE, operation_1.Aspect.WRITE_OPERATION, operation_1.Aspect.SKIP_COLLATION]);","map":{"version":3,"mappings":"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","names":["UpdateOperation","command_1","constructor","ns","statements","options","undefined","canRetryWrite","every","op","multi","execute","server","session","callback","ordered","command","update","collection","updates","bypassDocumentValidation","let","comment","unacknowledgedWrite","writeConcern","w","find","o","hint","error_1","executeCommand","exports","UpdateOneOperation","filter","s","namespace","makeUpdateStatement","err","res","explain","code","writeErrors","acknowledged","modifiedCount","nModified","n","upsertedId","Array","isArray","upserted","length","_id","upsertedCount","matchedCount","UpdateManyOperation","ReplaceOneOperation","replacement","q","u","upsert","arrayFilters","collation","operation_1","RETRYABLE","WRITE_OPERATION","SKIP_COLLATION","EXPLAINABLE"],"sources":["C:\\Users\\91930\\Desktop\\Github projects\\Pharmacy Demo\\back-end\\node_modules\\mongoose\\node_modules\\mongodb\\src\\operations\\update.ts"],"sourcesContent":["import type { Document, ObjectId } from '../bson';\r\nimport type { Collection } from '../collection';\r\nimport { MongoCompatibilityError, MongoInvalidArgumentError, MongoServerError } from '../error';\r\nimport type { Server } from '../sdam/server';\r\nimport type { ClientSession } from '../sessions';\r\nimport { Callback, hasAtomicOperators, MongoDBNamespace } from '../utils';\r\nimport { CollationOptions, CommandOperation, CommandOperationOptions } from './command';\r\nimport { Aspect, defineAspects, Hint } from './operation';\r\n\r\n/** @public */\r\nexport interface UpdateOptions extends CommandOperationOptions {\r\n  /** A set of filters specifying to which array elements an update should apply */\r\n  arrayFilters?: Document[];\r\n  /** If true, allows the write to opt-out of document level validation */\r\n  bypassDocumentValidation?: boolean;\r\n  /** Specifies a collation */\r\n  collation?: CollationOptions;\r\n  /** Specify that the update query should only consider plans using the hinted index */\r\n  hint?: Hint;\r\n  /** When true, creates a new document if no document matches the query */\r\n  upsert?: boolean;\r\n  /** Map of parameter names and values that can be accessed using $$var (requires MongoDB 5.0). */\r\n  let?: Document;\r\n}\r\n\r\n/** @public */\r\nexport interface UpdateResult {\r\n  /** Indicates whether this write result was acknowledged. If not, then all other members of this result will be undefined */\r\n  acknowledged: boolean;\r\n  /** The number of documents that matched the filter */\r\n  matchedCount: number;\r\n  /** The number of documents that were modified */\r\n  modifiedCount: number;\r\n  /** The number of documents that were upserted */\r\n  upsertedCount: number;\r\n  /** The identifier of the inserted document if an upsert took place */\r\n  upsertedId: ObjectId;\r\n}\r\n\r\n/** @public */\r\nexport interface UpdateStatement {\r\n  /** The query that matches documents to update. */\r\n  q: Document;\r\n  /** The modifications to apply. */\r\n  u: Document | Document[];\r\n  /**  If true, perform an insert if no documents match the query. */\r\n  upsert?: boolean;\r\n  /** If true, updates all documents that meet the query criteria. */\r\n  multi?: boolean;\r\n  /** Specifies the collation to use for the operation. */\r\n  collation?: CollationOptions;\r\n  /** An array of filter documents that determines which array elements to modify for an update operation on an array field. */\r\n  arrayFilters?: Document[];\r\n  /** A document or string that specifies the index to use to support the query predicate. */\r\n  hint?: Hint;\r\n}\r\n\r\n/** @internal */\r\nexport class UpdateOperation extends CommandOperation<Document> {\r\n  override options: UpdateOptions & { ordered?: boolean };\r\n  statements: UpdateStatement[];\r\n\r\n  constructor(\r\n    ns: MongoDBNamespace,\r\n    statements: UpdateStatement[],\r\n    options: UpdateOptions & { ordered?: boolean }\r\n  ) {\r\n    super(undefined, options);\r\n    this.options = options;\r\n    this.ns = ns;\r\n\r\n    this.statements = statements;\r\n  }\r\n\r\n  override get canRetryWrite(): boolean {\r\n    if (super.canRetryWrite === false) {\r\n      return false;\r\n    }\r\n\r\n    return this.statements.every(op => op.multi == null || op.multi === false);\r\n  }\r\n\r\n  override execute(\r\n    server: Server,\r\n    session: ClientSession | undefined,\r\n    callback: Callback<Document>\r\n  ): void {\r\n    const options = this.options ?? {};\r\n    const ordered = typeof options.ordered === 'boolean' ? options.ordered : true;\r\n    const command: Document = {\r\n      update: this.ns.collection,\r\n      updates: this.statements,\r\n      ordered\r\n    };\r\n\r\n    if (typeof options.bypassDocumentValidation === 'boolean') {\r\n      command.bypassDocumentValidation = options.bypassDocumentValidation;\r\n    }\r\n\r\n    if (options.let) {\r\n      command.let = options.let;\r\n    }\r\n\r\n    // we check for undefined specifically here to allow falsy values\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    if (options.comment !== undefined) {\r\n      command.comment = options.comment;\r\n    }\r\n\r\n    const unacknowledgedWrite = this.writeConcern && this.writeConcern.w === 0;\r\n    if (unacknowledgedWrite) {\r\n      if (this.statements.find((o: Document) => o.hint)) {\r\n        // TODO(NODE-3541): fix error for hint with unacknowledged writes\r\n        callback(new MongoCompatibilityError(`hint is not supported with unacknowledged writes`));\r\n        return;\r\n      }\r\n    }\r\n\r\n    super.executeCommand(server, session, command, callback);\r\n  }\r\n}\r\n\r\n/** @internal */\r\nexport class UpdateOneOperation extends UpdateOperation {\r\n  constructor(collection: Collection, filter: Document, update: Document, options: UpdateOptions) {\r\n    super(\r\n      collection.s.namespace,\r\n      [makeUpdateStatement(filter, update, { ...options, multi: false })],\r\n      options\r\n    );\r\n\r\n    if (!hasAtomicOperators(update)) {\r\n      throw new MongoInvalidArgumentError('Update document requires atomic operators');\r\n    }\r\n  }\r\n\r\n  override execute(\r\n    server: Server,\r\n    session: ClientSession | undefined,\r\n    callback: Callback<UpdateResult | Document>\r\n  ): void {\r\n    super.execute(server, session, (err, res) => {\r\n      if (err || !res) return callback(err);\r\n      if (this.explain != null) return callback(undefined, res);\r\n      if (res.code) return callback(new MongoServerError(res));\r\n      if (res.writeErrors) return callback(new MongoServerError(res.writeErrors[0]));\r\n\r\n      callback(undefined, {\r\n        acknowledged: this.writeConcern?.w !== 0 ?? true,\r\n        modifiedCount: res.nModified != null ? res.nModified : res.n,\r\n        upsertedId:\r\n          Array.isArray(res.upserted) && res.upserted.length > 0 ? res.upserted[0]._id : null,\r\n        upsertedCount: Array.isArray(res.upserted) && res.upserted.length ? res.upserted.length : 0,\r\n        matchedCount: Array.isArray(res.upserted) && res.upserted.length > 0 ? 0 : res.n\r\n      });\r\n    });\r\n  }\r\n}\r\n\r\n/** @internal */\r\nexport class UpdateManyOperation extends UpdateOperation {\r\n  constructor(collection: Collection, filter: Document, update: Document, options: UpdateOptions) {\r\n    super(\r\n      collection.s.namespace,\r\n      [makeUpdateStatement(filter, update, { ...options, multi: true })],\r\n      options\r\n    );\r\n\r\n    if (!hasAtomicOperators(update)) {\r\n      throw new MongoInvalidArgumentError('Update document requires atomic operators');\r\n    }\r\n  }\r\n\r\n  override execute(\r\n    server: Server,\r\n    session: ClientSession | undefined,\r\n    callback: Callback<UpdateResult | Document>\r\n  ): void {\r\n    super.execute(server, session, (err, res) => {\r\n      if (err || !res) return callback(err);\r\n      if (this.explain != null) return callback(undefined, res);\r\n      if (res.code) return callback(new MongoServerError(res));\r\n      if (res.writeErrors) return callback(new MongoServerError(res.writeErrors[0]));\r\n\r\n      callback(undefined, {\r\n        acknowledged: this.writeConcern?.w !== 0 ?? true,\r\n        modifiedCount: res.nModified != null ? res.nModified : res.n,\r\n        upsertedId:\r\n          Array.isArray(res.upserted) && res.upserted.length > 0 ? res.upserted[0]._id : null,\r\n        upsertedCount: Array.isArray(res.upserted) && res.upserted.length ? res.upserted.length : 0,\r\n        matchedCount: Array.isArray(res.upserted) && res.upserted.length > 0 ? 0 : res.n\r\n      });\r\n    });\r\n  }\r\n}\r\n\r\n/** @public */\r\nexport interface ReplaceOptions extends CommandOperationOptions {\r\n  /** If true, allows the write to opt-out of document level validation */\r\n  bypassDocumentValidation?: boolean;\r\n  /** Specifies a collation */\r\n  collation?: CollationOptions;\r\n  /** Specify that the update query should only consider plans using the hinted index */\r\n  hint?: string | Document;\r\n  /** When true, creates a new document if no document matches the query */\r\n  upsert?: boolean;\r\n  /** Map of parameter names and values that can be accessed using $$var (requires MongoDB 5.0). */\r\n  let?: Document;\r\n}\r\n\r\n/** @internal */\r\nexport class ReplaceOneOperation extends UpdateOperation {\r\n  constructor(\r\n    collection: Collection,\r\n    filter: Document,\r\n    replacement: Document,\r\n    options: ReplaceOptions\r\n  ) {\r\n    super(\r\n      collection.s.namespace,\r\n      [makeUpdateStatement(filter, replacement, { ...options, multi: false })],\r\n      options\r\n    );\r\n\r\n    if (hasAtomicOperators(replacement)) {\r\n      throw new MongoInvalidArgumentError('Replacement document must not contain atomic operators');\r\n    }\r\n  }\r\n\r\n  override execute(\r\n    server: Server,\r\n    session: ClientSession | undefined,\r\n    callback: Callback<UpdateResult | Document>\r\n  ): void {\r\n    super.execute(server, session, (err, res) => {\r\n      if (err || !res) return callback(err);\r\n      if (this.explain != null) return callback(undefined, res);\r\n      if (res.code) return callback(new MongoServerError(res));\r\n      if (res.writeErrors) return callback(new MongoServerError(res.writeErrors[0]));\r\n\r\n      callback(undefined, {\r\n        acknowledged: this.writeConcern?.w !== 0 ?? true,\r\n        modifiedCount: res.nModified != null ? res.nModified : res.n,\r\n        upsertedId:\r\n          Array.isArray(res.upserted) && res.upserted.length > 0 ? res.upserted[0]._id : null,\r\n        upsertedCount: Array.isArray(res.upserted) && res.upserted.length ? res.upserted.length : 0,\r\n        matchedCount: Array.isArray(res.upserted) && res.upserted.length > 0 ? 0 : res.n\r\n      });\r\n    });\r\n  }\r\n}\r\n\r\nexport function makeUpdateStatement(\r\n  filter: Document,\r\n  update: Document | Document[],\r\n  options: UpdateOptions & { multi?: boolean }\r\n): UpdateStatement {\r\n  if (filter == null || typeof filter !== 'object') {\r\n    throw new MongoInvalidArgumentError('Selector must be a valid JavaScript object');\r\n  }\r\n\r\n  if (update == null || typeof update !== 'object') {\r\n    throw new MongoInvalidArgumentError('Document must be a valid JavaScript object');\r\n  }\r\n\r\n  const op: UpdateStatement = { q: filter, u: update };\r\n  if (typeof options.upsert === 'boolean') {\r\n    op.upsert = options.upsert;\r\n  }\r\n\r\n  if (options.multi) {\r\n    op.multi = options.multi;\r\n  }\r\n\r\n  if (options.hint) {\r\n    op.hint = options.hint;\r\n  }\r\n\r\n  if (options.arrayFilters) {\r\n    op.arrayFilters = options.arrayFilters;\r\n  }\r\n\r\n  if (options.collation) {\r\n    op.collation = options.collation;\r\n  }\r\n\r\n  return op;\r\n}\r\n\r\ndefineAspects(UpdateOperation, [Aspect.RETRYABLE, Aspect.WRITE_OPERATION, Aspect.SKIP_COLLATION]);\r\ndefineAspects(UpdateOneOperation, [\r\n  Aspect.RETRYABLE,\r\n  Aspect.WRITE_OPERATION,\r\n  Aspect.EXPLAINABLE,\r\n  Aspect.SKIP_COLLATION\r\n]);\r\ndefineAspects(UpdateManyOperation, [\r\n  Aspect.WRITE_OPERATION,\r\n  Aspect.EXPLAINABLE,\r\n  Aspect.SKIP_COLLATION\r\n]);\r\ndefineAspects(ReplaceOneOperation, [\r\n  Aspect.RETRYABLE,\r\n  Aspect.WRITE_OPERATION,\r\n  Aspect.SKIP_COLLATION\r\n]);\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}