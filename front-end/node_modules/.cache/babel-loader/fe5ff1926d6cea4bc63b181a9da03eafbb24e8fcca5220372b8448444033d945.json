{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.bufferToUuidHexString = exports.uuidHexStringToBuffer = exports.uuidValidateString = void 0;\nvar buffer_1 = require(\"buffer\");\nvar error_1 = require(\"./error\");\n// Validation regex for v4 uuid (validates with or without dashes)\nvar VALIDATION_REGEX = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|[0-9a-f]{12}4[0-9a-f]{3}[89ab][0-9a-f]{15})$/i;\nvar uuidValidateString = function (str) {\n  return typeof str === 'string' && VALIDATION_REGEX.test(str);\n};\nexports.uuidValidateString = uuidValidateString;\nvar uuidHexStringToBuffer = function (hexString) {\n  if (!(0, exports.uuidValidateString)(hexString)) {\n    throw new error_1.BSONTypeError('UUID string representations must be a 32 or 36 character hex string (dashes excluded/included). Format: \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\" or \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\".');\n  }\n  var sanitizedHexString = hexString.replace(/-/g, '');\n  return buffer_1.Buffer.from(sanitizedHexString, 'hex');\n};\nexports.uuidHexStringToBuffer = uuidHexStringToBuffer;\nvar bufferToUuidHexString = function (buffer, includeDashes) {\n  if (includeDashes === void 0) {\n    includeDashes = true;\n  }\n  return includeDashes ? buffer.toString('hex', 0, 4) + '-' + buffer.toString('hex', 4, 6) + '-' + buffer.toString('hex', 6, 8) + '-' + buffer.toString('hex', 8, 10) + '-' + buffer.toString('hex', 10, 16) : buffer.toString('hex');\n};\nexports.bufferToUuidHexString = bufferToUuidHexString;","map":{"version":3,"mappings":";;;;;;AAAA;AACA;AAEA;AACA,IAAMA,gBAAgB,GACpB,uHAAuH;AAElH,IAAMC,kBAAkB,GAAG,UAACC,GAAW;EAC5C,cAAOA,GAAG,KAAK,QAAQ,IAAIF,gBAAgB,CAACG,IAAI,CAACD,GAAG,CAAC;AAArD,CAAqD;AAD1CE,0BAAkB;AAGxB,IAAMC,qBAAqB,GAAG,UAACC,SAAiB;EACrD,IAAI,CAAC,8BAAkB,EAACA,SAAS,CAAC,EAAE;IAClC,MAAM,IAAIC,qBAAa,CACrB,uLAAuL,CACxL;;EAGH,IAAMC,kBAAkB,GAAGF,SAAS,CAACG,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC;EACtD,OAAOC,eAAM,CAACC,IAAI,CAACH,kBAAkB,EAAE,KAAK,CAAC;AAC/C,CAAC;AATYJ,6BAAqB;AAW3B,IAAMQ,qBAAqB,GAAG,UAACC,MAAc,EAAEC,aAAoB;EAApB;IAAAA,oBAAoB;EAAA;EACxE,oBAAa,GACTD,MAAM,CAACE,QAAQ,CAAC,KAAK,EAAE,CAAC,EAAE,CAAC,CAAC,GAC5B,GAAG,GACHF,MAAM,CAACE,QAAQ,CAAC,KAAK,EAAE,CAAC,EAAE,CAAC,CAAC,GAC5B,GAAG,GACHF,MAAM,CAACE,QAAQ,CAAC,KAAK,EAAE,CAAC,EAAE,CAAC,CAAC,GAC5B,GAAG,GACHF,MAAM,CAACE,QAAQ,CAAC,KAAK,EAAE,CAAC,EAAE,EAAE,CAAC,GAC7B,GAAG,GACHF,MAAM,CAACE,QAAQ,CAAC,KAAK,EAAE,EAAE,EAAE,EAAE,CAAC,GAC9BF,MAAM,CAACE,QAAQ,CAAC,KAAK,CAAC;AAV1B,CAU0B;AAXfX,6BAAqB","names":["VALIDATION_REGEX","uuidValidateString","str","test","exports","uuidHexStringToBuffer","hexString","error_1","sanitizedHexString","replace","buffer_1","from","bufferToUuidHexString","buffer","includeDashes","toString"],"sources":["C:\\Users\\91930\\Desktop\\Github projects\\Pharmacy Demo\\back-end\\node_modules\\bson\\src\\uuid_utils.ts"],"sourcesContent":["import { Buffer } from 'buffer';\r\nimport { BSONTypeError } from './error';\r\n\r\n// Validation regex for v4 uuid (validates with or without dashes)\r\nconst VALIDATION_REGEX =\r\n  /^(?:[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|[0-9a-f]{12}4[0-9a-f]{3}[89ab][0-9a-f]{15})$/i;\r\n\r\nexport const uuidValidateString = (str: string): boolean =>\r\n  typeof str === 'string' && VALIDATION_REGEX.test(str);\r\n\r\nexport const uuidHexStringToBuffer = (hexString: string): Buffer => {\r\n  if (!uuidValidateString(hexString)) {\r\n    throw new BSONTypeError(\r\n      'UUID string representations must be a 32 or 36 character hex string (dashes excluded/included). Format: \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\" or \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\".'\r\n    );\r\n  }\r\n\r\n  const sanitizedHexString = hexString.replace(/-/g, '');\r\n  return Buffer.from(sanitizedHexString, 'hex');\r\n};\r\n\r\nexport const bufferToUuidHexString = (buffer: Buffer, includeDashes = true): string =>\r\n  includeDashes\r\n    ? buffer.toString('hex', 0, 4) +\r\n      '-' +\r\n      buffer.toString('hex', 4, 6) +\r\n      '-' +\r\n      buffer.toString('hex', 6, 8) +\r\n      '-' +\r\n      buffer.toString('hex', 8, 10) +\r\n      '-' +\r\n      buffer.toString('hex', 10, 16)\r\n    : buffer.toString('hex');\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}