{"ast":null,"code":"import { CredentialsProviderError } from \"@aws-sdk/property-provider\";\nimport { httpRequest } from \"./remoteProvider/httpRequest\";\nimport { fromImdsCredentials, isImdsCredentials } from \"./remoteProvider/ImdsCredentials\";\nimport { providerConfigFromInit } from \"./remoteProvider/RemoteProviderInit\";\nimport { retry } from \"./remoteProvider/retry\";\nimport { getInstanceMetadataEndpoint } from \"./utils/getInstanceMetadataEndpoint\";\nimport { staticStabilityProvider } from \"./utils/staticStabilityProvider\";\nconst IMDS_PATH = \"/latest/meta-data/iam/security-credentials/\";\nconst IMDS_TOKEN_PATH = \"/latest/api/token\";\nexport const fromInstanceMetadata = function () {\n  let init = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return staticStabilityProvider(getInstanceImdsProvider(init), {\n    logger: init.logger\n  });\n};\nconst getInstanceImdsProvider = init => {\n  let disableFetchToken = false;\n  const {\n    timeout,\n    maxRetries\n  } = providerConfigFromInit(init);\n  const getCredentials = async (maxRetries, options) => {\n    const profile = (await retry(async () => {\n      let profile;\n      try {\n        profile = await getProfile(options);\n      } catch (err) {\n        if (err.statusCode === 401) {\n          disableFetchToken = false;\n        }\n        throw err;\n      }\n      return profile;\n    }, maxRetries)).trim();\n    return retry(async () => {\n      let creds;\n      try {\n        creds = await getCredentialsFromProfile(profile, options);\n      } catch (err) {\n        if (err.statusCode === 401) {\n          disableFetchToken = false;\n        }\n        throw err;\n      }\n      return creds;\n    }, maxRetries);\n  };\n  return async () => {\n    const endpoint = await getInstanceMetadataEndpoint();\n    if (disableFetchToken) {\n      return getCredentials(maxRetries, {\n        ...endpoint,\n        timeout\n      });\n    } else {\n      let token;\n      try {\n        token = (await getMetadataToken({\n          ...endpoint,\n          timeout\n        })).toString();\n      } catch (error) {\n        if (error?.statusCode === 400) {\n          throw Object.assign(error, {\n            message: \"EC2 Metadata token request returned error\"\n          });\n        } else if (error.message === \"TimeoutError\" || [403, 404, 405].includes(error.statusCode)) {\n          disableFetchToken = true;\n        }\n        return getCredentials(maxRetries, {\n          ...endpoint,\n          timeout\n        });\n      }\n      return getCredentials(maxRetries, {\n        ...endpoint,\n        headers: {\n          \"x-aws-ec2-metadata-token\": token\n        },\n        timeout\n      });\n    }\n  };\n};\nconst getMetadataToken = async options => httpRequest({\n  ...options,\n  path: IMDS_TOKEN_PATH,\n  method: \"PUT\",\n  headers: {\n    \"x-aws-ec2-metadata-token-ttl-seconds\": \"21600\"\n  }\n});\nconst getProfile = async options => (await httpRequest({\n  ...options,\n  path: IMDS_PATH\n})).toString();\nconst getCredentialsFromProfile = async (profile, options) => {\n  const credsResponse = JSON.parse((await httpRequest({\n    ...options,\n    path: IMDS_PATH + profile\n  })).toString());\n  if (!isImdsCredentials(credsResponse)) {\n    throw new CredentialsProviderError(\"Invalid response received from instance metadata service.\");\n  }\n  return fromImdsCredentials(credsResponse);\n};","map":{"version":3,"names":["CredentialsProviderError","httpRequest","fromImdsCredentials","isImdsCredentials","providerConfigFromInit","retry","getInstanceMetadataEndpoint","staticStabilityProvider","IMDS_PATH","IMDS_TOKEN_PATH","fromInstanceMetadata","init","getInstanceImdsProvider","logger","disableFetchToken","timeout","maxRetries","getCredentials","options","profile","getProfile","err","statusCode","trim","creds","getCredentialsFromProfile","endpoint","token","getMetadataToken","toString","error","Object","assign","message","includes","headers","path","method","credsResponse","JSON","parse"],"sources":["C:/Users/91930/Desktop/Github projects/Pharmacy Demo/back-end/node_modules/@aws-sdk/credential-provider-imds/dist-es/fromInstanceMetadata.js"],"sourcesContent":["import { CredentialsProviderError } from \"@aws-sdk/property-provider\";\r\nimport { httpRequest } from \"./remoteProvider/httpRequest\";\r\nimport { fromImdsCredentials, isImdsCredentials } from \"./remoteProvider/ImdsCredentials\";\r\nimport { providerConfigFromInit } from \"./remoteProvider/RemoteProviderInit\";\r\nimport { retry } from \"./remoteProvider/retry\";\r\nimport { getInstanceMetadataEndpoint } from \"./utils/getInstanceMetadataEndpoint\";\r\nimport { staticStabilityProvider } from \"./utils/staticStabilityProvider\";\r\nconst IMDS_PATH = \"/latest/meta-data/iam/security-credentials/\";\r\nconst IMDS_TOKEN_PATH = \"/latest/api/token\";\r\nexport const fromInstanceMetadata = (init = {}) => staticStabilityProvider(getInstanceImdsProvider(init), { logger: init.logger });\r\nconst getInstanceImdsProvider = (init) => {\r\n    let disableFetchToken = false;\r\n    const { timeout, maxRetries } = providerConfigFromInit(init);\r\n    const getCredentials = async (maxRetries, options) => {\r\n        const profile = (await retry(async () => {\r\n            let profile;\r\n            try {\r\n                profile = await getProfile(options);\r\n            }\r\n            catch (err) {\r\n                if (err.statusCode === 401) {\r\n                    disableFetchToken = false;\r\n                }\r\n                throw err;\r\n            }\r\n            return profile;\r\n        }, maxRetries)).trim();\r\n        return retry(async () => {\r\n            let creds;\r\n            try {\r\n                creds = await getCredentialsFromProfile(profile, options);\r\n            }\r\n            catch (err) {\r\n                if (err.statusCode === 401) {\r\n                    disableFetchToken = false;\r\n                }\r\n                throw err;\r\n            }\r\n            return creds;\r\n        }, maxRetries);\r\n    };\r\n    return async () => {\r\n        const endpoint = await getInstanceMetadataEndpoint();\r\n        if (disableFetchToken) {\r\n            return getCredentials(maxRetries, { ...endpoint, timeout });\r\n        }\r\n        else {\r\n            let token;\r\n            try {\r\n                token = (await getMetadataToken({ ...endpoint, timeout })).toString();\r\n            }\r\n            catch (error) {\r\n                if (error?.statusCode === 400) {\r\n                    throw Object.assign(error, {\r\n                        message: \"EC2 Metadata token request returned error\",\r\n                    });\r\n                }\r\n                else if (error.message === \"TimeoutError\" || [403, 404, 405].includes(error.statusCode)) {\r\n                    disableFetchToken = true;\r\n                }\r\n                return getCredentials(maxRetries, { ...endpoint, timeout });\r\n            }\r\n            return getCredentials(maxRetries, {\r\n                ...endpoint,\r\n                headers: {\r\n                    \"x-aws-ec2-metadata-token\": token,\r\n                },\r\n                timeout,\r\n            });\r\n        }\r\n    };\r\n};\r\nconst getMetadataToken = async (options) => httpRequest({\r\n    ...options,\r\n    path: IMDS_TOKEN_PATH,\r\n    method: \"PUT\",\r\n    headers: {\r\n        \"x-aws-ec2-metadata-token-ttl-seconds\": \"21600\",\r\n    },\r\n});\r\nconst getProfile = async (options) => (await httpRequest({ ...options, path: IMDS_PATH })).toString();\r\nconst getCredentialsFromProfile = async (profile, options) => {\r\n    const credsResponse = JSON.parse((await httpRequest({\r\n        ...options,\r\n        path: IMDS_PATH + profile,\r\n    })).toString());\r\n    if (!isImdsCredentials(credsResponse)) {\r\n        throw new CredentialsProviderError(\"Invalid response received from instance metadata service.\");\r\n    }\r\n    return fromImdsCredentials(credsResponse);\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}