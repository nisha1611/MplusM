{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.toBase64 = void 0;\nconst constants_browser_1 = require(\"./constants.browser\");\nfunction toBase64(input) {\n  let str = \"\";\n  for (let i = 0; i < input.length; i += 3) {\n    let bits = 0;\n    let bitLength = 0;\n    for (let j = i, limit = Math.min(i + 3, input.length); j < limit; j++) {\n      bits |= input[j] << (limit - j - 1) * constants_browser_1.bitsPerByte;\n      bitLength += constants_browser_1.bitsPerByte;\n    }\n    const bitClusterCount = Math.ceil(bitLength / constants_browser_1.bitsPerLetter);\n    bits <<= bitClusterCount * constants_browser_1.bitsPerLetter - bitLength;\n    for (let k = 1; k <= bitClusterCount; k++) {\n      const offset = (bitClusterCount - k) * constants_browser_1.bitsPerLetter;\n      str += constants_browser_1.alphabetByValue[(bits & constants_browser_1.maxLetterValue << offset) >> offset];\n    }\n    str += \"==\".slice(0, 4 - bitClusterCount);\n  }\n  return str;\n}\nexports.toBase64 = toBase64;","map":{"version":3,"names":["Object","defineProperty","exports","value","toBase64","constants_browser_1","require","input","str","i","length","bits","bitLength","j","limit","Math","min","bitsPerByte","bitClusterCount","ceil","bitsPerLetter","k","offset","alphabetByValue","maxLetterValue","slice"],"sources":["C:/Users/91930/Desktop/Github projects/Pharmacy Demo/back-end/node_modules/@aws-sdk/util-base64/dist-cjs/toBase64.browser.js"],"sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.toBase64 = void 0;\r\nconst constants_browser_1 = require(\"./constants.browser\");\r\nfunction toBase64(input) {\r\n    let str = \"\";\r\n    for (let i = 0; i < input.length; i += 3) {\r\n        let bits = 0;\r\n        let bitLength = 0;\r\n        for (let j = i, limit = Math.min(i + 3, input.length); j < limit; j++) {\r\n            bits |= input[j] << ((limit - j - 1) * constants_browser_1.bitsPerByte);\r\n            bitLength += constants_browser_1.bitsPerByte;\r\n        }\r\n        const bitClusterCount = Math.ceil(bitLength / constants_browser_1.bitsPerLetter);\r\n        bits <<= bitClusterCount * constants_browser_1.bitsPerLetter - bitLength;\r\n        for (let k = 1; k <= bitClusterCount; k++) {\r\n            const offset = (bitClusterCount - k) * constants_browser_1.bitsPerLetter;\r\n            str += constants_browser_1.alphabetByValue[(bits & (constants_browser_1.maxLetterValue << offset)) >> offset];\r\n        }\r\n        str += \"==\".slice(0, 4 - bitClusterCount);\r\n    }\r\n    return str;\r\n}\r\nexports.toBase64 = toBase64;\r\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,QAAQ,GAAG,KAAK,CAAC;AACzB,MAAMC,mBAAmB,GAAGC,OAAO,CAAC,qBAAqB,CAAC;AAC1D,SAASF,QAAQ,CAACG,KAAK,EAAE;EACrB,IAAIC,GAAG,GAAG,EAAE;EACZ,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,KAAK,CAACG,MAAM,EAAED,CAAC,IAAI,CAAC,EAAE;IACtC,IAAIE,IAAI,GAAG,CAAC;IACZ,IAAIC,SAAS,GAAG,CAAC;IACjB,KAAK,IAAIC,CAAC,GAAGJ,CAAC,EAAEK,KAAK,GAAGC,IAAI,CAACC,GAAG,CAACP,CAAC,GAAG,CAAC,EAAEF,KAAK,CAACG,MAAM,CAAC,EAAEG,CAAC,GAAGC,KAAK,EAAED,CAAC,EAAE,EAAE;MACnEF,IAAI,IAAIJ,KAAK,CAACM,CAAC,CAAC,IAAK,CAACC,KAAK,GAAGD,CAAC,GAAG,CAAC,IAAIR,mBAAmB,CAACY,WAAY;MACvEL,SAAS,IAAIP,mBAAmB,CAACY,WAAW;IAChD;IACA,MAAMC,eAAe,GAAGH,IAAI,CAACI,IAAI,CAACP,SAAS,GAAGP,mBAAmB,CAACe,aAAa,CAAC;IAChFT,IAAI,KAAKO,eAAe,GAAGb,mBAAmB,CAACe,aAAa,GAAGR,SAAS;IACxE,KAAK,IAAIS,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAIH,eAAe,EAAEG,CAAC,EAAE,EAAE;MACvC,MAAMC,MAAM,GAAG,CAACJ,eAAe,GAAGG,CAAC,IAAIhB,mBAAmB,CAACe,aAAa;MACxEZ,GAAG,IAAIH,mBAAmB,CAACkB,eAAe,CAAC,CAACZ,IAAI,GAAIN,mBAAmB,CAACmB,cAAc,IAAIF,MAAO,KAAKA,MAAM,CAAC;IACjH;IACAd,GAAG,IAAI,IAAI,CAACiB,KAAK,CAAC,CAAC,EAAE,CAAC,GAAGP,eAAe,CAAC;EAC7C;EACA,OAAOV,GAAG;AACd;AACAN,OAAO,CAACE,QAAQ,GAAGA,QAAQ"},"metadata":{},"sourceType":"script","externalDependencies":[]}