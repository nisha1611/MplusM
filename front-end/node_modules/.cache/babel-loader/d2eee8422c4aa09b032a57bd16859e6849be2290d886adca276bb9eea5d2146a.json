{"ast":null,"code":"/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Tobias Koppers @sokra\r\n*/\n\n\"use strict\";\n\nconst asyncLib = require(\"neo-async\");\nconst NormalModule = require(\"./NormalModule\");\nconst PrefetchDependency = require(\"./dependencies/PrefetchDependency\");\n\n/** @typedef {import(\"./Compiler\")} Compiler */\n\nclass AutomaticPrefetchPlugin {\n  /**\r\n   * Apply the plugin\r\n   * @param {Compiler} compiler the compiler instance\r\n   * @returns {void}\r\n   */\n  apply(compiler) {\n    compiler.hooks.compilation.tap(\"AutomaticPrefetchPlugin\", (compilation, _ref) => {\n      let {\n        normalModuleFactory\n      } = _ref;\n      compilation.dependencyFactories.set(PrefetchDependency, normalModuleFactory);\n    });\n    let lastModules = null;\n    compiler.hooks.afterCompile.tap(\"AutomaticPrefetchPlugin\", compilation => {\n      lastModules = [];\n      for (const m of compilation.modules) {\n        if (m instanceof NormalModule) {\n          lastModules.push({\n            context: m.context,\n            request: m.request\n          });\n        }\n      }\n    });\n    compiler.hooks.make.tapAsync(\"AutomaticPrefetchPlugin\", (compilation, callback) => {\n      if (!lastModules) return callback();\n      asyncLib.forEach(lastModules, (m, callback) => {\n        compilation.addModuleChain(m.context || compiler.context, new PrefetchDependency(`!!${m.request}`), callback);\n      }, err => {\n        lastModules = null;\n        callback(err);\n      });\n    });\n  }\n}\nmodule.exports = AutomaticPrefetchPlugin;","map":{"version":3,"names":["asyncLib","require","NormalModule","PrefetchDependency","AutomaticPrefetchPlugin","apply","compiler","hooks","compilation","tap","normalModuleFactory","dependencyFactories","set","lastModules","afterCompile","m","modules","push","context","request","make","tapAsync","callback","forEach","addModuleChain","err","module","exports"],"sources":["C:/Users/91930/Desktop/Github projects/Pharmacy Demo/front-end/node_modules/webpack/lib/AutomaticPrefetchPlugin.js"],"sourcesContent":["/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Tobias Koppers @sokra\r\n*/\r\n\r\n\"use strict\";\r\n\r\nconst asyncLib = require(\"neo-async\");\r\nconst NormalModule = require(\"./NormalModule\");\r\nconst PrefetchDependency = require(\"./dependencies/PrefetchDependency\");\r\n\r\n/** @typedef {import(\"./Compiler\")} Compiler */\r\n\r\nclass AutomaticPrefetchPlugin {\r\n\t/**\r\n\t * Apply the plugin\r\n\t * @param {Compiler} compiler the compiler instance\r\n\t * @returns {void}\r\n\t */\r\n\tapply(compiler) {\r\n\t\tcompiler.hooks.compilation.tap(\r\n\t\t\t\"AutomaticPrefetchPlugin\",\r\n\t\t\t(compilation, { normalModuleFactory }) => {\r\n\t\t\t\tcompilation.dependencyFactories.set(\r\n\t\t\t\t\tPrefetchDependency,\r\n\t\t\t\t\tnormalModuleFactory\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t\tlet lastModules = null;\r\n\t\tcompiler.hooks.afterCompile.tap(\"AutomaticPrefetchPlugin\", compilation => {\r\n\t\t\tlastModules = [];\r\n\r\n\t\t\tfor (const m of compilation.modules) {\r\n\t\t\t\tif (m instanceof NormalModule) {\r\n\t\t\t\t\tlastModules.push({\r\n\t\t\t\t\t\tcontext: m.context,\r\n\t\t\t\t\t\trequest: m.request\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t\tcompiler.hooks.make.tapAsync(\r\n\t\t\t\"AutomaticPrefetchPlugin\",\r\n\t\t\t(compilation, callback) => {\r\n\t\t\t\tif (!lastModules) return callback();\r\n\t\t\t\tasyncLib.forEach(\r\n\t\t\t\t\tlastModules,\r\n\t\t\t\t\t(m, callback) => {\r\n\t\t\t\t\t\tcompilation.addModuleChain(\r\n\t\t\t\t\t\t\tm.context || compiler.context,\r\n\t\t\t\t\t\t\tnew PrefetchDependency(`!!${m.request}`),\r\n\t\t\t\t\t\t\tcallback\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t},\r\n\t\t\t\t\terr => {\r\n\t\t\t\t\t\tlastModules = null;\r\n\t\t\t\t\t\tcallback(err);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n}\r\nmodule.exports = AutomaticPrefetchPlugin;\r\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ,MAAMA,QAAQ,GAAGC,OAAO,CAAC,WAAW,CAAC;AACrC,MAAMC,YAAY,GAAGD,OAAO,CAAC,gBAAgB,CAAC;AAC9C,MAAME,kBAAkB,GAAGF,OAAO,CAAC,mCAAmC,CAAC;;AAEvE;;AAEA,MAAMG,uBAAuB,CAAC;EAC7B;AACD;AACA;AACA;AACA;EACCC,KAAK,CAACC,QAAQ,EAAE;IACfA,QAAQ,CAACC,KAAK,CAACC,WAAW,CAACC,GAAG,CAC7B,yBAAyB,EACzB,CAACD,WAAW,WAA8B;MAAA,IAA5B;QAAEE;MAAoB,CAAC;MACpCF,WAAW,CAACG,mBAAmB,CAACC,GAAG,CAClCT,kBAAkB,EAClBO,mBAAmB,CACnB;IACF,CAAC,CACD;IACD,IAAIG,WAAW,GAAG,IAAI;IACtBP,QAAQ,CAACC,KAAK,CAACO,YAAY,CAACL,GAAG,CAAC,yBAAyB,EAAED,WAAW,IAAI;MACzEK,WAAW,GAAG,EAAE;MAEhB,KAAK,MAAME,CAAC,IAAIP,WAAW,CAACQ,OAAO,EAAE;QACpC,IAAID,CAAC,YAAYb,YAAY,EAAE;UAC9BW,WAAW,CAACI,IAAI,CAAC;YAChBC,OAAO,EAAEH,CAAC,CAACG,OAAO;YAClBC,OAAO,EAAEJ,CAAC,CAACI;UACZ,CAAC,CAAC;QACH;MACD;IACD,CAAC,CAAC;IACFb,QAAQ,CAACC,KAAK,CAACa,IAAI,CAACC,QAAQ,CAC3B,yBAAyB,EACzB,CAACb,WAAW,EAAEc,QAAQ,KAAK;MAC1B,IAAI,CAACT,WAAW,EAAE,OAAOS,QAAQ,EAAE;MACnCtB,QAAQ,CAACuB,OAAO,CACfV,WAAW,EACX,CAACE,CAAC,EAAEO,QAAQ,KAAK;QAChBd,WAAW,CAACgB,cAAc,CACzBT,CAAC,CAACG,OAAO,IAAIZ,QAAQ,CAACY,OAAO,EAC7B,IAAIf,kBAAkB,CAAE,KAAIY,CAAC,CAACI,OAAQ,EAAC,CAAC,EACxCG,QAAQ,CACR;MACF,CAAC,EACDG,GAAG,IAAI;QACNZ,WAAW,GAAG,IAAI;QAClBS,QAAQ,CAACG,GAAG,CAAC;MACd,CAAC,CACD;IACF,CAAC,CACD;EACF;AACD;AACAC,MAAM,CAACC,OAAO,GAAGvB,uBAAuB"},"metadata":{},"sourceType":"script","externalDependencies":[]}