{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Admin = void 0;\nconst add_user_1 = require(\"./operations/add_user\");\nconst execute_operation_1 = require(\"./operations/execute_operation\");\nconst list_databases_1 = require(\"./operations/list_databases\");\nconst remove_user_1 = require(\"./operations/remove_user\");\nconst run_command_1 = require(\"./operations/run_command\");\nconst validate_collection_1 = require(\"./operations/validate_collection\");\n/**\r\n * The **Admin** class is an internal class that allows convenient access to\r\n * the admin functionality and commands for MongoDB.\r\n *\r\n * **ADMIN Cannot directly be instantiated**\r\n * @public\r\n *\r\n * @example\r\n * ```ts\r\n * import { MongoClient } from 'mongodb';\r\n *\r\n * const client = new MongoClient('mongodb://localhost:27017');\r\n * const admin = client.db().admin();\r\n * const dbInfo = await admin.listDatabases();\r\n * for (const db of dbInfo.databases) {\r\n *   console.log(db.name);\r\n * }\r\n * ```\r\n */\nclass Admin {\n  /**\r\n   * Create a new Admin instance\r\n   * @internal\r\n   */\n  constructor(db) {\n    this.s = {\n      db\n    };\n  }\n  command(command, options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    options = Object.assign({\n      dbName: 'admin'\n    }, options);\n    return (0, execute_operation_1.executeOperation)(this.s.db.s.client, new run_command_1.RunCommandOperation(this.s.db, command, options), callback);\n  }\n  buildInfo(options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    options = options !== null && options !== void 0 ? options : {};\n    return this.command({\n      buildinfo: 1\n    }, options, callback);\n  }\n  serverInfo(options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    options = options !== null && options !== void 0 ? options : {};\n    return this.command({\n      buildinfo: 1\n    }, options, callback);\n  }\n  serverStatus(options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    options = options !== null && options !== void 0 ? options : {};\n    return this.command({\n      serverStatus: 1\n    }, options, callback);\n  }\n  ping(options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    options = options !== null && options !== void 0 ? options : {};\n    return this.command({\n      ping: 1\n    }, options, callback);\n  }\n  addUser(username, password, options, callback) {\n    if (typeof password === 'function') {\n      callback = password, password = undefined, options = {};\n    } else if (typeof password !== 'string') {\n      if (typeof options === 'function') {\n        callback = options, options = password, password = undefined;\n      } else {\n        options = password, callback = undefined, password = undefined;\n      }\n    } else {\n      if (typeof options === 'function') callback = options, options = {};\n    }\n    options = Object.assign({\n      dbName: 'admin'\n    }, options);\n    return (0, execute_operation_1.executeOperation)(this.s.db.s.client, new add_user_1.AddUserOperation(this.s.db, username, password, options), callback);\n  }\n  removeUser(username, options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    options = Object.assign({\n      dbName: 'admin'\n    }, options);\n    return (0, execute_operation_1.executeOperation)(this.s.db.s.client, new remove_user_1.RemoveUserOperation(this.s.db, username, options), callback);\n  }\n  validateCollection(collectionName, options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    options = options !== null && options !== void 0 ? options : {};\n    return (0, execute_operation_1.executeOperation)(this.s.db.s.client, new validate_collection_1.ValidateCollectionOperation(this, collectionName, options), callback);\n  }\n  listDatabases(options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    options = options !== null && options !== void 0 ? options : {};\n    return (0, execute_operation_1.executeOperation)(this.s.db.s.client, new list_databases_1.ListDatabasesOperation(this.s.db, options), callback);\n  }\n  replSetGetStatus(options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    options = options !== null && options !== void 0 ? options : {};\n    return this.command({\n      replSetGetStatus: 1\n    }, options, callback);\n  }\n}\nexports.Admin = Admin;","map":{"version":3,"mappings":"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","names":["Admin","constructor","db","s","command","options","callback","Object","assign","dbName","client","run_command_1","buildInfo","buildinfo","serverInfo","serverStatus","ping","addUser","username","password","undefined","add_user_1","removeUser","remove_user_1","validateCollection","collectionName","validate_collection_1","listDatabases","list_databases_1","replSetGetStatus","exports"],"sources":["C:\\Users\\91930\\Desktop\\Github projects\\Pharmacy Demo\\back-end\\node_modules\\mongoose\\node_modules\\mongodb\\src\\admin.ts"],"sourcesContent":["import type { Document } from './bson';\r\nimport type { Db } from './db';\r\nimport { AddUserOperation, AddUserOptions } from './operations/add_user';\r\nimport type { CommandOperationOptions } from './operations/command';\r\nimport { executeOperation } from './operations/execute_operation';\r\nimport {\r\n  ListDatabasesOperation,\r\n  ListDatabasesOptions,\r\n  ListDatabasesResult\r\n} from './operations/list_databases';\r\nimport { RemoveUserOperation, RemoveUserOptions } from './operations/remove_user';\r\nimport { RunCommandOperation, RunCommandOptions } from './operations/run_command';\r\nimport {\r\n  ValidateCollectionOperation,\r\n  ValidateCollectionOptions\r\n} from './operations/validate_collection';\r\nimport type { Callback } from './utils';\r\n\r\n/** @internal */\r\nexport interface AdminPrivate {\r\n  db: Db;\r\n}\r\n\r\n/**\r\n * The **Admin** class is an internal class that allows convenient access to\r\n * the admin functionality and commands for MongoDB.\r\n *\r\n * **ADMIN Cannot directly be instantiated**\r\n * @public\r\n *\r\n * @example\r\n * ```ts\r\n * import { MongoClient } from 'mongodb';\r\n *\r\n * const client = new MongoClient('mongodb://localhost:27017');\r\n * const admin = client.db().admin();\r\n * const dbInfo = await admin.listDatabases();\r\n * for (const db of dbInfo.databases) {\r\n *   console.log(db.name);\r\n * }\r\n * ```\r\n */\r\nexport class Admin {\r\n  /** @internal */\r\n  s: AdminPrivate;\r\n\r\n  /**\r\n   * Create a new Admin instance\r\n   * @internal\r\n   */\r\n  constructor(db: Db) {\r\n    this.s = { db };\r\n  }\r\n\r\n  /**\r\n   * Execute a command\r\n   *\r\n   * @param command - The command to execute\r\n   * @param options - Optional settings for the command\r\n   * @param callback - An optional callback, a Promise will be returned if none is provided\r\n   */\r\n  command(command: Document): Promise<Document>;\r\n  command(command: Document, options: RunCommandOptions): Promise<Document>;\r\n  /** @deprecated Callbacks are deprecated and will be removed in the next major version. See [mongodb-legacy](https://github.com/mongodb-js/nodejs-mongodb-legacy) for migration assistance */\r\n  command(command: Document, callback: Callback<Document>): void;\r\n  /** @deprecated Callbacks are deprecated and will be removed in the next major version. See [mongodb-legacy](https://github.com/mongodb-js/nodejs-mongodb-legacy) for migration assistance */\r\n  command(command: Document, options: RunCommandOptions, callback: Callback<Document>): void;\r\n  command(\r\n    command: Document,\r\n    options?: RunCommandOptions | Callback<Document>,\r\n    callback?: Callback<Document>\r\n  ): Promise<Document> | void {\r\n    if (typeof options === 'function') (callback = options), (options = {});\r\n    options = Object.assign({ dbName: 'admin' }, options);\r\n\r\n    return executeOperation(\r\n      this.s.db.s.client,\r\n      new RunCommandOperation(this.s.db, command, options),\r\n      callback\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Retrieve the server build information\r\n   *\r\n   * @param options - Optional settings for the command\r\n   * @param callback - An optional callback, a Promise will be returned if none is provided\r\n   */\r\n  buildInfo(): Promise<Document>;\r\n  buildInfo(options: CommandOperationOptions): Promise<Document>;\r\n  /** @deprecated Callbacks are deprecated and will be removed in the next major version. See [mongodb-legacy](https://github.com/mongodb-js/nodejs-mongodb-legacy) for migration assistance */\r\n  buildInfo(callback: Callback<Document>): void;\r\n  /** @deprecated Callbacks are deprecated and will be removed in the next major version. See [mongodb-legacy](https://github.com/mongodb-js/nodejs-mongodb-legacy) for migration assistance */\r\n  buildInfo(options: CommandOperationOptions, callback: Callback<Document>): void;\r\n  buildInfo(\r\n    options?: CommandOperationOptions | Callback<Document>,\r\n    callback?: Callback<Document>\r\n  ): Promise<Document> | void {\r\n    if (typeof options === 'function') (callback = options), (options = {});\r\n    options = options ?? {};\r\n    return this.command({ buildinfo: 1 }, options, callback as Callback<Document>);\r\n  }\r\n\r\n  /**\r\n   * Retrieve the server build information\r\n   *\r\n   * @param options - Optional settings for the command\r\n   * @param callback - An optional callback, a Promise will be returned if none is provided\r\n   */\r\n  serverInfo(): Promise<Document>;\r\n  serverInfo(options: CommandOperationOptions): Promise<Document>;\r\n  /** @deprecated Callbacks are deprecated and will be removed in the next major version. See [mongodb-legacy](https://github.com/mongodb-js/nodejs-mongodb-legacy) for migration assistance */\r\n  serverInfo(callback: Callback<Document>): void;\r\n  /** @deprecated Callbacks are deprecated and will be removed in the next major version. See [mongodb-legacy](https://github.com/mongodb-js/nodejs-mongodb-legacy) for migration assistance */\r\n  serverInfo(options: CommandOperationOptions, callback: Callback<Document>): void;\r\n  serverInfo(\r\n    options?: CommandOperationOptions | Callback<Document>,\r\n    callback?: Callback<Document>\r\n  ): Promise<Document> | void {\r\n    if (typeof options === 'function') (callback = options), (options = {});\r\n    options = options ?? {};\r\n    return this.command({ buildinfo: 1 }, options, callback as Callback<Document>);\r\n  }\r\n\r\n  /**\r\n   * Retrieve this db's server status.\r\n   *\r\n   * @param options - Optional settings for the command\r\n   * @param callback - An optional callback, a Promise will be returned if none is provided\r\n   */\r\n  serverStatus(): Promise<Document>;\r\n  serverStatus(options: CommandOperationOptions): Promise<Document>;\r\n  /** @deprecated Callbacks are deprecated and will be removed in the next major version. See [mongodb-legacy](https://github.com/mongodb-js/nodejs-mongodb-legacy) for migration assistance */\r\n  serverStatus(callback: Callback<Document>): void;\r\n  /** @deprecated Callbacks are deprecated and will be removed in the next major version. See [mongodb-legacy](https://github.com/mongodb-js/nodejs-mongodb-legacy) for migration assistance */\r\n  serverStatus(options: CommandOperationOptions, callback: Callback<Document>): void;\r\n  serverStatus(\r\n    options?: CommandOperationOptions | Callback<Document>,\r\n    callback?: Callback<Document>\r\n  ): Promise<Document> | void {\r\n    if (typeof options === 'function') (callback = options), (options = {});\r\n    options = options ?? {};\r\n    return this.command({ serverStatus: 1 }, options, callback as Callback<Document>);\r\n  }\r\n\r\n  /**\r\n   * Ping the MongoDB server and retrieve results\r\n   *\r\n   * @param options - Optional settings for the command\r\n   * @param callback - An optional callback, a Promise will be returned if none is provided\r\n   */\r\n  ping(): Promise<Document>;\r\n  ping(options: CommandOperationOptions): Promise<Document>;\r\n  /** @deprecated Callbacks are deprecated and will be removed in the next major version. See [mongodb-legacy](https://github.com/mongodb-js/nodejs-mongodb-legacy) for migration assistance */\r\n  ping(callback: Callback<Document>): void;\r\n  /** @deprecated Callbacks are deprecated and will be removed in the next major version. See [mongodb-legacy](https://github.com/mongodb-js/nodejs-mongodb-legacy) for migration assistance */\r\n  ping(options: CommandOperationOptions, callback: Callback<Document>): void;\r\n  ping(\r\n    options?: CommandOperationOptions | Callback<Document>,\r\n    callback?: Callback<Document>\r\n  ): Promise<Document> | void {\r\n    if (typeof options === 'function') (callback = options), (options = {});\r\n    options = options ?? {};\r\n    return this.command({ ping: 1 }, options, callback as Callback<Document>);\r\n  }\r\n\r\n  /**\r\n   * Add a user to the database\r\n   *\r\n   * @param username - The username for the new user\r\n   * @param password - An optional password for the new user\r\n   * @param options - Optional settings for the command\r\n   * @param callback - An optional callback, a Promise will be returned if none is provided\r\n   */\r\n  addUser(username: string): Promise<Document>;\r\n  addUser(username: string, password: string): Promise<Document>;\r\n  addUser(username: string, options: AddUserOptions): Promise<Document>;\r\n  addUser(username: string, password: string, options: AddUserOptions): Promise<Document>;\r\n  /** @deprecated Callbacks are deprecated and will be removed in the next major version. See [mongodb-legacy](https://github.com/mongodb-js/nodejs-mongodb-legacy) for migration assistance */\r\n  addUser(username: string, callback: Callback<Document>): void;\r\n  /** @deprecated Callbacks are deprecated and will be removed in the next major version. See [mongodb-legacy](https://github.com/mongodb-js/nodejs-mongodb-legacy) for migration assistance */\r\n  addUser(username: string, password: string, callback: Callback<Document>): void;\r\n  /** @deprecated Callbacks are deprecated and will be removed in the next major version. See [mongodb-legacy](https://github.com/mongodb-js/nodejs-mongodb-legacy) for migration assistance */\r\n  addUser(username: string, options: AddUserOptions, callback: Callback<Document>): void;\r\n  /** @deprecated Callbacks are deprecated and will be removed in the next major version. See [mongodb-legacy](https://github.com/mongodb-js/nodejs-mongodb-legacy) for migration assistance */\r\n  addUser(\r\n    username: string,\r\n    password: string,\r\n    options: AddUserOptions,\r\n    callback: Callback<Document>\r\n  ): void;\r\n  addUser(\r\n    username: string,\r\n    password?: string | AddUserOptions | Callback<Document>,\r\n    options?: AddUserOptions | Callback<Document>,\r\n    callback?: Callback<Document>\r\n  ): Promise<Document> | void {\r\n    if (typeof password === 'function') {\r\n      (callback = password), (password = undefined), (options = {});\r\n    } else if (typeof password !== 'string') {\r\n      if (typeof options === 'function') {\r\n        (callback = options), (options = password), (password = undefined);\r\n      } else {\r\n        (options = password), (callback = undefined), (password = undefined);\r\n      }\r\n    } else {\r\n      if (typeof options === 'function') (callback = options), (options = {});\r\n    }\r\n\r\n    options = Object.assign({ dbName: 'admin' }, options);\r\n\r\n    return executeOperation(\r\n      this.s.db.s.client,\r\n      new AddUserOperation(this.s.db, username, password, options),\r\n      callback\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Remove a user from a database\r\n   *\r\n   * @param username - The username to remove\r\n   * @param options - Optional settings for the command\r\n   * @param callback - An optional callback, a Promise will be returned if none is provided\r\n   */\r\n  removeUser(username: string): Promise<boolean>;\r\n  removeUser(username: string, options: RemoveUserOptions): Promise<boolean>;\r\n  /** @deprecated Callbacks are deprecated and will be removed in the next major version. See [mongodb-legacy](https://github.com/mongodb-js/nodejs-mongodb-legacy) for migration assistance */\r\n  removeUser(username: string, callback: Callback<boolean>): void;\r\n  /** @deprecated Callbacks are deprecated and will be removed in the next major version. See [mongodb-legacy](https://github.com/mongodb-js/nodejs-mongodb-legacy) for migration assistance */\r\n  removeUser(username: string, options: RemoveUserOptions, callback: Callback<boolean>): void;\r\n  removeUser(\r\n    username: string,\r\n    options?: RemoveUserOptions | Callback<boolean>,\r\n    callback?: Callback<boolean>\r\n  ): Promise<boolean> | void {\r\n    if (typeof options === 'function') (callback = options), (options = {});\r\n    options = Object.assign({ dbName: 'admin' }, options);\r\n\r\n    return executeOperation(\r\n      this.s.db.s.client,\r\n      new RemoveUserOperation(this.s.db, username, options),\r\n      callback\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Validate an existing collection\r\n   *\r\n   * @param collectionName - The name of the collection to validate.\r\n   * @param options - Optional settings for the command\r\n   * @param callback - An optional callback, a Promise will be returned if none is provided\r\n   */\r\n  validateCollection(collectionName: string): Promise<Document>;\r\n  validateCollection(collectionName: string, options: ValidateCollectionOptions): Promise<Document>;\r\n  /** @deprecated Callbacks are deprecated and will be removed in the next major version. See [mongodb-legacy](https://github.com/mongodb-js/nodejs-mongodb-legacy) for migration assistance */\r\n  validateCollection(collectionName: string, callback: Callback<Document>): void;\r\n  /** @deprecated Callbacks are deprecated and will be removed in the next major version. See [mongodb-legacy](https://github.com/mongodb-js/nodejs-mongodb-legacy) for migration assistance */\r\n  validateCollection(\r\n    collectionName: string,\r\n    options: ValidateCollectionOptions,\r\n    callback: Callback<Document>\r\n  ): void;\r\n  validateCollection(\r\n    collectionName: string,\r\n    options?: ValidateCollectionOptions | Callback<Document>,\r\n    callback?: Callback<Document>\r\n  ): Promise<Document> | void {\r\n    if (typeof options === 'function') (callback = options), (options = {});\r\n    options = options ?? {};\r\n\r\n    return executeOperation(\r\n      this.s.db.s.client,\r\n      new ValidateCollectionOperation(this, collectionName, options),\r\n      callback\r\n    );\r\n  }\r\n\r\n  /**\r\n   * List the available databases\r\n   *\r\n   * @param options - Optional settings for the command\r\n   * @param callback - An optional callback, a Promise will be returned if none is provided\r\n   */\r\n  listDatabases(): Promise<ListDatabasesResult>;\r\n  listDatabases(options: ListDatabasesOptions): Promise<ListDatabasesResult>;\r\n  /** @deprecated Callbacks are deprecated and will be removed in the next major version. See [mongodb-legacy](https://github.com/mongodb-js/nodejs-mongodb-legacy) for migration assistance */\r\n  listDatabases(callback: Callback<ListDatabasesResult>): void;\r\n  /** @deprecated Callbacks are deprecated and will be removed in the next major version. See [mongodb-legacy](https://github.com/mongodb-js/nodejs-mongodb-legacy) for migration assistance */\r\n  listDatabases(options: ListDatabasesOptions, callback: Callback<ListDatabasesResult>): void;\r\n  listDatabases(\r\n    options?: ListDatabasesOptions | Callback<ListDatabasesResult>,\r\n    callback?: Callback<ListDatabasesResult>\r\n  ): Promise<ListDatabasesResult> | void {\r\n    if (typeof options === 'function') (callback = options), (options = {});\r\n    options = options ?? {};\r\n\r\n    return executeOperation(\r\n      this.s.db.s.client,\r\n      new ListDatabasesOperation(this.s.db, options),\r\n      callback\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get ReplicaSet status\r\n   *\r\n   * @param options - Optional settings for the command\r\n   * @param callback - An optional callback, a Promise will be returned if none is provided\r\n   */\r\n  replSetGetStatus(): Promise<Document>;\r\n  replSetGetStatus(options: CommandOperationOptions): Promise<Document>;\r\n  /** @deprecated Callbacks are deprecated and will be removed in the next major version. See [mongodb-legacy](https://github.com/mongodb-js/nodejs-mongodb-legacy) for migration assistance */\r\n  replSetGetStatus(callback: Callback<Document>): void;\r\n  /** @deprecated Callbacks are deprecated and will be removed in the next major version. See [mongodb-legacy](https://github.com/mongodb-js/nodejs-mongodb-legacy) for migration assistance */\r\n  replSetGetStatus(options: CommandOperationOptions, callback: Callback<Document>): void;\r\n  replSetGetStatus(\r\n    options?: CommandOperationOptions | Callback<Document>,\r\n    callback?: Callback<Document>\r\n  ): Promise<Document> | void {\r\n    if (typeof options === 'function') (callback = options), (options = {});\r\n    options = options ?? {};\r\n    return this.command({ replSetGetStatus: 1 }, options, callback as Callback<Document>);\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}