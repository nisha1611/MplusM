{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.fromTemporaryCredentials = void 0;\nconst client_sts_1 = require(\"@aws-sdk/client-sts\");\nconst property_provider_1 = require(\"@aws-sdk/property-provider\");\nconst fromTemporaryCredentials = options => {\n  let stsClient;\n  return async () => {\n    var _a;\n    const params = {\n      ...options.params,\n      RoleSessionName: (_a = options.params.RoleSessionName) !== null && _a !== void 0 ? _a : \"aws-sdk-js-\" + Date.now()\n    };\n    if (params === null || params === void 0 ? void 0 : params.SerialNumber) {\n      if (!options.mfaCodeProvider) {\n        throw new property_provider_1.CredentialsProviderError(`Temporary credential requires multi-factor authentication,` + ` but no MFA code callback was provided.`, false);\n      }\n      params.TokenCode = await options.mfaCodeProvider(params === null || params === void 0 ? void 0 : params.SerialNumber);\n    }\n    if (!stsClient) stsClient = new client_sts_1.STSClient({\n      ...options.clientConfig,\n      credentials: options.masterCredentials\n    });\n    if (options.clientPlugins) {\n      for (const plugin of options.clientPlugins) {\n        stsClient.middlewareStack.use(plugin);\n      }\n    }\n    const {\n      Credentials\n    } = await stsClient.send(new client_sts_1.AssumeRoleCommand(params));\n    if (!Credentials || !Credentials.AccessKeyId || !Credentials.SecretAccessKey) {\n      throw new property_provider_1.CredentialsProviderError(`Invalid response from STS.assumeRole call with role ${params.RoleArn}`);\n    }\n    return {\n      accessKeyId: Credentials.AccessKeyId,\n      secretAccessKey: Credentials.SecretAccessKey,\n      sessionToken: Credentials.SessionToken,\n      expiration: Credentials.Expiration\n    };\n  };\n};\nexports.fromTemporaryCredentials = fromTemporaryCredentials;","map":{"version":3,"names":["Object","defineProperty","exports","value","fromTemporaryCredentials","client_sts_1","require","property_provider_1","options","stsClient","_a","params","RoleSessionName","Date","now","SerialNumber","mfaCodeProvider","CredentialsProviderError","TokenCode","STSClient","clientConfig","credentials","masterCredentials","clientPlugins","plugin","middlewareStack","use","Credentials","send","AssumeRoleCommand","AccessKeyId","SecretAccessKey","RoleArn","accessKeyId","secretAccessKey","sessionToken","SessionToken","expiration","Expiration"],"sources":["C:/Users/91930/Desktop/Github projects/Pharmacy Demo/back-end/node_modules/@aws-sdk/credential-providers/dist-cjs/fromTemporaryCredentials.js"],"sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.fromTemporaryCredentials = void 0;\r\nconst client_sts_1 = require(\"@aws-sdk/client-sts\");\r\nconst property_provider_1 = require(\"@aws-sdk/property-provider\");\r\nconst fromTemporaryCredentials = (options) => {\r\n    let stsClient;\r\n    return async () => {\r\n        var _a;\r\n        const params = { ...options.params, RoleSessionName: (_a = options.params.RoleSessionName) !== null && _a !== void 0 ? _a : \"aws-sdk-js-\" + Date.now() };\r\n        if (params === null || params === void 0 ? void 0 : params.SerialNumber) {\r\n            if (!options.mfaCodeProvider) {\r\n                throw new property_provider_1.CredentialsProviderError(`Temporary credential requires multi-factor authentication,` + ` but no MFA code callback was provided.`, false);\r\n            }\r\n            params.TokenCode = await options.mfaCodeProvider(params === null || params === void 0 ? void 0 : params.SerialNumber);\r\n        }\r\n        if (!stsClient)\r\n            stsClient = new client_sts_1.STSClient({ ...options.clientConfig, credentials: options.masterCredentials });\r\n        if (options.clientPlugins) {\r\n            for (const plugin of options.clientPlugins) {\r\n                stsClient.middlewareStack.use(plugin);\r\n            }\r\n        }\r\n        const { Credentials } = await stsClient.send(new client_sts_1.AssumeRoleCommand(params));\r\n        if (!Credentials || !Credentials.AccessKeyId || !Credentials.SecretAccessKey) {\r\n            throw new property_provider_1.CredentialsProviderError(`Invalid response from STS.assumeRole call with role ${params.RoleArn}`);\r\n        }\r\n        return {\r\n            accessKeyId: Credentials.AccessKeyId,\r\n            secretAccessKey: Credentials.SecretAccessKey,\r\n            sessionToken: Credentials.SessionToken,\r\n            expiration: Credentials.Expiration,\r\n        };\r\n    };\r\n};\r\nexports.fromTemporaryCredentials = fromTemporaryCredentials;\r\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,wBAAwB,GAAG,KAAK,CAAC;AACzC,MAAMC,YAAY,GAAGC,OAAO,CAAC,qBAAqB,CAAC;AACnD,MAAMC,mBAAmB,GAAGD,OAAO,CAAC,4BAA4B,CAAC;AACjE,MAAMF,wBAAwB,GAAII,OAAO,IAAK;EAC1C,IAAIC,SAAS;EACb,OAAO,YAAY;IACf,IAAIC,EAAE;IACN,MAAMC,MAAM,GAAG;MAAE,GAAGH,OAAO,CAACG,MAAM;MAAEC,eAAe,EAAE,CAACF,EAAE,GAAGF,OAAO,CAACG,MAAM,CAACC,eAAe,MAAM,IAAI,IAAIF,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAG,aAAa,GAAGG,IAAI,CAACC,GAAG;IAAG,CAAC;IACxJ,IAAIH,MAAM,KAAK,IAAI,IAAIA,MAAM,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,MAAM,CAACI,YAAY,EAAE;MACrE,IAAI,CAACP,OAAO,CAACQ,eAAe,EAAE;QAC1B,MAAM,IAAIT,mBAAmB,CAACU,wBAAwB,CAAE,4DAA2D,GAAI,yCAAwC,EAAE,KAAK,CAAC;MAC3K;MACAN,MAAM,CAACO,SAAS,GAAG,MAAMV,OAAO,CAACQ,eAAe,CAACL,MAAM,KAAK,IAAI,IAAIA,MAAM,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,MAAM,CAACI,YAAY,CAAC;IACzH;IACA,IAAI,CAACN,SAAS,EACVA,SAAS,GAAG,IAAIJ,YAAY,CAACc,SAAS,CAAC;MAAE,GAAGX,OAAO,CAACY,YAAY;MAAEC,WAAW,EAAEb,OAAO,CAACc;IAAkB,CAAC,CAAC;IAC/G,IAAId,OAAO,CAACe,aAAa,EAAE;MACvB,KAAK,MAAMC,MAAM,IAAIhB,OAAO,CAACe,aAAa,EAAE;QACxCd,SAAS,CAACgB,eAAe,CAACC,GAAG,CAACF,MAAM,CAAC;MACzC;IACJ;IACA,MAAM;MAAEG;IAAY,CAAC,GAAG,MAAMlB,SAAS,CAACmB,IAAI,CAAC,IAAIvB,YAAY,CAACwB,iBAAiB,CAAClB,MAAM,CAAC,CAAC;IACxF,IAAI,CAACgB,WAAW,IAAI,CAACA,WAAW,CAACG,WAAW,IAAI,CAACH,WAAW,CAACI,eAAe,EAAE;MAC1E,MAAM,IAAIxB,mBAAmB,CAACU,wBAAwB,CAAE,uDAAsDN,MAAM,CAACqB,OAAQ,EAAC,CAAC;IACnI;IACA,OAAO;MACHC,WAAW,EAAEN,WAAW,CAACG,WAAW;MACpCI,eAAe,EAAEP,WAAW,CAACI,eAAe;MAC5CI,YAAY,EAAER,WAAW,CAACS,YAAY;MACtCC,UAAU,EAAEV,WAAW,CAACW;IAC5B,CAAC;EACL,CAAC;AACL,CAAC;AACDpC,OAAO,CAACE,wBAAwB,GAAGA,wBAAwB"},"metadata":{},"sourceType":"script","externalDependencies":[]}