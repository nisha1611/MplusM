{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.NodeHttp2Handler = void 0;\nconst protocol_http_1 = require(\"@aws-sdk/protocol-http\");\nconst querystring_builder_1 = require(\"@aws-sdk/querystring-builder\");\nconst http2_1 = require(\"http2\");\nconst get_transformed_headers_1 = require(\"./get-transformed-headers\");\nconst write_request_body_1 = require(\"./write-request-body\");\nclass NodeHttp2Handler {\n  constructor(options) {\n    this.metadata = {\n      handlerProtocol: \"h2\"\n    };\n    this.configProvider = new Promise((resolve, reject) => {\n      if (typeof options === \"function\") {\n        options().then(opts => {\n          resolve(opts || {});\n        }).catch(reject);\n      } else {\n        resolve(options || {});\n      }\n    });\n    this.sessionCache = new Map();\n  }\n  destroy() {\n    for (const sessions of this.sessionCache.values()) {\n      sessions.forEach(session => this.destroySession(session));\n    }\n    this.sessionCache.clear();\n  }\n  async handle(request) {\n    let {\n      abortSignal\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    if (!this.config) {\n      this.config = await this.configProvider;\n    }\n    const {\n      requestTimeout,\n      disableConcurrentStreams\n    } = this.config;\n    return new Promise((resolve, rejectOriginal) => {\n      let fulfilled = false;\n      if (abortSignal === null || abortSignal === void 0 ? void 0 : abortSignal.aborted) {\n        fulfilled = true;\n        const abortError = new Error(\"Request aborted\");\n        abortError.name = \"AbortError\";\n        rejectOriginal(abortError);\n        return;\n      }\n      const {\n        hostname,\n        method,\n        port,\n        protocol,\n        path,\n        query\n      } = request;\n      const authority = `${protocol}//${hostname}${port ? `:${port}` : \"\"}`;\n      const session = this.getSession(authority, disableConcurrentStreams || false);\n      const reject = err => {\n        if (disableConcurrentStreams) {\n          this.destroySession(session);\n        }\n        fulfilled = true;\n        rejectOriginal(err);\n      };\n      const queryString = (0, querystring_builder_1.buildQueryString)(query || {});\n      const req = session.request({\n        ...request.headers,\n        [http2_1.constants.HTTP2_HEADER_PATH]: queryString ? `${path}?${queryString}` : path,\n        [http2_1.constants.HTTP2_HEADER_METHOD]: method\n      });\n      session.ref();\n      req.on(\"response\", headers => {\n        const httpResponse = new protocol_http_1.HttpResponse({\n          statusCode: headers[\":status\"] || -1,\n          headers: (0, get_transformed_headers_1.getTransformedHeaders)(headers),\n          body: req\n        });\n        fulfilled = true;\n        resolve({\n          response: httpResponse\n        });\n        if (disableConcurrentStreams) {\n          session.close();\n          this.deleteSessionFromCache(authority, session);\n        }\n      });\n      if (requestTimeout) {\n        req.setTimeout(requestTimeout, () => {\n          req.close();\n          const timeoutError = new Error(`Stream timed out because of no activity for ${requestTimeout} ms`);\n          timeoutError.name = \"TimeoutError\";\n          reject(timeoutError);\n        });\n      }\n      if (abortSignal) {\n        abortSignal.onabort = () => {\n          req.close();\n          const abortError = new Error(\"Request aborted\");\n          abortError.name = \"AbortError\";\n          reject(abortError);\n        };\n      }\n      req.on(\"frameError\", (type, code, id) => {\n        reject(new Error(`Frame type id ${type} in stream id ${id} has failed with code ${code}.`));\n      });\n      req.on(\"error\", reject);\n      req.on(\"aborted\", () => {\n        reject(new Error(`HTTP/2 stream is abnormally aborted in mid-communication with result code ${req.rstCode}.`));\n      });\n      req.on(\"close\", () => {\n        session.unref();\n        if (disableConcurrentStreams) {\n          session.destroy();\n        }\n        if (!fulfilled) {\n          reject(new Error(\"Unexpected error: http2 request did not get a response\"));\n        }\n      });\n      (0, write_request_body_1.writeRequestBody)(req, request);\n    });\n  }\n  getSession(authority, disableConcurrentStreams) {\n    var _a;\n    const sessionCache = this.sessionCache;\n    const existingSessions = sessionCache.get(authority) || [];\n    if (existingSessions.length > 0 && !disableConcurrentStreams) return existingSessions[0];\n    const newSession = (0, http2_1.connect)(authority);\n    newSession.unref();\n    const destroySessionCb = () => {\n      this.destroySession(newSession);\n      this.deleteSessionFromCache(authority, newSession);\n    };\n    newSession.on(\"goaway\", destroySessionCb);\n    newSession.on(\"error\", destroySessionCb);\n    newSession.on(\"frameError\", destroySessionCb);\n    newSession.on(\"close\", () => this.deleteSessionFromCache(authority, newSession));\n    if ((_a = this.config) === null || _a === void 0 ? void 0 : _a.sessionTimeout) {\n      newSession.setTimeout(this.config.sessionTimeout, destroySessionCb);\n    }\n    existingSessions.push(newSession);\n    sessionCache.set(authority, existingSessions);\n    return newSession;\n  }\n  destroySession(session) {\n    if (!session.destroyed) {\n      session.destroy();\n    }\n  }\n  deleteSessionFromCache(authority, session) {\n    const existingSessions = this.sessionCache.get(authority) || [];\n    if (!existingSessions.includes(session)) {\n      return;\n    }\n    this.sessionCache.set(authority, existingSessions.filter(s => s !== session));\n  }\n}\nexports.NodeHttp2Handler = NodeHttp2Handler;","map":{"version":3,"names":["Object","defineProperty","exports","value","NodeHttp2Handler","protocol_http_1","require","querystring_builder_1","http2_1","get_transformed_headers_1","write_request_body_1","constructor","options","metadata","handlerProtocol","configProvider","Promise","resolve","reject","then","opts","catch","sessionCache","Map","destroy","sessions","values","forEach","session","destroySession","clear","handle","request","abortSignal","config","requestTimeout","disableConcurrentStreams","rejectOriginal","fulfilled","aborted","abortError","Error","name","hostname","method","port","protocol","path","query","authority","getSession","err","queryString","buildQueryString","req","headers","constants","HTTP2_HEADER_PATH","HTTP2_HEADER_METHOD","ref","on","httpResponse","HttpResponse","statusCode","getTransformedHeaders","body","response","close","deleteSessionFromCache","setTimeout","timeoutError","onabort","type","code","id","rstCode","unref","writeRequestBody","_a","existingSessions","get","length","newSession","connect","destroySessionCb","sessionTimeout","push","set","destroyed","includes","filter","s"],"sources":["C:/Users/91930/Desktop/Github projects/Pharmacy Demo/back-end/node_modules/@aws-sdk/node-http-handler/dist-cjs/node-http2-handler.js"],"sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.NodeHttp2Handler = void 0;\r\nconst protocol_http_1 = require(\"@aws-sdk/protocol-http\");\r\nconst querystring_builder_1 = require(\"@aws-sdk/querystring-builder\");\r\nconst http2_1 = require(\"http2\");\r\nconst get_transformed_headers_1 = require(\"./get-transformed-headers\");\r\nconst write_request_body_1 = require(\"./write-request-body\");\r\nclass NodeHttp2Handler {\r\n    constructor(options) {\r\n        this.metadata = { handlerProtocol: \"h2\" };\r\n        this.configProvider = new Promise((resolve, reject) => {\r\n            if (typeof options === \"function\") {\r\n                options()\r\n                    .then((opts) => {\r\n                    resolve(opts || {});\r\n                })\r\n                    .catch(reject);\r\n            }\r\n            else {\r\n                resolve(options || {});\r\n            }\r\n        });\r\n        this.sessionCache = new Map();\r\n    }\r\n    destroy() {\r\n        for (const sessions of this.sessionCache.values()) {\r\n            sessions.forEach((session) => this.destroySession(session));\r\n        }\r\n        this.sessionCache.clear();\r\n    }\r\n    async handle(request, { abortSignal } = {}) {\r\n        if (!this.config) {\r\n            this.config = await this.configProvider;\r\n        }\r\n        const { requestTimeout, disableConcurrentStreams } = this.config;\r\n        return new Promise((resolve, rejectOriginal) => {\r\n            let fulfilled = false;\r\n            if (abortSignal === null || abortSignal === void 0 ? void 0 : abortSignal.aborted) {\r\n                fulfilled = true;\r\n                const abortError = new Error(\"Request aborted\");\r\n                abortError.name = \"AbortError\";\r\n                rejectOriginal(abortError);\r\n                return;\r\n            }\r\n            const { hostname, method, port, protocol, path, query } = request;\r\n            const authority = `${protocol}//${hostname}${port ? `:${port}` : \"\"}`;\r\n            const session = this.getSession(authority, disableConcurrentStreams || false);\r\n            const reject = (err) => {\r\n                if (disableConcurrentStreams) {\r\n                    this.destroySession(session);\r\n                }\r\n                fulfilled = true;\r\n                rejectOriginal(err);\r\n            };\r\n            const queryString = (0, querystring_builder_1.buildQueryString)(query || {});\r\n            const req = session.request({\r\n                ...request.headers,\r\n                [http2_1.constants.HTTP2_HEADER_PATH]: queryString ? `${path}?${queryString}` : path,\r\n                [http2_1.constants.HTTP2_HEADER_METHOD]: method,\r\n            });\r\n            session.ref();\r\n            req.on(\"response\", (headers) => {\r\n                const httpResponse = new protocol_http_1.HttpResponse({\r\n                    statusCode: headers[\":status\"] || -1,\r\n                    headers: (0, get_transformed_headers_1.getTransformedHeaders)(headers),\r\n                    body: req,\r\n                });\r\n                fulfilled = true;\r\n                resolve({ response: httpResponse });\r\n                if (disableConcurrentStreams) {\r\n                    session.close();\r\n                    this.deleteSessionFromCache(authority, session);\r\n                }\r\n            });\r\n            if (requestTimeout) {\r\n                req.setTimeout(requestTimeout, () => {\r\n                    req.close();\r\n                    const timeoutError = new Error(`Stream timed out because of no activity for ${requestTimeout} ms`);\r\n                    timeoutError.name = \"TimeoutError\";\r\n                    reject(timeoutError);\r\n                });\r\n            }\r\n            if (abortSignal) {\r\n                abortSignal.onabort = () => {\r\n                    req.close();\r\n                    const abortError = new Error(\"Request aborted\");\r\n                    abortError.name = \"AbortError\";\r\n                    reject(abortError);\r\n                };\r\n            }\r\n            req.on(\"frameError\", (type, code, id) => {\r\n                reject(new Error(`Frame type id ${type} in stream id ${id} has failed with code ${code}.`));\r\n            });\r\n            req.on(\"error\", reject);\r\n            req.on(\"aborted\", () => {\r\n                reject(new Error(`HTTP/2 stream is abnormally aborted in mid-communication with result code ${req.rstCode}.`));\r\n            });\r\n            req.on(\"close\", () => {\r\n                session.unref();\r\n                if (disableConcurrentStreams) {\r\n                    session.destroy();\r\n                }\r\n                if (!fulfilled) {\r\n                    reject(new Error(\"Unexpected error: http2 request did not get a response\"));\r\n                }\r\n            });\r\n            (0, write_request_body_1.writeRequestBody)(req, request);\r\n        });\r\n    }\r\n    getSession(authority, disableConcurrentStreams) {\r\n        var _a;\r\n        const sessionCache = this.sessionCache;\r\n        const existingSessions = sessionCache.get(authority) || [];\r\n        if (existingSessions.length > 0 && !disableConcurrentStreams)\r\n            return existingSessions[0];\r\n        const newSession = (0, http2_1.connect)(authority);\r\n        newSession.unref();\r\n        const destroySessionCb = () => {\r\n            this.destroySession(newSession);\r\n            this.deleteSessionFromCache(authority, newSession);\r\n        };\r\n        newSession.on(\"goaway\", destroySessionCb);\r\n        newSession.on(\"error\", destroySessionCb);\r\n        newSession.on(\"frameError\", destroySessionCb);\r\n        newSession.on(\"close\", () => this.deleteSessionFromCache(authority, newSession));\r\n        if ((_a = this.config) === null || _a === void 0 ? void 0 : _a.sessionTimeout) {\r\n            newSession.setTimeout(this.config.sessionTimeout, destroySessionCb);\r\n        }\r\n        existingSessions.push(newSession);\r\n        sessionCache.set(authority, existingSessions);\r\n        return newSession;\r\n    }\r\n    destroySession(session) {\r\n        if (!session.destroyed) {\r\n            session.destroy();\r\n        }\r\n    }\r\n    deleteSessionFromCache(authority, session) {\r\n        const existingSessions = this.sessionCache.get(authority) || [];\r\n        if (!existingSessions.includes(session)) {\r\n            return;\r\n        }\r\n        this.sessionCache.set(authority, existingSessions.filter((s) => s !== session));\r\n    }\r\n}\r\nexports.NodeHttp2Handler = NodeHttp2Handler;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}