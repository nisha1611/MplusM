{"ast":null,"code":"/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Tobias Koppers @sokra\r\n*/\n\n\"use strict\";\n\nconst RuntimeGlobals = require(\"../RuntimeGlobals\");\nconst StartupChunkDependenciesPlugin = require(\"../runtime/StartupChunkDependenciesPlugin\");\nconst ImportScriptsChunkLoadingRuntimeModule = require(\"./ImportScriptsChunkLoadingRuntimeModule\");\n\n/** @typedef {import(\"../Compiler\")} Compiler */\n\nclass ImportScriptsChunkLoadingPlugin {\n  /**\r\n   * Apply the plugin\r\n   * @param {Compiler} compiler the compiler instance\r\n   * @returns {void}\r\n   */\n  apply(compiler) {\n    new StartupChunkDependenciesPlugin({\n      chunkLoading: \"import-scripts\",\n      asyncChunkLoading: true\n    }).apply(compiler);\n    compiler.hooks.thisCompilation.tap(\"ImportScriptsChunkLoadingPlugin\", compilation => {\n      const globalChunkLoading = compilation.outputOptions.chunkLoading;\n      const isEnabledForChunk = chunk => {\n        const options = chunk.getEntryOptions();\n        const chunkLoading = options && options.chunkLoading !== undefined ? options.chunkLoading : globalChunkLoading;\n        return chunkLoading === \"import-scripts\";\n      };\n      const onceForChunkSet = new WeakSet();\n      const handler = (chunk, set) => {\n        if (onceForChunkSet.has(chunk)) return;\n        onceForChunkSet.add(chunk);\n        if (!isEnabledForChunk(chunk)) return;\n        const withCreateScriptUrl = !!compilation.outputOptions.trustedTypes;\n        set.add(RuntimeGlobals.moduleFactoriesAddOnly);\n        set.add(RuntimeGlobals.hasOwnProperty);\n        if (withCreateScriptUrl) {\n          set.add(RuntimeGlobals.createScriptUrl);\n        }\n        compilation.addRuntimeModule(chunk, new ImportScriptsChunkLoadingRuntimeModule(set, withCreateScriptUrl));\n      };\n      compilation.hooks.runtimeRequirementInTree.for(RuntimeGlobals.ensureChunkHandlers).tap(\"ImportScriptsChunkLoadingPlugin\", handler);\n      compilation.hooks.runtimeRequirementInTree.for(RuntimeGlobals.hmrDownloadUpdateHandlers).tap(\"ImportScriptsChunkLoadingPlugin\", handler);\n      compilation.hooks.runtimeRequirementInTree.for(RuntimeGlobals.hmrDownloadManifest).tap(\"ImportScriptsChunkLoadingPlugin\", handler);\n      compilation.hooks.runtimeRequirementInTree.for(RuntimeGlobals.baseURI).tap(\"ImportScriptsChunkLoadingPlugin\", handler);\n      compilation.hooks.runtimeRequirementInTree.for(RuntimeGlobals.ensureChunkHandlers).tap(\"ImportScriptsChunkLoadingPlugin\", (chunk, set) => {\n        if (!isEnabledForChunk(chunk)) return;\n        set.add(RuntimeGlobals.publicPath);\n        set.add(RuntimeGlobals.getChunkScriptFilename);\n      });\n      compilation.hooks.runtimeRequirementInTree.for(RuntimeGlobals.hmrDownloadUpdateHandlers).tap(\"ImportScriptsChunkLoadingPlugin\", (chunk, set) => {\n        if (!isEnabledForChunk(chunk)) return;\n        set.add(RuntimeGlobals.publicPath);\n        set.add(RuntimeGlobals.getChunkUpdateScriptFilename);\n        set.add(RuntimeGlobals.moduleCache);\n        set.add(RuntimeGlobals.hmrModuleData);\n        set.add(RuntimeGlobals.moduleFactoriesAddOnly);\n      });\n      compilation.hooks.runtimeRequirementInTree.for(RuntimeGlobals.hmrDownloadManifest).tap(\"ImportScriptsChunkLoadingPlugin\", (chunk, set) => {\n        if (!isEnabledForChunk(chunk)) return;\n        set.add(RuntimeGlobals.publicPath);\n        set.add(RuntimeGlobals.getUpdateManifestFilename);\n      });\n    });\n  }\n}\nmodule.exports = ImportScriptsChunkLoadingPlugin;","map":{"version":3,"names":["RuntimeGlobals","require","StartupChunkDependenciesPlugin","ImportScriptsChunkLoadingRuntimeModule","ImportScriptsChunkLoadingPlugin","apply","compiler","chunkLoading","asyncChunkLoading","hooks","thisCompilation","tap","compilation","globalChunkLoading","outputOptions","isEnabledForChunk","chunk","options","getEntryOptions","undefined","onceForChunkSet","WeakSet","handler","set","has","add","withCreateScriptUrl","trustedTypes","moduleFactoriesAddOnly","hasOwnProperty","createScriptUrl","addRuntimeModule","runtimeRequirementInTree","for","ensureChunkHandlers","hmrDownloadUpdateHandlers","hmrDownloadManifest","baseURI","publicPath","getChunkScriptFilename","getChunkUpdateScriptFilename","moduleCache","hmrModuleData","getUpdateManifestFilename","module","exports"],"sources":["C:/Users/91930/Desktop/Github projects/Pharmacy Demo/front-end/node_modules/webpack/lib/webworker/ImportScriptsChunkLoadingPlugin.js"],"sourcesContent":["/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Tobias Koppers @sokra\r\n*/\r\n\r\n\"use strict\";\r\n\r\nconst RuntimeGlobals = require(\"../RuntimeGlobals\");\r\nconst StartupChunkDependenciesPlugin = require(\"../runtime/StartupChunkDependenciesPlugin\");\r\nconst ImportScriptsChunkLoadingRuntimeModule = require(\"./ImportScriptsChunkLoadingRuntimeModule\");\r\n\r\n/** @typedef {import(\"../Compiler\")} Compiler */\r\n\r\nclass ImportScriptsChunkLoadingPlugin {\r\n\t/**\r\n\t * Apply the plugin\r\n\t * @param {Compiler} compiler the compiler instance\r\n\t * @returns {void}\r\n\t */\r\n\tapply(compiler) {\r\n\t\tnew StartupChunkDependenciesPlugin({\r\n\t\t\tchunkLoading: \"import-scripts\",\r\n\t\t\tasyncChunkLoading: true\r\n\t\t}).apply(compiler);\r\n\t\tcompiler.hooks.thisCompilation.tap(\r\n\t\t\t\"ImportScriptsChunkLoadingPlugin\",\r\n\t\t\tcompilation => {\r\n\t\t\t\tconst globalChunkLoading = compilation.outputOptions.chunkLoading;\r\n\t\t\t\tconst isEnabledForChunk = chunk => {\r\n\t\t\t\t\tconst options = chunk.getEntryOptions();\r\n\t\t\t\t\tconst chunkLoading =\r\n\t\t\t\t\t\toptions && options.chunkLoading !== undefined\r\n\t\t\t\t\t\t\t? options.chunkLoading\r\n\t\t\t\t\t\t\t: globalChunkLoading;\r\n\t\t\t\t\treturn chunkLoading === \"import-scripts\";\r\n\t\t\t\t};\r\n\t\t\t\tconst onceForChunkSet = new WeakSet();\r\n\t\t\t\tconst handler = (chunk, set) => {\r\n\t\t\t\t\tif (onceForChunkSet.has(chunk)) return;\r\n\t\t\t\t\tonceForChunkSet.add(chunk);\r\n\t\t\t\t\tif (!isEnabledForChunk(chunk)) return;\r\n\t\t\t\t\tconst withCreateScriptUrl = !!compilation.outputOptions.trustedTypes;\r\n\t\t\t\t\tset.add(RuntimeGlobals.moduleFactoriesAddOnly);\r\n\t\t\t\t\tset.add(RuntimeGlobals.hasOwnProperty);\r\n\t\t\t\t\tif (withCreateScriptUrl) {\r\n\t\t\t\t\t\tset.add(RuntimeGlobals.createScriptUrl);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcompilation.addRuntimeModule(\r\n\t\t\t\t\t\tchunk,\r\n\t\t\t\t\t\tnew ImportScriptsChunkLoadingRuntimeModule(set, withCreateScriptUrl)\r\n\t\t\t\t\t);\r\n\t\t\t\t};\r\n\t\t\t\tcompilation.hooks.runtimeRequirementInTree\r\n\t\t\t\t\t.for(RuntimeGlobals.ensureChunkHandlers)\r\n\t\t\t\t\t.tap(\"ImportScriptsChunkLoadingPlugin\", handler);\r\n\t\t\t\tcompilation.hooks.runtimeRequirementInTree\r\n\t\t\t\t\t.for(RuntimeGlobals.hmrDownloadUpdateHandlers)\r\n\t\t\t\t\t.tap(\"ImportScriptsChunkLoadingPlugin\", handler);\r\n\t\t\t\tcompilation.hooks.runtimeRequirementInTree\r\n\t\t\t\t\t.for(RuntimeGlobals.hmrDownloadManifest)\r\n\t\t\t\t\t.tap(\"ImportScriptsChunkLoadingPlugin\", handler);\r\n\t\t\t\tcompilation.hooks.runtimeRequirementInTree\r\n\t\t\t\t\t.for(RuntimeGlobals.baseURI)\r\n\t\t\t\t\t.tap(\"ImportScriptsChunkLoadingPlugin\", handler);\r\n\r\n\t\t\t\tcompilation.hooks.runtimeRequirementInTree\r\n\t\t\t\t\t.for(RuntimeGlobals.ensureChunkHandlers)\r\n\t\t\t\t\t.tap(\"ImportScriptsChunkLoadingPlugin\", (chunk, set) => {\r\n\t\t\t\t\t\tif (!isEnabledForChunk(chunk)) return;\r\n\t\t\t\t\t\tset.add(RuntimeGlobals.publicPath);\r\n\t\t\t\t\t\tset.add(RuntimeGlobals.getChunkScriptFilename);\r\n\t\t\t\t\t});\r\n\t\t\t\tcompilation.hooks.runtimeRequirementInTree\r\n\t\t\t\t\t.for(RuntimeGlobals.hmrDownloadUpdateHandlers)\r\n\t\t\t\t\t.tap(\"ImportScriptsChunkLoadingPlugin\", (chunk, set) => {\r\n\t\t\t\t\t\tif (!isEnabledForChunk(chunk)) return;\r\n\t\t\t\t\t\tset.add(RuntimeGlobals.publicPath);\r\n\t\t\t\t\t\tset.add(RuntimeGlobals.getChunkUpdateScriptFilename);\r\n\t\t\t\t\t\tset.add(RuntimeGlobals.moduleCache);\r\n\t\t\t\t\t\tset.add(RuntimeGlobals.hmrModuleData);\r\n\t\t\t\t\t\tset.add(RuntimeGlobals.moduleFactoriesAddOnly);\r\n\t\t\t\t\t});\r\n\t\t\t\tcompilation.hooks.runtimeRequirementInTree\r\n\t\t\t\t\t.for(RuntimeGlobals.hmrDownloadManifest)\r\n\t\t\t\t\t.tap(\"ImportScriptsChunkLoadingPlugin\", (chunk, set) => {\r\n\t\t\t\t\t\tif (!isEnabledForChunk(chunk)) return;\r\n\t\t\t\t\t\tset.add(RuntimeGlobals.publicPath);\r\n\t\t\t\t\t\tset.add(RuntimeGlobals.getUpdateManifestFilename);\r\n\t\t\t\t\t});\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n}\r\nmodule.exports = ImportScriptsChunkLoadingPlugin;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}