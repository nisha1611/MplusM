{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.resolveCredentialSource = void 0;\nconst credential_provider_env_1 = require(\"@aws-sdk/credential-provider-env\");\nconst credential_provider_imds_1 = require(\"@aws-sdk/credential-provider-imds\");\nconst property_provider_1 = require(\"@aws-sdk/property-provider\");\nconst resolveCredentialSource = (credentialSource, profileName) => {\n  const sourceProvidersMap = {\n    EcsContainer: credential_provider_imds_1.fromContainerMetadata,\n    Ec2InstanceMetadata: credential_provider_imds_1.fromInstanceMetadata,\n    Environment: credential_provider_env_1.fromEnv\n  };\n  if (credentialSource in sourceProvidersMap) {\n    return sourceProvidersMap[credentialSource]();\n  } else {\n    throw new property_provider_1.CredentialsProviderError(`Unsupported credential source in profile ${profileName}. Got ${credentialSource}, ` + `expected EcsContainer or Ec2InstanceMetadata or Environment.`);\n  }\n};\nexports.resolveCredentialSource = resolveCredentialSource;","map":{"version":3,"names":["Object","defineProperty","exports","value","resolveCredentialSource","credential_provider_env_1","require","credential_provider_imds_1","property_provider_1","credentialSource","profileName","sourceProvidersMap","EcsContainer","fromContainerMetadata","Ec2InstanceMetadata","fromInstanceMetadata","Environment","fromEnv","CredentialsProviderError"],"sources":["C:/Users/91930/Desktop/Github projects/Pharmacy Demo/back-end/node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveCredentialSource.js"],"sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.resolveCredentialSource = void 0;\r\nconst credential_provider_env_1 = require(\"@aws-sdk/credential-provider-env\");\r\nconst credential_provider_imds_1 = require(\"@aws-sdk/credential-provider-imds\");\r\nconst property_provider_1 = require(\"@aws-sdk/property-provider\");\r\nconst resolveCredentialSource = (credentialSource, profileName) => {\r\n    const sourceProvidersMap = {\r\n        EcsContainer: credential_provider_imds_1.fromContainerMetadata,\r\n        Ec2InstanceMetadata: credential_provider_imds_1.fromInstanceMetadata,\r\n        Environment: credential_provider_env_1.fromEnv,\r\n    };\r\n    if (credentialSource in sourceProvidersMap) {\r\n        return sourceProvidersMap[credentialSource]();\r\n    }\r\n    else {\r\n        throw new property_provider_1.CredentialsProviderError(`Unsupported credential source in profile ${profileName}. Got ${credentialSource}, ` +\r\n            `expected EcsContainer or Ec2InstanceMetadata or Environment.`);\r\n    }\r\n};\r\nexports.resolveCredentialSource = resolveCredentialSource;\r\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,uBAAuB,GAAG,KAAK,CAAC;AACxC,MAAMC,yBAAyB,GAAGC,OAAO,CAAC,kCAAkC,CAAC;AAC7E,MAAMC,0BAA0B,GAAGD,OAAO,CAAC,mCAAmC,CAAC;AAC/E,MAAME,mBAAmB,GAAGF,OAAO,CAAC,4BAA4B,CAAC;AACjE,MAAMF,uBAAuB,GAAG,CAACK,gBAAgB,EAAEC,WAAW,KAAK;EAC/D,MAAMC,kBAAkB,GAAG;IACvBC,YAAY,EAAEL,0BAA0B,CAACM,qBAAqB;IAC9DC,mBAAmB,EAAEP,0BAA0B,CAACQ,oBAAoB;IACpEC,WAAW,EAAEX,yBAAyB,CAACY;EAC3C,CAAC;EACD,IAAIR,gBAAgB,IAAIE,kBAAkB,EAAE;IACxC,OAAOA,kBAAkB,CAACF,gBAAgB,CAAC,EAAE;EACjD,CAAC,MACI;IACD,MAAM,IAAID,mBAAmB,CAACU,wBAAwB,CAAE,4CAA2CR,WAAY,SAAQD,gBAAiB,IAAG,GACtI,8DAA6D,CAAC;EACvE;AACJ,CAAC;AACDP,OAAO,CAACE,uBAAuB,GAAGA,uBAAuB"},"metadata":{},"sourceType":"script","externalDependencies":[]}