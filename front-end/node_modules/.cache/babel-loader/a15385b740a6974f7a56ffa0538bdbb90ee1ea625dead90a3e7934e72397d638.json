{"ast":null,"code":"/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Tobias Koppers @sokra\r\n*/\n\n\"use strict\";\n\nconst makeSerializable = require(\"../util/makeSerializable\");\nconst HarmonyImportDependency = require(\"./HarmonyImportDependency\");\n\n/** @typedef {import(\"webpack-sources\").ReplaceSource} ReplaceSource */\n/** @typedef {import(\"../Dependency\")} Dependency */\n/** @typedef {import(\"../DependencyTemplate\").DependencyTemplateContext} DependencyTemplateContext */\n/** @typedef {import(\"../InitFragment\")} InitFragment */\n/** @typedef {import(\"../Module\")} Module */\n/** @typedef {import(\"../ModuleGraph\")} ModuleGraph */\n/** @typedef {import(\"../ModuleGraphConnection\")} ModuleGraphConnection */\n/** @typedef {import(\"../ModuleGraphConnection\").ConnectionState} ConnectionState */\n/** @typedef {import(\"../util/Hash\")} Hash */\n/** @typedef {import(\"../util/runtime\").RuntimeSpec} RuntimeSpec */\n\nclass HarmonyImportSideEffectDependency extends HarmonyImportDependency {\n  constructor(request, sourceOrder, assertions) {\n    super(request, sourceOrder, assertions);\n  }\n  get type() {\n    return \"harmony side effect evaluation\";\n  }\n\n  /**\r\n   * @param {ModuleGraph} moduleGraph module graph\r\n   * @returns {null | false | function(ModuleGraphConnection, RuntimeSpec): ConnectionState} function to determine if the connection is active\r\n   */\n  getCondition(moduleGraph) {\n    return connection => {\n      const refModule = connection.resolvedModule;\n      if (!refModule) return true;\n      return refModule.getSideEffectsConnectionState(moduleGraph);\n    };\n  }\n\n  /**\r\n   * @param {ModuleGraph} moduleGraph the module graph\r\n   * @returns {ConnectionState} how this dependency connects the module to referencing modules\r\n   */\n  getModuleEvaluationSideEffectsState(moduleGraph) {\n    const refModule = moduleGraph.getModule(this);\n    if (!refModule) return true;\n    return refModule.getSideEffectsConnectionState(moduleGraph);\n  }\n}\nmakeSerializable(HarmonyImportSideEffectDependency, \"webpack/lib/dependencies/HarmonyImportSideEffectDependency\");\nHarmonyImportSideEffectDependency.Template = class HarmonyImportSideEffectDependencyTemplate extends HarmonyImportDependency.Template {\n  /**\r\n   * @param {Dependency} dependency the dependency for which the template should be applied\r\n   * @param {ReplaceSource} source the current replace source which can be modified\r\n   * @param {DependencyTemplateContext} templateContext the context object\r\n   * @returns {void}\r\n   */\n  apply(dependency, source, templateContext) {\n    const {\n      moduleGraph,\n      concatenationScope\n    } = templateContext;\n    if (concatenationScope) {\n      const module = moduleGraph.getModule(dependency);\n      if (concatenationScope.isModuleInScope(module)) {\n        return;\n      }\n    }\n    super.apply(dependency, source, templateContext);\n  }\n};\nmodule.exports = HarmonyImportSideEffectDependency;","map":{"version":3,"names":["makeSerializable","require","HarmonyImportDependency","HarmonyImportSideEffectDependency","constructor","request","sourceOrder","assertions","type","getCondition","moduleGraph","connection","refModule","resolvedModule","getSideEffectsConnectionState","getModuleEvaluationSideEffectsState","getModule","Template","HarmonyImportSideEffectDependencyTemplate","apply","dependency","source","templateContext","concatenationScope","module","isModuleInScope","exports"],"sources":["C:/Users/91930/Desktop/Github projects/Pharmacy Demo/front-end/node_modules/webpack/lib/dependencies/HarmonyImportSideEffectDependency.js"],"sourcesContent":["/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Tobias Koppers @sokra\r\n*/\r\n\r\n\"use strict\";\r\n\r\nconst makeSerializable = require(\"../util/makeSerializable\");\r\nconst HarmonyImportDependency = require(\"./HarmonyImportDependency\");\r\n\r\n/** @typedef {import(\"webpack-sources\").ReplaceSource} ReplaceSource */\r\n/** @typedef {import(\"../Dependency\")} Dependency */\r\n/** @typedef {import(\"../DependencyTemplate\").DependencyTemplateContext} DependencyTemplateContext */\r\n/** @typedef {import(\"../InitFragment\")} InitFragment */\r\n/** @typedef {import(\"../Module\")} Module */\r\n/** @typedef {import(\"../ModuleGraph\")} ModuleGraph */\r\n/** @typedef {import(\"../ModuleGraphConnection\")} ModuleGraphConnection */\r\n/** @typedef {import(\"../ModuleGraphConnection\").ConnectionState} ConnectionState */\r\n/** @typedef {import(\"../util/Hash\")} Hash */\r\n/** @typedef {import(\"../util/runtime\").RuntimeSpec} RuntimeSpec */\r\n\r\nclass HarmonyImportSideEffectDependency extends HarmonyImportDependency {\r\n\tconstructor(request, sourceOrder, assertions) {\r\n\t\tsuper(request, sourceOrder, assertions);\r\n\t}\r\n\r\n\tget type() {\r\n\t\treturn \"harmony side effect evaluation\";\r\n\t}\r\n\r\n\t/**\r\n\t * @param {ModuleGraph} moduleGraph module graph\r\n\t * @returns {null | false | function(ModuleGraphConnection, RuntimeSpec): ConnectionState} function to determine if the connection is active\r\n\t */\r\n\tgetCondition(moduleGraph) {\r\n\t\treturn connection => {\r\n\t\t\tconst refModule = connection.resolvedModule;\r\n\t\t\tif (!refModule) return true;\r\n\t\t\treturn refModule.getSideEffectsConnectionState(moduleGraph);\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * @param {ModuleGraph} moduleGraph the module graph\r\n\t * @returns {ConnectionState} how this dependency connects the module to referencing modules\r\n\t */\r\n\tgetModuleEvaluationSideEffectsState(moduleGraph) {\r\n\t\tconst refModule = moduleGraph.getModule(this);\r\n\t\tif (!refModule) return true;\r\n\t\treturn refModule.getSideEffectsConnectionState(moduleGraph);\r\n\t}\r\n}\r\n\r\nmakeSerializable(\r\n\tHarmonyImportSideEffectDependency,\r\n\t\"webpack/lib/dependencies/HarmonyImportSideEffectDependency\"\r\n);\r\n\r\nHarmonyImportSideEffectDependency.Template = class HarmonyImportSideEffectDependencyTemplate extends (\r\n\tHarmonyImportDependency.Template\r\n) {\r\n\t/**\r\n\t * @param {Dependency} dependency the dependency for which the template should be applied\r\n\t * @param {ReplaceSource} source the current replace source which can be modified\r\n\t * @param {DependencyTemplateContext} templateContext the context object\r\n\t * @returns {void}\r\n\t */\r\n\tapply(dependency, source, templateContext) {\r\n\t\tconst { moduleGraph, concatenationScope } = templateContext;\r\n\t\tif (concatenationScope) {\r\n\t\t\tconst module = moduleGraph.getModule(dependency);\r\n\t\t\tif (concatenationScope.isModuleInScope(module)) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t}\r\n\t\tsuper.apply(dependency, source, templateContext);\r\n\t}\r\n};\r\n\r\nmodule.exports = HarmonyImportSideEffectDependency;\r\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ,MAAMA,gBAAgB,GAAGC,OAAO,CAAC,0BAA0B,CAAC;AAC5D,MAAMC,uBAAuB,GAAGD,OAAO,CAAC,2BAA2B,CAAC;;AAEpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAME,iCAAiC,SAASD,uBAAuB,CAAC;EACvEE,WAAW,CAACC,OAAO,EAAEC,WAAW,EAAEC,UAAU,EAAE;IAC7C,KAAK,CAACF,OAAO,EAAEC,WAAW,EAAEC,UAAU,CAAC;EACxC;EAEA,IAAIC,IAAI,GAAG;IACV,OAAO,gCAAgC;EACxC;;EAEA;AACD;AACA;AACA;EACCC,YAAY,CAACC,WAAW,EAAE;IACzB,OAAOC,UAAU,IAAI;MACpB,MAAMC,SAAS,GAAGD,UAAU,CAACE,cAAc;MAC3C,IAAI,CAACD,SAAS,EAAE,OAAO,IAAI;MAC3B,OAAOA,SAAS,CAACE,6BAA6B,CAACJ,WAAW,CAAC;IAC5D,CAAC;EACF;;EAEA;AACD;AACA;AACA;EACCK,mCAAmC,CAACL,WAAW,EAAE;IAChD,MAAME,SAAS,GAAGF,WAAW,CAACM,SAAS,CAAC,IAAI,CAAC;IAC7C,IAAI,CAACJ,SAAS,EAAE,OAAO,IAAI;IAC3B,OAAOA,SAAS,CAACE,6BAA6B,CAACJ,WAAW,CAAC;EAC5D;AACD;AAEAV,gBAAgB,CACfG,iCAAiC,EACjC,4DAA4D,CAC5D;AAEDA,iCAAiC,CAACc,QAAQ,GAAG,MAAMC,yCAAyC,SAC3FhB,uBAAuB,CAACe,QAAQ,CAC/B;EACD;AACD;AACA;AACA;AACA;AACA;EACCE,KAAK,CAACC,UAAU,EAAEC,MAAM,EAAEC,eAAe,EAAE;IAC1C,MAAM;MAAEZ,WAAW;MAAEa;IAAmB,CAAC,GAAGD,eAAe;IAC3D,IAAIC,kBAAkB,EAAE;MACvB,MAAMC,MAAM,GAAGd,WAAW,CAACM,SAAS,CAACI,UAAU,CAAC;MAChD,IAAIG,kBAAkB,CAACE,eAAe,CAACD,MAAM,CAAC,EAAE;QAC/C;MACD;IACD;IACA,KAAK,CAACL,KAAK,CAACC,UAAU,EAAEC,MAAM,EAAEC,eAAe,CAAC;EACjD;AACD,CAAC;AAEDE,MAAM,CAACE,OAAO,GAAGvB,iCAAiC"},"metadata":{},"sourceType":"script","externalDependencies":[]}