{"ast":null,"code":"import { loadConfig } from \"@aws-sdk/node-config-provider\";\nimport { parseUrl } from \"@aws-sdk/url-parser\";\nimport { Endpoint as InstanceMetadataEndpoint } from \"../config/Endpoint\";\nimport { ENDPOINT_CONFIG_OPTIONS } from \"../config/EndpointConfigOptions\";\nimport { EndpointMode } from \"../config/EndpointMode\";\nimport { ENDPOINT_MODE_CONFIG_OPTIONS } from \"../config/EndpointModeConfigOptions\";\nexport const getInstanceMetadataEndpoint = async () => parseUrl((await getFromEndpointConfig()) || (await getFromEndpointModeConfig()));\nconst getFromEndpointConfig = async () => loadConfig(ENDPOINT_CONFIG_OPTIONS)();\nconst getFromEndpointModeConfig = async () => {\n  const endpointMode = await loadConfig(ENDPOINT_MODE_CONFIG_OPTIONS)();\n  switch (endpointMode) {\n    case EndpointMode.IPv4:\n      return InstanceMetadataEndpoint.IPv4;\n    case EndpointMode.IPv6:\n      return InstanceMetadataEndpoint.IPv6;\n    default:\n      throw new Error(`Unsupported endpoint mode: ${endpointMode}.` + ` Select from ${Object.values(EndpointMode)}`);\n  }\n};","map":{"version":3,"names":["loadConfig","parseUrl","Endpoint","InstanceMetadataEndpoint","ENDPOINT_CONFIG_OPTIONS","EndpointMode","ENDPOINT_MODE_CONFIG_OPTIONS","getInstanceMetadataEndpoint","getFromEndpointConfig","getFromEndpointModeConfig","endpointMode","IPv4","IPv6","Error","Object","values"],"sources":["C:/Users/91930/Desktop/Github projects/Pharmacy Demo/back-end/node_modules/@aws-sdk/credential-provider-imds/dist-es/utils/getInstanceMetadataEndpoint.js"],"sourcesContent":["import { loadConfig } from \"@aws-sdk/node-config-provider\";\r\nimport { parseUrl } from \"@aws-sdk/url-parser\";\r\nimport { Endpoint as InstanceMetadataEndpoint } from \"../config/Endpoint\";\r\nimport { ENDPOINT_CONFIG_OPTIONS } from \"../config/EndpointConfigOptions\";\r\nimport { EndpointMode } from \"../config/EndpointMode\";\r\nimport { ENDPOINT_MODE_CONFIG_OPTIONS, } from \"../config/EndpointModeConfigOptions\";\r\nexport const getInstanceMetadataEndpoint = async () => parseUrl((await getFromEndpointConfig()) || (await getFromEndpointModeConfig()));\r\nconst getFromEndpointConfig = async () => loadConfig(ENDPOINT_CONFIG_OPTIONS)();\r\nconst getFromEndpointModeConfig = async () => {\r\n    const endpointMode = await loadConfig(ENDPOINT_MODE_CONFIG_OPTIONS)();\r\n    switch (endpointMode) {\r\n        case EndpointMode.IPv4:\r\n            return InstanceMetadataEndpoint.IPv4;\r\n        case EndpointMode.IPv6:\r\n            return InstanceMetadataEndpoint.IPv6;\r\n        default:\r\n            throw new Error(`Unsupported endpoint mode: ${endpointMode}.` + ` Select from ${Object.values(EndpointMode)}`);\r\n    }\r\n};\r\n"],"mappings":"AAAA,SAASA,UAAU,QAAQ,+BAA+B;AAC1D,SAASC,QAAQ,QAAQ,qBAAqB;AAC9C,SAASC,QAAQ,IAAIC,wBAAwB,QAAQ,oBAAoB;AACzE,SAASC,uBAAuB,QAAQ,iCAAiC;AACzE,SAASC,YAAY,QAAQ,wBAAwB;AACrD,SAASC,4BAA4B,QAAS,qCAAqC;AACnF,OAAO,MAAMC,2BAA2B,GAAG,YAAYN,QAAQ,CAAC,CAAC,MAAMO,qBAAqB,EAAE,MAAM,MAAMC,yBAAyB,EAAE,CAAC,CAAC;AACvI,MAAMD,qBAAqB,GAAG,YAAYR,UAAU,CAACI,uBAAuB,CAAC,EAAE;AAC/E,MAAMK,yBAAyB,GAAG,YAAY;EAC1C,MAAMC,YAAY,GAAG,MAAMV,UAAU,CAACM,4BAA4B,CAAC,EAAE;EACrE,QAAQI,YAAY;IAChB,KAAKL,YAAY,CAACM,IAAI;MAClB,OAAOR,wBAAwB,CAACQ,IAAI;IACxC,KAAKN,YAAY,CAACO,IAAI;MAClB,OAAOT,wBAAwB,CAACS,IAAI;IACxC;MACI,MAAM,IAAIC,KAAK,CAAE,8BAA6BH,YAAa,GAAE,GAAI,gBAAeI,MAAM,CAACC,MAAM,CAACV,YAAY,CAAE,EAAC,CAAC;EAAC;AAE3H,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}