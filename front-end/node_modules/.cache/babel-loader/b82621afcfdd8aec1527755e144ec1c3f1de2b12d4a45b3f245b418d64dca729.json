{"ast":null,"code":"/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Tobias Koppers @sokra\r\n*/\n\n\"use strict\";\n\nconst {\n  STAGE_ADVANCED\n} = require(\"../OptimizationStages\");\nconst createSchemaValidation = require(\"../util/create-schema-validation\");\n\n/** @typedef {import(\"../../declarations/plugins/optimize/MinChunkSizePlugin\").MinChunkSizePluginOptions} MinChunkSizePluginOptions */\n/** @typedef {import(\"../Chunk\")} Chunk */\n/** @typedef {import(\"../Compiler\")} Compiler */\n\nconst validate = createSchemaValidation(require(\"../../schemas/plugins/optimize/MinChunkSizePlugin.check.js\"), () => require(\"../../schemas/plugins/optimize/MinChunkSizePlugin.json\"), {\n  name: \"Min Chunk Size Plugin\",\n  baseDataPath: \"options\"\n});\nclass MinChunkSizePlugin {\n  /**\r\n   * @param {MinChunkSizePluginOptions} options options object\r\n   */\n  constructor(options) {\n    validate(options);\n    this.options = options;\n  }\n\n  /**\r\n   * Apply the plugin\r\n   * @param {Compiler} compiler the compiler instance\r\n   * @returns {void}\r\n   */\n  apply(compiler) {\n    const options = this.options;\n    const minChunkSize = options.minChunkSize;\n    compiler.hooks.compilation.tap(\"MinChunkSizePlugin\", compilation => {\n      compilation.hooks.optimizeChunks.tap({\n        name: \"MinChunkSizePlugin\",\n        stage: STAGE_ADVANCED\n      }, chunks => {\n        const chunkGraph = compilation.chunkGraph;\n        const equalOptions = {\n          chunkOverhead: 1,\n          entryChunkMultiplicator: 1\n        };\n        const chunkSizesMap = new Map();\n        /** @type {[Chunk, Chunk][]} */\n        const combinations = [];\n        /** @type {Chunk[]} */\n        const smallChunks = [];\n        const visitedChunks = [];\n        for (const a of chunks) {\n          // check if one of the chunks sizes is smaller than the minChunkSize\n          // and filter pairs that can NOT be integrated!\n          if (chunkGraph.getChunkSize(a, equalOptions) < minChunkSize) {\n            smallChunks.push(a);\n            for (const b of visitedChunks) {\n              if (chunkGraph.canChunksBeIntegrated(b, a)) combinations.push([b, a]);\n            }\n          } else {\n            for (const b of smallChunks) {\n              if (chunkGraph.canChunksBeIntegrated(b, a)) combinations.push([b, a]);\n            }\n          }\n          chunkSizesMap.set(a, chunkGraph.getChunkSize(a, options));\n          visitedChunks.push(a);\n        }\n        const sortedSizeFilteredExtendedPairCombinations = combinations.map(pair => {\n          // extend combination pairs with size and integrated size\n          const a = chunkSizesMap.get(pair[0]);\n          const b = chunkSizesMap.get(pair[1]);\n          const ab = chunkGraph.getIntegratedChunksSize(pair[0], pair[1], options);\n          /** @type {[number, number, Chunk, Chunk]} */\n          const extendedPair = [a + b - ab, ab, pair[0], pair[1]];\n          return extendedPair;\n        }).sort((a, b) => {\n          // sadly javascript does an in place sort here\n          // sort by size\n          const diff = b[0] - a[0];\n          if (diff !== 0) return diff;\n          return a[1] - b[1];\n        });\n        if (sortedSizeFilteredExtendedPairCombinations.length === 0) return;\n        const pair = sortedSizeFilteredExtendedPairCombinations[0];\n        chunkGraph.integrateChunks(pair[2], pair[3]);\n        compilation.chunks.delete(pair[3]);\n        return true;\n      });\n    });\n  }\n}\nmodule.exports = MinChunkSizePlugin;","map":{"version":3,"names":["STAGE_ADVANCED","require","createSchemaValidation","validate","name","baseDataPath","MinChunkSizePlugin","constructor","options","apply","compiler","minChunkSize","hooks","compilation","tap","optimizeChunks","stage","chunks","chunkGraph","equalOptions","chunkOverhead","entryChunkMultiplicator","chunkSizesMap","Map","combinations","smallChunks","visitedChunks","a","getChunkSize","push","b","canChunksBeIntegrated","set","sortedSizeFilteredExtendedPairCombinations","map","pair","get","ab","getIntegratedChunksSize","extendedPair","sort","diff","length","integrateChunks","delete","module","exports"],"sources":["C:/Users/91930/Desktop/Github projects/Pharmacy Demo/front-end/node_modules/webpack/lib/optimize/MinChunkSizePlugin.js"],"sourcesContent":["/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Tobias Koppers @sokra\r\n*/\r\n\r\n\"use strict\";\r\n\r\nconst { STAGE_ADVANCED } = require(\"../OptimizationStages\");\r\nconst createSchemaValidation = require(\"../util/create-schema-validation\");\r\n\r\n/** @typedef {import(\"../../declarations/plugins/optimize/MinChunkSizePlugin\").MinChunkSizePluginOptions} MinChunkSizePluginOptions */\r\n/** @typedef {import(\"../Chunk\")} Chunk */\r\n/** @typedef {import(\"../Compiler\")} Compiler */\r\n\r\nconst validate = createSchemaValidation(\r\n\trequire(\"../../schemas/plugins/optimize/MinChunkSizePlugin.check.js\"),\r\n\t() => require(\"../../schemas/plugins/optimize/MinChunkSizePlugin.json\"),\r\n\t{\r\n\t\tname: \"Min Chunk Size Plugin\",\r\n\t\tbaseDataPath: \"options\"\r\n\t}\r\n);\r\n\r\nclass MinChunkSizePlugin {\r\n\t/**\r\n\t * @param {MinChunkSizePluginOptions} options options object\r\n\t */\r\n\tconstructor(options) {\r\n\t\tvalidate(options);\r\n\t\tthis.options = options;\r\n\t}\r\n\r\n\t/**\r\n\t * Apply the plugin\r\n\t * @param {Compiler} compiler the compiler instance\r\n\t * @returns {void}\r\n\t */\r\n\tapply(compiler) {\r\n\t\tconst options = this.options;\r\n\t\tconst minChunkSize = options.minChunkSize;\r\n\t\tcompiler.hooks.compilation.tap(\"MinChunkSizePlugin\", compilation => {\r\n\t\t\tcompilation.hooks.optimizeChunks.tap(\r\n\t\t\t\t{\r\n\t\t\t\t\tname: \"MinChunkSizePlugin\",\r\n\t\t\t\t\tstage: STAGE_ADVANCED\r\n\t\t\t\t},\r\n\t\t\t\tchunks => {\r\n\t\t\t\t\tconst chunkGraph = compilation.chunkGraph;\r\n\t\t\t\t\tconst equalOptions = {\r\n\t\t\t\t\t\tchunkOverhead: 1,\r\n\t\t\t\t\t\tentryChunkMultiplicator: 1\r\n\t\t\t\t\t};\r\n\r\n\t\t\t\t\tconst chunkSizesMap = new Map();\r\n\t\t\t\t\t/** @type {[Chunk, Chunk][]} */\r\n\t\t\t\t\tconst combinations = [];\r\n\t\t\t\t\t/** @type {Chunk[]} */\r\n\t\t\t\t\tconst smallChunks = [];\r\n\t\t\t\t\tconst visitedChunks = [];\r\n\t\t\t\t\tfor (const a of chunks) {\r\n\t\t\t\t\t\t// check if one of the chunks sizes is smaller than the minChunkSize\r\n\t\t\t\t\t\t// and filter pairs that can NOT be integrated!\r\n\t\t\t\t\t\tif (chunkGraph.getChunkSize(a, equalOptions) < minChunkSize) {\r\n\t\t\t\t\t\t\tsmallChunks.push(a);\r\n\t\t\t\t\t\t\tfor (const b of visitedChunks) {\r\n\t\t\t\t\t\t\t\tif (chunkGraph.canChunksBeIntegrated(b, a))\r\n\t\t\t\t\t\t\t\t\tcombinations.push([b, a]);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tfor (const b of smallChunks) {\r\n\t\t\t\t\t\t\t\tif (chunkGraph.canChunksBeIntegrated(b, a))\r\n\t\t\t\t\t\t\t\t\tcombinations.push([b, a]);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tchunkSizesMap.set(a, chunkGraph.getChunkSize(a, options));\r\n\t\t\t\t\t\tvisitedChunks.push(a);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tconst sortedSizeFilteredExtendedPairCombinations = combinations\r\n\t\t\t\t\t\t.map(pair => {\r\n\t\t\t\t\t\t\t// extend combination pairs with size and integrated size\r\n\t\t\t\t\t\t\tconst a = chunkSizesMap.get(pair[0]);\r\n\t\t\t\t\t\t\tconst b = chunkSizesMap.get(pair[1]);\r\n\t\t\t\t\t\t\tconst ab = chunkGraph.getIntegratedChunksSize(\r\n\t\t\t\t\t\t\t\tpair[0],\r\n\t\t\t\t\t\t\t\tpair[1],\r\n\t\t\t\t\t\t\t\toptions\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t/** @type {[number, number, Chunk, Chunk]} */\r\n\t\t\t\t\t\t\tconst extendedPair = [a + b - ab, ab, pair[0], pair[1]];\r\n\t\t\t\t\t\t\treturn extendedPair;\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t\t.sort((a, b) => {\r\n\t\t\t\t\t\t\t// sadly javascript does an in place sort here\r\n\t\t\t\t\t\t\t// sort by size\r\n\t\t\t\t\t\t\tconst diff = b[0] - a[0];\r\n\t\t\t\t\t\t\tif (diff !== 0) return diff;\r\n\t\t\t\t\t\t\treturn a[1] - b[1];\r\n\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\tif (sortedSizeFilteredExtendedPairCombinations.length === 0) return;\r\n\r\n\t\t\t\t\tconst pair = sortedSizeFilteredExtendedPairCombinations[0];\r\n\r\n\t\t\t\t\tchunkGraph.integrateChunks(pair[2], pair[3]);\r\n\t\t\t\t\tcompilation.chunks.delete(pair[3]);\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t);\r\n\t\t});\r\n\t}\r\n}\r\nmodule.exports = MinChunkSizePlugin;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}