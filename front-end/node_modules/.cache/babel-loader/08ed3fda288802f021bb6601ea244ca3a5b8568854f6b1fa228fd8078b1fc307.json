{"ast":null,"code":"import { CredentialsProviderError } from \"@aws-sdk/property-provider\";\nimport { exec } from \"child_process\";\nimport { promisify } from \"util\";\nimport { getValidatedProcessCredentials } from \"./getValidatedProcessCredentials\";\nexport const resolveProcessCredentials = async (profileName, profiles) => {\n  const profile = profiles[profileName];\n  if (profiles[profileName]) {\n    const credentialProcess = profile[\"credential_process\"];\n    if (credentialProcess !== undefined) {\n      const execPromise = promisify(exec);\n      try {\n        const {\n          stdout\n        } = await execPromise(credentialProcess);\n        let data;\n        try {\n          data = JSON.parse(stdout.trim());\n        } catch {\n          throw Error(`Profile ${profileName} credential_process returned invalid JSON.`);\n        }\n        return getValidatedProcessCredentials(profileName, data);\n      } catch (error) {\n        throw new CredentialsProviderError(error.message);\n      }\n    } else {\n      throw new CredentialsProviderError(`Profile ${profileName} did not contain credential_process.`);\n    }\n  } else {\n    throw new CredentialsProviderError(`Profile ${profileName} could not be found in shared credentials file.`);\n  }\n};","map":{"version":3,"names":["CredentialsProviderError","exec","promisify","getValidatedProcessCredentials","resolveProcessCredentials","profileName","profiles","profile","credentialProcess","undefined","execPromise","stdout","data","JSON","parse","trim","Error","error","message"],"sources":["C:/Users/91930/Desktop/Github projects/Pharmacy Demo/back-end/node_modules/@aws-sdk/credential-provider-process/dist-es/resolveProcessCredentials.js"],"sourcesContent":["import { CredentialsProviderError } from \"@aws-sdk/property-provider\";\r\nimport { exec } from \"child_process\";\r\nimport { promisify } from \"util\";\r\nimport { getValidatedProcessCredentials } from \"./getValidatedProcessCredentials\";\r\nexport const resolveProcessCredentials = async (profileName, profiles) => {\r\n    const profile = profiles[profileName];\r\n    if (profiles[profileName]) {\r\n        const credentialProcess = profile[\"credential_process\"];\r\n        if (credentialProcess !== undefined) {\r\n            const execPromise = promisify(exec);\r\n            try {\r\n                const { stdout } = await execPromise(credentialProcess);\r\n                let data;\r\n                try {\r\n                    data = JSON.parse(stdout.trim());\r\n                }\r\n                catch {\r\n                    throw Error(`Profile ${profileName} credential_process returned invalid JSON.`);\r\n                }\r\n                return getValidatedProcessCredentials(profileName, data);\r\n            }\r\n            catch (error) {\r\n                throw new CredentialsProviderError(error.message);\r\n            }\r\n        }\r\n        else {\r\n            throw new CredentialsProviderError(`Profile ${profileName} did not contain credential_process.`);\r\n        }\r\n    }\r\n    else {\r\n        throw new CredentialsProviderError(`Profile ${profileName} could not be found in shared credentials file.`);\r\n    }\r\n};\r\n"],"mappings":"AAAA,SAASA,wBAAwB,QAAQ,4BAA4B;AACrE,SAASC,IAAI,QAAQ,eAAe;AACpC,SAASC,SAAS,QAAQ,MAAM;AAChC,SAASC,8BAA8B,QAAQ,kCAAkC;AACjF,OAAO,MAAMC,yBAAyB,GAAG,OAAOC,WAAW,EAAEC,QAAQ,KAAK;EACtE,MAAMC,OAAO,GAAGD,QAAQ,CAACD,WAAW,CAAC;EACrC,IAAIC,QAAQ,CAACD,WAAW,CAAC,EAAE;IACvB,MAAMG,iBAAiB,GAAGD,OAAO,CAAC,oBAAoB,CAAC;IACvD,IAAIC,iBAAiB,KAAKC,SAAS,EAAE;MACjC,MAAMC,WAAW,GAAGR,SAAS,CAACD,IAAI,CAAC;MACnC,IAAI;QACA,MAAM;UAAEU;QAAO,CAAC,GAAG,MAAMD,WAAW,CAACF,iBAAiB,CAAC;QACvD,IAAII,IAAI;QACR,IAAI;UACAA,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACH,MAAM,CAACI,IAAI,EAAE,CAAC;QACpC,CAAC,CACD,MAAM;UACF,MAAMC,KAAK,CAAE,WAAUX,WAAY,4CAA2C,CAAC;QACnF;QACA,OAAOF,8BAA8B,CAACE,WAAW,EAAEO,IAAI,CAAC;MAC5D,CAAC,CACD,OAAOK,KAAK,EAAE;QACV,MAAM,IAAIjB,wBAAwB,CAACiB,KAAK,CAACC,OAAO,CAAC;MACrD;IACJ,CAAC,MACI;MACD,MAAM,IAAIlB,wBAAwB,CAAE,WAAUK,WAAY,sCAAqC,CAAC;IACpG;EACJ,CAAC,MACI;IACD,MAAM,IAAIL,wBAAwB,CAAE,WAAUK,WAAY,iDAAgD,CAAC;EAC/G;AACJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}