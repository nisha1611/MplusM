{"ast":null,"code":"const spawn = require('child_process').spawn;\nmodule.exports = function (rootPid, callback) {\n  const pidsOfInterest = new Set([parseInt(rootPid, 10)]);\n  var output = '';\n\n  // *nix\n  const ps = spawn('ps', ['-A', '-o', 'ppid,pid']);\n  ps.stdout.on('data', data => {\n    output += data.toString('ascii');\n  });\n  ps.on('close', () => {\n    try {\n      const res = output.split('\\n').slice(1).map(_ => _.trim()).reduce((acc, line) => {\n        const pids = line.split(/\\s+/);\n        const ppid = parseInt(pids[0], 10);\n        if (pidsOfInterest.has(ppid)) {\n          const pid = parseInt(pids[1], 10);\n          acc.push(pid);\n          pidsOfInterest.add(pid);\n        }\n        return acc;\n      }, []);\n      callback(null, res);\n    } catch (e) {\n      callback(e, null);\n    }\n  });\n};","map":{"version":3,"names":["spawn","require","module","exports","rootPid","callback","pidsOfInterest","Set","parseInt","output","ps","stdout","on","data","toString","res","split","slice","map","_","trim","reduce","acc","line","pids","ppid","has","pid","push","add","e"],"sources":["C:/Users/91930/Desktop/Github projects/Pharmacy Demo/back-end/node_modules/pstree.remy/lib/tree.js"],"sourcesContent":["const spawn = require('child_process').spawn;\r\n\r\nmodule.exports = function (rootPid, callback) {\r\n  const pidsOfInterest = new Set([parseInt(rootPid, 10)]);\r\n  var output = '';\r\n\r\n  // *nix\r\n  const ps = spawn('ps', ['-A', '-o', 'ppid,pid']);\r\n  ps.stdout.on('data', (data) => {\r\n    output += data.toString('ascii');\r\n  });\r\n\r\n  ps.on('close', () => {\r\n    try {\r\n      const res = output\r\n        .split('\\n')\r\n        .slice(1)\r\n        .map((_) => _.trim())\r\n        .reduce((acc, line) => {\r\n          const pids = line.split(/\\s+/);\r\n          const ppid = parseInt(pids[0], 10);\r\n\r\n          if (pidsOfInterest.has(ppid)) {\r\n            const pid = parseInt(pids[1], 10);\r\n            acc.push(pid);\r\n            pidsOfInterest.add(pid);\r\n          }\r\n\r\n          return acc;\r\n        }, []);\r\n\r\n      callback(null, res);\r\n    } catch (e) {\r\n      callback(e, null);\r\n    }\r\n  });\r\n};\r\n"],"mappings":"AAAA,MAAMA,KAAK,GAAGC,OAAO,CAAC,eAAe,CAAC,CAACD,KAAK;AAE5CE,MAAM,CAACC,OAAO,GAAG,UAAUC,OAAO,EAAEC,QAAQ,EAAE;EAC5C,MAAMC,cAAc,GAAG,IAAIC,GAAG,CAAC,CAACC,QAAQ,CAACJ,OAAO,EAAE,EAAE,CAAC,CAAC,CAAC;EACvD,IAAIK,MAAM,GAAG,EAAE;;EAEf;EACA,MAAMC,EAAE,GAAGV,KAAK,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,IAAI,EAAE,UAAU,CAAC,CAAC;EAChDU,EAAE,CAACC,MAAM,CAACC,EAAE,CAAC,MAAM,EAAGC,IAAI,IAAK;IAC7BJ,MAAM,IAAII,IAAI,CAACC,QAAQ,CAAC,OAAO,CAAC;EAClC,CAAC,CAAC;EAEFJ,EAAE,CAACE,EAAE,CAAC,OAAO,EAAE,MAAM;IACnB,IAAI;MACF,MAAMG,GAAG,GAAGN,MAAM,CACfO,KAAK,CAAC,IAAI,CAAC,CACXC,KAAK,CAAC,CAAC,CAAC,CACRC,GAAG,CAAEC,CAAC,IAAKA,CAAC,CAACC,IAAI,EAAE,CAAC,CACpBC,MAAM,CAAC,CAACC,GAAG,EAAEC,IAAI,KAAK;QACrB,MAAMC,IAAI,GAAGD,IAAI,CAACP,KAAK,CAAC,KAAK,CAAC;QAC9B,MAAMS,IAAI,GAAGjB,QAAQ,CAACgB,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;QAElC,IAAIlB,cAAc,CAACoB,GAAG,CAACD,IAAI,CAAC,EAAE;UAC5B,MAAME,GAAG,GAAGnB,QAAQ,CAACgB,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;UACjCF,GAAG,CAACM,IAAI,CAACD,GAAG,CAAC;UACbrB,cAAc,CAACuB,GAAG,CAACF,GAAG,CAAC;QACzB;QAEA,OAAOL,GAAG;MACZ,CAAC,EAAE,EAAE,CAAC;MAERjB,QAAQ,CAAC,IAAI,EAAEU,GAAG,CAAC;IACrB,CAAC,CAAC,OAAOe,CAAC,EAAE;MACVzB,QAAQ,CAACyB,CAAC,EAAE,IAAI,CAAC;IACnB;EACF,CAAC,CAAC;AACJ,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}