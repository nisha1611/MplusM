{"ast":null,"code":"'use strict';\n\nconst assert = require('assert');\nconst stringToParts = require('../lib/stringToParts');\ndescribe('stringToParts', function () {\n  it('handles brackets for numbers', function () {\n    assert.deepEqual(stringToParts('list[0].name'), ['list', '0', 'name']);\n    assert.deepEqual(stringToParts('list[0][1].name'), ['list', '0', '1', 'name']);\n  });\n  it('handles dot notation', function () {\n    assert.deepEqual(stringToParts('a.b.c'), ['a', 'b', 'c']);\n    assert.deepEqual(stringToParts('a..b.d'), ['a', '', 'b', 'd']);\n  });\n  it('ignores invalid numbers in square brackets', function () {\n    assert.deepEqual(stringToParts('foo[1mystring]'), ['foo[1mystring]']);\n    assert.deepEqual(stringToParts('foo[1mystring].bar[1]'), ['foo[1mystring]', 'bar', '1']);\n    assert.deepEqual(stringToParts('foo[1mystring][2]'), ['foo[1mystring]', '2']);\n  });\n  it('handles empty string', function () {\n    assert.deepEqual(stringToParts(''), ['']);\n  });\n  it('handles trailing dot', function () {\n    assert.deepEqual(stringToParts('a.b.'), ['a', 'b', '']);\n  });\n});","map":{"version":3,"names":["assert","require","stringToParts","describe","it","deepEqual"],"sources":["C:/Users/91930/Desktop/Github projects/Pharmacy Demo/back-end/node_modules/mpath/test/stringToParts.js"],"sourcesContent":["'use strict';\r\n\r\nconst assert = require('assert');\r\nconst stringToParts = require('../lib/stringToParts');\r\n\r\ndescribe('stringToParts', function() {\r\n  it('handles brackets for numbers', function() {\r\n    assert.deepEqual(stringToParts('list[0].name'), ['list', '0', 'name']);\r\n    assert.deepEqual(stringToParts('list[0][1].name'), ['list', '0', '1', 'name']);\r\n  });\r\n\r\n  it('handles dot notation', function() {\r\n    assert.deepEqual(stringToParts('a.b.c'), ['a', 'b', 'c']);\r\n    assert.deepEqual(stringToParts('a..b.d'), ['a', '', 'b', 'd']);\r\n  });\r\n\r\n  it('ignores invalid numbers in square brackets', function() {\r\n    assert.deepEqual(stringToParts('foo[1mystring]'), ['foo[1mystring]']);\r\n    assert.deepEqual(stringToParts('foo[1mystring].bar[1]'), ['foo[1mystring]', 'bar', '1']);\r\n    assert.deepEqual(stringToParts('foo[1mystring][2]'), ['foo[1mystring]', '2']);\r\n  });\r\n\r\n  it('handles empty string', function() {\r\n    assert.deepEqual(stringToParts(''), ['']);\r\n  });\r\n\r\n  it('handles trailing dot', function() {\r\n    assert.deepEqual(stringToParts('a.b.'), ['a', 'b', '']);\r\n  });\r\n});"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,MAAM,GAAGC,OAAO,CAAC,QAAQ,CAAC;AAChC,MAAMC,aAAa,GAAGD,OAAO,CAAC,sBAAsB,CAAC;AAErDE,QAAQ,CAAC,eAAe,EAAE,YAAW;EACnCC,EAAE,CAAC,8BAA8B,EAAE,YAAW;IAC5CJ,MAAM,CAACK,SAAS,CAACH,aAAa,CAAC,cAAc,CAAC,EAAE,CAAC,MAAM,EAAE,GAAG,EAAE,MAAM,CAAC,CAAC;IACtEF,MAAM,CAACK,SAAS,CAACH,aAAa,CAAC,iBAAiB,CAAC,EAAE,CAAC,MAAM,EAAE,GAAG,EAAE,GAAG,EAAE,MAAM,CAAC,CAAC;EAChF,CAAC,CAAC;EAEFE,EAAE,CAAC,sBAAsB,EAAE,YAAW;IACpCJ,MAAM,CAACK,SAAS,CAACH,aAAa,CAAC,OAAO,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;IACzDF,MAAM,CAACK,SAAS,CAACH,aAAa,CAAC,QAAQ,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;EAChE,CAAC,CAAC;EAEFE,EAAE,CAAC,4CAA4C,EAAE,YAAW;IAC1DJ,MAAM,CAACK,SAAS,CAACH,aAAa,CAAC,gBAAgB,CAAC,EAAE,CAAC,gBAAgB,CAAC,CAAC;IACrEF,MAAM,CAACK,SAAS,CAACH,aAAa,CAAC,uBAAuB,CAAC,EAAE,CAAC,gBAAgB,EAAE,KAAK,EAAE,GAAG,CAAC,CAAC;IACxFF,MAAM,CAACK,SAAS,CAACH,aAAa,CAAC,mBAAmB,CAAC,EAAE,CAAC,gBAAgB,EAAE,GAAG,CAAC,CAAC;EAC/E,CAAC,CAAC;EAEFE,EAAE,CAAC,sBAAsB,EAAE,YAAW;IACpCJ,MAAM,CAACK,SAAS,CAACH,aAAa,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;EAC3C,CAAC,CAAC;EAEFE,EAAE,CAAC,sBAAsB,EAAE,YAAW;IACpCJ,MAAM,CAACK,SAAS,CAACH,aAAa,CAAC,MAAM,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC;EACzD,CAAC,CAAC;AACJ,CAAC,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}