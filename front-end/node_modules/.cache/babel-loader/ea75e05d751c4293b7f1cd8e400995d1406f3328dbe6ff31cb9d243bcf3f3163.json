{"ast":null,"code":"/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n*/\n\n\"use strict\";\n\nconst RuntimeGlobals = require(\"../RuntimeGlobals\");\nconst StartupChunkDependenciesRuntimeModule = require(\"./StartupChunkDependenciesRuntimeModule\");\nconst StartupEntrypointRuntimeModule = require(\"./StartupEntrypointRuntimeModule\");\n\n/** @typedef {import(\"../Compiler\")} Compiler */\n\nclass StartupChunkDependenciesPlugin {\n  constructor(options) {\n    this.chunkLoading = options.chunkLoading;\n    this.asyncChunkLoading = typeof options.asyncChunkLoading === \"boolean\" ? options.asyncChunkLoading : true;\n  }\n\n  /**\r\n   * Apply the plugin\r\n   * @param {Compiler} compiler the compiler instance\r\n   * @returns {void}\r\n   */\n  apply(compiler) {\n    compiler.hooks.thisCompilation.tap(\"StartupChunkDependenciesPlugin\", compilation => {\n      const globalChunkLoading = compilation.outputOptions.chunkLoading;\n      const isEnabledForChunk = chunk => {\n        const options = chunk.getEntryOptions();\n        const chunkLoading = options && options.chunkLoading !== undefined ? options.chunkLoading : globalChunkLoading;\n        return chunkLoading === this.chunkLoading;\n      };\n      compilation.hooks.additionalTreeRuntimeRequirements.tap(\"StartupChunkDependenciesPlugin\", (chunk, set, _ref) => {\n        let {\n          chunkGraph\n        } = _ref;\n        if (!isEnabledForChunk(chunk)) return;\n        if (chunkGraph.hasChunkEntryDependentChunks(chunk)) {\n          set.add(RuntimeGlobals.startup);\n          set.add(RuntimeGlobals.ensureChunk);\n          set.add(RuntimeGlobals.ensureChunkIncludeEntries);\n          compilation.addRuntimeModule(chunk, new StartupChunkDependenciesRuntimeModule(this.asyncChunkLoading));\n        }\n      });\n      compilation.hooks.runtimeRequirementInTree.for(RuntimeGlobals.startupEntrypoint).tap(\"StartupChunkDependenciesPlugin\", (chunk, set) => {\n        if (!isEnabledForChunk(chunk)) return;\n        set.add(RuntimeGlobals.require);\n        set.add(RuntimeGlobals.ensureChunk);\n        set.add(RuntimeGlobals.ensureChunkIncludeEntries);\n        compilation.addRuntimeModule(chunk, new StartupEntrypointRuntimeModule(this.asyncChunkLoading));\n      });\n    });\n  }\n}\nmodule.exports = StartupChunkDependenciesPlugin;","map":{"version":3,"names":["RuntimeGlobals","require","StartupChunkDependenciesRuntimeModule","StartupEntrypointRuntimeModule","StartupChunkDependenciesPlugin","constructor","options","chunkLoading","asyncChunkLoading","apply","compiler","hooks","thisCompilation","tap","compilation","globalChunkLoading","outputOptions","isEnabledForChunk","chunk","getEntryOptions","undefined","additionalTreeRuntimeRequirements","set","chunkGraph","hasChunkEntryDependentChunks","add","startup","ensureChunk","ensureChunkIncludeEntries","addRuntimeModule","runtimeRequirementInTree","for","startupEntrypoint","module","exports"],"sources":["C:/Users/91930/Desktop/Github projects/Pharmacy Demo/front-end/node_modules/webpack/lib/runtime/StartupChunkDependenciesPlugin.js"],"sourcesContent":["/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n*/\r\n\r\n\"use strict\";\r\n\r\nconst RuntimeGlobals = require(\"../RuntimeGlobals\");\r\nconst StartupChunkDependenciesRuntimeModule = require(\"./StartupChunkDependenciesRuntimeModule\");\r\nconst StartupEntrypointRuntimeModule = require(\"./StartupEntrypointRuntimeModule\");\r\n\r\n/** @typedef {import(\"../Compiler\")} Compiler */\r\n\r\nclass StartupChunkDependenciesPlugin {\r\n\tconstructor(options) {\r\n\t\tthis.chunkLoading = options.chunkLoading;\r\n\t\tthis.asyncChunkLoading =\r\n\t\t\ttypeof options.asyncChunkLoading === \"boolean\"\r\n\t\t\t\t? options.asyncChunkLoading\r\n\t\t\t\t: true;\r\n\t}\r\n\r\n\t/**\r\n\t * Apply the plugin\r\n\t * @param {Compiler} compiler the compiler instance\r\n\t * @returns {void}\r\n\t */\r\n\tapply(compiler) {\r\n\t\tcompiler.hooks.thisCompilation.tap(\r\n\t\t\t\"StartupChunkDependenciesPlugin\",\r\n\t\t\tcompilation => {\r\n\t\t\t\tconst globalChunkLoading = compilation.outputOptions.chunkLoading;\r\n\t\t\t\tconst isEnabledForChunk = chunk => {\r\n\t\t\t\t\tconst options = chunk.getEntryOptions();\r\n\t\t\t\t\tconst chunkLoading =\r\n\t\t\t\t\t\toptions && options.chunkLoading !== undefined\r\n\t\t\t\t\t\t\t? options.chunkLoading\r\n\t\t\t\t\t\t\t: globalChunkLoading;\r\n\t\t\t\t\treturn chunkLoading === this.chunkLoading;\r\n\t\t\t\t};\r\n\t\t\t\tcompilation.hooks.additionalTreeRuntimeRequirements.tap(\r\n\t\t\t\t\t\"StartupChunkDependenciesPlugin\",\r\n\t\t\t\t\t(chunk, set, { chunkGraph }) => {\r\n\t\t\t\t\t\tif (!isEnabledForChunk(chunk)) return;\r\n\t\t\t\t\t\tif (chunkGraph.hasChunkEntryDependentChunks(chunk)) {\r\n\t\t\t\t\t\t\tset.add(RuntimeGlobals.startup);\r\n\t\t\t\t\t\t\tset.add(RuntimeGlobals.ensureChunk);\r\n\t\t\t\t\t\t\tset.add(RuntimeGlobals.ensureChunkIncludeEntries);\r\n\t\t\t\t\t\t\tcompilation.addRuntimeModule(\r\n\t\t\t\t\t\t\t\tchunk,\r\n\t\t\t\t\t\t\t\tnew StartupChunkDependenciesRuntimeModule(\r\n\t\t\t\t\t\t\t\t\tthis.asyncChunkLoading\r\n\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t\tcompilation.hooks.runtimeRequirementInTree\r\n\t\t\t\t\t.for(RuntimeGlobals.startupEntrypoint)\r\n\t\t\t\t\t.tap(\"StartupChunkDependenciesPlugin\", (chunk, set) => {\r\n\t\t\t\t\t\tif (!isEnabledForChunk(chunk)) return;\r\n\t\t\t\t\t\tset.add(RuntimeGlobals.require);\r\n\t\t\t\t\t\tset.add(RuntimeGlobals.ensureChunk);\r\n\t\t\t\t\t\tset.add(RuntimeGlobals.ensureChunkIncludeEntries);\r\n\t\t\t\t\t\tcompilation.addRuntimeModule(\r\n\t\t\t\t\t\t\tchunk,\r\n\t\t\t\t\t\t\tnew StartupEntrypointRuntimeModule(this.asyncChunkLoading)\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t});\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n}\r\n\r\nmodule.exports = StartupChunkDependenciesPlugin;\r\n"],"mappings":"AAAA;AACA;AACA;;AAEA,YAAY;;AAEZ,MAAMA,cAAc,GAAGC,OAAO,CAAC,mBAAmB,CAAC;AACnD,MAAMC,qCAAqC,GAAGD,OAAO,CAAC,yCAAyC,CAAC;AAChG,MAAME,8BAA8B,GAAGF,OAAO,CAAC,kCAAkC,CAAC;;AAElF;;AAEA,MAAMG,8BAA8B,CAAC;EACpCC,WAAW,CAACC,OAAO,EAAE;IACpB,IAAI,CAACC,YAAY,GAAGD,OAAO,CAACC,YAAY;IACxC,IAAI,CAACC,iBAAiB,GACrB,OAAOF,OAAO,CAACE,iBAAiB,KAAK,SAAS,GAC3CF,OAAO,CAACE,iBAAiB,GACzB,IAAI;EACT;;EAEA;AACD;AACA;AACA;AACA;EACCC,KAAK,CAACC,QAAQ,EAAE;IACfA,QAAQ,CAACC,KAAK,CAACC,eAAe,CAACC,GAAG,CACjC,gCAAgC,EAChCC,WAAW,IAAI;MACd,MAAMC,kBAAkB,GAAGD,WAAW,CAACE,aAAa,CAACT,YAAY;MACjE,MAAMU,iBAAiB,GAAGC,KAAK,IAAI;QAClC,MAAMZ,OAAO,GAAGY,KAAK,CAACC,eAAe,EAAE;QACvC,MAAMZ,YAAY,GACjBD,OAAO,IAAIA,OAAO,CAACC,YAAY,KAAKa,SAAS,GAC1Cd,OAAO,CAACC,YAAY,GACpBQ,kBAAkB;QACtB,OAAOR,YAAY,KAAK,IAAI,CAACA,YAAY;MAC1C,CAAC;MACDO,WAAW,CAACH,KAAK,CAACU,iCAAiC,CAACR,GAAG,CACtD,gCAAgC,EAChC,CAACK,KAAK,EAAEI,GAAG,WAAqB;QAAA,IAAnB;UAAEC;QAAW,CAAC;QAC1B,IAAI,CAACN,iBAAiB,CAACC,KAAK,CAAC,EAAE;QAC/B,IAAIK,UAAU,CAACC,4BAA4B,CAACN,KAAK,CAAC,EAAE;UACnDI,GAAG,CAACG,GAAG,CAACzB,cAAc,CAAC0B,OAAO,CAAC;UAC/BJ,GAAG,CAACG,GAAG,CAACzB,cAAc,CAAC2B,WAAW,CAAC;UACnCL,GAAG,CAACG,GAAG,CAACzB,cAAc,CAAC4B,yBAAyB,CAAC;UACjDd,WAAW,CAACe,gBAAgB,CAC3BX,KAAK,EACL,IAAIhB,qCAAqC,CACxC,IAAI,CAACM,iBAAiB,CACtB,CACD;QACF;MACD,CAAC,CACD;MACDM,WAAW,CAACH,KAAK,CAACmB,wBAAwB,CACxCC,GAAG,CAAC/B,cAAc,CAACgC,iBAAiB,CAAC,CACrCnB,GAAG,CAAC,gCAAgC,EAAE,CAACK,KAAK,EAAEI,GAAG,KAAK;QACtD,IAAI,CAACL,iBAAiB,CAACC,KAAK,CAAC,EAAE;QAC/BI,GAAG,CAACG,GAAG,CAACzB,cAAc,CAACC,OAAO,CAAC;QAC/BqB,GAAG,CAACG,GAAG,CAACzB,cAAc,CAAC2B,WAAW,CAAC;QACnCL,GAAG,CAACG,GAAG,CAACzB,cAAc,CAAC4B,yBAAyB,CAAC;QACjDd,WAAW,CAACe,gBAAgB,CAC3BX,KAAK,EACL,IAAIf,8BAA8B,CAAC,IAAI,CAACK,iBAAiB,CAAC,CAC1D;MACF,CAAC,CAAC;IACJ,CAAC,CACD;EACF;AACD;AAEAyB,MAAM,CAACC,OAAO,GAAG9B,8BAA8B"},"metadata":{},"sourceType":"script","externalDependencies":[]}