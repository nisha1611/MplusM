{"ast":null,"code":"// A base64 implementation for the bcrypt algorithm. This is partly non-standard.\n\n/**\r\n * bcrypt's own non-standard base64 dictionary.\r\n * @type {!Array.<string>}\r\n * @const\r\n * @inner\r\n **/\nvar BASE64_CODE = \"./ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\".split('');\n\n/**\r\n * @type {!Array.<number>}\r\n * @const\r\n * @inner\r\n **/\nvar BASE64_INDEX = [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 1, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, -1, -1, -1, -1, -1, -1, -1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, -1, -1, -1, -1, -1, -1, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, -1, -1, -1, -1, -1];\n\n/**\r\n * @type {!function(...number):string}\r\n * @inner\r\n */\nvar stringFromCharCode = String.fromCharCode;\n\n/**\r\n * Encodes a byte array to base64 with up to len bytes of input.\r\n * @param {!Array.<number>} b Byte array\r\n * @param {number} len Maximum input length\r\n * @returns {string}\r\n * @inner\r\n */\nfunction base64_encode(b, len) {\n  var off = 0,\n    rs = [],\n    c1,\n    c2;\n  if (len <= 0 || len > b.length) throw Error(\"Illegal len: \" + len);\n  while (off < len) {\n    c1 = b[off++] & 0xff;\n    rs.push(BASE64_CODE[c1 >> 2 & 0x3f]);\n    c1 = (c1 & 0x03) << 4;\n    if (off >= len) {\n      rs.push(BASE64_CODE[c1 & 0x3f]);\n      break;\n    }\n    c2 = b[off++] & 0xff;\n    c1 |= c2 >> 4 & 0x0f;\n    rs.push(BASE64_CODE[c1 & 0x3f]);\n    c1 = (c2 & 0x0f) << 2;\n    if (off >= len) {\n      rs.push(BASE64_CODE[c1 & 0x3f]);\n      break;\n    }\n    c2 = b[off++] & 0xff;\n    c1 |= c2 >> 6 & 0x03;\n    rs.push(BASE64_CODE[c1 & 0x3f]);\n    rs.push(BASE64_CODE[c2 & 0x3f]);\n  }\n  return rs.join('');\n}\n\n/**\r\n * Decodes a base64 encoded string to up to len bytes of output.\r\n * @param {string} s String to decode\r\n * @param {number} len Maximum output length\r\n * @returns {!Array.<number>}\r\n * @inner\r\n */\nfunction base64_decode(s, len) {\n  var off = 0,\n    slen = s.length,\n    olen = 0,\n    rs = [],\n    c1,\n    c2,\n    c3,\n    c4,\n    o,\n    code;\n  if (len <= 0) throw Error(\"Illegal len: \" + len);\n  while (off < slen - 1 && olen < len) {\n    code = s.charCodeAt(off++);\n    c1 = code < BASE64_INDEX.length ? BASE64_INDEX[code] : -1;\n    code = s.charCodeAt(off++);\n    c2 = code < BASE64_INDEX.length ? BASE64_INDEX[code] : -1;\n    if (c1 == -1 || c2 == -1) break;\n    o = c1 << 2 >>> 0;\n    o |= (c2 & 0x30) >> 4;\n    rs.push(stringFromCharCode(o));\n    if (++olen >= len || off >= slen) break;\n    code = s.charCodeAt(off++);\n    c3 = code < BASE64_INDEX.length ? BASE64_INDEX[code] : -1;\n    if (c3 == -1) break;\n    o = (c2 & 0x0f) << 4 >>> 0;\n    o |= (c3 & 0x3c) >> 2;\n    rs.push(stringFromCharCode(o));\n    if (++olen >= len || off >= slen) break;\n    code = s.charCodeAt(off++);\n    c4 = code < BASE64_INDEX.length ? BASE64_INDEX[code] : -1;\n    o = (c3 & 0x03) << 6 >>> 0;\n    o |= c4;\n    rs.push(stringFromCharCode(o));\n    ++olen;\n  }\n  var res = [];\n  for (off = 0; off < olen; off++) res.push(rs[off].charCodeAt(0));\n  return res;\n}","map":{"version":3,"names":["BASE64_CODE","split","BASE64_INDEX","stringFromCharCode","String","fromCharCode","base64_encode","b","len","off","rs","c1","c2","length","Error","push","join","base64_decode","s","slen","olen","c3","c4","o","code","charCodeAt","res"],"sources":["C:/Users/91930/Desktop/Github projects/Pharmacy Demo/back-end/node_modules/bcryptjs/src/bcrypt/util/base64.js"],"sourcesContent":["// A base64 implementation for the bcrypt algorithm. This is partly non-standard.\r\n\r\n/**\r\n * bcrypt's own non-standard base64 dictionary.\r\n * @type {!Array.<string>}\r\n * @const\r\n * @inner\r\n **/\r\nvar BASE64_CODE = \"./ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\".split('');\r\n\r\n/**\r\n * @type {!Array.<number>}\r\n * @const\r\n * @inner\r\n **/\r\nvar BASE64_INDEX = [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\r\n    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\r\n    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0,\r\n    1, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, -1, -1, -1, -1, -1, -1,\r\n    -1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,\r\n    20, 21, 22, 23, 24, 25, 26, 27, -1, -1, -1, -1, -1, -1, 28, 29, 30,\r\n    31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\r\n    48, 49, 50, 51, 52, 53, -1, -1, -1, -1, -1];\r\n\r\n/**\r\n * @type {!function(...number):string}\r\n * @inner\r\n */\r\nvar stringFromCharCode = String.fromCharCode;\r\n\r\n/**\r\n * Encodes a byte array to base64 with up to len bytes of input.\r\n * @param {!Array.<number>} b Byte array\r\n * @param {number} len Maximum input length\r\n * @returns {string}\r\n * @inner\r\n */\r\nfunction base64_encode(b, len) {\r\n    var off = 0,\r\n        rs = [],\r\n        c1, c2;\r\n    if (len <= 0 || len > b.length)\r\n        throw Error(\"Illegal len: \"+len);\r\n    while (off < len) {\r\n        c1 = b[off++] & 0xff;\r\n        rs.push(BASE64_CODE[(c1 >> 2) & 0x3f]);\r\n        c1 = (c1 & 0x03) << 4;\r\n        if (off >= len) {\r\n            rs.push(BASE64_CODE[c1 & 0x3f]);\r\n            break;\r\n        }\r\n        c2 = b[off++] & 0xff;\r\n        c1 |= (c2 >> 4) & 0x0f;\r\n        rs.push(BASE64_CODE[c1 & 0x3f]);\r\n        c1 = (c2 & 0x0f) << 2;\r\n        if (off >= len) {\r\n            rs.push(BASE64_CODE[c1 & 0x3f]);\r\n            break;\r\n        }\r\n        c2 = b[off++] & 0xff;\r\n        c1 |= (c2 >> 6) & 0x03;\r\n        rs.push(BASE64_CODE[c1 & 0x3f]);\r\n        rs.push(BASE64_CODE[c2 & 0x3f]);\r\n    }\r\n    return rs.join('');\r\n}\r\n\r\n/**\r\n * Decodes a base64 encoded string to up to len bytes of output.\r\n * @param {string} s String to decode\r\n * @param {number} len Maximum output length\r\n * @returns {!Array.<number>}\r\n * @inner\r\n */\r\nfunction base64_decode(s, len) {\r\n    var off = 0,\r\n        slen = s.length,\r\n        olen = 0,\r\n        rs = [],\r\n        c1, c2, c3, c4, o, code;\r\n    if (len <= 0)\r\n        throw Error(\"Illegal len: \"+len);\r\n    while (off < slen - 1 && olen < len) {\r\n        code = s.charCodeAt(off++);\r\n        c1 = code < BASE64_INDEX.length ? BASE64_INDEX[code] : -1;\r\n        code = s.charCodeAt(off++);\r\n        c2 = code < BASE64_INDEX.length ? BASE64_INDEX[code] : -1;\r\n        if (c1 == -1 || c2 == -1)\r\n            break;\r\n        o = (c1 << 2) >>> 0;\r\n        o |= (c2 & 0x30) >> 4;\r\n        rs.push(stringFromCharCode(o));\r\n        if (++olen >= len || off >= slen)\r\n            break;\r\n        code = s.charCodeAt(off++);\r\n        c3 = code < BASE64_INDEX.length ? BASE64_INDEX[code] : -1;\r\n        if (c3 == -1)\r\n            break;\r\n        o = ((c2 & 0x0f) << 4) >>> 0;\r\n        o |= (c3 & 0x3c) >> 2;\r\n        rs.push(stringFromCharCode(o));\r\n        if (++olen >= len || off >= slen)\r\n            break;\r\n        code = s.charCodeAt(off++);\r\n        c4 = code < BASE64_INDEX.length ? BASE64_INDEX[code] : -1;\r\n        o = ((c3 & 0x03) << 6) >>> 0;\r\n        o |= c4;\r\n        rs.push(stringFromCharCode(o));\r\n        ++olen;\r\n    }\r\n    var res = [];\r\n    for (off = 0; off<olen; off++)\r\n        res.push(rs[off].charCodeAt(0));\r\n    return res;\r\n}\r\n"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIA,WAAW,GAAG,kEAAkE,CAACC,KAAK,CAAC,EAAE,CAAC;;AAE9F;AACA;AACA;AACA;AACA;AACA,IAAIC,YAAY,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAClE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAClE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EACjE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EACjE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAClE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAClE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAClE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;;AAE/C;AACA;AACA;AACA;AACA,IAAIC,kBAAkB,GAAGC,MAAM,CAACC,YAAY;;AAE5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,aAAa,CAACC,CAAC,EAAEC,GAAG,EAAE;EAC3B,IAAIC,GAAG,GAAG,CAAC;IACPC,EAAE,GAAG,EAAE;IACPC,EAAE;IAAEC,EAAE;EACV,IAAIJ,GAAG,IAAI,CAAC,IAAIA,GAAG,GAAGD,CAAC,CAACM,MAAM,EAC1B,MAAMC,KAAK,CAAC,eAAe,GAACN,GAAG,CAAC;EACpC,OAAOC,GAAG,GAAGD,GAAG,EAAE;IACdG,EAAE,GAAGJ,CAAC,CAACE,GAAG,EAAE,CAAC,GAAG,IAAI;IACpBC,EAAE,CAACK,IAAI,CAACf,WAAW,CAAEW,EAAE,IAAI,CAAC,GAAI,IAAI,CAAC,CAAC;IACtCA,EAAE,GAAG,CAACA,EAAE,GAAG,IAAI,KAAK,CAAC;IACrB,IAAIF,GAAG,IAAID,GAAG,EAAE;MACZE,EAAE,CAACK,IAAI,CAACf,WAAW,CAACW,EAAE,GAAG,IAAI,CAAC,CAAC;MAC/B;IACJ;IACAC,EAAE,GAAGL,CAAC,CAACE,GAAG,EAAE,CAAC,GAAG,IAAI;IACpBE,EAAE,IAAKC,EAAE,IAAI,CAAC,GAAI,IAAI;IACtBF,EAAE,CAACK,IAAI,CAACf,WAAW,CAACW,EAAE,GAAG,IAAI,CAAC,CAAC;IAC/BA,EAAE,GAAG,CAACC,EAAE,GAAG,IAAI,KAAK,CAAC;IACrB,IAAIH,GAAG,IAAID,GAAG,EAAE;MACZE,EAAE,CAACK,IAAI,CAACf,WAAW,CAACW,EAAE,GAAG,IAAI,CAAC,CAAC;MAC/B;IACJ;IACAC,EAAE,GAAGL,CAAC,CAACE,GAAG,EAAE,CAAC,GAAG,IAAI;IACpBE,EAAE,IAAKC,EAAE,IAAI,CAAC,GAAI,IAAI;IACtBF,EAAE,CAACK,IAAI,CAACf,WAAW,CAACW,EAAE,GAAG,IAAI,CAAC,CAAC;IAC/BD,EAAE,CAACK,IAAI,CAACf,WAAW,CAACY,EAAE,GAAG,IAAI,CAAC,CAAC;EACnC;EACA,OAAOF,EAAE,CAACM,IAAI,CAAC,EAAE,CAAC;AACtB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,aAAa,CAACC,CAAC,EAAEV,GAAG,EAAE;EAC3B,IAAIC,GAAG,GAAG,CAAC;IACPU,IAAI,GAAGD,CAAC,CAACL,MAAM;IACfO,IAAI,GAAG,CAAC;IACRV,EAAE,GAAG,EAAE;IACPC,EAAE;IAAEC,EAAE;IAAES,EAAE;IAAEC,EAAE;IAAEC,CAAC;IAAEC,IAAI;EAC3B,IAAIhB,GAAG,IAAI,CAAC,EACR,MAAMM,KAAK,CAAC,eAAe,GAACN,GAAG,CAAC;EACpC,OAAOC,GAAG,GAAGU,IAAI,GAAG,CAAC,IAAIC,IAAI,GAAGZ,GAAG,EAAE;IACjCgB,IAAI,GAAGN,CAAC,CAACO,UAAU,CAAChB,GAAG,EAAE,CAAC;IAC1BE,EAAE,GAAGa,IAAI,GAAGtB,YAAY,CAACW,MAAM,GAAGX,YAAY,CAACsB,IAAI,CAAC,GAAG,CAAC,CAAC;IACzDA,IAAI,GAAGN,CAAC,CAACO,UAAU,CAAChB,GAAG,EAAE,CAAC;IAC1BG,EAAE,GAAGY,IAAI,GAAGtB,YAAY,CAACW,MAAM,GAAGX,YAAY,CAACsB,IAAI,CAAC,GAAG,CAAC,CAAC;IACzD,IAAIb,EAAE,IAAI,CAAC,CAAC,IAAIC,EAAE,IAAI,CAAC,CAAC,EACpB;IACJW,CAAC,GAAIZ,EAAE,IAAI,CAAC,KAAM,CAAC;IACnBY,CAAC,IAAI,CAACX,EAAE,GAAG,IAAI,KAAK,CAAC;IACrBF,EAAE,CAACK,IAAI,CAACZ,kBAAkB,CAACoB,CAAC,CAAC,CAAC;IAC9B,IAAI,EAAEH,IAAI,IAAIZ,GAAG,IAAIC,GAAG,IAAIU,IAAI,EAC5B;IACJK,IAAI,GAAGN,CAAC,CAACO,UAAU,CAAChB,GAAG,EAAE,CAAC;IAC1BY,EAAE,GAAGG,IAAI,GAAGtB,YAAY,CAACW,MAAM,GAAGX,YAAY,CAACsB,IAAI,CAAC,GAAG,CAAC,CAAC;IACzD,IAAIH,EAAE,IAAI,CAAC,CAAC,EACR;IACJE,CAAC,GAAI,CAACX,EAAE,GAAG,IAAI,KAAK,CAAC,KAAM,CAAC;IAC5BW,CAAC,IAAI,CAACF,EAAE,GAAG,IAAI,KAAK,CAAC;IACrBX,EAAE,CAACK,IAAI,CAACZ,kBAAkB,CAACoB,CAAC,CAAC,CAAC;IAC9B,IAAI,EAAEH,IAAI,IAAIZ,GAAG,IAAIC,GAAG,IAAIU,IAAI,EAC5B;IACJK,IAAI,GAAGN,CAAC,CAACO,UAAU,CAAChB,GAAG,EAAE,CAAC;IAC1Ba,EAAE,GAAGE,IAAI,GAAGtB,YAAY,CAACW,MAAM,GAAGX,YAAY,CAACsB,IAAI,CAAC,GAAG,CAAC,CAAC;IACzDD,CAAC,GAAI,CAACF,EAAE,GAAG,IAAI,KAAK,CAAC,KAAM,CAAC;IAC5BE,CAAC,IAAID,EAAE;IACPZ,EAAE,CAACK,IAAI,CAACZ,kBAAkB,CAACoB,CAAC,CAAC,CAAC;IAC9B,EAAEH,IAAI;EACV;EACA,IAAIM,GAAG,GAAG,EAAE;EACZ,KAAKjB,GAAG,GAAG,CAAC,EAAEA,GAAG,GAACW,IAAI,EAAEX,GAAG,EAAE,EACzBiB,GAAG,CAACX,IAAI,CAACL,EAAE,CAACD,GAAG,CAAC,CAACgB,UAAU,CAAC,CAAC,CAAC,CAAC;EACnC,OAAOC,GAAG;AACd"},"metadata":{},"sourceType":"script","externalDependencies":[]}