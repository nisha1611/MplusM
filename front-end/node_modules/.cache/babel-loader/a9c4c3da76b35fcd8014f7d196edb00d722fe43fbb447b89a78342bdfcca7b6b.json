{"ast":null,"code":"import { readFileSync } from \"fs\";\nimport { createServer as createHttpServer } from \"http\";\nimport { createServer as createHttp2Server } from \"http2\";\nimport { createServer as createHttpsServer } from \"https\";\nimport { join } from \"path\";\nimport { Readable } from \"stream\";\nconst fixturesDir = join(__dirname, \"..\", \"fixtures\");\nconst setResponseHeaders = (response, headers) => {\n  for (const [key, value] of Object.entries(headers)) {\n    response.setHeader(key, value);\n  }\n};\nconst setResponseBody = (response, body) => {\n  if (body instanceof Readable) {\n    body.pipe(response);\n  } else {\n    response.end(body);\n  }\n};\nexport const createResponseFunction = httpResp => (request, response) => {\n  response.statusCode = httpResp.statusCode;\n  setResponseHeaders(response, httpResp.headers);\n  setResponseBody(response, httpResp.body);\n};\nexport const createResponseFunctionWithDelay = (httpResp, delay) => (request, response) => {\n  response.statusCode = httpResp.statusCode;\n  setResponseHeaders(response, httpResp.headers);\n  setTimeout(() => setResponseBody(response, httpResp.body), delay);\n};\nexport const createContinueResponseFunction = httpResp => (request, response) => {\n  response.writeContinue();\n  setTimeout(() => {\n    createResponseFunction(httpResp)(request, response);\n  }, 100);\n};\nexport const createMockHttpsServer = () => {\n  const server = createHttpsServer({\n    key: readFileSync(join(fixturesDir, \"test-server-key.pem\")),\n    cert: readFileSync(join(fixturesDir, \"test-server-cert.pem\"))\n  });\n  return server;\n};\nexport const createMockHttpServer = () => {\n  const server = createHttpServer();\n  return server;\n};\nexport const createMockHttp2Server = () => {\n  const server = createHttp2Server();\n  return server;\n};","map":{"version":3,"names":["readFileSync","createServer","createHttpServer","createHttp2Server","createHttpsServer","join","Readable","fixturesDir","__dirname","setResponseHeaders","response","headers","key","value","Object","entries","setHeader","setResponseBody","body","pipe","end","createResponseFunction","httpResp","request","statusCode","createResponseFunctionWithDelay","delay","setTimeout","createContinueResponseFunction","writeContinue","createMockHttpsServer","server","cert","createMockHttpServer","createMockHttp2Server"],"sources":["C:/Users/91930/Desktop/Github projects/Pharmacy Demo/back-end/node_modules/@aws-sdk/node-http-handler/dist-es/server.mock.js"],"sourcesContent":["import { readFileSync } from \"fs\";\r\nimport { createServer as createHttpServer } from \"http\";\r\nimport { createServer as createHttp2Server } from \"http2\";\r\nimport { createServer as createHttpsServer } from \"https\";\r\nimport { join } from \"path\";\r\nimport { Readable } from \"stream\";\r\nconst fixturesDir = join(__dirname, \"..\", \"fixtures\");\r\nconst setResponseHeaders = (response, headers) => {\r\n    for (const [key, value] of Object.entries(headers)) {\r\n        response.setHeader(key, value);\r\n    }\r\n};\r\nconst setResponseBody = (response, body) => {\r\n    if (body instanceof Readable) {\r\n        body.pipe(response);\r\n    }\r\n    else {\r\n        response.end(body);\r\n    }\r\n};\r\nexport const createResponseFunction = (httpResp) => (request, response) => {\r\n    response.statusCode = httpResp.statusCode;\r\n    setResponseHeaders(response, httpResp.headers);\r\n    setResponseBody(response, httpResp.body);\r\n};\r\nexport const createResponseFunctionWithDelay = (httpResp, delay) => (request, response) => {\r\n    response.statusCode = httpResp.statusCode;\r\n    setResponseHeaders(response, httpResp.headers);\r\n    setTimeout(() => setResponseBody(response, httpResp.body), delay);\r\n};\r\nexport const createContinueResponseFunction = (httpResp) => (request, response) => {\r\n    response.writeContinue();\r\n    setTimeout(() => {\r\n        createResponseFunction(httpResp)(request, response);\r\n    }, 100);\r\n};\r\nexport const createMockHttpsServer = () => {\r\n    const server = createHttpsServer({\r\n        key: readFileSync(join(fixturesDir, \"test-server-key.pem\")),\r\n        cert: readFileSync(join(fixturesDir, \"test-server-cert.pem\")),\r\n    });\r\n    return server;\r\n};\r\nexport const createMockHttpServer = () => {\r\n    const server = createHttpServer();\r\n    return server;\r\n};\r\nexport const createMockHttp2Server = () => {\r\n    const server = createHttp2Server();\r\n    return server;\r\n};\r\n"],"mappings":"AAAA,SAASA,YAAY,QAAQ,IAAI;AACjC,SAASC,YAAY,IAAIC,gBAAgB,QAAQ,MAAM;AACvD,SAASD,YAAY,IAAIE,iBAAiB,QAAQ,OAAO;AACzD,SAASF,YAAY,IAAIG,iBAAiB,QAAQ,OAAO;AACzD,SAASC,IAAI,QAAQ,MAAM;AAC3B,SAASC,QAAQ,QAAQ,QAAQ;AACjC,MAAMC,WAAW,GAAGF,IAAI,CAACG,SAAS,EAAE,IAAI,EAAE,UAAU,CAAC;AACrD,MAAMC,kBAAkB,GAAG,CAACC,QAAQ,EAAEC,OAAO,KAAK;EAC9C,KAAK,MAAM,CAACC,GAAG,EAAEC,KAAK,CAAC,IAAIC,MAAM,CAACC,OAAO,CAACJ,OAAO,CAAC,EAAE;IAChDD,QAAQ,CAACM,SAAS,CAACJ,GAAG,EAAEC,KAAK,CAAC;EAClC;AACJ,CAAC;AACD,MAAMI,eAAe,GAAG,CAACP,QAAQ,EAAEQ,IAAI,KAAK;EACxC,IAAIA,IAAI,YAAYZ,QAAQ,EAAE;IAC1BY,IAAI,CAACC,IAAI,CAACT,QAAQ,CAAC;EACvB,CAAC,MACI;IACDA,QAAQ,CAACU,GAAG,CAACF,IAAI,CAAC;EACtB;AACJ,CAAC;AACD,OAAO,MAAMG,sBAAsB,GAAIC,QAAQ,IAAK,CAACC,OAAO,EAAEb,QAAQ,KAAK;EACvEA,QAAQ,CAACc,UAAU,GAAGF,QAAQ,CAACE,UAAU;EACzCf,kBAAkB,CAACC,QAAQ,EAAEY,QAAQ,CAACX,OAAO,CAAC;EAC9CM,eAAe,CAACP,QAAQ,EAAEY,QAAQ,CAACJ,IAAI,CAAC;AAC5C,CAAC;AACD,OAAO,MAAMO,+BAA+B,GAAG,CAACH,QAAQ,EAAEI,KAAK,KAAK,CAACH,OAAO,EAAEb,QAAQ,KAAK;EACvFA,QAAQ,CAACc,UAAU,GAAGF,QAAQ,CAACE,UAAU;EACzCf,kBAAkB,CAACC,QAAQ,EAAEY,QAAQ,CAACX,OAAO,CAAC;EAC9CgB,UAAU,CAAC,MAAMV,eAAe,CAACP,QAAQ,EAAEY,QAAQ,CAACJ,IAAI,CAAC,EAAEQ,KAAK,CAAC;AACrE,CAAC;AACD,OAAO,MAAME,8BAA8B,GAAIN,QAAQ,IAAK,CAACC,OAAO,EAAEb,QAAQ,KAAK;EAC/EA,QAAQ,CAACmB,aAAa,EAAE;EACxBF,UAAU,CAAC,MAAM;IACbN,sBAAsB,CAACC,QAAQ,CAAC,CAACC,OAAO,EAAEb,QAAQ,CAAC;EACvD,CAAC,EAAE,GAAG,CAAC;AACX,CAAC;AACD,OAAO,MAAMoB,qBAAqB,GAAG,MAAM;EACvC,MAAMC,MAAM,GAAG3B,iBAAiB,CAAC;IAC7BQ,GAAG,EAAEZ,YAAY,CAACK,IAAI,CAACE,WAAW,EAAE,qBAAqB,CAAC,CAAC;IAC3DyB,IAAI,EAAEhC,YAAY,CAACK,IAAI,CAACE,WAAW,EAAE,sBAAsB,CAAC;EAChE,CAAC,CAAC;EACF,OAAOwB,MAAM;AACjB,CAAC;AACD,OAAO,MAAME,oBAAoB,GAAG,MAAM;EACtC,MAAMF,MAAM,GAAG7B,gBAAgB,EAAE;EACjC,OAAO6B,MAAM;AACjB,CAAC;AACD,OAAO,MAAMG,qBAAqB,GAAG,MAAM;EACvC,MAAMH,MAAM,GAAG5B,iBAAiB,EAAE;EAClC,OAAO4B,MAAM;AACjB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}