{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.toHex = exports.fromHex = void 0;\nconst SHORT_TO_HEX = {};\nconst HEX_TO_SHORT = {};\nfor (let i = 0; i < 256; i++) {\n  let encodedByte = i.toString(16).toLowerCase();\n  if (encodedByte.length === 1) {\n    encodedByte = `0${encodedByte}`;\n  }\n  SHORT_TO_HEX[i] = encodedByte;\n  HEX_TO_SHORT[encodedByte] = i;\n}\nfunction fromHex(encoded) {\n  if (encoded.length % 2 !== 0) {\n    throw new Error(\"Hex encoded strings must have an even number length\");\n  }\n  const out = new Uint8Array(encoded.length / 2);\n  for (let i = 0; i < encoded.length; i += 2) {\n    const encodedByte = encoded.slice(i, i + 2).toLowerCase();\n    if (encodedByte in HEX_TO_SHORT) {\n      out[i / 2] = HEX_TO_SHORT[encodedByte];\n    } else {\n      throw new Error(`Cannot decode unrecognized sequence ${encodedByte} as hexadecimal`);\n    }\n  }\n  return out;\n}\nexports.fromHex = fromHex;\nfunction toHex(bytes) {\n  let out = \"\";\n  for (let i = 0; i < bytes.byteLength; i++) {\n    out += SHORT_TO_HEX[bytes[i]];\n  }\n  return out;\n}\nexports.toHex = toHex;","map":{"version":3,"names":["Object","defineProperty","exports","value","toHex","fromHex","SHORT_TO_HEX","HEX_TO_SHORT","i","encodedByte","toString","toLowerCase","length","encoded","Error","out","Uint8Array","slice","bytes","byteLength"],"sources":["C:/Users/91930/Desktop/Github projects/Pharmacy Demo/back-end/node_modules/@aws-sdk/util-hex-encoding/dist-cjs/index.js"],"sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.toHex = exports.fromHex = void 0;\r\nconst SHORT_TO_HEX = {};\r\nconst HEX_TO_SHORT = {};\r\nfor (let i = 0; i < 256; i++) {\r\n    let encodedByte = i.toString(16).toLowerCase();\r\n    if (encodedByte.length === 1) {\r\n        encodedByte = `0${encodedByte}`;\r\n    }\r\n    SHORT_TO_HEX[i] = encodedByte;\r\n    HEX_TO_SHORT[encodedByte] = i;\r\n}\r\nfunction fromHex(encoded) {\r\n    if (encoded.length % 2 !== 0) {\r\n        throw new Error(\"Hex encoded strings must have an even number length\");\r\n    }\r\n    const out = new Uint8Array(encoded.length / 2);\r\n    for (let i = 0; i < encoded.length; i += 2) {\r\n        const encodedByte = encoded.slice(i, i + 2).toLowerCase();\r\n        if (encodedByte in HEX_TO_SHORT) {\r\n            out[i / 2] = HEX_TO_SHORT[encodedByte];\r\n        }\r\n        else {\r\n            throw new Error(`Cannot decode unrecognized sequence ${encodedByte} as hexadecimal`);\r\n        }\r\n    }\r\n    return out;\r\n}\r\nexports.fromHex = fromHex;\r\nfunction toHex(bytes) {\r\n    let out = \"\";\r\n    for (let i = 0; i < bytes.byteLength; i++) {\r\n        out += SHORT_TO_HEX[bytes[i]];\r\n    }\r\n    return out;\r\n}\r\nexports.toHex = toHex;\r\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,KAAK,GAAGF,OAAO,CAACG,OAAO,GAAG,KAAK,CAAC;AACxC,MAAMC,YAAY,GAAG,CAAC,CAAC;AACvB,MAAMC,YAAY,GAAG,CAAC,CAAC;AACvB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,GAAG,EAAEA,CAAC,EAAE,EAAE;EAC1B,IAAIC,WAAW,GAAGD,CAAC,CAACE,QAAQ,CAAC,EAAE,CAAC,CAACC,WAAW,EAAE;EAC9C,IAAIF,WAAW,CAACG,MAAM,KAAK,CAAC,EAAE;IAC1BH,WAAW,GAAI,IAAGA,WAAY,EAAC;EACnC;EACAH,YAAY,CAACE,CAAC,CAAC,GAAGC,WAAW;EAC7BF,YAAY,CAACE,WAAW,CAAC,GAAGD,CAAC;AACjC;AACA,SAASH,OAAO,CAACQ,OAAO,EAAE;EACtB,IAAIA,OAAO,CAACD,MAAM,GAAG,CAAC,KAAK,CAAC,EAAE;IAC1B,MAAM,IAAIE,KAAK,CAAC,qDAAqD,CAAC;EAC1E;EACA,MAAMC,GAAG,GAAG,IAAIC,UAAU,CAACH,OAAO,CAACD,MAAM,GAAG,CAAC,CAAC;EAC9C,KAAK,IAAIJ,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGK,OAAO,CAACD,MAAM,EAAEJ,CAAC,IAAI,CAAC,EAAE;IACxC,MAAMC,WAAW,GAAGI,OAAO,CAACI,KAAK,CAACT,CAAC,EAAEA,CAAC,GAAG,CAAC,CAAC,CAACG,WAAW,EAAE;IACzD,IAAIF,WAAW,IAAIF,YAAY,EAAE;MAC7BQ,GAAG,CAACP,CAAC,GAAG,CAAC,CAAC,GAAGD,YAAY,CAACE,WAAW,CAAC;IAC1C,CAAC,MACI;MACD,MAAM,IAAIK,KAAK,CAAE,uCAAsCL,WAAY,iBAAgB,CAAC;IACxF;EACJ;EACA,OAAOM,GAAG;AACd;AACAb,OAAO,CAACG,OAAO,GAAGA,OAAO;AACzB,SAASD,KAAK,CAACc,KAAK,EAAE;EAClB,IAAIH,GAAG,GAAG,EAAE;EACZ,KAAK,IAAIP,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGU,KAAK,CAACC,UAAU,EAAEX,CAAC,EAAE,EAAE;IACvCO,GAAG,IAAIT,YAAY,CAACY,KAAK,CAACV,CAAC,CAAC,CAAC;EACjC;EACA,OAAOO,GAAG;AACd;AACAb,OAAO,CAACE,KAAK,GAAGA,KAAK"},"metadata":{},"sourceType":"script","externalDependencies":[]}