{"ast":null,"code":"var parse = require('../');\nvar test = require('tape');\ntest('-', function (t) {\n  t.plan(5);\n  t.deepEqual(parse(['-n', '-']), {\n    n: '-',\n    _: []\n  });\n  t.deepEqual(parse(['-']), {\n    _: ['-']\n  });\n  t.deepEqual(parse(['-f-']), {\n    f: '-',\n    _: []\n  });\n  t.deepEqual(parse(['-b', '-'], {\n    boolean: 'b'\n  }), {\n    b: true,\n    _: ['-']\n  });\n  t.deepEqual(parse(['-s', '-'], {\n    string: 's'\n  }), {\n    s: '-',\n    _: []\n  });\n});\ntest('-a -- b', function (t) {\n  t.plan(3);\n  t.deepEqual(parse(['-a', '--', 'b']), {\n    a: true,\n    _: ['b']\n  });\n  t.deepEqual(parse(['--a', '--', 'b']), {\n    a: true,\n    _: ['b']\n  });\n  t.deepEqual(parse(['--a', '--', 'b']), {\n    a: true,\n    _: ['b']\n  });\n});\ntest('move arguments after the -- into their own `--` array', function (t) {\n  t.plan(1);\n  t.deepEqual(parse(['--name', 'John', 'before', '--', 'after'], {\n    '--': true\n  }), {\n    name: 'John',\n    _: ['before'],\n    '--': ['after']\n  });\n});","map":{"version":3,"names":["parse","require","test","t","plan","deepEqual","n","_","f","boolean","b","string","s","a","name"],"sources":["C:/Users/91930/Desktop/Github projects/Pharmacy Demo/back-end/node_modules/minimist/test/dash.js"],"sourcesContent":["var parse = require('../');\nvar test = require('tape');\n\ntest('-', function (t) {\n    t.plan(5);\n    t.deepEqual(parse([ '-n', '-' ]), { n: '-', _: [] });\n    t.deepEqual(parse([ '-' ]), { _: [ '-' ] });\n    t.deepEqual(parse([ '-f-' ]), { f: '-', _: [] });\n    t.deepEqual(\n        parse([ '-b', '-' ], { boolean: 'b' }),\n        { b: true, _: [ '-' ] }\n    );\n    t.deepEqual(\n        parse([ '-s', '-' ], { string: 's' }),\n        { s: '-', _: [] }\n    );\n});\n\ntest('-a -- b', function (t) {\n    t.plan(3);\n    t.deepEqual(parse([ '-a', '--', 'b' ]), { a: true, _: [ 'b' ] });\n    t.deepEqual(parse([ '--a', '--', 'b' ]), { a: true, _: [ 'b' ] });\n    t.deepEqual(parse([ '--a', '--', 'b' ]), { a: true, _: [ 'b' ] });\n});\n\ntest('move arguments after the -- into their own `--` array', function(t) {\n    t.plan(1);\n    t.deepEqual(\n        parse([ '--name', 'John', 'before', '--', 'after' ], { '--': true }),\n        { name: 'John', _: [ 'before' ], '--': [ 'after' ] });\n});\n"],"mappings":"AAAA,IAAIA,KAAK,GAAGC,OAAO,CAAC,KAAK,CAAC;AAC1B,IAAIC,IAAI,GAAGD,OAAO,CAAC,MAAM,CAAC;AAE1BC,IAAI,CAAC,GAAG,EAAE,UAAUC,CAAC,EAAE;EACnBA,CAAC,CAACC,IAAI,CAAC,CAAC,CAAC;EACTD,CAAC,CAACE,SAAS,CAACL,KAAK,CAAC,CAAE,IAAI,EAAE,GAAG,CAAE,CAAC,EAAE;IAAEM,CAAC,EAAE,GAAG;IAAEC,CAAC,EAAE;EAAG,CAAC,CAAC;EACpDJ,CAAC,CAACE,SAAS,CAACL,KAAK,CAAC,CAAE,GAAG,CAAE,CAAC,EAAE;IAAEO,CAAC,EAAE,CAAE,GAAG;EAAG,CAAC,CAAC;EAC3CJ,CAAC,CAACE,SAAS,CAACL,KAAK,CAAC,CAAE,KAAK,CAAE,CAAC,EAAE;IAAEQ,CAAC,EAAE,GAAG;IAAED,CAAC,EAAE;EAAG,CAAC,CAAC;EAChDJ,CAAC,CAACE,SAAS,CACPL,KAAK,CAAC,CAAE,IAAI,EAAE,GAAG,CAAE,EAAE;IAAES,OAAO,EAAE;EAAI,CAAC,CAAC,EACtC;IAAEC,CAAC,EAAE,IAAI;IAAEH,CAAC,EAAE,CAAE,GAAG;EAAG,CAAC,CAC1B;EACDJ,CAAC,CAACE,SAAS,CACPL,KAAK,CAAC,CAAE,IAAI,EAAE,GAAG,CAAE,EAAE;IAAEW,MAAM,EAAE;EAAI,CAAC,CAAC,EACrC;IAAEC,CAAC,EAAE,GAAG;IAAEL,CAAC,EAAE;EAAG,CAAC,CACpB;AACL,CAAC,CAAC;AAEFL,IAAI,CAAC,SAAS,EAAE,UAAUC,CAAC,EAAE;EACzBA,CAAC,CAACC,IAAI,CAAC,CAAC,CAAC;EACTD,CAAC,CAACE,SAAS,CAACL,KAAK,CAAC,CAAE,IAAI,EAAE,IAAI,EAAE,GAAG,CAAE,CAAC,EAAE;IAAEa,CAAC,EAAE,IAAI;IAAEN,CAAC,EAAE,CAAE,GAAG;EAAG,CAAC,CAAC;EAChEJ,CAAC,CAACE,SAAS,CAACL,KAAK,CAAC,CAAE,KAAK,EAAE,IAAI,EAAE,GAAG,CAAE,CAAC,EAAE;IAAEa,CAAC,EAAE,IAAI;IAAEN,CAAC,EAAE,CAAE,GAAG;EAAG,CAAC,CAAC;EACjEJ,CAAC,CAACE,SAAS,CAACL,KAAK,CAAC,CAAE,KAAK,EAAE,IAAI,EAAE,GAAG,CAAE,CAAC,EAAE;IAAEa,CAAC,EAAE,IAAI;IAAEN,CAAC,EAAE,CAAE,GAAG;EAAG,CAAC,CAAC;AACrE,CAAC,CAAC;AAEFL,IAAI,CAAC,uDAAuD,EAAE,UAASC,CAAC,EAAE;EACtEA,CAAC,CAACC,IAAI,CAAC,CAAC,CAAC;EACTD,CAAC,CAACE,SAAS,CACPL,KAAK,CAAC,CAAE,QAAQ,EAAE,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE,OAAO,CAAE,EAAE;IAAE,IAAI,EAAE;EAAK,CAAC,CAAC,EACpE;IAAEc,IAAI,EAAE,MAAM;IAAEP,CAAC,EAAE,CAAE,QAAQ,CAAE;IAAE,IAAI,EAAE,CAAE,OAAO;EAAG,CAAC,CAAC;AAC7D,CAAC,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}