{"ast":null,"code":"'use strict';\n\n/*!\r\n * ignore\r\n */\nconst get = require('../get');\nmodule.exports = applyTimestampsToUpdate;\n\n/*!\r\n * ignore\r\n */\n\nfunction applyTimestampsToUpdate(now, createdAt, updatedAt, currentUpdate, options) {\n  const updates = currentUpdate;\n  let _updates = updates;\n  const overwrite = get(options, 'overwrite', false);\n  const timestamps = get(options, 'timestamps', true);\n\n  // Support skipping timestamps at the query level, see gh-6980\n  if (!timestamps || updates == null) {\n    return currentUpdate;\n  }\n  const skipCreatedAt = timestamps != null && timestamps.createdAt === false;\n  const skipUpdatedAt = timestamps != null && timestamps.updatedAt === false;\n  if (overwrite) {\n    if (currentUpdate && currentUpdate.$set) {\n      currentUpdate = currentUpdate.$set;\n      updates.$set = {};\n      _updates = updates.$set;\n    }\n    if (!skipUpdatedAt && updatedAt && !currentUpdate[updatedAt]) {\n      _updates[updatedAt] = now;\n    }\n    if (!skipCreatedAt && createdAt && !currentUpdate[createdAt]) {\n      _updates[createdAt] = now;\n    }\n    return updates;\n  }\n  currentUpdate = currentUpdate || {};\n  if (Array.isArray(updates)) {\n    // Update with aggregation pipeline\n    updates.push({\n      $set: {\n        [updatedAt]: now\n      }\n    });\n    return updates;\n  }\n  updates.$set = updates.$set || {};\n  if (!skipUpdatedAt && updatedAt && (!currentUpdate.$currentDate || !currentUpdate.$currentDate[updatedAt])) {\n    let timestampSet = false;\n    if (updatedAt.indexOf('.') !== -1) {\n      const pieces = updatedAt.split('.');\n      for (let i = 1; i < pieces.length; ++i) {\n        const remnant = pieces.slice(-i).join('.');\n        const start = pieces.slice(0, -i).join('.');\n        if (currentUpdate[start] != null) {\n          currentUpdate[start][remnant] = now;\n          timestampSet = true;\n          break;\n        } else if (currentUpdate.$set && currentUpdate.$set[start]) {\n          currentUpdate.$set[start][remnant] = now;\n          timestampSet = true;\n          break;\n        }\n      }\n    }\n    if (!timestampSet) {\n      updates.$set[updatedAt] = now;\n    }\n    if (updates.hasOwnProperty(updatedAt)) {\n      delete updates[updatedAt];\n    }\n  }\n  if (!skipCreatedAt && createdAt) {\n    if (currentUpdate[createdAt]) {\n      delete currentUpdate[createdAt];\n    }\n    if (currentUpdate.$set && currentUpdate.$set[createdAt]) {\n      delete currentUpdate.$set[createdAt];\n    }\n    let timestampSet = false;\n    if (createdAt.indexOf('.') !== -1) {\n      const pieces = createdAt.split('.');\n      for (let i = 1; i < pieces.length; ++i) {\n        const remnant = pieces.slice(-i).join('.');\n        const start = pieces.slice(0, -i).join('.');\n        if (currentUpdate[start] != null) {\n          currentUpdate[start][remnant] = now;\n          timestampSet = true;\n          break;\n        } else if (currentUpdate.$set && currentUpdate.$set[start]) {\n          currentUpdate.$set[start][remnant] = now;\n          timestampSet = true;\n          break;\n        }\n      }\n    }\n    if (!timestampSet) {\n      updates.$setOnInsert = updates.$setOnInsert || {};\n      updates.$setOnInsert[createdAt] = now;\n    }\n  }\n  if (Object.keys(updates.$set).length === 0) {\n    delete updates.$set;\n  }\n  return updates;\n}","map":{"version":3,"names":["get","require","module","exports","applyTimestampsToUpdate","now","createdAt","updatedAt","currentUpdate","options","updates","_updates","overwrite","timestamps","skipCreatedAt","skipUpdatedAt","$set","Array","isArray","push","$currentDate","timestampSet","indexOf","pieces","split","i","length","remnant","slice","join","start","hasOwnProperty","$setOnInsert","Object","keys"],"sources":["C:/Users/91930/Desktop/Github projects/Pharmacy Demo/back-end/node_modules/mongoose/lib/helpers/update/applyTimestampsToUpdate.js"],"sourcesContent":["'use strict';\r\n\r\n/*!\r\n * ignore\r\n */\r\n\r\nconst get = require('../get');\r\n\r\nmodule.exports = applyTimestampsToUpdate;\r\n\r\n/*!\r\n * ignore\r\n */\r\n\r\nfunction applyTimestampsToUpdate(now, createdAt, updatedAt, currentUpdate, options) {\r\n  const updates = currentUpdate;\r\n  let _updates = updates;\r\n  const overwrite = get(options, 'overwrite', false);\r\n  const timestamps = get(options, 'timestamps', true);\r\n\r\n  // Support skipping timestamps at the query level, see gh-6980\r\n  if (!timestamps || updates == null) {\r\n    return currentUpdate;\r\n  }\r\n\r\n  const skipCreatedAt = timestamps != null && timestamps.createdAt === false;\r\n  const skipUpdatedAt = timestamps != null && timestamps.updatedAt === false;\r\n\r\n  if (overwrite) {\r\n    if (currentUpdate && currentUpdate.$set) {\r\n      currentUpdate = currentUpdate.$set;\r\n      updates.$set = {};\r\n      _updates = updates.$set;\r\n    }\r\n    if (!skipUpdatedAt && updatedAt && !currentUpdate[updatedAt]) {\r\n      _updates[updatedAt] = now;\r\n    }\r\n    if (!skipCreatedAt && createdAt && !currentUpdate[createdAt]) {\r\n      _updates[createdAt] = now;\r\n    }\r\n    return updates;\r\n  }\r\n  currentUpdate = currentUpdate || {};\r\n\r\n  if (Array.isArray(updates)) {\r\n    // Update with aggregation pipeline\r\n    updates.push({ $set: { [updatedAt]: now } });\r\n\r\n    return updates;\r\n  }\r\n\r\n  updates.$set = updates.$set || {};\r\n  if (!skipUpdatedAt && updatedAt &&\r\n      (!currentUpdate.$currentDate || !currentUpdate.$currentDate[updatedAt])) {\r\n    let timestampSet = false;\r\n    if (updatedAt.indexOf('.') !== -1) {\r\n      const pieces = updatedAt.split('.');\r\n      for (let i = 1; i < pieces.length; ++i) {\r\n        const remnant = pieces.slice(-i).join('.');\r\n        const start = pieces.slice(0, -i).join('.');\r\n        if (currentUpdate[start] != null) {\r\n          currentUpdate[start][remnant] = now;\r\n          timestampSet = true;\r\n          break;\r\n        } else if (currentUpdate.$set && currentUpdate.$set[start]) {\r\n          currentUpdate.$set[start][remnant] = now;\r\n          timestampSet = true;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (!timestampSet) {\r\n      updates.$set[updatedAt] = now;\r\n    }\r\n\r\n    if (updates.hasOwnProperty(updatedAt)) {\r\n      delete updates[updatedAt];\r\n    }\r\n  }\r\n\r\n  if (!skipCreatedAt && createdAt) {\r\n    if (currentUpdate[createdAt]) {\r\n      delete currentUpdate[createdAt];\r\n    }\r\n    if (currentUpdate.$set && currentUpdate.$set[createdAt]) {\r\n      delete currentUpdate.$set[createdAt];\r\n    }\r\n    let timestampSet = false;\r\n    if (createdAt.indexOf('.') !== -1) {\r\n      const pieces = createdAt.split('.');\r\n      for (let i = 1; i < pieces.length; ++i) {\r\n        const remnant = pieces.slice(-i).join('.');\r\n        const start = pieces.slice(0, -i).join('.');\r\n        if (currentUpdate[start] != null) {\r\n          currentUpdate[start][remnant] = now;\r\n          timestampSet = true;\r\n          break;\r\n        } else if (currentUpdate.$set && currentUpdate.$set[start]) {\r\n          currentUpdate.$set[start][remnant] = now;\r\n          timestampSet = true;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (!timestampSet) {\r\n      updates.$setOnInsert = updates.$setOnInsert || {};\r\n      updates.$setOnInsert[createdAt] = now;\r\n    }\r\n  }\r\n\r\n  if (Object.keys(updates.$set).length === 0) {\r\n    delete updates.$set;\r\n  }\r\n  return updates;\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}