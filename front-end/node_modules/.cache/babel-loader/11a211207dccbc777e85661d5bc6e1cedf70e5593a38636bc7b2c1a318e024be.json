{"ast":null,"code":"/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Tobias Koppers @sokra\r\n*/\n\n\"use strict\";\n\n/**\r\n * intersect creates Set containing the intersection of elements between all sets\r\n * @template T\r\n * @param {Set<T>[]} sets an array of sets being checked for shared elements\r\n * @returns {Set<T>} returns a new Set containing the intersecting items\r\n */\nconst intersect = sets => {\n  if (sets.length === 0) return new Set();\n  if (sets.length === 1) return new Set(sets[0]);\n  let minSize = Infinity;\n  let minIndex = -1;\n  for (let i = 0; i < sets.length; i++) {\n    const size = sets[i].size;\n    if (size < minSize) {\n      minIndex = i;\n      minSize = size;\n    }\n  }\n  const current = new Set(sets[minIndex]);\n  for (let i = 0; i < sets.length; i++) {\n    if (i === minIndex) continue;\n    const set = sets[i];\n    for (const item of current) {\n      if (!set.has(item)) {\n        current.delete(item);\n      }\n    }\n  }\n  return current;\n};\n\n/**\r\n * Checks if a set is the subset of another set\r\n * @template T\r\n * @param {Set<T>} bigSet a Set which contains the original elements to compare against\r\n * @param {Set<T>} smallSet the set whose elements might be contained inside of bigSet\r\n * @returns {boolean} returns true if smallSet contains all elements inside of the bigSet\r\n */\nconst isSubset = (bigSet, smallSet) => {\n  if (bigSet.size < smallSet.size) return false;\n  for (const item of smallSet) {\n    if (!bigSet.has(item)) return false;\n  }\n  return true;\n};\n\n/**\r\n * @template T\r\n * @param {Set<T>} set a set\r\n * @param {function(T): boolean} fn selector function\r\n * @returns {T | undefined} found item\r\n */\nconst find = (set, fn) => {\n  for (const item of set) {\n    if (fn(item)) return item;\n  }\n};\n\n/**\r\n * @template T\r\n * @param {Set<T>} set a set\r\n * @returns {T | undefined} first item\r\n */\nconst first = set => {\n  const entry = set.values().next();\n  return entry.done ? undefined : entry.value;\n};\n\n/**\r\n * @template T\r\n * @param {Set<T>} a first\r\n * @param {Set<T>} b second\r\n * @returns {Set<T>} combined set, may be identical to a or b\r\n */\nconst combine = (a, b) => {\n  if (b.size === 0) return a;\n  if (a.size === 0) return b;\n  const set = new Set(a);\n  for (const item of b) set.add(item);\n  return set;\n};\nexports.intersect = intersect;\nexports.isSubset = isSubset;\nexports.find = find;\nexports.first = first;\nexports.combine = combine;","map":{"version":3,"names":["intersect","sets","length","Set","minSize","Infinity","minIndex","i","size","current","set","item","has","delete","isSubset","bigSet","smallSet","find","fn","first","entry","values","next","done","undefined","value","combine","a","b","add","exports"],"sources":["C:/Users/91930/Desktop/Github projects/Pharmacy Demo/front-end/node_modules/webpack/lib/util/SetHelpers.js"],"sourcesContent":["/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Tobias Koppers @sokra\r\n*/\r\n\r\n\"use strict\";\r\n\r\n/**\r\n * intersect creates Set containing the intersection of elements between all sets\r\n * @template T\r\n * @param {Set<T>[]} sets an array of sets being checked for shared elements\r\n * @returns {Set<T>} returns a new Set containing the intersecting items\r\n */\r\nconst intersect = sets => {\r\n\tif (sets.length === 0) return new Set();\r\n\tif (sets.length === 1) return new Set(sets[0]);\r\n\tlet minSize = Infinity;\r\n\tlet minIndex = -1;\r\n\tfor (let i = 0; i < sets.length; i++) {\r\n\t\tconst size = sets[i].size;\r\n\t\tif (size < minSize) {\r\n\t\t\tminIndex = i;\r\n\t\t\tminSize = size;\r\n\t\t}\r\n\t}\r\n\tconst current = new Set(sets[minIndex]);\r\n\tfor (let i = 0; i < sets.length; i++) {\r\n\t\tif (i === minIndex) continue;\r\n\t\tconst set = sets[i];\r\n\t\tfor (const item of current) {\r\n\t\t\tif (!set.has(item)) {\r\n\t\t\t\tcurrent.delete(item);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn current;\r\n};\r\n\r\n/**\r\n * Checks if a set is the subset of another set\r\n * @template T\r\n * @param {Set<T>} bigSet a Set which contains the original elements to compare against\r\n * @param {Set<T>} smallSet the set whose elements might be contained inside of bigSet\r\n * @returns {boolean} returns true if smallSet contains all elements inside of the bigSet\r\n */\r\nconst isSubset = (bigSet, smallSet) => {\r\n\tif (bigSet.size < smallSet.size) return false;\r\n\tfor (const item of smallSet) {\r\n\t\tif (!bigSet.has(item)) return false;\r\n\t}\r\n\treturn true;\r\n};\r\n\r\n/**\r\n * @template T\r\n * @param {Set<T>} set a set\r\n * @param {function(T): boolean} fn selector function\r\n * @returns {T | undefined} found item\r\n */\r\nconst find = (set, fn) => {\r\n\tfor (const item of set) {\r\n\t\tif (fn(item)) return item;\r\n\t}\r\n};\r\n\r\n/**\r\n * @template T\r\n * @param {Set<T>} set a set\r\n * @returns {T | undefined} first item\r\n */\r\nconst first = set => {\r\n\tconst entry = set.values().next();\r\n\treturn entry.done ? undefined : entry.value;\r\n};\r\n\r\n/**\r\n * @template T\r\n * @param {Set<T>} a first\r\n * @param {Set<T>} b second\r\n * @returns {Set<T>} combined set, may be identical to a or b\r\n */\r\nconst combine = (a, b) => {\r\n\tif (b.size === 0) return a;\r\n\tif (a.size === 0) return b;\r\n\tconst set = new Set(a);\r\n\tfor (const item of b) set.add(item);\r\n\treturn set;\r\n};\r\n\r\nexports.intersect = intersect;\r\nexports.isSubset = isSubset;\r\nexports.find = find;\r\nexports.first = first;\r\nexports.combine = combine;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}