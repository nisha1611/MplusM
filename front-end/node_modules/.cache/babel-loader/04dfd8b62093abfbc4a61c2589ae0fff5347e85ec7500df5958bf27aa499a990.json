{"ast":null,"code":"/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Tobias Koppers @sokra\r\n*/\n\n\"use strict\";\n\n/** @template T @typedef {(string | Record<string, string | string[] | T>)[] | Record<string, string | string[] | T>} ContainerOptionsFormat */\n\n/**\r\n * @template T\r\n * @template N\r\n * @param {ContainerOptionsFormat<T>} options options passed by the user\r\n * @param {function(string | string[], string) : N} normalizeSimple normalize a simple item\r\n * @param {function(T, string) : N} normalizeOptions normalize a complex item\r\n * @param {function(string, N): void} fn processing function\r\n * @returns {void}\r\n */\nconst process = (options, normalizeSimple, normalizeOptions, fn) => {\n  const array = items => {\n    for (const item of items) {\n      if (typeof item === \"string\") {\n        fn(item, normalizeSimple(item, item));\n      } else if (item && typeof item === \"object\") {\n        object(item);\n      } else {\n        throw new Error(\"Unexpected options format\");\n      }\n    }\n  };\n  const object = obj => {\n    for (const [key, value] of Object.entries(obj)) {\n      if (typeof value === \"string\" || Array.isArray(value)) {\n        fn(key, normalizeSimple(value, key));\n      } else {\n        fn(key, normalizeOptions(value, key));\n      }\n    }\n  };\n  if (!options) {\n    return;\n  } else if (Array.isArray(options)) {\n    array(options);\n  } else if (typeof options === \"object\") {\n    object(options);\n  } else {\n    throw new Error(\"Unexpected options format\");\n  }\n};\n\n/**\r\n * @template T\r\n * @template R\r\n * @param {ContainerOptionsFormat<T>} options options passed by the user\r\n * @param {function(string | string[], string) : R} normalizeSimple normalize a simple item\r\n * @param {function(T, string) : R} normalizeOptions normalize a complex item\r\n * @returns {[string, R][]} parsed options\r\n */\nconst parseOptions = (options, normalizeSimple, normalizeOptions) => {\n  /** @type {[string, R][]} */\n  const items = [];\n  process(options, normalizeSimple, normalizeOptions, (key, value) => {\n    items.push([key, value]);\n  });\n  return items;\n};\n\n/**\r\n * @template T\r\n * @param {string} scope scope name\r\n * @param {ContainerOptionsFormat<T>} options options passed by the user\r\n * @returns {Record<string, string | string[] | T>} options to spread or pass\r\n */\nconst scope = (scope, options) => {\n  /** @type {Record<string, string | string[] | T>} */\n  const obj = {};\n  process(options, item => /** @type {string | string[] | T} */item, item => /** @type {string | string[] | T} */item, (key, value) => {\n    obj[key.startsWith(\"./\") ? `${scope}${key.slice(1)}` : `${scope}/${key}`] = value;\n  });\n  return obj;\n};\nexports.parseOptions = parseOptions;\nexports.scope = scope;","map":{"version":3,"names":["process","options","normalizeSimple","normalizeOptions","fn","array","items","item","object","Error","obj","key","value","Object","entries","Array","isArray","parseOptions","push","scope","startsWith","slice","exports"],"sources":["C:/Users/91930/Desktop/Github projects/Pharmacy Demo/front-end/node_modules/webpack/lib/container/options.js"],"sourcesContent":["/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Tobias Koppers @sokra\r\n*/\r\n\r\n\"use strict\";\r\n\r\n/** @template T @typedef {(string | Record<string, string | string[] | T>)[] | Record<string, string | string[] | T>} ContainerOptionsFormat */\r\n\r\n/**\r\n * @template T\r\n * @template N\r\n * @param {ContainerOptionsFormat<T>} options options passed by the user\r\n * @param {function(string | string[], string) : N} normalizeSimple normalize a simple item\r\n * @param {function(T, string) : N} normalizeOptions normalize a complex item\r\n * @param {function(string, N): void} fn processing function\r\n * @returns {void}\r\n */\r\nconst process = (options, normalizeSimple, normalizeOptions, fn) => {\r\n\tconst array = items => {\r\n\t\tfor (const item of items) {\r\n\t\t\tif (typeof item === \"string\") {\r\n\t\t\t\tfn(item, normalizeSimple(item, item));\r\n\t\t\t} else if (item && typeof item === \"object\") {\r\n\t\t\t\tobject(item);\r\n\t\t\t} else {\r\n\t\t\t\tthrow new Error(\"Unexpected options format\");\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\tconst object = obj => {\r\n\t\tfor (const [key, value] of Object.entries(obj)) {\r\n\t\t\tif (typeof value === \"string\" || Array.isArray(value)) {\r\n\t\t\t\tfn(key, normalizeSimple(value, key));\r\n\t\t\t} else {\r\n\t\t\t\tfn(key, normalizeOptions(value, key));\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\tif (!options) {\r\n\t\treturn;\r\n\t} else if (Array.isArray(options)) {\r\n\t\tarray(options);\r\n\t} else if (typeof options === \"object\") {\r\n\t\tobject(options);\r\n\t} else {\r\n\t\tthrow new Error(\"Unexpected options format\");\r\n\t}\r\n};\r\n\r\n/**\r\n * @template T\r\n * @template R\r\n * @param {ContainerOptionsFormat<T>} options options passed by the user\r\n * @param {function(string | string[], string) : R} normalizeSimple normalize a simple item\r\n * @param {function(T, string) : R} normalizeOptions normalize a complex item\r\n * @returns {[string, R][]} parsed options\r\n */\r\nconst parseOptions = (options, normalizeSimple, normalizeOptions) => {\r\n\t/** @type {[string, R][]} */\r\n\tconst items = [];\r\n\tprocess(options, normalizeSimple, normalizeOptions, (key, value) => {\r\n\t\titems.push([key, value]);\r\n\t});\r\n\treturn items;\r\n};\r\n\r\n/**\r\n * @template T\r\n * @param {string} scope scope name\r\n * @param {ContainerOptionsFormat<T>} options options passed by the user\r\n * @returns {Record<string, string | string[] | T>} options to spread or pass\r\n */\r\nconst scope = (scope, options) => {\r\n\t/** @type {Record<string, string | string[] | T>} */\r\n\tconst obj = {};\r\n\tprocess(\r\n\t\toptions,\r\n\t\titem => /** @type {string | string[] | T} */ (item),\r\n\t\titem => /** @type {string | string[] | T} */ (item),\r\n\t\t(key, value) => {\r\n\t\t\tobj[\r\n\t\t\t\tkey.startsWith(\"./\") ? `${scope}${key.slice(1)}` : `${scope}/${key}`\r\n\t\t\t] = value;\r\n\t\t}\r\n\t);\r\n\treturn obj;\r\n};\r\n\r\nexports.parseOptions = parseOptions;\r\nexports.scope = scope;\r\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMA,OAAO,GAAG,CAACC,OAAO,EAAEC,eAAe,EAAEC,gBAAgB,EAAEC,EAAE,KAAK;EACnE,MAAMC,KAAK,GAAGC,KAAK,IAAI;IACtB,KAAK,MAAMC,IAAI,IAAID,KAAK,EAAE;MACzB,IAAI,OAAOC,IAAI,KAAK,QAAQ,EAAE;QAC7BH,EAAE,CAACG,IAAI,EAAEL,eAAe,CAACK,IAAI,EAAEA,IAAI,CAAC,CAAC;MACtC,CAAC,MAAM,IAAIA,IAAI,IAAI,OAAOA,IAAI,KAAK,QAAQ,EAAE;QAC5CC,MAAM,CAACD,IAAI,CAAC;MACb,CAAC,MAAM;QACN,MAAM,IAAIE,KAAK,CAAC,2BAA2B,CAAC;MAC7C;IACD;EACD,CAAC;EACD,MAAMD,MAAM,GAAGE,GAAG,IAAI;IACrB,KAAK,MAAM,CAACC,GAAG,EAAEC,KAAK,CAAC,IAAIC,MAAM,CAACC,OAAO,CAACJ,GAAG,CAAC,EAAE;MAC/C,IAAI,OAAOE,KAAK,KAAK,QAAQ,IAAIG,KAAK,CAACC,OAAO,CAACJ,KAAK,CAAC,EAAE;QACtDR,EAAE,CAACO,GAAG,EAAET,eAAe,CAACU,KAAK,EAAED,GAAG,CAAC,CAAC;MACrC,CAAC,MAAM;QACNP,EAAE,CAACO,GAAG,EAAER,gBAAgB,CAACS,KAAK,EAAED,GAAG,CAAC,CAAC;MACtC;IACD;EACD,CAAC;EACD,IAAI,CAACV,OAAO,EAAE;IACb;EACD,CAAC,MAAM,IAAIc,KAAK,CAACC,OAAO,CAACf,OAAO,CAAC,EAAE;IAClCI,KAAK,CAACJ,OAAO,CAAC;EACf,CAAC,MAAM,IAAI,OAAOA,OAAO,KAAK,QAAQ,EAAE;IACvCO,MAAM,CAACP,OAAO,CAAC;EAChB,CAAC,MAAM;IACN,MAAM,IAAIQ,KAAK,CAAC,2BAA2B,CAAC;EAC7C;AACD,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMQ,YAAY,GAAG,CAAChB,OAAO,EAAEC,eAAe,EAAEC,gBAAgB,KAAK;EACpE;EACA,MAAMG,KAAK,GAAG,EAAE;EAChBN,OAAO,CAACC,OAAO,EAAEC,eAAe,EAAEC,gBAAgB,EAAE,CAACQ,GAAG,EAAEC,KAAK,KAAK;IACnEN,KAAK,CAACY,IAAI,CAAC,CAACP,GAAG,EAAEC,KAAK,CAAC,CAAC;EACzB,CAAC,CAAC;EACF,OAAON,KAAK;AACb,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,MAAMa,KAAK,GAAG,CAACA,KAAK,EAAElB,OAAO,KAAK;EACjC;EACA,MAAMS,GAAG,GAAG,CAAC,CAAC;EACdV,OAAO,CACNC,OAAO,EACPM,IAAI,IAAI,oCAAsCA,IAAK,EACnDA,IAAI,IAAI,oCAAsCA,IAAK,EACnD,CAACI,GAAG,EAAEC,KAAK,KAAK;IACfF,GAAG,CACFC,GAAG,CAACS,UAAU,CAAC,IAAI,CAAC,GAAI,GAAED,KAAM,GAAER,GAAG,CAACU,KAAK,CAAC,CAAC,CAAE,EAAC,GAAI,GAAEF,KAAM,IAAGR,GAAI,EAAC,CACpE,GAAGC,KAAK;EACV,CAAC,CACD;EACD,OAAOF,GAAG;AACX,CAAC;AAEDY,OAAO,CAACL,YAAY,GAAGA,YAAY;AACnCK,OAAO,CAACH,KAAK,GAAGA,KAAK"},"metadata":{},"sourceType":"script","externalDependencies":[]}