{"ast":null,"code":"/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Tobias Koppers @sokra\r\n*/\n\n\"use strict\";\n\nconst {\n  pathToFileURL\n} = require(\"url\");\nconst AsyncDependenciesBlock = require(\"../AsyncDependenciesBlock\");\nconst CommentCompilationWarning = require(\"../CommentCompilationWarning\");\nconst UnsupportedFeatureWarning = require(\"../UnsupportedFeatureWarning\");\nconst EnableChunkLoadingPlugin = require(\"../javascript/EnableChunkLoadingPlugin\");\nconst {\n  equals\n} = require(\"../util/ArrayHelpers\");\nconst createHash = require(\"../util/createHash\");\nconst {\n  contextify\n} = require(\"../util/identifier\");\nconst EnableWasmLoadingPlugin = require(\"../wasm/EnableWasmLoadingPlugin\");\nconst ConstDependency = require(\"./ConstDependency\");\nconst CreateScriptUrlDependency = require(\"./CreateScriptUrlDependency\");\nconst {\n  harmonySpecifierTag\n} = require(\"./HarmonyImportDependencyParserPlugin\");\nconst WorkerDependency = require(\"./WorkerDependency\");\n\n/** @typedef {import(\"estree\").Expression} Expression */\n/** @typedef {import(\"estree\").ObjectExpression} ObjectExpression */\n/** @typedef {import(\"estree\").Pattern} Pattern */\n/** @typedef {import(\"estree\").Property} Property */\n/** @typedef {import(\"estree\").SpreadElement} SpreadElement */\n/** @typedef {import(\"../Compiler\")} Compiler */\n/** @typedef {import(\"../Entrypoint\").EntryOptions} EntryOptions */\n/** @typedef {import(\"../Parser\").ParserState} ParserState */\n/** @typedef {import(\"../javascript/BasicEvaluatedExpression\")} BasicEvaluatedExpression */\n/** @typedef {import(\"../javascript/JavascriptParser\")} JavascriptParser */\n/** @typedef {import(\"./HarmonyImportDependencyParserPlugin\").HarmonySettings} HarmonySettings */\n\nconst getUrl = module => {\n  return pathToFileURL(module.resource).toString();\n};\nconst DEFAULT_SYNTAX = [\"Worker\", \"SharedWorker\", \"navigator.serviceWorker.register()\", \"Worker from worker_threads\"];\n\n/** @type {WeakMap<ParserState, number>} */\nconst workerIndexMap = new WeakMap();\nclass WorkerPlugin {\n  constructor(chunkLoading, wasmLoading, module) {\n    this._chunkLoading = chunkLoading;\n    this._wasmLoading = wasmLoading;\n    this._module = module;\n  }\n  /**\r\n   * Apply the plugin\r\n   * @param {Compiler} compiler the compiler instance\r\n   * @returns {void}\r\n   */\n  apply(compiler) {\n    if (this._chunkLoading) {\n      new EnableChunkLoadingPlugin(this._chunkLoading).apply(compiler);\n    }\n    if (this._wasmLoading) {\n      new EnableWasmLoadingPlugin(this._wasmLoading).apply(compiler);\n    }\n    const cachedContextify = contextify.bindContextCache(compiler.context, compiler.root);\n    compiler.hooks.thisCompilation.tap(\"WorkerPlugin\", (compilation, _ref) => {\n      let {\n        normalModuleFactory\n      } = _ref;\n      compilation.dependencyFactories.set(WorkerDependency, normalModuleFactory);\n      compilation.dependencyTemplates.set(WorkerDependency, new WorkerDependency.Template());\n      compilation.dependencyTemplates.set(CreateScriptUrlDependency, new CreateScriptUrlDependency.Template());\n\n      /**\r\n       * @param {JavascriptParser} parser the parser\r\n       * @param {Expression} expr expression\r\n       * @returns {[BasicEvaluatedExpression, [number, number]]} parsed\r\n       */\n      const parseModuleUrl = (parser, expr) => {\n        if (expr.type !== \"NewExpression\" || expr.callee.type === \"Super\" || expr.arguments.length !== 2) return;\n        const [arg1, arg2] = expr.arguments;\n        if (arg1.type === \"SpreadElement\") return;\n        if (arg2.type === \"SpreadElement\") return;\n        const callee = parser.evaluateExpression(expr.callee);\n        if (!callee.isIdentifier() || callee.identifier !== \"URL\") return;\n        const arg2Value = parser.evaluateExpression(arg2);\n        if (!arg2Value.isString() || !arg2Value.string.startsWith(\"file://\") || arg2Value.string !== getUrl(parser.state.module)) {\n          return;\n        }\n        const arg1Value = parser.evaluateExpression(arg1);\n        return [arg1Value, [arg1.range[0], arg2.range[1]]];\n      };\n\n      /**\r\n       * @param {JavascriptParser} parser the parser\r\n       * @param {ObjectExpression} expr expression\r\n       * @returns {{ expressions: Record<string, Expression | Pattern>, otherElements: (Property | SpreadElement)[], values: Record<string, any>, spread: boolean, insertType: \"comma\" | \"single\", insertLocation: number }} parsed object\r\n       */\n      const parseObjectExpression = (parser, expr) => {\n        /** @type {Record<string, any>} */\n        const values = {};\n        /** @type {Record<string, Expression | Pattern>} */\n        const expressions = {};\n        /** @type {(Property | SpreadElement)[]} */\n        const otherElements = [];\n        let spread = false;\n        for (const prop of expr.properties) {\n          if (prop.type === \"SpreadElement\") {\n            spread = true;\n          } else if (prop.type === \"Property\" && !prop.method && !prop.computed && prop.key.type === \"Identifier\") {\n            expressions[prop.key.name] = prop.value;\n            if (!prop.shorthand && !prop.value.type.endsWith(\"Pattern\")) {\n              const value = parser.evaluateExpression( /** @type {Expression} */prop.value);\n              if (value.isCompileTimeValue()) values[prop.key.name] = value.asCompileTimeValue();\n            }\n          } else {\n            otherElements.push(prop);\n          }\n        }\n        const insertType = expr.properties.length > 0 ? \"comma\" : \"single\";\n        const insertLocation = expr.properties[expr.properties.length - 1].range[1];\n        return {\n          expressions,\n          otherElements,\n          values,\n          spread,\n          insertType,\n          insertLocation\n        };\n      };\n\n      /**\r\n       * @param {JavascriptParser} parser the parser\r\n       * @param {object} parserOptions options\r\n       */\n      const parserPlugin = (parser, parserOptions) => {\n        if (parserOptions.worker === false) return;\n        const options = !Array.isArray(parserOptions.worker) ? [\"...\"] : parserOptions.worker;\n        const handleNewWorker = expr => {\n          if (expr.arguments.length === 0 || expr.arguments.length > 2) return;\n          const [arg1, arg2] = expr.arguments;\n          if (arg1.type === \"SpreadElement\") return;\n          if (arg2 && arg2.type === \"SpreadElement\") return;\n          const parsedUrl = parseModuleUrl(parser, arg1);\n          if (!parsedUrl) return;\n          const [url, range] = parsedUrl;\n          if (!url.isString()) return;\n          const {\n            expressions,\n            otherElements,\n            values: options,\n            spread: hasSpreadInOptions,\n            insertType,\n            insertLocation\n          } = arg2 && arg2.type === \"ObjectExpression\" ? parseObjectExpression(parser, arg2) : {\n            /** @type {Record<string, Expression | Pattern>} */\n            expressions: {},\n            otherElements: [],\n            /** @type {Record<string, any>} */\n            values: {},\n            spread: false,\n            insertType: arg2 ? \"spread\" : \"argument\",\n            insertLocation: arg2 ? arg2.range : arg1.range[1]\n          };\n          const {\n            options: importOptions,\n            errors: commentErrors\n          } = parser.parseCommentOptions(expr.range);\n          if (commentErrors) {\n            for (const e of commentErrors) {\n              const {\n                comment\n              } = e;\n              parser.state.module.addWarning(new CommentCompilationWarning(`Compilation error while processing magic comment(-s): /*${comment.value}*/: ${e.message}`, comment.loc));\n            }\n          }\n\n          /** @type {EntryOptions} */\n          let entryOptions = {};\n          if (importOptions) {\n            if (importOptions.webpackIgnore !== undefined) {\n              if (typeof importOptions.webpackIgnore !== \"boolean\") {\n                parser.state.module.addWarning(new UnsupportedFeatureWarning(`\\`webpackIgnore\\` expected a boolean, but received: ${importOptions.webpackIgnore}.`, expr.loc));\n              } else {\n                if (importOptions.webpackIgnore) {\n                  return false;\n                }\n              }\n            }\n            if (importOptions.webpackEntryOptions !== undefined) {\n              if (typeof importOptions.webpackEntryOptions !== \"object\" || importOptions.webpackEntryOptions === null) {\n                parser.state.module.addWarning(new UnsupportedFeatureWarning(`\\`webpackEntryOptions\\` expected a object, but received: ${importOptions.webpackEntryOptions}.`, expr.loc));\n              } else {\n                Object.assign(entryOptions, importOptions.webpackEntryOptions);\n              }\n            }\n            if (importOptions.webpackChunkName !== undefined) {\n              if (typeof importOptions.webpackChunkName !== \"string\") {\n                parser.state.module.addWarning(new UnsupportedFeatureWarning(`\\`webpackChunkName\\` expected a string, but received: ${importOptions.webpackChunkName}.`, expr.loc));\n              } else {\n                entryOptions.name = importOptions.webpackChunkName;\n              }\n            }\n          }\n          if (!Object.prototype.hasOwnProperty.call(entryOptions, \"name\") && options && typeof options.name === \"string\") {\n            entryOptions.name = options.name;\n          }\n          if (entryOptions.runtime === undefined) {\n            let i = workerIndexMap.get(parser.state) || 0;\n            workerIndexMap.set(parser.state, i + 1);\n            let name = `${cachedContextify(parser.state.module.identifier())}|${i}`;\n            const hash = createHash(compilation.outputOptions.hashFunction);\n            hash.update(name);\n            const digest = /** @type {string} */\n            hash.digest(compilation.outputOptions.hashDigest);\n            entryOptions.runtime = digest.slice(0, compilation.outputOptions.hashDigestLength);\n          }\n          const block = new AsyncDependenciesBlock({\n            name: entryOptions.name,\n            entryOptions: {\n              chunkLoading: this._chunkLoading,\n              wasmLoading: this._wasmLoading,\n              ...entryOptions\n            }\n          });\n          block.loc = expr.loc;\n          const dep = new WorkerDependency(url.string, range);\n          dep.loc = expr.loc;\n          block.addDependency(dep);\n          parser.state.module.addBlock(block);\n          if (compilation.outputOptions.trustedTypes) {\n            const dep = new CreateScriptUrlDependency(expr.arguments[0].range);\n            dep.loc = expr.loc;\n            parser.state.module.addDependency(dep);\n          }\n          if (expressions.type) {\n            const expr = expressions.type;\n            if (options.type !== false) {\n              const dep = new ConstDependency(this._module ? '\"module\"' : \"undefined\", expr.range);\n              dep.loc = expr.loc;\n              parser.state.module.addPresentationalDependency(dep);\n              expressions.type = undefined;\n            }\n          } else if (insertType === \"comma\") {\n            if (this._module || hasSpreadInOptions) {\n              const dep = new ConstDependency(`, type: ${this._module ? '\"module\"' : \"undefined\"}`, insertLocation);\n              dep.loc = expr.loc;\n              parser.state.module.addPresentationalDependency(dep);\n            }\n          } else if (insertType === \"spread\") {\n            const dep1 = new ConstDependency(\"Object.assign({}, \", insertLocation[0]);\n            const dep2 = new ConstDependency(`, { type: ${this._module ? '\"module\"' : \"undefined\"} })`, insertLocation[1]);\n            dep1.loc = expr.loc;\n            dep2.loc = expr.loc;\n            parser.state.module.addPresentationalDependency(dep1);\n            parser.state.module.addPresentationalDependency(dep2);\n          } else if (insertType === \"argument\") {\n            if (this._module) {\n              const dep = new ConstDependency(', { type: \"module\" }', insertLocation);\n              dep.loc = expr.loc;\n              parser.state.module.addPresentationalDependency(dep);\n            }\n          }\n          parser.walkExpression(expr.callee);\n          for (const key of Object.keys(expressions)) {\n            if (expressions[key]) parser.walkExpression(expressions[key]);\n          }\n          for (const prop of otherElements) {\n            parser.walkProperty(prop);\n          }\n          if (insertType === \"spread\") {\n            parser.walkExpression(arg2);\n          }\n          return true;\n        };\n        const processItem = item => {\n          if (item.endsWith(\"()\")) {\n            parser.hooks.call.for(item.slice(0, -2)).tap(\"WorkerPlugin\", handleNewWorker);\n          } else {\n            const match = /^(.+?)(\\(\\))?\\s+from\\s+(.+)$/.exec(item);\n            if (match) {\n              const ids = match[1].split(\".\");\n              const call = match[2];\n              const source = match[3];\n              (call ? parser.hooks.call : parser.hooks.new).for(harmonySpecifierTag).tap(\"WorkerPlugin\", expr => {\n                const settings = /** @type {HarmonySettings} */\n                parser.currentTagData;\n                if (!settings || settings.source !== source || !equals(settings.ids, ids)) {\n                  return;\n                }\n                return handleNewWorker(expr);\n              });\n            } else {\n              parser.hooks.new.for(item).tap(\"WorkerPlugin\", handleNewWorker);\n            }\n          }\n        };\n        for (const item of options) {\n          if (item === \"...\") {\n            DEFAULT_SYNTAX.forEach(processItem);\n          } else processItem(item);\n        }\n      };\n      normalModuleFactory.hooks.parser.for(\"javascript/auto\").tap(\"WorkerPlugin\", parserPlugin);\n      normalModuleFactory.hooks.parser.for(\"javascript/esm\").tap(\"WorkerPlugin\", parserPlugin);\n    });\n  }\n}\nmodule.exports = WorkerPlugin;","map":{"version":3,"names":["pathToFileURL","require","AsyncDependenciesBlock","CommentCompilationWarning","UnsupportedFeatureWarning","EnableChunkLoadingPlugin","equals","createHash","contextify","EnableWasmLoadingPlugin","ConstDependency","CreateScriptUrlDependency","harmonySpecifierTag","WorkerDependency","getUrl","module","resource","toString","DEFAULT_SYNTAX","workerIndexMap","WeakMap","WorkerPlugin","constructor","chunkLoading","wasmLoading","_chunkLoading","_wasmLoading","_module","apply","compiler","cachedContextify","bindContextCache","context","root","hooks","thisCompilation","tap","compilation","normalModuleFactory","dependencyFactories","set","dependencyTemplates","Template","parseModuleUrl","parser","expr","type","callee","arguments","length","arg1","arg2","evaluateExpression","isIdentifier","identifier","arg2Value","isString","string","startsWith","state","arg1Value","range","parseObjectExpression","values","expressions","otherElements","spread","prop","properties","method","computed","key","name","value","shorthand","endsWith","isCompileTimeValue","asCompileTimeValue","push","insertType","insertLocation","parserPlugin","parserOptions","worker","options","Array","isArray","handleNewWorker","parsedUrl","url","hasSpreadInOptions","importOptions","errors","commentErrors","parseCommentOptions","e","comment","addWarning","message","loc","entryOptions","webpackIgnore","undefined","webpackEntryOptions","Object","assign","webpackChunkName","prototype","hasOwnProperty","call","runtime","i","get","hash","outputOptions","hashFunction","update","digest","hashDigest","slice","hashDigestLength","block","dep","addDependency","addBlock","trustedTypes","addPresentationalDependency","dep1","dep2","walkExpression","keys","walkProperty","processItem","item","for","match","exec","ids","split","source","new","settings","currentTagData","forEach","exports"],"sources":["C:/Users/91930/Desktop/Github projects/Pharmacy Demo/front-end/node_modules/webpack/lib/dependencies/WorkerPlugin.js"],"sourcesContent":["/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Tobias Koppers @sokra\r\n*/\r\n\r\n\"use strict\";\r\n\r\nconst { pathToFileURL } = require(\"url\");\r\nconst AsyncDependenciesBlock = require(\"../AsyncDependenciesBlock\");\r\nconst CommentCompilationWarning = require(\"../CommentCompilationWarning\");\r\nconst UnsupportedFeatureWarning = require(\"../UnsupportedFeatureWarning\");\r\nconst EnableChunkLoadingPlugin = require(\"../javascript/EnableChunkLoadingPlugin\");\r\nconst { equals } = require(\"../util/ArrayHelpers\");\r\nconst createHash = require(\"../util/createHash\");\r\nconst { contextify } = require(\"../util/identifier\");\r\nconst EnableWasmLoadingPlugin = require(\"../wasm/EnableWasmLoadingPlugin\");\r\nconst ConstDependency = require(\"./ConstDependency\");\r\nconst CreateScriptUrlDependency = require(\"./CreateScriptUrlDependency\");\r\nconst {\r\n\tharmonySpecifierTag\r\n} = require(\"./HarmonyImportDependencyParserPlugin\");\r\nconst WorkerDependency = require(\"./WorkerDependency\");\r\n\r\n/** @typedef {import(\"estree\").Expression} Expression */\r\n/** @typedef {import(\"estree\").ObjectExpression} ObjectExpression */\r\n/** @typedef {import(\"estree\").Pattern} Pattern */\r\n/** @typedef {import(\"estree\").Property} Property */\r\n/** @typedef {import(\"estree\").SpreadElement} SpreadElement */\r\n/** @typedef {import(\"../Compiler\")} Compiler */\r\n/** @typedef {import(\"../Entrypoint\").EntryOptions} EntryOptions */\r\n/** @typedef {import(\"../Parser\").ParserState} ParserState */\r\n/** @typedef {import(\"../javascript/BasicEvaluatedExpression\")} BasicEvaluatedExpression */\r\n/** @typedef {import(\"../javascript/JavascriptParser\")} JavascriptParser */\r\n/** @typedef {import(\"./HarmonyImportDependencyParserPlugin\").HarmonySettings} HarmonySettings */\r\n\r\nconst getUrl = module => {\r\n\treturn pathToFileURL(module.resource).toString();\r\n};\r\n\r\nconst DEFAULT_SYNTAX = [\r\n\t\"Worker\",\r\n\t\"SharedWorker\",\r\n\t\"navigator.serviceWorker.register()\",\r\n\t\"Worker from worker_threads\"\r\n];\r\n\r\n/** @type {WeakMap<ParserState, number>} */\r\nconst workerIndexMap = new WeakMap();\r\n\r\nclass WorkerPlugin {\r\n\tconstructor(chunkLoading, wasmLoading, module) {\r\n\t\tthis._chunkLoading = chunkLoading;\r\n\t\tthis._wasmLoading = wasmLoading;\r\n\t\tthis._module = module;\r\n\t}\r\n\t/**\r\n\t * Apply the plugin\r\n\t * @param {Compiler} compiler the compiler instance\r\n\t * @returns {void}\r\n\t */\r\n\tapply(compiler) {\r\n\t\tif (this._chunkLoading) {\r\n\t\t\tnew EnableChunkLoadingPlugin(this._chunkLoading).apply(compiler);\r\n\t\t}\r\n\t\tif (this._wasmLoading) {\r\n\t\t\tnew EnableWasmLoadingPlugin(this._wasmLoading).apply(compiler);\r\n\t\t}\r\n\t\tconst cachedContextify = contextify.bindContextCache(\r\n\t\t\tcompiler.context,\r\n\t\t\tcompiler.root\r\n\t\t);\r\n\t\tcompiler.hooks.thisCompilation.tap(\r\n\t\t\t\"WorkerPlugin\",\r\n\t\t\t(compilation, { normalModuleFactory }) => {\r\n\t\t\t\tcompilation.dependencyFactories.set(\r\n\t\t\t\t\tWorkerDependency,\r\n\t\t\t\t\tnormalModuleFactory\r\n\t\t\t\t);\r\n\t\t\t\tcompilation.dependencyTemplates.set(\r\n\t\t\t\t\tWorkerDependency,\r\n\t\t\t\t\tnew WorkerDependency.Template()\r\n\t\t\t\t);\r\n\t\t\t\tcompilation.dependencyTemplates.set(\r\n\t\t\t\t\tCreateScriptUrlDependency,\r\n\t\t\t\t\tnew CreateScriptUrlDependency.Template()\r\n\t\t\t\t);\r\n\r\n\t\t\t\t/**\r\n\t\t\t\t * @param {JavascriptParser} parser the parser\r\n\t\t\t\t * @param {Expression} expr expression\r\n\t\t\t\t * @returns {[BasicEvaluatedExpression, [number, number]]} parsed\r\n\t\t\t\t */\r\n\t\t\t\tconst parseModuleUrl = (parser, expr) => {\r\n\t\t\t\t\tif (\r\n\t\t\t\t\t\texpr.type !== \"NewExpression\" ||\r\n\t\t\t\t\t\texpr.callee.type === \"Super\" ||\r\n\t\t\t\t\t\texpr.arguments.length !== 2\r\n\t\t\t\t\t)\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\tconst [arg1, arg2] = expr.arguments;\r\n\t\t\t\t\tif (arg1.type === \"SpreadElement\") return;\r\n\t\t\t\t\tif (arg2.type === \"SpreadElement\") return;\r\n\t\t\t\t\tconst callee = parser.evaluateExpression(expr.callee);\r\n\t\t\t\t\tif (!callee.isIdentifier() || callee.identifier !== \"URL\") return;\r\n\t\t\t\t\tconst arg2Value = parser.evaluateExpression(arg2);\r\n\t\t\t\t\tif (\r\n\t\t\t\t\t\t!arg2Value.isString() ||\r\n\t\t\t\t\t\t!arg2Value.string.startsWith(\"file://\") ||\r\n\t\t\t\t\t\targ2Value.string !== getUrl(parser.state.module)\r\n\t\t\t\t\t) {\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tconst arg1Value = parser.evaluateExpression(arg1);\r\n\t\t\t\t\treturn [arg1Value, [arg1.range[0], arg2.range[1]]];\r\n\t\t\t\t};\r\n\r\n\t\t\t\t/**\r\n\t\t\t\t * @param {JavascriptParser} parser the parser\r\n\t\t\t\t * @param {ObjectExpression} expr expression\r\n\t\t\t\t * @returns {{ expressions: Record<string, Expression | Pattern>, otherElements: (Property | SpreadElement)[], values: Record<string, any>, spread: boolean, insertType: \"comma\" | \"single\", insertLocation: number }} parsed object\r\n\t\t\t\t */\r\n\t\t\t\tconst parseObjectExpression = (parser, expr) => {\r\n\t\t\t\t\t/** @type {Record<string, any>} */\r\n\t\t\t\t\tconst values = {};\r\n\t\t\t\t\t/** @type {Record<string, Expression | Pattern>} */\r\n\t\t\t\t\tconst expressions = {};\r\n\t\t\t\t\t/** @type {(Property | SpreadElement)[]} */\r\n\t\t\t\t\tconst otherElements = [];\r\n\t\t\t\t\tlet spread = false;\r\n\t\t\t\t\tfor (const prop of expr.properties) {\r\n\t\t\t\t\t\tif (prop.type === \"SpreadElement\") {\r\n\t\t\t\t\t\t\tspread = true;\r\n\t\t\t\t\t\t} else if (\r\n\t\t\t\t\t\t\tprop.type === \"Property\" &&\r\n\t\t\t\t\t\t\t!prop.method &&\r\n\t\t\t\t\t\t\t!prop.computed &&\r\n\t\t\t\t\t\t\tprop.key.type === \"Identifier\"\r\n\t\t\t\t\t\t) {\r\n\t\t\t\t\t\t\texpressions[prop.key.name] = prop.value;\r\n\t\t\t\t\t\t\tif (!prop.shorthand && !prop.value.type.endsWith(\"Pattern\")) {\r\n\t\t\t\t\t\t\t\tconst value = parser.evaluateExpression(\r\n\t\t\t\t\t\t\t\t\t/** @type {Expression} */ (prop.value)\r\n\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\tif (value.isCompileTimeValue())\r\n\t\t\t\t\t\t\t\t\tvalues[prop.key.name] = value.asCompileTimeValue();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\totherElements.push(prop);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tconst insertType = expr.properties.length > 0 ? \"comma\" : \"single\";\r\n\t\t\t\t\tconst insertLocation =\r\n\t\t\t\t\t\texpr.properties[expr.properties.length - 1].range[1];\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\texpressions,\r\n\t\t\t\t\t\totherElements,\r\n\t\t\t\t\t\tvalues,\r\n\t\t\t\t\t\tspread,\r\n\t\t\t\t\t\tinsertType,\r\n\t\t\t\t\t\tinsertLocation\r\n\t\t\t\t\t};\r\n\t\t\t\t};\r\n\r\n\t\t\t\t/**\r\n\t\t\t\t * @param {JavascriptParser} parser the parser\r\n\t\t\t\t * @param {object} parserOptions options\r\n\t\t\t\t */\r\n\t\t\t\tconst parserPlugin = (parser, parserOptions) => {\r\n\t\t\t\t\tif (parserOptions.worker === false) return;\r\n\t\t\t\t\tconst options = !Array.isArray(parserOptions.worker)\r\n\t\t\t\t\t\t? [\"...\"]\r\n\t\t\t\t\t\t: parserOptions.worker;\r\n\t\t\t\t\tconst handleNewWorker = expr => {\r\n\t\t\t\t\t\tif (expr.arguments.length === 0 || expr.arguments.length > 2)\r\n\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\tconst [arg1, arg2] = expr.arguments;\r\n\t\t\t\t\t\tif (arg1.type === \"SpreadElement\") return;\r\n\t\t\t\t\t\tif (arg2 && arg2.type === \"SpreadElement\") return;\r\n\t\t\t\t\t\tconst parsedUrl = parseModuleUrl(parser, arg1);\r\n\t\t\t\t\t\tif (!parsedUrl) return;\r\n\t\t\t\t\t\tconst [url, range] = parsedUrl;\r\n\t\t\t\t\t\tif (!url.isString()) return;\r\n\t\t\t\t\t\tconst {\r\n\t\t\t\t\t\t\texpressions,\r\n\t\t\t\t\t\t\totherElements,\r\n\t\t\t\t\t\t\tvalues: options,\r\n\t\t\t\t\t\t\tspread: hasSpreadInOptions,\r\n\t\t\t\t\t\t\tinsertType,\r\n\t\t\t\t\t\t\tinsertLocation\r\n\t\t\t\t\t\t} = arg2 && arg2.type === \"ObjectExpression\"\r\n\t\t\t\t\t\t\t? parseObjectExpression(parser, arg2)\r\n\t\t\t\t\t\t\t: {\r\n\t\t\t\t\t\t\t\t\t/** @type {Record<string, Expression | Pattern>} */\r\n\t\t\t\t\t\t\t\t\texpressions: {},\r\n\t\t\t\t\t\t\t\t\totherElements: [],\r\n\t\t\t\t\t\t\t\t\t/** @type {Record<string, any>} */\r\n\t\t\t\t\t\t\t\t\tvalues: {},\r\n\t\t\t\t\t\t\t\t\tspread: false,\r\n\t\t\t\t\t\t\t\t\tinsertType: arg2 ? \"spread\" : \"argument\",\r\n\t\t\t\t\t\t\t\t\tinsertLocation: arg2 ? arg2.range : arg1.range[1]\r\n\t\t\t\t\t\t\t  };\r\n\t\t\t\t\t\tconst { options: importOptions, errors: commentErrors } =\r\n\t\t\t\t\t\t\tparser.parseCommentOptions(expr.range);\r\n\r\n\t\t\t\t\t\tif (commentErrors) {\r\n\t\t\t\t\t\t\tfor (const e of commentErrors) {\r\n\t\t\t\t\t\t\t\tconst { comment } = e;\r\n\t\t\t\t\t\t\t\tparser.state.module.addWarning(\r\n\t\t\t\t\t\t\t\t\tnew CommentCompilationWarning(\r\n\t\t\t\t\t\t\t\t\t\t`Compilation error while processing magic comment(-s): /*${comment.value}*/: ${e.message}`,\r\n\t\t\t\t\t\t\t\t\t\tcomment.loc\r\n\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t/** @type {EntryOptions} */\r\n\t\t\t\t\t\tlet entryOptions = {};\r\n\r\n\t\t\t\t\t\tif (importOptions) {\r\n\t\t\t\t\t\t\tif (importOptions.webpackIgnore !== undefined) {\r\n\t\t\t\t\t\t\t\tif (typeof importOptions.webpackIgnore !== \"boolean\") {\r\n\t\t\t\t\t\t\t\t\tparser.state.module.addWarning(\r\n\t\t\t\t\t\t\t\t\t\tnew UnsupportedFeatureWarning(\r\n\t\t\t\t\t\t\t\t\t\t\t`\\`webpackIgnore\\` expected a boolean, but received: ${importOptions.webpackIgnore}.`,\r\n\t\t\t\t\t\t\t\t\t\t\texpr.loc\r\n\t\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\tif (importOptions.webpackIgnore) {\r\n\t\t\t\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif (importOptions.webpackEntryOptions !== undefined) {\r\n\t\t\t\t\t\t\t\tif (\r\n\t\t\t\t\t\t\t\t\ttypeof importOptions.webpackEntryOptions !== \"object\" ||\r\n\t\t\t\t\t\t\t\t\timportOptions.webpackEntryOptions === null\r\n\t\t\t\t\t\t\t\t) {\r\n\t\t\t\t\t\t\t\t\tparser.state.module.addWarning(\r\n\t\t\t\t\t\t\t\t\t\tnew UnsupportedFeatureWarning(\r\n\t\t\t\t\t\t\t\t\t\t\t`\\`webpackEntryOptions\\` expected a object, but received: ${importOptions.webpackEntryOptions}.`,\r\n\t\t\t\t\t\t\t\t\t\t\texpr.loc\r\n\t\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\tObject.assign(\r\n\t\t\t\t\t\t\t\t\t\tentryOptions,\r\n\t\t\t\t\t\t\t\t\t\timportOptions.webpackEntryOptions\r\n\t\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif (importOptions.webpackChunkName !== undefined) {\r\n\t\t\t\t\t\t\t\tif (typeof importOptions.webpackChunkName !== \"string\") {\r\n\t\t\t\t\t\t\t\t\tparser.state.module.addWarning(\r\n\t\t\t\t\t\t\t\t\t\tnew UnsupportedFeatureWarning(\r\n\t\t\t\t\t\t\t\t\t\t\t`\\`webpackChunkName\\` expected a string, but received: ${importOptions.webpackChunkName}.`,\r\n\t\t\t\t\t\t\t\t\t\t\texpr.loc\r\n\t\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\tentryOptions.name = importOptions.webpackChunkName;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (\r\n\t\t\t\t\t\t\t!Object.prototype.hasOwnProperty.call(entryOptions, \"name\") &&\r\n\t\t\t\t\t\t\toptions &&\r\n\t\t\t\t\t\t\ttypeof options.name === \"string\"\r\n\t\t\t\t\t\t) {\r\n\t\t\t\t\t\t\tentryOptions.name = options.name;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (entryOptions.runtime === undefined) {\r\n\t\t\t\t\t\t\tlet i = workerIndexMap.get(parser.state) || 0;\r\n\t\t\t\t\t\t\tworkerIndexMap.set(parser.state, i + 1);\r\n\t\t\t\t\t\t\tlet name = `${cachedContextify(\r\n\t\t\t\t\t\t\t\tparser.state.module.identifier()\r\n\t\t\t\t\t\t\t)}|${i}`;\r\n\t\t\t\t\t\t\tconst hash = createHash(compilation.outputOptions.hashFunction);\r\n\t\t\t\t\t\t\thash.update(name);\r\n\t\t\t\t\t\t\tconst digest = /** @type {string} */ (\r\n\t\t\t\t\t\t\t\thash.digest(compilation.outputOptions.hashDigest)\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\tentryOptions.runtime = digest.slice(\r\n\t\t\t\t\t\t\t\t0,\r\n\t\t\t\t\t\t\t\tcompilation.outputOptions.hashDigestLength\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tconst block = new AsyncDependenciesBlock({\r\n\t\t\t\t\t\t\tname: entryOptions.name,\r\n\t\t\t\t\t\t\tentryOptions: {\r\n\t\t\t\t\t\t\t\tchunkLoading: this._chunkLoading,\r\n\t\t\t\t\t\t\t\twasmLoading: this._wasmLoading,\r\n\t\t\t\t\t\t\t\t...entryOptions\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\tblock.loc = expr.loc;\r\n\t\t\t\t\t\tconst dep = new WorkerDependency(url.string, range);\r\n\t\t\t\t\t\tdep.loc = expr.loc;\r\n\t\t\t\t\t\tblock.addDependency(dep);\r\n\t\t\t\t\t\tparser.state.module.addBlock(block);\r\n\r\n\t\t\t\t\t\tif (compilation.outputOptions.trustedTypes) {\r\n\t\t\t\t\t\t\tconst dep = new CreateScriptUrlDependency(\r\n\t\t\t\t\t\t\t\texpr.arguments[0].range\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\tdep.loc = expr.loc;\r\n\t\t\t\t\t\t\tparser.state.module.addDependency(dep);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (expressions.type) {\r\n\t\t\t\t\t\t\tconst expr = expressions.type;\r\n\t\t\t\t\t\t\tif (options.type !== false) {\r\n\t\t\t\t\t\t\t\tconst dep = new ConstDependency(\r\n\t\t\t\t\t\t\t\t\tthis._module ? '\"module\"' : \"undefined\",\r\n\t\t\t\t\t\t\t\t\texpr.range\r\n\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\tdep.loc = expr.loc;\r\n\t\t\t\t\t\t\t\tparser.state.module.addPresentationalDependency(dep);\r\n\t\t\t\t\t\t\t\texpressions.type = undefined;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else if (insertType === \"comma\") {\r\n\t\t\t\t\t\t\tif (this._module || hasSpreadInOptions) {\r\n\t\t\t\t\t\t\t\tconst dep = new ConstDependency(\r\n\t\t\t\t\t\t\t\t\t`, type: ${this._module ? '\"module\"' : \"undefined\"}`,\r\n\t\t\t\t\t\t\t\t\tinsertLocation\r\n\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\tdep.loc = expr.loc;\r\n\t\t\t\t\t\t\t\tparser.state.module.addPresentationalDependency(dep);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else if (insertType === \"spread\") {\r\n\t\t\t\t\t\t\tconst dep1 = new ConstDependency(\r\n\t\t\t\t\t\t\t\t\"Object.assign({}, \",\r\n\t\t\t\t\t\t\t\tinsertLocation[0]\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\tconst dep2 = new ConstDependency(\r\n\t\t\t\t\t\t\t\t`, { type: ${this._module ? '\"module\"' : \"undefined\"} })`,\r\n\t\t\t\t\t\t\t\tinsertLocation[1]\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\tdep1.loc = expr.loc;\r\n\t\t\t\t\t\t\tdep2.loc = expr.loc;\r\n\t\t\t\t\t\t\tparser.state.module.addPresentationalDependency(dep1);\r\n\t\t\t\t\t\t\tparser.state.module.addPresentationalDependency(dep2);\r\n\t\t\t\t\t\t} else if (insertType === \"argument\") {\r\n\t\t\t\t\t\t\tif (this._module) {\r\n\t\t\t\t\t\t\t\tconst dep = new ConstDependency(\r\n\t\t\t\t\t\t\t\t\t', { type: \"module\" }',\r\n\t\t\t\t\t\t\t\t\tinsertLocation\r\n\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\tdep.loc = expr.loc;\r\n\t\t\t\t\t\t\t\tparser.state.module.addPresentationalDependency(dep);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tparser.walkExpression(expr.callee);\r\n\t\t\t\t\t\tfor (const key of Object.keys(expressions)) {\r\n\t\t\t\t\t\t\tif (expressions[key]) parser.walkExpression(expressions[key]);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tfor (const prop of otherElements) {\r\n\t\t\t\t\t\t\tparser.walkProperty(prop);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (insertType === \"spread\") {\r\n\t\t\t\t\t\t\tparser.walkExpression(arg2);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t};\r\n\t\t\t\t\tconst processItem = item => {\r\n\t\t\t\t\t\tif (item.endsWith(\"()\")) {\r\n\t\t\t\t\t\t\tparser.hooks.call\r\n\t\t\t\t\t\t\t\t.for(item.slice(0, -2))\r\n\t\t\t\t\t\t\t\t.tap(\"WorkerPlugin\", handleNewWorker);\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tconst match = /^(.+?)(\\(\\))?\\s+from\\s+(.+)$/.exec(item);\r\n\t\t\t\t\t\t\tif (match) {\r\n\t\t\t\t\t\t\t\tconst ids = match[1].split(\".\");\r\n\t\t\t\t\t\t\t\tconst call = match[2];\r\n\t\t\t\t\t\t\t\tconst source = match[3];\r\n\t\t\t\t\t\t\t\t(call ? parser.hooks.call : parser.hooks.new)\r\n\t\t\t\t\t\t\t\t\t.for(harmonySpecifierTag)\r\n\t\t\t\t\t\t\t\t\t.tap(\"WorkerPlugin\", expr => {\r\n\t\t\t\t\t\t\t\t\t\tconst settings = /** @type {HarmonySettings} */ (\r\n\t\t\t\t\t\t\t\t\t\t\tparser.currentTagData\r\n\t\t\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\t\t\tif (\r\n\t\t\t\t\t\t\t\t\t\t\t!settings ||\r\n\t\t\t\t\t\t\t\t\t\t\tsettings.source !== source ||\r\n\t\t\t\t\t\t\t\t\t\t\t!equals(settings.ids, ids)\r\n\t\t\t\t\t\t\t\t\t\t) {\r\n\t\t\t\t\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\treturn handleNewWorker(expr);\r\n\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tparser.hooks.new.for(item).tap(\"WorkerPlugin\", handleNewWorker);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t};\r\n\t\t\t\t\tfor (const item of options) {\r\n\t\t\t\t\t\tif (item === \"...\") {\r\n\t\t\t\t\t\t\tDEFAULT_SYNTAX.forEach(processItem);\r\n\t\t\t\t\t\t} else processItem(item);\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t\tnormalModuleFactory.hooks.parser\r\n\t\t\t\t\t.for(\"javascript/auto\")\r\n\t\t\t\t\t.tap(\"WorkerPlugin\", parserPlugin);\r\n\t\t\t\tnormalModuleFactory.hooks.parser\r\n\t\t\t\t\t.for(\"javascript/esm\")\r\n\t\t\t\t\t.tap(\"WorkerPlugin\", parserPlugin);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n}\r\nmodule.exports = WorkerPlugin;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}