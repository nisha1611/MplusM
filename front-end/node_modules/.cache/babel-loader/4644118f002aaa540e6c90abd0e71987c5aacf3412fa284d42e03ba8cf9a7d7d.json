{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getRecursionDetectionPlugin = exports.addRecursionDetectionMiddlewareOptions = exports.recursionDetectionMiddleware = void 0;\nconst protocol_http_1 = require(\"@aws-sdk/protocol-http\");\nconst TRACE_ID_HEADER_NAME = \"X-Amzn-Trace-Id\";\nconst ENV_LAMBDA_FUNCTION_NAME = \"AWS_LAMBDA_FUNCTION_NAME\";\nconst ENV_TRACE_ID = \"_X_AMZN_TRACE_ID\";\nconst recursionDetectionMiddleware = options => next => async args => {\n  const {\n    request\n  } = args;\n  if (!protocol_http_1.HttpRequest.isInstance(request) || options.runtime !== \"node\" || request.headers.hasOwnProperty(TRACE_ID_HEADER_NAME)) {\n    return next(args);\n  }\n  const functionName = process.env[ENV_LAMBDA_FUNCTION_NAME];\n  const traceId = process.env[ENV_TRACE_ID];\n  const nonEmptyString = str => typeof str === \"string\" && str.length > 0;\n  if (nonEmptyString(functionName) && nonEmptyString(traceId)) {\n    request.headers[TRACE_ID_HEADER_NAME] = traceId;\n  }\n  return next({\n    ...args,\n    request\n  });\n};\nexports.recursionDetectionMiddleware = recursionDetectionMiddleware;\nexports.addRecursionDetectionMiddlewareOptions = {\n  step: \"build\",\n  tags: [\"RECURSION_DETECTION\"],\n  name: \"recursionDetectionMiddleware\",\n  override: true,\n  priority: \"low\"\n};\nconst getRecursionDetectionPlugin = options => ({\n  applyToStack: clientStack => {\n    clientStack.add((0, exports.recursionDetectionMiddleware)(options), exports.addRecursionDetectionMiddlewareOptions);\n  }\n});\nexports.getRecursionDetectionPlugin = getRecursionDetectionPlugin;","map":{"version":3,"names":["Object","defineProperty","exports","value","getRecursionDetectionPlugin","addRecursionDetectionMiddlewareOptions","recursionDetectionMiddleware","protocol_http_1","require","TRACE_ID_HEADER_NAME","ENV_LAMBDA_FUNCTION_NAME","ENV_TRACE_ID","options","next","args","request","HttpRequest","isInstance","runtime","headers","hasOwnProperty","functionName","process","env","traceId","nonEmptyString","str","length","step","tags","name","override","priority","applyToStack","clientStack","add"],"sources":["C:/Users/91930/Desktop/Github projects/Pharmacy Demo/back-end/node_modules/@aws-sdk/middleware-recursion-detection/dist-cjs/index.js"],"sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.getRecursionDetectionPlugin = exports.addRecursionDetectionMiddlewareOptions = exports.recursionDetectionMiddleware = void 0;\r\nconst protocol_http_1 = require(\"@aws-sdk/protocol-http\");\r\nconst TRACE_ID_HEADER_NAME = \"X-Amzn-Trace-Id\";\r\nconst ENV_LAMBDA_FUNCTION_NAME = \"AWS_LAMBDA_FUNCTION_NAME\";\r\nconst ENV_TRACE_ID = \"_X_AMZN_TRACE_ID\";\r\nconst recursionDetectionMiddleware = (options) => (next) => async (args) => {\r\n    const { request } = args;\r\n    if (!protocol_http_1.HttpRequest.isInstance(request) ||\r\n        options.runtime !== \"node\" ||\r\n        request.headers.hasOwnProperty(TRACE_ID_HEADER_NAME)) {\r\n        return next(args);\r\n    }\r\n    const functionName = process.env[ENV_LAMBDA_FUNCTION_NAME];\r\n    const traceId = process.env[ENV_TRACE_ID];\r\n    const nonEmptyString = (str) => typeof str === \"string\" && str.length > 0;\r\n    if (nonEmptyString(functionName) && nonEmptyString(traceId)) {\r\n        request.headers[TRACE_ID_HEADER_NAME] = traceId;\r\n    }\r\n    return next({\r\n        ...args,\r\n        request,\r\n    });\r\n};\r\nexports.recursionDetectionMiddleware = recursionDetectionMiddleware;\r\nexports.addRecursionDetectionMiddlewareOptions = {\r\n    step: \"build\",\r\n    tags: [\"RECURSION_DETECTION\"],\r\n    name: \"recursionDetectionMiddleware\",\r\n    override: true,\r\n    priority: \"low\",\r\n};\r\nconst getRecursionDetectionPlugin = (options) => ({\r\n    applyToStack: (clientStack) => {\r\n        clientStack.add((0, exports.recursionDetectionMiddleware)(options), exports.addRecursionDetectionMiddlewareOptions);\r\n    },\r\n});\r\nexports.getRecursionDetectionPlugin = getRecursionDetectionPlugin;\r\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,2BAA2B,GAAGF,OAAO,CAACG,sCAAsC,GAAGH,OAAO,CAACI,4BAA4B,GAAG,KAAK,CAAC;AACpI,MAAMC,eAAe,GAAGC,OAAO,CAAC,wBAAwB,CAAC;AACzD,MAAMC,oBAAoB,GAAG,iBAAiB;AAC9C,MAAMC,wBAAwB,GAAG,0BAA0B;AAC3D,MAAMC,YAAY,GAAG,kBAAkB;AACvC,MAAML,4BAA4B,GAAIM,OAAO,IAAMC,IAAI,IAAK,MAAOC,IAAI,IAAK;EACxE,MAAM;IAAEC;EAAQ,CAAC,GAAGD,IAAI;EACxB,IAAI,CAACP,eAAe,CAACS,WAAW,CAACC,UAAU,CAACF,OAAO,CAAC,IAChDH,OAAO,CAACM,OAAO,KAAK,MAAM,IAC1BH,OAAO,CAACI,OAAO,CAACC,cAAc,CAACX,oBAAoB,CAAC,EAAE;IACtD,OAAOI,IAAI,CAACC,IAAI,CAAC;EACrB;EACA,MAAMO,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACb,wBAAwB,CAAC;EAC1D,MAAMc,OAAO,GAAGF,OAAO,CAACC,GAAG,CAACZ,YAAY,CAAC;EACzC,MAAMc,cAAc,GAAIC,GAAG,IAAK,OAAOA,GAAG,KAAK,QAAQ,IAAIA,GAAG,CAACC,MAAM,GAAG,CAAC;EACzE,IAAIF,cAAc,CAACJ,YAAY,CAAC,IAAII,cAAc,CAACD,OAAO,CAAC,EAAE;IACzDT,OAAO,CAACI,OAAO,CAACV,oBAAoB,CAAC,GAAGe,OAAO;EACnD;EACA,OAAOX,IAAI,CAAC;IACR,GAAGC,IAAI;IACPC;EACJ,CAAC,CAAC;AACN,CAAC;AACDb,OAAO,CAACI,4BAA4B,GAAGA,4BAA4B;AACnEJ,OAAO,CAACG,sCAAsC,GAAG;EAC7CuB,IAAI,EAAE,OAAO;EACbC,IAAI,EAAE,CAAC,qBAAqB,CAAC;EAC7BC,IAAI,EAAE,8BAA8B;EACpCC,QAAQ,EAAE,IAAI;EACdC,QAAQ,EAAE;AACd,CAAC;AACD,MAAM5B,2BAA2B,GAAIQ,OAAO,KAAM;EAC9CqB,YAAY,EAAGC,WAAW,IAAK;IAC3BA,WAAW,CAACC,GAAG,CAAC,CAAC,CAAC,EAAEjC,OAAO,CAACI,4BAA4B,EAAEM,OAAO,CAAC,EAAEV,OAAO,CAACG,sCAAsC,CAAC;EACvH;AACJ,CAAC,CAAC;AACFH,OAAO,CAACE,2BAA2B,GAAGA,2BAA2B"},"metadata":{},"sourceType":"script","externalDependencies":[]}