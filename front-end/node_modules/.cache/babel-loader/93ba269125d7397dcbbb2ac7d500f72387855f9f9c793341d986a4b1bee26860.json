{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.NodeHttpHandler = void 0;\nconst protocol_http_1 = require(\"@aws-sdk/protocol-http\");\nconst querystring_builder_1 = require(\"@aws-sdk/querystring-builder\");\nconst http_1 = require(\"http\");\nconst https_1 = require(\"https\");\nconst constants_1 = require(\"./constants\");\nconst get_transformed_headers_1 = require(\"./get-transformed-headers\");\nconst set_connection_timeout_1 = require(\"./set-connection-timeout\");\nconst set_socket_timeout_1 = require(\"./set-socket-timeout\");\nconst write_request_body_1 = require(\"./write-request-body\");\nclass NodeHttpHandler {\n  constructor(options) {\n    this.metadata = {\n      handlerProtocol: \"http/1.1\"\n    };\n    this.configProvider = new Promise((resolve, reject) => {\n      if (typeof options === \"function\") {\n        options().then(_options => {\n          resolve(this.resolveDefaultConfig(_options));\n        }).catch(reject);\n      } else {\n        resolve(this.resolveDefaultConfig(options));\n      }\n    });\n  }\n  resolveDefaultConfig(options) {\n    const {\n      connectionTimeout,\n      socketTimeout,\n      httpAgent,\n      httpsAgent\n    } = options || {};\n    const keepAlive = true;\n    const maxSockets = 50;\n    return {\n      connectionTimeout,\n      socketTimeout,\n      httpAgent: httpAgent || new http_1.Agent({\n        keepAlive,\n        maxSockets\n      }),\n      httpsAgent: httpsAgent || new https_1.Agent({\n        keepAlive,\n        maxSockets\n      })\n    };\n  }\n  destroy() {\n    var _a, _b, _c, _d;\n    (_b = (_a = this.config) === null || _a === void 0 ? void 0 : _a.httpAgent) === null || _b === void 0 ? void 0 : _b.destroy();\n    (_d = (_c = this.config) === null || _c === void 0 ? void 0 : _c.httpsAgent) === null || _d === void 0 ? void 0 : _d.destroy();\n  }\n  async handle(request) {\n    let {\n      abortSignal\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    if (!this.config) {\n      this.config = await this.configProvider;\n    }\n    return new Promise((resolve, reject) => {\n      if (!this.config) {\n        throw new Error(\"Node HTTP request handler config is not resolved\");\n      }\n      if (abortSignal === null || abortSignal === void 0 ? void 0 : abortSignal.aborted) {\n        const abortError = new Error(\"Request aborted\");\n        abortError.name = \"AbortError\";\n        reject(abortError);\n        return;\n      }\n      const isSSL = request.protocol === \"https:\";\n      const queryString = (0, querystring_builder_1.buildQueryString)(request.query || {});\n      const nodeHttpsOptions = {\n        headers: request.headers,\n        host: request.hostname,\n        method: request.method,\n        path: queryString ? `${request.path}?${queryString}` : request.path,\n        port: request.port,\n        agent: isSSL ? this.config.httpsAgent : this.config.httpAgent\n      };\n      const requestFunc = isSSL ? https_1.request : http_1.request;\n      const req = requestFunc(nodeHttpsOptions, res => {\n        const httpResponse = new protocol_http_1.HttpResponse({\n          statusCode: res.statusCode || -1,\n          headers: (0, get_transformed_headers_1.getTransformedHeaders)(res.headers),\n          body: res\n        });\n        resolve({\n          response: httpResponse\n        });\n      });\n      req.on(\"error\", err => {\n        if (constants_1.NODEJS_TIMEOUT_ERROR_CODES.includes(err.code)) {\n          reject(Object.assign(err, {\n            name: \"TimeoutError\"\n          }));\n        } else {\n          reject(err);\n        }\n      });\n      (0, set_connection_timeout_1.setConnectionTimeout)(req, reject, this.config.connectionTimeout);\n      (0, set_socket_timeout_1.setSocketTimeout)(req, reject, this.config.socketTimeout);\n      if (abortSignal) {\n        abortSignal.onabort = () => {\n          req.abort();\n          const abortError = new Error(\"Request aborted\");\n          abortError.name = \"AbortError\";\n          reject(abortError);\n        };\n      }\n      (0, write_request_body_1.writeRequestBody)(req, request);\n    });\n  }\n}\nexports.NodeHttpHandler = NodeHttpHandler;","map":{"version":3,"names":["Object","defineProperty","exports","value","NodeHttpHandler","protocol_http_1","require","querystring_builder_1","http_1","https_1","constants_1","get_transformed_headers_1","set_connection_timeout_1","set_socket_timeout_1","write_request_body_1","constructor","options","metadata","handlerProtocol","configProvider","Promise","resolve","reject","then","_options","resolveDefaultConfig","catch","connectionTimeout","socketTimeout","httpAgent","httpsAgent","keepAlive","maxSockets","Agent","destroy","_a","_b","_c","_d","config","handle","request","abortSignal","Error","aborted","abortError","name","isSSL","protocol","queryString","buildQueryString","query","nodeHttpsOptions","headers","host","hostname","method","path","port","agent","requestFunc","req","res","httpResponse","HttpResponse","statusCode","getTransformedHeaders","body","response","on","err","NODEJS_TIMEOUT_ERROR_CODES","includes","code","assign","setConnectionTimeout","setSocketTimeout","onabort","abort","writeRequestBody"],"sources":["C:/Users/91930/Desktop/Github projects/Pharmacy Demo/back-end/node_modules/@aws-sdk/node-http-handler/dist-cjs/node-http-handler.js"],"sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.NodeHttpHandler = void 0;\r\nconst protocol_http_1 = require(\"@aws-sdk/protocol-http\");\r\nconst querystring_builder_1 = require(\"@aws-sdk/querystring-builder\");\r\nconst http_1 = require(\"http\");\r\nconst https_1 = require(\"https\");\r\nconst constants_1 = require(\"./constants\");\r\nconst get_transformed_headers_1 = require(\"./get-transformed-headers\");\r\nconst set_connection_timeout_1 = require(\"./set-connection-timeout\");\r\nconst set_socket_timeout_1 = require(\"./set-socket-timeout\");\r\nconst write_request_body_1 = require(\"./write-request-body\");\r\nclass NodeHttpHandler {\r\n    constructor(options) {\r\n        this.metadata = { handlerProtocol: \"http/1.1\" };\r\n        this.configProvider = new Promise((resolve, reject) => {\r\n            if (typeof options === \"function\") {\r\n                options()\r\n                    .then((_options) => {\r\n                    resolve(this.resolveDefaultConfig(_options));\r\n                })\r\n                    .catch(reject);\r\n            }\r\n            else {\r\n                resolve(this.resolveDefaultConfig(options));\r\n            }\r\n        });\r\n    }\r\n    resolveDefaultConfig(options) {\r\n        const { connectionTimeout, socketTimeout, httpAgent, httpsAgent } = options || {};\r\n        const keepAlive = true;\r\n        const maxSockets = 50;\r\n        return {\r\n            connectionTimeout,\r\n            socketTimeout,\r\n            httpAgent: httpAgent || new http_1.Agent({ keepAlive, maxSockets }),\r\n            httpsAgent: httpsAgent || new https_1.Agent({ keepAlive, maxSockets }),\r\n        };\r\n    }\r\n    destroy() {\r\n        var _a, _b, _c, _d;\r\n        (_b = (_a = this.config) === null || _a === void 0 ? void 0 : _a.httpAgent) === null || _b === void 0 ? void 0 : _b.destroy();\r\n        (_d = (_c = this.config) === null || _c === void 0 ? void 0 : _c.httpsAgent) === null || _d === void 0 ? void 0 : _d.destroy();\r\n    }\r\n    async handle(request, { abortSignal } = {}) {\r\n        if (!this.config) {\r\n            this.config = await this.configProvider;\r\n        }\r\n        return new Promise((resolve, reject) => {\r\n            if (!this.config) {\r\n                throw new Error(\"Node HTTP request handler config is not resolved\");\r\n            }\r\n            if (abortSignal === null || abortSignal === void 0 ? void 0 : abortSignal.aborted) {\r\n                const abortError = new Error(\"Request aborted\");\r\n                abortError.name = \"AbortError\";\r\n                reject(abortError);\r\n                return;\r\n            }\r\n            const isSSL = request.protocol === \"https:\";\r\n            const queryString = (0, querystring_builder_1.buildQueryString)(request.query || {});\r\n            const nodeHttpsOptions = {\r\n                headers: request.headers,\r\n                host: request.hostname,\r\n                method: request.method,\r\n                path: queryString ? `${request.path}?${queryString}` : request.path,\r\n                port: request.port,\r\n                agent: isSSL ? this.config.httpsAgent : this.config.httpAgent,\r\n            };\r\n            const requestFunc = isSSL ? https_1.request : http_1.request;\r\n            const req = requestFunc(nodeHttpsOptions, (res) => {\r\n                const httpResponse = new protocol_http_1.HttpResponse({\r\n                    statusCode: res.statusCode || -1,\r\n                    headers: (0, get_transformed_headers_1.getTransformedHeaders)(res.headers),\r\n                    body: res,\r\n                });\r\n                resolve({ response: httpResponse });\r\n            });\r\n            req.on(\"error\", (err) => {\r\n                if (constants_1.NODEJS_TIMEOUT_ERROR_CODES.includes(err.code)) {\r\n                    reject(Object.assign(err, { name: \"TimeoutError\" }));\r\n                }\r\n                else {\r\n                    reject(err);\r\n                }\r\n            });\r\n            (0, set_connection_timeout_1.setConnectionTimeout)(req, reject, this.config.connectionTimeout);\r\n            (0, set_socket_timeout_1.setSocketTimeout)(req, reject, this.config.socketTimeout);\r\n            if (abortSignal) {\r\n                abortSignal.onabort = () => {\r\n                    req.abort();\r\n                    const abortError = new Error(\"Request aborted\");\r\n                    abortError.name = \"AbortError\";\r\n                    reject(abortError);\r\n                };\r\n            }\r\n            (0, write_request_body_1.writeRequestBody)(req, request);\r\n        });\r\n    }\r\n}\r\nexports.NodeHttpHandler = NodeHttpHandler;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}