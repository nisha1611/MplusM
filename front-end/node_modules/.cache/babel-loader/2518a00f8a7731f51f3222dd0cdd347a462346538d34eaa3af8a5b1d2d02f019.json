{"ast":null,"code":"var aCallable = require('../internals/a-callable');\nvar anObject = require('../internals/an-object');\nvar call = require('../internals/function-call');\nvar toIntegerOrInfinity = require('../internals/to-integer-or-infinity');\nvar $TypeError = TypeError;\nvar SetRecord = function (set, size, has, keys) {\n  this.set = set;\n  this.size = size;\n  this.has = has;\n  this.keys = keys;\n};\nSetRecord.prototype = {\n  getIterator: function () {\n    return anObject(call(this.keys, this.set));\n  },\n  includes: function (it) {\n    return call(this.has, this.set, it);\n  }\n};\n\n// `GetSetRecord` abstract operation\n// https://tc39.es/proposal-set-methods/#sec-getsetrecord\nmodule.exports = function (obj) {\n  anObject(obj);\n  var numSize = +obj.size;\n  // NOTE: If size is undefined, then numSize will be NaN\n  // eslint-disable-next-line no-self-compare -- NaN check\n  if (numSize != numSize) throw $TypeError('Invalid size');\n  return new SetRecord(obj, toIntegerOrInfinity(numSize), aCallable(obj.has), aCallable(obj.keys));\n};","map":{"version":3,"names":["aCallable","require","anObject","call","toIntegerOrInfinity","$TypeError","TypeError","SetRecord","set","size","has","keys","prototype","getIterator","includes","it","module","exports","obj","numSize"],"sources":["C:/Users/91930/Desktop/Github projects/Pharmacy Demo/front-end/node_modules/core-js/internals/get-set-record.js"],"sourcesContent":["var aCallable = require('../internals/a-callable');\r\nvar anObject = require('../internals/an-object');\r\nvar call = require('../internals/function-call');\r\nvar toIntegerOrInfinity = require('../internals/to-integer-or-infinity');\r\n\r\nvar $TypeError = TypeError;\r\n\r\nvar SetRecord = function (set, size, has, keys) {\r\n  this.set = set;\r\n  this.size = size;\r\n  this.has = has;\r\n  this.keys = keys;\r\n};\r\n\r\nSetRecord.prototype = {\r\n  getIterator: function () {\r\n    return anObject(call(this.keys, this.set));\r\n  },\r\n  includes: function (it) {\r\n    return call(this.has, this.set, it);\r\n  }\r\n};\r\n\r\n// `GetSetRecord` abstract operation\r\n// https://tc39.es/proposal-set-methods/#sec-getsetrecord\r\nmodule.exports = function (obj) {\r\n  anObject(obj);\r\n  var numSize = +obj.size;\r\n  // NOTE: If size is undefined, then numSize will be NaN\r\n  // eslint-disable-next-line no-self-compare -- NaN check\r\n  if (numSize != numSize) throw $TypeError('Invalid size');\r\n  return new SetRecord(\r\n    obj,\r\n    toIntegerOrInfinity(numSize),\r\n    aCallable(obj.has),\r\n    aCallable(obj.keys)\r\n  );\r\n};\r\n"],"mappings":"AAAA,IAAIA,SAAS,GAAGC,OAAO,CAAC,yBAAyB,CAAC;AAClD,IAAIC,QAAQ,GAAGD,OAAO,CAAC,wBAAwB,CAAC;AAChD,IAAIE,IAAI,GAAGF,OAAO,CAAC,4BAA4B,CAAC;AAChD,IAAIG,mBAAmB,GAAGH,OAAO,CAAC,qCAAqC,CAAC;AAExE,IAAII,UAAU,GAAGC,SAAS;AAE1B,IAAIC,SAAS,GAAG,UAAUC,GAAG,EAAEC,IAAI,EAAEC,GAAG,EAAEC,IAAI,EAAE;EAC9C,IAAI,CAACH,GAAG,GAAGA,GAAG;EACd,IAAI,CAACC,IAAI,GAAGA,IAAI;EAChB,IAAI,CAACC,GAAG,GAAGA,GAAG;EACd,IAAI,CAACC,IAAI,GAAGA,IAAI;AAClB,CAAC;AAEDJ,SAAS,CAACK,SAAS,GAAG;EACpBC,WAAW,EAAE,YAAY;IACvB,OAAOX,QAAQ,CAACC,IAAI,CAAC,IAAI,CAACQ,IAAI,EAAE,IAAI,CAACH,GAAG,CAAC,CAAC;EAC5C,CAAC;EACDM,QAAQ,EAAE,UAAUC,EAAE,EAAE;IACtB,OAAOZ,IAAI,CAAC,IAAI,CAACO,GAAG,EAAE,IAAI,CAACF,GAAG,EAAEO,EAAE,CAAC;EACrC;AACF,CAAC;;AAED;AACA;AACAC,MAAM,CAACC,OAAO,GAAG,UAAUC,GAAG,EAAE;EAC9BhB,QAAQ,CAACgB,GAAG,CAAC;EACb,IAAIC,OAAO,GAAG,CAACD,GAAG,CAACT,IAAI;EACvB;EACA;EACA,IAAIU,OAAO,IAAIA,OAAO,EAAE,MAAMd,UAAU,CAAC,cAAc,CAAC;EACxD,OAAO,IAAIE,SAAS,CAClBW,GAAG,EACHd,mBAAmB,CAACe,OAAO,CAAC,EAC5BnB,SAAS,CAACkB,GAAG,CAACR,GAAG,CAAC,EAClBV,SAAS,CAACkB,GAAG,CAACP,IAAI,CAAC,CACpB;AACH,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}