{"ast":null,"code":"/*!\r\n * Bowser - a browser detector\r\n * https://github.com/lancedikson/bowser\r\n * MIT License | (c) Dustin Diaz 2012-2015\r\n * MIT License | (c) Denis Demchenko 2015-2019\r\n */\nimport Parser from './parser.js';\nimport { BROWSER_MAP, ENGINE_MAP, OS_MAP, PLATFORMS_MAP } from './constants.js';\n\n/**\r\n * Bowser class.\r\n * Keep it simple as much as it can be.\r\n * It's supposed to work with collections of {@link Parser} instances\r\n * rather then solve one-instance problems.\r\n * All the one-instance stuff is located in Parser class.\r\n *\r\n * @class\r\n * @classdesc Bowser is a static object, that provides an API to the Parsers\r\n * @hideconstructor\r\n */\nclass Bowser {\n  /**\r\n   * Creates a {@link Parser} instance\r\n   *\r\n   * @param {String} UA UserAgent string\r\n   * @param {Boolean} [skipParsing=false] Will make the Parser postpone parsing until you ask it\r\n   * explicitly. Same as `skipParsing` for {@link Parser}.\r\n   * @returns {Parser}\r\n   * @throws {Error} when UA is not a String\r\n   *\r\n   * @example\r\n   * const parser = Bowser.getParser(window.navigator.userAgent);\r\n   * const result = parser.getResult();\r\n   */\n  static getParser(UA) {\n    let skipParsing = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    if (typeof UA !== 'string') {\n      throw new Error('UserAgent should be a string');\n    }\n    return new Parser(UA, skipParsing);\n  }\n\n  /**\r\n   * Creates a {@link Parser} instance and runs {@link Parser.getResult} immediately\r\n   *\r\n   * @param UA\r\n   * @return {ParsedResult}\r\n   *\r\n   * @example\r\n   * const result = Bowser.parse(window.navigator.userAgent);\r\n   */\n  static parse(UA) {\n    return new Parser(UA).getResult();\n  }\n  static get BROWSER_MAP() {\n    return BROWSER_MAP;\n  }\n  static get ENGINE_MAP() {\n    return ENGINE_MAP;\n  }\n  static get OS_MAP() {\n    return OS_MAP;\n  }\n  static get PLATFORMS_MAP() {\n    return PLATFORMS_MAP;\n  }\n}\nexport default Bowser;","map":{"version":3,"names":["Parser","BROWSER_MAP","ENGINE_MAP","OS_MAP","PLATFORMS_MAP","Bowser","getParser","UA","skipParsing","Error","parse","getResult"],"sources":["C:/Users/91930/Desktop/Github projects/Pharmacy Demo/back-end/node_modules/bowser/src/bowser.js"],"sourcesContent":["/*!\r\n * Bowser - a browser detector\r\n * https://github.com/lancedikson/bowser\r\n * MIT License | (c) Dustin Diaz 2012-2015\r\n * MIT License | (c) Denis Demchenko 2015-2019\r\n */\r\nimport Parser from './parser.js';\r\nimport {\r\n  BROWSER_MAP,\r\n  ENGINE_MAP,\r\n  OS_MAP,\r\n  PLATFORMS_MAP,\r\n} from './constants.js';\r\n\r\n/**\r\n * Bowser class.\r\n * Keep it simple as much as it can be.\r\n * It's supposed to work with collections of {@link Parser} instances\r\n * rather then solve one-instance problems.\r\n * All the one-instance stuff is located in Parser class.\r\n *\r\n * @class\r\n * @classdesc Bowser is a static object, that provides an API to the Parsers\r\n * @hideconstructor\r\n */\r\nclass Bowser {\r\n  /**\r\n   * Creates a {@link Parser} instance\r\n   *\r\n   * @param {String} UA UserAgent string\r\n   * @param {Boolean} [skipParsing=false] Will make the Parser postpone parsing until you ask it\r\n   * explicitly. Same as `skipParsing` for {@link Parser}.\r\n   * @returns {Parser}\r\n   * @throws {Error} when UA is not a String\r\n   *\r\n   * @example\r\n   * const parser = Bowser.getParser(window.navigator.userAgent);\r\n   * const result = parser.getResult();\r\n   */\r\n  static getParser(UA, skipParsing = false) {\r\n    if (typeof UA !== 'string') {\r\n      throw new Error('UserAgent should be a string');\r\n    }\r\n    return new Parser(UA, skipParsing);\r\n  }\r\n\r\n  /**\r\n   * Creates a {@link Parser} instance and runs {@link Parser.getResult} immediately\r\n   *\r\n   * @param UA\r\n   * @return {ParsedResult}\r\n   *\r\n   * @example\r\n   * const result = Bowser.parse(window.navigator.userAgent);\r\n   */\r\n  static parse(UA) {\r\n    return (new Parser(UA)).getResult();\r\n  }\r\n\r\n  static get BROWSER_MAP() {\r\n    return BROWSER_MAP;\r\n  }\r\n\r\n  static get ENGINE_MAP() {\r\n    return ENGINE_MAP;\r\n  }\r\n\r\n  static get OS_MAP() {\r\n    return OS_MAP;\r\n  }\r\n\r\n  static get PLATFORMS_MAP() {\r\n    return PLATFORMS_MAP;\r\n  }\r\n}\r\n\r\nexport default Bowser;\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,MAAM,MAAM,aAAa;AAChC,SACEC,WAAW,EACXC,UAAU,EACVC,MAAM,EACNC,aAAa,QACR,gBAAgB;;AAEvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,MAAM,CAAC;EACX;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAOC,SAAS,CAACC,EAAE,EAAuB;IAAA,IAArBC,WAAW,uEAAG,KAAK;IACtC,IAAI,OAAOD,EAAE,KAAK,QAAQ,EAAE;MAC1B,MAAM,IAAIE,KAAK,CAAC,8BAA8B,CAAC;IACjD;IACA,OAAO,IAAIT,MAAM,CAACO,EAAE,EAAEC,WAAW,CAAC;EACpC;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,OAAOE,KAAK,CAACH,EAAE,EAAE;IACf,OAAQ,IAAIP,MAAM,CAACO,EAAE,CAAC,CAAEI,SAAS,EAAE;EACrC;EAEA,WAAWV,WAAW,GAAG;IACvB,OAAOA,WAAW;EACpB;EAEA,WAAWC,UAAU,GAAG;IACtB,OAAOA,UAAU;EACnB;EAEA,WAAWC,MAAM,GAAG;IAClB,OAAOA,MAAM;EACf;EAEA,WAAWC,aAAa,GAAG;IACzB,OAAOA,aAAa;EACtB;AACF;AAEA,eAAeC,MAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}