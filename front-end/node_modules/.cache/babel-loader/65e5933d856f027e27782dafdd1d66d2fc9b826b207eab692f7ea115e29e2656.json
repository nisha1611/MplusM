{"ast":null,"code":"'use strict';\n\n/**\r\n * MongooseError constructor. MongooseError is the base class for all\r\n * Mongoose-specific errors.\r\n *\r\n * #### Example:\r\n *\r\n *     const Model = mongoose.model('Test', new mongoose.Schema({ answer: Number }));\r\n *     const doc = new Model({ answer: 'not a number' });\r\n *     const err = doc.validateSync();\r\n *\r\n *     err instanceof mongoose.Error.ValidationError; // true\r\n *\r\n * @constructor Error\r\n * @param {String} msg Error message\r\n * @inherits Error https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error\r\n */\nconst MongooseError = require('./mongooseError');\n\n/**\r\n * The name of the error. The name uniquely identifies this Mongoose error. The\r\n * possible values are:\r\n *\r\n * - `MongooseError`: general Mongoose error\r\n * - `CastError`: Mongoose could not convert a value to the type defined in the schema path. May be in a `ValidationError` class' `errors` property.\r\n * - `DisconnectedError`: This [connection](connections.html) timed out in trying to reconnect to MongoDB and will not successfully reconnect to MongoDB unless you explicitly reconnect.\r\n * - `DivergentArrayError`: You attempted to `save()` an array that was modified after you loaded it with a `$elemMatch` or similar projection\r\n * - `MissingSchemaError`: You tried to access a model with [`mongoose.model()`](api/mongoose.html#mongoose_Mongoose-model) that was not defined\r\n * - `DocumentNotFoundError`: The document you tried to [`save()`](api/document.html#document_Document-save) was not found\r\n * - `ValidatorError`: error from an individual schema path's validator\r\n * - `ValidationError`: error returned from [`validate()`](api/document.html#document_Document-validate) or [`validateSync()`](api/document.html#document_Document-validateSync). Contains zero or more `ValidatorError` instances in `.errors` property.\r\n * - `MissingSchemaError`: You called `mongoose.Document()` without a schema\r\n * - `ObjectExpectedError`: Thrown when you set a nested path to a non-object value with [strict mode set](guide.html#strict).\r\n * - `ObjectParameterError`: Thrown when you pass a non-object value to a function which expects an object as a paramter\r\n * - `OverwriteModelError`: Thrown when you call [`mongoose.model()`](api/mongoose.html#mongoose_Mongoose-model) to re-define a model that was already defined.\r\n * - `ParallelSaveError`: Thrown when you call [`save()`](api/model.html#model_Model-save) on a document when the same document instance is already saving.\r\n * - `StrictModeError`: Thrown when you set a path that isn't the schema and [strict mode](guide.html#strict) is set to `throw`.\r\n * - `VersionError`: Thrown when the [document is out of sync](guide.html#versionKey)\r\n *\r\n * @api public\r\n * @property {String} name\r\n * @memberOf Error\r\n * @instance\r\n */\n\n/*!\r\n * Module exports.\r\n */\n\nmodule.exports = exports = MongooseError;\n\n/**\r\n * The default built-in validator error messages.\r\n *\r\n * @see Error.messages #error_messages_MongooseError-messages\r\n * @api public\r\n * @memberOf Error\r\n * @static\r\n */\n\nMongooseError.messages = require('./messages');\n\n// backward compat\nMongooseError.Messages = MongooseError.messages;\n\n/**\r\n * An instance of this error class will be returned when `save()` fails\r\n * because the underlying\r\n * document was not found. The constructor takes one parameter, the\r\n * conditions that mongoose passed to `update()` when trying to update\r\n * the document.\r\n *\r\n * @api public\r\n * @memberOf Error\r\n * @static\r\n */\n\nMongooseError.DocumentNotFoundError = require('./notFound');\n\n/**\r\n * An instance of this error class will be returned when mongoose failed to\r\n * cast a value.\r\n *\r\n * @api public\r\n * @memberOf Error\r\n * @static\r\n */\n\nMongooseError.CastError = require('./cast');\n\n/**\r\n * An instance of this error class will be returned when [validation](/docs/validation.html) failed.\r\n * The `errors` property contains an object whose keys are the paths that failed and whose values are\r\n * instances of CastError or ValidationError.\r\n *\r\n * @api public\r\n * @memberOf Error\r\n * @static\r\n */\n\nMongooseError.ValidationError = require('./validation');\n\n/**\r\n * A `ValidationError` has a hash of `errors` that contain individual\r\n * `ValidatorError` instances.\r\n *\r\n * #### Example:\r\n *\r\n *     const schema = Schema({ name: { type: String, required: true } });\r\n *     const Model = mongoose.model('Test', schema);\r\n *     const doc = new Model({});\r\n *\r\n *     // Top-level error is a ValidationError, **not** a ValidatorError\r\n *     const err = doc.validateSync();\r\n *     err instanceof mongoose.Error.ValidationError; // true\r\n *\r\n *     // A ValidationError `err` has 0 or more ValidatorErrors keyed by the\r\n *     // path in the `err.errors` property.\r\n *     err.errors['name'] instanceof mongoose.Error.ValidatorError;\r\n *\r\n *     err.errors['name'].kind; // 'required'\r\n *     err.errors['name'].path; // 'name'\r\n *     err.errors['name'].value; // undefined\r\n *\r\n * Instances of `ValidatorError` have the following properties:\r\n *\r\n * - `kind`: The validator's `type`, like `'required'` or `'regexp'`\r\n * - `path`: The path that failed validation\r\n * - `value`: The value that failed validation\r\n *\r\n * @api public\r\n * @memberOf Error\r\n * @static\r\n */\n\nMongooseError.ValidatorError = require('./validator');\n\n/**\r\n * An instance of this error class will be returned when you call `save()` after\r\n * the document in the database was changed in a potentially unsafe way. See\r\n * the [`versionKey` option](/docs/guide.html#versionKey) for more information.\r\n *\r\n * @api public\r\n * @memberOf Error\r\n * @static\r\n */\n\nMongooseError.VersionError = require('./version');\n\n/**\r\n * An instance of this error class will be returned when you call `save()` multiple\r\n * times on the same document in parallel. See the [FAQ](/docs/faq.html) for more\r\n * information.\r\n *\r\n * @api public\r\n * @memberOf Error\r\n * @static\r\n */\n\nMongooseError.ParallelSaveError = require('./parallelSave');\n\n/**\r\n * Thrown when a model with the given name was already registered on the connection.\r\n * See [the FAQ about `OverwriteModelError`](/docs/faq.html#overwrite-model-error).\r\n *\r\n * @api public\r\n * @memberOf Error\r\n * @static\r\n */\n\nMongooseError.OverwriteModelError = require('./overwriteModel');\n\n/**\r\n * Thrown when you try to access a model that has not been registered yet\r\n *\r\n * @api public\r\n * @memberOf Error\r\n * @static\r\n */\n\nMongooseError.MissingSchemaError = require('./missingSchema');\n\n/**\r\n * Thrown when the MongoDB Node driver can't connect to a valid server\r\n * to send an operation to.\r\n *\r\n * @api public\r\n * @memberOf Error\r\n * @static\r\n */\n\nMongooseError.MongooseServerSelectionError = require('./serverSelection');\n\n/**\r\n * An instance of this error will be returned if you used an array projection\r\n * and then modified the array in an unsafe way.\r\n *\r\n * @api public\r\n * @memberOf Error\r\n * @static\r\n */\n\nMongooseError.DivergentArrayError = require('./divergentArray');\n\n/**\r\n * Thrown when your try to pass values to model contrtuctor that\r\n * were not specified in schema or change immutable properties when\r\n * `strict` mode is `\"throw\"`\r\n *\r\n * @api public\r\n * @memberOf Error\r\n * @static\r\n */\n\nMongooseError.StrictModeError = require('./strict');","map":{"version":3,"names":["MongooseError","require","module","exports","messages","Messages","DocumentNotFoundError","CastError","ValidationError","ValidatorError","VersionError","ParallelSaveError","OverwriteModelError","MissingSchemaError","MongooseServerSelectionError","DivergentArrayError","StrictModeError"],"sources":["C:/Users/91930/Desktop/Github projects/Pharmacy Demo/back-end/node_modules/mongoose/lib/error/index.js"],"sourcesContent":["'use strict';\r\n\r\n/**\r\n * MongooseError constructor. MongooseError is the base class for all\r\n * Mongoose-specific errors.\r\n *\r\n * #### Example:\r\n *\r\n *     const Model = mongoose.model('Test', new mongoose.Schema({ answer: Number }));\r\n *     const doc = new Model({ answer: 'not a number' });\r\n *     const err = doc.validateSync();\r\n *\r\n *     err instanceof mongoose.Error.ValidationError; // true\r\n *\r\n * @constructor Error\r\n * @param {String} msg Error message\r\n * @inherits Error https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error\r\n */\r\n\r\nconst MongooseError = require('./mongooseError');\r\n\r\n/**\r\n * The name of the error. The name uniquely identifies this Mongoose error. The\r\n * possible values are:\r\n *\r\n * - `MongooseError`: general Mongoose error\r\n * - `CastError`: Mongoose could not convert a value to the type defined in the schema path. May be in a `ValidationError` class' `errors` property.\r\n * - `DisconnectedError`: This [connection](connections.html) timed out in trying to reconnect to MongoDB and will not successfully reconnect to MongoDB unless you explicitly reconnect.\r\n * - `DivergentArrayError`: You attempted to `save()` an array that was modified after you loaded it with a `$elemMatch` or similar projection\r\n * - `MissingSchemaError`: You tried to access a model with [`mongoose.model()`](api/mongoose.html#mongoose_Mongoose-model) that was not defined\r\n * - `DocumentNotFoundError`: The document you tried to [`save()`](api/document.html#document_Document-save) was not found\r\n * - `ValidatorError`: error from an individual schema path's validator\r\n * - `ValidationError`: error returned from [`validate()`](api/document.html#document_Document-validate) or [`validateSync()`](api/document.html#document_Document-validateSync). Contains zero or more `ValidatorError` instances in `.errors` property.\r\n * - `MissingSchemaError`: You called `mongoose.Document()` without a schema\r\n * - `ObjectExpectedError`: Thrown when you set a nested path to a non-object value with [strict mode set](guide.html#strict).\r\n * - `ObjectParameterError`: Thrown when you pass a non-object value to a function which expects an object as a paramter\r\n * - `OverwriteModelError`: Thrown when you call [`mongoose.model()`](api/mongoose.html#mongoose_Mongoose-model) to re-define a model that was already defined.\r\n * - `ParallelSaveError`: Thrown when you call [`save()`](api/model.html#model_Model-save) on a document when the same document instance is already saving.\r\n * - `StrictModeError`: Thrown when you set a path that isn't the schema and [strict mode](guide.html#strict) is set to `throw`.\r\n * - `VersionError`: Thrown when the [document is out of sync](guide.html#versionKey)\r\n *\r\n * @api public\r\n * @property {String} name\r\n * @memberOf Error\r\n * @instance\r\n */\r\n\r\n/*!\r\n * Module exports.\r\n */\r\n\r\nmodule.exports = exports = MongooseError;\r\n\r\n/**\r\n * The default built-in validator error messages.\r\n *\r\n * @see Error.messages #error_messages_MongooseError-messages\r\n * @api public\r\n * @memberOf Error\r\n * @static\r\n */\r\n\r\nMongooseError.messages = require('./messages');\r\n\r\n// backward compat\r\nMongooseError.Messages = MongooseError.messages;\r\n\r\n/**\r\n * An instance of this error class will be returned when `save()` fails\r\n * because the underlying\r\n * document was not found. The constructor takes one parameter, the\r\n * conditions that mongoose passed to `update()` when trying to update\r\n * the document.\r\n *\r\n * @api public\r\n * @memberOf Error\r\n * @static\r\n */\r\n\r\nMongooseError.DocumentNotFoundError = require('./notFound');\r\n\r\n/**\r\n * An instance of this error class will be returned when mongoose failed to\r\n * cast a value.\r\n *\r\n * @api public\r\n * @memberOf Error\r\n * @static\r\n */\r\n\r\nMongooseError.CastError = require('./cast');\r\n\r\n/**\r\n * An instance of this error class will be returned when [validation](/docs/validation.html) failed.\r\n * The `errors` property contains an object whose keys are the paths that failed and whose values are\r\n * instances of CastError or ValidationError.\r\n *\r\n * @api public\r\n * @memberOf Error\r\n * @static\r\n */\r\n\r\nMongooseError.ValidationError = require('./validation');\r\n\r\n/**\r\n * A `ValidationError` has a hash of `errors` that contain individual\r\n * `ValidatorError` instances.\r\n *\r\n * #### Example:\r\n *\r\n *     const schema = Schema({ name: { type: String, required: true } });\r\n *     const Model = mongoose.model('Test', schema);\r\n *     const doc = new Model({});\r\n *\r\n *     // Top-level error is a ValidationError, **not** a ValidatorError\r\n *     const err = doc.validateSync();\r\n *     err instanceof mongoose.Error.ValidationError; // true\r\n *\r\n *     // A ValidationError `err` has 0 or more ValidatorErrors keyed by the\r\n *     // path in the `err.errors` property.\r\n *     err.errors['name'] instanceof mongoose.Error.ValidatorError;\r\n *\r\n *     err.errors['name'].kind; // 'required'\r\n *     err.errors['name'].path; // 'name'\r\n *     err.errors['name'].value; // undefined\r\n *\r\n * Instances of `ValidatorError` have the following properties:\r\n *\r\n * - `kind`: The validator's `type`, like `'required'` or `'regexp'`\r\n * - `path`: The path that failed validation\r\n * - `value`: The value that failed validation\r\n *\r\n * @api public\r\n * @memberOf Error\r\n * @static\r\n */\r\n\r\nMongooseError.ValidatorError = require('./validator');\r\n\r\n/**\r\n * An instance of this error class will be returned when you call `save()` after\r\n * the document in the database was changed in a potentially unsafe way. See\r\n * the [`versionKey` option](/docs/guide.html#versionKey) for more information.\r\n *\r\n * @api public\r\n * @memberOf Error\r\n * @static\r\n */\r\n\r\nMongooseError.VersionError = require('./version');\r\n\r\n/**\r\n * An instance of this error class will be returned when you call `save()` multiple\r\n * times on the same document in parallel. See the [FAQ](/docs/faq.html) for more\r\n * information.\r\n *\r\n * @api public\r\n * @memberOf Error\r\n * @static\r\n */\r\n\r\nMongooseError.ParallelSaveError = require('./parallelSave');\r\n\r\n/**\r\n * Thrown when a model with the given name was already registered on the connection.\r\n * See [the FAQ about `OverwriteModelError`](/docs/faq.html#overwrite-model-error).\r\n *\r\n * @api public\r\n * @memberOf Error\r\n * @static\r\n */\r\n\r\nMongooseError.OverwriteModelError = require('./overwriteModel');\r\n\r\n/**\r\n * Thrown when you try to access a model that has not been registered yet\r\n *\r\n * @api public\r\n * @memberOf Error\r\n * @static\r\n */\r\n\r\nMongooseError.MissingSchemaError = require('./missingSchema');\r\n\r\n/**\r\n * Thrown when the MongoDB Node driver can't connect to a valid server\r\n * to send an operation to.\r\n *\r\n * @api public\r\n * @memberOf Error\r\n * @static\r\n */\r\n\r\nMongooseError.MongooseServerSelectionError = require('./serverSelection');\r\n\r\n/**\r\n * An instance of this error will be returned if you used an array projection\r\n * and then modified the array in an unsafe way.\r\n *\r\n * @api public\r\n * @memberOf Error\r\n * @static\r\n */\r\n\r\nMongooseError.DivergentArrayError = require('./divergentArray');\r\n\r\n/**\r\n * Thrown when your try to pass values to model contrtuctor that\r\n * were not specified in schema or change immutable properties when\r\n * `strict` mode is `\"throw\"`\r\n *\r\n * @api public\r\n * @memberOf Error\r\n * @static\r\n */\r\n\r\nMongooseError.StrictModeError = require('./strict');\r\n"],"mappings":"AAAA,YAAY;;AAEZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,MAAMA,aAAa,GAAGC,OAAO,CAAC,iBAAiB,CAAC;;AAEhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEAC,MAAM,CAACC,OAAO,GAAGA,OAAO,GAAGH,aAAa;;AAExC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAA,aAAa,CAACI,QAAQ,GAAGH,OAAO,CAAC,YAAY,CAAC;;AAE9C;AACAD,aAAa,CAACK,QAAQ,GAAGL,aAAa,CAACI,QAAQ;;AAE/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAJ,aAAa,CAACM,qBAAqB,GAAGL,OAAO,CAAC,YAAY,CAAC;;AAE3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAD,aAAa,CAACO,SAAS,GAAGN,OAAO,CAAC,QAAQ,CAAC;;AAE3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAD,aAAa,CAACQ,eAAe,GAAGP,OAAO,CAAC,cAAc,CAAC;;AAEvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAD,aAAa,CAACS,cAAc,GAAGR,OAAO,CAAC,aAAa,CAAC;;AAErD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAD,aAAa,CAACU,YAAY,GAAGT,OAAO,CAAC,WAAW,CAAC;;AAEjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAD,aAAa,CAACW,iBAAiB,GAAGV,OAAO,CAAC,gBAAgB,CAAC;;AAE3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAD,aAAa,CAACY,mBAAmB,GAAGX,OAAO,CAAC,kBAAkB,CAAC;;AAE/D;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAD,aAAa,CAACa,kBAAkB,GAAGZ,OAAO,CAAC,iBAAiB,CAAC;;AAE7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAD,aAAa,CAACc,4BAA4B,GAAGb,OAAO,CAAC,mBAAmB,CAAC;;AAEzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAD,aAAa,CAACe,mBAAmB,GAAGd,OAAO,CAAC,kBAAkB,CAAC;;AAE/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAD,aAAa,CAACgB,eAAe,GAAGf,OAAO,CAAC,UAAU,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}