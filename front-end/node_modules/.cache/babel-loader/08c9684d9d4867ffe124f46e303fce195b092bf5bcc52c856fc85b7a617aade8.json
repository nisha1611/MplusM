{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EvalOperation = void 0;\nconst bson_1 = require(\"../bson\");\nconst error_1 = require(\"../error\");\nconst read_preference_1 = require(\"../read_preference\");\nconst command_1 = require(\"./command\");\n/** @internal */\nclass EvalOperation extends command_1.CommandOperation {\n  constructor(db, code, parameters, options) {\n    super(db, options);\n    this.options = options !== null && options !== void 0 ? options : {};\n    this.code = code;\n    this.parameters = parameters;\n    // force primary read preference\n    Object.defineProperty(this, 'readPreference', {\n      value: read_preference_1.ReadPreference.primary,\n      configurable: false,\n      writable: false\n    });\n  }\n  execute(server, session, callback) {\n    let finalCode = this.code;\n    let finalParameters = [];\n    // If not a code object translate to one\n    if (!(finalCode && finalCode._bsontype === 'Code')) {\n      finalCode = new bson_1.Code(finalCode);\n    }\n    // Ensure the parameters are correct\n    if (this.parameters != null && typeof this.parameters !== 'function') {\n      finalParameters = Array.isArray(this.parameters) ? this.parameters : [this.parameters];\n    }\n    // Create execution selector\n    const cmd = {\n      $eval: finalCode,\n      args: finalParameters\n    };\n    // Check if the nolock parameter is passed in\n    if (this.options.nolock) {\n      cmd.nolock = this.options.nolock;\n    }\n    // Execute the command\n    super.executeCommand(server, session, cmd, (err, result) => {\n      if (err) return callback(err);\n      if (result && result.ok === 1) {\n        return callback(undefined, result.retval);\n      }\n      if (result) {\n        callback(new error_1.MongoServerError({\n          message: `eval failed: ${result.errmsg}`\n        }));\n        return;\n      }\n      callback(err, result);\n    });\n  }\n}\nexports.EvalOperation = EvalOperation;","map":{"version":3,"mappings":";;;;;;AAAA;AAGA;AACA;AAIA;AAOA;AACA,MAAaA,aAAc,SAAQC,0BAA0B;EAK3DC,YACEC,EAAmB,EACnBC,IAAU,EACVC,UAAkC,EAClCC,OAAqB;IAErB,KAAK,CAACH,EAAE,EAAEG,OAAO,CAAC;IAElB,IAAI,CAACA,OAAO,GAAGA,OAAO,aAAPA,OAAO,cAAPA,OAAO,GAAI,EAAE;IAC5B,IAAI,CAACF,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACC,UAAU,GAAGA,UAAU;IAC5B;IACAE,MAAM,CAACC,cAAc,CAAC,IAAI,EAAE,gBAAgB,EAAE;MAC5CC,KAAK,EAAEC,gCAAc,CAACC,OAAO;MAC7BC,YAAY,EAAE,KAAK;MACnBC,QAAQ,EAAE;KACX,CAAC;EACJ;EAESC,OAAO,CACdC,MAAc,EACdC,OAAkC,EAClCC,QAA4B;IAE5B,IAAIC,SAAS,GAAG,IAAI,CAACd,IAAI;IACzB,IAAIe,eAAe,GAAe,EAAE;IAEpC;IACA,IAAI,EAAED,SAAS,IAAKA,SAA8C,CAACE,SAAS,KAAK,MAAM,CAAC,EAAE;MACxFF,SAAS,GAAG,IAAIG,WAAI,CAACH,SAAkB,CAAC;;IAG1C;IACA,IAAI,IAAI,CAACb,UAAU,IAAI,IAAI,IAAI,OAAO,IAAI,CAACA,UAAU,KAAK,UAAU,EAAE;MACpEc,eAAe,GAAGG,KAAK,CAACC,OAAO,CAAC,IAAI,CAAClB,UAAU,CAAC,GAAG,IAAI,CAACA,UAAU,GAAG,CAAC,IAAI,CAACA,UAAU,CAAC;;IAGxF;IACA,MAAMmB,GAAG,GAAa;MAAEC,KAAK,EAAEP,SAAS;MAAEQ,IAAI,EAAEP;IAAe,CAAE;IAEjE;IACA,IAAI,IAAI,CAACb,OAAO,CAACqB,MAAM,EAAE;MACvBH,GAAG,CAACG,MAAM,GAAG,IAAI,CAACrB,OAAO,CAACqB,MAAM;;IAGlC;IACA,KAAK,CAACC,cAAc,CAACb,MAAM,EAAEC,OAAO,EAAEQ,GAAG,EAAE,CAACK,GAAG,EAAEC,MAAM,KAAI;MACzD,IAAID,GAAG,EAAE,OAAOZ,QAAQ,CAACY,GAAG,CAAC;MAC7B,IAAIC,MAAM,IAAIA,MAAM,CAACC,EAAE,KAAK,CAAC,EAAE;QAC7B,OAAOd,QAAQ,CAACe,SAAS,EAAEF,MAAM,CAACG,MAAM,CAAC;;MAG3C,IAAIH,MAAM,EAAE;QACVb,QAAQ,CAAC,IAAIiB,wBAAgB,CAAC;UAAEC,OAAO,EAAE,gBAAgBL,MAAM,CAACM,MAAM;QAAE,CAAE,CAAC,CAAC;QAC5E;;MAGFnB,QAAQ,CAACY,GAAG,EAAEC,MAAM,CAAC;IACvB,CAAC,CAAC;EACJ;;AAhEFO","names":["EvalOperation","command_1","constructor","db","code","parameters","options","Object","defineProperty","value","read_preference_1","primary","configurable","writable","execute","server","session","callback","finalCode","finalParameters","_bsontype","bson_1","Array","isArray","cmd","$eval","args","nolock","executeCommand","err","result","ok","undefined","retval","error_1","message","errmsg","exports"],"sources":["C:\\Users\\91930\\Desktop\\Github projects\\Pharmacy Demo\\back-end\\node_modules\\mongoose\\node_modules\\mongodb\\src\\operations\\eval.ts"],"sourcesContent":["import { Code, Document } from '../bson';\r\nimport type { Collection } from '../collection';\r\nimport type { Db } from '../db';\r\nimport { MongoServerError } from '../error';\r\nimport { ReadPreference } from '../read_preference';\r\nimport type { Server } from '../sdam/server';\r\nimport type { ClientSession } from '../sessions';\r\nimport type { Callback } from '../utils';\r\nimport { CommandOperation, CommandOperationOptions } from './command';\r\n\r\n/** @public */\r\nexport interface EvalOptions extends CommandOperationOptions {\r\n  nolock?: boolean;\r\n}\r\n\r\n/** @internal */\r\nexport class EvalOperation extends CommandOperation<Document> {\r\n  override options: EvalOptions;\r\n  code: Code;\r\n  parameters?: Document | Document[];\r\n\r\n  constructor(\r\n    db: Db | Collection,\r\n    code: Code,\r\n    parameters?: Document | Document[],\r\n    options?: EvalOptions\r\n  ) {\r\n    super(db, options);\r\n\r\n    this.options = options ?? {};\r\n    this.code = code;\r\n    this.parameters = parameters;\r\n    // force primary read preference\r\n    Object.defineProperty(this, 'readPreference', {\r\n      value: ReadPreference.primary,\r\n      configurable: false,\r\n      writable: false\r\n    });\r\n  }\r\n\r\n  override execute(\r\n    server: Server,\r\n    session: ClientSession | undefined,\r\n    callback: Callback<Document>\r\n  ): void {\r\n    let finalCode = this.code;\r\n    let finalParameters: Document[] = [];\r\n\r\n    // If not a code object translate to one\r\n    if (!(finalCode && (finalCode as unknown as { _bsontype: string })._bsontype === 'Code')) {\r\n      finalCode = new Code(finalCode as never);\r\n    }\r\n\r\n    // Ensure the parameters are correct\r\n    if (this.parameters != null && typeof this.parameters !== 'function') {\r\n      finalParameters = Array.isArray(this.parameters) ? this.parameters : [this.parameters];\r\n    }\r\n\r\n    // Create execution selector\r\n    const cmd: Document = { $eval: finalCode, args: finalParameters };\r\n\r\n    // Check if the nolock parameter is passed in\r\n    if (this.options.nolock) {\r\n      cmd.nolock = this.options.nolock;\r\n    }\r\n\r\n    // Execute the command\r\n    super.executeCommand(server, session, cmd, (err, result) => {\r\n      if (err) return callback(err);\r\n      if (result && result.ok === 1) {\r\n        return callback(undefined, result.retval);\r\n      }\r\n\r\n      if (result) {\r\n        callback(new MongoServerError({ message: `eval failed: ${result.errmsg}` }));\r\n        return;\r\n      }\r\n\r\n      callback(err, result);\r\n    });\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}