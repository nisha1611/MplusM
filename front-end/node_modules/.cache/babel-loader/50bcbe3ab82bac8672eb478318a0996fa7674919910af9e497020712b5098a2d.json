{"ast":null,"code":"/*\r\n * Copyright 2012 The Closure Compiler Authors.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * @fileoverview Definitions for bcrypt.js 2.\r\n * @externs\r\n * @author Daniel Wirtz <dcode@dcode.io>\r\n */\n\n/**\r\n * @type {Object.<string,*>}\r\n */\nvar bcrypt = {};\n\n/**\r\n * @param {?function(number):!Array.<number>} random\r\n */\nbcrypt.setRandomFallback = function (random) {};\n\n/**\r\n * @param {number=} rounds\r\n * @param {number=} seed_length\r\n * @returns {string}\r\n */\nbcrypt.genSaltSync = function (rounds, seed_length) {};\n\n/**\r\n * @param {(number|function(Error, ?string))=} rounds\r\n * @param {(number|function(Error, ?string))=} seed_length\r\n * @param {function(Error, string=)=} callback\r\n */\nbcrypt.genSalt = function (rounds, seed_length, callback) {};\n\n/**\r\n * @param {string} s\r\n * @param {(number|string)=} salt\r\n * @returns {?string}\r\n */\nbcrypt.hashSync = function (s, salt) {};\n\n/**\r\n * @param {string} s\r\n * @param {number|string} salt\r\n * @param {function(Error, string=)} callback\r\n * @expose\r\n */\nbcrypt.hash = function (s, salt, callback) {};\n\n/**\r\n * @param {string} s\r\n * @param {string} hash\r\n * @returns {boolean}\r\n * @throws {Error}\r\n */\nbcrypt.compareSync = function (s, hash) {};\n\n/**\r\n * @param {string} s\r\n * @param {string} hash\r\n * @param {function(Error, boolean)} callback\r\n * @throws {Error}\r\n */\nbcrypt.compare = function (s, hash, callback) {};\n\n/**\r\n * @param {string} hash\r\n * @returns {number}\r\n * @throws {Error}\r\n */\nbcrypt.getRounds = function (hash) {};\n\n/**\r\n * @param {string} hash\r\n * @returns {string}\r\n * @throws {Error}\r\n * @expose\r\n */\nbcrypt.getSalt = function (hash) {};","map":{"version":3,"names":["bcrypt","setRandomFallback","random","genSaltSync","rounds","seed_length","genSalt","callback","hashSync","s","salt","hash","compareSync","compare","getRounds","getSalt"],"sources":["C:/Users/91930/Desktop/Github projects/Pharmacy Demo/back-end/node_modules/bcryptjs/externs/bcrypt.js"],"sourcesContent":["/*\r\n * Copyright 2012 The Closure Compiler Authors.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n/**\r\n * @fileoverview Definitions for bcrypt.js 2.\r\n * @externs\r\n * @author Daniel Wirtz <dcode@dcode.io>\r\n */\r\n\r\n/**\r\n * @type {Object.<string,*>}\r\n */\r\nvar bcrypt = {};\r\n\r\n/**\r\n * @param {?function(number):!Array.<number>} random\r\n */\r\nbcrypt.setRandomFallback = function(random) {};\r\n\r\n/**\r\n * @param {number=} rounds\r\n * @param {number=} seed_length\r\n * @returns {string}\r\n */\r\nbcrypt.genSaltSync = function(rounds, seed_length) {};\r\n\r\n/**\r\n * @param {(number|function(Error, ?string))=} rounds\r\n * @param {(number|function(Error, ?string))=} seed_length\r\n * @param {function(Error, string=)=} callback\r\n */\r\nbcrypt.genSalt = function(rounds, seed_length, callback) {};\r\n\r\n/**\r\n * @param {string} s\r\n * @param {(number|string)=} salt\r\n * @returns {?string}\r\n */\r\nbcrypt.hashSync = function(s, salt) {};\r\n\r\n/**\r\n * @param {string} s\r\n * @param {number|string} salt\r\n * @param {function(Error, string=)} callback\r\n * @expose\r\n */\r\nbcrypt.hash = function(s, salt, callback) {};\r\n\r\n/**\r\n * @param {string} s\r\n * @param {string} hash\r\n * @returns {boolean}\r\n * @throws {Error}\r\n */\r\nbcrypt.compareSync = function(s, hash) {};\r\n\r\n/**\r\n * @param {string} s\r\n * @param {string} hash\r\n * @param {function(Error, boolean)} callback\r\n * @throws {Error}\r\n */\r\nbcrypt.compare = function(s, hash, callback) {};\r\n\r\n/**\r\n * @param {string} hash\r\n * @returns {number}\r\n * @throws {Error}\r\n */\r\nbcrypt.getRounds = function(hash) {};\r\n\r\n/**\r\n * @param {string} hash\r\n * @returns {string}\r\n * @throws {Error}\r\n * @expose\r\n */\r\nbcrypt.getSalt = function(hash) {};\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,IAAIA,MAAM,GAAG,CAAC,CAAC;;AAEf;AACA;AACA;AACAA,MAAM,CAACC,iBAAiB,GAAG,UAASC,MAAM,EAAE,CAAC,CAAC;;AAE9C;AACA;AACA;AACA;AACA;AACAF,MAAM,CAACG,WAAW,GAAG,UAASC,MAAM,EAAEC,WAAW,EAAE,CAAC,CAAC;;AAErD;AACA;AACA;AACA;AACA;AACAL,MAAM,CAACM,OAAO,GAAG,UAASF,MAAM,EAAEC,WAAW,EAAEE,QAAQ,EAAE,CAAC,CAAC;;AAE3D;AACA;AACA;AACA;AACA;AACAP,MAAM,CAACQ,QAAQ,GAAG,UAASC,CAAC,EAAEC,IAAI,EAAE,CAAC,CAAC;;AAEtC;AACA;AACA;AACA;AACA;AACA;AACAV,MAAM,CAACW,IAAI,GAAG,UAASF,CAAC,EAAEC,IAAI,EAAEH,QAAQ,EAAE,CAAC,CAAC;;AAE5C;AACA;AACA;AACA;AACA;AACA;AACAP,MAAM,CAACY,WAAW,GAAG,UAASH,CAAC,EAAEE,IAAI,EAAE,CAAC,CAAC;;AAEzC;AACA;AACA;AACA;AACA;AACA;AACAX,MAAM,CAACa,OAAO,GAAG,UAASJ,CAAC,EAAEE,IAAI,EAAEJ,QAAQ,EAAE,CAAC,CAAC;;AAE/C;AACA;AACA;AACA;AACA;AACAP,MAAM,CAACc,SAAS,GAAG,UAASH,IAAI,EAAE,CAAC,CAAC;;AAEpC;AACA;AACA;AACA;AACA;AACA;AACAX,MAAM,CAACe,OAAO,GAAG,UAASJ,IAAI,EAAE,CAAC,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}