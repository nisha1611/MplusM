{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.httpRequest = void 0;\nconst property_provider_1 = require(\"@aws-sdk/property-provider\");\nconst buffer_1 = require(\"buffer\");\nconst http_1 = require(\"http\");\nfunction httpRequest(options) {\n  return new Promise((resolve, reject) => {\n    var _a;\n    const req = (0, http_1.request)({\n      method: \"GET\",\n      ...options,\n      hostname: (_a = options.hostname) === null || _a === void 0 ? void 0 : _a.replace(/^\\[(.+)\\]$/, \"$1\")\n    });\n    req.on(\"error\", err => {\n      reject(Object.assign(new property_provider_1.ProviderError(\"Unable to connect to instance metadata service\"), err));\n      req.destroy();\n    });\n    req.on(\"timeout\", () => {\n      reject(new property_provider_1.ProviderError(\"TimeoutError from instance metadata service\"));\n      req.destroy();\n    });\n    req.on(\"response\", res => {\n      const {\n        statusCode = 400\n      } = res;\n      if (statusCode < 200 || 300 <= statusCode) {\n        reject(Object.assign(new property_provider_1.ProviderError(\"Error response received from instance metadata service\"), {\n          statusCode\n        }));\n        req.destroy();\n      }\n      const chunks = [];\n      res.on(\"data\", chunk => {\n        chunks.push(chunk);\n      });\n      res.on(\"end\", () => {\n        resolve(buffer_1.Buffer.concat(chunks));\n        req.destroy();\n      });\n    });\n    req.end();\n  });\n}\nexports.httpRequest = httpRequest;","map":{"version":3,"names":["Object","defineProperty","exports","value","httpRequest","property_provider_1","require","buffer_1","http_1","options","Promise","resolve","reject","_a","req","request","method","hostname","replace","on","err","assign","ProviderError","destroy","res","statusCode","chunks","chunk","push","Buffer","concat","end"],"sources":["C:/Users/91930/Desktop/Github projects/Pharmacy Demo/back-end/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/remoteProvider/httpRequest.js"],"sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.httpRequest = void 0;\r\nconst property_provider_1 = require(\"@aws-sdk/property-provider\");\r\nconst buffer_1 = require(\"buffer\");\r\nconst http_1 = require(\"http\");\r\nfunction httpRequest(options) {\r\n    return new Promise((resolve, reject) => {\r\n        var _a;\r\n        const req = (0, http_1.request)({\r\n            method: \"GET\",\r\n            ...options,\r\n            hostname: (_a = options.hostname) === null || _a === void 0 ? void 0 : _a.replace(/^\\[(.+)\\]$/, \"$1\"),\r\n        });\r\n        req.on(\"error\", (err) => {\r\n            reject(Object.assign(new property_provider_1.ProviderError(\"Unable to connect to instance metadata service\"), err));\r\n            req.destroy();\r\n        });\r\n        req.on(\"timeout\", () => {\r\n            reject(new property_provider_1.ProviderError(\"TimeoutError from instance metadata service\"));\r\n            req.destroy();\r\n        });\r\n        req.on(\"response\", (res) => {\r\n            const { statusCode = 400 } = res;\r\n            if (statusCode < 200 || 300 <= statusCode) {\r\n                reject(Object.assign(new property_provider_1.ProviderError(\"Error response received from instance metadata service\"), { statusCode }));\r\n                req.destroy();\r\n            }\r\n            const chunks = [];\r\n            res.on(\"data\", (chunk) => {\r\n                chunks.push(chunk);\r\n            });\r\n            res.on(\"end\", () => {\r\n                resolve(buffer_1.Buffer.concat(chunks));\r\n                req.destroy();\r\n            });\r\n        });\r\n        req.end();\r\n    });\r\n}\r\nexports.httpRequest = httpRequest;\r\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,WAAW,GAAG,KAAK,CAAC;AAC5B,MAAMC,mBAAmB,GAAGC,OAAO,CAAC,4BAA4B,CAAC;AACjE,MAAMC,QAAQ,GAAGD,OAAO,CAAC,QAAQ,CAAC;AAClC,MAAME,MAAM,GAAGF,OAAO,CAAC,MAAM,CAAC;AAC9B,SAASF,WAAW,CAACK,OAAO,EAAE;EAC1B,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACpC,IAAIC,EAAE;IACN,MAAMC,GAAG,GAAG,CAAC,CAAC,EAAEN,MAAM,CAACO,OAAO,EAAE;MAC5BC,MAAM,EAAE,KAAK;MACb,GAAGP,OAAO;MACVQ,QAAQ,EAAE,CAACJ,EAAE,GAAGJ,OAAO,CAACQ,QAAQ,MAAM,IAAI,IAAIJ,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACK,OAAO,CAAC,YAAY,EAAE,IAAI;IACxG,CAAC,CAAC;IACFJ,GAAG,CAACK,EAAE,CAAC,OAAO,EAAGC,GAAG,IAAK;MACrBR,MAAM,CAACZ,MAAM,CAACqB,MAAM,CAAC,IAAIhB,mBAAmB,CAACiB,aAAa,CAAC,gDAAgD,CAAC,EAAEF,GAAG,CAAC,CAAC;MACnHN,GAAG,CAACS,OAAO,EAAE;IACjB,CAAC,CAAC;IACFT,GAAG,CAACK,EAAE,CAAC,SAAS,EAAE,MAAM;MACpBP,MAAM,CAAC,IAAIP,mBAAmB,CAACiB,aAAa,CAAC,6CAA6C,CAAC,CAAC;MAC5FR,GAAG,CAACS,OAAO,EAAE;IACjB,CAAC,CAAC;IACFT,GAAG,CAACK,EAAE,CAAC,UAAU,EAAGK,GAAG,IAAK;MACxB,MAAM;QAAEC,UAAU,GAAG;MAAI,CAAC,GAAGD,GAAG;MAChC,IAAIC,UAAU,GAAG,GAAG,IAAI,GAAG,IAAIA,UAAU,EAAE;QACvCb,MAAM,CAACZ,MAAM,CAACqB,MAAM,CAAC,IAAIhB,mBAAmB,CAACiB,aAAa,CAAC,wDAAwD,CAAC,EAAE;UAAEG;QAAW,CAAC,CAAC,CAAC;QACtIX,GAAG,CAACS,OAAO,EAAE;MACjB;MACA,MAAMG,MAAM,GAAG,EAAE;MACjBF,GAAG,CAACL,EAAE,CAAC,MAAM,EAAGQ,KAAK,IAAK;QACtBD,MAAM,CAACE,IAAI,CAACD,KAAK,CAAC;MACtB,CAAC,CAAC;MACFH,GAAG,CAACL,EAAE,CAAC,KAAK,EAAE,MAAM;QAChBR,OAAO,CAACJ,QAAQ,CAACsB,MAAM,CAACC,MAAM,CAACJ,MAAM,CAAC,CAAC;QACvCZ,GAAG,CAACS,OAAO,EAAE;MACjB,CAAC,CAAC;IACN,CAAC,CAAC;IACFT,GAAG,CAACiB,GAAG,EAAE;EACb,CAAC,CAAC;AACN;AACA7B,OAAO,CAACE,WAAW,GAAGA,WAAW"},"metadata":{},"sourceType":"script","externalDependencies":[]}