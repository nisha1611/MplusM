{"ast":null,"code":"/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Tobias Koppers @sokra\r\n*/\n\n\"use strict\";\n\nconst binarySearchBounds = require(\"../util/binarySearchBounds\");\nclass ParallelismFactorCalculator {\n  constructor() {\n    this._rangePoints = [];\n    this._rangeCallbacks = [];\n  }\n  range(start, end, callback) {\n    if (start === end) return callback(1);\n    this._rangePoints.push(start);\n    this._rangePoints.push(end);\n    this._rangeCallbacks.push(callback);\n  }\n  calculate() {\n    const segments = Array.from(new Set(this._rangePoints)).sort((a, b) => a < b ? -1 : 1);\n    const parallelism = segments.map(() => 0);\n    const rangeStartIndices = [];\n    for (let i = 0; i < this._rangePoints.length; i += 2) {\n      const start = this._rangePoints[i];\n      const end = this._rangePoints[i + 1];\n      let idx = binarySearchBounds.eq(segments, start);\n      rangeStartIndices.push(idx);\n      do {\n        parallelism[idx]++;\n        idx++;\n      } while (segments[idx] < end);\n    }\n    for (let i = 0; i < this._rangeCallbacks.length; i++) {\n      const start = this._rangePoints[i * 2];\n      const end = this._rangePoints[i * 2 + 1];\n      let idx = rangeStartIndices[i];\n      let sum = 0;\n      let totalDuration = 0;\n      let current = start;\n      do {\n        const p = parallelism[idx];\n        idx++;\n        const duration = segments[idx] - current;\n        totalDuration += duration;\n        current = segments[idx];\n        sum += p * duration;\n      } while (current < end);\n      this._rangeCallbacks[i](sum / totalDuration);\n    }\n  }\n}\nmodule.exports = ParallelismFactorCalculator;","map":{"version":3,"names":["binarySearchBounds","require","ParallelismFactorCalculator","constructor","_rangePoints","_rangeCallbacks","range","start","end","callback","push","calculate","segments","Array","from","Set","sort","a","b","parallelism","map","rangeStartIndices","i","length","idx","eq","sum","totalDuration","current","p","duration","module","exports"],"sources":["C:/Users/91930/Desktop/Github projects/Pharmacy Demo/front-end/node_modules/webpack/lib/util/ParallelismFactorCalculator.js"],"sourcesContent":["/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Tobias Koppers @sokra\r\n*/\r\n\r\n\"use strict\";\r\n\r\nconst binarySearchBounds = require(\"../util/binarySearchBounds\");\r\n\r\nclass ParallelismFactorCalculator {\r\n\tconstructor() {\r\n\t\tthis._rangePoints = [];\r\n\t\tthis._rangeCallbacks = [];\r\n\t}\r\n\r\n\trange(start, end, callback) {\r\n\t\tif (start === end) return callback(1);\r\n\t\tthis._rangePoints.push(start);\r\n\t\tthis._rangePoints.push(end);\r\n\t\tthis._rangeCallbacks.push(callback);\r\n\t}\r\n\r\n\tcalculate() {\r\n\t\tconst segments = Array.from(new Set(this._rangePoints)).sort((a, b) =>\r\n\t\t\ta < b ? -1 : 1\r\n\t\t);\r\n\t\tconst parallelism = segments.map(() => 0);\r\n\t\tconst rangeStartIndices = [];\r\n\t\tfor (let i = 0; i < this._rangePoints.length; i += 2) {\r\n\t\t\tconst start = this._rangePoints[i];\r\n\t\t\tconst end = this._rangePoints[i + 1];\r\n\t\t\tlet idx = binarySearchBounds.eq(segments, start);\r\n\t\t\trangeStartIndices.push(idx);\r\n\t\t\tdo {\r\n\t\t\t\tparallelism[idx]++;\r\n\t\t\t\tidx++;\r\n\t\t\t} while (segments[idx] < end);\r\n\t\t}\r\n\t\tfor (let i = 0; i < this._rangeCallbacks.length; i++) {\r\n\t\t\tconst start = this._rangePoints[i * 2];\r\n\t\t\tconst end = this._rangePoints[i * 2 + 1];\r\n\t\t\tlet idx = rangeStartIndices[i];\r\n\t\t\tlet sum = 0;\r\n\t\t\tlet totalDuration = 0;\r\n\t\t\tlet current = start;\r\n\t\t\tdo {\r\n\t\t\t\tconst p = parallelism[idx];\r\n\t\t\t\tidx++;\r\n\t\t\t\tconst duration = segments[idx] - current;\r\n\t\t\t\ttotalDuration += duration;\r\n\t\t\t\tcurrent = segments[idx];\r\n\t\t\t\tsum += p * duration;\r\n\t\t\t} while (current < end);\r\n\t\t\tthis._rangeCallbacks[i](sum / totalDuration);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nmodule.exports = ParallelismFactorCalculator;\r\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ,MAAMA,kBAAkB,GAAGC,OAAO,CAAC,4BAA4B,CAAC;AAEhE,MAAMC,2BAA2B,CAAC;EACjCC,WAAW,GAAG;IACb,IAAI,CAACC,YAAY,GAAG,EAAE;IACtB,IAAI,CAACC,eAAe,GAAG,EAAE;EAC1B;EAEAC,KAAK,CAACC,KAAK,EAAEC,GAAG,EAAEC,QAAQ,EAAE;IAC3B,IAAIF,KAAK,KAAKC,GAAG,EAAE,OAAOC,QAAQ,CAAC,CAAC,CAAC;IACrC,IAAI,CAACL,YAAY,CAACM,IAAI,CAACH,KAAK,CAAC;IAC7B,IAAI,CAACH,YAAY,CAACM,IAAI,CAACF,GAAG,CAAC;IAC3B,IAAI,CAACH,eAAe,CAACK,IAAI,CAACD,QAAQ,CAAC;EACpC;EAEAE,SAAS,GAAG;IACX,MAAMC,QAAQ,GAAGC,KAAK,CAACC,IAAI,CAAC,IAAIC,GAAG,CAAC,IAAI,CAACX,YAAY,CAAC,CAAC,CAACY,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KACjED,CAAC,GAAGC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CACd;IACD,MAAMC,WAAW,GAAGP,QAAQ,CAACQ,GAAG,CAAC,MAAM,CAAC,CAAC;IACzC,MAAMC,iBAAiB,GAAG,EAAE;IAC5B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAAClB,YAAY,CAACmB,MAAM,EAAED,CAAC,IAAI,CAAC,EAAE;MACrD,MAAMf,KAAK,GAAG,IAAI,CAACH,YAAY,CAACkB,CAAC,CAAC;MAClC,MAAMd,GAAG,GAAG,IAAI,CAACJ,YAAY,CAACkB,CAAC,GAAG,CAAC,CAAC;MACpC,IAAIE,GAAG,GAAGxB,kBAAkB,CAACyB,EAAE,CAACb,QAAQ,EAAEL,KAAK,CAAC;MAChDc,iBAAiB,CAACX,IAAI,CAACc,GAAG,CAAC;MAC3B,GAAG;QACFL,WAAW,CAACK,GAAG,CAAC,EAAE;QAClBA,GAAG,EAAE;MACN,CAAC,QAAQZ,QAAQ,CAACY,GAAG,CAAC,GAAGhB,GAAG;IAC7B;IACA,KAAK,IAAIc,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACjB,eAAe,CAACkB,MAAM,EAAED,CAAC,EAAE,EAAE;MACrD,MAAMf,KAAK,GAAG,IAAI,CAACH,YAAY,CAACkB,CAAC,GAAG,CAAC,CAAC;MACtC,MAAMd,GAAG,GAAG,IAAI,CAACJ,YAAY,CAACkB,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;MACxC,IAAIE,GAAG,GAAGH,iBAAiB,CAACC,CAAC,CAAC;MAC9B,IAAII,GAAG,GAAG,CAAC;MACX,IAAIC,aAAa,GAAG,CAAC;MACrB,IAAIC,OAAO,GAAGrB,KAAK;MACnB,GAAG;QACF,MAAMsB,CAAC,GAAGV,WAAW,CAACK,GAAG,CAAC;QAC1BA,GAAG,EAAE;QACL,MAAMM,QAAQ,GAAGlB,QAAQ,CAACY,GAAG,CAAC,GAAGI,OAAO;QACxCD,aAAa,IAAIG,QAAQ;QACzBF,OAAO,GAAGhB,QAAQ,CAACY,GAAG,CAAC;QACvBE,GAAG,IAAIG,CAAC,GAAGC,QAAQ;MACpB,CAAC,QAAQF,OAAO,GAAGpB,GAAG;MACtB,IAAI,CAACH,eAAe,CAACiB,CAAC,CAAC,CAACI,GAAG,GAAGC,aAAa,CAAC;IAC7C;EACD;AACD;AAEAI,MAAM,CAACC,OAAO,GAAG9B,2BAA2B"},"metadata":{},"sourceType":"script","externalDependencies":[]}