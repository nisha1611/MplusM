{"ast":null,"code":"import { alphabetByEncoding, bitsPerByte, bitsPerLetter } from \"./constants.browser\";\nexport const fromBase64 = input => {\n  let totalByteLength = input.length / 4 * 3;\n  if (input.slice(-2) === \"==\") {\n    totalByteLength -= 2;\n  } else if (input.slice(-1) === \"=\") {\n    totalByteLength--;\n  }\n  const out = new ArrayBuffer(totalByteLength);\n  const dataView = new DataView(out);\n  for (let i = 0; i < input.length; i += 4) {\n    let bits = 0;\n    let bitLength = 0;\n    for (let j = i, limit = i + 3; j <= limit; j++) {\n      if (input[j] !== \"=\") {\n        if (!(input[j] in alphabetByEncoding)) {\n          throw new TypeError(`Invalid character ${input[j]} in base64 string.`);\n        }\n        bits |= alphabetByEncoding[input[j]] << (limit - j) * bitsPerLetter;\n        bitLength += bitsPerLetter;\n      } else {\n        bits >>= bitsPerLetter;\n      }\n    }\n    const chunkOffset = i / 4 * 3;\n    bits >>= bitLength % bitsPerByte;\n    const byteLength = Math.floor(bitLength / bitsPerByte);\n    for (let k = 0; k < byteLength; k++) {\n      const offset = (byteLength - k - 1) * bitsPerByte;\n      dataView.setUint8(chunkOffset + k, (bits & 255 << offset) >> offset);\n    }\n  }\n  return new Uint8Array(out);\n};","map":{"version":3,"names":["alphabetByEncoding","bitsPerByte","bitsPerLetter","fromBase64","input","totalByteLength","length","slice","out","ArrayBuffer","dataView","DataView","i","bits","bitLength","j","limit","TypeError","chunkOffset","byteLength","Math","floor","k","offset","setUint8","Uint8Array"],"sources":["C:/Users/91930/Desktop/Github projects/Pharmacy Demo/back-end/node_modules/@aws-sdk/util-base64/dist-es/fromBase64.browser.js"],"sourcesContent":["import { alphabetByEncoding, bitsPerByte, bitsPerLetter } from \"./constants.browser\";\r\nexport const fromBase64 = (input) => {\r\n    let totalByteLength = (input.length / 4) * 3;\r\n    if (input.slice(-2) === \"==\") {\r\n        totalByteLength -= 2;\r\n    }\r\n    else if (input.slice(-1) === \"=\") {\r\n        totalByteLength--;\r\n    }\r\n    const out = new ArrayBuffer(totalByteLength);\r\n    const dataView = new DataView(out);\r\n    for (let i = 0; i < input.length; i += 4) {\r\n        let bits = 0;\r\n        let bitLength = 0;\r\n        for (let j = i, limit = i + 3; j <= limit; j++) {\r\n            if (input[j] !== \"=\") {\r\n                if (!(input[j] in alphabetByEncoding)) {\r\n                    throw new TypeError(`Invalid character ${input[j]} in base64 string.`);\r\n                }\r\n                bits |= alphabetByEncoding[input[j]] << ((limit - j) * bitsPerLetter);\r\n                bitLength += bitsPerLetter;\r\n            }\r\n            else {\r\n                bits >>= bitsPerLetter;\r\n            }\r\n        }\r\n        const chunkOffset = (i / 4) * 3;\r\n        bits >>= bitLength % bitsPerByte;\r\n        const byteLength = Math.floor(bitLength / bitsPerByte);\r\n        for (let k = 0; k < byteLength; k++) {\r\n            const offset = (byteLength - k - 1) * bitsPerByte;\r\n            dataView.setUint8(chunkOffset + k, (bits & (255 << offset)) >> offset);\r\n        }\r\n    }\r\n    return new Uint8Array(out);\r\n};\r\n"],"mappings":"AAAA,SAASA,kBAAkB,EAAEC,WAAW,EAAEC,aAAa,QAAQ,qBAAqB;AACpF,OAAO,MAAMC,UAAU,GAAIC,KAAK,IAAK;EACjC,IAAIC,eAAe,GAAID,KAAK,CAACE,MAAM,GAAG,CAAC,GAAI,CAAC;EAC5C,IAAIF,KAAK,CAACG,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,IAAI,EAAE;IAC1BF,eAAe,IAAI,CAAC;EACxB,CAAC,MACI,IAAID,KAAK,CAACG,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;IAC9BF,eAAe,EAAE;EACrB;EACA,MAAMG,GAAG,GAAG,IAAIC,WAAW,CAACJ,eAAe,CAAC;EAC5C,MAAMK,QAAQ,GAAG,IAAIC,QAAQ,CAACH,GAAG,CAAC;EAClC,KAAK,IAAII,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGR,KAAK,CAACE,MAAM,EAAEM,CAAC,IAAI,CAAC,EAAE;IACtC,IAAIC,IAAI,GAAG,CAAC;IACZ,IAAIC,SAAS,GAAG,CAAC;IACjB,KAAK,IAAIC,CAAC,GAAGH,CAAC,EAAEI,KAAK,GAAGJ,CAAC,GAAG,CAAC,EAAEG,CAAC,IAAIC,KAAK,EAAED,CAAC,EAAE,EAAE;MAC5C,IAAIX,KAAK,CAACW,CAAC,CAAC,KAAK,GAAG,EAAE;QAClB,IAAI,EAAEX,KAAK,CAACW,CAAC,CAAC,IAAIf,kBAAkB,CAAC,EAAE;UACnC,MAAM,IAAIiB,SAAS,CAAE,qBAAoBb,KAAK,CAACW,CAAC,CAAE,oBAAmB,CAAC;QAC1E;QACAF,IAAI,IAAIb,kBAAkB,CAACI,KAAK,CAACW,CAAC,CAAC,CAAC,IAAK,CAACC,KAAK,GAAGD,CAAC,IAAIb,aAAc;QACrEY,SAAS,IAAIZ,aAAa;MAC9B,CAAC,MACI;QACDW,IAAI,KAAKX,aAAa;MAC1B;IACJ;IACA,MAAMgB,WAAW,GAAIN,CAAC,GAAG,CAAC,GAAI,CAAC;IAC/BC,IAAI,KAAKC,SAAS,GAAGb,WAAW;IAChC,MAAMkB,UAAU,GAAGC,IAAI,CAACC,KAAK,CAACP,SAAS,GAAGb,WAAW,CAAC;IACtD,KAAK,IAAIqB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,UAAU,EAAEG,CAAC,EAAE,EAAE;MACjC,MAAMC,MAAM,GAAG,CAACJ,UAAU,GAAGG,CAAC,GAAG,CAAC,IAAIrB,WAAW;MACjDS,QAAQ,CAACc,QAAQ,CAACN,WAAW,GAAGI,CAAC,EAAE,CAACT,IAAI,GAAI,GAAG,IAAIU,MAAO,KAAKA,MAAM,CAAC;IAC1E;EACJ;EACA,OAAO,IAAIE,UAAU,CAACjB,GAAG,CAAC;AAC9B,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}