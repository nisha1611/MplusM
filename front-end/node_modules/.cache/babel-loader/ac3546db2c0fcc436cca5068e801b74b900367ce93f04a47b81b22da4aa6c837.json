{"ast":null,"code":"import { EndpointError } from \"../types\";\nexport const getAttrPathList = path => {\n  const parts = path.split(\".\");\n  const pathList = [];\n  for (const part of parts) {\n    const squareBracketIndex = part.indexOf(\"[\");\n    if (squareBracketIndex !== -1) {\n      if (part.indexOf(\"]\") !== part.length - 1) {\n        throw new EndpointError(`Path: '${path}' does not end with ']'`);\n      }\n      const arrayIndex = part.slice(squareBracketIndex + 1, -1);\n      if (Number.isNaN(parseInt(arrayIndex))) {\n        throw new EndpointError(`Invalid array index: '${arrayIndex}' in path: '${path}'`);\n      }\n      if (squareBracketIndex !== 0) {\n        pathList.push(part.slice(0, squareBracketIndex));\n      }\n      pathList.push(arrayIndex);\n    } else {\n      pathList.push(part);\n    }\n  }\n  return pathList;\n};","map":{"version":3,"names":["EndpointError","getAttrPathList","path","parts","split","pathList","part","squareBracketIndex","indexOf","length","arrayIndex","slice","Number","isNaN","parseInt","push"],"sources":["C:/Users/91930/Desktop/Github projects/Pharmacy Demo/back-end/node_modules/@aws-sdk/util-endpoints/dist-es/lib/getAttrPathList.js"],"sourcesContent":["import { EndpointError } from \"../types\";\r\nexport const getAttrPathList = (path) => {\r\n    const parts = path.split(\".\");\r\n    const pathList = [];\r\n    for (const part of parts) {\r\n        const squareBracketIndex = part.indexOf(\"[\");\r\n        if (squareBracketIndex !== -1) {\r\n            if (part.indexOf(\"]\") !== part.length - 1) {\r\n                throw new EndpointError(`Path: '${path}' does not end with ']'`);\r\n            }\r\n            const arrayIndex = part.slice(squareBracketIndex + 1, -1);\r\n            if (Number.isNaN(parseInt(arrayIndex))) {\r\n                throw new EndpointError(`Invalid array index: '${arrayIndex}' in path: '${path}'`);\r\n            }\r\n            if (squareBracketIndex !== 0) {\r\n                pathList.push(part.slice(0, squareBracketIndex));\r\n            }\r\n            pathList.push(arrayIndex);\r\n        }\r\n        else {\r\n            pathList.push(part);\r\n        }\r\n    }\r\n    return pathList;\r\n};\r\n"],"mappings":"AAAA,SAASA,aAAa,QAAQ,UAAU;AACxC,OAAO,MAAMC,eAAe,GAAIC,IAAI,IAAK;EACrC,MAAMC,KAAK,GAAGD,IAAI,CAACE,KAAK,CAAC,GAAG,CAAC;EAC7B,MAAMC,QAAQ,GAAG,EAAE;EACnB,KAAK,MAAMC,IAAI,IAAIH,KAAK,EAAE;IACtB,MAAMI,kBAAkB,GAAGD,IAAI,CAACE,OAAO,CAAC,GAAG,CAAC;IAC5C,IAAID,kBAAkB,KAAK,CAAC,CAAC,EAAE;MAC3B,IAAID,IAAI,CAACE,OAAO,CAAC,GAAG,CAAC,KAAKF,IAAI,CAACG,MAAM,GAAG,CAAC,EAAE;QACvC,MAAM,IAAIT,aAAa,CAAE,UAASE,IAAK,yBAAwB,CAAC;MACpE;MACA,MAAMQ,UAAU,GAAGJ,IAAI,CAACK,KAAK,CAACJ,kBAAkB,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC;MACzD,IAAIK,MAAM,CAACC,KAAK,CAACC,QAAQ,CAACJ,UAAU,CAAC,CAAC,EAAE;QACpC,MAAM,IAAIV,aAAa,CAAE,yBAAwBU,UAAW,eAAcR,IAAK,GAAE,CAAC;MACtF;MACA,IAAIK,kBAAkB,KAAK,CAAC,EAAE;QAC1BF,QAAQ,CAACU,IAAI,CAACT,IAAI,CAACK,KAAK,CAAC,CAAC,EAAEJ,kBAAkB,CAAC,CAAC;MACpD;MACAF,QAAQ,CAACU,IAAI,CAACL,UAAU,CAAC;IAC7B,CAAC,MACI;MACDL,QAAQ,CAACU,IAAI,CAACT,IAAI,CAAC;IACvB;EACJ;EACA,OAAOD,QAAQ;AACnB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}