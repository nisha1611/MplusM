{"ast":null,"code":"import browserParsersList from './parser-browsers.js';\nimport osParsersList from './parser-os.js';\nimport platformParsersList from './parser-platforms.js';\nimport enginesParsersList from './parser-engines.js';\nimport Utils from './utils.js';\n\n/**\r\n * The main class that arranges the whole parsing process.\r\n */\nclass Parser {\n  /**\r\n   * Create instance of Parser\r\n   *\r\n   * @param {String} UA User-Agent string\r\n   * @param {Boolean} [skipParsing=false] parser can skip parsing in purpose of performance\r\n   * improvements if you need to make a more particular parsing\r\n   * like {@link Parser#parseBrowser} or {@link Parser#parsePlatform}\r\n   *\r\n   * @throw {Error} in case of empty UA String\r\n   *\r\n   * @constructor\r\n   */\n  constructor(UA) {\n    let skipParsing = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    if (UA === void 0 || UA === null || UA === '') {\n      throw new Error(\"UserAgent parameter can't be empty\");\n    }\n    this._ua = UA;\n\n    /**\r\n     * @typedef ParsedResult\r\n     * @property {Object} browser\r\n     * @property {String|undefined} [browser.name]\r\n     * Browser name, like `\"Chrome\"` or `\"Internet Explorer\"`\r\n     * @property {String|undefined} [browser.version] Browser version as a String `\"12.01.45334.10\"`\r\n     * @property {Object} os\r\n     * @property {String|undefined} [os.name] OS name, like `\"Windows\"` or `\"macOS\"`\r\n     * @property {String|undefined} [os.version] OS version, like `\"NT 5.1\"` or `\"10.11.1\"`\r\n     * @property {String|undefined} [os.versionName] OS name, like `\"XP\"` or `\"High Sierra\"`\r\n     * @property {Object} platform\r\n     * @property {String|undefined} [platform.type]\r\n     * platform type, can be either `\"desktop\"`, `\"tablet\"` or `\"mobile\"`\r\n     * @property {String|undefined} [platform.vendor] Vendor of the device,\r\n     * like `\"Apple\"` or `\"Samsung\"`\r\n     * @property {String|undefined} [platform.model] Device model,\r\n     * like `\"iPhone\"` or `\"Kindle Fire HD 7\"`\r\n     * @property {Object} engine\r\n     * @property {String|undefined} [engine.name]\r\n     * Can be any of this: `WebKit`, `Blink`, `Gecko`, `Trident`, `Presto`, `EdgeHTML`\r\n     * @property {String|undefined} [engine.version] String version of the engine\r\n     */\n    this.parsedResult = {};\n    if (skipParsing !== true) {\n      this.parse();\n    }\n  }\n\n  /**\r\n   * Get UserAgent string of current Parser instance\r\n   * @return {String} User-Agent String of the current <Parser> object\r\n   *\r\n   * @public\r\n   */\n  getUA() {\n    return this._ua;\n  }\n\n  /**\r\n   * Test a UA string for a regexp\r\n   * @param {RegExp} regex\r\n   * @return {Boolean}\r\n   */\n  test(regex) {\n    return regex.test(this._ua);\n  }\n\n  /**\r\n   * Get parsed browser object\r\n   * @return {Object}\r\n   */\n  parseBrowser() {\n    this.parsedResult.browser = {};\n    const browserDescriptor = Utils.find(browserParsersList, _browser => {\n      if (typeof _browser.test === 'function') {\n        return _browser.test(this);\n      }\n      if (_browser.test instanceof Array) {\n        return _browser.test.some(condition => this.test(condition));\n      }\n      throw new Error(\"Browser's test function is not valid\");\n    });\n    if (browserDescriptor) {\n      this.parsedResult.browser = browserDescriptor.describe(this.getUA());\n    }\n    return this.parsedResult.browser;\n  }\n\n  /**\r\n   * Get parsed browser object\r\n   * @return {Object}\r\n   *\r\n   * @public\r\n   */\n  getBrowser() {\n    if (this.parsedResult.browser) {\n      return this.parsedResult.browser;\n    }\n    return this.parseBrowser();\n  }\n\n  /**\r\n   * Get browser's name\r\n   * @return {String} Browser's name or an empty string\r\n   *\r\n   * @public\r\n   */\n  getBrowserName(toLowerCase) {\n    if (toLowerCase) {\n      return String(this.getBrowser().name).toLowerCase() || '';\n    }\n    return this.getBrowser().name || '';\n  }\n\n  /**\r\n   * Get browser's version\r\n   * @return {String} version of browser\r\n   *\r\n   * @public\r\n   */\n  getBrowserVersion() {\n    return this.getBrowser().version;\n  }\n\n  /**\r\n   * Get OS\r\n   * @return {Object}\r\n   *\r\n   * @example\r\n   * this.getOS();\r\n   * {\r\n   *   name: 'macOS',\r\n   *   version: '10.11.12'\r\n   * }\r\n   */\n  getOS() {\n    if (this.parsedResult.os) {\n      return this.parsedResult.os;\n    }\n    return this.parseOS();\n  }\n\n  /**\r\n   * Parse OS and save it to this.parsedResult.os\r\n   * @return {*|{}}\r\n   */\n  parseOS() {\n    this.parsedResult.os = {};\n    const os = Utils.find(osParsersList, _os => {\n      if (typeof _os.test === 'function') {\n        return _os.test(this);\n      }\n      if (_os.test instanceof Array) {\n        return _os.test.some(condition => this.test(condition));\n      }\n      throw new Error(\"Browser's test function is not valid\");\n    });\n    if (os) {\n      this.parsedResult.os = os.describe(this.getUA());\n    }\n    return this.parsedResult.os;\n  }\n\n  /**\r\n   * Get OS name\r\n   * @param {Boolean} [toLowerCase] return lower-cased value\r\n   * @return {String} name of the OS â€” macOS, Windows, Linux, etc.\r\n   */\n  getOSName(toLowerCase) {\n    const {\n      name\n    } = this.getOS();\n    if (toLowerCase) {\n      return String(name).toLowerCase() || '';\n    }\n    return name || '';\n  }\n\n  /**\r\n   * Get OS version\r\n   * @return {String} full version with dots ('10.11.12', '5.6', etc)\r\n   */\n  getOSVersion() {\n    return this.getOS().version;\n  }\n\n  /**\r\n   * Get parsed platform\r\n   * @return {{}}\r\n   */\n  getPlatform() {\n    if (this.parsedResult.platform) {\n      return this.parsedResult.platform;\n    }\n    return this.parsePlatform();\n  }\n\n  /**\r\n   * Get platform name\r\n   * @param {Boolean} [toLowerCase=false]\r\n   * @return {*}\r\n   */\n  getPlatformType() {\n    let toLowerCase = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    const {\n      type\n    } = this.getPlatform();\n    if (toLowerCase) {\n      return String(type).toLowerCase() || '';\n    }\n    return type || '';\n  }\n\n  /**\r\n   * Get parsed platform\r\n   * @return {{}}\r\n   */\n  parsePlatform() {\n    this.parsedResult.platform = {};\n    const platform = Utils.find(platformParsersList, _platform => {\n      if (typeof _platform.test === 'function') {\n        return _platform.test(this);\n      }\n      if (_platform.test instanceof Array) {\n        return _platform.test.some(condition => this.test(condition));\n      }\n      throw new Error(\"Browser's test function is not valid\");\n    });\n    if (platform) {\n      this.parsedResult.platform = platform.describe(this.getUA());\n    }\n    return this.parsedResult.platform;\n  }\n\n  /**\r\n   * Get parsed engine\r\n   * @return {{}}\r\n   */\n  getEngine() {\n    if (this.parsedResult.engine) {\n      return this.parsedResult.engine;\n    }\n    return this.parseEngine();\n  }\n\n  /**\r\n   * Get engines's name\r\n   * @return {String} Engines's name or an empty string\r\n   *\r\n   * @public\r\n   */\n  getEngineName(toLowerCase) {\n    if (toLowerCase) {\n      return String(this.getEngine().name).toLowerCase() || '';\n    }\n    return this.getEngine().name || '';\n  }\n\n  /**\r\n   * Get parsed platform\r\n   * @return {{}}\r\n   */\n  parseEngine() {\n    this.parsedResult.engine = {};\n    const engine = Utils.find(enginesParsersList, _engine => {\n      if (typeof _engine.test === 'function') {\n        return _engine.test(this);\n      }\n      if (_engine.test instanceof Array) {\n        return _engine.test.some(condition => this.test(condition));\n      }\n      throw new Error(\"Browser's test function is not valid\");\n    });\n    if (engine) {\n      this.parsedResult.engine = engine.describe(this.getUA());\n    }\n    return this.parsedResult.engine;\n  }\n\n  /**\r\n   * Parse full information about the browser\r\n   * @returns {Parser}\r\n   */\n  parse() {\n    this.parseBrowser();\n    this.parseOS();\n    this.parsePlatform();\n    this.parseEngine();\n    return this;\n  }\n\n  /**\r\n   * Get parsed result\r\n   * @return {ParsedResult}\r\n   */\n  getResult() {\n    return Utils.assign({}, this.parsedResult);\n  }\n\n  /**\r\n   * Check if parsed browser matches certain conditions\r\n   *\r\n   * @param {Object} checkTree It's one or two layered object,\r\n   * which can include a platform or an OS on the first layer\r\n   * and should have browsers specs on the bottom-laying layer\r\n   *\r\n   * @returns {Boolean|undefined} Whether the browser satisfies the set conditions or not.\r\n   * Returns `undefined` when the browser is no described in the checkTree object.\r\n   *\r\n   * @example\r\n   * const browser = Bowser.getParser(window.navigator.userAgent);\r\n   * if (browser.satisfies({chrome: '>118.01.1322' }))\r\n   * // or with os\r\n   * if (browser.satisfies({windows: { chrome: '>118.01.1322' } }))\r\n   * // or with platforms\r\n   * if (browser.satisfies({desktop: { chrome: '>118.01.1322' } }))\r\n   */\n  satisfies(checkTree) {\n    const platformsAndOSes = {};\n    let platformsAndOSCounter = 0;\n    const browsers = {};\n    let browsersCounter = 0;\n    const allDefinitions = Object.keys(checkTree);\n    allDefinitions.forEach(key => {\n      const currentDefinition = checkTree[key];\n      if (typeof currentDefinition === 'string') {\n        browsers[key] = currentDefinition;\n        browsersCounter += 1;\n      } else if (typeof currentDefinition === 'object') {\n        platformsAndOSes[key] = currentDefinition;\n        platformsAndOSCounter += 1;\n      }\n    });\n    if (platformsAndOSCounter > 0) {\n      const platformsAndOSNames = Object.keys(platformsAndOSes);\n      const OSMatchingDefinition = Utils.find(platformsAndOSNames, name => this.isOS(name));\n      if (OSMatchingDefinition) {\n        const osResult = this.satisfies(platformsAndOSes[OSMatchingDefinition]);\n        if (osResult !== void 0) {\n          return osResult;\n        }\n      }\n      const platformMatchingDefinition = Utils.find(platformsAndOSNames, name => this.isPlatform(name));\n      if (platformMatchingDefinition) {\n        const platformResult = this.satisfies(platformsAndOSes[platformMatchingDefinition]);\n        if (platformResult !== void 0) {\n          return platformResult;\n        }\n      }\n    }\n    if (browsersCounter > 0) {\n      const browserNames = Object.keys(browsers);\n      const matchingDefinition = Utils.find(browserNames, name => this.isBrowser(name, true));\n      if (matchingDefinition !== void 0) {\n        return this.compareVersion(browsers[matchingDefinition]);\n      }\n    }\n    return undefined;\n  }\n\n  /**\r\n   * Check if the browser name equals the passed string\r\n   * @param browserName The string to compare with the browser name\r\n   * @param [includingAlias=false] The flag showing whether alias will be included into comparison\r\n   * @returns {boolean}\r\n   */\n  isBrowser(browserName) {\n    let includingAlias = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    const defaultBrowserName = this.getBrowserName().toLowerCase();\n    let browserNameLower = browserName.toLowerCase();\n    const alias = Utils.getBrowserTypeByAlias(browserNameLower);\n    if (includingAlias && alias) {\n      browserNameLower = alias.toLowerCase();\n    }\n    return browserNameLower === defaultBrowserName;\n  }\n  compareVersion(version) {\n    let expectedResults = [0];\n    let comparableVersion = version;\n    let isLoose = false;\n    const currentBrowserVersion = this.getBrowserVersion();\n    if (typeof currentBrowserVersion !== 'string') {\n      return void 0;\n    }\n    if (version[0] === '>' || version[0] === '<') {\n      comparableVersion = version.substr(1);\n      if (version[1] === '=') {\n        isLoose = true;\n        comparableVersion = version.substr(2);\n      } else {\n        expectedResults = [];\n      }\n      if (version[0] === '>') {\n        expectedResults.push(1);\n      } else {\n        expectedResults.push(-1);\n      }\n    } else if (version[0] === '=') {\n      comparableVersion = version.substr(1);\n    } else if (version[0] === '~') {\n      isLoose = true;\n      comparableVersion = version.substr(1);\n    }\n    return expectedResults.indexOf(Utils.compareVersions(currentBrowserVersion, comparableVersion, isLoose)) > -1;\n  }\n  isOS(osName) {\n    return this.getOSName(true) === String(osName).toLowerCase();\n  }\n  isPlatform(platformType) {\n    return this.getPlatformType(true) === String(platformType).toLowerCase();\n  }\n  isEngine(engineName) {\n    return this.getEngineName(true) === String(engineName).toLowerCase();\n  }\n\n  /**\r\n   * Is anything? Check if the browser is called \"anything\",\r\n   * the OS called \"anything\" or the platform called \"anything\"\r\n   * @param {String} anything\r\n   * @param [includingAlias=false] The flag showing whether alias will be included into comparison\r\n   * @returns {Boolean}\r\n   */\n  is(anything) {\n    let includingAlias = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    return this.isBrowser(anything, includingAlias) || this.isOS(anything) || this.isPlatform(anything);\n  }\n\n  /**\r\n   * Check if any of the given values satisfies this.is(anything)\r\n   * @param {String[]} anythings\r\n   * @returns {Boolean}\r\n   */\n  some() {\n    let anythings = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    return anythings.some(anything => this.is(anything));\n  }\n}\nexport default Parser;","map":{"version":3,"names":["browserParsersList","osParsersList","platformParsersList","enginesParsersList","Utils","Parser","constructor","UA","skipParsing","Error","_ua","parsedResult","parse","getUA","test","regex","parseBrowser","browser","browserDescriptor","find","_browser","Array","some","condition","describe","getBrowser","getBrowserName","toLowerCase","String","name","getBrowserVersion","version","getOS","os","parseOS","_os","getOSName","getOSVersion","getPlatform","platform","parsePlatform","getPlatformType","type","_platform","getEngine","engine","parseEngine","getEngineName","_engine","getResult","assign","satisfies","checkTree","platformsAndOSes","platformsAndOSCounter","browsers","browsersCounter","allDefinitions","Object","keys","forEach","key","currentDefinition","platformsAndOSNames","OSMatchingDefinition","isOS","osResult","platformMatchingDefinition","isPlatform","platformResult","browserNames","matchingDefinition","isBrowser","compareVersion","undefined","browserName","includingAlias","defaultBrowserName","browserNameLower","alias","getBrowserTypeByAlias","expectedResults","comparableVersion","isLoose","currentBrowserVersion","substr","push","indexOf","compareVersions","osName","platformType","isEngine","engineName","is","anything","anythings"],"sources":["C:/Users/91930/Desktop/Github projects/Pharmacy Demo/back-end/node_modules/bowser/src/parser.js"],"sourcesContent":["import browserParsersList from './parser-browsers.js';\r\nimport osParsersList from './parser-os.js';\r\nimport platformParsersList from './parser-platforms.js';\r\nimport enginesParsersList from './parser-engines.js';\r\nimport Utils from './utils.js';\r\n\r\n/**\r\n * The main class that arranges the whole parsing process.\r\n */\r\nclass Parser {\r\n  /**\r\n   * Create instance of Parser\r\n   *\r\n   * @param {String} UA User-Agent string\r\n   * @param {Boolean} [skipParsing=false] parser can skip parsing in purpose of performance\r\n   * improvements if you need to make a more particular parsing\r\n   * like {@link Parser#parseBrowser} or {@link Parser#parsePlatform}\r\n   *\r\n   * @throw {Error} in case of empty UA String\r\n   *\r\n   * @constructor\r\n   */\r\n  constructor(UA, skipParsing = false) {\r\n    if (UA === void (0) || UA === null || UA === '') {\r\n      throw new Error(\"UserAgent parameter can't be empty\");\r\n    }\r\n\r\n    this._ua = UA;\r\n\r\n    /**\r\n     * @typedef ParsedResult\r\n     * @property {Object} browser\r\n     * @property {String|undefined} [browser.name]\r\n     * Browser name, like `\"Chrome\"` or `\"Internet Explorer\"`\r\n     * @property {String|undefined} [browser.version] Browser version as a String `\"12.01.45334.10\"`\r\n     * @property {Object} os\r\n     * @property {String|undefined} [os.name] OS name, like `\"Windows\"` or `\"macOS\"`\r\n     * @property {String|undefined} [os.version] OS version, like `\"NT 5.1\"` or `\"10.11.1\"`\r\n     * @property {String|undefined} [os.versionName] OS name, like `\"XP\"` or `\"High Sierra\"`\r\n     * @property {Object} platform\r\n     * @property {String|undefined} [platform.type]\r\n     * platform type, can be either `\"desktop\"`, `\"tablet\"` or `\"mobile\"`\r\n     * @property {String|undefined} [platform.vendor] Vendor of the device,\r\n     * like `\"Apple\"` or `\"Samsung\"`\r\n     * @property {String|undefined} [platform.model] Device model,\r\n     * like `\"iPhone\"` or `\"Kindle Fire HD 7\"`\r\n     * @property {Object} engine\r\n     * @property {String|undefined} [engine.name]\r\n     * Can be any of this: `WebKit`, `Blink`, `Gecko`, `Trident`, `Presto`, `EdgeHTML`\r\n     * @property {String|undefined} [engine.version] String version of the engine\r\n     */\r\n    this.parsedResult = {};\r\n\r\n    if (skipParsing !== true) {\r\n      this.parse();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get UserAgent string of current Parser instance\r\n   * @return {String} User-Agent String of the current <Parser> object\r\n   *\r\n   * @public\r\n   */\r\n  getUA() {\r\n    return this._ua;\r\n  }\r\n\r\n  /**\r\n   * Test a UA string for a regexp\r\n   * @param {RegExp} regex\r\n   * @return {Boolean}\r\n   */\r\n  test(regex) {\r\n    return regex.test(this._ua);\r\n  }\r\n\r\n  /**\r\n   * Get parsed browser object\r\n   * @return {Object}\r\n   */\r\n  parseBrowser() {\r\n    this.parsedResult.browser = {};\r\n\r\n    const browserDescriptor = Utils.find(browserParsersList, (_browser) => {\r\n      if (typeof _browser.test === 'function') {\r\n        return _browser.test(this);\r\n      }\r\n\r\n      if (_browser.test instanceof Array) {\r\n        return _browser.test.some(condition => this.test(condition));\r\n      }\r\n\r\n      throw new Error(\"Browser's test function is not valid\");\r\n    });\r\n\r\n    if (browserDescriptor) {\r\n      this.parsedResult.browser = browserDescriptor.describe(this.getUA());\r\n    }\r\n\r\n    return this.parsedResult.browser;\r\n  }\r\n\r\n  /**\r\n   * Get parsed browser object\r\n   * @return {Object}\r\n   *\r\n   * @public\r\n   */\r\n  getBrowser() {\r\n    if (this.parsedResult.browser) {\r\n      return this.parsedResult.browser;\r\n    }\r\n\r\n    return this.parseBrowser();\r\n  }\r\n\r\n  /**\r\n   * Get browser's name\r\n   * @return {String} Browser's name or an empty string\r\n   *\r\n   * @public\r\n   */\r\n  getBrowserName(toLowerCase) {\r\n    if (toLowerCase) {\r\n      return String(this.getBrowser().name).toLowerCase() || '';\r\n    }\r\n    return this.getBrowser().name || '';\r\n  }\r\n\r\n\r\n  /**\r\n   * Get browser's version\r\n   * @return {String} version of browser\r\n   *\r\n   * @public\r\n   */\r\n  getBrowserVersion() {\r\n    return this.getBrowser().version;\r\n  }\r\n\r\n  /**\r\n   * Get OS\r\n   * @return {Object}\r\n   *\r\n   * @example\r\n   * this.getOS();\r\n   * {\r\n   *   name: 'macOS',\r\n   *   version: '10.11.12'\r\n   * }\r\n   */\r\n  getOS() {\r\n    if (this.parsedResult.os) {\r\n      return this.parsedResult.os;\r\n    }\r\n\r\n    return this.parseOS();\r\n  }\r\n\r\n  /**\r\n   * Parse OS and save it to this.parsedResult.os\r\n   * @return {*|{}}\r\n   */\r\n  parseOS() {\r\n    this.parsedResult.os = {};\r\n\r\n    const os = Utils.find(osParsersList, (_os) => {\r\n      if (typeof _os.test === 'function') {\r\n        return _os.test(this);\r\n      }\r\n\r\n      if (_os.test instanceof Array) {\r\n        return _os.test.some(condition => this.test(condition));\r\n      }\r\n\r\n      throw new Error(\"Browser's test function is not valid\");\r\n    });\r\n\r\n    if (os) {\r\n      this.parsedResult.os = os.describe(this.getUA());\r\n    }\r\n\r\n    return this.parsedResult.os;\r\n  }\r\n\r\n  /**\r\n   * Get OS name\r\n   * @param {Boolean} [toLowerCase] return lower-cased value\r\n   * @return {String} name of the OS â€” macOS, Windows, Linux, etc.\r\n   */\r\n  getOSName(toLowerCase) {\r\n    const { name } = this.getOS();\r\n\r\n    if (toLowerCase) {\r\n      return String(name).toLowerCase() || '';\r\n    }\r\n\r\n    return name || '';\r\n  }\r\n\r\n  /**\r\n   * Get OS version\r\n   * @return {String} full version with dots ('10.11.12', '5.6', etc)\r\n   */\r\n  getOSVersion() {\r\n    return this.getOS().version;\r\n  }\r\n\r\n  /**\r\n   * Get parsed platform\r\n   * @return {{}}\r\n   */\r\n  getPlatform() {\r\n    if (this.parsedResult.platform) {\r\n      return this.parsedResult.platform;\r\n    }\r\n\r\n    return this.parsePlatform();\r\n  }\r\n\r\n  /**\r\n   * Get platform name\r\n   * @param {Boolean} [toLowerCase=false]\r\n   * @return {*}\r\n   */\r\n  getPlatformType(toLowerCase = false) {\r\n    const { type } = this.getPlatform();\r\n\r\n    if (toLowerCase) {\r\n      return String(type).toLowerCase() || '';\r\n    }\r\n\r\n    return type || '';\r\n  }\r\n\r\n  /**\r\n   * Get parsed platform\r\n   * @return {{}}\r\n   */\r\n  parsePlatform() {\r\n    this.parsedResult.platform = {};\r\n\r\n    const platform = Utils.find(platformParsersList, (_platform) => {\r\n      if (typeof _platform.test === 'function') {\r\n        return _platform.test(this);\r\n      }\r\n\r\n      if (_platform.test instanceof Array) {\r\n        return _platform.test.some(condition => this.test(condition));\r\n      }\r\n\r\n      throw new Error(\"Browser's test function is not valid\");\r\n    });\r\n\r\n    if (platform) {\r\n      this.parsedResult.platform = platform.describe(this.getUA());\r\n    }\r\n\r\n    return this.parsedResult.platform;\r\n  }\r\n\r\n  /**\r\n   * Get parsed engine\r\n   * @return {{}}\r\n   */\r\n  getEngine() {\r\n    if (this.parsedResult.engine) {\r\n      return this.parsedResult.engine;\r\n    }\r\n\r\n    return this.parseEngine();\r\n  }\r\n\r\n  /**\r\n   * Get engines's name\r\n   * @return {String} Engines's name or an empty string\r\n   *\r\n   * @public\r\n   */\r\n  getEngineName(toLowerCase) {\r\n    if (toLowerCase) {\r\n      return String(this.getEngine().name).toLowerCase() || '';\r\n    }\r\n    return this.getEngine().name || '';\r\n  }\r\n\r\n  /**\r\n   * Get parsed platform\r\n   * @return {{}}\r\n   */\r\n  parseEngine() {\r\n    this.parsedResult.engine = {};\r\n\r\n    const engine = Utils.find(enginesParsersList, (_engine) => {\r\n      if (typeof _engine.test === 'function') {\r\n        return _engine.test(this);\r\n      }\r\n\r\n      if (_engine.test instanceof Array) {\r\n        return _engine.test.some(condition => this.test(condition));\r\n      }\r\n\r\n      throw new Error(\"Browser's test function is not valid\");\r\n    });\r\n\r\n    if (engine) {\r\n      this.parsedResult.engine = engine.describe(this.getUA());\r\n    }\r\n\r\n    return this.parsedResult.engine;\r\n  }\r\n\r\n  /**\r\n   * Parse full information about the browser\r\n   * @returns {Parser}\r\n   */\r\n  parse() {\r\n    this.parseBrowser();\r\n    this.parseOS();\r\n    this.parsePlatform();\r\n    this.parseEngine();\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Get parsed result\r\n   * @return {ParsedResult}\r\n   */\r\n  getResult() {\r\n    return Utils.assign({}, this.parsedResult);\r\n  }\r\n\r\n  /**\r\n   * Check if parsed browser matches certain conditions\r\n   *\r\n   * @param {Object} checkTree It's one or two layered object,\r\n   * which can include a platform or an OS on the first layer\r\n   * and should have browsers specs on the bottom-laying layer\r\n   *\r\n   * @returns {Boolean|undefined} Whether the browser satisfies the set conditions or not.\r\n   * Returns `undefined` when the browser is no described in the checkTree object.\r\n   *\r\n   * @example\r\n   * const browser = Bowser.getParser(window.navigator.userAgent);\r\n   * if (browser.satisfies({chrome: '>118.01.1322' }))\r\n   * // or with os\r\n   * if (browser.satisfies({windows: { chrome: '>118.01.1322' } }))\r\n   * // or with platforms\r\n   * if (browser.satisfies({desktop: { chrome: '>118.01.1322' } }))\r\n   */\r\n  satisfies(checkTree) {\r\n    const platformsAndOSes = {};\r\n    let platformsAndOSCounter = 0;\r\n    const browsers = {};\r\n    let browsersCounter = 0;\r\n\r\n    const allDefinitions = Object.keys(checkTree);\r\n\r\n    allDefinitions.forEach((key) => {\r\n      const currentDefinition = checkTree[key];\r\n      if (typeof currentDefinition === 'string') {\r\n        browsers[key] = currentDefinition;\r\n        browsersCounter += 1;\r\n      } else if (typeof currentDefinition === 'object') {\r\n        platformsAndOSes[key] = currentDefinition;\r\n        platformsAndOSCounter += 1;\r\n      }\r\n    });\r\n\r\n    if (platformsAndOSCounter > 0) {\r\n      const platformsAndOSNames = Object.keys(platformsAndOSes);\r\n      const OSMatchingDefinition = Utils.find(platformsAndOSNames, name => (this.isOS(name)));\r\n\r\n      if (OSMatchingDefinition) {\r\n        const osResult = this.satisfies(platformsAndOSes[OSMatchingDefinition]);\r\n\r\n        if (osResult !== void 0) {\r\n          return osResult;\r\n        }\r\n      }\r\n\r\n      const platformMatchingDefinition = Utils.find(\r\n        platformsAndOSNames,\r\n        name => (this.isPlatform(name)),\r\n      );\r\n      if (platformMatchingDefinition) {\r\n        const platformResult = this.satisfies(platformsAndOSes[platformMatchingDefinition]);\r\n\r\n        if (platformResult !== void 0) {\r\n          return platformResult;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (browsersCounter > 0) {\r\n      const browserNames = Object.keys(browsers);\r\n      const matchingDefinition = Utils.find(browserNames, name => (this.isBrowser(name, true)));\r\n\r\n      if (matchingDefinition !== void 0) {\r\n        return this.compareVersion(browsers[matchingDefinition]);\r\n      }\r\n    }\r\n\r\n    return undefined;\r\n  }\r\n\r\n  /**\r\n   * Check if the browser name equals the passed string\r\n   * @param browserName The string to compare with the browser name\r\n   * @param [includingAlias=false] The flag showing whether alias will be included into comparison\r\n   * @returns {boolean}\r\n   */\r\n  isBrowser(browserName, includingAlias = false) {\r\n    const defaultBrowserName = this.getBrowserName().toLowerCase();\r\n    let browserNameLower = browserName.toLowerCase();\r\n    const alias = Utils.getBrowserTypeByAlias(browserNameLower);\r\n\r\n    if (includingAlias && alias) {\r\n      browserNameLower = alias.toLowerCase();\r\n    }\r\n    return browserNameLower === defaultBrowserName;\r\n  }\r\n\r\n  compareVersion(version) {\r\n    let expectedResults = [0];\r\n    let comparableVersion = version;\r\n    let isLoose = false;\r\n\r\n    const currentBrowserVersion = this.getBrowserVersion();\r\n\r\n    if (typeof currentBrowserVersion !== 'string') {\r\n      return void 0;\r\n    }\r\n\r\n    if (version[0] === '>' || version[0] === '<') {\r\n      comparableVersion = version.substr(1);\r\n      if (version[1] === '=') {\r\n        isLoose = true;\r\n        comparableVersion = version.substr(2);\r\n      } else {\r\n        expectedResults = [];\r\n      }\r\n      if (version[0] === '>') {\r\n        expectedResults.push(1);\r\n      } else {\r\n        expectedResults.push(-1);\r\n      }\r\n    } else if (version[0] === '=') {\r\n      comparableVersion = version.substr(1);\r\n    } else if (version[0] === '~') {\r\n      isLoose = true;\r\n      comparableVersion = version.substr(1);\r\n    }\r\n\r\n    return expectedResults.indexOf(\r\n      Utils.compareVersions(currentBrowserVersion, comparableVersion, isLoose),\r\n    ) > -1;\r\n  }\r\n\r\n  isOS(osName) {\r\n    return this.getOSName(true) === String(osName).toLowerCase();\r\n  }\r\n\r\n  isPlatform(platformType) {\r\n    return this.getPlatformType(true) === String(platformType).toLowerCase();\r\n  }\r\n\r\n  isEngine(engineName) {\r\n    return this.getEngineName(true) === String(engineName).toLowerCase();\r\n  }\r\n\r\n  /**\r\n   * Is anything? Check if the browser is called \"anything\",\r\n   * the OS called \"anything\" or the platform called \"anything\"\r\n   * @param {String} anything\r\n   * @param [includingAlias=false] The flag showing whether alias will be included into comparison\r\n   * @returns {Boolean}\r\n   */\r\n  is(anything, includingAlias = false) {\r\n    return this.isBrowser(anything, includingAlias) || this.isOS(anything)\r\n      || this.isPlatform(anything);\r\n  }\r\n\r\n  /**\r\n   * Check if any of the given values satisfies this.is(anything)\r\n   * @param {String[]} anythings\r\n   * @returns {Boolean}\r\n   */\r\n  some(anythings = []) {\r\n    return anythings.some(anything => this.is(anything));\r\n  }\r\n}\r\n\r\nexport default Parser;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}