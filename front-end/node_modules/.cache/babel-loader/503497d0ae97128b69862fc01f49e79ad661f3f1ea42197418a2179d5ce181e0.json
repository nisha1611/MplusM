{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.evaluateRules = void 0;\nconst types_1 = require(\"../types\");\nconst evaluateEndpointRule_1 = require(\"./evaluateEndpointRule\");\nconst evaluateErrorRule_1 = require(\"./evaluateErrorRule\");\nconst evaluateTreeRule_1 = require(\"./evaluateTreeRule\");\nconst evaluateRules = (rules, options) => {\n  for (const rule of rules) {\n    if (rule.type === \"endpoint\") {\n      const endpointOrUndefined = (0, evaluateEndpointRule_1.evaluateEndpointRule)(rule, options);\n      if (endpointOrUndefined) {\n        return endpointOrUndefined;\n      }\n    } else if (rule.type === \"error\") {\n      (0, evaluateErrorRule_1.evaluateErrorRule)(rule, options);\n    } else if (rule.type === \"tree\") {\n      const endpointOrUndefined = (0, evaluateTreeRule_1.evaluateTreeRule)(rule, options);\n      if (endpointOrUndefined) {\n        return endpointOrUndefined;\n      }\n    } else {\n      throw new types_1.EndpointError(`Unknown endpoint rule: ${rule}`);\n    }\n  }\n  throw new types_1.EndpointError(`Rules evaluation failed`);\n};\nexports.evaluateRules = evaluateRules;","map":{"version":3,"names":["Object","defineProperty","exports","value","evaluateRules","types_1","require","evaluateEndpointRule_1","evaluateErrorRule_1","evaluateTreeRule_1","rules","options","rule","type","endpointOrUndefined","evaluateEndpointRule","evaluateErrorRule","evaluateTreeRule","EndpointError"],"sources":["C:/Users/91930/Desktop/Github projects/Pharmacy Demo/back-end/node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateRules.js"],"sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.evaluateRules = void 0;\r\nconst types_1 = require(\"../types\");\r\nconst evaluateEndpointRule_1 = require(\"./evaluateEndpointRule\");\r\nconst evaluateErrorRule_1 = require(\"./evaluateErrorRule\");\r\nconst evaluateTreeRule_1 = require(\"./evaluateTreeRule\");\r\nconst evaluateRules = (rules, options) => {\r\n    for (const rule of rules) {\r\n        if (rule.type === \"endpoint\") {\r\n            const endpointOrUndefined = (0, evaluateEndpointRule_1.evaluateEndpointRule)(rule, options);\r\n            if (endpointOrUndefined) {\r\n                return endpointOrUndefined;\r\n            }\r\n        }\r\n        else if (rule.type === \"error\") {\r\n            (0, evaluateErrorRule_1.evaluateErrorRule)(rule, options);\r\n        }\r\n        else if (rule.type === \"tree\") {\r\n            const endpointOrUndefined = (0, evaluateTreeRule_1.evaluateTreeRule)(rule, options);\r\n            if (endpointOrUndefined) {\r\n                return endpointOrUndefined;\r\n            }\r\n        }\r\n        else {\r\n            throw new types_1.EndpointError(`Unknown endpoint rule: ${rule}`);\r\n        }\r\n    }\r\n    throw new types_1.EndpointError(`Rules evaluation failed`);\r\n};\r\nexports.evaluateRules = evaluateRules;\r\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,aAAa,GAAG,KAAK,CAAC;AAC9B,MAAMC,OAAO,GAAGC,OAAO,CAAC,UAAU,CAAC;AACnC,MAAMC,sBAAsB,GAAGD,OAAO,CAAC,wBAAwB,CAAC;AAChE,MAAME,mBAAmB,GAAGF,OAAO,CAAC,qBAAqB,CAAC;AAC1D,MAAMG,kBAAkB,GAAGH,OAAO,CAAC,oBAAoB,CAAC;AACxD,MAAMF,aAAa,GAAG,CAACM,KAAK,EAAEC,OAAO,KAAK;EACtC,KAAK,MAAMC,IAAI,IAAIF,KAAK,EAAE;IACtB,IAAIE,IAAI,CAACC,IAAI,KAAK,UAAU,EAAE;MAC1B,MAAMC,mBAAmB,GAAG,CAAC,CAAC,EAAEP,sBAAsB,CAACQ,oBAAoB,EAAEH,IAAI,EAAED,OAAO,CAAC;MAC3F,IAAIG,mBAAmB,EAAE;QACrB,OAAOA,mBAAmB;MAC9B;IACJ,CAAC,MACI,IAAIF,IAAI,CAACC,IAAI,KAAK,OAAO,EAAE;MAC5B,CAAC,CAAC,EAAEL,mBAAmB,CAACQ,iBAAiB,EAAEJ,IAAI,EAAED,OAAO,CAAC;IAC7D,CAAC,MACI,IAAIC,IAAI,CAACC,IAAI,KAAK,MAAM,EAAE;MAC3B,MAAMC,mBAAmB,GAAG,CAAC,CAAC,EAAEL,kBAAkB,CAACQ,gBAAgB,EAAEL,IAAI,EAAED,OAAO,CAAC;MACnF,IAAIG,mBAAmB,EAAE;QACrB,OAAOA,mBAAmB;MAC9B;IACJ,CAAC,MACI;MACD,MAAM,IAAIT,OAAO,CAACa,aAAa,CAAE,0BAAyBN,IAAK,EAAC,CAAC;IACrE;EACJ;EACA,MAAM,IAAIP,OAAO,CAACa,aAAa,CAAE,yBAAwB,CAAC;AAC9D,CAAC;AACDhB,OAAO,CAACE,aAAa,GAAGA,aAAa"},"metadata":{},"sourceType":"script","externalDependencies":[]}