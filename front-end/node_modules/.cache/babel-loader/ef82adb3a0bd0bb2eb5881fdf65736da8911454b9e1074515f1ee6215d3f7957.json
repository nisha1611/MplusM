{"ast":null,"code":"/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Tobias Koppers @sokra\r\n*/\n\n\"use strict\";\n\nconst Dependency = require(\"../Dependency\");\nconst DependencyTemplate = require(\"../DependencyTemplate\");\n\n/** @typedef {import(\"webpack-sources\").ReplaceSource} ReplaceSource */\n/** @typedef {import(\"../Dependency\").TRANSITIVE} TRANSITIVE */\n/** @typedef {import(\"../DependencyTemplate\").DependencyTemplateContext} DependencyTemplateContext */\n\nclass NullDependency extends Dependency {\n  get type() {\n    return \"null\";\n  }\n\n  /**\r\n   * @returns {boolean | TRANSITIVE} true, when changes to the referenced module could affect the referencing module; TRANSITIVE, when changes to the referenced module could affect referencing modules of the referencing module\r\n   */\n  couldAffectReferencingModule() {\n    return false;\n  }\n}\nNullDependency.Template = class NullDependencyTemplate extends DependencyTemplate {\n  /**\r\n   * @param {Dependency} dependency the dependency for which the template should be applied\r\n   * @param {ReplaceSource} source the current replace source which can be modified\r\n   * @param {DependencyTemplateContext} templateContext the context object\r\n   * @returns {void}\r\n   */\n  apply(dependency, source, templateContext) {}\n};\nmodule.exports = NullDependency;","map":{"version":3,"names":["Dependency","require","DependencyTemplate","NullDependency","type","couldAffectReferencingModule","Template","NullDependencyTemplate","apply","dependency","source","templateContext","module","exports"],"sources":["C:/Users/91930/Desktop/Github projects/Pharmacy Demo/front-end/node_modules/webpack/lib/dependencies/NullDependency.js"],"sourcesContent":["/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Tobias Koppers @sokra\r\n*/\r\n\r\n\"use strict\";\r\n\r\nconst Dependency = require(\"../Dependency\");\r\nconst DependencyTemplate = require(\"../DependencyTemplate\");\r\n\r\n/** @typedef {import(\"webpack-sources\").ReplaceSource} ReplaceSource */\r\n/** @typedef {import(\"../Dependency\").TRANSITIVE} TRANSITIVE */\r\n/** @typedef {import(\"../DependencyTemplate\").DependencyTemplateContext} DependencyTemplateContext */\r\n\r\nclass NullDependency extends Dependency {\r\n\tget type() {\r\n\t\treturn \"null\";\r\n\t}\r\n\r\n\t/**\r\n\t * @returns {boolean | TRANSITIVE} true, when changes to the referenced module could affect the referencing module; TRANSITIVE, when changes to the referenced module could affect referencing modules of the referencing module\r\n\t */\r\n\tcouldAffectReferencingModule() {\r\n\t\treturn false;\r\n\t}\r\n}\r\n\r\nNullDependency.Template = class NullDependencyTemplate extends (\r\n\tDependencyTemplate\r\n) {\r\n\t/**\r\n\t * @param {Dependency} dependency the dependency for which the template should be applied\r\n\t * @param {ReplaceSource} source the current replace source which can be modified\r\n\t * @param {DependencyTemplateContext} templateContext the context object\r\n\t * @returns {void}\r\n\t */\r\n\tapply(dependency, source, templateContext) {}\r\n};\r\n\r\nmodule.exports = NullDependency;\r\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ,MAAMA,UAAU,GAAGC,OAAO,CAAC,eAAe,CAAC;AAC3C,MAAMC,kBAAkB,GAAGD,OAAO,CAAC,uBAAuB,CAAC;;AAE3D;AACA;AACA;;AAEA,MAAME,cAAc,SAASH,UAAU,CAAC;EACvC,IAAII,IAAI,GAAG;IACV,OAAO,MAAM;EACd;;EAEA;AACD;AACA;EACCC,4BAA4B,GAAG;IAC9B,OAAO,KAAK;EACb;AACD;AAEAF,cAAc,CAACG,QAAQ,GAAG,MAAMC,sBAAsB,SACrDL,kBAAkB,CACjB;EACD;AACD;AACA;AACA;AACA;AACA;EACCM,KAAK,CAACC,UAAU,EAAEC,MAAM,EAAEC,eAAe,EAAE,CAAC;AAC7C,CAAC;AAEDC,MAAM,CAACC,OAAO,GAAGV,cAAc"},"metadata":{},"sourceType":"script","externalDependencies":[]}