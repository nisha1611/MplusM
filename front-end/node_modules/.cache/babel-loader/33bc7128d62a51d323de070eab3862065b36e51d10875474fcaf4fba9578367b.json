{"ast":null,"code":"/*!\r\n * Module requirements.\r\n */\n\n'use strict';\n\nconst MongooseError = require('../error/index');\nconst SchemaDateOptions = require('../options/SchemaDateOptions');\nconst SchemaType = require('../schematype');\nconst castDate = require('../cast/date');\nconst getConstructorName = require('../helpers/getConstructorName');\nconst utils = require('../utils');\nconst CastError = SchemaType.CastError;\n\n/**\r\n * Date SchemaType constructor.\r\n *\r\n * @param {String} key\r\n * @param {Object} options\r\n * @inherits SchemaType\r\n * @api public\r\n */\n\nfunction SchemaDate(key, options) {\n  SchemaType.call(this, key, options, 'Date');\n}\n\n/**\r\n * This schema type's name, to defend against minifiers that mangle\r\n * function names.\r\n *\r\n * @api public\r\n */\nSchemaDate.schemaName = 'Date';\nSchemaDate.defaultOptions = {};\n\n/*!\r\n * Inherits from SchemaType.\r\n */\nSchemaDate.prototype = Object.create(SchemaType.prototype);\nSchemaDate.prototype.constructor = SchemaDate;\nSchemaDate.prototype.OptionsConstructor = SchemaDateOptions;\n\n/*!\r\n * ignore\r\n */\n\nSchemaDate._cast = castDate;\n\n/**\r\n * Sets a default option for all Date instances.\r\n *\r\n * #### Example:\r\n *\r\n *     // Make all dates have `required` of true by default.\r\n *     mongoose.Schema.Date.set('required', true);\r\n *\r\n *     const User = mongoose.model('User', new Schema({ test: Date }));\r\n *     new User({ }).validateSync().errors.test.message; // Path `test` is required.\r\n *\r\n * @param {String} option The option you'd like to set the value for\r\n * @param {Any} value value for option\r\n * @return {undefined}\r\n * @function set\r\n * @static\r\n * @api public\r\n */\n\nSchemaDate.set = SchemaType.set;\n\n/**\r\n * Get/set the function used to cast arbitrary values to dates.\r\n *\r\n * #### Example:\r\n *\r\n *     // Mongoose converts empty string '' into `null` for date types. You\r\n *     // can create a custom caster to disable it.\r\n *     const original = mongoose.Schema.Types.Date.cast();\r\n *     mongoose.Schema.Types.Date.cast(v => {\r\n *       assert.ok(v !== '');\r\n *       return original(v);\r\n *     });\r\n *\r\n *     // Or disable casting entirely\r\n *     mongoose.Schema.Types.Date.cast(false);\r\n *\r\n * @param {Function} caster\r\n * @return {Function}\r\n * @function get\r\n * @static\r\n * @api public\r\n */\n\nSchemaDate.cast = function cast(caster) {\n  if (arguments.length === 0) {\n    return this._cast;\n  }\n  if (caster === false) {\n    caster = this._defaultCaster;\n  }\n  this._cast = caster;\n  return this._cast;\n};\n\n/*!\r\n * ignore\r\n */\n\nSchemaDate._defaultCaster = v => {\n  if (v != null && !(v instanceof Date)) {\n    throw new Error();\n  }\n  return v;\n};\n\n/**\r\n * Declares a TTL index (rounded to the nearest second) for _Date_ types only.\r\n *\r\n * This sets the `expireAfterSeconds` index option available in MongoDB >= 2.1.2.\r\n * This index type is only compatible with Date types.\r\n *\r\n * #### Example:\r\n *\r\n *     // expire in 24 hours\r\n *     new Schema({ createdAt: { type: Date, expires: 60*60*24 }});\r\n *\r\n * `expires` utilizes the `ms` module from [guille](https://github.com/guille/) allowing us to use a friendlier syntax:\r\n *\r\n * #### Example:\r\n *\r\n *     // expire in 24 hours\r\n *     new Schema({ createdAt: { type: Date, expires: '24h' }});\r\n *\r\n *     // expire in 1.5 hours\r\n *     new Schema({ createdAt: { type: Date, expires: '1.5h' }});\r\n *\r\n *     // expire in 7 days\r\n *     const schema = new Schema({ createdAt: Date });\r\n *     schema.path('createdAt').expires('7d');\r\n *\r\n * @param {Number|String} when\r\n * @added 3.0.0\r\n * @return {SchemaType} this\r\n * @api public\r\n */\n\nSchemaDate.prototype.expires = function (when) {\n  if (getConstructorName(this._index) !== 'Object') {\n    this._index = {};\n  }\n  this._index.expires = when;\n  utils.expires(this._index);\n  return this;\n};\n\n/*!\r\n * ignore\r\n */\n\nSchemaDate._checkRequired = v => v instanceof Date;\n\n/**\r\n * Override the function the required validator uses to check whether a string\r\n * passes the `required` check.\r\n *\r\n * #### Example:\r\n *\r\n *     // Allow empty strings to pass `required` check\r\n *     mongoose.Schema.Types.String.checkRequired(v => v != null);\r\n *\r\n *     const M = mongoose.model({ str: { type: String, required: true } });\r\n *     new M({ str: '' }).validateSync(); // `null`, validation passes!\r\n *\r\n * @param {Function} fn\r\n * @return {Function}\r\n * @function checkRequired\r\n * @static\r\n * @api public\r\n */\n\nSchemaDate.checkRequired = SchemaType.checkRequired;\n\n/**\r\n * Check if the given value satisfies a required validator. To satisfy\r\n * a required validator, the given value must be an instance of `Date`.\r\n *\r\n * @param {Any} value\r\n * @param {Document} doc\r\n * @return {Boolean}\r\n * @api public\r\n */\n\nSchemaDate.prototype.checkRequired = function (value, doc) {\n  if (typeof value === 'object' && SchemaType._isRef(this, value, doc, true)) {\n    return value != null;\n  }\n\n  // `require('util').inherits()` does **not** copy static properties, and\n  // plugins like mongoose-float use `inherits()` for pre-ES6.\n  const _checkRequired = typeof this.constructor.checkRequired === 'function' ? this.constructor.checkRequired() : SchemaDate.checkRequired();\n  return _checkRequired(value);\n};\n\n/**\r\n * Sets a minimum date validator.\r\n *\r\n * #### Example:\r\n *\r\n *     const s = new Schema({ d: { type: Date, min: Date('1970-01-01') })\r\n *     const M = db.model('M', s)\r\n *     const m = new M({ d: Date('1969-12-31') })\r\n *     m.save(function (err) {\r\n *       console.error(err) // validator error\r\n *       m.d = Date('2014-12-08');\r\n *       m.save() // success\r\n *     })\r\n *\r\n *     // custom error messages\r\n *     // We can also use the special {MIN} token which will be replaced with the invalid value\r\n *     const min = [Date('1970-01-01'), 'The value of path `{PATH}` ({VALUE}) is beneath the limit ({MIN}).'];\r\n *     const schema = new Schema({ d: { type: Date, min: min })\r\n *     const M = mongoose.model('M', schema);\r\n *     const s= new M({ d: Date('1969-12-31') });\r\n *     s.validate(function (err) {\r\n *       console.log(String(err)) // ValidationError: The value of path `d` (1969-12-31) is before the limit (1970-01-01).\r\n *     })\r\n *\r\n * @param {Date} value minimum date\r\n * @param {String} [message] optional custom error message\r\n * @return {SchemaType} this\r\n * @see Customized Error Messages #error_messages_MongooseError-messages\r\n * @api public\r\n */\n\nSchemaDate.prototype.min = function (value, message) {\n  if (this.minValidator) {\n    this.validators = this.validators.filter(function (v) {\n      return v.validator !== this.minValidator;\n    }, this);\n  }\n  if (value) {\n    let msg = message || MongooseError.messages.Date.min;\n    if (typeof msg === 'string') {\n      msg = msg.replace(/{MIN}/, value === Date.now ? 'Date.now()' : value.toString());\n    }\n    const _this = this;\n    this.validators.push({\n      validator: this.minValidator = function (val) {\n        let _value = value;\n        if (typeof value === 'function' && value !== Date.now) {\n          _value = _value.call(this);\n        }\n        const min = _value === Date.now ? _value() : _this.cast(_value);\n        return val === null || val.valueOf() >= min.valueOf();\n      },\n      message: msg,\n      type: 'min',\n      min: value\n    });\n  }\n  return this;\n};\n\n/**\r\n * Sets a maximum date validator.\r\n *\r\n * #### Example:\r\n *\r\n *     const s = new Schema({ d: { type: Date, max: Date('2014-01-01') })\r\n *     const M = db.model('M', s)\r\n *     const m = new M({ d: Date('2014-12-08') })\r\n *     m.save(function (err) {\r\n *       console.error(err) // validator error\r\n *       m.d = Date('2013-12-31');\r\n *       m.save() // success\r\n *     })\r\n *\r\n *     // custom error messages\r\n *     // We can also use the special {MAX} token which will be replaced with the invalid value\r\n *     const max = [Date('2014-01-01'), 'The value of path `{PATH}` ({VALUE}) exceeds the limit ({MAX}).'];\r\n *     const schema = new Schema({ d: { type: Date, max: max })\r\n *     const M = mongoose.model('M', schema);\r\n *     const s= new M({ d: Date('2014-12-08') });\r\n *     s.validate(function (err) {\r\n *       console.log(String(err)) // ValidationError: The value of path `d` (2014-12-08) exceeds the limit (2014-01-01).\r\n *     })\r\n *\r\n * @param {Date} maximum date\r\n * @param {String} [message] optional custom error message\r\n * @return {SchemaType} this\r\n * @see Customized Error Messages #error_messages_MongooseError-messages\r\n * @api public\r\n */\n\nSchemaDate.prototype.max = function (value, message) {\n  if (this.maxValidator) {\n    this.validators = this.validators.filter(function (v) {\n      return v.validator !== this.maxValidator;\n    }, this);\n  }\n  if (value) {\n    let msg = message || MongooseError.messages.Date.max;\n    if (typeof msg === 'string') {\n      msg = msg.replace(/{MAX}/, value === Date.now ? 'Date.now()' : value.toString());\n    }\n    const _this = this;\n    this.validators.push({\n      validator: this.maxValidator = function (val) {\n        let _value = value;\n        if (typeof _value === 'function' && _value !== Date.now) {\n          _value = _value.call(this);\n        }\n        const max = _value === Date.now ? _value() : _this.cast(_value);\n        return val === null || val.valueOf() <= max.valueOf();\n      },\n      message: msg,\n      type: 'max',\n      max: value\n    });\n  }\n  return this;\n};\n\n/**\r\n * Casts to date\r\n *\r\n * @param {Object} value to cast\r\n * @api private\r\n */\n\nSchemaDate.prototype.cast = function (value) {\n  let castDate;\n  if (typeof this._castFunction === 'function') {\n    castDate = this._castFunction;\n  } else if (typeof this.constructor.cast === 'function') {\n    castDate = this.constructor.cast();\n  } else {\n    castDate = SchemaDate.cast();\n  }\n  try {\n    return castDate(value);\n  } catch (error) {\n    throw new CastError('date', value, this.path, error, this);\n  }\n};\n\n/**\r\n * Date Query casting.\r\n *\r\n * @param {Any} val\r\n * @api private\r\n */\n\nfunction handleSingle(val) {\n  return this.cast(val);\n}\nSchemaDate.prototype.$conditionalHandlers = utils.options(SchemaType.prototype.$conditionalHandlers, {\n  $gt: handleSingle,\n  $gte: handleSingle,\n  $lt: handleSingle,\n  $lte: handleSingle\n});\n\n/**\r\n * Casts contents for queries.\r\n *\r\n * @param {String} $conditional\r\n * @param {any} [value]\r\n * @api private\r\n */\n\nSchemaDate.prototype.castForQuery = function ($conditional, val) {\n  if (arguments.length !== 2) {\n    return this._castForQuery($conditional);\n  }\n  const handler = this.$conditionalHandlers[$conditional];\n  if (!handler) {\n    throw new Error('Can\\'t use ' + $conditional + ' with Date.');\n  }\n  return handler.call(this, val);\n};\n\n/*!\r\n * Module exports.\r\n */\n\nmodule.exports = SchemaDate;","map":{"version":3,"names":["MongooseError","require","SchemaDateOptions","SchemaType","castDate","getConstructorName","utils","CastError","SchemaDate","key","options","call","schemaName","defaultOptions","prototype","Object","create","constructor","OptionsConstructor","_cast","set","cast","caster","arguments","length","_defaultCaster","v","Date","Error","expires","when","_index","_checkRequired","checkRequired","value","doc","_isRef","min","message","minValidator","validators","filter","validator","msg","messages","replace","now","toString","_this","push","val","_value","valueOf","type","max","maxValidator","_castFunction","error","path","handleSingle","$conditionalHandlers","$gt","$gte","$lt","$lte","castForQuery","$conditional","_castForQuery","handler","module","exports"],"sources":["C:/Users/91930/Desktop/Github projects/Pharmacy Demo/back-end/node_modules/mongoose/lib/schema/date.js"],"sourcesContent":["/*!\r\n * Module requirements.\r\n */\r\n\r\n'use strict';\r\n\r\nconst MongooseError = require('../error/index');\r\nconst SchemaDateOptions = require('../options/SchemaDateOptions');\r\nconst SchemaType = require('../schematype');\r\nconst castDate = require('../cast/date');\r\nconst getConstructorName = require('../helpers/getConstructorName');\r\nconst utils = require('../utils');\r\n\r\nconst CastError = SchemaType.CastError;\r\n\r\n/**\r\n * Date SchemaType constructor.\r\n *\r\n * @param {String} key\r\n * @param {Object} options\r\n * @inherits SchemaType\r\n * @api public\r\n */\r\n\r\nfunction SchemaDate(key, options) {\r\n  SchemaType.call(this, key, options, 'Date');\r\n}\r\n\r\n/**\r\n * This schema type's name, to defend against minifiers that mangle\r\n * function names.\r\n *\r\n * @api public\r\n */\r\nSchemaDate.schemaName = 'Date';\r\n\r\nSchemaDate.defaultOptions = {};\r\n\r\n/*!\r\n * Inherits from SchemaType.\r\n */\r\nSchemaDate.prototype = Object.create(SchemaType.prototype);\r\nSchemaDate.prototype.constructor = SchemaDate;\r\nSchemaDate.prototype.OptionsConstructor = SchemaDateOptions;\r\n\r\n/*!\r\n * ignore\r\n */\r\n\r\nSchemaDate._cast = castDate;\r\n\r\n/**\r\n * Sets a default option for all Date instances.\r\n *\r\n * #### Example:\r\n *\r\n *     // Make all dates have `required` of true by default.\r\n *     mongoose.Schema.Date.set('required', true);\r\n *\r\n *     const User = mongoose.model('User', new Schema({ test: Date }));\r\n *     new User({ }).validateSync().errors.test.message; // Path `test` is required.\r\n *\r\n * @param {String} option The option you'd like to set the value for\r\n * @param {Any} value value for option\r\n * @return {undefined}\r\n * @function set\r\n * @static\r\n * @api public\r\n */\r\n\r\nSchemaDate.set = SchemaType.set;\r\n\r\n/**\r\n * Get/set the function used to cast arbitrary values to dates.\r\n *\r\n * #### Example:\r\n *\r\n *     // Mongoose converts empty string '' into `null` for date types. You\r\n *     // can create a custom caster to disable it.\r\n *     const original = mongoose.Schema.Types.Date.cast();\r\n *     mongoose.Schema.Types.Date.cast(v => {\r\n *       assert.ok(v !== '');\r\n *       return original(v);\r\n *     });\r\n *\r\n *     // Or disable casting entirely\r\n *     mongoose.Schema.Types.Date.cast(false);\r\n *\r\n * @param {Function} caster\r\n * @return {Function}\r\n * @function get\r\n * @static\r\n * @api public\r\n */\r\n\r\nSchemaDate.cast = function cast(caster) {\r\n  if (arguments.length === 0) {\r\n    return this._cast;\r\n  }\r\n  if (caster === false) {\r\n    caster = this._defaultCaster;\r\n  }\r\n  this._cast = caster;\r\n\r\n  return this._cast;\r\n};\r\n\r\n/*!\r\n * ignore\r\n */\r\n\r\nSchemaDate._defaultCaster = v => {\r\n  if (v != null && !(v instanceof Date)) {\r\n    throw new Error();\r\n  }\r\n  return v;\r\n};\r\n\r\n/**\r\n * Declares a TTL index (rounded to the nearest second) for _Date_ types only.\r\n *\r\n * This sets the `expireAfterSeconds` index option available in MongoDB >= 2.1.2.\r\n * This index type is only compatible with Date types.\r\n *\r\n * #### Example:\r\n *\r\n *     // expire in 24 hours\r\n *     new Schema({ createdAt: { type: Date, expires: 60*60*24 }});\r\n *\r\n * `expires` utilizes the `ms` module from [guille](https://github.com/guille/) allowing us to use a friendlier syntax:\r\n *\r\n * #### Example:\r\n *\r\n *     // expire in 24 hours\r\n *     new Schema({ createdAt: { type: Date, expires: '24h' }});\r\n *\r\n *     // expire in 1.5 hours\r\n *     new Schema({ createdAt: { type: Date, expires: '1.5h' }});\r\n *\r\n *     // expire in 7 days\r\n *     const schema = new Schema({ createdAt: Date });\r\n *     schema.path('createdAt').expires('7d');\r\n *\r\n * @param {Number|String} when\r\n * @added 3.0.0\r\n * @return {SchemaType} this\r\n * @api public\r\n */\r\n\r\nSchemaDate.prototype.expires = function(when) {\r\n  if (getConstructorName(this._index) !== 'Object') {\r\n    this._index = {};\r\n  }\r\n\r\n  this._index.expires = when;\r\n  utils.expires(this._index);\r\n  return this;\r\n};\r\n\r\n/*!\r\n * ignore\r\n */\r\n\r\nSchemaDate._checkRequired = v => v instanceof Date;\r\n\r\n/**\r\n * Override the function the required validator uses to check whether a string\r\n * passes the `required` check.\r\n *\r\n * #### Example:\r\n *\r\n *     // Allow empty strings to pass `required` check\r\n *     mongoose.Schema.Types.String.checkRequired(v => v != null);\r\n *\r\n *     const M = mongoose.model({ str: { type: String, required: true } });\r\n *     new M({ str: '' }).validateSync(); // `null`, validation passes!\r\n *\r\n * @param {Function} fn\r\n * @return {Function}\r\n * @function checkRequired\r\n * @static\r\n * @api public\r\n */\r\n\r\nSchemaDate.checkRequired = SchemaType.checkRequired;\r\n\r\n/**\r\n * Check if the given value satisfies a required validator. To satisfy\r\n * a required validator, the given value must be an instance of `Date`.\r\n *\r\n * @param {Any} value\r\n * @param {Document} doc\r\n * @return {Boolean}\r\n * @api public\r\n */\r\n\r\nSchemaDate.prototype.checkRequired = function(value, doc) {\r\n  if (typeof value === 'object' && SchemaType._isRef(this, value, doc, true)) {\r\n    return value != null;\r\n  }\r\n\r\n  // `require('util').inherits()` does **not** copy static properties, and\r\n  // plugins like mongoose-float use `inherits()` for pre-ES6.\r\n  const _checkRequired = typeof this.constructor.checkRequired === 'function' ?\r\n    this.constructor.checkRequired() :\r\n    SchemaDate.checkRequired();\r\n  return _checkRequired(value);\r\n};\r\n\r\n/**\r\n * Sets a minimum date validator.\r\n *\r\n * #### Example:\r\n *\r\n *     const s = new Schema({ d: { type: Date, min: Date('1970-01-01') })\r\n *     const M = db.model('M', s)\r\n *     const m = new M({ d: Date('1969-12-31') })\r\n *     m.save(function (err) {\r\n *       console.error(err) // validator error\r\n *       m.d = Date('2014-12-08');\r\n *       m.save() // success\r\n *     })\r\n *\r\n *     // custom error messages\r\n *     // We can also use the special {MIN} token which will be replaced with the invalid value\r\n *     const min = [Date('1970-01-01'), 'The value of path `{PATH}` ({VALUE}) is beneath the limit ({MIN}).'];\r\n *     const schema = new Schema({ d: { type: Date, min: min })\r\n *     const M = mongoose.model('M', schema);\r\n *     const s= new M({ d: Date('1969-12-31') });\r\n *     s.validate(function (err) {\r\n *       console.log(String(err)) // ValidationError: The value of path `d` (1969-12-31) is before the limit (1970-01-01).\r\n *     })\r\n *\r\n * @param {Date} value minimum date\r\n * @param {String} [message] optional custom error message\r\n * @return {SchemaType} this\r\n * @see Customized Error Messages #error_messages_MongooseError-messages\r\n * @api public\r\n */\r\n\r\nSchemaDate.prototype.min = function(value, message) {\r\n  if (this.minValidator) {\r\n    this.validators = this.validators.filter(function(v) {\r\n      return v.validator !== this.minValidator;\r\n    }, this);\r\n  }\r\n\r\n  if (value) {\r\n    let msg = message || MongooseError.messages.Date.min;\r\n    if (typeof msg === 'string') {\r\n      msg = msg.replace(/{MIN}/, (value === Date.now ? 'Date.now()' : value.toString()));\r\n    }\r\n    const _this = this;\r\n    this.validators.push({\r\n      validator: this.minValidator = function(val) {\r\n        let _value = value;\r\n        if (typeof value === 'function' && value !== Date.now) {\r\n          _value = _value.call(this);\r\n        }\r\n        const min = (_value === Date.now ? _value() : _this.cast(_value));\r\n        return val === null || val.valueOf() >= min.valueOf();\r\n      },\r\n      message: msg,\r\n      type: 'min',\r\n      min: value\r\n    });\r\n  }\r\n\r\n  return this;\r\n};\r\n\r\n/**\r\n * Sets a maximum date validator.\r\n *\r\n * #### Example:\r\n *\r\n *     const s = new Schema({ d: { type: Date, max: Date('2014-01-01') })\r\n *     const M = db.model('M', s)\r\n *     const m = new M({ d: Date('2014-12-08') })\r\n *     m.save(function (err) {\r\n *       console.error(err) // validator error\r\n *       m.d = Date('2013-12-31');\r\n *       m.save() // success\r\n *     })\r\n *\r\n *     // custom error messages\r\n *     // We can also use the special {MAX} token which will be replaced with the invalid value\r\n *     const max = [Date('2014-01-01'), 'The value of path `{PATH}` ({VALUE}) exceeds the limit ({MAX}).'];\r\n *     const schema = new Schema({ d: { type: Date, max: max })\r\n *     const M = mongoose.model('M', schema);\r\n *     const s= new M({ d: Date('2014-12-08') });\r\n *     s.validate(function (err) {\r\n *       console.log(String(err)) // ValidationError: The value of path `d` (2014-12-08) exceeds the limit (2014-01-01).\r\n *     })\r\n *\r\n * @param {Date} maximum date\r\n * @param {String} [message] optional custom error message\r\n * @return {SchemaType} this\r\n * @see Customized Error Messages #error_messages_MongooseError-messages\r\n * @api public\r\n */\r\n\r\nSchemaDate.prototype.max = function(value, message) {\r\n  if (this.maxValidator) {\r\n    this.validators = this.validators.filter(function(v) {\r\n      return v.validator !== this.maxValidator;\r\n    }, this);\r\n  }\r\n\r\n  if (value) {\r\n    let msg = message || MongooseError.messages.Date.max;\r\n    if (typeof msg === 'string') {\r\n      msg = msg.replace(/{MAX}/, (value === Date.now ? 'Date.now()' : value.toString()));\r\n    }\r\n    const _this = this;\r\n    this.validators.push({\r\n      validator: this.maxValidator = function(val) {\r\n        let _value = value;\r\n        if (typeof _value === 'function' && _value !== Date.now) {\r\n          _value = _value.call(this);\r\n        }\r\n        const max = (_value === Date.now ? _value() : _this.cast(_value));\r\n        return val === null || val.valueOf() <= max.valueOf();\r\n      },\r\n      message: msg,\r\n      type: 'max',\r\n      max: value\r\n    });\r\n  }\r\n\r\n  return this;\r\n};\r\n\r\n/**\r\n * Casts to date\r\n *\r\n * @param {Object} value to cast\r\n * @api private\r\n */\r\n\r\nSchemaDate.prototype.cast = function(value) {\r\n  let castDate;\r\n  if (typeof this._castFunction === 'function') {\r\n    castDate = this._castFunction;\r\n  } else if (typeof this.constructor.cast === 'function') {\r\n    castDate = this.constructor.cast();\r\n  } else {\r\n    castDate = SchemaDate.cast();\r\n  }\r\n\r\n  try {\r\n    return castDate(value);\r\n  } catch (error) {\r\n    throw new CastError('date', value, this.path, error, this);\r\n  }\r\n};\r\n\r\n/**\r\n * Date Query casting.\r\n *\r\n * @param {Any} val\r\n * @api private\r\n */\r\n\r\nfunction handleSingle(val) {\r\n  return this.cast(val);\r\n}\r\n\r\nSchemaDate.prototype.$conditionalHandlers =\r\n    utils.options(SchemaType.prototype.$conditionalHandlers, {\r\n      $gt: handleSingle,\r\n      $gte: handleSingle,\r\n      $lt: handleSingle,\r\n      $lte: handleSingle\r\n    });\r\n\r\n\r\n/**\r\n * Casts contents for queries.\r\n *\r\n * @param {String} $conditional\r\n * @param {any} [value]\r\n * @api private\r\n */\r\n\r\nSchemaDate.prototype.castForQuery = function($conditional, val) {\r\n  if (arguments.length !== 2) {\r\n    return this._castForQuery($conditional);\r\n  }\r\n\r\n  const handler = this.$conditionalHandlers[$conditional];\r\n\r\n  if (!handler) {\r\n    throw new Error('Can\\'t use ' + $conditional + ' with Date.');\r\n  }\r\n\r\n  return handler.call(this, val);\r\n};\r\n\r\n/*!\r\n * Module exports.\r\n */\r\n\r\nmodule.exports = SchemaDate;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}