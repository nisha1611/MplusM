{"ast":null,"code":"#!/usr/bin/env node\n'use strict';\n\nconst fs = require('fs');\nconst path = require('path');\nconst mimeScore = require('mime-score');\nlet db = require('mime-db');\nlet chalk = require('chalk');\nconst STANDARD_FACET_SCORE = 900;\nconst byExtension = {};\n\n// Clear out any conflict extensions in mime-db\nfor (let type in db) {\n  let entry = db[type];\n  entry.type = type;\n  if (!entry.extensions) continue;\n  entry.extensions.forEach(ext => {\n    if (ext in byExtension) {\n      const e0 = entry;\n      const e1 = byExtension[ext];\n      e0.pri = mimeScore(e0.type, e0.source);\n      e1.pri = mimeScore(e1.type, e1.source);\n      let drop = e0.pri < e1.pri ? e0 : e1;\n      let keep = e0.pri >= e1.pri ? e0 : e1;\n      drop.extensions = drop.extensions.filter(e => e !== ext);\n      console.log(`${ext}: Keeping ${chalk.green(keep.type)} (${keep.pri}), dropping ${chalk.red(drop.type)} (${drop.pri})`);\n    }\n    byExtension[ext] = entry;\n  });\n}\nfunction writeTypesFile(types, path) {\n  fs.writeFileSync(path, JSON.stringify(types));\n}\n\n// Segregate into standard and non-standard types based on facet per\n// https://tools.ietf.org/html/rfc6838#section-3.1\nconst types = {};\nObject.keys(db).sort().forEach(k => {\n  const entry = db[k];\n  types[entry.type] = entry.extensions;\n});\nwriteTypesFile(types, path.join(__dirname, '..', 'types.json'));","map":{"version":3,"names":["fs","require","path","mimeScore","db","chalk","STANDARD_FACET_SCORE","byExtension","type","entry","extensions","forEach","ext","e0","e1","pri","source","drop","keep","filter","e","console","log","green","red","writeTypesFile","types","writeFileSync","JSON","stringify","Object","keys","sort","k","join","__dirname"],"sources":["C:/Users/91930/Desktop/Github projects/Pharmacy Demo/back-end/node_modules/mime/src/build.js"],"sourcesContent":["#!/usr/bin/env node\r\n\r\n'use strict';\r\n\r\nconst fs = require('fs');\r\nconst path = require('path');\r\nconst mimeScore = require('mime-score');\r\n\r\nlet db = require('mime-db');\r\nlet chalk = require('chalk');\r\n\r\nconst STANDARD_FACET_SCORE = 900;\r\n\r\nconst byExtension = {};\r\n\r\n// Clear out any conflict extensions in mime-db\r\nfor (let type in db) {\r\n  let entry = db[type];\r\n  entry.type = type;\r\n\r\n  if (!entry.extensions) continue;\r\n\r\n  entry.extensions.forEach(ext => {\r\n    if (ext in byExtension) {\r\n      const e0 = entry;\r\n      const e1 = byExtension[ext];\r\n      e0.pri = mimeScore(e0.type, e0.source);\r\n      e1.pri = mimeScore(e1.type, e1.source);\r\n\r\n      let drop = e0.pri < e1.pri ? e0 : e1;\r\n      let keep = e0.pri >= e1.pri ? e0 : e1;\r\n      drop.extensions = drop.extensions.filter(e => e !== ext);\r\n\r\n      console.log(`${ext}: Keeping ${chalk.green(keep.type)} (${keep.pri}), dropping ${chalk.red(drop.type)} (${drop.pri})`);\r\n    }\r\n    byExtension[ext] = entry;\r\n  });\r\n}\r\n\r\nfunction writeTypesFile(types, path) {\r\n  fs.writeFileSync(path, JSON.stringify(types));\r\n}\r\n\r\n// Segregate into standard and non-standard types based on facet per\r\n// https://tools.ietf.org/html/rfc6838#section-3.1\r\nconst types = {};\r\n\r\nObject.keys(db).sort().forEach(k => {\r\n  const entry = db[k];\r\n  types[entry.type] = entry.extensions;\r\n});\r\n\r\nwriteTypesFile(types, path.join(__dirname, '..', 'types.json'));\r\n"],"mappings":"AAAA;AAEA,YAAY;;AAEZ,MAAMA,EAAE,GAAGC,OAAO,CAAC,IAAI,CAAC;AACxB,MAAMC,IAAI,GAAGD,OAAO,CAAC,MAAM,CAAC;AAC5B,MAAME,SAAS,GAAGF,OAAO,CAAC,YAAY,CAAC;AAEvC,IAAIG,EAAE,GAAGH,OAAO,CAAC,SAAS,CAAC;AAC3B,IAAII,KAAK,GAAGJ,OAAO,CAAC,OAAO,CAAC;AAE5B,MAAMK,oBAAoB,GAAG,GAAG;AAEhC,MAAMC,WAAW,GAAG,CAAC,CAAC;;AAEtB;AACA,KAAK,IAAIC,IAAI,IAAIJ,EAAE,EAAE;EACnB,IAAIK,KAAK,GAAGL,EAAE,CAACI,IAAI,CAAC;EACpBC,KAAK,CAACD,IAAI,GAAGA,IAAI;EAEjB,IAAI,CAACC,KAAK,CAACC,UAAU,EAAE;EAEvBD,KAAK,CAACC,UAAU,CAACC,OAAO,CAACC,GAAG,IAAI;IAC9B,IAAIA,GAAG,IAAIL,WAAW,EAAE;MACtB,MAAMM,EAAE,GAAGJ,KAAK;MAChB,MAAMK,EAAE,GAAGP,WAAW,CAACK,GAAG,CAAC;MAC3BC,EAAE,CAACE,GAAG,GAAGZ,SAAS,CAACU,EAAE,CAACL,IAAI,EAAEK,EAAE,CAACG,MAAM,CAAC;MACtCF,EAAE,CAACC,GAAG,GAAGZ,SAAS,CAACW,EAAE,CAACN,IAAI,EAAEM,EAAE,CAACE,MAAM,CAAC;MAEtC,IAAIC,IAAI,GAAGJ,EAAE,CAACE,GAAG,GAAGD,EAAE,CAACC,GAAG,GAAGF,EAAE,GAAGC,EAAE;MACpC,IAAII,IAAI,GAAGL,EAAE,CAACE,GAAG,IAAID,EAAE,CAACC,GAAG,GAAGF,EAAE,GAAGC,EAAE;MACrCG,IAAI,CAACP,UAAU,GAAGO,IAAI,CAACP,UAAU,CAACS,MAAM,CAACC,CAAC,IAAIA,CAAC,KAAKR,GAAG,CAAC;MAExDS,OAAO,CAACC,GAAG,CAAE,GAAEV,GAAI,aAAYP,KAAK,CAACkB,KAAK,CAACL,IAAI,CAACV,IAAI,CAAE,KAAIU,IAAI,CAACH,GAAI,eAAcV,KAAK,CAACmB,GAAG,CAACP,IAAI,CAACT,IAAI,CAAE,KAAIS,IAAI,CAACF,GAAI,GAAE,CAAC;IACxH;IACAR,WAAW,CAACK,GAAG,CAAC,GAAGH,KAAK;EAC1B,CAAC,CAAC;AACJ;AAEA,SAASgB,cAAc,CAACC,KAAK,EAAExB,IAAI,EAAE;EACnCF,EAAE,CAAC2B,aAAa,CAACzB,IAAI,EAAE0B,IAAI,CAACC,SAAS,CAACH,KAAK,CAAC,CAAC;AAC/C;;AAEA;AACA;AACA,MAAMA,KAAK,GAAG,CAAC,CAAC;AAEhBI,MAAM,CAACC,IAAI,CAAC3B,EAAE,CAAC,CAAC4B,IAAI,EAAE,CAACrB,OAAO,CAACsB,CAAC,IAAI;EAClC,MAAMxB,KAAK,GAAGL,EAAE,CAAC6B,CAAC,CAAC;EACnBP,KAAK,CAACjB,KAAK,CAACD,IAAI,CAAC,GAAGC,KAAK,CAACC,UAAU;AACtC,CAAC,CAAC;AAEFe,cAAc,CAACC,KAAK,EAAExB,IAAI,CAACgC,IAAI,CAACC,SAAS,EAAE,IAAI,EAAE,YAAY,CAAC,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}