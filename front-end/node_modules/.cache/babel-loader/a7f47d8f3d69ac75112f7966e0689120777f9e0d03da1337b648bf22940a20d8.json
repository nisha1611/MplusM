{"ast":null,"code":"/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Tobias Koppers @sokra\r\n*/\n\n\"use strict\";\n\n/**\r\n * @template {any[]} T\r\n */\nclass TupleSet {\n  constructor(init) {\n    this._map = new Map();\n    this.size = 0;\n    if (init) {\n      for (const tuple of init) {\n        this.add(...tuple);\n      }\n    }\n  }\n\n  /**\r\n   * @param  {T} args tuple\r\n   * @returns {void}\r\n   */\n  add() {\n    var _ref, _ref2;\n    let map = this._map;\n    for (let i = 0; i < arguments.length - 2; i++) {\n      const arg = i < 0 || arguments.length <= i ? undefined : arguments[i];\n      const innerMap = map.get(arg);\n      if (innerMap === undefined) {\n        map.set(arg, map = new Map());\n      } else {\n        map = innerMap;\n      }\n    }\n    const beforeLast = (_ref = arguments.length - 2, _ref < 0 || arguments.length <= _ref ? undefined : arguments[_ref]);\n    let set = map.get(beforeLast);\n    if (set === undefined) {\n      map.set(beforeLast, set = new Set());\n    }\n    const last = (_ref2 = arguments.length - 1, _ref2 < 0 || arguments.length <= _ref2 ? undefined : arguments[_ref2]);\n    this.size -= set.size;\n    set.add(last);\n    this.size += set.size;\n  }\n\n  /**\r\n   * @param  {T} args tuple\r\n   * @returns {boolean} true, if the tuple is in the Set\r\n   */\n  has() {\n    var _ref3, _ref4;\n    let map = this._map;\n    for (let i = 0; i < arguments.length - 2; i++) {\n      const arg = i < 0 || arguments.length <= i ? undefined : arguments[i];\n      map = map.get(arg);\n      if (map === undefined) {\n        return false;\n      }\n    }\n    const beforeLast = (_ref3 = arguments.length - 2, _ref3 < 0 || arguments.length <= _ref3 ? undefined : arguments[_ref3]);\n    let set = map.get(beforeLast);\n    if (set === undefined) {\n      return false;\n    }\n    const last = (_ref4 = arguments.length - 1, _ref4 < 0 || arguments.length <= _ref4 ? undefined : arguments[_ref4]);\n    return set.has(last);\n  }\n\n  /**\r\n   * @param {T} args tuple\r\n   * @returns {void}\r\n   */\n  delete() {\n    var _ref5, _ref6;\n    let map = this._map;\n    for (let i = 0; i < arguments.length - 2; i++) {\n      const arg = i < 0 || arguments.length <= i ? undefined : arguments[i];\n      map = map.get(arg);\n      if (map === undefined) {\n        return;\n      }\n    }\n    const beforeLast = (_ref5 = arguments.length - 2, _ref5 < 0 || arguments.length <= _ref5 ? undefined : arguments[_ref5]);\n    let set = map.get(beforeLast);\n    if (set === undefined) {\n      return;\n    }\n    const last = (_ref6 = arguments.length - 1, _ref6 < 0 || arguments.length <= _ref6 ? undefined : arguments[_ref6]);\n    this.size -= set.size;\n    set.delete(last);\n    this.size += set.size;\n  }\n\n  /**\r\n   * @returns {Iterator<T>} iterator\r\n   */\n  [Symbol.iterator]() {\n    const iteratorStack = [];\n    const tuple = [];\n    let currentSetIterator = undefined;\n    const next = it => {\n      const result = it.next();\n      if (result.done) {\n        if (iteratorStack.length === 0) return false;\n        tuple.pop();\n        return next(iteratorStack.pop());\n      }\n      const [key, value] = result.value;\n      iteratorStack.push(it);\n      tuple.push(key);\n      if (value instanceof Set) {\n        currentSetIterator = value[Symbol.iterator]();\n        return true;\n      } else {\n        return next(value[Symbol.iterator]());\n      }\n    };\n    next(this._map[Symbol.iterator]());\n    return {\n      next() {\n        while (currentSetIterator) {\n          const result = currentSetIterator.next();\n          if (result.done) {\n            tuple.pop();\n            if (!next(iteratorStack.pop())) {\n              currentSetIterator = undefined;\n            }\n          } else {\n            return {\n              done: false,\n              value: /** @type {T} */tuple.concat(result.value)\n            };\n          }\n        }\n        return {\n          done: true,\n          value: undefined\n        };\n      }\n    };\n  }\n}\nmodule.exports = TupleSet;","map":{"version":3,"names":["TupleSet","constructor","init","_map","Map","size","tuple","add","map","i","length","arg","innerMap","get","undefined","set","beforeLast","Set","last","has","delete","Symbol","iterator","iteratorStack","currentSetIterator","next","it","result","done","pop","key","value","push","concat","module","exports"],"sources":["C:/Users/91930/Desktop/Github projects/Pharmacy Demo/front-end/node_modules/webpack/lib/util/TupleSet.js"],"sourcesContent":["/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Tobias Koppers @sokra\r\n*/\r\n\r\n\"use strict\";\r\n\r\n/**\r\n * @template {any[]} T\r\n */\r\nclass TupleSet {\r\n\tconstructor(init) {\r\n\t\tthis._map = new Map();\r\n\t\tthis.size = 0;\r\n\t\tif (init) {\r\n\t\t\tfor (const tuple of init) {\r\n\t\t\t\tthis.add(...tuple);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @param  {T} args tuple\r\n\t * @returns {void}\r\n\t */\r\n\tadd(...args) {\r\n\t\tlet map = this._map;\r\n\t\tfor (let i = 0; i < args.length - 2; i++) {\r\n\t\t\tconst arg = args[i];\r\n\t\t\tconst innerMap = map.get(arg);\r\n\t\t\tif (innerMap === undefined) {\r\n\t\t\t\tmap.set(arg, (map = new Map()));\r\n\t\t\t} else {\r\n\t\t\t\tmap = innerMap;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tconst beforeLast = args[args.length - 2];\r\n\t\tlet set = map.get(beforeLast);\r\n\t\tif (set === undefined) {\r\n\t\t\tmap.set(beforeLast, (set = new Set()));\r\n\t\t}\r\n\r\n\t\tconst last = args[args.length - 1];\r\n\t\tthis.size -= set.size;\r\n\t\tset.add(last);\r\n\t\tthis.size += set.size;\r\n\t}\r\n\r\n\t/**\r\n\t * @param  {T} args tuple\r\n\t * @returns {boolean} true, if the tuple is in the Set\r\n\t */\r\n\thas(...args) {\r\n\t\tlet map = this._map;\r\n\t\tfor (let i = 0; i < args.length - 2; i++) {\r\n\t\t\tconst arg = args[i];\r\n\t\t\tmap = map.get(arg);\r\n\t\t\tif (map === undefined) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tconst beforeLast = args[args.length - 2];\r\n\t\tlet set = map.get(beforeLast);\r\n\t\tif (set === undefined) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tconst last = args[args.length - 1];\r\n\t\treturn set.has(last);\r\n\t}\r\n\r\n\t/**\r\n\t * @param {T} args tuple\r\n\t * @returns {void}\r\n\t */\r\n\tdelete(...args) {\r\n\t\tlet map = this._map;\r\n\t\tfor (let i = 0; i < args.length - 2; i++) {\r\n\t\t\tconst arg = args[i];\r\n\t\t\tmap = map.get(arg);\r\n\t\t\tif (map === undefined) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tconst beforeLast = args[args.length - 2];\r\n\t\tlet set = map.get(beforeLast);\r\n\t\tif (set === undefined) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst last = args[args.length - 1];\r\n\t\tthis.size -= set.size;\r\n\t\tset.delete(last);\r\n\t\tthis.size += set.size;\r\n\t}\r\n\r\n\t/**\r\n\t * @returns {Iterator<T>} iterator\r\n\t */\r\n\t[Symbol.iterator]() {\r\n\t\tconst iteratorStack = [];\r\n\t\tconst tuple = [];\r\n\t\tlet currentSetIterator = undefined;\r\n\r\n\t\tconst next = it => {\r\n\t\t\tconst result = it.next();\r\n\t\t\tif (result.done) {\r\n\t\t\t\tif (iteratorStack.length === 0) return false;\r\n\t\t\t\ttuple.pop();\r\n\t\t\t\treturn next(iteratorStack.pop());\r\n\t\t\t}\r\n\t\t\tconst [key, value] = result.value;\r\n\t\t\titeratorStack.push(it);\r\n\t\t\ttuple.push(key);\r\n\t\t\tif (value instanceof Set) {\r\n\t\t\t\tcurrentSetIterator = value[Symbol.iterator]();\r\n\t\t\t\treturn true;\r\n\t\t\t} else {\r\n\t\t\t\treturn next(value[Symbol.iterator]());\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tnext(this._map[Symbol.iterator]());\r\n\r\n\t\treturn {\r\n\t\t\tnext() {\r\n\t\t\t\twhile (currentSetIterator) {\r\n\t\t\t\t\tconst result = currentSetIterator.next();\r\n\t\t\t\t\tif (result.done) {\r\n\t\t\t\t\t\ttuple.pop();\r\n\t\t\t\t\t\tif (!next(iteratorStack.pop())) {\r\n\t\t\t\t\t\t\tcurrentSetIterator = undefined;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\tdone: false,\r\n\t\t\t\t\t\t\tvalue: /** @type {T} */ (tuple.concat(result.value))\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn { done: true, value: undefined };\r\n\t\t\t}\r\n\t\t};\r\n\t}\r\n}\r\n\r\nmodule.exports = TupleSet;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}