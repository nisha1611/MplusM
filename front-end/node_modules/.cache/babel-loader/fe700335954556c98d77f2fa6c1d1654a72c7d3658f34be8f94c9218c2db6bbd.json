{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.NODE_RETRY_MODE_CONFIG_OPTIONS = exports.CONFIG_RETRY_MODE = exports.ENV_RETRY_MODE = exports.resolveRetryConfig = exports.NODE_MAX_ATTEMPT_CONFIG_OPTIONS = exports.CONFIG_MAX_ATTEMPTS = exports.ENV_MAX_ATTEMPTS = void 0;\nconst util_middleware_1 = require(\"@aws-sdk/util-middleware\");\nconst util_retry_1 = require(\"@aws-sdk/util-retry\");\nexports.ENV_MAX_ATTEMPTS = \"AWS_MAX_ATTEMPTS\";\nexports.CONFIG_MAX_ATTEMPTS = \"max_attempts\";\nexports.NODE_MAX_ATTEMPT_CONFIG_OPTIONS = {\n  environmentVariableSelector: env => {\n    const value = env[exports.ENV_MAX_ATTEMPTS];\n    if (!value) return undefined;\n    const maxAttempt = parseInt(value);\n    if (Number.isNaN(maxAttempt)) {\n      throw new Error(`Environment variable ${exports.ENV_MAX_ATTEMPTS} mast be a number, got \"${value}\"`);\n    }\n    return maxAttempt;\n  },\n  configFileSelector: profile => {\n    const value = profile[exports.CONFIG_MAX_ATTEMPTS];\n    if (!value) return undefined;\n    const maxAttempt = parseInt(value);\n    if (Number.isNaN(maxAttempt)) {\n      throw new Error(`Shared config file entry ${exports.CONFIG_MAX_ATTEMPTS} mast be a number, got \"${value}\"`);\n    }\n    return maxAttempt;\n  },\n  default: util_retry_1.DEFAULT_MAX_ATTEMPTS\n};\nconst resolveRetryConfig = input => {\n  var _a;\n  const {\n    retryStrategy\n  } = input;\n  const maxAttempts = (0, util_middleware_1.normalizeProvider)((_a = input.maxAttempts) !== null && _a !== void 0 ? _a : util_retry_1.DEFAULT_MAX_ATTEMPTS);\n  return {\n    ...input,\n    maxAttempts,\n    retryStrategy: async () => {\n      if (retryStrategy) {\n        return retryStrategy;\n      }\n      const retryMode = await (0, util_middleware_1.normalizeProvider)(input.retryMode)();\n      if (retryMode === util_retry_1.RETRY_MODES.ADAPTIVE) {\n        return new util_retry_1.AdaptiveRetryStrategy(maxAttempts);\n      }\n      return new util_retry_1.StandardRetryStrategy(maxAttempts);\n    }\n  };\n};\nexports.resolveRetryConfig = resolveRetryConfig;\nexports.ENV_RETRY_MODE = \"AWS_RETRY_MODE\";\nexports.CONFIG_RETRY_MODE = \"retry_mode\";\nexports.NODE_RETRY_MODE_CONFIG_OPTIONS = {\n  environmentVariableSelector: env => env[exports.ENV_RETRY_MODE],\n  configFileSelector: profile => profile[exports.CONFIG_RETRY_MODE],\n  default: util_retry_1.DEFAULT_RETRY_MODE\n};","map":{"version":3,"names":["Object","defineProperty","exports","value","NODE_RETRY_MODE_CONFIG_OPTIONS","CONFIG_RETRY_MODE","ENV_RETRY_MODE","resolveRetryConfig","NODE_MAX_ATTEMPT_CONFIG_OPTIONS","CONFIG_MAX_ATTEMPTS","ENV_MAX_ATTEMPTS","util_middleware_1","require","util_retry_1","environmentVariableSelector","env","undefined","maxAttempt","parseInt","Number","isNaN","Error","configFileSelector","profile","default","DEFAULT_MAX_ATTEMPTS","input","_a","retryStrategy","maxAttempts","normalizeProvider","retryMode","RETRY_MODES","ADAPTIVE","AdaptiveRetryStrategy","StandardRetryStrategy","DEFAULT_RETRY_MODE"],"sources":["C:/Users/91930/Desktop/Github projects/Pharmacy Demo/back-end/node_modules/@aws-sdk/middleware-retry/dist-cjs/configurations.js"],"sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.NODE_RETRY_MODE_CONFIG_OPTIONS = exports.CONFIG_RETRY_MODE = exports.ENV_RETRY_MODE = exports.resolveRetryConfig = exports.NODE_MAX_ATTEMPT_CONFIG_OPTIONS = exports.CONFIG_MAX_ATTEMPTS = exports.ENV_MAX_ATTEMPTS = void 0;\r\nconst util_middleware_1 = require(\"@aws-sdk/util-middleware\");\r\nconst util_retry_1 = require(\"@aws-sdk/util-retry\");\r\nexports.ENV_MAX_ATTEMPTS = \"AWS_MAX_ATTEMPTS\";\r\nexports.CONFIG_MAX_ATTEMPTS = \"max_attempts\";\r\nexports.NODE_MAX_ATTEMPT_CONFIG_OPTIONS = {\r\n    environmentVariableSelector: (env) => {\r\n        const value = env[exports.ENV_MAX_ATTEMPTS];\r\n        if (!value)\r\n            return undefined;\r\n        const maxAttempt = parseInt(value);\r\n        if (Number.isNaN(maxAttempt)) {\r\n            throw new Error(`Environment variable ${exports.ENV_MAX_ATTEMPTS} mast be a number, got \"${value}\"`);\r\n        }\r\n        return maxAttempt;\r\n    },\r\n    configFileSelector: (profile) => {\r\n        const value = profile[exports.CONFIG_MAX_ATTEMPTS];\r\n        if (!value)\r\n            return undefined;\r\n        const maxAttempt = parseInt(value);\r\n        if (Number.isNaN(maxAttempt)) {\r\n            throw new Error(`Shared config file entry ${exports.CONFIG_MAX_ATTEMPTS} mast be a number, got \"${value}\"`);\r\n        }\r\n        return maxAttempt;\r\n    },\r\n    default: util_retry_1.DEFAULT_MAX_ATTEMPTS,\r\n};\r\nconst resolveRetryConfig = (input) => {\r\n    var _a;\r\n    const { retryStrategy } = input;\r\n    const maxAttempts = (0, util_middleware_1.normalizeProvider)((_a = input.maxAttempts) !== null && _a !== void 0 ? _a : util_retry_1.DEFAULT_MAX_ATTEMPTS);\r\n    return {\r\n        ...input,\r\n        maxAttempts,\r\n        retryStrategy: async () => {\r\n            if (retryStrategy) {\r\n                return retryStrategy;\r\n            }\r\n            const retryMode = await (0, util_middleware_1.normalizeProvider)(input.retryMode)();\r\n            if (retryMode === util_retry_1.RETRY_MODES.ADAPTIVE) {\r\n                return new util_retry_1.AdaptiveRetryStrategy(maxAttempts);\r\n            }\r\n            return new util_retry_1.StandardRetryStrategy(maxAttempts);\r\n        },\r\n    };\r\n};\r\nexports.resolveRetryConfig = resolveRetryConfig;\r\nexports.ENV_RETRY_MODE = \"AWS_RETRY_MODE\";\r\nexports.CONFIG_RETRY_MODE = \"retry_mode\";\r\nexports.NODE_RETRY_MODE_CONFIG_OPTIONS = {\r\n    environmentVariableSelector: (env) => env[exports.ENV_RETRY_MODE],\r\n    configFileSelector: (profile) => profile[exports.CONFIG_RETRY_MODE],\r\n    default: util_retry_1.DEFAULT_RETRY_MODE,\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}