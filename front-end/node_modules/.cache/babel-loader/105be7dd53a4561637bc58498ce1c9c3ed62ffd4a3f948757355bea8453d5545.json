{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getRetryAfterHint = exports.getRetryPlugin = exports.retryMiddlewareOptions = exports.retryMiddleware = void 0;\nconst protocol_http_1 = require(\"@aws-sdk/protocol-http\");\nconst service_error_classification_1 = require(\"@aws-sdk/service-error-classification\");\nconst util_retry_1 = require(\"@aws-sdk/util-retry\");\nconst uuid_1 = require(\"uuid\");\nconst util_1 = require(\"./util\");\nconst retryMiddleware = options => (next, context) => async args => {\n  let retryStrategy = await options.retryStrategy();\n  const maxAttempts = await options.maxAttempts();\n  if (isRetryStrategyV2(retryStrategy)) {\n    retryStrategy = retryStrategy;\n    let retryToken = await retryStrategy.acquireInitialRetryToken(context[\"partition_id\"]);\n    let lastError = new Error();\n    let attempts = 0;\n    let totalRetryDelay = 0;\n    const {\n      request\n    } = args;\n    if (protocol_http_1.HttpRequest.isInstance(request)) {\n      request.headers[util_retry_1.INVOCATION_ID_HEADER] = (0, uuid_1.v4)();\n    }\n    while (true) {\n      try {\n        if (protocol_http_1.HttpRequest.isInstance(request)) {\n          request.headers[util_retry_1.REQUEST_HEADER] = `attempt=${attempts + 1}; max=${maxAttempts}`;\n        }\n        const {\n          response,\n          output\n        } = await next(args);\n        retryStrategy.recordSuccess(retryToken);\n        output.$metadata.attempts = attempts + 1;\n        output.$metadata.totalRetryDelay = totalRetryDelay;\n        return {\n          response,\n          output\n        };\n      } catch (e) {\n        const retryErrorInfo = getRetyErrorInto(e);\n        lastError = (0, util_1.asSdkError)(e);\n        try {\n          retryToken = await retryStrategy.refreshRetryTokenForRetry(retryToken, retryErrorInfo);\n        } catch (refreshError) {\n          if (!lastError.$metadata) {\n            lastError.$metadata = {};\n          }\n          lastError.$metadata.attempts = attempts + 1;\n          lastError.$metadata.totalRetryDelay = totalRetryDelay;\n          throw lastError;\n        }\n        attempts = retryToken.getRetryCount();\n        const delay = retryToken.getRetryDelay();\n        totalRetryDelay += delay;\n        await new Promise(resolve => setTimeout(resolve, delay));\n      }\n    }\n  } else {\n    retryStrategy = retryStrategy;\n    if (retryStrategy === null || retryStrategy === void 0 ? void 0 : retryStrategy.mode) context.userAgent = [...(context.userAgent || []), [\"cfg/retry-mode\", retryStrategy.mode]];\n    return retryStrategy.retry(next, args);\n  }\n};\nexports.retryMiddleware = retryMiddleware;\nconst isRetryStrategyV2 = retryStrategy => typeof retryStrategy.acquireInitialRetryToken !== \"undefined\" && typeof retryStrategy.refreshRetryTokenForRetry !== \"undefined\" && typeof retryStrategy.recordSuccess !== \"undefined\";\nconst getRetyErrorInto = error => {\n  const errorInfo = {\n    errorType: getRetryErrorType(error)\n  };\n  const retryAfterHint = (0, exports.getRetryAfterHint)(error.$response);\n  if (retryAfterHint) {\n    errorInfo.retryAfterHint = retryAfterHint;\n  }\n  return errorInfo;\n};\nconst getRetryErrorType = error => {\n  if ((0, service_error_classification_1.isThrottlingError)(error)) return \"THROTTLING\";\n  if ((0, service_error_classification_1.isTransientError)(error)) return \"TRANSIENT\";\n  if ((0, service_error_classification_1.isServerError)(error)) return \"SERVER_ERROR\";\n  return \"CLIENT_ERROR\";\n};\nexports.retryMiddlewareOptions = {\n  name: \"retryMiddleware\",\n  tags: [\"RETRY\"],\n  step: \"finalizeRequest\",\n  priority: \"high\",\n  override: true\n};\nconst getRetryPlugin = options => ({\n  applyToStack: clientStack => {\n    clientStack.add((0, exports.retryMiddleware)(options), exports.retryMiddlewareOptions);\n  }\n});\nexports.getRetryPlugin = getRetryPlugin;\nconst getRetryAfterHint = response => {\n  if (!protocol_http_1.HttpResponse.isInstance(response)) return;\n  const retryAfterHeaderName = Object.keys(response.headers).find(key => key.toLowerCase() === \"retry-after\");\n  if (!retryAfterHeaderName) return;\n  const retryAfter = response.headers[retryAfterHeaderName];\n  const retryAfterSeconds = Number(retryAfter);\n  if (!Number.isNaN(retryAfterSeconds)) return new Date(retryAfterSeconds * 1000);\n  const retryAfterDate = new Date(retryAfter);\n  return retryAfterDate;\n};\nexports.getRetryAfterHint = getRetryAfterHint;","map":{"version":3,"names":["Object","defineProperty","exports","value","getRetryAfterHint","getRetryPlugin","retryMiddlewareOptions","retryMiddleware","protocol_http_1","require","service_error_classification_1","util_retry_1","uuid_1","util_1","options","next","context","args","retryStrategy","maxAttempts","isRetryStrategyV2","retryToken","acquireInitialRetryToken","lastError","Error","attempts","totalRetryDelay","request","HttpRequest","isInstance","headers","INVOCATION_ID_HEADER","v4","REQUEST_HEADER","response","output","recordSuccess","$metadata","e","retryErrorInfo","getRetyErrorInto","asSdkError","refreshRetryTokenForRetry","refreshError","getRetryCount","delay","getRetryDelay","Promise","resolve","setTimeout","mode","userAgent","retry","error","errorInfo","errorType","getRetryErrorType","retryAfterHint","$response","isThrottlingError","isTransientError","isServerError","name","tags","step","priority","override","applyToStack","clientStack","add","HttpResponse","retryAfterHeaderName","keys","find","key","toLowerCase","retryAfter","retryAfterSeconds","Number","isNaN","Date","retryAfterDate"],"sources":["C:/Users/91930/Desktop/Github projects/Pharmacy Demo/back-end/node_modules/@aws-sdk/middleware-retry/dist-cjs/retryMiddleware.js"],"sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.getRetryAfterHint = exports.getRetryPlugin = exports.retryMiddlewareOptions = exports.retryMiddleware = void 0;\r\nconst protocol_http_1 = require(\"@aws-sdk/protocol-http\");\r\nconst service_error_classification_1 = require(\"@aws-sdk/service-error-classification\");\r\nconst util_retry_1 = require(\"@aws-sdk/util-retry\");\r\nconst uuid_1 = require(\"uuid\");\r\nconst util_1 = require(\"./util\");\r\nconst retryMiddleware = (options) => (next, context) => async (args) => {\r\n    let retryStrategy = await options.retryStrategy();\r\n    const maxAttempts = await options.maxAttempts();\r\n    if (isRetryStrategyV2(retryStrategy)) {\r\n        retryStrategy = retryStrategy;\r\n        let retryToken = await retryStrategy.acquireInitialRetryToken(context[\"partition_id\"]);\r\n        let lastError = new Error();\r\n        let attempts = 0;\r\n        let totalRetryDelay = 0;\r\n        const { request } = args;\r\n        if (protocol_http_1.HttpRequest.isInstance(request)) {\r\n            request.headers[util_retry_1.INVOCATION_ID_HEADER] = (0, uuid_1.v4)();\r\n        }\r\n        while (true) {\r\n            try {\r\n                if (protocol_http_1.HttpRequest.isInstance(request)) {\r\n                    request.headers[util_retry_1.REQUEST_HEADER] = `attempt=${attempts + 1}; max=${maxAttempts}`;\r\n                }\r\n                const { response, output } = await next(args);\r\n                retryStrategy.recordSuccess(retryToken);\r\n                output.$metadata.attempts = attempts + 1;\r\n                output.$metadata.totalRetryDelay = totalRetryDelay;\r\n                return { response, output };\r\n            }\r\n            catch (e) {\r\n                const retryErrorInfo = getRetyErrorInto(e);\r\n                lastError = (0, util_1.asSdkError)(e);\r\n                try {\r\n                    retryToken = await retryStrategy.refreshRetryTokenForRetry(retryToken, retryErrorInfo);\r\n                }\r\n                catch (refreshError) {\r\n                    if (!lastError.$metadata) {\r\n                        lastError.$metadata = {};\r\n                    }\r\n                    lastError.$metadata.attempts = attempts + 1;\r\n                    lastError.$metadata.totalRetryDelay = totalRetryDelay;\r\n                    throw lastError;\r\n                }\r\n                attempts = retryToken.getRetryCount();\r\n                const delay = retryToken.getRetryDelay();\r\n                totalRetryDelay += delay;\r\n                await new Promise((resolve) => setTimeout(resolve, delay));\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        retryStrategy = retryStrategy;\r\n        if (retryStrategy === null || retryStrategy === void 0 ? void 0 : retryStrategy.mode)\r\n            context.userAgent = [...(context.userAgent || []), [\"cfg/retry-mode\", retryStrategy.mode]];\r\n        return retryStrategy.retry(next, args);\r\n    }\r\n};\r\nexports.retryMiddleware = retryMiddleware;\r\nconst isRetryStrategyV2 = (retryStrategy) => typeof retryStrategy.acquireInitialRetryToken !== \"undefined\" &&\r\n    typeof retryStrategy.refreshRetryTokenForRetry !== \"undefined\" &&\r\n    typeof retryStrategy.recordSuccess !== \"undefined\";\r\nconst getRetyErrorInto = (error) => {\r\n    const errorInfo = {\r\n        errorType: getRetryErrorType(error),\r\n    };\r\n    const retryAfterHint = (0, exports.getRetryAfterHint)(error.$response);\r\n    if (retryAfterHint) {\r\n        errorInfo.retryAfterHint = retryAfterHint;\r\n    }\r\n    return errorInfo;\r\n};\r\nconst getRetryErrorType = (error) => {\r\n    if ((0, service_error_classification_1.isThrottlingError)(error))\r\n        return \"THROTTLING\";\r\n    if ((0, service_error_classification_1.isTransientError)(error))\r\n        return \"TRANSIENT\";\r\n    if ((0, service_error_classification_1.isServerError)(error))\r\n        return \"SERVER_ERROR\";\r\n    return \"CLIENT_ERROR\";\r\n};\r\nexports.retryMiddlewareOptions = {\r\n    name: \"retryMiddleware\",\r\n    tags: [\"RETRY\"],\r\n    step: \"finalizeRequest\",\r\n    priority: \"high\",\r\n    override: true,\r\n};\r\nconst getRetryPlugin = (options) => ({\r\n    applyToStack: (clientStack) => {\r\n        clientStack.add((0, exports.retryMiddleware)(options), exports.retryMiddlewareOptions);\r\n    },\r\n});\r\nexports.getRetryPlugin = getRetryPlugin;\r\nconst getRetryAfterHint = (response) => {\r\n    if (!protocol_http_1.HttpResponse.isInstance(response))\r\n        return;\r\n    const retryAfterHeaderName = Object.keys(response.headers).find((key) => key.toLowerCase() === \"retry-after\");\r\n    if (!retryAfterHeaderName)\r\n        return;\r\n    const retryAfter = response.headers[retryAfterHeaderName];\r\n    const retryAfterSeconds = Number(retryAfter);\r\n    if (!Number.isNaN(retryAfterSeconds))\r\n        return new Date(retryAfterSeconds * 1000);\r\n    const retryAfterDate = new Date(retryAfter);\r\n    return retryAfterDate;\r\n};\r\nexports.getRetryAfterHint = getRetryAfterHint;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}