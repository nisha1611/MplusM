{"ast":null,"code":"/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Tobias Koppers @sokra, Zackary Jackson @ScriptedAlchemy, Marais Rossouw @maraisr\r\n*/\n\n\"use strict\";\n\nconst createSchemaValidation = require(\"../util/create-schema-validation\");\nconst ContainerEntryDependency = require(\"./ContainerEntryDependency\");\nconst ContainerEntryModuleFactory = require(\"./ContainerEntryModuleFactory\");\nconst ContainerExposedDependency = require(\"./ContainerExposedDependency\");\nconst {\n  parseOptions\n} = require(\"./options\");\n\n/** @typedef {import(\"../../declarations/plugins/container/ContainerPlugin\").ContainerPluginOptions} ContainerPluginOptions */\n/** @typedef {import(\"../Compiler\")} Compiler */\n\nconst validate = createSchemaValidation(require(\"../../schemas/plugins/container/ContainerPlugin.check.js\"), () => require(\"../../schemas/plugins/container/ContainerPlugin.json\"), {\n  name: \"Container Plugin\",\n  baseDataPath: \"options\"\n});\nconst PLUGIN_NAME = \"ContainerPlugin\";\nclass ContainerPlugin {\n  /**\r\n   * @param {ContainerPluginOptions} options options\r\n   */\n  constructor(options) {\n    validate(options);\n    this._options = {\n      name: options.name,\n      shareScope: options.shareScope || \"default\",\n      library: options.library || {\n        type: \"var\",\n        name: options.name\n      },\n      runtime: options.runtime,\n      filename: options.filename || undefined,\n      exposes: parseOptions(options.exposes, item => ({\n        import: Array.isArray(item) ? item : [item],\n        name: undefined\n      }), item => ({\n        import: Array.isArray(item.import) ? item.import : [item.import],\n        name: item.name || undefined\n      }))\n    };\n  }\n\n  /**\r\n   * Apply the plugin\r\n   * @param {Compiler} compiler the compiler instance\r\n   * @returns {void}\r\n   */\n  apply(compiler) {\n    const {\n      name,\n      exposes,\n      shareScope,\n      filename,\n      library,\n      runtime\n    } = this._options;\n    compiler.options.output.enabledLibraryTypes.push(library.type);\n    compiler.hooks.make.tapAsync(PLUGIN_NAME, (compilation, callback) => {\n      const dep = new ContainerEntryDependency(name, exposes, shareScope);\n      dep.loc = {\n        name\n      };\n      compilation.addEntry(compilation.options.context, dep, {\n        name,\n        filename,\n        runtime,\n        library\n      }, error => {\n        if (error) return callback(error);\n        callback();\n      });\n    });\n    compiler.hooks.thisCompilation.tap(PLUGIN_NAME, (compilation, _ref) => {\n      let {\n        normalModuleFactory\n      } = _ref;\n      compilation.dependencyFactories.set(ContainerEntryDependency, new ContainerEntryModuleFactory());\n      compilation.dependencyFactories.set(ContainerExposedDependency, normalModuleFactory);\n    });\n  }\n}\nmodule.exports = ContainerPlugin;","map":{"version":3,"names":["createSchemaValidation","require","ContainerEntryDependency","ContainerEntryModuleFactory","ContainerExposedDependency","parseOptions","validate","name","baseDataPath","PLUGIN_NAME","ContainerPlugin","constructor","options","_options","shareScope","library","type","runtime","filename","undefined","exposes","item","import","Array","isArray","apply","compiler","output","enabledLibraryTypes","push","hooks","make","tapAsync","compilation","callback","dep","loc","addEntry","context","error","thisCompilation","tap","normalModuleFactory","dependencyFactories","set","module","exports"],"sources":["C:/Users/91930/Desktop/Github projects/Pharmacy Demo/front-end/node_modules/webpack/lib/container/ContainerPlugin.js"],"sourcesContent":["/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Tobias Koppers @sokra, Zackary Jackson @ScriptedAlchemy, Marais Rossouw @maraisr\r\n*/\r\n\r\n\"use strict\";\r\n\r\nconst createSchemaValidation = require(\"../util/create-schema-validation\");\r\nconst ContainerEntryDependency = require(\"./ContainerEntryDependency\");\r\nconst ContainerEntryModuleFactory = require(\"./ContainerEntryModuleFactory\");\r\nconst ContainerExposedDependency = require(\"./ContainerExposedDependency\");\r\nconst { parseOptions } = require(\"./options\");\r\n\r\n/** @typedef {import(\"../../declarations/plugins/container/ContainerPlugin\").ContainerPluginOptions} ContainerPluginOptions */\r\n/** @typedef {import(\"../Compiler\")} Compiler */\r\n\r\nconst validate = createSchemaValidation(\r\n\trequire(\"../../schemas/plugins/container/ContainerPlugin.check.js\"),\r\n\t() => require(\"../../schemas/plugins/container/ContainerPlugin.json\"),\r\n\t{\r\n\t\tname: \"Container Plugin\",\r\n\t\tbaseDataPath: \"options\"\r\n\t}\r\n);\r\n\r\nconst PLUGIN_NAME = \"ContainerPlugin\";\r\n\r\nclass ContainerPlugin {\r\n\t/**\r\n\t * @param {ContainerPluginOptions} options options\r\n\t */\r\n\tconstructor(options) {\r\n\t\tvalidate(options);\r\n\r\n\t\tthis._options = {\r\n\t\t\tname: options.name,\r\n\t\t\tshareScope: options.shareScope || \"default\",\r\n\t\t\tlibrary: options.library || {\r\n\t\t\t\ttype: \"var\",\r\n\t\t\t\tname: options.name\r\n\t\t\t},\r\n\t\t\truntime: options.runtime,\r\n\t\t\tfilename: options.filename || undefined,\r\n\t\t\texposes: parseOptions(\r\n\t\t\t\toptions.exposes,\r\n\t\t\t\titem => ({\r\n\t\t\t\t\timport: Array.isArray(item) ? item : [item],\r\n\t\t\t\t\tname: undefined\r\n\t\t\t\t}),\r\n\t\t\t\titem => ({\r\n\t\t\t\t\timport: Array.isArray(item.import) ? item.import : [item.import],\r\n\t\t\t\t\tname: item.name || undefined\r\n\t\t\t\t})\r\n\t\t\t)\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * Apply the plugin\r\n\t * @param {Compiler} compiler the compiler instance\r\n\t * @returns {void}\r\n\t */\r\n\tapply(compiler) {\r\n\t\tconst { name, exposes, shareScope, filename, library, runtime } =\r\n\t\t\tthis._options;\r\n\r\n\t\tcompiler.options.output.enabledLibraryTypes.push(library.type);\r\n\r\n\t\tcompiler.hooks.make.tapAsync(PLUGIN_NAME, (compilation, callback) => {\r\n\t\t\tconst dep = new ContainerEntryDependency(name, exposes, shareScope);\r\n\t\t\tdep.loc = { name };\r\n\t\t\tcompilation.addEntry(\r\n\t\t\t\tcompilation.options.context,\r\n\t\t\t\tdep,\r\n\t\t\t\t{\r\n\t\t\t\t\tname,\r\n\t\t\t\t\tfilename,\r\n\t\t\t\t\truntime,\r\n\t\t\t\t\tlibrary\r\n\t\t\t\t},\r\n\t\t\t\terror => {\r\n\t\t\t\t\tif (error) return callback(error);\r\n\t\t\t\t\tcallback();\r\n\t\t\t\t}\r\n\t\t\t);\r\n\t\t});\r\n\r\n\t\tcompiler.hooks.thisCompilation.tap(\r\n\t\t\tPLUGIN_NAME,\r\n\t\t\t(compilation, { normalModuleFactory }) => {\r\n\t\t\t\tcompilation.dependencyFactories.set(\r\n\t\t\t\t\tContainerEntryDependency,\r\n\t\t\t\t\tnew ContainerEntryModuleFactory()\r\n\t\t\t\t);\r\n\r\n\t\t\t\tcompilation.dependencyFactories.set(\r\n\t\t\t\t\tContainerExposedDependency,\r\n\t\t\t\t\tnormalModuleFactory\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n}\r\n\r\nmodule.exports = ContainerPlugin;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}