{"ast":null,"code":"'use strict';\n\nconst opts = require('./propertyOptions');\nclass VirtualOptions {\n  constructor(obj) {\n    Object.assign(this, obj);\n    if (obj != null && obj.options != null) {\n      this.options = Object.assign({}, obj.options);\n    }\n  }\n}\n\n/**\r\n * Marks this virtual as a populate virtual, and specifies the model to\r\n * use for populate.\r\n *\r\n * @api public\r\n * @property ref\r\n * @memberOf VirtualOptions\r\n * @type {String|Model|Function}\r\n * @instance\r\n */\n\nObject.defineProperty(VirtualOptions.prototype, 'ref', opts);\n\n/**\r\n * Marks this virtual as a populate virtual, and specifies the path that\r\n * contains the name of the model to populate\r\n *\r\n * @api public\r\n * @property refPath\r\n * @memberOf VirtualOptions\r\n * @type {String|Function}\r\n * @instance\r\n */\n\nObject.defineProperty(VirtualOptions.prototype, 'refPath', opts);\n\n/**\r\n * The name of the property in the local model to match to `foreignField`\r\n * in the foreign model.\r\n *\r\n * @api public\r\n * @property localField\r\n * @memberOf VirtualOptions\r\n * @type {String|Function}\r\n * @instance\r\n */\n\nObject.defineProperty(VirtualOptions.prototype, 'localField', opts);\n\n/**\r\n * The name of the property in the foreign model to match to `localField`\r\n * in the local model.\r\n *\r\n * @api public\r\n * @property foreignField\r\n * @memberOf VirtualOptions\r\n * @type {String|Function}\r\n * @instance\r\n */\n\nObject.defineProperty(VirtualOptions.prototype, 'foreignField', opts);\n\n/**\r\n * Whether to populate this virtual as a single document (true) or an\r\n * array of documents (false).\r\n *\r\n * @api public\r\n * @property justOne\r\n * @memberOf VirtualOptions\r\n * @type {Boolean}\r\n * @instance\r\n */\n\nObject.defineProperty(VirtualOptions.prototype, 'justOne', opts);\n\n/**\r\n * If true, populate just the number of documents where `localField`\r\n * matches `foreignField`, as opposed to the documents themselves.\r\n *\r\n * If `count` is set, it overrides `justOne`.\r\n *\r\n * @api public\r\n * @property count\r\n * @memberOf VirtualOptions\r\n * @type {Boolean}\r\n * @instance\r\n */\n\nObject.defineProperty(VirtualOptions.prototype, 'count', opts);\n\n/**\r\n * Add an additional filter to populate, in addition to `localField`\r\n * matches `foreignField`.\r\n *\r\n * @api public\r\n * @property match\r\n * @memberOf VirtualOptions\r\n * @type {Object|Function}\r\n * @instance\r\n */\n\nObject.defineProperty(VirtualOptions.prototype, 'match', opts);\n\n/**\r\n * Additional options to pass to the query used to `populate()`:\r\n *\r\n * - `sort`\r\n * - `skip`\r\n * - `limit`\r\n *\r\n * @api public\r\n * @property options\r\n * @memberOf VirtualOptions\r\n * @type {Object}\r\n * @instance\r\n */\n\nObject.defineProperty(VirtualOptions.prototype, 'options', opts);\n\n/**\r\n * If true, add a `skip` to the query used to `populate()`.\r\n *\r\n * @api public\r\n * @property skip\r\n * @memberOf VirtualOptions\r\n * @type {Number}\r\n * @instance\r\n */\n\nObject.defineProperty(VirtualOptions.prototype, 'skip', opts);\n\n/**\r\n * If true, add a `limit` to the query used to `populate()`.\r\n *\r\n * @api public\r\n * @property limit\r\n * @memberOf VirtualOptions\r\n * @type {Number}\r\n * @instance\r\n */\n\nObject.defineProperty(VirtualOptions.prototype, 'limit', opts);\n\n/**\r\n * The `limit` option for `populate()` has [some unfortunate edge cases](/docs/populate.html#query-conditions)\r\n * when working with multiple documents, like `.find().populate()`. The\r\n * `perDocumentLimit` option makes `populate()` execute a separate query\r\n * for each document returned from `find()` to ensure each document\r\n * gets up to `perDocumentLimit` populated docs if possible.\r\n *\r\n * @api public\r\n * @property perDocumentLimit\r\n * @memberOf VirtualOptions\r\n * @type {Number}\r\n * @instance\r\n */\n\nObject.defineProperty(VirtualOptions.prototype, 'perDocumentLimit', opts);\nmodule.exports = VirtualOptions;","map":{"version":3,"names":["opts","require","VirtualOptions","constructor","obj","Object","assign","options","defineProperty","prototype","module","exports"],"sources":["C:/Users/91930/Desktop/Github projects/Pharmacy Demo/back-end/node_modules/mongoose/lib/options/VirtualOptions.js"],"sourcesContent":["'use strict';\r\n\r\nconst opts = require('./propertyOptions');\r\n\r\nclass VirtualOptions {\r\n  constructor(obj) {\r\n    Object.assign(this, obj);\r\n\r\n    if (obj != null && obj.options != null) {\r\n      this.options = Object.assign({}, obj.options);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Marks this virtual as a populate virtual, and specifies the model to\r\n * use for populate.\r\n *\r\n * @api public\r\n * @property ref\r\n * @memberOf VirtualOptions\r\n * @type {String|Model|Function}\r\n * @instance\r\n */\r\n\r\nObject.defineProperty(VirtualOptions.prototype, 'ref', opts);\r\n\r\n/**\r\n * Marks this virtual as a populate virtual, and specifies the path that\r\n * contains the name of the model to populate\r\n *\r\n * @api public\r\n * @property refPath\r\n * @memberOf VirtualOptions\r\n * @type {String|Function}\r\n * @instance\r\n */\r\n\r\nObject.defineProperty(VirtualOptions.prototype, 'refPath', opts);\r\n\r\n/**\r\n * The name of the property in the local model to match to `foreignField`\r\n * in the foreign model.\r\n *\r\n * @api public\r\n * @property localField\r\n * @memberOf VirtualOptions\r\n * @type {String|Function}\r\n * @instance\r\n */\r\n\r\nObject.defineProperty(VirtualOptions.prototype, 'localField', opts);\r\n\r\n/**\r\n * The name of the property in the foreign model to match to `localField`\r\n * in the local model.\r\n *\r\n * @api public\r\n * @property foreignField\r\n * @memberOf VirtualOptions\r\n * @type {String|Function}\r\n * @instance\r\n */\r\n\r\nObject.defineProperty(VirtualOptions.prototype, 'foreignField', opts);\r\n\r\n/**\r\n * Whether to populate this virtual as a single document (true) or an\r\n * array of documents (false).\r\n *\r\n * @api public\r\n * @property justOne\r\n * @memberOf VirtualOptions\r\n * @type {Boolean}\r\n * @instance\r\n */\r\n\r\nObject.defineProperty(VirtualOptions.prototype, 'justOne', opts);\r\n\r\n/**\r\n * If true, populate just the number of documents where `localField`\r\n * matches `foreignField`, as opposed to the documents themselves.\r\n *\r\n * If `count` is set, it overrides `justOne`.\r\n *\r\n * @api public\r\n * @property count\r\n * @memberOf VirtualOptions\r\n * @type {Boolean}\r\n * @instance\r\n */\r\n\r\nObject.defineProperty(VirtualOptions.prototype, 'count', opts);\r\n\r\n/**\r\n * Add an additional filter to populate, in addition to `localField`\r\n * matches `foreignField`.\r\n *\r\n * @api public\r\n * @property match\r\n * @memberOf VirtualOptions\r\n * @type {Object|Function}\r\n * @instance\r\n */\r\n\r\nObject.defineProperty(VirtualOptions.prototype, 'match', opts);\r\n\r\n/**\r\n * Additional options to pass to the query used to `populate()`:\r\n *\r\n * - `sort`\r\n * - `skip`\r\n * - `limit`\r\n *\r\n * @api public\r\n * @property options\r\n * @memberOf VirtualOptions\r\n * @type {Object}\r\n * @instance\r\n */\r\n\r\nObject.defineProperty(VirtualOptions.prototype, 'options', opts);\r\n\r\n/**\r\n * If true, add a `skip` to the query used to `populate()`.\r\n *\r\n * @api public\r\n * @property skip\r\n * @memberOf VirtualOptions\r\n * @type {Number}\r\n * @instance\r\n */\r\n\r\nObject.defineProperty(VirtualOptions.prototype, 'skip', opts);\r\n\r\n/**\r\n * If true, add a `limit` to the query used to `populate()`.\r\n *\r\n * @api public\r\n * @property limit\r\n * @memberOf VirtualOptions\r\n * @type {Number}\r\n * @instance\r\n */\r\n\r\nObject.defineProperty(VirtualOptions.prototype, 'limit', opts);\r\n\r\n/**\r\n * The `limit` option for `populate()` has [some unfortunate edge cases](/docs/populate.html#query-conditions)\r\n * when working with multiple documents, like `.find().populate()`. The\r\n * `perDocumentLimit` option makes `populate()` execute a separate query\r\n * for each document returned from `find()` to ensure each document\r\n * gets up to `perDocumentLimit` populated docs if possible.\r\n *\r\n * @api public\r\n * @property perDocumentLimit\r\n * @memberOf VirtualOptions\r\n * @type {Number}\r\n * @instance\r\n */\r\n\r\nObject.defineProperty(VirtualOptions.prototype, 'perDocumentLimit', opts);\r\n\r\nmodule.exports = VirtualOptions;\r\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,IAAI,GAAGC,OAAO,CAAC,mBAAmB,CAAC;AAEzC,MAAMC,cAAc,CAAC;EACnBC,WAAW,CAACC,GAAG,EAAE;IACfC,MAAM,CAACC,MAAM,CAAC,IAAI,EAAEF,GAAG,CAAC;IAExB,IAAIA,GAAG,IAAI,IAAI,IAAIA,GAAG,CAACG,OAAO,IAAI,IAAI,EAAE;MACtC,IAAI,CAACA,OAAO,GAAGF,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEF,GAAG,CAACG,OAAO,CAAC;IAC/C;EACF;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAF,MAAM,CAACG,cAAc,CAACN,cAAc,CAACO,SAAS,EAAE,KAAK,EAAET,IAAI,CAAC;;AAE5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAK,MAAM,CAACG,cAAc,CAACN,cAAc,CAACO,SAAS,EAAE,SAAS,EAAET,IAAI,CAAC;;AAEhE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAK,MAAM,CAACG,cAAc,CAACN,cAAc,CAACO,SAAS,EAAE,YAAY,EAAET,IAAI,CAAC;;AAEnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAK,MAAM,CAACG,cAAc,CAACN,cAAc,CAACO,SAAS,EAAE,cAAc,EAAET,IAAI,CAAC;;AAErE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAK,MAAM,CAACG,cAAc,CAACN,cAAc,CAACO,SAAS,EAAE,SAAS,EAAET,IAAI,CAAC;;AAEhE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAK,MAAM,CAACG,cAAc,CAACN,cAAc,CAACO,SAAS,EAAE,OAAO,EAAET,IAAI,CAAC;;AAE9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAK,MAAM,CAACG,cAAc,CAACN,cAAc,CAACO,SAAS,EAAE,OAAO,EAAET,IAAI,CAAC;;AAE9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAK,MAAM,CAACG,cAAc,CAACN,cAAc,CAACO,SAAS,EAAE,SAAS,EAAET,IAAI,CAAC;;AAEhE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAK,MAAM,CAACG,cAAc,CAACN,cAAc,CAACO,SAAS,EAAE,MAAM,EAAET,IAAI,CAAC;;AAE7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAK,MAAM,CAACG,cAAc,CAACN,cAAc,CAACO,SAAS,EAAE,OAAO,EAAET,IAAI,CAAC;;AAE9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAK,MAAM,CAACG,cAAc,CAACN,cAAc,CAACO,SAAS,EAAE,kBAAkB,EAAET,IAAI,CAAC;AAEzEU,MAAM,CAACC,OAAO,GAAGT,cAAc"},"metadata":{},"sourceType":"script","externalDependencies":[]}