{"ast":null,"code":"/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n*/\n\n\"use strict\";\n\nconst memoize = require(\"../util/memoize\");\nconst LAZY_TARGET = Symbol(\"lazy serialization target\");\nconst LAZY_SERIALIZED_VALUE = Symbol(\"lazy serialization data\");\n\n/**\r\n * @template DeserializedType\r\n * @template SerializedType\r\n */\nclass SerializerMiddleware {\n  /* istanbul ignore next */\n  /**\r\n   * @abstract\r\n   * @param {DeserializedType} data data\r\n   * @param {Object} context context object\r\n   * @returns {SerializedType|Promise<SerializedType>} serialized data\r\n   */\n  serialize(data, context) {\n    const AbstractMethodError = require(\"../AbstractMethodError\");\n    throw new AbstractMethodError();\n  }\n\n  /* istanbul ignore next */\n  /**\r\n   * @abstract\r\n   * @param {SerializedType} data data\r\n   * @param {Object} context context object\r\n   * @returns {DeserializedType|Promise<DeserializedType>} deserialized data\r\n   */\n  deserialize(data, context) {\n    const AbstractMethodError = require(\"../AbstractMethodError\");\n    throw new AbstractMethodError();\n  }\n\n  /**\r\n   * @param {any | function(): Promise<any> | any} value contained value or function to value\r\n   * @param {SerializerMiddleware<any, any>} target target middleware\r\n   * @param {object=} options lazy options\r\n   * @param {any=} serializedValue serialized value\r\n   * @returns {function(): Promise<any> | any} lazy function\r\n   */\n  static createLazy(value, target) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    let serializedValue = arguments.length > 3 ? arguments[3] : undefined;\n    if (SerializerMiddleware.isLazy(value, target)) return value;\n    const fn = typeof value === \"function\" ? value : () => value;\n    fn[LAZY_TARGET] = target;\n    /** @type {any} */\n    fn.options = options;\n    fn[LAZY_SERIALIZED_VALUE] = serializedValue;\n    return fn;\n  }\n\n  /**\r\n   * @param {function(): Promise<any> | any} fn lazy function\r\n   * @param {SerializerMiddleware<any, any>=} target target middleware\r\n   * @returns {boolean} true, when fn is a lazy function (optionally of that target)\r\n   */\n  static isLazy(fn, target) {\n    if (typeof fn !== \"function\") return false;\n    const t = fn[LAZY_TARGET];\n    return target ? t === target : !!t;\n  }\n\n  /**\r\n   * @param {function(): Promise<any> | any} fn lazy function\r\n   * @returns {object} options\r\n   */\n  static getLazyOptions(fn) {\n    if (typeof fn !== \"function\") return undefined;\n    return (/** @type {any} */fn.options\n    );\n  }\n\n  /**\r\n   * @param {function(): Promise<any> | any} fn lazy function\r\n   * @returns {any} serialized value\r\n   */\n  static getLazySerializedValue(fn) {\n    if (typeof fn !== \"function\") return undefined;\n    return fn[LAZY_SERIALIZED_VALUE];\n  }\n\n  /**\r\n   * @param {function(): Promise<any> | any} fn lazy function\r\n   * @param {any} value serialized value\r\n   * @returns {void}\r\n   */\n  static setLazySerializedValue(fn, value) {\n    fn[LAZY_SERIALIZED_VALUE] = value;\n  }\n\n  /**\r\n   * @param {function(): Promise<any> | any} lazy lazy function\r\n   * @param {function(any): Promise<any> | any} serialize serialize function\r\n   * @returns {function(): Promise<any> | any} new lazy\r\n   */\n  static serializeLazy(lazy, serialize) {\n    const fn = memoize(() => {\n      const r = lazy();\n      if (r && typeof r.then === \"function\") {\n        return r.then(data => data && serialize(data));\n      }\n      return serialize(r);\n    });\n    fn[LAZY_TARGET] = lazy[LAZY_TARGET];\n    /** @type {any} */\n    fn.options = /** @type {any} */lazy.options;\n    lazy[LAZY_SERIALIZED_VALUE] = fn;\n    return fn;\n  }\n\n  /**\r\n   * @param {function(): Promise<any> | any} lazy lazy function\r\n   * @param {function(any): Promise<any> | any} deserialize deserialize function\r\n   * @returns {function(): Promise<any> | any} new lazy\r\n   */\n  static deserializeLazy(lazy, deserialize) {\n    const fn = memoize(() => {\n      const r = lazy();\n      if (r && typeof r.then === \"function\") {\n        return r.then(data => deserialize(data));\n      }\n      return deserialize(r);\n    });\n    fn[LAZY_TARGET] = lazy[LAZY_TARGET];\n    /** @type {any} */\n    fn.options = /** @type {any} */lazy.options;\n    fn[LAZY_SERIALIZED_VALUE] = lazy;\n    return fn;\n  }\n\n  /**\r\n   * @param {function(): Promise<any> | any} lazy lazy function\r\n   * @returns {function(): Promise<any> | any} new lazy\r\n   */\n  static unMemoizeLazy(lazy) {\n    if (!SerializerMiddleware.isLazy(lazy)) return lazy;\n    const fn = () => {\n      throw new Error(\"A lazy value that has been unmemorized can't be called again\");\n    };\n    fn[LAZY_SERIALIZED_VALUE] = SerializerMiddleware.unMemoizeLazy(lazy[LAZY_SERIALIZED_VALUE]);\n    fn[LAZY_TARGET] = lazy[LAZY_TARGET];\n    fn.options = /** @type {any} */lazy.options;\n    return fn;\n  }\n}\nmodule.exports = SerializerMiddleware;","map":{"version":3,"names":["memoize","require","LAZY_TARGET","Symbol","LAZY_SERIALIZED_VALUE","SerializerMiddleware","serialize","data","context","AbstractMethodError","deserialize","createLazy","value","target","options","serializedValue","isLazy","fn","t","getLazyOptions","undefined","getLazySerializedValue","setLazySerializedValue","serializeLazy","lazy","r","then","deserializeLazy","unMemoizeLazy","Error","module","exports"],"sources":["C:/Users/91930/Desktop/Github projects/Pharmacy Demo/front-end/node_modules/webpack/lib/serialization/SerializerMiddleware.js"],"sourcesContent":["/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n*/\r\n\r\n\"use strict\";\r\n\r\nconst memoize = require(\"../util/memoize\");\r\n\r\nconst LAZY_TARGET = Symbol(\"lazy serialization target\");\r\nconst LAZY_SERIALIZED_VALUE = Symbol(\"lazy serialization data\");\r\n\r\n/**\r\n * @template DeserializedType\r\n * @template SerializedType\r\n */\r\nclass SerializerMiddleware {\r\n\t/* istanbul ignore next */\r\n\t/**\r\n\t * @abstract\r\n\t * @param {DeserializedType} data data\r\n\t * @param {Object} context context object\r\n\t * @returns {SerializedType|Promise<SerializedType>} serialized data\r\n\t */\r\n\tserialize(data, context) {\r\n\t\tconst AbstractMethodError = require(\"../AbstractMethodError\");\r\n\t\tthrow new AbstractMethodError();\r\n\t}\r\n\r\n\t/* istanbul ignore next */\r\n\t/**\r\n\t * @abstract\r\n\t * @param {SerializedType} data data\r\n\t * @param {Object} context context object\r\n\t * @returns {DeserializedType|Promise<DeserializedType>} deserialized data\r\n\t */\r\n\tdeserialize(data, context) {\r\n\t\tconst AbstractMethodError = require(\"../AbstractMethodError\");\r\n\t\tthrow new AbstractMethodError();\r\n\t}\r\n\r\n\t/**\r\n\t * @param {any | function(): Promise<any> | any} value contained value or function to value\r\n\t * @param {SerializerMiddleware<any, any>} target target middleware\r\n\t * @param {object=} options lazy options\r\n\t * @param {any=} serializedValue serialized value\r\n\t * @returns {function(): Promise<any> | any} lazy function\r\n\t */\r\n\tstatic createLazy(value, target, options = {}, serializedValue) {\r\n\t\tif (SerializerMiddleware.isLazy(value, target)) return value;\r\n\t\tconst fn = typeof value === \"function\" ? value : () => value;\r\n\t\tfn[LAZY_TARGET] = target;\r\n\t\t/** @type {any} */ (fn).options = options;\r\n\t\tfn[LAZY_SERIALIZED_VALUE] = serializedValue;\r\n\t\treturn fn;\r\n\t}\r\n\r\n\t/**\r\n\t * @param {function(): Promise<any> | any} fn lazy function\r\n\t * @param {SerializerMiddleware<any, any>=} target target middleware\r\n\t * @returns {boolean} true, when fn is a lazy function (optionally of that target)\r\n\t */\r\n\tstatic isLazy(fn, target) {\r\n\t\tif (typeof fn !== \"function\") return false;\r\n\t\tconst t = fn[LAZY_TARGET];\r\n\t\treturn target ? t === target : !!t;\r\n\t}\r\n\r\n\t/**\r\n\t * @param {function(): Promise<any> | any} fn lazy function\r\n\t * @returns {object} options\r\n\t */\r\n\tstatic getLazyOptions(fn) {\r\n\t\tif (typeof fn !== \"function\") return undefined;\r\n\t\treturn /** @type {any} */ (fn).options;\r\n\t}\r\n\r\n\t/**\r\n\t * @param {function(): Promise<any> | any} fn lazy function\r\n\t * @returns {any} serialized value\r\n\t */\r\n\tstatic getLazySerializedValue(fn) {\r\n\t\tif (typeof fn !== \"function\") return undefined;\r\n\t\treturn fn[LAZY_SERIALIZED_VALUE];\r\n\t}\r\n\r\n\t/**\r\n\t * @param {function(): Promise<any> | any} fn lazy function\r\n\t * @param {any} value serialized value\r\n\t * @returns {void}\r\n\t */\r\n\tstatic setLazySerializedValue(fn, value) {\r\n\t\tfn[LAZY_SERIALIZED_VALUE] = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @param {function(): Promise<any> | any} lazy lazy function\r\n\t * @param {function(any): Promise<any> | any} serialize serialize function\r\n\t * @returns {function(): Promise<any> | any} new lazy\r\n\t */\r\n\tstatic serializeLazy(lazy, serialize) {\r\n\t\tconst fn = memoize(() => {\r\n\t\t\tconst r = lazy();\r\n\t\t\tif (r && typeof r.then === \"function\") {\r\n\t\t\t\treturn r.then(data => data && serialize(data));\r\n\t\t\t}\r\n\t\t\treturn serialize(r);\r\n\t\t});\r\n\t\tfn[LAZY_TARGET] = lazy[LAZY_TARGET];\r\n\t\t/** @type {any} */ (fn).options = /** @type {any} */ (lazy).options;\r\n\t\tlazy[LAZY_SERIALIZED_VALUE] = fn;\r\n\t\treturn fn;\r\n\t}\r\n\r\n\t/**\r\n\t * @param {function(): Promise<any> | any} lazy lazy function\r\n\t * @param {function(any): Promise<any> | any} deserialize deserialize function\r\n\t * @returns {function(): Promise<any> | any} new lazy\r\n\t */\r\n\tstatic deserializeLazy(lazy, deserialize) {\r\n\t\tconst fn = memoize(() => {\r\n\t\t\tconst r = lazy();\r\n\t\t\tif (r && typeof r.then === \"function\") {\r\n\t\t\t\treturn r.then(data => deserialize(data));\r\n\t\t\t}\r\n\t\t\treturn deserialize(r);\r\n\t\t});\r\n\t\tfn[LAZY_TARGET] = lazy[LAZY_TARGET];\r\n\t\t/** @type {any} */ (fn).options = /** @type {any} */ (lazy).options;\r\n\t\tfn[LAZY_SERIALIZED_VALUE] = lazy;\r\n\t\treturn fn;\r\n\t}\r\n\r\n\t/**\r\n\t * @param {function(): Promise<any> | any} lazy lazy function\r\n\t * @returns {function(): Promise<any> | any} new lazy\r\n\t */\r\n\tstatic unMemoizeLazy(lazy) {\r\n\t\tif (!SerializerMiddleware.isLazy(lazy)) return lazy;\r\n\t\tconst fn = () => {\r\n\t\t\tthrow new Error(\r\n\t\t\t\t\"A lazy value that has been unmemorized can't be called again\"\r\n\t\t\t);\r\n\t\t};\r\n\t\tfn[LAZY_SERIALIZED_VALUE] = SerializerMiddleware.unMemoizeLazy(\r\n\t\t\tlazy[LAZY_SERIALIZED_VALUE]\r\n\t\t);\r\n\t\tfn[LAZY_TARGET] = lazy[LAZY_TARGET];\r\n\t\tfn.options = /** @type {any} */ (lazy).options;\r\n\t\treturn fn;\r\n\t}\r\n}\r\n\r\nmodule.exports = SerializerMiddleware;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}