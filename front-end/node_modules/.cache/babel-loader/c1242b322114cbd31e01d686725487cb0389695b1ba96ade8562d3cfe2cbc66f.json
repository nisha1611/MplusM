{"ast":null,"code":"'use strict';\n\nconst SchemaTypeOptions = require('./SchemaTypeOptions');\n\n/**\r\n * The options defined on a Number schematype.\r\n *\r\n * #### Example:\r\n *\r\n *     const schema = new Schema({ count: Number });\r\n *     schema.path('count').options; // SchemaNumberOptions instance\r\n *\r\n * @api public\r\n * @inherits SchemaTypeOptions\r\n * @constructor SchemaNumberOptions\r\n */\n\nclass SchemaNumberOptions extends SchemaTypeOptions {}\nconst opts = require('./propertyOptions');\n\n/**\r\n * If set, Mongoose adds a validator that checks that this path is at least the\r\n * given `min`.\r\n *\r\n * @api public\r\n * @property min\r\n * @memberOf SchemaNumberOptions\r\n * @type {Number}\r\n * @instance\r\n */\n\nObject.defineProperty(SchemaNumberOptions.prototype, 'min', opts);\n\n/**\r\n * If set, Mongoose adds a validator that checks that this path is less than the\r\n * given `max`.\r\n *\r\n * @api public\r\n * @property max\r\n * @memberOf SchemaNumberOptions\r\n * @type {Number}\r\n * @instance\r\n */\n\nObject.defineProperty(SchemaNumberOptions.prototype, 'max', opts);\n\n/**\r\n * If set, Mongoose adds a validator that checks that this path is strictly\r\n * equal to one of the given values.\r\n *\r\n * #### Example:\r\n *\r\n *     const schema = new Schema({\r\n *       favoritePrime: {\r\n *         type: Number,\r\n *         enum: [3, 5, 7]\r\n *       }\r\n *     });\r\n *     schema.path('favoritePrime').options.enum; // [3, 5, 7]\r\n *\r\n * @api public\r\n * @property enum\r\n * @memberOf SchemaNumberOptions\r\n * @type {Array}\r\n * @instance\r\n */\n\nObject.defineProperty(SchemaNumberOptions.prototype, 'enum', opts);\n\n/**\r\n * Sets default [populate options](/docs/populate.html#query-conditions).\r\n *\r\n * #### Example:\r\n *\r\n *     const schema = new Schema({\r\n *       child: {\r\n *         type: Number,\r\n *         ref: 'Child',\r\n *         populate: { select: 'name' }\r\n *       }\r\n *     });\r\n *     const Parent = mongoose.model('Parent', schema);\r\n *\r\n *     // Automatically adds `.select('name')`\r\n *     Parent.findOne().populate('child');\r\n *\r\n * @api public\r\n * @property populate\r\n * @memberOf SchemaNumberOptions\r\n * @type {Object}\r\n * @instance\r\n */\n\nObject.defineProperty(SchemaNumberOptions.prototype, 'populate', opts);\n\n/*!\r\n * ignore\r\n */\n\nmodule.exports = SchemaNumberOptions;","map":{"version":3,"names":["SchemaTypeOptions","require","SchemaNumberOptions","opts","Object","defineProperty","prototype","module","exports"],"sources":["C:/Users/91930/Desktop/Github projects/Pharmacy Demo/back-end/node_modules/mongoose/lib/options/SchemaNumberOptions.js"],"sourcesContent":["'use strict';\r\n\r\nconst SchemaTypeOptions = require('./SchemaTypeOptions');\r\n\r\n/**\r\n * The options defined on a Number schematype.\r\n *\r\n * #### Example:\r\n *\r\n *     const schema = new Schema({ count: Number });\r\n *     schema.path('count').options; // SchemaNumberOptions instance\r\n *\r\n * @api public\r\n * @inherits SchemaTypeOptions\r\n * @constructor SchemaNumberOptions\r\n */\r\n\r\nclass SchemaNumberOptions extends SchemaTypeOptions {}\r\n\r\nconst opts = require('./propertyOptions');\r\n\r\n/**\r\n * If set, Mongoose adds a validator that checks that this path is at least the\r\n * given `min`.\r\n *\r\n * @api public\r\n * @property min\r\n * @memberOf SchemaNumberOptions\r\n * @type {Number}\r\n * @instance\r\n */\r\n\r\nObject.defineProperty(SchemaNumberOptions.prototype, 'min', opts);\r\n\r\n/**\r\n * If set, Mongoose adds a validator that checks that this path is less than the\r\n * given `max`.\r\n *\r\n * @api public\r\n * @property max\r\n * @memberOf SchemaNumberOptions\r\n * @type {Number}\r\n * @instance\r\n */\r\n\r\nObject.defineProperty(SchemaNumberOptions.prototype, 'max', opts);\r\n\r\n/**\r\n * If set, Mongoose adds a validator that checks that this path is strictly\r\n * equal to one of the given values.\r\n *\r\n * #### Example:\r\n *\r\n *     const schema = new Schema({\r\n *       favoritePrime: {\r\n *         type: Number,\r\n *         enum: [3, 5, 7]\r\n *       }\r\n *     });\r\n *     schema.path('favoritePrime').options.enum; // [3, 5, 7]\r\n *\r\n * @api public\r\n * @property enum\r\n * @memberOf SchemaNumberOptions\r\n * @type {Array}\r\n * @instance\r\n */\r\n\r\nObject.defineProperty(SchemaNumberOptions.prototype, 'enum', opts);\r\n\r\n/**\r\n * Sets default [populate options](/docs/populate.html#query-conditions).\r\n *\r\n * #### Example:\r\n *\r\n *     const schema = new Schema({\r\n *       child: {\r\n *         type: Number,\r\n *         ref: 'Child',\r\n *         populate: { select: 'name' }\r\n *       }\r\n *     });\r\n *     const Parent = mongoose.model('Parent', schema);\r\n *\r\n *     // Automatically adds `.select('name')`\r\n *     Parent.findOne().populate('child');\r\n *\r\n * @api public\r\n * @property populate\r\n * @memberOf SchemaNumberOptions\r\n * @type {Object}\r\n * @instance\r\n */\r\n\r\nObject.defineProperty(SchemaNumberOptions.prototype, 'populate', opts);\r\n\r\n/*!\r\n * ignore\r\n */\r\n\r\nmodule.exports = SchemaNumberOptions;\r\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,iBAAiB,GAAGC,OAAO,CAAC,qBAAqB,CAAC;;AAExD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,mBAAmB,SAASF,iBAAiB,CAAC;AAEpD,MAAMG,IAAI,GAAGF,OAAO,CAAC,mBAAmB,CAAC;;AAEzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAG,MAAM,CAACC,cAAc,CAACH,mBAAmB,CAACI,SAAS,EAAE,KAAK,EAAEH,IAAI,CAAC;;AAEjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAC,MAAM,CAACC,cAAc,CAACH,mBAAmB,CAACI,SAAS,EAAE,KAAK,EAAEH,IAAI,CAAC;;AAEjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAC,MAAM,CAACC,cAAc,CAACH,mBAAmB,CAACI,SAAS,EAAE,MAAM,EAAEH,IAAI,CAAC;;AAElE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAC,MAAM,CAACC,cAAc,CAACH,mBAAmB,CAACI,SAAS,EAAE,UAAU,EAAEH,IAAI,CAAC;;AAEtE;AACA;AACA;;AAEAI,MAAM,CAACC,OAAO,GAAGN,mBAAmB"},"metadata":{},"sourceType":"script","externalDependencies":[]}