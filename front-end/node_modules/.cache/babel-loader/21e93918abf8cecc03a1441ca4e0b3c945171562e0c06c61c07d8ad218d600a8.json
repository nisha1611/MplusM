{"ast":null,"code":"import { BROWSER_MAP, BROWSER_ALIASES_MAP } from './constants.js';\nexport default class Utils {\n  /**\r\n   * Get first matched item for a string\r\n   * @param {RegExp} regexp\r\n   * @param {String} ua\r\n   * @return {Array|{index: number, input: string}|*|boolean|string}\r\n   */\n  static getFirstMatch(regexp, ua) {\n    const match = ua.match(regexp);\n    return match && match.length > 0 && match[1] || '';\n  }\n\n  /**\r\n   * Get second matched item for a string\r\n   * @param regexp\r\n   * @param {String} ua\r\n   * @return {Array|{index: number, input: string}|*|boolean|string}\r\n   */\n  static getSecondMatch(regexp, ua) {\n    const match = ua.match(regexp);\n    return match && match.length > 1 && match[2] || '';\n  }\n\n  /**\r\n   * Match a regexp and return a constant or undefined\r\n   * @param {RegExp} regexp\r\n   * @param {String} ua\r\n   * @param {*} _const Any const that will be returned if regexp matches the string\r\n   * @return {*}\r\n   */\n  static matchAndReturnConst(regexp, ua, _const) {\n    if (regexp.test(ua)) {\n      return _const;\n    }\n    return void 0;\n  }\n  static getWindowsVersionName(version) {\n    switch (version) {\n      case 'NT':\n        return 'NT';\n      case 'XP':\n        return 'XP';\n      case 'NT 5.0':\n        return '2000';\n      case 'NT 5.1':\n        return 'XP';\n      case 'NT 5.2':\n        return '2003';\n      case 'NT 6.0':\n        return 'Vista';\n      case 'NT 6.1':\n        return '7';\n      case 'NT 6.2':\n        return '8';\n      case 'NT 6.3':\n        return '8.1';\n      case 'NT 10.0':\n        return '10';\n      default:\n        return undefined;\n    }\n  }\n\n  /**\r\n   * Get macOS version name\r\n   *    10.5 - Leopard\r\n   *    10.6 - Snow Leopard\r\n   *    10.7 - Lion\r\n   *    10.8 - Mountain Lion\r\n   *    10.9 - Mavericks\r\n   *    10.10 - Yosemite\r\n   *    10.11 - El Capitan\r\n   *    10.12 - Sierra\r\n   *    10.13 - High Sierra\r\n   *    10.14 - Mojave\r\n   *    10.15 - Catalina\r\n   *\r\n   * @example\r\n   *   getMacOSVersionName(\"10.14\") // 'Mojave'\r\n   *\r\n   * @param  {string} version\r\n   * @return {string} versionName\r\n   */\n  static getMacOSVersionName(version) {\n    const v = version.split('.').splice(0, 2).map(s => parseInt(s, 10) || 0);\n    v.push(0);\n    if (v[0] !== 10) return undefined;\n    switch (v[1]) {\n      case 5:\n        return 'Leopard';\n      case 6:\n        return 'Snow Leopard';\n      case 7:\n        return 'Lion';\n      case 8:\n        return 'Mountain Lion';\n      case 9:\n        return 'Mavericks';\n      case 10:\n        return 'Yosemite';\n      case 11:\n        return 'El Capitan';\n      case 12:\n        return 'Sierra';\n      case 13:\n        return 'High Sierra';\n      case 14:\n        return 'Mojave';\n      case 15:\n        return 'Catalina';\n      default:\n        return undefined;\n    }\n  }\n\n  /**\r\n   * Get Android version name\r\n   *    1.5 - Cupcake\r\n   *    1.6 - Donut\r\n   *    2.0 - Eclair\r\n   *    2.1 - Eclair\r\n   *    2.2 - Froyo\r\n   *    2.x - Gingerbread\r\n   *    3.x - Honeycomb\r\n   *    4.0 - Ice Cream Sandwich\r\n   *    4.1 - Jelly Bean\r\n   *    4.4 - KitKat\r\n   *    5.x - Lollipop\r\n   *    6.x - Marshmallow\r\n   *    7.x - Nougat\r\n   *    8.x - Oreo\r\n   *    9.x - Pie\r\n   *\r\n   * @example\r\n   *   getAndroidVersionName(\"7.0\") // 'Nougat'\r\n   *\r\n   * @param  {string} version\r\n   * @return {string} versionName\r\n   */\n  static getAndroidVersionName(version) {\n    const v = version.split('.').splice(0, 2).map(s => parseInt(s, 10) || 0);\n    v.push(0);\n    if (v[0] === 1 && v[1] < 5) return undefined;\n    if (v[0] === 1 && v[1] < 6) return 'Cupcake';\n    if (v[0] === 1 && v[1] >= 6) return 'Donut';\n    if (v[0] === 2 && v[1] < 2) return 'Eclair';\n    if (v[0] === 2 && v[1] === 2) return 'Froyo';\n    if (v[0] === 2 && v[1] > 2) return 'Gingerbread';\n    if (v[0] === 3) return 'Honeycomb';\n    if (v[0] === 4 && v[1] < 1) return 'Ice Cream Sandwich';\n    if (v[0] === 4 && v[1] < 4) return 'Jelly Bean';\n    if (v[0] === 4 && v[1] >= 4) return 'KitKat';\n    if (v[0] === 5) return 'Lollipop';\n    if (v[0] === 6) return 'Marshmallow';\n    if (v[0] === 7) return 'Nougat';\n    if (v[0] === 8) return 'Oreo';\n    if (v[0] === 9) return 'Pie';\n    return undefined;\n  }\n\n  /**\r\n   * Get version precisions count\r\n   *\r\n   * @example\r\n   *   getVersionPrecision(\"1.10.3\") // 3\r\n   *\r\n   * @param  {string} version\r\n   * @return {number}\r\n   */\n  static getVersionPrecision(version) {\n    return version.split('.').length;\n  }\n\n  /**\r\n   * Calculate browser version weight\r\n   *\r\n   * @example\r\n   *   compareVersions('1.10.2.1',  '1.8.2.1.90')    // 1\r\n   *   compareVersions('1.010.2.1', '1.09.2.1.90');  // 1\r\n   *   compareVersions('1.10.2.1',  '1.10.2.1');     // 0\r\n   *   compareVersions('1.10.2.1',  '1.0800.2');     // -1\r\n   *   compareVersions('1.10.2.1',  '1.10',  true);  // 0\r\n   *\r\n   * @param {String} versionA versions versions to compare\r\n   * @param {String} versionB versions versions to compare\r\n   * @param {boolean} [isLoose] enable loose comparison\r\n   * @return {Number} comparison result: -1 when versionA is lower,\r\n   * 1 when versionA is bigger, 0 when both equal\r\n   */\n  /* eslint consistent-return: 1 */\n  static compareVersions(versionA, versionB) {\n    let isLoose = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    // 1) get common precision for both versions, for example for \"10.0\" and \"9\" it should be 2\n    const versionAPrecision = Utils.getVersionPrecision(versionA);\n    const versionBPrecision = Utils.getVersionPrecision(versionB);\n    let precision = Math.max(versionAPrecision, versionBPrecision);\n    let lastPrecision = 0;\n    const chunks = Utils.map([versionA, versionB], version => {\n      const delta = precision - Utils.getVersionPrecision(version);\n\n      // 2) \"9\" -> \"9.0\" (for precision = 2)\n      const _version = version + new Array(delta + 1).join('.0');\n\n      // 3) \"9.0\" -> [\"000000000\"\", \"000000009\"]\n      return Utils.map(_version.split('.'), chunk => new Array(20 - chunk.length).join('0') + chunk).reverse();\n    });\n\n    // adjust precision for loose comparison\n    if (isLoose) {\n      lastPrecision = precision - Math.min(versionAPrecision, versionBPrecision);\n    }\n\n    // iterate in reverse order by reversed chunks array\n    precision -= 1;\n    while (precision >= lastPrecision) {\n      // 4) compare: \"000000009\" > \"000000010\" = false (but \"9\" > \"10\" = true)\n      if (chunks[0][precision] > chunks[1][precision]) {\n        return 1;\n      }\n      if (chunks[0][precision] === chunks[1][precision]) {\n        if (precision === lastPrecision) {\n          // all version chunks are same\n          return 0;\n        }\n        precision -= 1;\n      } else if (chunks[0][precision] < chunks[1][precision]) {\n        return -1;\n      }\n    }\n    return undefined;\n  }\n\n  /**\r\n   * Array::map polyfill\r\n   *\r\n   * @param  {Array} arr\r\n   * @param  {Function} iterator\r\n   * @return {Array}\r\n   */\n  static map(arr, iterator) {\n    const result = [];\n    let i;\n    if (Array.prototype.map) {\n      return Array.prototype.map.call(arr, iterator);\n    }\n    for (i = 0; i < arr.length; i += 1) {\n      result.push(iterator(arr[i]));\n    }\n    return result;\n  }\n\n  /**\r\n   * Array::find polyfill\r\n   *\r\n   * @param  {Array} arr\r\n   * @param  {Function} predicate\r\n   * @return {Array}\r\n   */\n  static find(arr, predicate) {\n    let i;\n    let l;\n    if (Array.prototype.find) {\n      return Array.prototype.find.call(arr, predicate);\n    }\n    for (i = 0, l = arr.length; i < l; i += 1) {\n      const value = arr[i];\n      if (predicate(value, i)) {\n        return value;\n      }\n    }\n    return undefined;\n  }\n\n  /**\r\n   * Object::assign polyfill\r\n   *\r\n   * @param  {Object} obj\r\n   * @param  {Object} ...objs\r\n   * @return {Object}\r\n   */\n  static assign(obj) {\n    const result = obj;\n    let i;\n    let l;\n    for (var _len = arguments.length, assigners = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      assigners[_key - 1] = arguments[_key];\n    }\n    if (Object.assign) {\n      return Object.assign(obj, ...assigners);\n    }\n    for (i = 0, l = assigners.length; i < l; i += 1) {\n      const assigner = assigners[i];\n      if (typeof assigner === 'object' && assigner !== null) {\n        const keys = Object.keys(assigner);\n        keys.forEach(key => {\n          result[key] = assigner[key];\n        });\n      }\n    }\n    return obj;\n  }\n\n  /**\r\n   * Get short version/alias for a browser name\r\n   *\r\n   * @example\r\n   *   getBrowserAlias('Microsoft Edge') // edge\r\n   *\r\n   * @param  {string} browserName\r\n   * @return {string}\r\n   */\n  static getBrowserAlias(browserName) {\n    return BROWSER_ALIASES_MAP[browserName];\n  }\n\n  /**\r\n   * Get short version/alias for a browser name\r\n   *\r\n   * @example\r\n   *   getBrowserAlias('edge') // Microsoft Edge\r\n   *\r\n   * @param  {string} browserAlias\r\n   * @return {string}\r\n   */\n  static getBrowserTypeByAlias(browserAlias) {\n    return BROWSER_MAP[browserAlias] || '';\n  }\n}","map":{"version":3,"names":["BROWSER_MAP","BROWSER_ALIASES_MAP","Utils","getFirstMatch","regexp","ua","match","length","getSecondMatch","matchAndReturnConst","_const","test","getWindowsVersionName","version","undefined","getMacOSVersionName","v","split","splice","map","s","parseInt","push","getAndroidVersionName","getVersionPrecision","compareVersions","versionA","versionB","isLoose","versionAPrecision","versionBPrecision","precision","Math","max","lastPrecision","chunks","delta","_version","Array","join","chunk","reverse","min","arr","iterator","result","i","prototype","call","find","predicate","l","value","assign","obj","assigners","Object","assigner","keys","forEach","key","getBrowserAlias","browserName","getBrowserTypeByAlias","browserAlias"],"sources":["C:/Users/91930/Desktop/Github projects/Pharmacy Demo/back-end/node_modules/bowser/src/utils.js"],"sourcesContent":["import { BROWSER_MAP, BROWSER_ALIASES_MAP } from './constants.js';\r\n\r\nexport default class Utils {\r\n  /**\r\n   * Get first matched item for a string\r\n   * @param {RegExp} regexp\r\n   * @param {String} ua\r\n   * @return {Array|{index: number, input: string}|*|boolean|string}\r\n   */\r\n  static getFirstMatch(regexp, ua) {\r\n    const match = ua.match(regexp);\r\n    return (match && match.length > 0 && match[1]) || '';\r\n  }\r\n\r\n  /**\r\n   * Get second matched item for a string\r\n   * @param regexp\r\n   * @param {String} ua\r\n   * @return {Array|{index: number, input: string}|*|boolean|string}\r\n   */\r\n  static getSecondMatch(regexp, ua) {\r\n    const match = ua.match(regexp);\r\n    return (match && match.length > 1 && match[2]) || '';\r\n  }\r\n\r\n  /**\r\n   * Match a regexp and return a constant or undefined\r\n   * @param {RegExp} regexp\r\n   * @param {String} ua\r\n   * @param {*} _const Any const that will be returned if regexp matches the string\r\n   * @return {*}\r\n   */\r\n  static matchAndReturnConst(regexp, ua, _const) {\r\n    if (regexp.test(ua)) {\r\n      return _const;\r\n    }\r\n    return void (0);\r\n  }\r\n\r\n  static getWindowsVersionName(version) {\r\n    switch (version) {\r\n      case 'NT': return 'NT';\r\n      case 'XP': return 'XP';\r\n      case 'NT 5.0': return '2000';\r\n      case 'NT 5.1': return 'XP';\r\n      case 'NT 5.2': return '2003';\r\n      case 'NT 6.0': return 'Vista';\r\n      case 'NT 6.1': return '7';\r\n      case 'NT 6.2': return '8';\r\n      case 'NT 6.3': return '8.1';\r\n      case 'NT 10.0': return '10';\r\n      default: return undefined;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get macOS version name\r\n   *    10.5 - Leopard\r\n   *    10.6 - Snow Leopard\r\n   *    10.7 - Lion\r\n   *    10.8 - Mountain Lion\r\n   *    10.9 - Mavericks\r\n   *    10.10 - Yosemite\r\n   *    10.11 - El Capitan\r\n   *    10.12 - Sierra\r\n   *    10.13 - High Sierra\r\n   *    10.14 - Mojave\r\n   *    10.15 - Catalina\r\n   *\r\n   * @example\r\n   *   getMacOSVersionName(\"10.14\") // 'Mojave'\r\n   *\r\n   * @param  {string} version\r\n   * @return {string} versionName\r\n   */\r\n  static getMacOSVersionName(version) {\r\n    const v = version.split('.').splice(0, 2).map(s => parseInt(s, 10) || 0);\r\n    v.push(0);\r\n    if (v[0] !== 10) return undefined;\r\n    switch (v[1]) {\r\n      case 5: return 'Leopard';\r\n      case 6: return 'Snow Leopard';\r\n      case 7: return 'Lion';\r\n      case 8: return 'Mountain Lion';\r\n      case 9: return 'Mavericks';\r\n      case 10: return 'Yosemite';\r\n      case 11: return 'El Capitan';\r\n      case 12: return 'Sierra';\r\n      case 13: return 'High Sierra';\r\n      case 14: return 'Mojave';\r\n      case 15: return 'Catalina';\r\n      default: return undefined;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get Android version name\r\n   *    1.5 - Cupcake\r\n   *    1.6 - Donut\r\n   *    2.0 - Eclair\r\n   *    2.1 - Eclair\r\n   *    2.2 - Froyo\r\n   *    2.x - Gingerbread\r\n   *    3.x - Honeycomb\r\n   *    4.0 - Ice Cream Sandwich\r\n   *    4.1 - Jelly Bean\r\n   *    4.4 - KitKat\r\n   *    5.x - Lollipop\r\n   *    6.x - Marshmallow\r\n   *    7.x - Nougat\r\n   *    8.x - Oreo\r\n   *    9.x - Pie\r\n   *\r\n   * @example\r\n   *   getAndroidVersionName(\"7.0\") // 'Nougat'\r\n   *\r\n   * @param  {string} version\r\n   * @return {string} versionName\r\n   */\r\n  static getAndroidVersionName(version) {\r\n    const v = version.split('.').splice(0, 2).map(s => parseInt(s, 10) || 0);\r\n    v.push(0);\r\n    if (v[0] === 1 && v[1] < 5) return undefined;\r\n    if (v[0] === 1 && v[1] < 6) return 'Cupcake';\r\n    if (v[0] === 1 && v[1] >= 6) return 'Donut';\r\n    if (v[0] === 2 && v[1] < 2) return 'Eclair';\r\n    if (v[0] === 2 && v[1] === 2) return 'Froyo';\r\n    if (v[0] === 2 && v[1] > 2) return 'Gingerbread';\r\n    if (v[0] === 3) return 'Honeycomb';\r\n    if (v[0] === 4 && v[1] < 1) return 'Ice Cream Sandwich';\r\n    if (v[0] === 4 && v[1] < 4) return 'Jelly Bean';\r\n    if (v[0] === 4 && v[1] >= 4) return 'KitKat';\r\n    if (v[0] === 5) return 'Lollipop';\r\n    if (v[0] === 6) return 'Marshmallow';\r\n    if (v[0] === 7) return 'Nougat';\r\n    if (v[0] === 8) return 'Oreo';\r\n    if (v[0] === 9) return 'Pie';\r\n    return undefined;\r\n  }\r\n\r\n  /**\r\n   * Get version precisions count\r\n   *\r\n   * @example\r\n   *   getVersionPrecision(\"1.10.3\") // 3\r\n   *\r\n   * @param  {string} version\r\n   * @return {number}\r\n   */\r\n  static getVersionPrecision(version) {\r\n    return version.split('.').length;\r\n  }\r\n\r\n  /**\r\n   * Calculate browser version weight\r\n   *\r\n   * @example\r\n   *   compareVersions('1.10.2.1',  '1.8.2.1.90')    // 1\r\n   *   compareVersions('1.010.2.1', '1.09.2.1.90');  // 1\r\n   *   compareVersions('1.10.2.1',  '1.10.2.1');     // 0\r\n   *   compareVersions('1.10.2.1',  '1.0800.2');     // -1\r\n   *   compareVersions('1.10.2.1',  '1.10',  true);  // 0\r\n   *\r\n   * @param {String} versionA versions versions to compare\r\n   * @param {String} versionB versions versions to compare\r\n   * @param {boolean} [isLoose] enable loose comparison\r\n   * @return {Number} comparison result: -1 when versionA is lower,\r\n   * 1 when versionA is bigger, 0 when both equal\r\n   */\r\n  /* eslint consistent-return: 1 */\r\n  static compareVersions(versionA, versionB, isLoose = false) {\r\n    // 1) get common precision for both versions, for example for \"10.0\" and \"9\" it should be 2\r\n    const versionAPrecision = Utils.getVersionPrecision(versionA);\r\n    const versionBPrecision = Utils.getVersionPrecision(versionB);\r\n\r\n    let precision = Math.max(versionAPrecision, versionBPrecision);\r\n    let lastPrecision = 0;\r\n\r\n    const chunks = Utils.map([versionA, versionB], (version) => {\r\n      const delta = precision - Utils.getVersionPrecision(version);\r\n\r\n      // 2) \"9\" -> \"9.0\" (for precision = 2)\r\n      const _version = version + new Array(delta + 1).join('.0');\r\n\r\n      // 3) \"9.0\" -> [\"000000000\"\", \"000000009\"]\r\n      return Utils.map(_version.split('.'), chunk => new Array(20 - chunk.length).join('0') + chunk).reverse();\r\n    });\r\n\r\n    // adjust precision for loose comparison\r\n    if (isLoose) {\r\n      lastPrecision = precision - Math.min(versionAPrecision, versionBPrecision);\r\n    }\r\n\r\n    // iterate in reverse order by reversed chunks array\r\n    precision -= 1;\r\n    while (precision >= lastPrecision) {\r\n      // 4) compare: \"000000009\" > \"000000010\" = false (but \"9\" > \"10\" = true)\r\n      if (chunks[0][precision] > chunks[1][precision]) {\r\n        return 1;\r\n      }\r\n\r\n      if (chunks[0][precision] === chunks[1][precision]) {\r\n        if (precision === lastPrecision) {\r\n          // all version chunks are same\r\n          return 0;\r\n        }\r\n\r\n        precision -= 1;\r\n      } else if (chunks[0][precision] < chunks[1][precision]) {\r\n        return -1;\r\n      }\r\n    }\r\n\r\n    return undefined;\r\n  }\r\n\r\n  /**\r\n   * Array::map polyfill\r\n   *\r\n   * @param  {Array} arr\r\n   * @param  {Function} iterator\r\n   * @return {Array}\r\n   */\r\n  static map(arr, iterator) {\r\n    const result = [];\r\n    let i;\r\n    if (Array.prototype.map) {\r\n      return Array.prototype.map.call(arr, iterator);\r\n    }\r\n    for (i = 0; i < arr.length; i += 1) {\r\n      result.push(iterator(arr[i]));\r\n    }\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Array::find polyfill\r\n   *\r\n   * @param  {Array} arr\r\n   * @param  {Function} predicate\r\n   * @return {Array}\r\n   */\r\n  static find(arr, predicate) {\r\n    let i;\r\n    let l;\r\n    if (Array.prototype.find) {\r\n      return Array.prototype.find.call(arr, predicate);\r\n    }\r\n    for (i = 0, l = arr.length; i < l; i += 1) {\r\n      const value = arr[i];\r\n      if (predicate(value, i)) {\r\n        return value;\r\n      }\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  /**\r\n   * Object::assign polyfill\r\n   *\r\n   * @param  {Object} obj\r\n   * @param  {Object} ...objs\r\n   * @return {Object}\r\n   */\r\n  static assign(obj, ...assigners) {\r\n    const result = obj;\r\n    let i;\r\n    let l;\r\n    if (Object.assign) {\r\n      return Object.assign(obj, ...assigners);\r\n    }\r\n    for (i = 0, l = assigners.length; i < l; i += 1) {\r\n      const assigner = assigners[i];\r\n      if (typeof assigner === 'object' && assigner !== null) {\r\n        const keys = Object.keys(assigner);\r\n        keys.forEach((key) => {\r\n          result[key] = assigner[key];\r\n        });\r\n      }\r\n    }\r\n    return obj;\r\n  }\r\n\r\n  /**\r\n   * Get short version/alias for a browser name\r\n   *\r\n   * @example\r\n   *   getBrowserAlias('Microsoft Edge') // edge\r\n   *\r\n   * @param  {string} browserName\r\n   * @return {string}\r\n   */\r\n  static getBrowserAlias(browserName) {\r\n    return BROWSER_ALIASES_MAP[browserName];\r\n  }\r\n\r\n  /**\r\n   * Get short version/alias for a browser name\r\n   *\r\n   * @example\r\n   *   getBrowserAlias('edge') // Microsoft Edge\r\n   *\r\n   * @param  {string} browserAlias\r\n   * @return {string}\r\n   */\r\n  static getBrowserTypeByAlias(browserAlias) {\r\n    return BROWSER_MAP[browserAlias] || '';\r\n  }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}