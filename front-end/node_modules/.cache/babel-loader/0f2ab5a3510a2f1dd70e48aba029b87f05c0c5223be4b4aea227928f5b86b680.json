{"ast":null,"code":"'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\nvar $TypeError = GetIntrinsic('%TypeError%');\nvar $SyntaxError = GetIntrinsic('%SyntaxError%');\nvar has = require('has');\nvar isMatchRecord = require('./isMatchRecord');\nvar predicates = {\n  // https://262.ecma-international.org/6.0/#sec-property-descriptor-specification-type\n  'Property Descriptor': function isPropertyDescriptor(Desc) {\n    var allowed = {\n      '[[Configurable]]': true,\n      '[[Enumerable]]': true,\n      '[[Get]]': true,\n      '[[Set]]': true,\n      '[[Value]]': true,\n      '[[Writable]]': true\n    };\n    for (var key in Desc) {\n      // eslint-disable-line\n      if (has(Desc, key) && !allowed[key]) {\n        return false;\n      }\n    }\n    var isData = has(Desc, '[[Value]]');\n    var IsAccessor = has(Desc, '[[Get]]') || has(Desc, '[[Set]]');\n    if (isData && IsAccessor) {\n      throw new $TypeError('Property Descriptors may not be both accessor and data descriptors');\n    }\n    return true;\n  },\n  // https://262.ecma-international.org/13.0/#sec-match-records\n  'Match Record': isMatchRecord\n};\nmodule.exports = function assertRecord(Type, recordType, argumentName, value) {\n  var predicate = predicates[recordType];\n  if (typeof predicate !== 'function') {\n    throw new $SyntaxError('unknown record type: ' + recordType);\n  }\n  if (Type(value) !== 'Object' || !predicate(value)) {\n    throw new $TypeError(argumentName + ' must be a ' + recordType);\n  }\n};","map":{"version":3,"names":["GetIntrinsic","require","$TypeError","$SyntaxError","has","isMatchRecord","predicates","isPropertyDescriptor","Desc","allowed","key","isData","IsAccessor","module","exports","assertRecord","Type","recordType","argumentName","value","predicate"],"sources":["C:/Users/91930/Desktop/Github projects/Pharmacy Demo/front-end/node_modules/es-abstract/helpers/assertRecord.js"],"sourcesContent":["'use strict';\r\n\r\nvar GetIntrinsic = require('get-intrinsic');\r\n\r\nvar $TypeError = GetIntrinsic('%TypeError%');\r\nvar $SyntaxError = GetIntrinsic('%SyntaxError%');\r\n\r\nvar has = require('has');\r\n\r\nvar isMatchRecord = require('./isMatchRecord');\r\n\r\nvar predicates = {\r\n\t// https://262.ecma-international.org/6.0/#sec-property-descriptor-specification-type\r\n\t'Property Descriptor': function isPropertyDescriptor(Desc) {\r\n\t\tvar allowed = {\r\n\t\t\t'[[Configurable]]': true,\r\n\t\t\t'[[Enumerable]]': true,\r\n\t\t\t'[[Get]]': true,\r\n\t\t\t'[[Set]]': true,\r\n\t\t\t'[[Value]]': true,\r\n\t\t\t'[[Writable]]': true\r\n\t\t};\r\n\r\n\t\tfor (var key in Desc) { // eslint-disable-line\r\n\t\t\tif (has(Desc, key) && !allowed[key]) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tvar isData = has(Desc, '[[Value]]');\r\n\t\tvar IsAccessor = has(Desc, '[[Get]]') || has(Desc, '[[Set]]');\r\n\t\tif (isData && IsAccessor) {\r\n\t\t\tthrow new $TypeError('Property Descriptors may not be both accessor and data descriptors');\r\n\t\t}\r\n\t\treturn true;\r\n\t},\r\n\t// https://262.ecma-international.org/13.0/#sec-match-records\r\n\t'Match Record': isMatchRecord\r\n};\r\n\r\nmodule.exports = function assertRecord(Type, recordType, argumentName, value) {\r\n\tvar predicate = predicates[recordType];\r\n\tif (typeof predicate !== 'function') {\r\n\t\tthrow new $SyntaxError('unknown record type: ' + recordType);\r\n\t}\r\n\tif (Type(value) !== 'Object' || !predicate(value)) {\r\n\t\tthrow new $TypeError(argumentName + ' must be a ' + recordType);\r\n\t}\r\n};\r\n"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,YAAY,GAAGC,OAAO,CAAC,eAAe,CAAC;AAE3C,IAAIC,UAAU,GAAGF,YAAY,CAAC,aAAa,CAAC;AAC5C,IAAIG,YAAY,GAAGH,YAAY,CAAC,eAAe,CAAC;AAEhD,IAAII,GAAG,GAAGH,OAAO,CAAC,KAAK,CAAC;AAExB,IAAII,aAAa,GAAGJ,OAAO,CAAC,iBAAiB,CAAC;AAE9C,IAAIK,UAAU,GAAG;EAChB;EACA,qBAAqB,EAAE,SAASC,oBAAoB,CAACC,IAAI,EAAE;IAC1D,IAAIC,OAAO,GAAG;MACb,kBAAkB,EAAE,IAAI;MACxB,gBAAgB,EAAE,IAAI;MACtB,SAAS,EAAE,IAAI;MACf,SAAS,EAAE,IAAI;MACf,WAAW,EAAE,IAAI;MACjB,cAAc,EAAE;IACjB,CAAC;IAED,KAAK,IAAIC,GAAG,IAAIF,IAAI,EAAE;MAAE;MACvB,IAAIJ,GAAG,CAACI,IAAI,EAAEE,GAAG,CAAC,IAAI,CAACD,OAAO,CAACC,GAAG,CAAC,EAAE;QACpC,OAAO,KAAK;MACb;IACD;IAEA,IAAIC,MAAM,GAAGP,GAAG,CAACI,IAAI,EAAE,WAAW,CAAC;IACnC,IAAII,UAAU,GAAGR,GAAG,CAACI,IAAI,EAAE,SAAS,CAAC,IAAIJ,GAAG,CAACI,IAAI,EAAE,SAAS,CAAC;IAC7D,IAAIG,MAAM,IAAIC,UAAU,EAAE;MACzB,MAAM,IAAIV,UAAU,CAAC,oEAAoE,CAAC;IAC3F;IACA,OAAO,IAAI;EACZ,CAAC;EACD;EACA,cAAc,EAAEG;AACjB,CAAC;AAEDQ,MAAM,CAACC,OAAO,GAAG,SAASC,YAAY,CAACC,IAAI,EAAEC,UAAU,EAAEC,YAAY,EAAEC,KAAK,EAAE;EAC7E,IAAIC,SAAS,GAAGd,UAAU,CAACW,UAAU,CAAC;EACtC,IAAI,OAAOG,SAAS,KAAK,UAAU,EAAE;IACpC,MAAM,IAAIjB,YAAY,CAAC,uBAAuB,GAAGc,UAAU,CAAC;EAC7D;EACA,IAAID,IAAI,CAACG,KAAK,CAAC,KAAK,QAAQ,IAAI,CAACC,SAAS,CAACD,KAAK,CAAC,EAAE;IAClD,MAAM,IAAIjB,UAAU,CAACgB,YAAY,GAAG,aAAa,GAAGD,UAAU,CAAC;EAChE;AACD,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}