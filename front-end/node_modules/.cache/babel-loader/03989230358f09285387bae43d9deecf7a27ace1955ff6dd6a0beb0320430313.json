{"ast":null,"code":"/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Tobias Koppers @sokra\r\n*/\n\n\"use strict\";\n\n/** @typedef {import(\"../../declarations/WebpackOptions\").ChunkLoadingType} ChunkLoadingType */\n/** @typedef {import(\"../Compiler\")} Compiler */\n\n/** @type {WeakMap<Compiler, Set<ChunkLoadingType>>} */\nconst enabledTypes = new WeakMap();\nconst getEnabledTypes = compiler => {\n  let set = enabledTypes.get(compiler);\n  if (set === undefined) {\n    set = new Set();\n    enabledTypes.set(compiler, set);\n  }\n  return set;\n};\nclass EnableChunkLoadingPlugin {\n  /**\r\n   * @param {ChunkLoadingType} type library type that should be available\r\n   */\n  constructor(type) {\n    this.type = type;\n  }\n\n  /**\r\n   * @param {Compiler} compiler the compiler instance\r\n   * @param {ChunkLoadingType} type type of library\r\n   * @returns {void}\r\n   */\n  static setEnabled(compiler, type) {\n    getEnabledTypes(compiler).add(type);\n  }\n\n  /**\r\n   * @param {Compiler} compiler the compiler instance\r\n   * @param {ChunkLoadingType} type type of library\r\n   * @returns {void}\r\n   */\n  static checkEnabled(compiler, type) {\n    if (!getEnabledTypes(compiler).has(type)) {\n      throw new Error(`Chunk loading type \"${type}\" is not enabled. ` + \"EnableChunkLoadingPlugin need to be used to enable this type of chunk loading. \" + 'This usually happens through the \"output.enabledChunkLoadingTypes\" option. ' + 'If you are using a function as entry which sets \"chunkLoading\", you need to add all potential chunk loading types to \"output.enabledChunkLoadingTypes\". ' + \"These types are enabled: \" + Array.from(getEnabledTypes(compiler)).join(\", \"));\n    }\n  }\n\n  /**\r\n   * Apply the plugin\r\n   * @param {Compiler} compiler the compiler instance\r\n   * @returns {void}\r\n   */\n  apply(compiler) {\n    const {\n      type\n    } = this;\n\n    // Only enable once\n    const enabled = getEnabledTypes(compiler);\n    if (enabled.has(type)) return;\n    enabled.add(type);\n    if (typeof type === \"string\") {\n      switch (type) {\n        case \"jsonp\":\n          {\n            const JsonpChunkLoadingPlugin = require(\"../web/JsonpChunkLoadingPlugin\");\n            new JsonpChunkLoadingPlugin().apply(compiler);\n            break;\n          }\n        case \"import-scripts\":\n          {\n            const ImportScriptsChunkLoadingPlugin = require(\"../webworker/ImportScriptsChunkLoadingPlugin\");\n            new ImportScriptsChunkLoadingPlugin().apply(compiler);\n            break;\n          }\n        case \"require\":\n          {\n            //@ts-expect-error https://github.com/microsoft/TypeScript/issues/41697\n            const CommonJsChunkLoadingPlugin = require(\"../node/CommonJsChunkLoadingPlugin\");\n            new CommonJsChunkLoadingPlugin({\n              asyncChunkLoading: false\n            }).apply(compiler);\n            break;\n          }\n        case \"async-node\":\n          {\n            //@ts-expect-error https://github.com/microsoft/TypeScript/issues/41697\n            const CommonJsChunkLoadingPlugin = require(\"../node/CommonJsChunkLoadingPlugin\");\n            new CommonJsChunkLoadingPlugin({\n              asyncChunkLoading: true\n            }).apply(compiler);\n            break;\n          }\n        case \"import\":\n          {\n            const ModuleChunkLoadingPlugin = require(\"../esm/ModuleChunkLoadingPlugin\");\n            new ModuleChunkLoadingPlugin().apply(compiler);\n            break;\n          }\n        case \"universal\":\n          // TODO implement universal chunk loading\n          throw new Error(\"Universal Chunk Loading is not implemented yet\");\n        default:\n          throw new Error(`Unsupported chunk loading type ${type}.\nPlugins which provide custom chunk loading types must call EnableChunkLoadingPlugin.setEnabled(compiler, type) to disable this error.`);\n      }\n    } else {\n      // TODO support plugin instances here\n      // apply them to the compiler\n    }\n  }\n}\nmodule.exports = EnableChunkLoadingPlugin;","map":{"version":3,"names":["enabledTypes","WeakMap","getEnabledTypes","compiler","set","get","undefined","Set","EnableChunkLoadingPlugin","constructor","type","setEnabled","add","checkEnabled","has","Error","Array","from","join","apply","enabled","JsonpChunkLoadingPlugin","require","ImportScriptsChunkLoadingPlugin","CommonJsChunkLoadingPlugin","asyncChunkLoading","ModuleChunkLoadingPlugin","module","exports"],"sources":["C:/Users/91930/Desktop/Github projects/Pharmacy Demo/front-end/node_modules/webpack/lib/javascript/EnableChunkLoadingPlugin.js"],"sourcesContent":["/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Tobias Koppers @sokra\r\n*/\r\n\r\n\"use strict\";\r\n\r\n/** @typedef {import(\"../../declarations/WebpackOptions\").ChunkLoadingType} ChunkLoadingType */\r\n/** @typedef {import(\"../Compiler\")} Compiler */\r\n\r\n/** @type {WeakMap<Compiler, Set<ChunkLoadingType>>} */\r\nconst enabledTypes = new WeakMap();\r\n\r\nconst getEnabledTypes = compiler => {\r\n\tlet set = enabledTypes.get(compiler);\r\n\tif (set === undefined) {\r\n\t\tset = new Set();\r\n\t\tenabledTypes.set(compiler, set);\r\n\t}\r\n\treturn set;\r\n};\r\n\r\nclass EnableChunkLoadingPlugin {\r\n\t/**\r\n\t * @param {ChunkLoadingType} type library type that should be available\r\n\t */\r\n\tconstructor(type) {\r\n\t\tthis.type = type;\r\n\t}\r\n\r\n\t/**\r\n\t * @param {Compiler} compiler the compiler instance\r\n\t * @param {ChunkLoadingType} type type of library\r\n\t * @returns {void}\r\n\t */\r\n\tstatic setEnabled(compiler, type) {\r\n\t\tgetEnabledTypes(compiler).add(type);\r\n\t}\r\n\r\n\t/**\r\n\t * @param {Compiler} compiler the compiler instance\r\n\t * @param {ChunkLoadingType} type type of library\r\n\t * @returns {void}\r\n\t */\r\n\tstatic checkEnabled(compiler, type) {\r\n\t\tif (!getEnabledTypes(compiler).has(type)) {\r\n\t\t\tthrow new Error(\r\n\t\t\t\t`Chunk loading type \"${type}\" is not enabled. ` +\r\n\t\t\t\t\t\"EnableChunkLoadingPlugin need to be used to enable this type of chunk loading. \" +\r\n\t\t\t\t\t'This usually happens through the \"output.enabledChunkLoadingTypes\" option. ' +\r\n\t\t\t\t\t'If you are using a function as entry which sets \"chunkLoading\", you need to add all potential chunk loading types to \"output.enabledChunkLoadingTypes\". ' +\r\n\t\t\t\t\t\"These types are enabled: \" +\r\n\t\t\t\t\tArray.from(getEnabledTypes(compiler)).join(\", \")\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Apply the plugin\r\n\t * @param {Compiler} compiler the compiler instance\r\n\t * @returns {void}\r\n\t */\r\n\tapply(compiler) {\r\n\t\tconst { type } = this;\r\n\r\n\t\t// Only enable once\r\n\t\tconst enabled = getEnabledTypes(compiler);\r\n\t\tif (enabled.has(type)) return;\r\n\t\tenabled.add(type);\r\n\r\n\t\tif (typeof type === \"string\") {\r\n\t\t\tswitch (type) {\r\n\t\t\t\tcase \"jsonp\": {\r\n\t\t\t\t\tconst JsonpChunkLoadingPlugin = require(\"../web/JsonpChunkLoadingPlugin\");\r\n\t\t\t\t\tnew JsonpChunkLoadingPlugin().apply(compiler);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tcase \"import-scripts\": {\r\n\t\t\t\t\tconst ImportScriptsChunkLoadingPlugin = require(\"../webworker/ImportScriptsChunkLoadingPlugin\");\r\n\t\t\t\t\tnew ImportScriptsChunkLoadingPlugin().apply(compiler);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tcase \"require\": {\r\n\t\t\t\t\t//@ts-expect-error https://github.com/microsoft/TypeScript/issues/41697\r\n\t\t\t\t\tconst CommonJsChunkLoadingPlugin = require(\"../node/CommonJsChunkLoadingPlugin\");\r\n\t\t\t\t\tnew CommonJsChunkLoadingPlugin({\r\n\t\t\t\t\t\tasyncChunkLoading: false\r\n\t\t\t\t\t}).apply(compiler);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tcase \"async-node\": {\r\n\t\t\t\t\t//@ts-expect-error https://github.com/microsoft/TypeScript/issues/41697\r\n\t\t\t\t\tconst CommonJsChunkLoadingPlugin = require(\"../node/CommonJsChunkLoadingPlugin\");\r\n\t\t\t\t\tnew CommonJsChunkLoadingPlugin({\r\n\t\t\t\t\t\tasyncChunkLoading: true\r\n\t\t\t\t\t}).apply(compiler);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tcase \"import\": {\r\n\t\t\t\t\tconst ModuleChunkLoadingPlugin = require(\"../esm/ModuleChunkLoadingPlugin\");\r\n\t\t\t\t\tnew ModuleChunkLoadingPlugin().apply(compiler);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tcase \"universal\":\r\n\t\t\t\t\t// TODO implement universal chunk loading\r\n\t\t\t\t\tthrow new Error(\"Universal Chunk Loading is not implemented yet\");\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tthrow new Error(`Unsupported chunk loading type ${type}.\r\nPlugins which provide custom chunk loading types must call EnableChunkLoadingPlugin.setEnabled(compiler, type) to disable this error.`);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\t// TODO support plugin instances here\r\n\t\t\t// apply them to the compiler\r\n\t\t}\r\n\t}\r\n}\r\n\r\nmodule.exports = EnableChunkLoadingPlugin;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}