{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ServerHeartbeatFailedEvent = exports.ServerHeartbeatSucceededEvent = exports.ServerHeartbeatStartedEvent = exports.TopologyClosedEvent = exports.TopologyOpeningEvent = exports.TopologyDescriptionChangedEvent = exports.ServerClosedEvent = exports.ServerOpeningEvent = exports.ServerDescriptionChangedEvent = void 0;\n/**\r\n * Emitted when server description changes, but does NOT include changes to the RTT.\r\n * @public\r\n * @category Event\r\n */\nclass ServerDescriptionChangedEvent {\n  /** @internal */\n  constructor(topologyId, address, previousDescription, newDescription) {\n    this.topologyId = topologyId;\n    this.address = address;\n    this.previousDescription = previousDescription;\n    this.newDescription = newDescription;\n  }\n}\nexports.ServerDescriptionChangedEvent = ServerDescriptionChangedEvent;\n/**\r\n * Emitted when server is initialized.\r\n * @public\r\n * @category Event\r\n */\nclass ServerOpeningEvent {\n  /** @internal */\n  constructor(topologyId, address) {\n    this.topologyId = topologyId;\n    this.address = address;\n  }\n}\nexports.ServerOpeningEvent = ServerOpeningEvent;\n/**\r\n * Emitted when server is closed.\r\n * @public\r\n * @category Event\r\n */\nclass ServerClosedEvent {\n  /** @internal */\n  constructor(topologyId, address) {\n    this.topologyId = topologyId;\n    this.address = address;\n  }\n}\nexports.ServerClosedEvent = ServerClosedEvent;\n/**\r\n * Emitted when topology description changes.\r\n * @public\r\n * @category Event\r\n */\nclass TopologyDescriptionChangedEvent {\n  /** @internal */\n  constructor(topologyId, previousDescription, newDescription) {\n    this.topologyId = topologyId;\n    this.previousDescription = previousDescription;\n    this.newDescription = newDescription;\n  }\n}\nexports.TopologyDescriptionChangedEvent = TopologyDescriptionChangedEvent;\n/**\r\n * Emitted when topology is initialized.\r\n * @public\r\n * @category Event\r\n */\nclass TopologyOpeningEvent {\n  /** @internal */\n  constructor(topologyId) {\n    this.topologyId = topologyId;\n  }\n}\nexports.TopologyOpeningEvent = TopologyOpeningEvent;\n/**\r\n * Emitted when topology is closed.\r\n * @public\r\n * @category Event\r\n */\nclass TopologyClosedEvent {\n  /** @internal */\n  constructor(topologyId) {\n    this.topologyId = topologyId;\n  }\n}\nexports.TopologyClosedEvent = TopologyClosedEvent;\n/**\r\n * Emitted when the server monitor’s hello command is started - immediately before\r\n * the hello command is serialized into raw BSON and written to the socket.\r\n *\r\n * @public\r\n * @category Event\r\n */\nclass ServerHeartbeatStartedEvent {\n  /** @internal */\n  constructor(connectionId) {\n    this.connectionId = connectionId;\n  }\n}\nexports.ServerHeartbeatStartedEvent = ServerHeartbeatStartedEvent;\n/**\r\n * Emitted when the server monitor’s hello succeeds.\r\n * @public\r\n * @category Event\r\n */\nclass ServerHeartbeatSucceededEvent {\n  /** @internal */\n  constructor(connectionId, duration, reply) {\n    this.connectionId = connectionId;\n    this.duration = duration;\n    this.reply = reply !== null && reply !== void 0 ? reply : {};\n  }\n}\nexports.ServerHeartbeatSucceededEvent = ServerHeartbeatSucceededEvent;\n/**\r\n * Emitted when the server monitor’s hello fails, either with an “ok: 0” or a socket exception.\r\n * @public\r\n * @category Event\r\n */\nclass ServerHeartbeatFailedEvent {\n  /** @internal */\n  constructor(connectionId, duration, failure) {\n    this.connectionId = connectionId;\n    this.duration = duration;\n    this.failure = failure;\n  }\n}\nexports.ServerHeartbeatFailedEvent = ServerHeartbeatFailedEvent;","map":{"version":3,"mappings":";;;;;;AAIA;;;;;AAKA,MAAaA,6BAA6B;EAUxC;EACAC,YACEC,UAAkB,EAClBC,OAAe,EACfC,mBAAsC,EACtCC,cAAiC;IAEjC,IAAI,CAACH,UAAU,GAAGA,UAAU;IAC5B,IAAI,CAACC,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACC,mBAAmB,GAAGA,mBAAmB;IAC9C,IAAI,CAACC,cAAc,GAAGA,cAAc;EACtC;;AArBFC;AAwBA;;;;;AAKA,MAAaC,kBAAkB;EAM7B;EACAN,YAAYC,UAAkB,EAAEC,OAAe;IAC7C,IAAI,CAACD,UAAU,GAAGA,UAAU;IAC5B,IAAI,CAACC,OAAO,GAAGA,OAAO;EACxB;;AAVFG;AAaA;;;;;AAKA,MAAaE,iBAAiB;EAM5B;EACAP,YAAYC,UAAkB,EAAEC,OAAe;IAC7C,IAAI,CAACD,UAAU,GAAGA,UAAU;IAC5B,IAAI,CAACC,OAAO,GAAGA,OAAO;EACxB;;AAVFG;AAaA;;;;;AAKA,MAAaG,+BAA+B;EAQ1C;EACAR,YACEC,UAAkB,EAClBE,mBAAwC,EACxCC,cAAmC;IAEnC,IAAI,CAACH,UAAU,GAAGA,UAAU;IAC5B,IAAI,CAACE,mBAAmB,GAAGA,mBAAmB;IAC9C,IAAI,CAACC,cAAc,GAAGA,cAAc;EACtC;;AAjBFC;AAoBA;;;;;AAKA,MAAaI,oBAAoB;EAI/B;EACAT,YAAYC,UAAkB;IAC5B,IAAI,CAACA,UAAU,GAAGA,UAAU;EAC9B;;AAPFI;AAUA;;;;;AAKA,MAAaK,mBAAmB;EAI9B;EACAV,YAAYC,UAAkB;IAC5B,IAAI,CAACA,UAAU,GAAGA,UAAU;EAC9B;;AAPFI;AAUA;;;;;;;AAOA,MAAaM,2BAA2B;EAItC;EACAX,YAAYY,YAAoB;IAC9B,IAAI,CAACA,YAAY,GAAGA,YAAY;EAClC;;AAPFP;AAUA;;;;;AAKA,MAAaQ,6BAA6B;EAQxC;EACAb,YAAYY,YAAoB,EAAEE,QAAgB,EAAEC,KAAsB;IACxE,IAAI,CAACH,YAAY,GAAGA,YAAY;IAChC,IAAI,CAACE,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACC,KAAK,GAAGA,KAAK,aAALA,KAAK,cAALA,KAAK,GAAI,EAAE;EAC1B;;AAbFV;AAgBA;;;;;AAKA,MAAaW,0BAA0B;EAQrC;EACAhB,YAAYY,YAAoB,EAAEE,QAAgB,EAAEG,OAAc;IAChE,IAAI,CAACL,YAAY,GAAGA,YAAY;IAChC,IAAI,CAACE,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACG,OAAO,GAAGA,OAAO;EACxB;;AAbFZ","names":["ServerDescriptionChangedEvent","constructor","topologyId","address","previousDescription","newDescription","exports","ServerOpeningEvent","ServerClosedEvent","TopologyDescriptionChangedEvent","TopologyOpeningEvent","TopologyClosedEvent","ServerHeartbeatStartedEvent","connectionId","ServerHeartbeatSucceededEvent","duration","reply","ServerHeartbeatFailedEvent","failure"],"sources":["C:\\Users\\91930\\Desktop\\Github projects\\Pharmacy Demo\\back-end\\node_modules\\mongoose\\node_modules\\mongodb\\src\\sdam\\events.ts"],"sourcesContent":["import type { Document } from '../bson';\r\nimport type { ServerDescription } from './server_description';\r\nimport type { TopologyDescription } from './topology_description';\r\n\r\n/**\r\n * Emitted when server description changes, but does NOT include changes to the RTT.\r\n * @public\r\n * @category Event\r\n */\r\nexport class ServerDescriptionChangedEvent {\r\n  /** A unique identifier for the topology */\r\n  topologyId: number;\r\n  /** The address (host/port pair) of the server */\r\n  address: string;\r\n  /** The previous server description */\r\n  previousDescription: ServerDescription;\r\n  /** The new server description */\r\n  newDescription: ServerDescription;\r\n\r\n  /** @internal */\r\n  constructor(\r\n    topologyId: number,\r\n    address: string,\r\n    previousDescription: ServerDescription,\r\n    newDescription: ServerDescription\r\n  ) {\r\n    this.topologyId = topologyId;\r\n    this.address = address;\r\n    this.previousDescription = previousDescription;\r\n    this.newDescription = newDescription;\r\n  }\r\n}\r\n\r\n/**\r\n * Emitted when server is initialized.\r\n * @public\r\n * @category Event\r\n */\r\nexport class ServerOpeningEvent {\r\n  /** A unique identifier for the topology */\r\n  topologyId: number;\r\n  /** The address (host/port pair) of the server */\r\n  address: string;\r\n\r\n  /** @internal */\r\n  constructor(topologyId: number, address: string) {\r\n    this.topologyId = topologyId;\r\n    this.address = address;\r\n  }\r\n}\r\n\r\n/**\r\n * Emitted when server is closed.\r\n * @public\r\n * @category Event\r\n */\r\nexport class ServerClosedEvent {\r\n  /** A unique identifier for the topology */\r\n  topologyId: number;\r\n  /** The address (host/port pair) of the server */\r\n  address: string;\r\n\r\n  /** @internal */\r\n  constructor(topologyId: number, address: string) {\r\n    this.topologyId = topologyId;\r\n    this.address = address;\r\n  }\r\n}\r\n\r\n/**\r\n * Emitted when topology description changes.\r\n * @public\r\n * @category Event\r\n */\r\nexport class TopologyDescriptionChangedEvent {\r\n  /** A unique identifier for the topology */\r\n  topologyId: number;\r\n  /** The old topology description */\r\n  previousDescription: TopologyDescription;\r\n  /** The new topology description */\r\n  newDescription: TopologyDescription;\r\n\r\n  /** @internal */\r\n  constructor(\r\n    topologyId: number,\r\n    previousDescription: TopologyDescription,\r\n    newDescription: TopologyDescription\r\n  ) {\r\n    this.topologyId = topologyId;\r\n    this.previousDescription = previousDescription;\r\n    this.newDescription = newDescription;\r\n  }\r\n}\r\n\r\n/**\r\n * Emitted when topology is initialized.\r\n * @public\r\n * @category Event\r\n */\r\nexport class TopologyOpeningEvent {\r\n  /** A unique identifier for the topology */\r\n  topologyId: number;\r\n\r\n  /** @internal */\r\n  constructor(topologyId: number) {\r\n    this.topologyId = topologyId;\r\n  }\r\n}\r\n\r\n/**\r\n * Emitted when topology is closed.\r\n * @public\r\n * @category Event\r\n */\r\nexport class TopologyClosedEvent {\r\n  /** A unique identifier for the topology */\r\n  topologyId: number;\r\n\r\n  /** @internal */\r\n  constructor(topologyId: number) {\r\n    this.topologyId = topologyId;\r\n  }\r\n}\r\n\r\n/**\r\n * Emitted when the server monitor’s hello command is started - immediately before\r\n * the hello command is serialized into raw BSON and written to the socket.\r\n *\r\n * @public\r\n * @category Event\r\n */\r\nexport class ServerHeartbeatStartedEvent {\r\n  /** The connection id for the command */\r\n  connectionId: string;\r\n\r\n  /** @internal */\r\n  constructor(connectionId: string) {\r\n    this.connectionId = connectionId;\r\n  }\r\n}\r\n\r\n/**\r\n * Emitted when the server monitor’s hello succeeds.\r\n * @public\r\n * @category Event\r\n */\r\nexport class ServerHeartbeatSucceededEvent {\r\n  /** The connection id for the command */\r\n  connectionId: string;\r\n  /** The execution time of the event in ms */\r\n  duration: number;\r\n  /** The command reply */\r\n  reply: Document;\r\n\r\n  /** @internal */\r\n  constructor(connectionId: string, duration: number, reply: Document | null) {\r\n    this.connectionId = connectionId;\r\n    this.duration = duration;\r\n    this.reply = reply ?? {};\r\n  }\r\n}\r\n\r\n/**\r\n * Emitted when the server monitor’s hello fails, either with an “ok: 0” or a socket exception.\r\n * @public\r\n * @category Event\r\n */\r\nexport class ServerHeartbeatFailedEvent {\r\n  /** The connection id for the command */\r\n  connectionId: string;\r\n  /** The execution time of the event in ms */\r\n  duration: number;\r\n  /** The command failure */\r\n  failure: Error;\r\n\r\n  /** @internal */\r\n  constructor(connectionId: string, duration: number, failure: Error) {\r\n    this.connectionId = connectionId;\r\n    this.duration = duration;\r\n    this.failure = failure;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}