{"ast":null,"code":"'use strict';\n\nfunction createMultipartBuffers(boundary, sizes) {\n  const bufs = [];\n  for (let i = 0; i < sizes.length; ++i) {\n    const mb = sizes[i] * 1024 * 1024;\n    bufs.push(Buffer.from([`--${boundary}`, `content-disposition: form-data; name=\"field${i + 1}\"`, '', '0'.repeat(mb), ''].join('\\r\\n')));\n  }\n  bufs.push(Buffer.from([`--${boundary}--`, ''].join('\\r\\n')));\n  return bufs;\n}\nconst boundary = '-----------------------------168072824752491622650073';\nconst buffers = createMultipartBuffers(boundary, [10, 10, 10, 20, 50]);\nconst calls = {\n  partBegin: 0,\n  headerField: 0,\n  headerValue: 0,\n  headerEnd: 0,\n  headersEnd: 0,\n  partData: 0,\n  partEnd: 0,\n  end: 0\n};\nconst moduleName = process.argv[2];\nswitch (moduleName) {\n  case 'busboy':\n    {\n      const busboy = require('busboy');\n      const parser = busboy({\n        limits: {\n          fieldSizeLimit: Infinity\n        },\n        headers: {\n          'content-type': `multipart/form-data; boundary=${boundary}`\n        }\n      });\n      parser.on('field', (name, val, info) => {\n        ++calls.partBegin;\n        ++calls.partData;\n        ++calls.partEnd;\n      }).on('close', () => {\n        ++calls.end;\n        console.timeEnd(moduleName);\n      });\n      console.time(moduleName);\n      for (const buf of buffers) parser.write(buf);\n      break;\n    }\n  case 'formidable':\n    {\n      const {\n        MultipartParser\n      } = require('formidable');\n      const parser = new MultipartParser();\n      parser.initWithBoundary(boundary);\n      parser.on('data', _ref => {\n        let {\n          name\n        } = _ref;\n        ++calls[name];\n        if (name === 'end') console.timeEnd(moduleName);\n      });\n      console.time(moduleName);\n      for (const buf of buffers) parser.write(buf);\n      break;\n    }\n  case 'multiparty':\n    {\n      const {\n        Readable\n      } = require('stream');\n      const {\n        Form\n      } = require('multiparty');\n      const form = new Form({\n        maxFieldsSize: Infinity,\n        maxFields: Infinity,\n        maxFilesSize: Infinity,\n        autoFields: false,\n        autoFiles: false\n      });\n      const req = new Readable({\n        read: () => {}\n      });\n      req.headers = {\n        'content-type': `multipart/form-data; boundary=${boundary}`\n      };\n      function hijack(name, fn) {\n        const oldFn = form[name];\n        form[name] = function () {\n          fn();\n          return oldFn.apply(this, arguments);\n        };\n      }\n      hijack('onParseHeaderField', () => {\n        ++calls.headerField;\n      });\n      hijack('onParseHeaderValue', () => {\n        ++calls.headerValue;\n      });\n      hijack('onParsePartBegin', () => {\n        ++calls.partBegin;\n      });\n      hijack('onParsePartData', () => {\n        ++calls.partData;\n      });\n      hijack('onParsePartEnd', () => {\n        ++calls.partEnd;\n      });\n      form.on('close', () => {\n        ++calls.end;\n        console.timeEnd(moduleName);\n      }).on('part', p => p.resume());\n      console.time(moduleName);\n      form.parse(req);\n      for (const buf of buffers) req.push(buf);\n      req.push(null);\n      break;\n    }\n  default:\n    if (moduleName === undefined) console.error('Missing parser module name');else console.error(`Invalid parser module name: ${moduleName}`);\n    process.exit(1);\n}","map":{"version":3,"names":["createMultipartBuffers","boundary","sizes","bufs","i","length","mb","push","Buffer","from","repeat","join","buffers","calls","partBegin","headerField","headerValue","headerEnd","headersEnd","partData","partEnd","end","moduleName","process","argv","busboy","require","parser","limits","fieldSizeLimit","Infinity","headers","on","name","val","info","console","timeEnd","time","buf","write","MultipartParser","initWithBoundary","Readable","Form","form","maxFieldsSize","maxFields","maxFilesSize","autoFields","autoFiles","req","read","hijack","fn","oldFn","apply","arguments","p","resume","parse","undefined","error","exit"],"sources":["C:/Users/91930/Desktop/Github projects/Pharmacy Demo/back-end/node_modules/busboy/bench/bench-multipart-fields-100mb-big.js"],"sourcesContent":["'use strict';\n\nfunction createMultipartBuffers(boundary, sizes) {\n  const bufs = [];\n  for (let i = 0; i < sizes.length; ++i) {\n    const mb = sizes[i] * 1024 * 1024;\n    bufs.push(Buffer.from([\n      `--${boundary}`,\n      `content-disposition: form-data; name=\"field${i + 1}\"`,\n      '',\n      '0'.repeat(mb),\n      '',\n    ].join('\\r\\n')));\n  }\n  bufs.push(Buffer.from([\n    `--${boundary}--`,\n    '',\n  ].join('\\r\\n')));\n  return bufs;\n}\n\nconst boundary = '-----------------------------168072824752491622650073';\nconst buffers = createMultipartBuffers(boundary, [\n  10,\n  10,\n  10,\n  20,\n  50,\n]);\nconst calls = {\n  partBegin: 0,\n  headerField: 0,\n  headerValue: 0,\n  headerEnd: 0,\n  headersEnd: 0,\n  partData: 0,\n  partEnd: 0,\n  end: 0,\n};\n\nconst moduleName = process.argv[2];\nswitch (moduleName) {\n  case 'busboy': {\n    const busboy = require('busboy');\n\n    const parser = busboy({\n      limits: {\n        fieldSizeLimit: Infinity,\n      },\n      headers: {\n        'content-type': `multipart/form-data; boundary=${boundary}`,\n      },\n    });\n    parser.on('field', (name, val, info) => {\n      ++calls.partBegin;\n      ++calls.partData;\n      ++calls.partEnd;\n    }).on('close', () => {\n      ++calls.end;\n      console.timeEnd(moduleName);\n    });\n\n    console.time(moduleName);\n    for (const buf of buffers)\n      parser.write(buf);\n    break;\n  }\n\n  case 'formidable': {\n    const { MultipartParser } = require('formidable');\n\n    const parser = new MultipartParser();\n    parser.initWithBoundary(boundary);\n    parser.on('data', ({ name }) => {\n      ++calls[name];\n      if (name === 'end')\n        console.timeEnd(moduleName);\n    });\n\n    console.time(moduleName);\n    for (const buf of buffers)\n      parser.write(buf);\n\n    break;\n  }\n\n  case 'multiparty': {\n    const { Readable } = require('stream');\n\n    const { Form } = require('multiparty');\n\n    const form = new Form({\n      maxFieldsSize: Infinity,\n      maxFields: Infinity,\n      maxFilesSize: Infinity,\n      autoFields: false,\n      autoFiles: false,\n    });\n\n    const req = new Readable({ read: () => {} });\n    req.headers = {\n      'content-type': `multipart/form-data; boundary=${boundary}`,\n    };\n\n    function hijack(name, fn) {\n      const oldFn = form[name];\n      form[name] = function() {\n        fn();\n        return oldFn.apply(this, arguments);\n      };\n    }\n\n    hijack('onParseHeaderField', () => {\n      ++calls.headerField;\n    });\n    hijack('onParseHeaderValue', () => {\n      ++calls.headerValue;\n    });\n    hijack('onParsePartBegin', () => {\n      ++calls.partBegin;\n    });\n    hijack('onParsePartData', () => {\n      ++calls.partData;\n    });\n    hijack('onParsePartEnd', () => {\n      ++calls.partEnd;\n    });\n\n    form.on('close', () => {\n      ++calls.end;\n      console.timeEnd(moduleName);\n    }).on('part', (p) => p.resume());\n\n    console.time(moduleName);\n    form.parse(req);\n    for (const buf of buffers)\n      req.push(buf);\n    req.push(null);\n\n    break;\n  }\n\n  default:\n    if (moduleName === undefined)\n      console.error('Missing parser module name');\n    else\n      console.error(`Invalid parser module name: ${moduleName}`);\n    process.exit(1);\n}\n"],"mappings":"AAAA,YAAY;;AAEZ,SAASA,sBAAsB,CAACC,QAAQ,EAAEC,KAAK,EAAE;EAC/C,MAAMC,IAAI,GAAG,EAAE;EACf,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,KAAK,CAACG,MAAM,EAAE,EAAED,CAAC,EAAE;IACrC,MAAME,EAAE,GAAGJ,KAAK,CAACE,CAAC,CAAC,GAAG,IAAI,GAAG,IAAI;IACjCD,IAAI,CAACI,IAAI,CAACC,MAAM,CAACC,IAAI,CAAC,CACnB,KAAIR,QAAS,EAAC,EACd,8CAA6CG,CAAC,GAAG,CAAE,GAAE,EACtD,EAAE,EACF,GAAG,CAACM,MAAM,CAACJ,EAAE,CAAC,EACd,EAAE,CACH,CAACK,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;EAClB;EACAR,IAAI,CAACI,IAAI,CAACC,MAAM,CAACC,IAAI,CAAC,CACnB,KAAIR,QAAS,IAAG,EACjB,EAAE,CACH,CAACU,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;EAChB,OAAOR,IAAI;AACb;AAEA,MAAMF,QAAQ,GAAG,uDAAuD;AACxE,MAAMW,OAAO,GAAGZ,sBAAsB,CAACC,QAAQ,EAAE,CAC/C,EAAE,EACF,EAAE,EACF,EAAE,EACF,EAAE,EACF,EAAE,CACH,CAAC;AACF,MAAMY,KAAK,GAAG;EACZC,SAAS,EAAE,CAAC;EACZC,WAAW,EAAE,CAAC;EACdC,WAAW,EAAE,CAAC;EACdC,SAAS,EAAE,CAAC;EACZC,UAAU,EAAE,CAAC;EACbC,QAAQ,EAAE,CAAC;EACXC,OAAO,EAAE,CAAC;EACVC,GAAG,EAAE;AACP,CAAC;AAED,MAAMC,UAAU,GAAGC,OAAO,CAACC,IAAI,CAAC,CAAC,CAAC;AAClC,QAAQF,UAAU;EAChB,KAAK,QAAQ;IAAE;MACb,MAAMG,MAAM,GAAGC,OAAO,CAAC,QAAQ,CAAC;MAEhC,MAAMC,MAAM,GAAGF,MAAM,CAAC;QACpBG,MAAM,EAAE;UACNC,cAAc,EAAEC;QAClB,CAAC;QACDC,OAAO,EAAE;UACP,cAAc,EAAG,iCAAgC9B,QAAS;QAC5D;MACF,CAAC,CAAC;MACF0B,MAAM,CAACK,EAAE,CAAC,OAAO,EAAE,CAACC,IAAI,EAAEC,GAAG,EAAEC,IAAI,KAAK;QACtC,EAAEtB,KAAK,CAACC,SAAS;QACjB,EAAED,KAAK,CAACM,QAAQ;QAChB,EAAEN,KAAK,CAACO,OAAO;MACjB,CAAC,CAAC,CAACY,EAAE,CAAC,OAAO,EAAE,MAAM;QACnB,EAAEnB,KAAK,CAACQ,GAAG;QACXe,OAAO,CAACC,OAAO,CAACf,UAAU,CAAC;MAC7B,CAAC,CAAC;MAEFc,OAAO,CAACE,IAAI,CAAChB,UAAU,CAAC;MACxB,KAAK,MAAMiB,GAAG,IAAI3B,OAAO,EACvBe,MAAM,CAACa,KAAK,CAACD,GAAG,CAAC;MACnB;IACF;EAEA,KAAK,YAAY;IAAE;MACjB,MAAM;QAAEE;MAAgB,CAAC,GAAGf,OAAO,CAAC,YAAY,CAAC;MAEjD,MAAMC,MAAM,GAAG,IAAIc,eAAe,EAAE;MACpCd,MAAM,CAACe,gBAAgB,CAACzC,QAAQ,CAAC;MACjC0B,MAAM,CAACK,EAAE,CAAC,MAAM,EAAE,QAAc;QAAA,IAAb;UAAEC;QAAK,CAAC;QACzB,EAAEpB,KAAK,CAACoB,IAAI,CAAC;QACb,IAAIA,IAAI,KAAK,KAAK,EAChBG,OAAO,CAACC,OAAO,CAACf,UAAU,CAAC;MAC/B,CAAC,CAAC;MAEFc,OAAO,CAACE,IAAI,CAAChB,UAAU,CAAC;MACxB,KAAK,MAAMiB,GAAG,IAAI3B,OAAO,EACvBe,MAAM,CAACa,KAAK,CAACD,GAAG,CAAC;MAEnB;IACF;EAEA,KAAK,YAAY;IAAE;MACjB,MAAM;QAAEI;MAAS,CAAC,GAAGjB,OAAO,CAAC,QAAQ,CAAC;MAEtC,MAAM;QAAEkB;MAAK,CAAC,GAAGlB,OAAO,CAAC,YAAY,CAAC;MAEtC,MAAMmB,IAAI,GAAG,IAAID,IAAI,CAAC;QACpBE,aAAa,EAAEhB,QAAQ;QACvBiB,SAAS,EAAEjB,QAAQ;QACnBkB,YAAY,EAAElB,QAAQ;QACtBmB,UAAU,EAAE,KAAK;QACjBC,SAAS,EAAE;MACb,CAAC,CAAC;MAEF,MAAMC,GAAG,GAAG,IAAIR,QAAQ,CAAC;QAAES,IAAI,EAAE,MAAM,CAAC;MAAE,CAAC,CAAC;MAC5CD,GAAG,CAACpB,OAAO,GAAG;QACZ,cAAc,EAAG,iCAAgC9B,QAAS;MAC5D,CAAC;MAED,SAASoD,MAAM,CAACpB,IAAI,EAAEqB,EAAE,EAAE;QACxB,MAAMC,KAAK,GAAGV,IAAI,CAACZ,IAAI,CAAC;QACxBY,IAAI,CAACZ,IAAI,CAAC,GAAG,YAAW;UACtBqB,EAAE,EAAE;UACJ,OAAOC,KAAK,CAACC,KAAK,CAAC,IAAI,EAAEC,SAAS,CAAC;QACrC,CAAC;MACH;MAEAJ,MAAM,CAAC,oBAAoB,EAAE,MAAM;QACjC,EAAExC,KAAK,CAACE,WAAW;MACrB,CAAC,CAAC;MACFsC,MAAM,CAAC,oBAAoB,EAAE,MAAM;QACjC,EAAExC,KAAK,CAACG,WAAW;MACrB,CAAC,CAAC;MACFqC,MAAM,CAAC,kBAAkB,EAAE,MAAM;QAC/B,EAAExC,KAAK,CAACC,SAAS;MACnB,CAAC,CAAC;MACFuC,MAAM,CAAC,iBAAiB,EAAE,MAAM;QAC9B,EAAExC,KAAK,CAACM,QAAQ;MAClB,CAAC,CAAC;MACFkC,MAAM,CAAC,gBAAgB,EAAE,MAAM;QAC7B,EAAExC,KAAK,CAACO,OAAO;MACjB,CAAC,CAAC;MAEFyB,IAAI,CAACb,EAAE,CAAC,OAAO,EAAE,MAAM;QACrB,EAAEnB,KAAK,CAACQ,GAAG;QACXe,OAAO,CAACC,OAAO,CAACf,UAAU,CAAC;MAC7B,CAAC,CAAC,CAACU,EAAE,CAAC,MAAM,EAAG0B,CAAC,IAAKA,CAAC,CAACC,MAAM,EAAE,CAAC;MAEhCvB,OAAO,CAACE,IAAI,CAAChB,UAAU,CAAC;MACxBuB,IAAI,CAACe,KAAK,CAACT,GAAG,CAAC;MACf,KAAK,MAAMZ,GAAG,IAAI3B,OAAO,EACvBuC,GAAG,CAAC5C,IAAI,CAACgC,GAAG,CAAC;MACfY,GAAG,CAAC5C,IAAI,CAAC,IAAI,CAAC;MAEd;IACF;EAEA;IACE,IAAIe,UAAU,KAAKuC,SAAS,EAC1BzB,OAAO,CAAC0B,KAAK,CAAC,4BAA4B,CAAC,CAAC,KAE5C1B,OAAO,CAAC0B,KAAK,CAAE,+BAA8BxC,UAAW,EAAC,CAAC;IAC5DC,OAAO,CAACwC,IAAI,CAAC,CAAC,CAAC;AAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}