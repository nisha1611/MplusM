{"ast":null,"code":"(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) : typeof define === 'function' && define.amd ? define(['exports'], factory) : (global = global || self, factory(global.sift = {}));\n})(this, function (exports) {\n  'use strict';\n\n  /*! *****************************************************************************\r\n  Copyright (c) Microsoft Corporation.\r\n    Permission to use, copy, modify, and/or distribute this software for any\r\n  purpose with or without fee is hereby granted.\r\n    THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\n  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\n  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\n  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\n  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\n  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\n  PERFORMANCE OF THIS SOFTWARE.\r\n  ***************************************************************************** */\n  /* global Reflect, Promise */\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  function __extends(d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  }\n  var typeChecker = function (type) {\n    var typeString = \"[object \" + type + \"]\";\n    return function (value) {\n      return getClassName(value) === typeString;\n    };\n  };\n  var getClassName = function (value) {\n    return Object.prototype.toString.call(value);\n  };\n  var comparable = function (value) {\n    if (value instanceof Date) {\n      return value.getTime();\n    } else if (isArray(value)) {\n      return value.map(comparable);\n    } else if (value && typeof value.toJSON === \"function\") {\n      return value.toJSON();\n    }\n    return value;\n  };\n  var isArray = typeChecker(\"Array\");\n  var isObject = typeChecker(\"Object\");\n  var isFunction = typeChecker(\"Function\");\n  var isVanillaObject = function (value) {\n    return value && (value.constructor === Object || value.constructor === Array || value.constructor.toString() === \"function Object() { [native code] }\" || value.constructor.toString() === \"function Array() { [native code] }\") && !value.toJSON;\n  };\n  var equals = function (a, b) {\n    if (a == null && a == b) {\n      return true;\n    }\n    if (a === b) {\n      return true;\n    }\n    if (Object.prototype.toString.call(a) !== Object.prototype.toString.call(b)) {\n      return false;\n    }\n    if (isArray(a)) {\n      if (a.length !== b.length) {\n        return false;\n      }\n      for (var i = 0, length_1 = a.length; i < length_1; i++) {\n        if (!equals(a[i], b[i])) return false;\n      }\n      return true;\n    } else if (isObject(a)) {\n      if (Object.keys(a).length !== Object.keys(b).length) {\n        return false;\n      }\n      for (var key in a) {\n        if (!equals(a[key], b[key])) return false;\n      }\n      return true;\n    }\n    return false;\n  };\n\n  /**\r\n   * Walks through each value given the context - used for nested operations. E.g:\r\n   * { \"person.address\": { $eq: \"blarg\" }}\r\n   */\n  var walkKeyPathValues = function (item, keyPath, next, depth, key, owner) {\n    var currentKey = keyPath[depth];\n    // if array, then try matching. Might fall through for cases like:\n    // { $eq: [1, 2, 3] }, [ 1, 2, 3 ].\n    if (isArray(item) && isNaN(Number(currentKey))) {\n      for (var i = 0, length_1 = item.length; i < length_1; i++) {\n        // if FALSE is returned, then terminate walker. For operations, this simply\n        // means that the search critera was met.\n        if (!walkKeyPathValues(item[i], keyPath, next, depth, i, item)) {\n          return false;\n        }\n      }\n    }\n    if (depth === keyPath.length || item == null) {\n      return next(item, key, owner, depth === 0);\n    }\n    return walkKeyPathValues(item[currentKey], keyPath, next, depth + 1, currentKey, item);\n  };\n  var BaseOperation = /** @class */function () {\n    function BaseOperation(params, owneryQuery, options, name) {\n      this.params = params;\n      this.owneryQuery = owneryQuery;\n      this.options = options;\n      this.name = name;\n      this.init();\n    }\n    BaseOperation.prototype.init = function () {};\n    BaseOperation.prototype.reset = function () {\n      this.done = false;\n      this.keep = false;\n    };\n    return BaseOperation;\n  }();\n  var GroupOperation = /** @class */function (_super) {\n    __extends(GroupOperation, _super);\n    function GroupOperation(params, owneryQuery, options, children) {\n      var _this = _super.call(this, params, owneryQuery, options) || this;\n      _this.children = children;\n      return _this;\n    }\n    /**\r\n     */\n    GroupOperation.prototype.reset = function () {\n      this.keep = false;\n      this.done = false;\n      for (var i = 0, length_2 = this.children.length; i < length_2; i++) {\n        this.children[i].reset();\n      }\n    };\n    /**\r\n     */\n    GroupOperation.prototype.childrenNext = function (item, key, owner, root) {\n      var done = true;\n      var keep = true;\n      for (var i = 0, length_3 = this.children.length; i < length_3; i++) {\n        var childOperation = this.children[i];\n        if (!childOperation.done) {\n          childOperation.next(item, key, owner, root);\n        }\n        if (!childOperation.keep) {\n          keep = false;\n        }\n        if (childOperation.done) {\n          if (!childOperation.keep) {\n            break;\n          }\n        } else {\n          done = false;\n        }\n      }\n      this.done = done;\n      this.keep = keep;\n    };\n    return GroupOperation;\n  }(BaseOperation);\n  var NamedGroupOperation = /** @class */function (_super) {\n    __extends(NamedGroupOperation, _super);\n    function NamedGroupOperation(params, owneryQuery, options, children, name) {\n      var _this = _super.call(this, params, owneryQuery, options, children) || this;\n      _this.name = name;\n      return _this;\n    }\n    return NamedGroupOperation;\n  }(GroupOperation);\n  var QueryOperation = /** @class */function (_super) {\n    __extends(QueryOperation, _super);\n    function QueryOperation() {\n      var _this = _super !== null && _super.apply(this, arguments) || this;\n      _this.propop = true;\n      return _this;\n    }\n    /**\r\n     */\n    QueryOperation.prototype.next = function (item, key, parent, root) {\n      this.childrenNext(item, key, parent, root);\n    };\n    return QueryOperation;\n  }(GroupOperation);\n  var NestedOperation = /** @class */function (_super) {\n    __extends(NestedOperation, _super);\n    function NestedOperation(keyPath, params, owneryQuery, options, children) {\n      var _this = _super.call(this, params, owneryQuery, options, children) || this;\n      _this.keyPath = keyPath;\n      _this.propop = true;\n      /**\r\n       */\n      _this._nextNestedValue = function (value, key, owner, root) {\n        _this.childrenNext(value, key, owner, root);\n        return !_this.done;\n      };\n      return _this;\n    }\n    /**\r\n     */\n    NestedOperation.prototype.next = function (item, key, parent) {\n      walkKeyPathValues(item, this.keyPath, this._nextNestedValue, 0, key, parent);\n    };\n    return NestedOperation;\n  }(GroupOperation);\n  var createTester = function (a, compare) {\n    if (a instanceof Function) {\n      return a;\n    }\n    if (a instanceof RegExp) {\n      return function (b) {\n        var result = typeof b === \"string\" && a.test(b);\n        a.lastIndex = 0;\n        return result;\n      };\n    }\n    var comparableA = comparable(a);\n    return function (b) {\n      return compare(comparableA, comparable(b));\n    };\n  };\n  var EqualsOperation = /** @class */function (_super) {\n    __extends(EqualsOperation, _super);\n    function EqualsOperation() {\n      var _this = _super !== null && _super.apply(this, arguments) || this;\n      _this.propop = true;\n      return _this;\n    }\n    EqualsOperation.prototype.init = function () {\n      this._test = createTester(this.params, this.options.compare);\n    };\n    EqualsOperation.prototype.next = function (item, key, parent) {\n      if (!Array.isArray(parent) || parent.hasOwnProperty(key)) {\n        if (this._test(item, key, parent)) {\n          this.done = true;\n          this.keep = true;\n        }\n      }\n    };\n    return EqualsOperation;\n  }(BaseOperation);\n  var createEqualsOperation = function (params, owneryQuery, options) {\n    return new EqualsOperation(params, owneryQuery, options);\n  };\n  var NopeOperation = /** @class */function (_super) {\n    __extends(NopeOperation, _super);\n    function NopeOperation() {\n      var _this = _super !== null && _super.apply(this, arguments) || this;\n      _this.propop = true;\n      return _this;\n    }\n    NopeOperation.prototype.next = function () {\n      this.done = true;\n      this.keep = false;\n    };\n    return NopeOperation;\n  }(BaseOperation);\n  var numericalOperationCreator = function (createNumericalOperation) {\n    return function (params, owneryQuery, options, name) {\n      if (params == null) {\n        return new NopeOperation(params, owneryQuery, options, name);\n      }\n      return createNumericalOperation(params, owneryQuery, options, name);\n    };\n  };\n  var numericalOperation = function (createTester) {\n    return numericalOperationCreator(function (params, owneryQuery, options, name) {\n      var typeofParams = typeof comparable(params);\n      var test = createTester(params);\n      return new EqualsOperation(function (b) {\n        return typeof comparable(b) === typeofParams && test(b);\n      }, owneryQuery, options, name);\n    });\n  };\n  var createNamedOperation = function (name, params, parentQuery, options) {\n    var operationCreator = options.operations[name];\n    if (!operationCreator) {\n      throwUnsupportedOperation(name);\n    }\n    return operationCreator(params, parentQuery, options, name);\n  };\n  var throwUnsupportedOperation = function (name) {\n    throw new Error(\"Unsupported operation: \" + name);\n  };\n  var containsOperation = function (query, options) {\n    for (var key in query) {\n      if (options.operations.hasOwnProperty(key) || key.charAt(0) === \"$\") return true;\n    }\n    return false;\n  };\n  var createNestedOperation = function (keyPath, nestedQuery, parentKey, owneryQuery, options) {\n    if (containsOperation(nestedQuery, options)) {\n      var _a = createQueryOperations(nestedQuery, parentKey, options),\n        selfOperations = _a[0],\n        nestedOperations = _a[1];\n      if (nestedOperations.length) {\n        throw new Error(\"Property queries must contain only operations, or exact objects.\");\n      }\n      return new NestedOperation(keyPath, nestedQuery, owneryQuery, options, selfOperations);\n    }\n    return new NestedOperation(keyPath, nestedQuery, owneryQuery, options, [new EqualsOperation(nestedQuery, owneryQuery, options)]);\n  };\n  var createQueryOperation = function (query, owneryQuery, _a) {\n    if (owneryQuery === void 0) {\n      owneryQuery = null;\n    }\n    var _b = _a === void 0 ? {} : _a,\n      compare = _b.compare,\n      operations = _b.operations;\n    var options = {\n      compare: compare || equals,\n      operations: Object.assign({}, operations || {})\n    };\n    var _c = createQueryOperations(query, null, options),\n      selfOperations = _c[0],\n      nestedOperations = _c[1];\n    var ops = [];\n    if (selfOperations.length) {\n      ops.push(new NestedOperation([], query, owneryQuery, options, selfOperations));\n    }\n    ops.push.apply(ops, nestedOperations);\n    if (ops.length === 1) {\n      return ops[0];\n    }\n    return new QueryOperation(query, owneryQuery, options, ops);\n  };\n  var createQueryOperations = function (query, parentKey, options) {\n    var selfOperations = [];\n    var nestedOperations = [];\n    if (!isVanillaObject(query)) {\n      selfOperations.push(new EqualsOperation(query, query, options));\n      return [selfOperations, nestedOperations];\n    }\n    for (var key in query) {\n      if (options.operations.hasOwnProperty(key)) {\n        var op = createNamedOperation(key, query[key], query, options);\n        if (op) {\n          if (!op.propop && parentKey && !options.operations[parentKey]) {\n            throw new Error(\"Malformed query. \" + key + \" cannot be matched against property.\");\n          }\n        }\n        // probably just a flag for another operation (like $options)\n        if (op != null) {\n          selfOperations.push(op);\n        }\n      } else if (key.charAt(0) === \"$\") {\n        throwUnsupportedOperation(key);\n      } else {\n        nestedOperations.push(createNestedOperation(key.split(\".\"), query[key], key, query, options));\n      }\n    }\n    return [selfOperations, nestedOperations];\n  };\n  var createOperationTester = function (operation) {\n    return function (item, key, owner) {\n      operation.reset();\n      operation.next(item, key, owner);\n      return operation.keep;\n    };\n  };\n  var createQueryTester = function (query, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    return createOperationTester(createQueryOperation(query, null, options));\n  };\n  var $Ne = /** @class */function (_super) {\n    __extends($Ne, _super);\n    function $Ne() {\n      var _this = _super !== null && _super.apply(this, arguments) || this;\n      _this.propop = true;\n      return _this;\n    }\n    $Ne.prototype.init = function () {\n      this._test = createTester(this.params, this.options.compare);\n    };\n    $Ne.prototype.reset = function () {\n      _super.prototype.reset.call(this);\n      this.keep = true;\n    };\n    $Ne.prototype.next = function (item) {\n      if (this._test(item)) {\n        this.done = true;\n        this.keep = false;\n      }\n    };\n    return $Ne;\n  }(BaseOperation);\n  // https://docs.mongodb.com/manual/reference/operator/query/elemMatch/\n  var $ElemMatch = /** @class */function (_super) {\n    __extends($ElemMatch, _super);\n    function $ElemMatch() {\n      var _this = _super !== null && _super.apply(this, arguments) || this;\n      _this.propop = true;\n      return _this;\n    }\n    $ElemMatch.prototype.init = function () {\n      if (!this.params || typeof this.params !== \"object\") {\n        throw new Error(\"Malformed query. $elemMatch must by an object.\");\n      }\n      this._queryOperation = createQueryOperation(this.params, this.owneryQuery, this.options);\n    };\n    $ElemMatch.prototype.reset = function () {\n      _super.prototype.reset.call(this);\n      this._queryOperation.reset();\n    };\n    $ElemMatch.prototype.next = function (item) {\n      if (isArray(item)) {\n        for (var i = 0, length_1 = item.length; i < length_1; i++) {\n          // reset query operation since item being tested needs to pass _all_ query\n          // operations for it to be a success\n          this._queryOperation.reset();\n          var child = item[i];\n          this._queryOperation.next(child, i, item, false);\n          this.keep = this.keep || this._queryOperation.keep;\n        }\n        this.done = true;\n      } else {\n        this.done = false;\n        this.keep = false;\n      }\n    };\n    return $ElemMatch;\n  }(BaseOperation);\n  var $Not = /** @class */function (_super) {\n    __extends($Not, _super);\n    function $Not() {\n      var _this = _super !== null && _super.apply(this, arguments) || this;\n      _this.propop = true;\n      return _this;\n    }\n    $Not.prototype.init = function () {\n      this._queryOperation = createQueryOperation(this.params, this.owneryQuery, this.options);\n    };\n    $Not.prototype.reset = function () {\n      _super.prototype.reset.call(this);\n      this._queryOperation.reset();\n    };\n    $Not.prototype.next = function (item, key, owner, root) {\n      this._queryOperation.next(item, key, owner, root);\n      this.done = this._queryOperation.done;\n      this.keep = !this._queryOperation.keep;\n    };\n    return $Not;\n  }(BaseOperation);\n  var $Size = /** @class */function (_super) {\n    __extends($Size, _super);\n    function $Size() {\n      var _this = _super !== null && _super.apply(this, arguments) || this;\n      _this.propop = true;\n      return _this;\n    }\n    $Size.prototype.init = function () {};\n    $Size.prototype.next = function (item) {\n      if (isArray(item) && item.length === this.params) {\n        this.done = true;\n        this.keep = true;\n      }\n      // if (parent && parent.length === this.params) {\n      //   this.done = true;\n      //   this.keep = true;\n      // }\n    };\n\n    return $Size;\n  }(BaseOperation);\n  var assertGroupNotEmpty = function (values) {\n    if (values.length === 0) {\n      throw new Error(\"$and/$or/$nor must be a nonempty array\");\n    }\n  };\n  var $Or = /** @class */function (_super) {\n    __extends($Or, _super);\n    function $Or() {\n      var _this = _super !== null && _super.apply(this, arguments) || this;\n      _this.propop = false;\n      return _this;\n    }\n    $Or.prototype.init = function () {\n      var _this = this;\n      assertGroupNotEmpty(this.params);\n      this._ops = this.params.map(function (op) {\n        return createQueryOperation(op, null, _this.options);\n      });\n    };\n    $Or.prototype.reset = function () {\n      this.done = false;\n      this.keep = false;\n      for (var i = 0, length_2 = this._ops.length; i < length_2; i++) {\n        this._ops[i].reset();\n      }\n    };\n    $Or.prototype.next = function (item, key, owner) {\n      var done = false;\n      var success = false;\n      for (var i = 0, length_3 = this._ops.length; i < length_3; i++) {\n        var op = this._ops[i];\n        op.next(item, key, owner);\n        if (op.keep) {\n          done = true;\n          success = op.keep;\n          break;\n        }\n      }\n      this.keep = success;\n      this.done = done;\n    };\n    return $Or;\n  }(BaseOperation);\n  var $Nor = /** @class */function (_super) {\n    __extends($Nor, _super);\n    function $Nor() {\n      var _this = _super !== null && _super.apply(this, arguments) || this;\n      _this.propop = false;\n      return _this;\n    }\n    $Nor.prototype.next = function (item, key, owner) {\n      _super.prototype.next.call(this, item, key, owner);\n      this.keep = !this.keep;\n    };\n    return $Nor;\n  }($Or);\n  var $In = /** @class */function (_super) {\n    __extends($In, _super);\n    function $In() {\n      var _this = _super !== null && _super.apply(this, arguments) || this;\n      _this.propop = true;\n      return _this;\n    }\n    $In.prototype.init = function () {\n      var _this = this;\n      this._testers = this.params.map(function (value) {\n        if (containsOperation(value, _this.options)) {\n          throw new Error(\"cannot nest $ under \" + _this.name.toLowerCase());\n        }\n        return createTester(value, _this.options.compare);\n      });\n    };\n    $In.prototype.next = function (item, key, owner) {\n      var done = false;\n      var success = false;\n      for (var i = 0, length_4 = this._testers.length; i < length_4; i++) {\n        var test = this._testers[i];\n        if (test(item)) {\n          done = true;\n          success = true;\n          break;\n        }\n      }\n      this.keep = success;\n      this.done = done;\n    };\n    return $In;\n  }(BaseOperation);\n  var $Nin = /** @class */function (_super) {\n    __extends($Nin, _super);\n    function $Nin(params, ownerQuery, options, name) {\n      var _this = _super.call(this, params, ownerQuery, options, name) || this;\n      _this.propop = true;\n      _this._in = new $In(params, ownerQuery, options, name);\n      return _this;\n    }\n    $Nin.prototype.next = function (item, key, owner, root) {\n      this._in.next(item, key, owner);\n      if (isArray(owner) && !root) {\n        if (this._in.keep) {\n          this.keep = false;\n          this.done = true;\n        } else if (key == owner.length - 1) {\n          this.keep = true;\n          this.done = true;\n        }\n      } else {\n        this.keep = !this._in.keep;\n        this.done = true;\n      }\n    };\n    $Nin.prototype.reset = function () {\n      _super.prototype.reset.call(this);\n      this._in.reset();\n    };\n    return $Nin;\n  }(BaseOperation);\n  var $Exists = /** @class */function (_super) {\n    __extends($Exists, _super);\n    function $Exists() {\n      var _this = _super !== null && _super.apply(this, arguments) || this;\n      _this.propop = true;\n      return _this;\n    }\n    $Exists.prototype.next = function (item, key, owner) {\n      if (owner.hasOwnProperty(key) === this.params) {\n        this.done = true;\n        this.keep = true;\n      }\n    };\n    return $Exists;\n  }(BaseOperation);\n  var $And = /** @class */function (_super) {\n    __extends($And, _super);\n    function $And(params, owneryQuery, options, name) {\n      var _this = _super.call(this, params, owneryQuery, options, params.map(function (query) {\n        return createQueryOperation(query, owneryQuery, options);\n      }), name) || this;\n      _this.propop = false;\n      assertGroupNotEmpty(params);\n      return _this;\n    }\n    $And.prototype.next = function (item, key, owner, root) {\n      this.childrenNext(item, key, owner, root);\n    };\n    return $And;\n  }(NamedGroupOperation);\n  var $All = /** @class */function (_super) {\n    __extends($All, _super);\n    function $All(params, owneryQuery, options, name) {\n      var _this = _super.call(this, params, owneryQuery, options, params.map(function (query) {\n        return createQueryOperation(query, owneryQuery, options);\n      }), name) || this;\n      _this.propop = true;\n      return _this;\n    }\n    $All.prototype.next = function (item, key, owner, root) {\n      this.childrenNext(item, key, owner, root);\n    };\n    return $All;\n  }(NamedGroupOperation);\n  var $eq = function (params, owneryQuery, options) {\n    return new EqualsOperation(params, owneryQuery, options);\n  };\n  var $ne = function (params, owneryQuery, options, name) {\n    return new $Ne(params, owneryQuery, options, name);\n  };\n  var $or = function (params, owneryQuery, options, name) {\n    return new $Or(params, owneryQuery, options, name);\n  };\n  var $nor = function (params, owneryQuery, options, name) {\n    return new $Nor(params, owneryQuery, options, name);\n  };\n  var $elemMatch = function (params, owneryQuery, options, name) {\n    return new $ElemMatch(params, owneryQuery, options, name);\n  };\n  var $nin = function (params, owneryQuery, options, name) {\n    return new $Nin(params, owneryQuery, options, name);\n  };\n  var $in = function (params, owneryQuery, options, name) {\n    return new $In(params, owneryQuery, options, name);\n  };\n  var $lt = numericalOperation(function (params) {\n    return function (b) {\n      return b < params;\n    };\n  });\n  var $lte = numericalOperation(function (params) {\n    return function (b) {\n      return b <= params;\n    };\n  });\n  var $gt = numericalOperation(function (params) {\n    return function (b) {\n      return b > params;\n    };\n  });\n  var $gte = numericalOperation(function (params) {\n    return function (b) {\n      return b >= params;\n    };\n  });\n  var $mod = function (_a, owneryQuery, options) {\n    var mod = _a[0],\n      equalsValue = _a[1];\n    return new EqualsOperation(function (b) {\n      return comparable(b) % mod === equalsValue;\n    }, owneryQuery, options);\n  };\n  var $exists = function (params, owneryQuery, options, name) {\n    return new $Exists(params, owneryQuery, options, name);\n  };\n  var $regex = function (pattern, owneryQuery, options) {\n    return new EqualsOperation(new RegExp(pattern, owneryQuery.$options), owneryQuery, options);\n  };\n  var $not = function (params, owneryQuery, options, name) {\n    return new $Not(params, owneryQuery, options, name);\n  };\n  var typeAliases = {\n    number: function (v) {\n      return typeof v === \"number\";\n    },\n    string: function (v) {\n      return typeof v === \"string\";\n    },\n    bool: function (v) {\n      return typeof v === \"boolean\";\n    },\n    array: function (v) {\n      return Array.isArray(v);\n    },\n    null: function (v) {\n      return v === null;\n    },\n    timestamp: function (v) {\n      return v instanceof Date;\n    }\n  };\n  var $type = function (clazz, owneryQuery, options) {\n    return new EqualsOperation(function (b) {\n      if (typeof clazz === \"string\") {\n        if (!typeAliases[clazz]) {\n          throw new Error(\"Type alias does not exist\");\n        }\n        return typeAliases[clazz](b);\n      }\n      return b != null ? b instanceof clazz || b.constructor === clazz : false;\n    }, owneryQuery, options);\n  };\n  var $and = function (params, ownerQuery, options, name) {\n    return new $And(params, ownerQuery, options, name);\n  };\n  var $all = function (params, ownerQuery, options, name) {\n    return new $All(params, ownerQuery, options, name);\n  };\n  var $size = function (params, ownerQuery, options) {\n    return new $Size(params, ownerQuery, options, \"$size\");\n  };\n  var $options = function () {\n    return null;\n  };\n  var $where = function (params, ownerQuery, options) {\n    var test;\n    if (isFunction(params)) {\n      test = params;\n    } else if (!process.env.CSP_ENABLED) {\n      test = new Function(\"obj\", \"return \" + params);\n    } else {\n      throw new Error(\"In CSP mode, sift does not support strings in \\\"$where\\\" condition\");\n    }\n    return new EqualsOperation(function (b) {\n      return test.bind(b)(b);\n    }, ownerQuery, options);\n  };\n  var defaultOperations = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    $Size: $Size,\n    $eq: $eq,\n    $ne: $ne,\n    $or: $or,\n    $nor: $nor,\n    $elemMatch: $elemMatch,\n    $nin: $nin,\n    $in: $in,\n    $lt: $lt,\n    $lte: $lte,\n    $gt: $gt,\n    $gte: $gte,\n    $mod: $mod,\n    $exists: $exists,\n    $regex: $regex,\n    $not: $not,\n    $type: $type,\n    $and: $and,\n    $all: $all,\n    $size: $size,\n    $options: $options,\n    $where: $where\n  });\n  var createDefaultQueryOperation = function (query, ownerQuery, _a) {\n    var _b = _a === void 0 ? {} : _a,\n      compare = _b.compare,\n      operations = _b.operations;\n    return createQueryOperation(query, ownerQuery, {\n      compare: compare,\n      operations: Object.assign({}, defaultOperations, operations || {})\n    });\n  };\n  var createDefaultQueryTester = function (query, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    var op = createDefaultQueryOperation(query, null, options);\n    return createOperationTester(op);\n  };\n  exports.$Size = $Size;\n  exports.$all = $all;\n  exports.$and = $and;\n  exports.$elemMatch = $elemMatch;\n  exports.$eq = $eq;\n  exports.$exists = $exists;\n  exports.$gt = $gt;\n  exports.$gte = $gte;\n  exports.$in = $in;\n  exports.$lt = $lt;\n  exports.$lte = $lte;\n  exports.$mod = $mod;\n  exports.$ne = $ne;\n  exports.$nin = $nin;\n  exports.$nor = $nor;\n  exports.$not = $not;\n  exports.$options = $options;\n  exports.$or = $or;\n  exports.$regex = $regex;\n  exports.$size = $size;\n  exports.$type = $type;\n  exports.$where = $where;\n  exports.EqualsOperation = EqualsOperation;\n  exports.createDefaultQueryOperation = createDefaultQueryOperation;\n  exports.createEqualsOperation = createEqualsOperation;\n  exports.createOperationTester = createOperationTester;\n  exports.createQueryOperation = createQueryOperation;\n  exports.createQueryTester = createQueryTester;\n  exports.default = createDefaultQueryTester;\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n});","map":{"version":3,"mappings":"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","names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","prototype","hasOwnProperty","call","__extends","TypeError","String","__","constructor","create","typeChecker","type","typeString","value","getClassName","toString","comparable","Date","getTime","isArray","map","toJSON","isObject","isFunction","isVanillaObject","equals","a","length","length_1","i","keys","key","walkKeyPathValues","item","keyPath","next","depth","owner","currentKey","isNaN","Number","params","owneryQuery","options","name","init","BaseOperation","done","keep","children","_super","_this","GroupOperation","length_2","reset","root","length_3","childOperation","QueryOperation","parent","childrenNext","NestedOperation","_nextNestedValue","createTester","compare","Function","RegExp","result","test","lastIndex","comparableA","EqualsOperation","_test","createEqualsOperation","NopeOperation","numericalOperationCreator","createNumericalOperation","numericalOperation","typeofParams","createNamedOperation","parentQuery","operationCreator","operations","throwUnsupportedOperation","Error","containsOperation","query","charAt","createNestedOperation","nestedQuery","parentKey","createQueryOperations","selfOperations","nestedOperations","createQueryOperation","_a","_b","assign","ops","push","op","propop","split","createOperationTester","operation","createQueryTester","$Ne","$ElemMatch","_queryOperation","child","$Not","$Size","assertGroupNotEmpty","values","$Or","_ops","success","$Nor","$In","_testers","toLowerCase","length_4","ownerQuery","_in","$Nin","$Exists","$And","NamedGroupOperation","$All","$eq","$ne","$or","$nor","$elemMatch","$nin","$in","$lt","$lte","$gt","$gte","$mod","mod","equalsValue","$exists","$regex","pattern","$options","$not","typeAliases","number","v","string","bool","array","null","timestamp","$type","clazz","$and","$all","$size","$where","process","env","CSP_ENABLED","bind","createDefaultQueryOperation","defaultOperations","createDefaultQueryTester"],"sources":["C:\\Users\\91930\\Desktop\\Github projects\\Pharmacy Demo\\back-end\\node_modules\\sift\\node_modules\\tslib\\tslib.es6.js","C:\\Users\\91930\\Desktop\\Github projects\\Pharmacy Demo\\back-end\\node_modules\\sift\\src\\utils.ts","C:\\Users\\91930\\Desktop\\Github projects\\Pharmacy Demo\\back-end\\node_modules\\sift\\src\\core.ts","C:\\Users\\91930\\Desktop\\Github projects\\Pharmacy Demo\\back-end\\node_modules\\sift\\src\\operations.ts","C:\\Users\\91930\\Desktop\\Github projects\\Pharmacy Demo\\back-end\\node_modules\\sift\\src\\index.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\r\n\r\nexport function __spreadArray(to, from) {\r\n    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)\r\n        to[j] = from[i];\r\n    return to;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n}\r\n","export type Key = string | number;\r\nexport type Comparator = (a, b) => boolean;\r\nexport const typeChecker = <TType>(type) => {\r\n  const typeString = \"[object \" + type + \"]\";\r\n  return function(value): value is TType {\r\n    return getClassName(value) === typeString;\r\n  };\r\n};\r\n\r\nconst getClassName = value => Object.prototype.toString.call(value);\r\n\r\nexport const comparable = (value: any) => {\r\n  if (value instanceof Date) {\r\n    return value.getTime();\r\n  } else if (isArray(value)) {\r\n    return value.map(comparable);\r\n  } else if (value && typeof value.toJSON === \"function\") {\r\n    return value.toJSON();\r\n  }\r\n\r\n  return value;\r\n};\r\n\r\nexport const isArray = typeChecker<Array<any>>(\"Array\");\r\nexport const isObject = typeChecker<Object>(\"Object\");\r\nexport const isFunction = typeChecker<Function>(\"Function\");\r\nexport const isVanillaObject = value => {\r\n  return (\r\n    value &&\r\n    (value.constructor === Object ||\r\n      value.constructor === Array ||\r\n      value.constructor.toString() === \"function Object() { [native code] }\" ||\r\n      value.constructor.toString() === \"function Array() { [native code] }\") &&\r\n    !value.toJSON\r\n  );\r\n};\r\n\r\nexport const equals = (a, b) => {\r\n  if (a == null && a == b) {\r\n    return true;\r\n  }\r\n  if (a === b) {\r\n    return true;\r\n  }\r\n\r\n  if (Object.prototype.toString.call(a) !== Object.prototype.toString.call(b)) {\r\n    return false;\r\n  }\r\n\r\n  if (isArray(a)) {\r\n    if (a.length !== b.length) {\r\n      return false;\r\n    }\r\n    for (let i = 0, { length } = a; i < length; i++) {\r\n      if (!equals(a[i], b[i])) return false;\r\n    }\r\n    return true;\r\n  } else if (isObject(a)) {\r\n    if (Object.keys(a).length !== Object.keys(b).length) {\r\n      return false;\r\n    }\r\n    for (const key in a) {\r\n      if (!equals(a[key], b[key])) return false;\r\n    }\r\n    return true;\r\n  }\r\n  return false;\r\n};\r\n","import {\r\n  isArray,\r\n  Key,\r\n  Comparator,\r\n  isVanillaObject,\r\n  comparable,\r\n  equals\r\n} from \"./utils\";\r\n\r\nexport interface Operation<TItem> {\r\n  readonly keep: boolean;\r\n  readonly done: boolean;\r\n  propop: boolean;\r\n  reset();\r\n  next(item: TItem, key?: Key, owner?: any, root?: boolean);\r\n}\r\n\r\nexport type Tester = (\r\n  item: any,\r\n  key?: Key,\r\n  owner?: any,\r\n  root?: boolean\r\n) => boolean;\r\n\r\nexport interface NamedOperation {\r\n  name: string;\r\n}\r\n\r\nexport type OperationCreator<TItem> = (\r\n  params: any,\r\n  parentQuery: any,\r\n  options: Options,\r\n  name: string\r\n) => Operation<TItem>;\r\n\r\nexport type BasicValueQuery<TValue> = {\r\n  $eq?: TValue;\r\n  $ne?: TValue;\r\n  $lt?: TValue;\r\n  $gt?: TValue;\r\n  $lte?: TValue;\r\n  $gte?: TValue;\r\n  $in?: TValue[];\r\n  $nin?: TValue[];\r\n  $all?: TValue[];\r\n  $mod?: [number, number];\r\n  $exists?: boolean;\r\n  $regex?: string | RegExp;\r\n  $size?: number;\r\n  $where?: ((this: TValue, obj: TValue) => boolean) | string;\r\n  $options?: \"i\" | \"g\" | \"m\" | \"u\";\r\n  $type?: Function;\r\n  $not?: NestedQuery<TValue>;\r\n  $or?: NestedQuery<TValue>[];\r\n  $nor?: NestedQuery<TValue>[];\r\n  $and?: NestedQuery<TValue>[];\r\n};\r\n\r\nexport type ArrayValueQuery<TValue> = {\r\n  $elemMatch?: Query<TValue>;\r\n} & BasicValueQuery<TValue>;\r\ntype Unpacked<T> = T extends (infer U)[] ? U : T;\r\n\r\nexport type ValueQuery<TValue> = TValue extends Array<any>\r\n  ? ArrayValueQuery<Unpacked<TValue>>\r\n  : BasicValueQuery<TValue>;\r\n\r\ntype NotObject = string | number | Date | boolean | Array<any>;\r\nexport type ShapeQuery<TItemSchema> = TItemSchema extends NotObject\r\n  ? {}\r\n  : { [k in keyof TItemSchema]?: TItemSchema[k] | ValueQuery<TItemSchema[k]> };\r\n\r\nexport type NestedQuery<TItemSchema> = ValueQuery<TItemSchema> &\r\n  ShapeQuery<TItemSchema>;\r\nexport type Query<TItemSchema> =\r\n  | TItemSchema\r\n  | RegExp\r\n  | NestedQuery<TItemSchema>;\r\n\r\nexport type QueryOperators<TValue = any> = keyof ValueQuery<TValue>;\r\n\r\n/**\r\n * Walks through each value given the context - used for nested operations. E.g:\r\n * { \"person.address\": { $eq: \"blarg\" }}\r\n */\r\n\r\nconst walkKeyPathValues = (\r\n  item: any,\r\n  keyPath: Key[],\r\n  next: Tester,\r\n  depth: number,\r\n  key: Key,\r\n  owner: any\r\n) => {\r\n  const currentKey = keyPath[depth];\r\n\r\n  // if array, then try matching. Might fall through for cases like:\r\n  // { $eq: [1, 2, 3] }, [ 1, 2, 3 ].\r\n  if (isArray(item) && isNaN(Number(currentKey))) {\r\n    for (let i = 0, { length } = item; i < length; i++) {\r\n      // if FALSE is returned, then terminate walker. For operations, this simply\r\n      // means that the search critera was met.\r\n      if (!walkKeyPathValues(item[i], keyPath, next, depth, i, item)) {\r\n        return false;\r\n      }\r\n    }\r\n  }\r\n\r\n  if (depth === keyPath.length || item == null) {\r\n    return next(item, key, owner, depth === 0);\r\n  }\r\n\r\n  return walkKeyPathValues(\r\n    item[currentKey],\r\n    keyPath,\r\n    next,\r\n    depth + 1,\r\n    currentKey,\r\n    item\r\n  );\r\n};\r\n\r\nexport abstract class BaseOperation<TParams, TItem = any>\r\n  implements Operation<TItem> {\r\n  keep: boolean;\r\n  done: boolean;\r\n  abstract propop: boolean;\r\n  constructor(\r\n    readonly params: TParams,\r\n    readonly owneryQuery: any,\r\n    readonly options: Options,\r\n    readonly name?: string\r\n  ) {\r\n    this.init();\r\n  }\r\n  protected init() {}\r\n  reset() {\r\n    this.done = false;\r\n    this.keep = false;\r\n  }\r\n  abstract next(item: any, key: Key, parent: any, root: boolean);\r\n}\r\n\r\nabstract class GroupOperation extends BaseOperation<any> {\r\n  keep: boolean;\r\n  done: boolean;\r\n\r\n  constructor(\r\n    params: any,\r\n    owneryQuery: any,\r\n    options: Options,\r\n    public readonly children: Operation<any>[]\r\n  ) {\r\n    super(params, owneryQuery, options);\r\n  }\r\n\r\n  /**\r\n   */\r\n\r\n  reset() {\r\n    this.keep = false;\r\n    this.done = false;\r\n    for (let i = 0, { length } = this.children; i < length; i++) {\r\n      this.children[i].reset();\r\n    }\r\n  }\r\n\r\n  abstract next(item: any, key: Key, owner: any, root: boolean);\r\n\r\n  /**\r\n   */\r\n\r\n  protected childrenNext(item: any, key: Key, owner: any, root: boolean) {\r\n    let done = true;\r\n    let keep = true;\r\n    for (let i = 0, { length } = this.children; i < length; i++) {\r\n      const childOperation = this.children[i];\r\n      if (!childOperation.done) {\r\n        childOperation.next(item, key, owner, root);\r\n      }\r\n      if (!childOperation.keep) {\r\n        keep = false;\r\n      }\r\n      if (childOperation.done) {\r\n        if (!childOperation.keep) {\r\n          break;\r\n        }\r\n      } else {\r\n        done = false;\r\n      }\r\n    }\r\n    this.done = done;\r\n    this.keep = keep;\r\n  }\r\n}\r\n\r\nexport abstract class NamedGroupOperation extends GroupOperation\r\n  implements NamedOperation {\r\n  abstract propop: boolean;\r\n  constructor(\r\n    params: any,\r\n    owneryQuery: any,\r\n    options: Options,\r\n    children: Operation<any>[],\r\n    readonly name: string\r\n  ) {\r\n    super(params, owneryQuery, options, children);\r\n  }\r\n}\r\n\r\nexport class QueryOperation<TItem> extends GroupOperation {\r\n  readonly propop = true;\r\n  /**\r\n   */\r\n\r\n  next(item: TItem, key: Key, parent: any, root: boolean) {\r\n    this.childrenNext(item, key, parent, root);\r\n  }\r\n}\r\n\r\nexport class NestedOperation extends GroupOperation {\r\n  readonly propop = true;\r\n  constructor(\r\n    readonly keyPath: Key[],\r\n    params: any,\r\n    owneryQuery: any,\r\n    options: Options,\r\n    children: Operation<any>[]\r\n  ) {\r\n    super(params, owneryQuery, options, children);\r\n  }\r\n  /**\r\n   */\r\n\r\n  next(item: any, key: Key, parent: any) {\r\n    walkKeyPathValues(\r\n      item,\r\n      this.keyPath,\r\n      this._nextNestedValue,\r\n      0,\r\n      key,\r\n      parent\r\n    );\r\n  }\r\n\r\n  /**\r\n   */\r\n\r\n  private _nextNestedValue = (\r\n    value: any,\r\n    key: Key,\r\n    owner: any,\r\n    root: boolean\r\n  ) => {\r\n    this.childrenNext(value, key, owner, root);\r\n    return !this.done;\r\n  };\r\n}\r\n\r\nexport const createTester = (a, compare: Comparator) => {\r\n  if (a instanceof Function) {\r\n    return a;\r\n  }\r\n  if (a instanceof RegExp) {\r\n    return b => {\r\n      const result = typeof b === \"string\" && a.test(b);\r\n      a.lastIndex = 0;\r\n      return result;\r\n    };\r\n  }\r\n  const comparableA = comparable(a);\r\n  return b => compare(comparableA, comparable(b));\r\n};\r\n\r\nexport class EqualsOperation<TParam> extends BaseOperation<TParam> {\r\n  readonly propop = true;\r\n  private _test: Tester;\r\n  init() {\r\n    this._test = createTester(this.params, this.options.compare);\r\n  }\r\n  next(item, key: Key, parent: any) {\r\n    if (!Array.isArray(parent) || parent.hasOwnProperty(key)) {\r\n      if (this._test(item, key, parent)) {\r\n        this.done = true;\r\n        this.keep = true;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport const createEqualsOperation = (\r\n  params: any,\r\n  owneryQuery: any,\r\n  options: Options\r\n) => new EqualsOperation(params, owneryQuery, options);\r\n\r\nexport class NopeOperation<TParam> extends BaseOperation<TParam> {\r\n  readonly propop = true;\r\n  next() {\r\n    this.done = true;\r\n    this.keep = false;\r\n  }\r\n}\r\n\r\nexport const numericalOperationCreator = (\r\n  createNumericalOperation: OperationCreator<any>\r\n) => (params: any, owneryQuery: any, options: Options, name: string) => {\r\n  if (params == null) {\r\n    return new NopeOperation(params, owneryQuery, options, name);\r\n  }\r\n\r\n  return createNumericalOperation(params, owneryQuery, options, name);\r\n};\r\n\r\nexport const numericalOperation = (createTester: (any) => Tester) =>\r\n  numericalOperationCreator(\r\n    (params: any, owneryQuery: Query<any>, options: Options, name: string) => {\r\n      const typeofParams = typeof comparable(params);\r\n      const test = createTester(params);\r\n      return new EqualsOperation(\r\n        b => {\r\n          return typeof comparable(b) === typeofParams && test(b);\r\n        },\r\n        owneryQuery,\r\n        options,\r\n        name\r\n      );\r\n    }\r\n  );\r\n\r\nexport type Options = {\r\n  operations: {\r\n    [identifier: string]: OperationCreator<any>;\r\n  };\r\n  compare: (a, b) => boolean;\r\n};\r\n\r\nconst createNamedOperation = (\r\n  name: string,\r\n  params: any,\r\n  parentQuery: any,\r\n  options: Options\r\n) => {\r\n  const operationCreator = options.operations[name];\r\n  if (!operationCreator) {\r\n    throwUnsupportedOperation(name);\r\n  }\r\n  return operationCreator(params, parentQuery, options, name);\r\n};\r\n\r\nconst throwUnsupportedOperation = (name: string) => {\r\n  throw new Error(`Unsupported operation: ${name}`);\r\n};\r\n\r\nexport const containsOperation = (query: any, options: Options) => {\r\n  for (const key in query) {\r\n    if (options.operations.hasOwnProperty(key) || key.charAt(0) === \"$\")\r\n      return true;\r\n  }\r\n  return false;\r\n};\r\nconst createNestedOperation = (\r\n  keyPath: Key[],\r\n  nestedQuery: any,\r\n  parentKey: string,\r\n  owneryQuery: any,\r\n  options: Options\r\n) => {\r\n  if (containsOperation(nestedQuery, options)) {\r\n    const [selfOperations, nestedOperations] = createQueryOperations(\r\n      nestedQuery,\r\n      parentKey,\r\n      options\r\n    );\r\n    if (nestedOperations.length) {\r\n      throw new Error(\r\n        `Property queries must contain only operations, or exact objects.`\r\n      );\r\n    }\r\n    return new NestedOperation(\r\n      keyPath,\r\n      nestedQuery,\r\n      owneryQuery,\r\n      options,\r\n      selfOperations\r\n    );\r\n  }\r\n  return new NestedOperation(keyPath, nestedQuery, owneryQuery, options, [\r\n    new EqualsOperation(nestedQuery, owneryQuery, options)\r\n  ]);\r\n};\r\n\r\nexport const createQueryOperation = <TItem, TSchema = TItem>(\r\n  query: Query<TSchema>,\r\n  owneryQuery: any = null,\r\n  { compare, operations }: Partial<Options> = {}\r\n): QueryOperation<TItem> => {\r\n  const options = {\r\n    compare: compare || equals,\r\n    operations: Object.assign({}, operations || {})\r\n  };\r\n\r\n  const [selfOperations, nestedOperations] = createQueryOperations(\r\n    query,\r\n    null,\r\n    options\r\n  );\r\n\r\n  const ops = [];\r\n\r\n  if (selfOperations.length) {\r\n    ops.push(\r\n      new NestedOperation([], query, owneryQuery, options, selfOperations)\r\n    );\r\n  }\r\n\r\n  ops.push(...nestedOperations);\r\n\r\n  if (ops.length === 1) {\r\n    return ops[0];\r\n  }\r\n  return new QueryOperation(query, owneryQuery, options, ops);\r\n};\r\n\r\nconst createQueryOperations = (\r\n  query: any,\r\n  parentKey: string,\r\n  options: Options\r\n) => {\r\n  const selfOperations = [];\r\n  const nestedOperations = [];\r\n  if (!isVanillaObject(query)) {\r\n    selfOperations.push(new EqualsOperation(query, query, options));\r\n    return [selfOperations, nestedOperations];\r\n  }\r\n  for (const key in query) {\r\n    if (options.operations.hasOwnProperty(key)) {\r\n      const op = createNamedOperation(key, query[key], query, options);\r\n\r\n      if (op) {\r\n        if (!op.propop && parentKey && !options.operations[parentKey]) {\r\n          throw new Error(\r\n            `Malformed query. ${key} cannot be matched against property.`\r\n          );\r\n        }\r\n      }\r\n\r\n      // probably just a flag for another operation (like $options)\r\n      if (op != null) {\r\n        selfOperations.push(op);\r\n      }\r\n    } else if (key.charAt(0) === \"$\") {\r\n      throwUnsupportedOperation(key);\r\n    } else {\r\n      nestedOperations.push(\r\n        createNestedOperation(key.split(\".\"), query[key], key, query, options)\r\n      );\r\n    }\r\n  }\r\n\r\n  return [selfOperations, nestedOperations];\r\n};\r\n\r\nexport const createOperationTester = <TItem>(operation: Operation<TItem>) => (\r\n  item: TItem,\r\n  key?: Key,\r\n  owner?: any\r\n) => {\r\n  operation.reset();\r\n  operation.next(item, key, owner);\r\n  return operation.keep;\r\n};\r\n\r\nexport const createQueryTester = <TItem, TSchema = TItem>(\r\n  query: Query<TSchema>,\r\n  options: Partial<Options> = {}\r\n) => {\r\n  return createOperationTester(\r\n    createQueryOperation<TItem, TSchema>(query, null, options)\r\n  );\r\n};\r\n","import {\r\n  BaseOperation,\r\n  EqualsOperation,\r\n  Options,\r\n  createTester,\r\n  Tester,\r\n  createQueryOperation,\r\n  QueryOperation,\r\n  Operation,\r\n  Query,\r\n  NamedGroupOperation,\r\n  numericalOperation,\r\n  containsOperation,\r\n  NamedOperation\r\n} from \"./core\";\r\nimport { Key, comparable, isFunction, isArray } from \"./utils\";\r\n\r\nclass $Ne extends BaseOperation<any> {\r\n  readonly propop = true;\r\n  private _test: Tester;\r\n  init() {\r\n    this._test = createTester(this.params, this.options.compare);\r\n  }\r\n  reset() {\r\n    super.reset();\r\n    this.keep = true;\r\n  }\r\n  next(item: any) {\r\n    if (this._test(item)) {\r\n      this.done = true;\r\n      this.keep = false;\r\n    }\r\n  }\r\n}\r\n// https://docs.mongodb.com/manual/reference/operator/query/elemMatch/\r\nclass $ElemMatch extends BaseOperation<Query<any>> {\r\n  readonly propop = true;\r\n  private _queryOperation: QueryOperation<any>;\r\n  init() {\r\n    if (!this.params || typeof this.params !== \"object\") {\r\n      throw new Error(`Malformed query. $elemMatch must by an object.`);\r\n    }\r\n    this._queryOperation = createQueryOperation(\r\n      this.params,\r\n      this.owneryQuery,\r\n      this.options\r\n    );\r\n  }\r\n  reset() {\r\n    super.reset();\r\n    this._queryOperation.reset();\r\n  }\r\n  next(item: any) {\r\n    if (isArray(item)) {\r\n      for (let i = 0, { length } = item; i < length; i++) {\r\n        // reset query operation since item being tested needs to pass _all_ query\r\n        // operations for it to be a success\r\n        this._queryOperation.reset();\r\n\r\n        const child = item[i];\r\n        this._queryOperation.next(child, i, item, false);\r\n        this.keep = this.keep || this._queryOperation.keep;\r\n      }\r\n      this.done = true;\r\n    } else {\r\n      this.done = false;\r\n      this.keep = false;\r\n    }\r\n  }\r\n}\r\n\r\nclass $Not extends BaseOperation<Query<any>> {\r\n  readonly propop = true;\r\n  private _queryOperation: QueryOperation<any>;\r\n  init() {\r\n    this._queryOperation = createQueryOperation(\r\n      this.params,\r\n      this.owneryQuery,\r\n      this.options\r\n    );\r\n  }\r\n  reset() {\r\n    super.reset();\r\n    this._queryOperation.reset();\r\n  }\r\n  next(item: any, key: Key, owner: any, root: boolean) {\r\n    this._queryOperation.next(item, key, owner, root);\r\n    this.done = this._queryOperation.done;\r\n    this.keep = !this._queryOperation.keep;\r\n  }\r\n}\r\n\r\nexport class $Size extends BaseOperation<any> {\r\n  readonly propop = true;\r\n  init() {}\r\n  next(item) {\r\n    if (isArray(item) && item.length === this.params) {\r\n      this.done = true;\r\n      this.keep = true;\r\n    }\r\n    // if (parent && parent.length === this.params) {\r\n    //   this.done = true;\r\n    //   this.keep = true;\r\n    // }\r\n  }\r\n}\r\n\r\nconst assertGroupNotEmpty = (values: any[]) => {\r\n  if (values.length === 0) {\r\n    throw new Error(`$and/$or/$nor must be a nonempty array`);\r\n  }\r\n};\r\n\r\nclass $Or extends BaseOperation<any> {\r\n  readonly propop = false;\r\n  private _ops: Operation<any>[];\r\n  init() {\r\n    assertGroupNotEmpty(this.params);\r\n    this._ops = this.params.map(op =>\r\n      createQueryOperation(op, null, this.options)\r\n    );\r\n  }\r\n  reset() {\r\n    this.done = false;\r\n    this.keep = false;\r\n    for (let i = 0, { length } = this._ops; i < length; i++) {\r\n      this._ops[i].reset();\r\n    }\r\n  }\r\n  next(item: any, key: Key, owner: any) {\r\n    let done = false;\r\n    let success = false;\r\n    for (let i = 0, { length } = this._ops; i < length; i++) {\r\n      const op = this._ops[i];\r\n      op.next(item, key, owner);\r\n      if (op.keep) {\r\n        done = true;\r\n        success = op.keep;\r\n        break;\r\n      }\r\n    }\r\n\r\n    this.keep = success;\r\n    this.done = done;\r\n  }\r\n}\r\n\r\nclass $Nor extends $Or {\r\n  readonly propop = false;\r\n  next(item: any, key: Key, owner: any) {\r\n    super.next(item, key, owner);\r\n    this.keep = !this.keep;\r\n  }\r\n}\r\n\r\nclass $In extends BaseOperation<any> {\r\n  readonly propop = true;\r\n  private _testers: Tester[];\r\n  init() {\r\n    this._testers = this.params.map(value => {\r\n      if (containsOperation(value, this.options)) {\r\n        throw new Error(`cannot nest $ under ${this.name.toLowerCase()}`);\r\n      }\r\n      return createTester(value, this.options.compare);\r\n    });\r\n  }\r\n  next(item: any, key: Key, owner: any) {\r\n    let done = false;\r\n    let success = false;\r\n    for (let i = 0, { length } = this._testers; i < length; i++) {\r\n      const test = this._testers[i];\r\n      if (test(item)) {\r\n        done = true;\r\n        success = true;\r\n        break;\r\n      }\r\n    }\r\n\r\n    this.keep = success;\r\n    this.done = done;\r\n  }\r\n}\r\n\r\nclass $Nin extends BaseOperation<any> {\r\n  readonly propop = true;\r\n  private _in: $In;\r\n  constructor(params: any, ownerQuery: any, options: Options, name: string) {\r\n    super(params, ownerQuery, options, name);\r\n    this._in = new $In(params, ownerQuery, options, name);\r\n  }\r\n  next(item: any, key: Key, owner: any, root: boolean) {\r\n    this._in.next(item, key, owner);\r\n\r\n    if (isArray(owner) && !root) {\r\n      if (this._in.keep) {\r\n        this.keep = false;\r\n        this.done = true;\r\n      } else if (key == owner.length - 1) {\r\n        this.keep = true;\r\n        this.done = true;\r\n      }\r\n    } else {\r\n      this.keep = !this._in.keep;\r\n      this.done = true;\r\n    }\r\n  }\r\n  reset() {\r\n    super.reset();\r\n    this._in.reset();\r\n  }\r\n}\r\n\r\nclass $Exists extends BaseOperation<boolean> {\r\n  readonly propop = true;\r\n  next(item: any, key: Key, owner: any) {\r\n    if (owner.hasOwnProperty(key) === this.params) {\r\n      this.done = true;\r\n      this.keep = true;\r\n    }\r\n  }\r\n}\r\n\r\nclass $And extends NamedGroupOperation {\r\n  readonly propop = false;\r\n  constructor(\r\n    params: Query<any>[],\r\n    owneryQuery: Query<any>,\r\n    options: Options,\r\n    name: string\r\n  ) {\r\n    super(\r\n      params,\r\n      owneryQuery,\r\n      options,\r\n      params.map(query => createQueryOperation(query, owneryQuery, options)),\r\n      name\r\n    );\r\n\r\n    assertGroupNotEmpty(params);\r\n  }\r\n  next(item: any, key: Key, owner: any, root: boolean) {\r\n    this.childrenNext(item, key, owner, root);\r\n  }\r\n}\r\n\r\nclass $All extends NamedGroupOperation {\r\n  readonly propop = true;\r\n  constructor(\r\n    params: Query<any>[],\r\n    owneryQuery: Query<any>,\r\n    options: Options,\r\n    name: string\r\n  ) {\r\n    super(\r\n      params,\r\n      owneryQuery,\r\n      options,\r\n      params.map(query => createQueryOperation(query, owneryQuery, options)),\r\n      name\r\n    );\r\n  }\r\n  next(item: any, key: Key, owner: any, root: boolean) {\r\n    this.childrenNext(item, key, owner, root);\r\n  }\r\n}\r\n\r\nexport const $eq = (params: any, owneryQuery: Query<any>, options: Options) =>\r\n  new EqualsOperation(params, owneryQuery, options);\r\nexport const $ne = (\r\n  params: any,\r\n  owneryQuery: Query<any>,\r\n  options: Options,\r\n  name: string\r\n) => new $Ne(params, owneryQuery, options, name);\r\nexport const $or = (\r\n  params: Query<any>[],\r\n  owneryQuery: Query<any>,\r\n  options: Options,\r\n  name: string\r\n) => new $Or(params, owneryQuery, options, name);\r\nexport const $nor = (\r\n  params: Query<any>[],\r\n  owneryQuery: Query<any>,\r\n  options: Options,\r\n  name: string\r\n) => new $Nor(params, owneryQuery, options, name);\r\nexport const $elemMatch = (\r\n  params: any,\r\n  owneryQuery: Query<any>,\r\n  options: Options,\r\n  name: string\r\n) => new $ElemMatch(params, owneryQuery, options, name);\r\nexport const $nin = (\r\n  params: any,\r\n  owneryQuery: Query<any>,\r\n  options: Options,\r\n  name: string\r\n) => new $Nin(params, owneryQuery, options, name);\r\nexport const $in = (\r\n  params: any,\r\n  owneryQuery: Query<any>,\r\n  options: Options,\r\n  name: string\r\n) => {\r\n  return new $In(params, owneryQuery, options, name);\r\n};\r\n\r\nexport const $lt = numericalOperation(params => b => b < params);\r\nexport const $lte = numericalOperation(params => b => b <= params);\r\nexport const $gt = numericalOperation(params => b => b > params);\r\nexport const $gte = numericalOperation(params => b => b >= params);\r\nexport const $mod = (\r\n  [mod, equalsValue]: number[],\r\n  owneryQuery: Query<any>,\r\n  options: Options\r\n) =>\r\n  new EqualsOperation(\r\n    b => comparable(b) % mod === equalsValue,\r\n    owneryQuery,\r\n    options\r\n  );\r\nexport const $exists = (\r\n  params: boolean,\r\n  owneryQuery: Query<any>,\r\n  options: Options,\r\n  name: string\r\n) => new $Exists(params, owneryQuery, options, name);\r\nexport const $regex = (\r\n  pattern: string,\r\n  owneryQuery: Query<any>,\r\n  options: Options\r\n) =>\r\n  new EqualsOperation(\r\n    new RegExp(pattern, owneryQuery.$options),\r\n    owneryQuery,\r\n    options\r\n  );\r\nexport const $not = (\r\n  params: any,\r\n  owneryQuery: Query<any>,\r\n  options: Options,\r\n  name: string\r\n) => new $Not(params, owneryQuery, options, name);\r\n\r\nconst typeAliases = {\r\n  number: v => typeof v === \"number\",\r\n  string: v => typeof v === \"string\",\r\n  bool: v => typeof v === \"boolean\",\r\n  array: v => Array.isArray(v),\r\n  null: v => v === null,\r\n  timestamp: v => v instanceof Date\r\n};\r\n\r\nexport const $type = (\r\n  clazz: Function | string,\r\n  owneryQuery: Query<any>,\r\n  options: Options\r\n) =>\r\n  new EqualsOperation(\r\n    b => {\r\n      if (typeof clazz === \"string\") {\r\n        if (!typeAliases[clazz]) {\r\n          throw new Error(`Type alias does not exist`);\r\n        }\r\n\r\n        return typeAliases[clazz](b);\r\n      }\r\n\r\n      return b != null ? b instanceof clazz || b.constructor === clazz : false;\r\n    },\r\n    owneryQuery,\r\n    options\r\n  );\r\nexport const $and = (\r\n  params: Query<any>[],\r\n  ownerQuery: Query<any>,\r\n  options: Options,\r\n  name: string\r\n) => new $And(params, ownerQuery, options, name);\r\n\r\nexport const $all = (\r\n  params: Query<any>[],\r\n  ownerQuery: Query<any>,\r\n  options: Options,\r\n  name: string\r\n) => new $All(params, ownerQuery, options, name);\r\nexport const $size = (\r\n  params: number,\r\n  ownerQuery: Query<any>,\r\n  options: Options\r\n) => new $Size(params, ownerQuery, options, \"$size\");\r\nexport const $options = () => null;\r\nexport const $where = (\r\n  params: string | Function,\r\n  ownerQuery: Query<any>,\r\n  options: Options\r\n) => {\r\n  let test;\r\n\r\n  if (isFunction(params)) {\r\n    test = params;\r\n  } else if (!process.env.CSP_ENABLED) {\r\n    test = new Function(\"obj\", \"return \" + params);\r\n  } else {\r\n    throw new Error(\r\n      `In CSP mode, sift does not support strings in \"$where\" condition`\r\n    );\r\n  }\r\n\r\n  return new EqualsOperation(b => test.bind(b)(b), ownerQuery, options);\r\n};\r\n","import * as defaultOperations from \"./operations\";\r\nimport {\r\n  Query,\r\n  QueryOperators,\r\n  BasicValueQuery,\r\n  ArrayValueQuery,\r\n  ValueQuery,\r\n  NestedQuery,\r\n  ShapeQuery,\r\n  Options,\r\n  createQueryTester,\r\n  EqualsOperation,\r\n  createQueryOperation,\r\n  createEqualsOperation,\r\n  createOperationTester\r\n} from \"./core\";\r\n\r\nconst createDefaultQueryOperation = <TItem, TSchema extends TItem = TItem>(\r\n  query: Query<TSchema>,\r\n  ownerQuery: any,\r\n  { compare, operations }: Partial<Options> = {}\r\n) => {\r\n  return createQueryOperation(query, ownerQuery, {\r\n    compare,\r\n    operations: Object.assign({}, defaultOperations, operations || {})\r\n  });\r\n};\r\n\r\nconst createDefaultQueryTester = <TItem, TSchema extends TItem = TItem>(\r\n  query: Query<TSchema>,\r\n  options: Partial<Options> = {}\r\n) => {\r\n  const op = createDefaultQueryOperation(query, null, options);\r\n  return createOperationTester(op);\r\n};\r\n\r\nexport {\r\n  Query,\r\n  QueryOperators,\r\n  BasicValueQuery,\r\n  ArrayValueQuery,\r\n  ValueQuery,\r\n  NestedQuery,\r\n  ShapeQuery,\r\n  EqualsOperation,\r\n  createQueryTester,\r\n  createOperationTester,\r\n  createDefaultQueryOperation,\r\n  createEqualsOperation,\r\n  createQueryOperation\r\n};\r\nexport * from \"./operations\";\r\n\r\nexport default createDefaultQueryTester;\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}