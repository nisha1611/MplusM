{"ast":null,"code":"'use strict';\n\n/**\r\n * Dependencies\r\n */\nconst assert = require('assert');\nconst util = require('util');\nconst utils = require('./utils');\nconst debug = require('debug')('mquery');\n\n/**\r\n * Query constructor used for building queries.\r\n *\r\n * ####Example:\r\n *\r\n *     var query = new Query({ name: 'mquery' });\r\n *     query.setOptions({ collection: moduleCollection })\r\n *     query.where('age').gte(21).exec(callback);\r\n *\r\n * @param {Object} [criteria]\r\n * @param {Object} [options]\r\n * @api public\r\n */\n\nfunction Query(criteria, options) {\n  if (!(this instanceof Query)) return new Query(criteria, options);\n  const proto = this.constructor.prototype;\n  this.op = proto.op || undefined;\n  this.options = Object.assign({}, proto.options);\n  this._conditions = proto._conditions ? utils.clone(proto._conditions) : {};\n  this._fields = proto._fields ? utils.clone(proto._fields) : undefined;\n  this._update = proto._update ? utils.clone(proto._update) : undefined;\n  this._path = proto._path || undefined;\n  this._distinct = proto._distinct || undefined;\n  this._collection = proto._collection || undefined;\n  this._traceFunction = proto._traceFunction || undefined;\n  if (options) {\n    this.setOptions(options);\n  }\n  if (criteria) {\n    if (criteria.find && criteria.remove && criteria.update) {\n      // quack quack!\n      this.collection(criteria);\n    } else {\n      this.find(criteria);\n    }\n  }\n}\n\n/**\r\n * This is a parameter that the user can set which determines if mquery\r\n * uses $within or $geoWithin for queries. It defaults to true which\r\n * means $geoWithin will be used. If using MongoDB < 2.4 you should\r\n * set this to false.\r\n *\r\n * @api public\r\n * @property use$geoWithin\r\n */\n\nlet $withinCmd = '$geoWithin';\nObject.defineProperty(Query, 'use$geoWithin', {\n  get: function () {\n    return $withinCmd == '$geoWithin';\n  },\n  set: function (v) {\n    if (true === v) {\n      // mongodb >= 2.4\n      $withinCmd = '$geoWithin';\n    } else {\n      $withinCmd = '$within';\n    }\n  }\n});\n\n/**\r\n * Converts this query to a constructor function with all arguments and options retained.\r\n *\r\n * ####Example\r\n *\r\n *     // Create a query that will read documents with a \"video\" category from\r\n *     // `aCollection` on the primary node in the replica-set unless it is down,\r\n *     // in which case we'll read from a secondary node.\r\n *     var query = mquery({ category: 'video' })\r\n *     query.setOptions({ collection: aCollection, read: 'primaryPreferred' });\r\n *\r\n *     // create a constructor based off these settings\r\n *     var Video = query.toConstructor();\r\n *\r\n *     // Video is now a subclass of mquery() and works the same way but with the\r\n *     // default query parameters and options set.\r\n *\r\n *     // run a query with the previous settings but filter for movies with names\r\n *     // that start with \"Life\".\r\n *     Video().where({ name: /^Life/ }).exec(cb);\r\n *\r\n * @return {Query} new Query\r\n * @api public\r\n */\n\nQuery.prototype.toConstructor = function toConstructor() {\n  function CustomQuery(criteria, options) {\n    if (!(this instanceof CustomQuery)) return new CustomQuery(criteria, options);\n    Query.call(this, criteria, options);\n  }\n  utils.inherits(CustomQuery, Query);\n\n  // set inherited defaults\n  const p = CustomQuery.prototype;\n  p.options = {};\n  p.setOptions(this.options);\n  p.op = this.op;\n  p._conditions = utils.clone(this._conditions);\n  p._fields = utils.clone(this._fields);\n  p._update = utils.clone(this._update);\n  p._path = this._path;\n  p._distinct = this._distinct;\n  p._collection = this._collection;\n  p._traceFunction = this._traceFunction;\n  return CustomQuery;\n};\n\n/**\r\n * Sets query options.\r\n *\r\n * ####Options:\r\n *\r\n * - [tailable](http://www.mongodb.org/display/DOCS/Tailable+Cursors) *\r\n * - [sort](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%7B%7Bsort(\\)%7D%7D) *\r\n * - [limit](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%7B%7Blimit%28%29%7D%7D) *\r\n * - [skip](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%7B%7Bskip%28%29%7D%7D) *\r\n * - [maxScan](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%24maxScan) *\r\n * - [maxTime](http://docs.mongodb.org/manual/reference/operator/meta/maxTimeMS/#op._S_maxTimeMS) *\r\n * - [batchSize](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%7B%7BbatchSize%28%29%7D%7D) *\r\n * - [comment](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%24comment) *\r\n * - [snapshot](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%7B%7Bsnapshot%28%29%7D%7D) *\r\n * - [hint](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%24hint) *\r\n * - [slaveOk](http://docs.mongodb.org/manual/applications/replication/#read-preference) *\r\n * - [safe](http://www.mongodb.org/display/DOCS/getLastError+Command)\r\n * - collection the collection to query against\r\n *\r\n * _* denotes a query helper method is also available_\r\n *\r\n * @param {Object} options\r\n * @api public\r\n */\n\nQuery.prototype.setOptions = function (options) {\n  if (!(options && utils.isObject(options))) return this;\n\n  // set arbitrary options\n  const methods = utils.keys(options);\n  let method;\n  for (let i = 0; i < methods.length; ++i) {\n    method = methods[i];\n\n    // use methods if exist (safer option manipulation)\n    if ('function' == typeof this[method]) {\n      const args = Array.isArray(options[method]) ? options[method] : [options[method]];\n      this[method].apply(this, args);\n    } else {\n      this.options[method] = options[method];\n    }\n  }\n  return this;\n};\n\n/**\r\n * Sets this Querys collection.\r\n *\r\n * @param {Collection} coll\r\n * @return {Query} this\r\n */\n\nQuery.prototype.collection = function collection(coll) {\n  this._collection = new Query.Collection(coll);\n  return this;\n};\n\n/**\r\n * Adds a collation to this op (MongoDB 3.4 and up)\r\n *\r\n * ####Example\r\n *\r\n *     query.find().collation({ locale: \"en_US\", strength: 1 })\r\n *\r\n * @param {Object} value\r\n * @return {Query} this\r\n * @see MongoDB docs https://docs.mongodb.com/manual/reference/method/cursor.collation/#cursor.collation\r\n * @api public\r\n */\n\nQuery.prototype.collation = function (value) {\n  this.options.collation = value;\n  return this;\n};\n\n/**\r\n * Specifies a `$where` condition\r\n *\r\n * Use `$where` when you need to select documents using a JavaScript expression.\r\n *\r\n * ####Example\r\n *\r\n *     query.$where('this.comments.length > 10 || this.name.length > 5')\r\n *\r\n *     query.$where(function () {\r\n *       return this.comments.length > 10 || this.name.length > 5;\r\n *     })\r\n *\r\n * @param {String|Function} js javascript string or function\r\n * @return {Query} this\r\n * @memberOf Query\r\n * @method $where\r\n * @api public\r\n */\n\nQuery.prototype.$where = function (js) {\n  this._conditions.$where = js;\n  return this;\n};\n\n/**\r\n * Specifies a `path` for use with chaining.\r\n *\r\n * ####Example\r\n *\r\n *     // instead of writing:\r\n *     User.find({age: {$gte: 21, $lte: 65}}, callback);\r\n *\r\n *     // we can instead write:\r\n *     User.where('age').gte(21).lte(65);\r\n *\r\n *     // passing query conditions is permitted\r\n *     User.find().where({ name: 'vonderful' })\r\n *\r\n *     // chaining\r\n *     User\r\n *     .where('age').gte(21).lte(65)\r\n *     .where('name', /^vonderful/i)\r\n *     .where('friends').slice(10)\r\n *     .exec(callback)\r\n *\r\n * @param {String} [path]\r\n * @param {Object} [val]\r\n * @return {Query} this\r\n * @api public\r\n */\n\nQuery.prototype.where = function () {\n  if (!arguments.length) return this;\n  if (!this.op) this.op = 'find';\n  const type = typeof arguments[0];\n  if ('string' == type) {\n    this._path = arguments[0];\n    if (2 === arguments.length) {\n      this._conditions[this._path] = arguments[1];\n    }\n    return this;\n  }\n  if ('object' == type && !Array.isArray(arguments[0])) {\n    return this.merge(arguments[0]);\n  }\n  throw new TypeError('path must be a string or object');\n};\n\n/**\r\n * Specifies the complementary comparison value for paths specified with `where()`\r\n *\r\n * ####Example\r\n *\r\n *     User.where('age').equals(49);\r\n *\r\n *     // is the same as\r\n *\r\n *     User.where('age', 49);\r\n *\r\n * @param {Object} val\r\n * @return {Query} this\r\n * @api public\r\n */\n\nQuery.prototype.equals = function equals(val) {\n  this._ensurePath('equals');\n  const path = this._path;\n  this._conditions[path] = val;\n  return this;\n};\n\n/**\r\n * Specifies the complementary comparison value for paths specified with `where()`\r\n * This is alias of `equals`\r\n *\r\n * ####Example\r\n *\r\n *     User.where('age').eq(49);\r\n *\r\n *     // is the same as\r\n *\r\n *     User.shere('age').equals(49);\r\n *\r\n *     // is the same as\r\n *\r\n *     User.where('age', 49);\r\n *\r\n * @param {Object} val\r\n * @return {Query} this\r\n * @api public\r\n */\n\nQuery.prototype.eq = function eq(val) {\n  this._ensurePath('eq');\n  const path = this._path;\n  this._conditions[path] = val;\n  return this;\n};\n\n/**\r\n * Specifies arguments for an `$or` condition.\r\n *\r\n * ####Example\r\n *\r\n *     query.or([{ color: 'red' }, { status: 'emergency' }])\r\n *\r\n * @param {Array} array array of conditions\r\n * @return {Query} this\r\n * @api public\r\n */\n\nQuery.prototype.or = function or(array) {\n  const or = this._conditions.$or || (this._conditions.$or = []);\n  if (!Array.isArray(array)) array = [array];\n  or.push.apply(or, array);\n  return this;\n};\n\n/**\r\n * Specifies arguments for a `$nor` condition.\r\n *\r\n * ####Example\r\n *\r\n *     query.nor([{ color: 'green' }, { status: 'ok' }])\r\n *\r\n * @param {Array} array array of conditions\r\n * @return {Query} this\r\n * @api public\r\n */\n\nQuery.prototype.nor = function nor(array) {\n  const nor = this._conditions.$nor || (this._conditions.$nor = []);\n  if (!Array.isArray(array)) array = [array];\n  nor.push.apply(nor, array);\n  return this;\n};\n\n/**\r\n * Specifies arguments for a `$and` condition.\r\n *\r\n * ####Example\r\n *\r\n *     query.and([{ color: 'green' }, { status: 'ok' }])\r\n *\r\n * @see $and http://docs.mongodb.org/manual/reference/operator/and/\r\n * @param {Array} array array of conditions\r\n * @return {Query} this\r\n * @api public\r\n */\n\nQuery.prototype.and = function and(array) {\n  const and = this._conditions.$and || (this._conditions.$and = []);\n  if (!Array.isArray(array)) array = [array];\n  and.push.apply(and, array);\n  return this;\n};\n\n/**\r\n * Specifies a $gt query condition.\r\n *\r\n * When called with one argument, the most recent path passed to `where()` is used.\r\n *\r\n * ####Example\r\n *\r\n *     Thing.find().where('age').gt(21)\r\n *\r\n *     // or\r\n *     Thing.find().gt('age', 21)\r\n *\r\n * @method gt\r\n * @memberOf Query\r\n * @param {String} [path]\r\n * @param {Number} val\r\n * @api public\r\n */\n\n/**\r\n * Specifies a $gte query condition.\r\n *\r\n * When called with one argument, the most recent path passed to `where()` is used.\r\n *\r\n * @method gte\r\n * @memberOf Query\r\n * @param {String} [path]\r\n * @param {Number} val\r\n * @api public\r\n */\n\n/**\r\n * Specifies a $lt query condition.\r\n *\r\n * When called with one argument, the most recent path passed to `where()` is used.\r\n *\r\n * @method lt\r\n * @memberOf Query\r\n * @param {String} [path]\r\n * @param {Number} val\r\n * @api public\r\n */\n\n/**\r\n * Specifies a $lte query condition.\r\n *\r\n * When called with one argument, the most recent path passed to `where()` is used.\r\n *\r\n * @method lte\r\n * @memberOf Query\r\n * @param {String} [path]\r\n * @param {Number} val\r\n * @api public\r\n */\n\n/**\r\n * Specifies a $ne query condition.\r\n *\r\n * When called with one argument, the most recent path passed to `where()` is used.\r\n *\r\n * @method ne\r\n * @memberOf Query\r\n * @param {String} [path]\r\n * @param {Number} val\r\n * @api public\r\n */\n\n/**\r\n * Specifies an $in query condition.\r\n *\r\n * When called with one argument, the most recent path passed to `where()` is used.\r\n *\r\n * @method in\r\n * @memberOf Query\r\n * @param {String} [path]\r\n * @param {Number} val\r\n * @api public\r\n */\n\n/**\r\n * Specifies an $nin query condition.\r\n *\r\n * When called with one argument, the most recent path passed to `where()` is used.\r\n *\r\n * @method nin\r\n * @memberOf Query\r\n * @param {String} [path]\r\n * @param {Number} val\r\n * @api public\r\n */\n\n/**\r\n * Specifies an $all query condition.\r\n *\r\n * When called with one argument, the most recent path passed to `where()` is used.\r\n *\r\n * @method all\r\n * @memberOf Query\r\n * @param {String} [path]\r\n * @param {Number} val\r\n * @api public\r\n */\n\n/**\r\n * Specifies a $size query condition.\r\n *\r\n * When called with one argument, the most recent path passed to `where()` is used.\r\n *\r\n * @method size\r\n * @memberOf Query\r\n * @param {String} [path]\r\n * @param {Number} val\r\n * @api public\r\n */\n\n/**\r\n * Specifies a $regex query condition.\r\n *\r\n * When called with one argument, the most recent path passed to `where()` is used.\r\n *\r\n * @method regex\r\n * @memberOf Query\r\n * @param {String} [path]\r\n * @param {String|RegExp} val\r\n * @api public\r\n */\n\n/**\r\n * Specifies a $maxDistance query condition.\r\n *\r\n * When called with one argument, the most recent path passed to `where()` is used.\r\n *\r\n * @method maxDistance\r\n * @memberOf Query\r\n * @param {String} [path]\r\n * @param {Number} val\r\n * @api public\r\n */\n\n/*!\r\n * gt, gte, lt, lte, ne, in, nin, all, regex, size, maxDistance\r\n *\r\n *     Thing.where('type').nin(array)\r\n */\n\n'gt gte lt lte ne in nin all regex size maxDistance minDistance'.split(' ').forEach(function ($conditional) {\n  Query.prototype[$conditional] = function () {\n    let path, val;\n    if (1 === arguments.length) {\n      this._ensurePath($conditional);\n      val = arguments[0];\n      path = this._path;\n    } else {\n      val = arguments[1];\n      path = arguments[0];\n    }\n    const conds = this._conditions[path] === null || typeof this._conditions[path] === 'object' ? this._conditions[path] : this._conditions[path] = {};\n    conds['$' + $conditional] = val;\n    return this;\n  };\n});\n\n/**\r\n * Specifies a `$mod` condition\r\n *\r\n * @param {String} [path]\r\n * @param {Number} val\r\n * @return {Query} this\r\n * @api public\r\n */\n\nQuery.prototype.mod = function () {\n  let val, path;\n  if (1 === arguments.length) {\n    this._ensurePath('mod');\n    val = arguments[0];\n    path = this._path;\n  } else if (2 === arguments.length && !Array.isArray(arguments[1])) {\n    this._ensurePath('mod');\n    val = [arguments[0], arguments[1]];\n    path = this._path;\n  } else if (3 === arguments.length) {\n    val = [arguments[1], arguments[2]];\n    path = arguments[0];\n  } else {\n    val = arguments[1];\n    path = arguments[0];\n  }\n  const conds = this._conditions[path] || (this._conditions[path] = {});\n  conds.$mod = val;\n  return this;\n};\n\n/**\r\n * Specifies an `$exists` condition\r\n *\r\n * ####Example\r\n *\r\n *     // { name: { $exists: true }}\r\n *     Thing.where('name').exists()\r\n *     Thing.where('name').exists(true)\r\n *     Thing.find().exists('name')\r\n *\r\n *     // { name: { $exists: false }}\r\n *     Thing.where('name').exists(false);\r\n *     Thing.find().exists('name', false);\r\n *\r\n * @param {String} [path]\r\n * @param {Number} val\r\n * @return {Query} this\r\n * @api public\r\n */\n\nQuery.prototype.exists = function () {\n  let path, val;\n  if (0 === arguments.length) {\n    this._ensurePath('exists');\n    path = this._path;\n    val = true;\n  } else if (1 === arguments.length) {\n    if ('boolean' === typeof arguments[0]) {\n      this._ensurePath('exists');\n      path = this._path;\n      val = arguments[0];\n    } else {\n      path = arguments[0];\n      val = true;\n    }\n  } else if (2 === arguments.length) {\n    path = arguments[0];\n    val = arguments[1];\n  }\n  const conds = this._conditions[path] || (this._conditions[path] = {});\n  conds.$exists = val;\n  return this;\n};\n\n/**\r\n * Specifies an `$elemMatch` condition\r\n *\r\n * ####Example\r\n *\r\n *     query.elemMatch('comment', { author: 'autobot', votes: {$gte: 5}})\r\n *\r\n *     query.where('comment').elemMatch({ author: 'autobot', votes: {$gte: 5}})\r\n *\r\n *     query.elemMatch('comment', function (elem) {\r\n *       elem.where('author').equals('autobot');\r\n *       elem.where('votes').gte(5);\r\n *     })\r\n *\r\n *     query.where('comment').elemMatch(function (elem) {\r\n *       elem.where({ author: 'autobot' });\r\n *       elem.where('votes').gte(5);\r\n *     })\r\n *\r\n * @param {String|Object|Function} path\r\n * @param {Object|Function} criteria\r\n * @return {Query} this\r\n * @api public\r\n */\n\nQuery.prototype.elemMatch = function () {\n  if (null == arguments[0]) throw new TypeError('Invalid argument');\n  let fn, path, criteria;\n  if ('function' === typeof arguments[0]) {\n    this._ensurePath('elemMatch');\n    path = this._path;\n    fn = arguments[0];\n  } else if (utils.isObject(arguments[0])) {\n    this._ensurePath('elemMatch');\n    path = this._path;\n    criteria = arguments[0];\n  } else if ('function' === typeof arguments[1]) {\n    path = arguments[0];\n    fn = arguments[1];\n  } else if (arguments[1] && utils.isObject(arguments[1])) {\n    path = arguments[0];\n    criteria = arguments[1];\n  } else {\n    throw new TypeError('Invalid argument');\n  }\n  if (fn) {\n    criteria = new Query();\n    fn(criteria);\n    criteria = criteria._conditions;\n  }\n  const conds = this._conditions[path] || (this._conditions[path] = {});\n  conds.$elemMatch = criteria;\n  return this;\n};\n\n// Spatial queries\n\n/**\r\n * Sugar for geo-spatial queries.\r\n *\r\n * ####Example\r\n *\r\n *     query.within().box()\r\n *     query.within().circle()\r\n *     query.within().geometry()\r\n *\r\n *     query.where('loc').within({ center: [50,50], radius: 10, unique: true, spherical: true });\r\n *     query.where('loc').within({ box: [[40.73, -73.9], [40.7, -73.988]] });\r\n *     query.where('loc').within({ polygon: [[],[],[],[]] });\r\n *\r\n *     query.where('loc').within([], [], []) // polygon\r\n *     query.where('loc').within([], []) // box\r\n *     query.where('loc').within({ type: 'LineString', coordinates: [...] }); // geometry\r\n *\r\n * ####NOTE:\r\n *\r\n * Must be used after `where()`.\r\n *\r\n * @memberOf Query\r\n * @return {Query} this\r\n * @api public\r\n */\n\nQuery.prototype.within = function within() {\n  // opinionated, must be used after where\n  this._ensurePath('within');\n  this._geoComparison = $withinCmd;\n  if (0 === arguments.length) {\n    return this;\n  }\n  if (2 === arguments.length) {\n    return this.box.apply(this, arguments);\n  } else if (2 < arguments.length) {\n    return this.polygon.apply(this, arguments);\n  }\n  const area = arguments[0];\n  if (!area) throw new TypeError('Invalid argument');\n  if (area.center) return this.circle(area);\n  if (area.box) return this.box.apply(this, area.box);\n  if (area.polygon) return this.polygon.apply(this, area.polygon);\n  if (area.type && area.coordinates) return this.geometry(area);\n  throw new TypeError('Invalid argument');\n};\n\n/**\r\n * Specifies a $box condition\r\n *\r\n * ####Example\r\n *\r\n *     var lowerLeft = [40.73083, -73.99756]\r\n *     var upperRight= [40.741404,  -73.988135]\r\n *\r\n *     query.where('loc').within().box(lowerLeft, upperRight)\r\n *     query.box('loc', lowerLeft, upperRight )\r\n *\r\n * @see http://www.mongodb.org/display/DOCS/Geospatial+Indexing\r\n * @see Query#within #query_Query-within\r\n * @param {String} path\r\n * @param {Object} val\r\n * @return {Query} this\r\n * @api public\r\n */\n\nQuery.prototype.box = function () {\n  let path, box;\n  if (3 === arguments.length) {\n    // box('loc', [], [])\n    path = arguments[0];\n    box = [arguments[1], arguments[2]];\n  } else if (2 === arguments.length) {\n    // box([], [])\n    this._ensurePath('box');\n    path = this._path;\n    box = [arguments[0], arguments[1]];\n  } else {\n    throw new TypeError('Invalid argument');\n  }\n  const conds = this._conditions[path] || (this._conditions[path] = {});\n  conds[this._geoComparison || $withinCmd] = {\n    $box: box\n  };\n  return this;\n};\n\n/**\r\n * Specifies a $polygon condition\r\n *\r\n * ####Example\r\n *\r\n *     query.where('loc').within().polygon([10,20], [13, 25], [7,15])\r\n *     query.polygon('loc', [10,20], [13, 25], [7,15])\r\n *\r\n * @param {String|Array} [path]\r\n * @param {Array|Object} [val]\r\n * @return {Query} this\r\n * @see http://www.mongodb.org/display/DOCS/Geospatial+Indexing\r\n * @api public\r\n */\n\nQuery.prototype.polygon = function () {\n  let val, path;\n  if ('string' == typeof arguments[0]) {\n    // polygon('loc', [],[],[])\n    val = Array.from(arguments);\n    path = val.shift();\n  } else {\n    // polygon([],[],[])\n    this._ensurePath('polygon');\n    path = this._path;\n    val = Array.from(arguments);\n  }\n  const conds = this._conditions[path] || (this._conditions[path] = {});\n  conds[this._geoComparison || $withinCmd] = {\n    $polygon: val\n  };\n  return this;\n};\n\n/**\r\n * Specifies a $center or $centerSphere condition.\r\n *\r\n * ####Example\r\n *\r\n *     var area = { center: [50, 50], radius: 10, unique: true }\r\n *     query.where('loc').within().circle(area)\r\n *     query.center('loc', area);\r\n *\r\n *     // for spherical calculations\r\n *     var area = { center: [50, 50], radius: 10, unique: true, spherical: true }\r\n *     query.where('loc').within().circle(area)\r\n *     query.center('loc', area);\r\n *\r\n * @param {String} [path]\r\n * @param {Object} area\r\n * @return {Query} this\r\n * @see http://www.mongodb.org/display/DOCS/Geospatial+Indexing\r\n * @api public\r\n */\n\nQuery.prototype.circle = function () {\n  let path, val;\n  if (1 === arguments.length) {\n    this._ensurePath('circle');\n    path = this._path;\n    val = arguments[0];\n  } else if (2 === arguments.length) {\n    path = arguments[0];\n    val = arguments[1];\n  } else {\n    throw new TypeError('Invalid argument');\n  }\n  if (!('radius' in val && val.center)) throw new Error('center and radius are required');\n  const conds = this._conditions[path] || (this._conditions[path] = {});\n  const type = val.spherical ? '$centerSphere' : '$center';\n  const wKey = this._geoComparison || $withinCmd;\n  conds[wKey] = {};\n  conds[wKey][type] = [val.center, val.radius];\n  if ('unique' in val) conds[wKey].$uniqueDocs = !!val.unique;\n  return this;\n};\n\n/**\r\n * Specifies a `$near` or `$nearSphere` condition\r\n *\r\n * These operators return documents sorted by distance.\r\n *\r\n * ####Example\r\n *\r\n *     query.where('loc').near({ center: [10, 10] });\r\n *     query.where('loc').near({ center: [10, 10], maxDistance: 5 });\r\n *     query.where('loc').near({ center: [10, 10], maxDistance: 5, spherical: true });\r\n *     query.near('loc', { center: [10, 10], maxDistance: 5 });\r\n *     query.near({ center: { type: 'Point', coordinates: [..] }})\r\n *     query.near().geometry({ type: 'Point', coordinates: [..] })\r\n *\r\n * @param {String} [path]\r\n * @param {Object} val\r\n * @return {Query} this\r\n * @see http://www.mongodb.org/display/DOCS/Geospatial+Indexing\r\n * @api public\r\n */\n\nQuery.prototype.near = function near() {\n  let path, val;\n  this._geoComparison = '$near';\n  if (0 === arguments.length) {\n    return this;\n  } else if (1 === arguments.length) {\n    this._ensurePath('near');\n    path = this._path;\n    val = arguments[0];\n  } else if (2 === arguments.length) {\n    path = arguments[0];\n    val = arguments[1];\n  } else {\n    throw new TypeError('Invalid argument');\n  }\n  if (!val.center) {\n    throw new Error('center is required');\n  }\n  const conds = this._conditions[path] || (this._conditions[path] = {});\n  const type = val.spherical ? '$nearSphere' : '$near';\n\n  // center could be a GeoJSON object or an Array\n  if (Array.isArray(val.center)) {\n    conds[type] = val.center;\n    const radius = 'maxDistance' in val ? val.maxDistance : null;\n    if (null != radius) {\n      conds.$maxDistance = radius;\n    }\n    if (null != val.minDistance) {\n      conds.$minDistance = val.minDistance;\n    }\n  } else {\n    // GeoJSON?\n    if (val.center.type != 'Point' || !Array.isArray(val.center.coordinates)) {\n      throw new Error(util.format('Invalid GeoJSON specified for %s', type));\n    }\n    conds[type] = {\n      $geometry: val.center\n    };\n\n    // MongoDB 2.6 insists on maxDistance being in $near / $nearSphere\n    if ('maxDistance' in val) {\n      conds[type]['$maxDistance'] = val.maxDistance;\n    }\n    if ('minDistance' in val) {\n      conds[type]['$minDistance'] = val.minDistance;\n    }\n  }\n  return this;\n};\n\n/**\r\n * Declares an intersects query for `geometry()`.\r\n *\r\n * ####Example\r\n *\r\n *     query.where('path').intersects().geometry({\r\n *         type: 'LineString'\r\n *       , coordinates: [[180.0, 11.0], [180, 9.0]]\r\n *     })\r\n *\r\n *     query.where('path').intersects({\r\n *         type: 'LineString'\r\n *       , coordinates: [[180.0, 11.0], [180, 9.0]]\r\n *     })\r\n *\r\n * @param {Object} [arg]\r\n * @return {Query} this\r\n * @api public\r\n */\n\nQuery.prototype.intersects = function intersects() {\n  // opinionated, must be used after where\n  this._ensurePath('intersects');\n  this._geoComparison = '$geoIntersects';\n  if (0 === arguments.length) {\n    return this;\n  }\n  const area = arguments[0];\n  if (null != area && area.type && area.coordinates) return this.geometry(area);\n  throw new TypeError('Invalid argument');\n};\n\n/**\r\n * Specifies a `$geometry` condition\r\n *\r\n * ####Example\r\n *\r\n *     var polyA = [[[ 10, 20 ], [ 10, 40 ], [ 30, 40 ], [ 30, 20 ]]]\r\n *     query.where('loc').within().geometry({ type: 'Polygon', coordinates: polyA })\r\n *\r\n *     // or\r\n *     var polyB = [[ 0, 0 ], [ 1, 1 ]]\r\n *     query.where('loc').within().geometry({ type: 'LineString', coordinates: polyB })\r\n *\r\n *     // or\r\n *     var polyC = [ 0, 0 ]\r\n *     query.where('loc').within().geometry({ type: 'Point', coordinates: polyC })\r\n *\r\n *     // or\r\n *     query.where('loc').intersects().geometry({ type: 'Point', coordinates: polyC })\r\n *\r\n * ####NOTE:\r\n *\r\n * `geometry()` **must** come after either `intersects()` or `within()`.\r\n *\r\n * The `object` argument must contain `type` and `coordinates` properties.\r\n * - type {String}\r\n * - coordinates {Array}\r\n *\r\n * The most recent path passed to `where()` is used.\r\n *\r\n * @param {Object} object Must contain a `type` property which is a String and a `coordinates` property which is an Array. See the examples.\r\n * @return {Query} this\r\n * @see http://docs.mongodb.org/manual/release-notes/2.4/#new-geospatial-indexes-with-geojson-and-improved-spherical-geometry\r\n * @see http://www.mongodb.org/display/DOCS/Geospatial+Indexing\r\n * @see $geometry http://docs.mongodb.org/manual/reference/operator/geometry/\r\n * @api public\r\n */\n\nQuery.prototype.geometry = function geometry() {\n  if (!('$within' == this._geoComparison || '$geoWithin' == this._geoComparison || '$near' == this._geoComparison || '$geoIntersects' == this._geoComparison)) {\n    throw new Error('geometry() must come after `within()`, `intersects()`, or `near()');\n  }\n  let val, path;\n  if (1 === arguments.length) {\n    this._ensurePath('geometry');\n    path = this._path;\n    val = arguments[0];\n  } else {\n    throw new TypeError('Invalid argument');\n  }\n  if (!(val.type && Array.isArray(val.coordinates))) {\n    throw new TypeError('Invalid argument');\n  }\n  const conds = this._conditions[path] || (this._conditions[path] = {});\n  conds[this._geoComparison] = {\n    $geometry: val\n  };\n  return this;\n};\n\n// end spatial\n\n/**\r\n * Specifies which document fields to include or exclude\r\n *\r\n * ####String syntax\r\n *\r\n * When passing a string, prefixing a path with `-` will flag that path as excluded. When a path does not have the `-` prefix, it is included.\r\n *\r\n * ####Example\r\n *\r\n *     // include a and b, exclude c\r\n *     query.select('a b -c');\r\n *\r\n *     // or you may use object notation, useful when\r\n *     // you have keys already prefixed with a \"-\"\r\n *     query.select({a: 1, b: 1, c: 0});\r\n *\r\n * ####Note\r\n *\r\n * Cannot be used with `distinct()`\r\n *\r\n * @param {Object|String} arg\r\n * @return {Query} this\r\n * @see SchemaType\r\n * @api public\r\n */\n\nQuery.prototype.select = function select() {\n  let arg = arguments[0];\n  if (!arg) return this;\n  if (arguments.length !== 1) {\n    throw new Error('Invalid select: select only takes 1 argument');\n  }\n  this._validate('select');\n  const fields = this._fields || (this._fields = {});\n  const type = typeof arg;\n  let i, len;\n  if (('string' == type || utils.isArgumentsObject(arg)) && 'number' == typeof arg.length || Array.isArray(arg)) {\n    if ('string' == type) arg = arg.split(/\\s+/);\n    for (i = 0, len = arg.length; i < len; ++i) {\n      let field = arg[i];\n      if (!field) continue;\n      const include = '-' == field[0] ? 0 : 1;\n      if (include === 0) field = field.substring(1);\n      fields[field] = include;\n    }\n    return this;\n  }\n  if (utils.isObject(arg)) {\n    const keys = utils.keys(arg);\n    for (i = 0; i < keys.length; ++i) {\n      fields[keys[i]] = arg[keys[i]];\n    }\n    return this;\n  }\n  throw new TypeError('Invalid select() argument. Must be string or object.');\n};\n\n/**\r\n * Specifies a $slice condition for a `path`\r\n *\r\n * ####Example\r\n *\r\n *     query.slice('comments', 5)\r\n *     query.slice('comments', -5)\r\n *     query.slice('comments', [10, 5])\r\n *     query.where('comments').slice(5)\r\n *     query.where('comments').slice([-10, 5])\r\n *\r\n * @param {String} [path]\r\n * @param {Number} val number/range of elements to slice\r\n * @return {Query} this\r\n * @see mongodb http://www.mongodb.org/display/DOCS/Retrieving+a+Subset+of+Fields#RetrievingaSubsetofFields-RetrievingaSubrangeofArrayElements\r\n * @api public\r\n */\n\nQuery.prototype.slice = function () {\n  if (0 === arguments.length) return this;\n  this._validate('slice');\n  let path, val;\n  if (1 === arguments.length) {\n    const arg = arguments[0];\n    if (typeof arg === 'object' && !Array.isArray(arg)) {\n      const keys = Object.keys(arg);\n      const numKeys = keys.length;\n      for (let i = 0; i < numKeys; ++i) {\n        this.slice(keys[i], arg[keys[i]]);\n      }\n      return this;\n    }\n    this._ensurePath('slice');\n    path = this._path;\n    val = arguments[0];\n  } else if (2 === arguments.length) {\n    if ('number' === typeof arguments[0]) {\n      this._ensurePath('slice');\n      path = this._path;\n      val = [arguments[0], arguments[1]];\n    } else {\n      path = arguments[0];\n      val = arguments[1];\n    }\n  } else if (3 === arguments.length) {\n    path = arguments[0];\n    val = [arguments[1], arguments[2]];\n  }\n  const myFields = this._fields || (this._fields = {});\n  myFields[path] = {\n    $slice: val\n  };\n  return this;\n};\n\n/**\r\n * Sets the sort order\r\n *\r\n * If an object is passed, values allowed are 'asc', 'desc', 'ascending', 'descending', 1, and -1.\r\n *\r\n * If a string is passed, it must be a space delimited list of path names. The sort order of each path is ascending unless the path name is prefixed with `-` which will be treated as descending.\r\n *\r\n * ####Example\r\n *\r\n *     // these are equivalent\r\n *     query.sort({ field: 'asc', test: -1 });\r\n *     query.sort('field -test');\r\n *     query.sort([['field', 1], ['test', -1]]);\r\n *\r\n * ####Note\r\n *\r\n *  - The array syntax `.sort([['field', 1], ['test', -1]])` can only be used with [mongodb driver >= 2.0.46](https://github.com/mongodb/node-mongodb-native/blob/2.1/HISTORY.md#2046-2015-10-15).\r\n *  - Cannot be used with `distinct()`\r\n *\r\n * @param {Object|String|Array} arg\r\n * @return {Query} this\r\n * @api public\r\n */\n\nQuery.prototype.sort = function (arg) {\n  if (!arg) return this;\n  let i, len, field;\n  this._validate('sort');\n  const type = typeof arg;\n\n  // .sort([['field', 1], ['test', -1]])\n  if (Array.isArray(arg)) {\n    len = arg.length;\n    for (i = 0; i < arg.length; ++i) {\n      if (!Array.isArray(arg[i])) {\n        throw new Error('Invalid sort() argument, must be array of arrays');\n      }\n      _pushArr(this.options, arg[i][0], arg[i][1]);\n    }\n    return this;\n  }\n\n  // .sort('field -test')\n  if (1 === arguments.length && 'string' == type) {\n    arg = arg.split(/\\s+/);\n    len = arg.length;\n    for (i = 0; i < len; ++i) {\n      field = arg[i];\n      if (!field) continue;\n      const ascend = '-' == field[0] ? -1 : 1;\n      if (ascend === -1) field = field.substring(1);\n      push(this.options, field, ascend);\n    }\n    return this;\n  }\n\n  // .sort({ field: 1, test: -1 })\n  if (utils.isObject(arg)) {\n    const keys = utils.keys(arg);\n    for (i = 0; i < keys.length; ++i) {\n      field = keys[i];\n      push(this.options, field, arg[field]);\n    }\n    return this;\n  }\n  if (typeof Map !== 'undefined' && arg instanceof Map) {\n    _pushMap(this.options, arg);\n    return this;\n  }\n  throw new TypeError('Invalid sort() argument. Must be a string, object, or array.');\n};\n\n/*!\r\n * @ignore\r\n */\n\nconst _validSortValue = {\n  1: 1,\n  '-1': -1,\n  asc: 1,\n  ascending: 1,\n  desc: -1,\n  descending: -1\n};\nfunction push(opts, field, value) {\n  if (Array.isArray(opts.sort)) {\n    throw new TypeError('Can\\'t mix sort syntaxes. Use either array or object:' + '\\n- `.sort([[\\'field\\', 1], [\\'test\\', -1]])`' + '\\n- `.sort({ field: 1, test: -1 })`');\n  }\n  let s;\n  if (value && value.$meta) {\n    s = opts.sort || (opts.sort = {});\n    s[field] = {\n      $meta: value.$meta\n    };\n    return;\n  }\n  s = opts.sort || (opts.sort = {});\n  let val = String(value || 1).toLowerCase();\n  val = _validSortValue[val];\n  if (!val) throw new TypeError('Invalid sort value: { ' + field + ': ' + value + ' }');\n  s[field] = val;\n}\nfunction _pushArr(opts, field, value) {\n  opts.sort = opts.sort || [];\n  if (!Array.isArray(opts.sort)) {\n    throw new TypeError('Can\\'t mix sort syntaxes. Use either array or object:' + '\\n- `.sort([[\\'field\\', 1], [\\'test\\', -1]])`' + '\\n- `.sort({ field: 1, test: -1 })`');\n  }\n  let val = String(value || 1).toLowerCase();\n  val = _validSortValue[val];\n  if (!val) throw new TypeError('Invalid sort value: [ ' + field + ', ' + value + ' ]');\n  opts.sort.push([field, val]);\n}\nfunction _pushMap(opts, map) {\n  opts.sort = opts.sort || new Map();\n  if (!(opts.sort instanceof Map)) {\n    throw new TypeError('Can\\'t mix sort syntaxes. Use either array or ' + 'object or map consistently');\n  }\n  map.forEach(function (value, key) {\n    let val = String(value || 1).toLowerCase();\n    val = _validSortValue[val];\n    if (!val) throw new TypeError('Invalid sort value: < ' + key + ': ' + value + ' >');\n    opts.sort.set(key, val);\n  });\n}\n\n/**\r\n * Specifies the limit option.\r\n *\r\n * ####Example\r\n *\r\n *     query.limit(20)\r\n *\r\n * ####Note\r\n *\r\n * Cannot be used with `distinct()`\r\n *\r\n * @method limit\r\n * @memberOf Query\r\n * @param {Number} val\r\n * @see mongodb http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%7B%7Blimit%28%29%7D%7D\r\n * @api public\r\n */\n/**\r\n * Specifies the skip option.\r\n *\r\n * ####Example\r\n *\r\n *     query.skip(100).limit(20)\r\n *\r\n * ####Note\r\n *\r\n * Cannot be used with `distinct()`\r\n *\r\n * @method skip\r\n * @memberOf Query\r\n * @param {Number} val\r\n * @see mongodb http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%7B%7Bskip%28%29%7D%7D\r\n * @api public\r\n */\n/**\r\n * Specifies the maxScan option.\r\n *\r\n * ####Example\r\n *\r\n *     query.maxScan(100)\r\n *\r\n * ####Note\r\n *\r\n * Cannot be used with `distinct()`\r\n *\r\n * @method maxScan\r\n * @memberOf Query\r\n * @param {Number} val\r\n * @see mongodb http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%24maxScan\r\n * @api public\r\n */\n/**\r\n * Specifies the batchSize option.\r\n *\r\n * ####Example\r\n *\r\n *     query.batchSize(100)\r\n *\r\n * ####Note\r\n *\r\n * Cannot be used with `distinct()`\r\n *\r\n * @method batchSize\r\n * @memberOf Query\r\n * @param {Number} val\r\n * @see mongodb http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%7B%7BbatchSize%28%29%7D%7D\r\n * @api public\r\n */\n/**\r\n * Specifies the `comment` option.\r\n *\r\n * ####Example\r\n *\r\n *     query.comment('login query')\r\n *\r\n * ####Note\r\n *\r\n * Cannot be used with `distinct()`\r\n *\r\n * @method comment\r\n * @memberOf Query\r\n * @param {Number} val\r\n * @see mongodb http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%24comment\r\n * @api public\r\n */\n\n/*!\r\n * limit, skip, maxScan, batchSize, comment\r\n *\r\n * Sets these associated options.\r\n *\r\n *     query.comment('feed query');\r\n */\n\n['limit', 'skip', 'maxScan', 'batchSize', 'comment'].forEach(function (method) {\n  Query.prototype[method] = function (v) {\n    this._validate(method);\n    this.options[method] = v;\n    return this;\n  };\n});\n\n/**\r\n * Specifies the maxTimeMS option.\r\n *\r\n * ####Example\r\n *\r\n *     query.maxTime(100)\r\n *     query.maxTimeMS(100)\r\n *\r\n * @method maxTime\r\n * @memberOf Query\r\n * @param {Number} ms\r\n * @see mongodb http://docs.mongodb.org/manual/reference/operator/meta/maxTimeMS/#op._S_maxTimeMS\r\n * @api public\r\n */\n\nQuery.prototype.maxTime = Query.prototype.maxTimeMS = function (ms) {\n  this._validate('maxTime');\n  this.options.maxTimeMS = ms;\n  return this;\n};\n\n/**\r\n * Specifies this query as a `snapshot` query.\r\n *\r\n * ####Example\r\n *\r\n *     mquery().snapshot() // true\r\n *     mquery().snapshot(true)\r\n *     mquery().snapshot(false)\r\n *\r\n * ####Note\r\n *\r\n * Cannot be used with `distinct()`\r\n *\r\n * @see mongodb http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%7B%7Bsnapshot%28%29%7D%7D\r\n * @return {Query} this\r\n * @api public\r\n */\n\nQuery.prototype.snapshot = function () {\n  this._validate('snapshot');\n  this.options.snapshot = arguments.length ? !!arguments[0] : true;\n  return this;\n};\n\n/**\r\n * Sets query hints.\r\n *\r\n * ####Example\r\n *\r\n *     query.hint({ indexA: 1, indexB: -1});\r\n *     query.hint('indexA_1_indexB_1');\r\n *\r\n * ####Note\r\n *\r\n * Cannot be used with `distinct()`\r\n *\r\n * @param {Object|string} val a hint object or the index name\r\n * @return {Query} this\r\n * @see mongodb http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%24hint\r\n * @api public\r\n */\n\nQuery.prototype.hint = function () {\n  if (0 === arguments.length) return this;\n  this._validate('hint');\n  const arg = arguments[0];\n  if (utils.isObject(arg)) {\n    const hint = this.options.hint || (this.options.hint = {});\n\n    // must keep object keys in order so don't use Object.keys()\n    for (const k in arg) {\n      hint[k] = arg[k];\n    }\n    return this;\n  }\n  if (typeof arg === 'string') {\n    this.options.hint = arg;\n    return this;\n  }\n  throw new TypeError('Invalid hint. ' + arg);\n};\n\n/**\r\n * Requests acknowledgement that this operation has been persisted to MongoDB's\r\n * on-disk journal.\r\n * This option is only valid for operations that write to the database:\r\n *\r\n * - `deleteOne()`\r\n * - `deleteMany()`\r\n * - `findOneAndDelete()`\r\n * - `findOneAndUpdate()`\r\n * - `remove()`\r\n * - `update()`\r\n * - `updateOne()`\r\n * - `updateMany()`\r\n *\r\n * Defaults to the `j` value if it is specified in writeConcern options\r\n *\r\n * ####Example:\r\n *\r\n *     mquery().w(2).j(true).wtimeout(2000);\r\n *\r\n * @method j\r\n * @memberOf Query\r\n * @instance\r\n * @param {boolean} val\r\n * @see mongodb https://docs.mongodb.com/manual/reference/write-concern/#j-option\r\n * @return {Query} this\r\n * @api public\r\n */\n\nQuery.prototype.j = function j(val) {\n  this.options.j = val;\n  return this;\n};\n\n/**\r\n * Sets the slaveOk option. _Deprecated_ in MongoDB 2.2 in favor of read preferences.\r\n *\r\n * ####Example:\r\n *\r\n *     query.slaveOk() // true\r\n *     query.slaveOk(true)\r\n *     query.slaveOk(false)\r\n *\r\n * @deprecated use read() preferences instead if on mongodb >= 2.2\r\n * @param {Boolean} v defaults to true\r\n * @see mongodb http://docs.mongodb.org/manual/applications/replication/#read-preference\r\n * @see read()\r\n * @return {Query} this\r\n * @api public\r\n */\n\nQuery.prototype.slaveOk = function (v) {\n  this.options.slaveOk = arguments.length ? !!v : true;\n  return this;\n};\n\n/**\r\n * Sets the readPreference option for the query.\r\n *\r\n * ####Example:\r\n *\r\n *     new Query().read('primary')\r\n *     new Query().read('p')  // same as primary\r\n *\r\n *     new Query().read('primaryPreferred')\r\n *     new Query().read('pp') // same as primaryPreferred\r\n *\r\n *     new Query().read('secondary')\r\n *     new Query().read('s')  // same as secondary\r\n *\r\n *     new Query().read('secondaryPreferred')\r\n *     new Query().read('sp') // same as secondaryPreferred\r\n *\r\n *     new Query().read('nearest')\r\n *     new Query().read('n')  // same as nearest\r\n *\r\n *     // you can also use mongodb.ReadPreference class to also specify tags\r\n *     new Query().read(mongodb.ReadPreference('secondary', [{ dc:'sf', s: 1 },{ dc:'ma', s: 2 }]))\r\n *\r\n *     new Query().setReadPreference('primary') // alias of .read()\r\n *\r\n * ####Preferences:\r\n *\r\n *     primary - (default)  Read from primary only. Operations will produce an error if primary is unavailable. Cannot be combined with tags.\r\n *     secondary            Read from secondary if available, otherwise error.\r\n *     primaryPreferred     Read from primary if available, otherwise a secondary.\r\n *     secondaryPreferred   Read from a secondary if available, otherwise read from the primary.\r\n *     nearest              All operations read from among the nearest candidates, but unlike other modes, this option will include both the primary and all secondaries in the random selection.\r\n *\r\n * Aliases\r\n *\r\n *     p   primary\r\n *     pp  primaryPreferred\r\n *     s   secondary\r\n *     sp  secondaryPreferred\r\n *     n   nearest\r\n *\r\n * Read more about how to use read preferences [here](http://docs.mongodb.org/manual/applications/replication/#read-preference) and [here](http://mongodb.github.com/node-mongodb-native/driver-articles/anintroductionto1_1and2_2.html#read-preferences).\r\n *\r\n * @param {String|ReadPreference} pref one of the listed preference options or their aliases\r\n * @see mongodb http://docs.mongodb.org/manual/applications/replication/#read-preference\r\n * @see driver http://mongodb.github.com/node-mongodb-native/driver-articles/anintroductionto1_1and2_2.html#read-preferences\r\n * @return {Query} this\r\n * @api public\r\n */\n\nQuery.prototype.read = Query.prototype.setReadPreference = function (pref) {\n  if (arguments.length > 1 && !Query.prototype.read.deprecationWarningIssued) {\n    console.error('Deprecation warning: \\'tags\\' argument is not supported anymore in Query.read() method. Please use mongodb.ReadPreference object instead.');\n    Query.prototype.read.deprecationWarningIssued = true;\n  }\n  this.options.readPreference = utils.readPref(pref);\n  return this;\n};\n\n/**\r\n * Sets the readConcern option for the query.\r\n *\r\n * ####Example:\r\n *\r\n *     new Query().readConcern('local')\r\n *     new Query().readConcern('l')  // same as local\r\n *\r\n *     new Query().readConcern('available')\r\n *     new Query().readConcern('a')  // same as available\r\n *\r\n *     new Query().readConcern('majority')\r\n *     new Query().readConcern('m')  // same as majority\r\n *\r\n *     new Query().readConcern('linearizable')\r\n *     new Query().readConcern('lz') // same as linearizable\r\n *\r\n *     new Query().readConcern('snapshot')\r\n *     new Query().readConcern('s')  // same as snapshot\r\n *\r\n *     new Query().r('s') // r is alias of readConcern\r\n *\r\n *\r\n * ####Read Concern Level:\r\n *\r\n *     local         MongoDB 3.2+ The query returns from the instance with no guarantee guarantee that the data has been written to a majority of the replica set members (i.e. may be rolled back).\r\n *     available     MongoDB 3.6+ The query returns from the instance with no guarantee guarantee that the data has been written to a majority of the replica set members (i.e. may be rolled back).\r\n *     majority      MongoDB 3.2+ The query returns the data that has been acknowledged by a majority of the replica set members. The documents returned by the read operation are durable, even in the event of failure.\r\n *     linearizable  MongoDB 3.4+ The query returns data that reflects all successful majority-acknowledged writes that completed prior to the start of the read operation. The query may wait for concurrently executing writes to propagate to a majority of replica set members before returning results.\r\n *     snapshot      MongoDB 4.0+ Only available for operations within multi-document transactions. Upon transaction commit with write concern \"majority\", the transaction operations are guaranteed to have read from a snapshot of majority-committed data.\r\n\r\n\r\n *\r\n *\r\n * Aliases\r\n *\r\n *     l   local\r\n *     a   available\r\n *     m   majority\r\n *     lz  linearizable\r\n *     s   snapshot\r\n *\r\n * Read more about how to use read concern [here](https://docs.mongodb.com/manual/reference/read-concern/).\r\n *\r\n * @param {String} level one of the listed read concern level or their aliases\r\n * @see mongodb https://docs.mongodb.com/manual/reference/read-concern/\r\n * @return {Query} this\r\n * @api public\r\n */\n\nQuery.prototype.readConcern = Query.prototype.r = function (level) {\n  this.options.readConcern = utils.readConcern(level);\n  return this;\n};\n\n/**\r\n * Sets tailable option.\r\n *\r\n * ####Example\r\n *\r\n *     query.tailable() <== true\r\n *     query.tailable(true)\r\n *     query.tailable(false)\r\n *\r\n * ####Note\r\n *\r\n * Cannot be used with `distinct()`\r\n *\r\n * @param {Boolean} v defaults to true\r\n * @see mongodb http://www.mongodb.org/display/DOCS/Tailable+Cursors\r\n * @api public\r\n */\n\nQuery.prototype.tailable = function () {\n  this._validate('tailable');\n  this.options.tailable = arguments.length ? !!arguments[0] : true;\n  return this;\n};\n\n/**\r\n * Sets the specified number of `mongod` servers, or tag set of `mongod` servers,\r\n * that must acknowledge this write before this write is considered successful.\r\n * This option is only valid for operations that write to the database:\r\n *\r\n * - `deleteOne()`\r\n * - `deleteMany()`\r\n * - `findOneAndDelete()`\r\n * - `findOneAndUpdate()`\r\n * - `remove()`\r\n * - `update()`\r\n * - `updateOne()`\r\n * - `updateMany()`\r\n *\r\n * Defaults to the `w` value if it is specified in writeConcern options\r\n *\r\n * ####Example:\r\n *\r\n * mquery().writeConcern(0)\r\n * mquery().writeConcern(1)\r\n * mquery().writeConcern({ w: 1, j: true, wtimeout: 2000 })\r\n * mquery().writeConcern('majority')\r\n * mquery().writeConcern('m') // same as majority\r\n * mquery().writeConcern('tagSetName') // if the tag set is 'm', use .writeConcern({ w: 'm' }) instead\r\n * mquery().w(1) // w is alias of writeConcern\r\n *\r\n * @method writeConcern\r\n * @memberOf Query\r\n * @instance\r\n * @param {String|number|object} concern 0 for fire-and-forget, 1 for acknowledged by one server, 'majority' for majority of the replica set, or [any of the more advanced options](https://docs.mongodb.com/manual/reference/write-concern/#w-option).\r\n * @see mongodb https://docs.mongodb.com/manual/reference/write-concern/#w-option\r\n * @return {Query} this\r\n * @api public\r\n */\n\nQuery.prototype.writeConcern = Query.prototype.w = function writeConcern(concern) {\n  if ('object' === typeof concern) {\n    if ('undefined' !== typeof concern.j) this.options.j = concern.j;\n    if ('undefined' !== typeof concern.w) this.options.w = concern.w;\n    if ('undefined' !== typeof concern.wtimeout) this.options.wtimeout = concern.wtimeout;\n  } else {\n    this.options.w = 'm' === concern ? 'majority' : concern;\n  }\n  return this;\n};\n\n/**\r\n * Specifies a time limit, in milliseconds, for the write concern.\r\n * If `ms > 1`, it is maximum amount of time to wait for this write\r\n * to propagate through the replica set before this operation fails.\r\n * The default is `0`, which means no timeout.\r\n *\r\n * This option is only valid for operations that write to the database:\r\n *\r\n * - `deleteOne()`\r\n * - `deleteMany()`\r\n * - `findOneAndDelete()`\r\n * - `findOneAndUpdate()`\r\n * - `remove()`\r\n * - `update()`\r\n * - `updateOne()`\r\n * - `updateMany()`\r\n *\r\n * Defaults to `wtimeout` value if it is specified in writeConcern\r\n *\r\n * ####Example:\r\n *\r\n *     mquery().w(2).j(true).wtimeout(2000)\r\n *\r\n * @method wtimeout\r\n * @memberOf Query\r\n * @instance\r\n * @param {number} ms number of milliseconds to wait\r\n * @see mongodb https://docs.mongodb.com/manual/reference/write-concern/#wtimeout\r\n * @return {Query} this\r\n * @api public\r\n */\n\nQuery.prototype.wtimeout = Query.prototype.wTimeout = function wtimeout(ms) {\n  this.options.wtimeout = ms;\n  return this;\n};\n\n/**\r\n * Merges another Query or conditions object into this one.\r\n *\r\n * When a Query is passed, conditions, field selection and options are merged.\r\n *\r\n * @param {Query|Object} source\r\n * @return {Query} this\r\n */\n\nQuery.prototype.merge = function (source) {\n  if (!source) return this;\n  if (!Query.canMerge(source)) throw new TypeError('Invalid argument. Expected instanceof mquery or plain object');\n  if (source instanceof Query) {\n    // if source has a feature, apply it to ourselves\n\n    if (source._conditions) {\n      utils.merge(this._conditions, source._conditions);\n    }\n    if (source._fields) {\n      this._fields || (this._fields = {});\n      utils.merge(this._fields, source._fields);\n    }\n    if (source.options) {\n      this.options || (this.options = {});\n      utils.merge(this.options, source.options);\n    }\n    if (source._update) {\n      this._update || (this._update = {});\n      utils.mergeClone(this._update, source._update);\n    }\n    if (source._distinct) {\n      this._distinct = source._distinct;\n    }\n    return this;\n  }\n\n  // plain object\n  utils.merge(this._conditions, source);\n  return this;\n};\n\n/**\r\n * Finds documents.\r\n *\r\n * Passing a `callback` executes the query.\r\n *\r\n * ####Example\r\n *\r\n *     query.find()\r\n *     query.find(callback)\r\n *     query.find({ name: 'Burning Lights' }, callback)\r\n *\r\n * @param {Object} [criteria] mongodb selector\r\n * @param {Function} [callback]\r\n * @return {Query} this\r\n * @api public\r\n */\n\nQuery.prototype.find = function (criteria, callback) {\n  this.op = 'find';\n  if ('function' === typeof criteria) {\n    callback = criteria;\n    criteria = undefined;\n  } else if (Query.canMerge(criteria)) {\n    this.merge(criteria);\n  }\n  if (!callback) return this;\n  const conds = this._conditions;\n  const options = this._optionsForExec();\n  if (this.$useProjection) {\n    options.projection = this._fieldsForExec();\n  } else {\n    options.fields = this._fieldsForExec();\n  }\n  debug('find', this._collection.collectionName, conds, options);\n  callback = this._wrapCallback('find', callback, {\n    conditions: conds,\n    options: options\n  });\n  this._collection.find(conds, options, utils.tick(callback));\n  return this;\n};\n\n/**\r\n * Returns the query cursor\r\n *\r\n * ####Examples\r\n *\r\n *     query.find().cursor();\r\n *     query.cursor({ name: 'Burning Lights' });\r\n *\r\n * @param {Object} [criteria] mongodb selector\r\n * @return {Object} cursor\r\n * @api public\r\n */\n\nQuery.prototype.cursor = function cursor(criteria) {\n  if (this.op) {\n    if (this.op !== 'find') {\n      throw new TypeError('.cursor only support .find method');\n    }\n  } else {\n    this.find(criteria);\n  }\n  const conds = this._conditions;\n  const options = this._optionsForExec();\n  if (this.$useProjection) {\n    options.projection = this._fieldsForExec();\n  } else {\n    options.fields = this._fieldsForExec();\n  }\n  debug('findCursor', this._collection.collectionName, conds, options);\n  return this._collection.findCursor(conds, options);\n};\n\n/**\r\n * Executes the query as a findOne() operation.\r\n *\r\n * Passing a `callback` executes the query.\r\n *\r\n * ####Example\r\n *\r\n *     query.findOne().where('name', /^Burning/);\r\n *\r\n *     query.findOne({ name: /^Burning/ })\r\n *\r\n *     query.findOne({ name: /^Burning/ }, callback); // executes\r\n *\r\n *     query.findOne(function (err, doc) {\r\n *       if (err) return handleError(err);\r\n *       if (doc) {\r\n *         // doc may be null if no document matched\r\n *\r\n *       }\r\n *     });\r\n *\r\n * @param {Object|Query} [criteria] mongodb selector\r\n * @param {Function} [callback]\r\n * @return {Query} this\r\n * @api public\r\n */\n\nQuery.prototype.findOne = function (criteria, callback) {\n  this.op = 'findOne';\n  if ('function' === typeof criteria) {\n    callback = criteria;\n    criteria = undefined;\n  } else if (Query.canMerge(criteria)) {\n    this.merge(criteria);\n  }\n  if (!callback) return this;\n  const conds = this._conditions;\n  const options = this._optionsForExec();\n  if (this.$useProjection) {\n    options.projection = this._fieldsForExec();\n  } else {\n    options.fields = this._fieldsForExec();\n  }\n  debug('findOne', this._collection.collectionName, conds, options);\n  callback = this._wrapCallback('findOne', callback, {\n    conditions: conds,\n    options: options\n  });\n  this._collection.findOne(conds, options, utils.tick(callback));\n  return this;\n};\n\n/**\r\n * Exectues the query as a count() operation.\r\n *\r\n * Passing a `callback` executes the query.\r\n *\r\n * ####Example\r\n *\r\n *     query.count().where('color', 'black').exec(callback);\r\n *\r\n *     query.count({ color: 'black' }).count(callback)\r\n *\r\n *     query.count({ color: 'black' }, callback)\r\n *\r\n *     query.where('color', 'black').count(function (err, count) {\r\n *       if (err) return handleError(err);\r\n *       console.log('there are %d kittens', count);\r\n *     })\r\n *\r\n * @param {Object} [criteria] mongodb selector\r\n * @param {Function} [callback]\r\n * @return {Query} this\r\n * @see mongodb http://www.mongodb.org/display/DOCS/Aggregation#Aggregation-Count\r\n * @api public\r\n */\n\nQuery.prototype.count = function (criteria, callback) {\n  this.op = 'count';\n  this._validate();\n  if ('function' === typeof criteria) {\n    callback = criteria;\n    criteria = undefined;\n  } else if (Query.canMerge(criteria)) {\n    this.merge(criteria);\n  }\n  if (!callback) return this;\n  const conds = this._conditions,\n    options = this._optionsForExec();\n  debug('count', this._collection.collectionName, conds, options);\n  callback = this._wrapCallback('count', callback, {\n    conditions: conds,\n    options: options\n  });\n  this._collection.count(conds, options, utils.tick(callback));\n  return this;\n};\n\n/**\r\n * Declares or executes a distinct() operation.\r\n *\r\n * Passing a `callback` executes the query.\r\n *\r\n * ####Example\r\n *\r\n *     distinct(criteria, field, fn)\r\n *     distinct(criteria, field)\r\n *     distinct(field, fn)\r\n *     distinct(field)\r\n *     distinct(fn)\r\n *     distinct()\r\n *\r\n * @param {Object|Query} [criteria]\r\n * @param {String} [field]\r\n * @param {Function} [callback]\r\n * @return {Query} this\r\n * @see mongodb http://www.mongodb.org/display/DOCS/Aggregation#Aggregation-Distinct\r\n * @api public\r\n */\n\nQuery.prototype.distinct = function (criteria, field, callback) {\n  this.op = 'distinct';\n  this._validate();\n  if (!callback) {\n    switch (typeof field) {\n      case 'function':\n        callback = field;\n        if ('string' == typeof criteria) {\n          field = criteria;\n          criteria = undefined;\n        }\n        break;\n      case 'undefined':\n      case 'string':\n        break;\n      default:\n        throw new TypeError('Invalid `field` argument. Must be string or function');\n    }\n    switch (typeof criteria) {\n      case 'function':\n        callback = criteria;\n        criteria = field = undefined;\n        break;\n      case 'string':\n        field = criteria;\n        criteria = undefined;\n        break;\n    }\n  }\n  if ('string' == typeof field) {\n    this._distinct = field;\n  }\n  if (Query.canMerge(criteria)) {\n    this.merge(criteria);\n  }\n  if (!callback) {\n    return this;\n  }\n  if (!this._distinct) {\n    throw new Error('No value for `distinct` has been declared');\n  }\n  const conds = this._conditions,\n    options = this._optionsForExec();\n  debug('distinct', this._collection.collectionName, conds, options);\n  callback = this._wrapCallback('distinct', callback, {\n    conditions: conds,\n    options: options\n  });\n  this._collection.distinct(this._distinct, conds, options, utils.tick(callback));\n  return this;\n};\n\n/**\r\n * Declare and/or execute this query as an update() operation. By default,\r\n * `update()` only modifies the _first_ document that matches `criteria`.\r\n *\r\n * _All paths passed that are not $atomic operations will become $set ops._\r\n *\r\n * ####Example\r\n *\r\n *     mquery({ _id: id }).update({ title: 'words' }, ...)\r\n *\r\n * becomes\r\n *\r\n *     collection.update({ _id: id }, { $set: { title: 'words' }}, ...)\r\n *\r\n * ####Note\r\n *\r\n * Passing an empty object `{}` as the doc will result in a no-op unless the `overwrite` option is passed. Without the `overwrite` option set, the update operation will be ignored and the callback executed without sending the command to MongoDB so as to prevent accidently overwritting documents in the collection.\r\n *\r\n * ####Note\r\n *\r\n * The operation is only executed when a callback is passed. To force execution without a callback (which would be an unsafe write), we must first call update() and then execute it by using the `exec()` method.\r\n *\r\n *     var q = mquery(collection).where({ _id: id });\r\n *     q.update({ $set: { name: 'bob' }}).update(); // not executed\r\n *\r\n *     var q = mquery(collection).where({ _id: id });\r\n *     q.update({ $set: { name: 'bob' }}).exec(); // executed as unsafe\r\n *\r\n *     // keys that are not $atomic ops become $set.\r\n *     // this executes the same command as the previous example.\r\n *     q.update({ name: 'bob' }).where({ _id: id }).exec();\r\n *\r\n *     var q = mquery(collection).update(); // not executed\r\n *\r\n *     // overwriting with empty docs\r\n *     var q.where({ _id: id }).setOptions({ overwrite: true })\r\n *     q.update({ }, callback); // executes\r\n *\r\n *     // multi update with overwrite to empty doc\r\n *     var q = mquery(collection).where({ _id: id });\r\n *     q.setOptions({ multi: true, overwrite: true })\r\n *     q.update({ });\r\n *     q.update(callback); // executed\r\n *\r\n *     // multi updates\r\n *     mquery()\r\n *       .collection(coll)\r\n *       .update({ name: /^match/ }, { $set: { arr: [] }}, { multi: true }, callback)\r\n *     // more multi updates\r\n *     mquery({ })\r\n *       .collection(coll)\r\n *       .setOptions({ multi: true })\r\n *       .update({ $set: { arr: [] }}, callback)\r\n *\r\n *     // single update by default\r\n *     mquery({ email: 'address@example.com' })\r\n *      .collection(coll)\r\n *      .update({ $inc: { counter: 1 }}, callback)\r\n *\r\n *     // summary\r\n *     update(criteria, doc, opts, cb) // executes\r\n *     update(criteria, doc, opts)\r\n *     update(criteria, doc, cb) // executes\r\n *     update(criteria, doc)\r\n *     update(doc, cb) // executes\r\n *     update(doc)\r\n *     update(cb) // executes\r\n *     update(true) // executes (unsafe write)\r\n *     update()\r\n *\r\n * @param {Object} [criteria]\r\n * @param {Object} [doc] the update command\r\n * @param {Object} [options]\r\n * @param {Function} [callback]\r\n * @return {Query} this\r\n * @api public\r\n */\n\nQuery.prototype.update = function update(criteria, doc, options, callback) {\n  let force;\n  switch (arguments.length) {\n    case 3:\n      if ('function' == typeof options) {\n        callback = options;\n        options = undefined;\n      }\n      break;\n    case 2:\n      if ('function' == typeof doc) {\n        callback = doc;\n        doc = criteria;\n        criteria = undefined;\n      }\n      break;\n    case 1:\n      switch (typeof criteria) {\n        case 'function':\n          callback = criteria;\n          criteria = options = doc = undefined;\n          break;\n        case 'boolean':\n          // execution with no callback (unsafe write)\n          force = criteria;\n          criteria = undefined;\n          break;\n        default:\n          doc = criteria;\n          criteria = options = undefined;\n          break;\n      }\n  }\n  return _update(this, 'update', criteria, doc, options, force, callback);\n};\n\n/**\r\n * Declare and/or execute this query as an `updateMany()` operation. Identical\r\n * to `update()` except `updateMany()` will update _all_ documents that match\r\n * `criteria`, rather than just the first one.\r\n *\r\n * _All paths passed that are not $atomic operations will become $set ops._\r\n *\r\n * ####Example\r\n *\r\n *     // Update every document whose `title` contains 'test'\r\n *     mquery().updateMany({ title: /test/ }, { year: 2017 })\r\n *\r\n * @param {Object} [criteria]\r\n * @param {Object} [doc] the update command\r\n * @param {Object} [options]\r\n * @param {Function} [callback]\r\n * @return {Query} this\r\n * @api public\r\n */\n\nQuery.prototype.updateMany = function updateMany(criteria, doc, options, callback) {\n  let force;\n  switch (arguments.length) {\n    case 3:\n      if ('function' == typeof options) {\n        callback = options;\n        options = undefined;\n      }\n      break;\n    case 2:\n      if ('function' == typeof doc) {\n        callback = doc;\n        doc = criteria;\n        criteria = undefined;\n      }\n      break;\n    case 1:\n      switch (typeof criteria) {\n        case 'function':\n          callback = criteria;\n          criteria = options = doc = undefined;\n          break;\n        case 'boolean':\n          // execution with no callback (unsafe write)\n          force = criteria;\n          criteria = undefined;\n          break;\n        default:\n          doc = criteria;\n          criteria = options = undefined;\n          break;\n      }\n  }\n  return _update(this, 'updateMany', criteria, doc, options, force, callback);\n};\n\n/**\r\n * Declare and/or execute this query as an `updateOne()` operation. Identical\r\n * to `update()` except `updateOne()` will _always_ update just one document,\r\n * regardless of the `multi` option.\r\n *\r\n * _All paths passed that are not $atomic operations will become $set ops._\r\n *\r\n * ####Example\r\n *\r\n *     // Update the first document whose `title` contains 'test'\r\n *     mquery().updateMany({ title: /test/ }, { year: 2017 })\r\n *\r\n * @param {Object} [criteria]\r\n * @param {Object} [doc] the update command\r\n * @param {Object} [options]\r\n * @param {Function} [callback]\r\n * @return {Query} this\r\n * @api public\r\n */\n\nQuery.prototype.updateOne = function updateOne(criteria, doc, options, callback) {\n  let force;\n  switch (arguments.length) {\n    case 3:\n      if ('function' == typeof options) {\n        callback = options;\n        options = undefined;\n      }\n      break;\n    case 2:\n      if ('function' == typeof doc) {\n        callback = doc;\n        doc = criteria;\n        criteria = undefined;\n      }\n      break;\n    case 1:\n      switch (typeof criteria) {\n        case 'function':\n          callback = criteria;\n          criteria = options = doc = undefined;\n          break;\n        case 'boolean':\n          // execution with no callback (unsafe write)\n          force = criteria;\n          criteria = undefined;\n          break;\n        default:\n          doc = criteria;\n          criteria = options = undefined;\n          break;\n      }\n  }\n  return _update(this, 'updateOne', criteria, doc, options, force, callback);\n};\n\n/**\r\n * Declare and/or execute this query as an `replaceOne()` operation. Similar\r\n * to `updateOne()`, except `replaceOne()` is not allowed to use atomic\r\n * modifiers (`$set`, `$push`, etc.). Calling `replaceOne()` will always\r\n * replace the existing doc.\r\n *\r\n * ####Example\r\n *\r\n *     // Replace the document with `_id` 1 with `{ _id: 1, year: 2017 }`\r\n *     mquery().replaceOne({ _id: 1 }, { year: 2017 })\r\n *\r\n * @param {Object} [criteria]\r\n * @param {Object} [doc] the update command\r\n * @param {Object} [options]\r\n * @param {Function} [callback]\r\n * @return {Query} this\r\n * @api public\r\n */\n\nQuery.prototype.replaceOne = function replaceOne(criteria, doc, options, callback) {\n  let force;\n  switch (arguments.length) {\n    case 3:\n      if ('function' == typeof options) {\n        callback = options;\n        options = undefined;\n      }\n      break;\n    case 2:\n      if ('function' == typeof doc) {\n        callback = doc;\n        doc = criteria;\n        criteria = undefined;\n      }\n      break;\n    case 1:\n      switch (typeof criteria) {\n        case 'function':\n          callback = criteria;\n          criteria = options = doc = undefined;\n          break;\n        case 'boolean':\n          // execution with no callback (unsafe write)\n          force = criteria;\n          criteria = undefined;\n          break;\n        default:\n          doc = criteria;\n          criteria = options = undefined;\n          break;\n      }\n  }\n  this.setOptions({\n    overwrite: true\n  });\n  return _update(this, 'replaceOne', criteria, doc, options, force, callback);\n};\n\n/*!\r\n * Internal helper for update, updateMany, updateOne\r\n */\n\nfunction _update(query, op, criteria, doc, options, force, callback) {\n  query.op = op;\n  if (Query.canMerge(criteria)) {\n    query.merge(criteria);\n  }\n  if (doc) {\n    query._mergeUpdate(doc);\n  }\n  if (utils.isObject(options)) {\n    // { overwrite: true }\n    query.setOptions(options);\n  }\n\n  // we are done if we don't have callback and they are\n  // not forcing an unsafe write.\n  if (!(force || callback)) {\n    return query;\n  }\n  if (!query._update || !query.options.overwrite && 0 === utils.keys(query._update).length) {\n    callback && utils.soon(callback.bind(null, null, 0));\n    return query;\n  }\n  options = query._optionsForExec();\n  if (!callback) options.safe = false;\n  criteria = query._conditions;\n  doc = query._updateForExec();\n  debug('update', query._collection.collectionName, criteria, doc, options);\n  callback = query._wrapCallback(op, callback, {\n    conditions: criteria,\n    doc: doc,\n    options: options\n  });\n  query._collection[op](criteria, doc, options, utils.tick(callback));\n  return query;\n}\n\n/**\r\n * Declare and/or execute this query as a remove() operation.\r\n *\r\n * ####Example\r\n *\r\n *     mquery(collection).remove({ artist: 'Anne Murray' }, callback)\r\n *\r\n * ####Note\r\n *\r\n * The operation is only executed when a callback is passed. To force execution without a callback (which would be an unsafe write), we must first call remove() and then execute it by using the `exec()` method.\r\n *\r\n *     // not executed\r\n *     var query = mquery(collection).remove({ name: 'Anne Murray' })\r\n *\r\n *     // executed\r\n *     mquery(collection).remove({ name: 'Anne Murray' }, callback)\r\n *     mquery(collection).remove({ name: 'Anne Murray' }).remove(callback)\r\n *\r\n *     // executed without a callback (unsafe write)\r\n *     query.exec()\r\n *\r\n *     // summary\r\n *     query.remove(conds, fn); // executes\r\n *     query.remove(conds)\r\n *     query.remove(fn) // executes\r\n *     query.remove()\r\n *\r\n * @param {Object|Query} [criteria] mongodb selector\r\n * @param {Function} [callback]\r\n * @return {Query} this\r\n * @api public\r\n */\n\nQuery.prototype.remove = function (criteria, callback) {\n  this.op = 'remove';\n  let force;\n  if ('function' === typeof criteria) {\n    callback = criteria;\n    criteria = undefined;\n  } else if (Query.canMerge(criteria)) {\n    this.merge(criteria);\n  } else if (true === criteria) {\n    force = criteria;\n    criteria = undefined;\n  }\n  if (!(force || callback)) return this;\n  const options = this._optionsForExec();\n  if (!callback) options.safe = false;\n  const conds = this._conditions;\n  debug('remove', this._collection.collectionName, conds, options);\n  callback = this._wrapCallback('remove', callback, {\n    conditions: conds,\n    options: options\n  });\n  this._collection.remove(conds, options, utils.tick(callback));\n  return this;\n};\n\n/**\r\n * Declare and/or execute this query as a `deleteOne()` operation. Behaves like\r\n * `remove()`, except for ignores the `justOne` option and always deletes at\r\n * most one document.\r\n *\r\n * ####Example\r\n *\r\n *     mquery(collection).deleteOne({ artist: 'Anne Murray' }, callback)\r\n *\r\n * @param {Object|Query} [criteria] mongodb selector\r\n * @param {Function} [callback]\r\n * @return {Query} this\r\n * @api public\r\n */\n\nQuery.prototype.deleteOne = function (criteria, callback) {\n  this.op = 'deleteOne';\n  let force;\n  if ('function' === typeof criteria) {\n    callback = criteria;\n    criteria = undefined;\n  } else if (Query.canMerge(criteria)) {\n    this.merge(criteria);\n  } else if (true === criteria) {\n    force = criteria;\n    criteria = undefined;\n  }\n  if (!(force || callback)) return this;\n  const options = this._optionsForExec();\n  if (!callback) options.safe = false;\n  delete options.justOne;\n  const conds = this._conditions;\n  debug('deleteOne', this._collection.collectionName, conds, options);\n  callback = this._wrapCallback('deleteOne', callback, {\n    conditions: conds,\n    options: options\n  });\n  this._collection.deleteOne(conds, options, utils.tick(callback));\n  return this;\n};\n\n/**\r\n * Declare and/or execute this query as a `deleteMany()` operation. Behaves like\r\n * `remove()`, except for ignores the `justOne` option and always deletes\r\n * _every_ document that matches `criteria`.\r\n *\r\n * ####Example\r\n *\r\n *     mquery(collection).deleteMany({ artist: 'Anne Murray' }, callback)\r\n *\r\n * @param {Object|Query} [criteria] mongodb selector\r\n * @param {Function} [callback]\r\n * @return {Query} this\r\n * @api public\r\n */\n\nQuery.prototype.deleteMany = function (criteria, callback) {\n  this.op = 'deleteMany';\n  let force;\n  if ('function' === typeof criteria) {\n    callback = criteria;\n    criteria = undefined;\n  } else if (Query.canMerge(criteria)) {\n    this.merge(criteria);\n  } else if (true === criteria) {\n    force = criteria;\n    criteria = undefined;\n  }\n  if (!(force || callback)) return this;\n  const options = this._optionsForExec();\n  if (!callback) options.safe = false;\n  delete options.justOne;\n  const conds = this._conditions;\n  debug('deleteOne', this._collection.collectionName, conds, options);\n  callback = this._wrapCallback('deleteOne', callback, {\n    conditions: conds,\n    options: options\n  });\n  this._collection.deleteMany(conds, options, utils.tick(callback));\n  return this;\n};\n\n/**\r\n * Issues a mongodb [findAndModify](http://www.mongodb.org/display/DOCS/findAndModify+Command) update command.\r\n *\r\n * Finds a matching document, updates it according to the `update` arg, passing any `options`, and returns the found document (if any) to the callback. The query executes immediately if `callback` is passed.\r\n *\r\n * ####Available options\r\n *\r\n * - `new`: bool - true to return the modified document rather than the original. defaults to true\r\n * - `upsert`: bool - creates the object if it doesn't exist. defaults to false.\r\n * - `sort`: if multiple docs are found by the conditions, sets the sort order to choose which doc to update\r\n *\r\n * ####Examples\r\n *\r\n *     query.findOneAndUpdate(conditions, update, options, callback) // executes\r\n *     query.findOneAndUpdate(conditions, update, options)  // returns Query\r\n *     query.findOneAndUpdate(conditions, update, callback) // executes\r\n *     query.findOneAndUpdate(conditions, update)           // returns Query\r\n *     query.findOneAndUpdate(update, callback)             // returns Query\r\n *     query.findOneAndUpdate(update)                       // returns Query\r\n *     query.findOneAndUpdate(callback)                     // executes\r\n *     query.findOneAndUpdate()                             // returns Query\r\n *\r\n * @param {Object|Query} [query]\r\n * @param {Object} [doc]\r\n * @param {Object} [options]\r\n * @param {Function} [callback]\r\n * @see mongodb http://www.mongodb.org/display/DOCS/findAndModify+Command\r\n * @return {Query} this\r\n * @api public\r\n */\n\nQuery.prototype.findOneAndUpdate = function (criteria, doc, options, callback) {\n  this.op = 'findOneAndUpdate';\n  this._validate();\n  switch (arguments.length) {\n    case 3:\n      if ('function' == typeof options) {\n        callback = options;\n        options = {};\n      }\n      break;\n    case 2:\n      if ('function' == typeof doc) {\n        callback = doc;\n        doc = criteria;\n        criteria = undefined;\n      }\n      options = undefined;\n      break;\n    case 1:\n      if ('function' == typeof criteria) {\n        callback = criteria;\n        criteria = options = doc = undefined;\n      } else {\n        doc = criteria;\n        criteria = options = undefined;\n      }\n  }\n  if (Query.canMerge(criteria)) {\n    this.merge(criteria);\n  }\n\n  // apply doc\n  if (doc) {\n    this._mergeUpdate(doc);\n  }\n  options && this.setOptions(options);\n  if (!callback) return this;\n  const conds = this._conditions;\n  const update = this._updateForExec();\n  options = this._optionsForExec();\n  return this._collection.findOneAndUpdate(conds, update, options, utils.tick(callback));\n};\n\n/**\r\n * Issues a mongodb [findAndModify](http://www.mongodb.org/display/DOCS/findAndModify+Command) remove command.\r\n *\r\n * Finds a matching document, removes it, passing the found document (if any) to the callback. Executes immediately if `callback` is passed.\r\n *\r\n * ####Available options\r\n *\r\n * - `sort`: if multiple docs are found by the conditions, sets the sort order to choose which doc to update\r\n *\r\n * ####Examples\r\n *\r\n *     A.where().findOneAndRemove(conditions, options, callback) // executes\r\n *     A.where().findOneAndRemove(conditions, options)  // return Query\r\n *     A.where().findOneAndRemove(conditions, callback) // executes\r\n *     A.where().findOneAndRemove(conditions) // returns Query\r\n *     A.where().findOneAndRemove(callback)   // executes\r\n *     A.where().findOneAndRemove()           // returns Query\r\n *     A.where().findOneAndDelete()           // alias of .findOneAndRemove()\r\n *\r\n * @param {Object} [conditions]\r\n * @param {Object} [options]\r\n * @param {Function} [callback]\r\n * @return {Query} this\r\n * @see mongodb http://www.mongodb.org/display/DOCS/findAndModify+Command\r\n * @api public\r\n */\n\nQuery.prototype.findOneAndRemove = Query.prototype.findOneAndDelete = function (conditions, options, callback) {\n  this.op = 'findOneAndRemove';\n  this._validate();\n  if ('function' == typeof options) {\n    callback = options;\n    options = undefined;\n  } else if ('function' == typeof conditions) {\n    callback = conditions;\n    conditions = undefined;\n  }\n\n  // apply conditions\n  if (Query.canMerge(conditions)) {\n    this.merge(conditions);\n  }\n\n  // apply options\n  options && this.setOptions(options);\n  if (!callback) return this;\n  options = this._optionsForExec();\n  const conds = this._conditions;\n  return this._collection.findOneAndDelete(conds, options, utils.tick(callback));\n};\n\n/**\r\n * Wrap callback to add tracing\r\n *\r\n * @param {Function} callback\r\n * @param {Object} [queryInfo]\r\n * @api private\r\n */\nQuery.prototype._wrapCallback = function (method, callback, queryInfo) {\n  const traceFunction = this._traceFunction || Query.traceFunction;\n  if (traceFunction) {\n    queryInfo.collectionName = this._collection.collectionName;\n    const traceCallback = traceFunction && traceFunction.call(null, method, queryInfo, this);\n    const startTime = new Date().getTime();\n    return function wrapperCallback(err, result) {\n      if (traceCallback) {\n        const millis = new Date().getTime() - startTime;\n        traceCallback.call(null, err, result, millis);\n      }\n      if (callback) {\n        callback.apply(null, arguments);\n      }\n    };\n  }\n  return callback;\n};\n\n/**\r\n * Add trace function that gets called when the query is executed.\r\n * The function will be called with (method, queryInfo, query) and\r\n * should return a callback function which will be called\r\n * with (err, result, millis) when the query is complete.\r\n *\r\n * queryInfo is an object containing: {\r\n *   collectionName: <name of the collection>,\r\n *   conditions: <query criteria>,\r\n *   options: <comment, fields, readPreference, etc>,\r\n *   doc: [document to update, if applicable]\r\n * }\r\n *\r\n * NOTE: Does not trace stream queries.\r\n *\r\n * @param {Function} traceFunction\r\n * @return {Query} this\r\n * @api public\r\n */\nQuery.prototype.setTraceFunction = function (traceFunction) {\n  this._traceFunction = traceFunction;\n  return this;\n};\n\n/**\r\n * Executes the query\r\n *\r\n * ####Examples\r\n *\r\n *     query.exec();\r\n *     query.exec(callback);\r\n *     query.exec('update');\r\n *     query.exec('find', callback);\r\n *\r\n * @param {String|Function} [operation]\r\n * @param {Function} [callback]\r\n * @api public\r\n */\n\nQuery.prototype.exec = function exec(op, callback) {\n  switch (typeof op) {\n    case 'function':\n      callback = op;\n      op = null;\n      break;\n    case 'string':\n      this.op = op;\n      break;\n  }\n  assert.ok(this.op, 'Missing query type: (find, update, etc)');\n  if ('update' == this.op || 'remove' == this.op) {\n    callback || (callback = true);\n  }\n  const _this = this;\n  if ('function' == typeof callback) {\n    this[this.op](callback);\n  } else {\n    return new Query.Promise(function (success, error) {\n      _this[_this.op](function (err, val) {\n        if (err) error(err);else success(val);\n        success = error = null;\n      });\n    });\n  }\n};\n\n/**\r\n * Returns a thunk which when called runs this.exec()\r\n *\r\n * The thunk receives a callback function which will be\r\n * passed to `this.exec()`\r\n *\r\n * @return {Function}\r\n * @api public\r\n */\n\nQuery.prototype.thunk = function () {\n  const _this = this;\n  return function (cb) {\n    _this.exec(cb);\n  };\n};\n\n/**\r\n * Executes the query returning a `Promise` which will be\r\n * resolved with either the doc(s) or rejected with the error.\r\n *\r\n * @param {Function} [resolve]\r\n * @param {Function} [reject]\r\n * @return {Promise}\r\n * @api public\r\n */\n\nQuery.prototype.then = function (resolve, reject) {\n  const _this = this;\n  const promise = new Query.Promise(function (success, error) {\n    _this.exec(function (err, val) {\n      if (err) error(err);else success(val);\n      success = error = null;\n    });\n  });\n  return promise.then(resolve, reject);\n};\n\n/**\r\n * Returns a cursor for the given `find` query.\r\n *\r\n * @throws Error if operation is not a find\r\n * @returns {Cursor} MongoDB driver cursor\r\n */\n\nQuery.prototype.cursor = function () {\n  if ('find' != this.op) throw new Error('cursor() is only available for find');\n  const conds = this._conditions;\n  const options = this._optionsForExec();\n  if (this.$useProjection) {\n    options.projection = this._fieldsForExec();\n  } else {\n    options.fields = this._fieldsForExec();\n  }\n  debug('cursor', this._collection.collectionName, conds, options);\n  return this._collection.findCursor(conds, options);\n};\n\n/**\r\n * Determines if field selection has been made.\r\n *\r\n * @return {Boolean}\r\n * @api public\r\n */\n\nQuery.prototype.selected = function selected() {\n  return !!(this._fields && Object.keys(this._fields).length > 0);\n};\n\n/**\r\n * Determines if inclusive field selection has been made.\r\n *\r\n *     query.selectedInclusively() // false\r\n *     query.select('name')\r\n *     query.selectedInclusively() // true\r\n *     query.selectedExlusively() // false\r\n *\r\n * @returns {Boolean}\r\n */\n\nQuery.prototype.selectedInclusively = function selectedInclusively() {\n  if (!this._fields) return false;\n  const keys = Object.keys(this._fields);\n  if (0 === keys.length) return false;\n  for (let i = 0; i < keys.length; ++i) {\n    const key = keys[i];\n    if (0 === this._fields[key]) return false;\n    if (this._fields[key] && typeof this._fields[key] === 'object' && this._fields[key].$meta) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\r\n * Determines if exclusive field selection has been made.\r\n *\r\n *     query.selectedExlusively() // false\r\n *     query.select('-name')\r\n *     query.selectedExlusively() // true\r\n *     query.selectedInclusively() // false\r\n *\r\n * @returns {Boolean}\r\n */\n\nQuery.prototype.selectedExclusively = function selectedExclusively() {\n  if (!this._fields) return false;\n  const keys = Object.keys(this._fields);\n  if (0 === keys.length) return false;\n  for (let i = 0; i < keys.length; ++i) {\n    const key = keys[i];\n    if (0 === this._fields[key]) return true;\n  }\n  return false;\n};\n\n/**\r\n * Merges `doc` with the current update object.\r\n *\r\n * @param {Object} doc\r\n */\n\nQuery.prototype._mergeUpdate = function (doc) {\n  if (!this._update) this._update = {};\n  if (doc instanceof Query) {\n    if (doc._update) {\n      utils.mergeClone(this._update, doc._update);\n    }\n  } else {\n    utils.mergeClone(this._update, doc);\n  }\n};\n\n/**\r\n * Returns default options.\r\n *\r\n * @return {Object}\r\n * @api private\r\n */\n\nQuery.prototype._optionsForExec = function () {\n  const options = utils.clone(this.options);\n  return options;\n};\n\n/**\r\n * Returns fields selection for this query.\r\n *\r\n * @return {Object}\r\n * @api private\r\n */\n\nQuery.prototype._fieldsForExec = function () {\n  return utils.clone(this._fields);\n};\n\n/**\r\n * Return an update document with corrected $set operations.\r\n *\r\n * @api private\r\n */\n\nQuery.prototype._updateForExec = function () {\n  const update = utils.clone(this._update);\n  const ops = utils.keys(update);\n  const ret = {};\n  for (const op of ops) {\n    if (this.options.overwrite) {\n      ret[op] = update[op];\n      continue;\n    }\n    if ('$' !== op[0]) {\n      // fix up $set sugar\n      if (!ret.$set) {\n        if (update.$set) {\n          ret.$set = update.$set;\n        } else {\n          ret.$set = {};\n        }\n      }\n      ret.$set[op] = update[op];\n      if (!~ops.indexOf('$set')) ops.push('$set');\n    } else if ('$set' === op) {\n      if (!ret.$set) {\n        ret[op] = update[op];\n      }\n    } else {\n      ret[op] = update[op];\n    }\n  }\n  this._compiledUpdate = ret;\n  return ret;\n};\n\n/**\r\n * Make sure _path is set.\r\n *\r\n * @parmam {String} method\r\n */\n\nQuery.prototype._ensurePath = function (method) {\n  if (!this._path) {\n    const msg = method + '() must be used after where() ' + 'when called with these arguments';\n    throw new Error(msg);\n  }\n};\n\n/*!\r\n * Permissions\r\n */\n\nQuery.permissions = require('./permissions');\nQuery._isPermitted = function (a, b) {\n  const denied = Query.permissions[b];\n  if (!denied) return true;\n  return true !== denied[a];\n};\nQuery.prototype._validate = function (action) {\n  let fail;\n  let validator;\n  if (undefined === action) {\n    validator = Query.permissions[this.op];\n    if ('function' != typeof validator) return true;\n    fail = validator(this);\n  } else if (!Query._isPermitted(action, this.op)) {\n    fail = action;\n  }\n  if (fail) {\n    throw new Error(fail + ' cannot be used with ' + this.op);\n  }\n};\n\n/**\r\n * Determines if `conds` can be merged using `mquery().merge()`\r\n *\r\n * @param {Object} conds\r\n * @return {Boolean}\r\n */\n\nQuery.canMerge = function (conds) {\n  return conds instanceof Query || utils.isObject(conds);\n};\n\n/**\r\n * Set a trace function that will get called whenever a\r\n * query is executed.\r\n *\r\n * See `setTraceFunction()` for details.\r\n *\r\n * @param {Object} conds\r\n * @return {Boolean}\r\n */\nQuery.setGlobalTraceFunction = function (traceFunction) {\n  Query.traceFunction = traceFunction;\n};\n\n/*!\r\n * Exports.\r\n */\n\nQuery.utils = utils;\nQuery.env = require('./env');\nQuery.Collection = require('./collection');\nQuery.BaseCollection = require('./collection/collection');\nQuery.Promise = Promise;\nmodule.exports = exports = Query;\n\n// TODO\n// test utils","map":{"version":3,"names":["assert","require","util","utils","debug","Query","criteria","options","proto","constructor","prototype","op","undefined","Object","assign","_conditions","clone","_fields","_update","_path","_distinct","_collection","_traceFunction","setOptions","find","remove","update","collection","$withinCmd","defineProperty","get","set","v","toConstructor","CustomQuery","call","inherits","p","isObject","methods","keys","method","i","length","args","Array","isArray","apply","coll","Collection","collation","value","$where","js","where","arguments","type","merge","TypeError","equals","val","_ensurePath","path","eq","or","array","$or","push","nor","$nor","and","$and","split","forEach","$conditional","conds","mod","$mod","exists","$exists","elemMatch","fn","$elemMatch","within","_geoComparison","box","polygon","area","center","circle","coordinates","geometry","$box","from","shift","$polygon","Error","spherical","wKey","radius","$uniqueDocs","unique","near","maxDistance","$maxDistance","minDistance","$minDistance","format","$geometry","intersects","select","arg","_validate","fields","len","isArgumentsObject","field","include","substring","slice","numKeys","myFields","$slice","sort","_pushArr","ascend","Map","_pushMap","_validSortValue","asc","ascending","desc","descending","opts","s","$meta","String","toLowerCase","map","key","maxTime","maxTimeMS","ms","snapshot","hint","k","j","slaveOk","read","setReadPreference","pref","deprecationWarningIssued","console","error","readPreference","readPref","readConcern","r","level","tailable","writeConcern","w","concern","wtimeout","wTimeout","source","canMerge","mergeClone","callback","_optionsForExec","$useProjection","projection","_fieldsForExec","collectionName","_wrapCallback","conditions","tick","cursor","findCursor","findOne","count","distinct","doc","force","updateMany","updateOne","replaceOne","overwrite","query","_mergeUpdate","soon","bind","safe","_updateForExec","deleteOne","justOne","deleteMany","findOneAndUpdate","findOneAndRemove","findOneAndDelete","queryInfo","traceFunction","traceCallback","startTime","Date","getTime","wrapperCallback","err","result","millis","setTraceFunction","exec","ok","_this","Promise","success","thunk","cb","then","resolve","reject","promise","selected","selectedInclusively","selectedExclusively","ops","ret","$set","indexOf","_compiledUpdate","msg","permissions","_isPermitted","a","b","denied","action","fail","validator","setGlobalTraceFunction","env","BaseCollection","module","exports"],"sources":["C:/Users/91930/Desktop/Github projects/Pharmacy Demo/back-end/node_modules/mquery/lib/mquery.js"],"sourcesContent":["'use strict';\r\n\r\n/**\r\n * Dependencies\r\n */\r\n\r\nconst assert = require('assert');\r\nconst util = require('util');\r\nconst utils = require('./utils');\r\nconst debug = require('debug')('mquery');\r\n\r\n/**\r\n * Query constructor used for building queries.\r\n *\r\n * ####Example:\r\n *\r\n *     var query = new Query({ name: 'mquery' });\r\n *     query.setOptions({ collection: moduleCollection })\r\n *     query.where('age').gte(21).exec(callback);\r\n *\r\n * @param {Object} [criteria]\r\n * @param {Object} [options]\r\n * @api public\r\n */\r\n\r\nfunction Query(criteria, options) {\r\n  if (!(this instanceof Query))\r\n    return new Query(criteria, options);\r\n\r\n  const proto = this.constructor.prototype;\r\n\r\n  this.op = proto.op || undefined;\r\n\r\n  this.options = Object.assign({}, proto.options);\r\n\r\n  this._conditions = proto._conditions\r\n    ? utils.clone(proto._conditions)\r\n    : {};\r\n\r\n  this._fields = proto._fields\r\n    ? utils.clone(proto._fields)\r\n    : undefined;\r\n\r\n  this._update = proto._update\r\n    ? utils.clone(proto._update)\r\n    : undefined;\r\n\r\n  this._path = proto._path || undefined;\r\n  this._distinct = proto._distinct || undefined;\r\n  this._collection = proto._collection || undefined;\r\n  this._traceFunction = proto._traceFunction || undefined;\r\n\r\n  if (options) {\r\n    this.setOptions(options);\r\n  }\r\n\r\n  if (criteria) {\r\n    if (criteria.find && criteria.remove && criteria.update) {\r\n      // quack quack!\r\n      this.collection(criteria);\r\n    } else {\r\n      this.find(criteria);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * This is a parameter that the user can set which determines if mquery\r\n * uses $within or $geoWithin for queries. It defaults to true which\r\n * means $geoWithin will be used. If using MongoDB < 2.4 you should\r\n * set this to false.\r\n *\r\n * @api public\r\n * @property use$geoWithin\r\n */\r\n\r\nlet $withinCmd = '$geoWithin';\r\nObject.defineProperty(Query, 'use$geoWithin', {\r\n  get: function() { return $withinCmd == '$geoWithin'; },\r\n  set: function(v) {\r\n    if (true === v) {\r\n      // mongodb >= 2.4\r\n      $withinCmd = '$geoWithin';\r\n    } else {\r\n      $withinCmd = '$within';\r\n    }\r\n  }\r\n});\r\n\r\n/**\r\n * Converts this query to a constructor function with all arguments and options retained.\r\n *\r\n * ####Example\r\n *\r\n *     // Create a query that will read documents with a \"video\" category from\r\n *     // `aCollection` on the primary node in the replica-set unless it is down,\r\n *     // in which case we'll read from a secondary node.\r\n *     var query = mquery({ category: 'video' })\r\n *     query.setOptions({ collection: aCollection, read: 'primaryPreferred' });\r\n *\r\n *     // create a constructor based off these settings\r\n *     var Video = query.toConstructor();\r\n *\r\n *     // Video is now a subclass of mquery() and works the same way but with the\r\n *     // default query parameters and options set.\r\n *\r\n *     // run a query with the previous settings but filter for movies with names\r\n *     // that start with \"Life\".\r\n *     Video().where({ name: /^Life/ }).exec(cb);\r\n *\r\n * @return {Query} new Query\r\n * @api public\r\n */\r\n\r\nQuery.prototype.toConstructor = function toConstructor() {\r\n  function CustomQuery(criteria, options) {\r\n    if (!(this instanceof CustomQuery))\r\n      return new CustomQuery(criteria, options);\r\n    Query.call(this, criteria, options);\r\n  }\r\n\r\n  utils.inherits(CustomQuery, Query);\r\n\r\n  // set inherited defaults\r\n  const p = CustomQuery.prototype;\r\n\r\n  p.options = {};\r\n  p.setOptions(this.options);\r\n\r\n  p.op = this.op;\r\n  p._conditions = utils.clone(this._conditions);\r\n  p._fields = utils.clone(this._fields);\r\n  p._update = utils.clone(this._update);\r\n  p._path = this._path;\r\n  p._distinct = this._distinct;\r\n  p._collection = this._collection;\r\n  p._traceFunction = this._traceFunction;\r\n\r\n  return CustomQuery;\r\n};\r\n\r\n/**\r\n * Sets query options.\r\n *\r\n * ####Options:\r\n *\r\n * - [tailable](http://www.mongodb.org/display/DOCS/Tailable+Cursors) *\r\n * - [sort](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%7B%7Bsort(\\)%7D%7D) *\r\n * - [limit](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%7B%7Blimit%28%29%7D%7D) *\r\n * - [skip](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%7B%7Bskip%28%29%7D%7D) *\r\n * - [maxScan](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%24maxScan) *\r\n * - [maxTime](http://docs.mongodb.org/manual/reference/operator/meta/maxTimeMS/#op._S_maxTimeMS) *\r\n * - [batchSize](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%7B%7BbatchSize%28%29%7D%7D) *\r\n * - [comment](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%24comment) *\r\n * - [snapshot](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%7B%7Bsnapshot%28%29%7D%7D) *\r\n * - [hint](http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%24hint) *\r\n * - [slaveOk](http://docs.mongodb.org/manual/applications/replication/#read-preference) *\r\n * - [safe](http://www.mongodb.org/display/DOCS/getLastError+Command)\r\n * - collection the collection to query against\r\n *\r\n * _* denotes a query helper method is also available_\r\n *\r\n * @param {Object} options\r\n * @api public\r\n */\r\n\r\nQuery.prototype.setOptions = function(options) {\r\n  if (!(options && utils.isObject(options)))\r\n    return this;\r\n\r\n  // set arbitrary options\r\n  const methods = utils.keys(options);\r\n  let method;\r\n\r\n  for (let i = 0; i < methods.length; ++i) {\r\n    method = methods[i];\r\n\r\n    // use methods if exist (safer option manipulation)\r\n    if ('function' == typeof this[method]) {\r\n      const args = Array.isArray(options[method])\r\n        ? options[method]\r\n        : [options[method]];\r\n      this[method].apply(this, args);\r\n    } else {\r\n      this.options[method] = options[method];\r\n    }\r\n  }\r\n\r\n  return this;\r\n};\r\n\r\n/**\r\n * Sets this Querys collection.\r\n *\r\n * @param {Collection} coll\r\n * @return {Query} this\r\n */\r\n\r\nQuery.prototype.collection = function collection(coll) {\r\n  this._collection = new Query.Collection(coll);\r\n\r\n  return this;\r\n};\r\n\r\n/**\r\n * Adds a collation to this op (MongoDB 3.4 and up)\r\n *\r\n * ####Example\r\n *\r\n *     query.find().collation({ locale: \"en_US\", strength: 1 })\r\n *\r\n * @param {Object} value\r\n * @return {Query} this\r\n * @see MongoDB docs https://docs.mongodb.com/manual/reference/method/cursor.collation/#cursor.collation\r\n * @api public\r\n */\r\n\r\nQuery.prototype.collation = function(value) {\r\n  this.options.collation = value;\r\n  return this;\r\n};\r\n\r\n/**\r\n * Specifies a `$where` condition\r\n *\r\n * Use `$where` when you need to select documents using a JavaScript expression.\r\n *\r\n * ####Example\r\n *\r\n *     query.$where('this.comments.length > 10 || this.name.length > 5')\r\n *\r\n *     query.$where(function () {\r\n *       return this.comments.length > 10 || this.name.length > 5;\r\n *     })\r\n *\r\n * @param {String|Function} js javascript string or function\r\n * @return {Query} this\r\n * @memberOf Query\r\n * @method $where\r\n * @api public\r\n */\r\n\r\nQuery.prototype.$where = function(js) {\r\n  this._conditions.$where = js;\r\n  return this;\r\n};\r\n\r\n/**\r\n * Specifies a `path` for use with chaining.\r\n *\r\n * ####Example\r\n *\r\n *     // instead of writing:\r\n *     User.find({age: {$gte: 21, $lte: 65}}, callback);\r\n *\r\n *     // we can instead write:\r\n *     User.where('age').gte(21).lte(65);\r\n *\r\n *     // passing query conditions is permitted\r\n *     User.find().where({ name: 'vonderful' })\r\n *\r\n *     // chaining\r\n *     User\r\n *     .where('age').gte(21).lte(65)\r\n *     .where('name', /^vonderful/i)\r\n *     .where('friends').slice(10)\r\n *     .exec(callback)\r\n *\r\n * @param {String} [path]\r\n * @param {Object} [val]\r\n * @return {Query} this\r\n * @api public\r\n */\r\n\r\nQuery.prototype.where = function() {\r\n  if (!arguments.length) return this;\r\n  if (!this.op) this.op = 'find';\r\n\r\n  const type = typeof arguments[0];\r\n\r\n  if ('string' == type) {\r\n    this._path = arguments[0];\r\n\r\n    if (2 === arguments.length) {\r\n      this._conditions[this._path] = arguments[1];\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  if ('object' == type && !Array.isArray(arguments[0])) {\r\n    return this.merge(arguments[0]);\r\n  }\r\n\r\n  throw new TypeError('path must be a string or object');\r\n};\r\n\r\n/**\r\n * Specifies the complementary comparison value for paths specified with `where()`\r\n *\r\n * ####Example\r\n *\r\n *     User.where('age').equals(49);\r\n *\r\n *     // is the same as\r\n *\r\n *     User.where('age', 49);\r\n *\r\n * @param {Object} val\r\n * @return {Query} this\r\n * @api public\r\n */\r\n\r\nQuery.prototype.equals = function equals(val) {\r\n  this._ensurePath('equals');\r\n  const path = this._path;\r\n  this._conditions[path] = val;\r\n  return this;\r\n};\r\n\r\n/**\r\n * Specifies the complementary comparison value for paths specified with `where()`\r\n * This is alias of `equals`\r\n *\r\n * ####Example\r\n *\r\n *     User.where('age').eq(49);\r\n *\r\n *     // is the same as\r\n *\r\n *     User.shere('age').equals(49);\r\n *\r\n *     // is the same as\r\n *\r\n *     User.where('age', 49);\r\n *\r\n * @param {Object} val\r\n * @return {Query} this\r\n * @api public\r\n */\r\n\r\nQuery.prototype.eq = function eq(val) {\r\n  this._ensurePath('eq');\r\n  const path = this._path;\r\n  this._conditions[path] = val;\r\n  return this;\r\n};\r\n\r\n/**\r\n * Specifies arguments for an `$or` condition.\r\n *\r\n * ####Example\r\n *\r\n *     query.or([{ color: 'red' }, { status: 'emergency' }])\r\n *\r\n * @param {Array} array array of conditions\r\n * @return {Query} this\r\n * @api public\r\n */\r\n\r\nQuery.prototype.or = function or(array) {\r\n  const or = this._conditions.$or || (this._conditions.$or = []);\r\n  if (!Array.isArray(array)) array = [array];\r\n  or.push.apply(or, array);\r\n  return this;\r\n};\r\n\r\n/**\r\n * Specifies arguments for a `$nor` condition.\r\n *\r\n * ####Example\r\n *\r\n *     query.nor([{ color: 'green' }, { status: 'ok' }])\r\n *\r\n * @param {Array} array array of conditions\r\n * @return {Query} this\r\n * @api public\r\n */\r\n\r\nQuery.prototype.nor = function nor(array) {\r\n  const nor = this._conditions.$nor || (this._conditions.$nor = []);\r\n  if (!Array.isArray(array)) array = [array];\r\n  nor.push.apply(nor, array);\r\n  return this;\r\n};\r\n\r\n/**\r\n * Specifies arguments for a `$and` condition.\r\n *\r\n * ####Example\r\n *\r\n *     query.and([{ color: 'green' }, { status: 'ok' }])\r\n *\r\n * @see $and http://docs.mongodb.org/manual/reference/operator/and/\r\n * @param {Array} array array of conditions\r\n * @return {Query} this\r\n * @api public\r\n */\r\n\r\nQuery.prototype.and = function and(array) {\r\n  const and = this._conditions.$and || (this._conditions.$and = []);\r\n  if (!Array.isArray(array)) array = [array];\r\n  and.push.apply(and, array);\r\n  return this;\r\n};\r\n\r\n/**\r\n * Specifies a $gt query condition.\r\n *\r\n * When called with one argument, the most recent path passed to `where()` is used.\r\n *\r\n * ####Example\r\n *\r\n *     Thing.find().where('age').gt(21)\r\n *\r\n *     // or\r\n *     Thing.find().gt('age', 21)\r\n *\r\n * @method gt\r\n * @memberOf Query\r\n * @param {String} [path]\r\n * @param {Number} val\r\n * @api public\r\n */\r\n\r\n/**\r\n * Specifies a $gte query condition.\r\n *\r\n * When called with one argument, the most recent path passed to `where()` is used.\r\n *\r\n * @method gte\r\n * @memberOf Query\r\n * @param {String} [path]\r\n * @param {Number} val\r\n * @api public\r\n */\r\n\r\n/**\r\n * Specifies a $lt query condition.\r\n *\r\n * When called with one argument, the most recent path passed to `where()` is used.\r\n *\r\n * @method lt\r\n * @memberOf Query\r\n * @param {String} [path]\r\n * @param {Number} val\r\n * @api public\r\n */\r\n\r\n/**\r\n * Specifies a $lte query condition.\r\n *\r\n * When called with one argument, the most recent path passed to `where()` is used.\r\n *\r\n * @method lte\r\n * @memberOf Query\r\n * @param {String} [path]\r\n * @param {Number} val\r\n * @api public\r\n */\r\n\r\n/**\r\n * Specifies a $ne query condition.\r\n *\r\n * When called with one argument, the most recent path passed to `where()` is used.\r\n *\r\n * @method ne\r\n * @memberOf Query\r\n * @param {String} [path]\r\n * @param {Number} val\r\n * @api public\r\n */\r\n\r\n/**\r\n * Specifies an $in query condition.\r\n *\r\n * When called with one argument, the most recent path passed to `where()` is used.\r\n *\r\n * @method in\r\n * @memberOf Query\r\n * @param {String} [path]\r\n * @param {Number} val\r\n * @api public\r\n */\r\n\r\n/**\r\n * Specifies an $nin query condition.\r\n *\r\n * When called with one argument, the most recent path passed to `where()` is used.\r\n *\r\n * @method nin\r\n * @memberOf Query\r\n * @param {String} [path]\r\n * @param {Number} val\r\n * @api public\r\n */\r\n\r\n/**\r\n * Specifies an $all query condition.\r\n *\r\n * When called with one argument, the most recent path passed to `where()` is used.\r\n *\r\n * @method all\r\n * @memberOf Query\r\n * @param {String} [path]\r\n * @param {Number} val\r\n * @api public\r\n */\r\n\r\n/**\r\n * Specifies a $size query condition.\r\n *\r\n * When called with one argument, the most recent path passed to `where()` is used.\r\n *\r\n * @method size\r\n * @memberOf Query\r\n * @param {String} [path]\r\n * @param {Number} val\r\n * @api public\r\n */\r\n\r\n/**\r\n * Specifies a $regex query condition.\r\n *\r\n * When called with one argument, the most recent path passed to `where()` is used.\r\n *\r\n * @method regex\r\n * @memberOf Query\r\n * @param {String} [path]\r\n * @param {String|RegExp} val\r\n * @api public\r\n */\r\n\r\n/**\r\n * Specifies a $maxDistance query condition.\r\n *\r\n * When called with one argument, the most recent path passed to `where()` is used.\r\n *\r\n * @method maxDistance\r\n * @memberOf Query\r\n * @param {String} [path]\r\n * @param {Number} val\r\n * @api public\r\n */\r\n\r\n/*!\r\n * gt, gte, lt, lte, ne, in, nin, all, regex, size, maxDistance\r\n *\r\n *     Thing.where('type').nin(array)\r\n */\r\n\r\n'gt gte lt lte ne in nin all regex size maxDistance minDistance'.split(' ').forEach(function($conditional) {\r\n  Query.prototype[$conditional] = function() {\r\n    let path, val;\r\n\r\n    if (1 === arguments.length) {\r\n      this._ensurePath($conditional);\r\n      val = arguments[0];\r\n      path = this._path;\r\n    } else {\r\n      val = arguments[1];\r\n      path = arguments[0];\r\n    }\r\n\r\n    const conds = this._conditions[path] === null || typeof this._conditions[path] === 'object' ?\r\n      this._conditions[path] :\r\n      (this._conditions[path] = {});\r\n    conds['$' + $conditional] = val;\r\n    return this;\r\n  };\r\n});\r\n\r\n/**\r\n * Specifies a `$mod` condition\r\n *\r\n * @param {String} [path]\r\n * @param {Number} val\r\n * @return {Query} this\r\n * @api public\r\n */\r\n\r\nQuery.prototype.mod = function() {\r\n  let val, path;\r\n\r\n  if (1 === arguments.length) {\r\n    this._ensurePath('mod');\r\n    val = arguments[0];\r\n    path = this._path;\r\n  } else if (2 === arguments.length && !Array.isArray(arguments[1])) {\r\n    this._ensurePath('mod');\r\n    val = [arguments[0], arguments[1]];\r\n    path = this._path;\r\n  } else if (3 === arguments.length) {\r\n    val = [arguments[1], arguments[2]];\r\n    path = arguments[0];\r\n  } else {\r\n    val = arguments[1];\r\n    path = arguments[0];\r\n  }\r\n\r\n  const conds = this._conditions[path] || (this._conditions[path] = {});\r\n  conds.$mod = val;\r\n  return this;\r\n};\r\n\r\n/**\r\n * Specifies an `$exists` condition\r\n *\r\n * ####Example\r\n *\r\n *     // { name: { $exists: true }}\r\n *     Thing.where('name').exists()\r\n *     Thing.where('name').exists(true)\r\n *     Thing.find().exists('name')\r\n *\r\n *     // { name: { $exists: false }}\r\n *     Thing.where('name').exists(false);\r\n *     Thing.find().exists('name', false);\r\n *\r\n * @param {String} [path]\r\n * @param {Number} val\r\n * @return {Query} this\r\n * @api public\r\n */\r\n\r\nQuery.prototype.exists = function() {\r\n  let path, val;\r\n\r\n  if (0 === arguments.length) {\r\n    this._ensurePath('exists');\r\n    path = this._path;\r\n    val = true;\r\n  } else if (1 === arguments.length) {\r\n    if ('boolean' === typeof arguments[0]) {\r\n      this._ensurePath('exists');\r\n      path = this._path;\r\n      val = arguments[0];\r\n    } else {\r\n      path = arguments[0];\r\n      val = true;\r\n    }\r\n  } else if (2 === arguments.length) {\r\n    path = arguments[0];\r\n    val = arguments[1];\r\n  }\r\n\r\n  const conds = this._conditions[path] || (this._conditions[path] = {});\r\n  conds.$exists = val;\r\n  return this;\r\n};\r\n\r\n/**\r\n * Specifies an `$elemMatch` condition\r\n *\r\n * ####Example\r\n *\r\n *     query.elemMatch('comment', { author: 'autobot', votes: {$gte: 5}})\r\n *\r\n *     query.where('comment').elemMatch({ author: 'autobot', votes: {$gte: 5}})\r\n *\r\n *     query.elemMatch('comment', function (elem) {\r\n *       elem.where('author').equals('autobot');\r\n *       elem.where('votes').gte(5);\r\n *     })\r\n *\r\n *     query.where('comment').elemMatch(function (elem) {\r\n *       elem.where({ author: 'autobot' });\r\n *       elem.where('votes').gte(5);\r\n *     })\r\n *\r\n * @param {String|Object|Function} path\r\n * @param {Object|Function} criteria\r\n * @return {Query} this\r\n * @api public\r\n */\r\n\r\nQuery.prototype.elemMatch = function() {\r\n  if (null == arguments[0])\r\n    throw new TypeError('Invalid argument');\r\n\r\n  let fn, path, criteria;\r\n\r\n  if ('function' === typeof arguments[0]) {\r\n    this._ensurePath('elemMatch');\r\n    path = this._path;\r\n    fn = arguments[0];\r\n  } else if (utils.isObject(arguments[0])) {\r\n    this._ensurePath('elemMatch');\r\n    path = this._path;\r\n    criteria = arguments[0];\r\n  } else if ('function' === typeof arguments[1]) {\r\n    path = arguments[0];\r\n    fn = arguments[1];\r\n  } else if (arguments[1] && utils.isObject(arguments[1])) {\r\n    path = arguments[0];\r\n    criteria = arguments[1];\r\n  } else {\r\n    throw new TypeError('Invalid argument');\r\n  }\r\n\r\n  if (fn) {\r\n    criteria = new Query;\r\n    fn(criteria);\r\n    criteria = criteria._conditions;\r\n  }\r\n\r\n  const conds = this._conditions[path] || (this._conditions[path] = {});\r\n  conds.$elemMatch = criteria;\r\n  return this;\r\n};\r\n\r\n// Spatial queries\r\n\r\n/**\r\n * Sugar for geo-spatial queries.\r\n *\r\n * ####Example\r\n *\r\n *     query.within().box()\r\n *     query.within().circle()\r\n *     query.within().geometry()\r\n *\r\n *     query.where('loc').within({ center: [50,50], radius: 10, unique: true, spherical: true });\r\n *     query.where('loc').within({ box: [[40.73, -73.9], [40.7, -73.988]] });\r\n *     query.where('loc').within({ polygon: [[],[],[],[]] });\r\n *\r\n *     query.where('loc').within([], [], []) // polygon\r\n *     query.where('loc').within([], []) // box\r\n *     query.where('loc').within({ type: 'LineString', coordinates: [...] }); // geometry\r\n *\r\n * ####NOTE:\r\n *\r\n * Must be used after `where()`.\r\n *\r\n * @memberOf Query\r\n * @return {Query} this\r\n * @api public\r\n */\r\n\r\nQuery.prototype.within = function within() {\r\n  // opinionated, must be used after where\r\n  this._ensurePath('within');\r\n  this._geoComparison = $withinCmd;\r\n\r\n  if (0 === arguments.length) {\r\n    return this;\r\n  }\r\n\r\n  if (2 === arguments.length) {\r\n    return this.box.apply(this, arguments);\r\n  } else if (2 < arguments.length) {\r\n    return this.polygon.apply(this, arguments);\r\n  }\r\n\r\n  const area = arguments[0];\r\n\r\n  if (!area)\r\n    throw new TypeError('Invalid argument');\r\n\r\n  if (area.center)\r\n    return this.circle(area);\r\n\r\n  if (area.box)\r\n    return this.box.apply(this, area.box);\r\n\r\n  if (area.polygon)\r\n    return this.polygon.apply(this, area.polygon);\r\n\r\n  if (area.type && area.coordinates)\r\n    return this.geometry(area);\r\n\r\n  throw new TypeError('Invalid argument');\r\n};\r\n\r\n/**\r\n * Specifies a $box condition\r\n *\r\n * ####Example\r\n *\r\n *     var lowerLeft = [40.73083, -73.99756]\r\n *     var upperRight= [40.741404,  -73.988135]\r\n *\r\n *     query.where('loc').within().box(lowerLeft, upperRight)\r\n *     query.box('loc', lowerLeft, upperRight )\r\n *\r\n * @see http://www.mongodb.org/display/DOCS/Geospatial+Indexing\r\n * @see Query#within #query_Query-within\r\n * @param {String} path\r\n * @param {Object} val\r\n * @return {Query} this\r\n * @api public\r\n */\r\n\r\nQuery.prototype.box = function() {\r\n  let path, box;\r\n\r\n  if (3 === arguments.length) {\r\n    // box('loc', [], [])\r\n    path = arguments[0];\r\n    box = [arguments[1], arguments[2]];\r\n  } else if (2 === arguments.length) {\r\n    // box([], [])\r\n    this._ensurePath('box');\r\n    path = this._path;\r\n    box = [arguments[0], arguments[1]];\r\n  } else {\r\n    throw new TypeError('Invalid argument');\r\n  }\r\n\r\n  const conds = this._conditions[path] || (this._conditions[path] = {});\r\n  conds[this._geoComparison || $withinCmd] = { $box: box };\r\n  return this;\r\n};\r\n\r\n/**\r\n * Specifies a $polygon condition\r\n *\r\n * ####Example\r\n *\r\n *     query.where('loc').within().polygon([10,20], [13, 25], [7,15])\r\n *     query.polygon('loc', [10,20], [13, 25], [7,15])\r\n *\r\n * @param {String|Array} [path]\r\n * @param {Array|Object} [val]\r\n * @return {Query} this\r\n * @see http://www.mongodb.org/display/DOCS/Geospatial+Indexing\r\n * @api public\r\n */\r\n\r\nQuery.prototype.polygon = function() {\r\n  let val, path;\r\n\r\n  if ('string' == typeof arguments[0]) {\r\n    // polygon('loc', [],[],[])\r\n    val = Array.from(arguments);\r\n    path = val.shift();\r\n  } else {\r\n    // polygon([],[],[])\r\n    this._ensurePath('polygon');\r\n    path = this._path;\r\n    val = Array.from(arguments);\r\n  }\r\n\r\n  const conds = this._conditions[path] || (this._conditions[path] = {});\r\n  conds[this._geoComparison || $withinCmd] = { $polygon: val };\r\n  return this;\r\n};\r\n\r\n/**\r\n * Specifies a $center or $centerSphere condition.\r\n *\r\n * ####Example\r\n *\r\n *     var area = { center: [50, 50], radius: 10, unique: true }\r\n *     query.where('loc').within().circle(area)\r\n *     query.center('loc', area);\r\n *\r\n *     // for spherical calculations\r\n *     var area = { center: [50, 50], radius: 10, unique: true, spherical: true }\r\n *     query.where('loc').within().circle(area)\r\n *     query.center('loc', area);\r\n *\r\n * @param {String} [path]\r\n * @param {Object} area\r\n * @return {Query} this\r\n * @see http://www.mongodb.org/display/DOCS/Geospatial+Indexing\r\n * @api public\r\n */\r\n\r\nQuery.prototype.circle = function() {\r\n  let path, val;\r\n\r\n  if (1 === arguments.length) {\r\n    this._ensurePath('circle');\r\n    path = this._path;\r\n    val = arguments[0];\r\n  } else if (2 === arguments.length) {\r\n    path = arguments[0];\r\n    val = arguments[1];\r\n  } else {\r\n    throw new TypeError('Invalid argument');\r\n  }\r\n\r\n  if (!('radius' in val && val.center))\r\n    throw new Error('center and radius are required');\r\n\r\n  const conds = this._conditions[path] || (this._conditions[path] = {});\r\n\r\n  const type = val.spherical\r\n    ? '$centerSphere'\r\n    : '$center';\r\n\r\n  const wKey = this._geoComparison || $withinCmd;\r\n  conds[wKey] = {};\r\n  conds[wKey][type] = [val.center, val.radius];\r\n\r\n  if ('unique' in val)\r\n    conds[wKey].$uniqueDocs = !!val.unique;\r\n\r\n  return this;\r\n};\r\n\r\n/**\r\n * Specifies a `$near` or `$nearSphere` condition\r\n *\r\n * These operators return documents sorted by distance.\r\n *\r\n * ####Example\r\n *\r\n *     query.where('loc').near({ center: [10, 10] });\r\n *     query.where('loc').near({ center: [10, 10], maxDistance: 5 });\r\n *     query.where('loc').near({ center: [10, 10], maxDistance: 5, spherical: true });\r\n *     query.near('loc', { center: [10, 10], maxDistance: 5 });\r\n *     query.near({ center: { type: 'Point', coordinates: [..] }})\r\n *     query.near().geometry({ type: 'Point', coordinates: [..] })\r\n *\r\n * @param {String} [path]\r\n * @param {Object} val\r\n * @return {Query} this\r\n * @see http://www.mongodb.org/display/DOCS/Geospatial+Indexing\r\n * @api public\r\n */\r\n\r\nQuery.prototype.near = function near() {\r\n  let path, val;\r\n\r\n  this._geoComparison = '$near';\r\n\r\n  if (0 === arguments.length) {\r\n    return this;\r\n  } else if (1 === arguments.length) {\r\n    this._ensurePath('near');\r\n    path = this._path;\r\n    val = arguments[0];\r\n  } else if (2 === arguments.length) {\r\n    path = arguments[0];\r\n    val = arguments[1];\r\n  } else {\r\n    throw new TypeError('Invalid argument');\r\n  }\r\n\r\n  if (!val.center) {\r\n    throw new Error('center is required');\r\n  }\r\n\r\n  const conds = this._conditions[path] || (this._conditions[path] = {});\r\n\r\n  const type = val.spherical\r\n    ? '$nearSphere'\r\n    : '$near';\r\n\r\n  // center could be a GeoJSON object or an Array\r\n  if (Array.isArray(val.center)) {\r\n    conds[type] = val.center;\r\n\r\n    const radius = 'maxDistance' in val\r\n      ? val.maxDistance\r\n      : null;\r\n\r\n    if (null != radius) {\r\n      conds.$maxDistance = radius;\r\n    }\r\n    if (null != val.minDistance) {\r\n      conds.$minDistance = val.minDistance;\r\n    }\r\n  } else {\r\n    // GeoJSON?\r\n    if (val.center.type != 'Point' || !Array.isArray(val.center.coordinates)) {\r\n      throw new Error(util.format('Invalid GeoJSON specified for %s', type));\r\n    }\r\n    conds[type] = { $geometry: val.center };\r\n\r\n    // MongoDB 2.6 insists on maxDistance being in $near / $nearSphere\r\n    if ('maxDistance' in val) {\r\n      conds[type]['$maxDistance'] = val.maxDistance;\r\n    }\r\n    if ('minDistance' in val) {\r\n      conds[type]['$minDistance'] = val.minDistance;\r\n    }\r\n  }\r\n\r\n  return this;\r\n};\r\n\r\n/**\r\n * Declares an intersects query for `geometry()`.\r\n *\r\n * ####Example\r\n *\r\n *     query.where('path').intersects().geometry({\r\n *         type: 'LineString'\r\n *       , coordinates: [[180.0, 11.0], [180, 9.0]]\r\n *     })\r\n *\r\n *     query.where('path').intersects({\r\n *         type: 'LineString'\r\n *       , coordinates: [[180.0, 11.0], [180, 9.0]]\r\n *     })\r\n *\r\n * @param {Object} [arg]\r\n * @return {Query} this\r\n * @api public\r\n */\r\n\r\nQuery.prototype.intersects = function intersects() {\r\n  // opinionated, must be used after where\r\n  this._ensurePath('intersects');\r\n\r\n  this._geoComparison = '$geoIntersects';\r\n\r\n  if (0 === arguments.length) {\r\n    return this;\r\n  }\r\n\r\n  const area = arguments[0];\r\n\r\n  if (null != area && area.type && area.coordinates)\r\n    return this.geometry(area);\r\n\r\n  throw new TypeError('Invalid argument');\r\n};\r\n\r\n/**\r\n * Specifies a `$geometry` condition\r\n *\r\n * ####Example\r\n *\r\n *     var polyA = [[[ 10, 20 ], [ 10, 40 ], [ 30, 40 ], [ 30, 20 ]]]\r\n *     query.where('loc').within().geometry({ type: 'Polygon', coordinates: polyA })\r\n *\r\n *     // or\r\n *     var polyB = [[ 0, 0 ], [ 1, 1 ]]\r\n *     query.where('loc').within().geometry({ type: 'LineString', coordinates: polyB })\r\n *\r\n *     // or\r\n *     var polyC = [ 0, 0 ]\r\n *     query.where('loc').within().geometry({ type: 'Point', coordinates: polyC })\r\n *\r\n *     // or\r\n *     query.where('loc').intersects().geometry({ type: 'Point', coordinates: polyC })\r\n *\r\n * ####NOTE:\r\n *\r\n * `geometry()` **must** come after either `intersects()` or `within()`.\r\n *\r\n * The `object` argument must contain `type` and `coordinates` properties.\r\n * - type {String}\r\n * - coordinates {Array}\r\n *\r\n * The most recent path passed to `where()` is used.\r\n *\r\n * @param {Object} object Must contain a `type` property which is a String and a `coordinates` property which is an Array. See the examples.\r\n * @return {Query} this\r\n * @see http://docs.mongodb.org/manual/release-notes/2.4/#new-geospatial-indexes-with-geojson-and-improved-spherical-geometry\r\n * @see http://www.mongodb.org/display/DOCS/Geospatial+Indexing\r\n * @see $geometry http://docs.mongodb.org/manual/reference/operator/geometry/\r\n * @api public\r\n */\r\n\r\nQuery.prototype.geometry = function geometry() {\r\n  if (!('$within' == this._geoComparison ||\r\n        '$geoWithin' == this._geoComparison ||\r\n        '$near' == this._geoComparison ||\r\n        '$geoIntersects' == this._geoComparison)) {\r\n    throw new Error('geometry() must come after `within()`, `intersects()`, or `near()');\r\n  }\r\n\r\n  let val, path;\r\n\r\n  if (1 === arguments.length) {\r\n    this._ensurePath('geometry');\r\n    path = this._path;\r\n    val = arguments[0];\r\n  } else {\r\n    throw new TypeError('Invalid argument');\r\n  }\r\n\r\n  if (!(val.type && Array.isArray(val.coordinates))) {\r\n    throw new TypeError('Invalid argument');\r\n  }\r\n\r\n  const conds = this._conditions[path] || (this._conditions[path] = {});\r\n  conds[this._geoComparison] = { $geometry: val };\r\n\r\n  return this;\r\n};\r\n\r\n// end spatial\r\n\r\n/**\r\n * Specifies which document fields to include or exclude\r\n *\r\n * ####String syntax\r\n *\r\n * When passing a string, prefixing a path with `-` will flag that path as excluded. When a path does not have the `-` prefix, it is included.\r\n *\r\n * ####Example\r\n *\r\n *     // include a and b, exclude c\r\n *     query.select('a b -c');\r\n *\r\n *     // or you may use object notation, useful when\r\n *     // you have keys already prefixed with a \"-\"\r\n *     query.select({a: 1, b: 1, c: 0});\r\n *\r\n * ####Note\r\n *\r\n * Cannot be used with `distinct()`\r\n *\r\n * @param {Object|String} arg\r\n * @return {Query} this\r\n * @see SchemaType\r\n * @api public\r\n */\r\n\r\nQuery.prototype.select = function select() {\r\n  let arg = arguments[0];\r\n  if (!arg) return this;\r\n\r\n  if (arguments.length !== 1) {\r\n    throw new Error('Invalid select: select only takes 1 argument');\r\n  }\r\n\r\n  this._validate('select');\r\n\r\n  const fields = this._fields || (this._fields = {});\r\n  const type = typeof arg;\r\n  let i, len;\r\n\r\n  if (('string' == type || utils.isArgumentsObject(arg)) &&\r\n    'number' == typeof arg.length || Array.isArray(arg)) {\r\n    if ('string' == type)\r\n      arg = arg.split(/\\s+/);\r\n\r\n    for (i = 0, len = arg.length; i < len; ++i) {\r\n      let field = arg[i];\r\n      if (!field) continue;\r\n      const include = '-' == field[0] ? 0 : 1;\r\n      if (include === 0) field = field.substring(1);\r\n      fields[field] = include;\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  if (utils.isObject(arg)) {\r\n    const keys = utils.keys(arg);\r\n    for (i = 0; i < keys.length; ++i) {\r\n      fields[keys[i]] = arg[keys[i]];\r\n    }\r\n    return this;\r\n  }\r\n\r\n  throw new TypeError('Invalid select() argument. Must be string or object.');\r\n};\r\n\r\n/**\r\n * Specifies a $slice condition for a `path`\r\n *\r\n * ####Example\r\n *\r\n *     query.slice('comments', 5)\r\n *     query.slice('comments', -5)\r\n *     query.slice('comments', [10, 5])\r\n *     query.where('comments').slice(5)\r\n *     query.where('comments').slice([-10, 5])\r\n *\r\n * @param {String} [path]\r\n * @param {Number} val number/range of elements to slice\r\n * @return {Query} this\r\n * @see mongodb http://www.mongodb.org/display/DOCS/Retrieving+a+Subset+of+Fields#RetrievingaSubsetofFields-RetrievingaSubrangeofArrayElements\r\n * @api public\r\n */\r\n\r\nQuery.prototype.slice = function() {\r\n  if (0 === arguments.length)\r\n    return this;\r\n\r\n  this._validate('slice');\r\n\r\n  let path, val;\r\n\r\n  if (1 === arguments.length) {\r\n    const arg = arguments[0];\r\n    if (typeof arg === 'object' && !Array.isArray(arg)) {\r\n      const keys = Object.keys(arg);\r\n      const numKeys = keys.length;\r\n      for (let i = 0; i < numKeys; ++i) {\r\n        this.slice(keys[i], arg[keys[i]]);\r\n      }\r\n      return this;\r\n    }\r\n    this._ensurePath('slice');\r\n    path = this._path;\r\n    val = arguments[0];\r\n  } else if (2 === arguments.length) {\r\n    if ('number' === typeof arguments[0]) {\r\n      this._ensurePath('slice');\r\n      path = this._path;\r\n      val = [arguments[0], arguments[1]];\r\n    } else {\r\n      path = arguments[0];\r\n      val = arguments[1];\r\n    }\r\n  } else if (3 === arguments.length) {\r\n    path = arguments[0];\r\n    val = [arguments[1], arguments[2]];\r\n  }\r\n\r\n  const myFields = this._fields || (this._fields = {});\r\n  myFields[path] = { $slice: val };\r\n  return this;\r\n};\r\n\r\n/**\r\n * Sets the sort order\r\n *\r\n * If an object is passed, values allowed are 'asc', 'desc', 'ascending', 'descending', 1, and -1.\r\n *\r\n * If a string is passed, it must be a space delimited list of path names. The sort order of each path is ascending unless the path name is prefixed with `-` which will be treated as descending.\r\n *\r\n * ####Example\r\n *\r\n *     // these are equivalent\r\n *     query.sort({ field: 'asc', test: -1 });\r\n *     query.sort('field -test');\r\n *     query.sort([['field', 1], ['test', -1]]);\r\n *\r\n * ####Note\r\n *\r\n *  - The array syntax `.sort([['field', 1], ['test', -1]])` can only be used with [mongodb driver >= 2.0.46](https://github.com/mongodb/node-mongodb-native/blob/2.1/HISTORY.md#2046-2015-10-15).\r\n *  - Cannot be used with `distinct()`\r\n *\r\n * @param {Object|String|Array} arg\r\n * @return {Query} this\r\n * @api public\r\n */\r\n\r\nQuery.prototype.sort = function(arg) {\r\n  if (!arg) return this;\r\n  let i, len, field;\r\n\r\n  this._validate('sort');\r\n\r\n  const type = typeof arg;\r\n\r\n  // .sort([['field', 1], ['test', -1]])\r\n  if (Array.isArray(arg)) {\r\n    len = arg.length;\r\n    for (i = 0; i < arg.length; ++i) {\r\n      if (!Array.isArray(arg[i])) {\r\n        throw new Error('Invalid sort() argument, must be array of arrays');\r\n      }\r\n      _pushArr(this.options, arg[i][0], arg[i][1]);\r\n    }\r\n    return this;\r\n  }\r\n\r\n  // .sort('field -test')\r\n  if (1 === arguments.length && 'string' == type) {\r\n    arg = arg.split(/\\s+/);\r\n    len = arg.length;\r\n    for (i = 0; i < len; ++i) {\r\n      field = arg[i];\r\n      if (!field) continue;\r\n      const ascend = '-' == field[0] ? -1 : 1;\r\n      if (ascend === -1) field = field.substring(1);\r\n      push(this.options, field, ascend);\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  // .sort({ field: 1, test: -1 })\r\n  if (utils.isObject(arg)) {\r\n    const keys = utils.keys(arg);\r\n    for (i = 0; i < keys.length; ++i) {\r\n      field = keys[i];\r\n      push(this.options, field, arg[field]);\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  if (typeof Map !== 'undefined' && arg instanceof Map) {\r\n    _pushMap(this.options, arg);\r\n    return this;\r\n  }\r\n  throw new TypeError('Invalid sort() argument. Must be a string, object, or array.');\r\n};\r\n\r\n/*!\r\n * @ignore\r\n */\r\n\r\nconst _validSortValue = {\r\n  1: 1,\r\n  '-1': -1,\r\n  asc: 1,\r\n  ascending: 1,\r\n  desc: -1,\r\n  descending: -1\r\n};\r\n\r\nfunction push(opts, field, value) {\r\n  if (Array.isArray(opts.sort)) {\r\n    throw new TypeError('Can\\'t mix sort syntaxes. Use either array or object:' +\r\n      '\\n- `.sort([[\\'field\\', 1], [\\'test\\', -1]])`' +\r\n      '\\n- `.sort({ field: 1, test: -1 })`');\r\n  }\r\n\r\n  let s;\r\n  if (value && value.$meta) {\r\n    s = opts.sort || (opts.sort = {});\r\n    s[field] = { $meta: value.$meta };\r\n    return;\r\n  }\r\n\r\n  s = opts.sort || (opts.sort = {});\r\n  let val = String(value || 1).toLowerCase();\r\n  val = _validSortValue[val];\r\n  if (!val) throw new TypeError('Invalid sort value: { ' + field + ': ' + value + ' }');\r\n\r\n  s[field] = val;\r\n}\r\n\r\nfunction _pushArr(opts, field, value) {\r\n  opts.sort = opts.sort || [];\r\n  if (!Array.isArray(opts.sort)) {\r\n    throw new TypeError('Can\\'t mix sort syntaxes. Use either array or object:' +\r\n      '\\n- `.sort([[\\'field\\', 1], [\\'test\\', -1]])`' +\r\n      '\\n- `.sort({ field: 1, test: -1 })`');\r\n  }\r\n\r\n  let val = String(value || 1).toLowerCase();\r\n  val = _validSortValue[val];\r\n  if (!val) throw new TypeError('Invalid sort value: [ ' + field + ', ' + value + ' ]');\r\n\r\n  opts.sort.push([field, val]);\r\n}\r\n\r\nfunction _pushMap(opts, map) {\r\n  opts.sort = opts.sort || new Map();\r\n  if (!(opts.sort instanceof Map)) {\r\n    throw new TypeError('Can\\'t mix sort syntaxes. Use either array or ' +\r\n      'object or map consistently');\r\n  }\r\n  map.forEach(function(value, key) {\r\n    let val = String(value || 1).toLowerCase();\r\n    val = _validSortValue[val];\r\n    if (!val) throw new TypeError('Invalid sort value: < ' + key + ': ' + value + ' >');\r\n\r\n    opts.sort.set(key, val);\r\n  });\r\n}\r\n\r\n\r\n\r\n/**\r\n * Specifies the limit option.\r\n *\r\n * ####Example\r\n *\r\n *     query.limit(20)\r\n *\r\n * ####Note\r\n *\r\n * Cannot be used with `distinct()`\r\n *\r\n * @method limit\r\n * @memberOf Query\r\n * @param {Number} val\r\n * @see mongodb http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%7B%7Blimit%28%29%7D%7D\r\n * @api public\r\n */\r\n/**\r\n * Specifies the skip option.\r\n *\r\n * ####Example\r\n *\r\n *     query.skip(100).limit(20)\r\n *\r\n * ####Note\r\n *\r\n * Cannot be used with `distinct()`\r\n *\r\n * @method skip\r\n * @memberOf Query\r\n * @param {Number} val\r\n * @see mongodb http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%7B%7Bskip%28%29%7D%7D\r\n * @api public\r\n */\r\n/**\r\n * Specifies the maxScan option.\r\n *\r\n * ####Example\r\n *\r\n *     query.maxScan(100)\r\n *\r\n * ####Note\r\n *\r\n * Cannot be used with `distinct()`\r\n *\r\n * @method maxScan\r\n * @memberOf Query\r\n * @param {Number} val\r\n * @see mongodb http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%24maxScan\r\n * @api public\r\n */\r\n/**\r\n * Specifies the batchSize option.\r\n *\r\n * ####Example\r\n *\r\n *     query.batchSize(100)\r\n *\r\n * ####Note\r\n *\r\n * Cannot be used with `distinct()`\r\n *\r\n * @method batchSize\r\n * @memberOf Query\r\n * @param {Number} val\r\n * @see mongodb http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%7B%7BbatchSize%28%29%7D%7D\r\n * @api public\r\n */\r\n/**\r\n * Specifies the `comment` option.\r\n *\r\n * ####Example\r\n *\r\n *     query.comment('login query')\r\n *\r\n * ####Note\r\n *\r\n * Cannot be used with `distinct()`\r\n *\r\n * @method comment\r\n * @memberOf Query\r\n * @param {Number} val\r\n * @see mongodb http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%24comment\r\n * @api public\r\n */\r\n\r\n/*!\r\n * limit, skip, maxScan, batchSize, comment\r\n *\r\n * Sets these associated options.\r\n *\r\n *     query.comment('feed query');\r\n */\r\n\r\n['limit', 'skip', 'maxScan', 'batchSize', 'comment'].forEach(function(method) {\r\n  Query.prototype[method] = function(v) {\r\n    this._validate(method);\r\n    this.options[method] = v;\r\n    return this;\r\n  };\r\n});\r\n\r\n/**\r\n * Specifies the maxTimeMS option.\r\n *\r\n * ####Example\r\n *\r\n *     query.maxTime(100)\r\n *     query.maxTimeMS(100)\r\n *\r\n * @method maxTime\r\n * @memberOf Query\r\n * @param {Number} ms\r\n * @see mongodb http://docs.mongodb.org/manual/reference/operator/meta/maxTimeMS/#op._S_maxTimeMS\r\n * @api public\r\n */\r\n\r\nQuery.prototype.maxTime = Query.prototype.maxTimeMS = function(ms) {\r\n  this._validate('maxTime');\r\n  this.options.maxTimeMS = ms;\r\n  return this;\r\n};\r\n\r\n/**\r\n * Specifies this query as a `snapshot` query.\r\n *\r\n * ####Example\r\n *\r\n *     mquery().snapshot() // true\r\n *     mquery().snapshot(true)\r\n *     mquery().snapshot(false)\r\n *\r\n * ####Note\r\n *\r\n * Cannot be used with `distinct()`\r\n *\r\n * @see mongodb http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%7B%7Bsnapshot%28%29%7D%7D\r\n * @return {Query} this\r\n * @api public\r\n */\r\n\r\nQuery.prototype.snapshot = function() {\r\n  this._validate('snapshot');\r\n\r\n  this.options.snapshot = arguments.length\r\n    ? !!arguments[0]\r\n    : true;\r\n\r\n  return this;\r\n};\r\n\r\n/**\r\n * Sets query hints.\r\n *\r\n * ####Example\r\n *\r\n *     query.hint({ indexA: 1, indexB: -1});\r\n *     query.hint('indexA_1_indexB_1');\r\n *\r\n * ####Note\r\n *\r\n * Cannot be used with `distinct()`\r\n *\r\n * @param {Object|string} val a hint object or the index name\r\n * @return {Query} this\r\n * @see mongodb http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%24hint\r\n * @api public\r\n */\r\n\r\nQuery.prototype.hint = function() {\r\n  if (0 === arguments.length) return this;\r\n\r\n  this._validate('hint');\r\n\r\n  const arg = arguments[0];\r\n  if (utils.isObject(arg)) {\r\n    const hint = this.options.hint || (this.options.hint = {});\r\n\r\n    // must keep object keys in order so don't use Object.keys()\r\n    for (const k in arg) {\r\n      hint[k] = arg[k];\r\n    }\r\n\r\n    return this;\r\n  }\r\n  if (typeof arg === 'string') {\r\n    this.options.hint = arg;\r\n    return this;\r\n  }\r\n\r\n  throw new TypeError('Invalid hint. ' + arg);\r\n};\r\n\r\n/**\r\n * Requests acknowledgement that this operation has been persisted to MongoDB's\r\n * on-disk journal.\r\n * This option is only valid for operations that write to the database:\r\n *\r\n * - `deleteOne()`\r\n * - `deleteMany()`\r\n * - `findOneAndDelete()`\r\n * - `findOneAndUpdate()`\r\n * - `remove()`\r\n * - `update()`\r\n * - `updateOne()`\r\n * - `updateMany()`\r\n *\r\n * Defaults to the `j` value if it is specified in writeConcern options\r\n *\r\n * ####Example:\r\n *\r\n *     mquery().w(2).j(true).wtimeout(2000);\r\n *\r\n * @method j\r\n * @memberOf Query\r\n * @instance\r\n * @param {boolean} val\r\n * @see mongodb https://docs.mongodb.com/manual/reference/write-concern/#j-option\r\n * @return {Query} this\r\n * @api public\r\n */\r\n\r\nQuery.prototype.j = function j(val) {\r\n  this.options.j = val;\r\n  return this;\r\n};\r\n\r\n/**\r\n * Sets the slaveOk option. _Deprecated_ in MongoDB 2.2 in favor of read preferences.\r\n *\r\n * ####Example:\r\n *\r\n *     query.slaveOk() // true\r\n *     query.slaveOk(true)\r\n *     query.slaveOk(false)\r\n *\r\n * @deprecated use read() preferences instead if on mongodb >= 2.2\r\n * @param {Boolean} v defaults to true\r\n * @see mongodb http://docs.mongodb.org/manual/applications/replication/#read-preference\r\n * @see read()\r\n * @return {Query} this\r\n * @api public\r\n */\r\n\r\nQuery.prototype.slaveOk = function(v) {\r\n  this.options.slaveOk = arguments.length ? !!v : true;\r\n  return this;\r\n};\r\n\r\n/**\r\n * Sets the readPreference option for the query.\r\n *\r\n * ####Example:\r\n *\r\n *     new Query().read('primary')\r\n *     new Query().read('p')  // same as primary\r\n *\r\n *     new Query().read('primaryPreferred')\r\n *     new Query().read('pp') // same as primaryPreferred\r\n *\r\n *     new Query().read('secondary')\r\n *     new Query().read('s')  // same as secondary\r\n *\r\n *     new Query().read('secondaryPreferred')\r\n *     new Query().read('sp') // same as secondaryPreferred\r\n *\r\n *     new Query().read('nearest')\r\n *     new Query().read('n')  // same as nearest\r\n *\r\n *     // you can also use mongodb.ReadPreference class to also specify tags\r\n *     new Query().read(mongodb.ReadPreference('secondary', [{ dc:'sf', s: 1 },{ dc:'ma', s: 2 }]))\r\n *\r\n *     new Query().setReadPreference('primary') // alias of .read()\r\n *\r\n * ####Preferences:\r\n *\r\n *     primary - (default)  Read from primary only. Operations will produce an error if primary is unavailable. Cannot be combined with tags.\r\n *     secondary            Read from secondary if available, otherwise error.\r\n *     primaryPreferred     Read from primary if available, otherwise a secondary.\r\n *     secondaryPreferred   Read from a secondary if available, otherwise read from the primary.\r\n *     nearest              All operations read from among the nearest candidates, but unlike other modes, this option will include both the primary and all secondaries in the random selection.\r\n *\r\n * Aliases\r\n *\r\n *     p   primary\r\n *     pp  primaryPreferred\r\n *     s   secondary\r\n *     sp  secondaryPreferred\r\n *     n   nearest\r\n *\r\n * Read more about how to use read preferences [here](http://docs.mongodb.org/manual/applications/replication/#read-preference) and [here](http://mongodb.github.com/node-mongodb-native/driver-articles/anintroductionto1_1and2_2.html#read-preferences).\r\n *\r\n * @param {String|ReadPreference} pref one of the listed preference options or their aliases\r\n * @see mongodb http://docs.mongodb.org/manual/applications/replication/#read-preference\r\n * @see driver http://mongodb.github.com/node-mongodb-native/driver-articles/anintroductionto1_1and2_2.html#read-preferences\r\n * @return {Query} this\r\n * @api public\r\n */\r\n\r\nQuery.prototype.read = Query.prototype.setReadPreference = function(pref) {\r\n  if (arguments.length > 1 && !Query.prototype.read.deprecationWarningIssued) {\r\n    console.error('Deprecation warning: \\'tags\\' argument is not supported anymore in Query.read() method. Please use mongodb.ReadPreference object instead.');\r\n    Query.prototype.read.deprecationWarningIssued = true;\r\n  }\r\n  this.options.readPreference = utils.readPref(pref);\r\n  return this;\r\n};\r\n\r\n/**\r\n * Sets the readConcern option for the query.\r\n *\r\n * ####Example:\r\n *\r\n *     new Query().readConcern('local')\r\n *     new Query().readConcern('l')  // same as local\r\n *\r\n *     new Query().readConcern('available')\r\n *     new Query().readConcern('a')  // same as available\r\n *\r\n *     new Query().readConcern('majority')\r\n *     new Query().readConcern('m')  // same as majority\r\n *\r\n *     new Query().readConcern('linearizable')\r\n *     new Query().readConcern('lz') // same as linearizable\r\n *\r\n *     new Query().readConcern('snapshot')\r\n *     new Query().readConcern('s')  // same as snapshot\r\n *\r\n *     new Query().r('s') // r is alias of readConcern\r\n *\r\n *\r\n * ####Read Concern Level:\r\n *\r\n *     local         MongoDB 3.2+ The query returns from the instance with no guarantee guarantee that the data has been written to a majority of the replica set members (i.e. may be rolled back).\r\n *     available     MongoDB 3.6+ The query returns from the instance with no guarantee guarantee that the data has been written to a majority of the replica set members (i.e. may be rolled back).\r\n *     majority      MongoDB 3.2+ The query returns the data that has been acknowledged by a majority of the replica set members. The documents returned by the read operation are durable, even in the event of failure.\r\n *     linearizable  MongoDB 3.4+ The query returns data that reflects all successful majority-acknowledged writes that completed prior to the start of the read operation. The query may wait for concurrently executing writes to propagate to a majority of replica set members before returning results.\r\n *     snapshot      MongoDB 4.0+ Only available for operations within multi-document transactions. Upon transaction commit with write concern \"majority\", the transaction operations are guaranteed to have read from a snapshot of majority-committed data.\r\n\r\n\r\n *\r\n *\r\n * Aliases\r\n *\r\n *     l   local\r\n *     a   available\r\n *     m   majority\r\n *     lz  linearizable\r\n *     s   snapshot\r\n *\r\n * Read more about how to use read concern [here](https://docs.mongodb.com/manual/reference/read-concern/).\r\n *\r\n * @param {String} level one of the listed read concern level or their aliases\r\n * @see mongodb https://docs.mongodb.com/manual/reference/read-concern/\r\n * @return {Query} this\r\n * @api public\r\n */\r\n\r\nQuery.prototype.readConcern = Query.prototype.r = function(level) {\r\n  this.options.readConcern = utils.readConcern(level);\r\n  return this;\r\n};\r\n\r\n/**\r\n * Sets tailable option.\r\n *\r\n * ####Example\r\n *\r\n *     query.tailable() <== true\r\n *     query.tailable(true)\r\n *     query.tailable(false)\r\n *\r\n * ####Note\r\n *\r\n * Cannot be used with `distinct()`\r\n *\r\n * @param {Boolean} v defaults to true\r\n * @see mongodb http://www.mongodb.org/display/DOCS/Tailable+Cursors\r\n * @api public\r\n */\r\n\r\nQuery.prototype.tailable = function() {\r\n  this._validate('tailable');\r\n\r\n  this.options.tailable = arguments.length\r\n    ? !!arguments[0]\r\n    : true;\r\n\r\n  return this;\r\n};\r\n\r\n/**\r\n * Sets the specified number of `mongod` servers, or tag set of `mongod` servers,\r\n * that must acknowledge this write before this write is considered successful.\r\n * This option is only valid for operations that write to the database:\r\n *\r\n * - `deleteOne()`\r\n * - `deleteMany()`\r\n * - `findOneAndDelete()`\r\n * - `findOneAndUpdate()`\r\n * - `remove()`\r\n * - `update()`\r\n * - `updateOne()`\r\n * - `updateMany()`\r\n *\r\n * Defaults to the `w` value if it is specified in writeConcern options\r\n *\r\n * ####Example:\r\n *\r\n * mquery().writeConcern(0)\r\n * mquery().writeConcern(1)\r\n * mquery().writeConcern({ w: 1, j: true, wtimeout: 2000 })\r\n * mquery().writeConcern('majority')\r\n * mquery().writeConcern('m') // same as majority\r\n * mquery().writeConcern('tagSetName') // if the tag set is 'm', use .writeConcern({ w: 'm' }) instead\r\n * mquery().w(1) // w is alias of writeConcern\r\n *\r\n * @method writeConcern\r\n * @memberOf Query\r\n * @instance\r\n * @param {String|number|object} concern 0 for fire-and-forget, 1 for acknowledged by one server, 'majority' for majority of the replica set, or [any of the more advanced options](https://docs.mongodb.com/manual/reference/write-concern/#w-option).\r\n * @see mongodb https://docs.mongodb.com/manual/reference/write-concern/#w-option\r\n * @return {Query} this\r\n * @api public\r\n */\r\n\r\nQuery.prototype.writeConcern = Query.prototype.w = function writeConcern(concern) {\r\n  if ('object' === typeof concern) {\r\n    if ('undefined' !== typeof concern.j) this.options.j = concern.j;\r\n    if ('undefined' !== typeof concern.w) this.options.w = concern.w;\r\n    if ('undefined' !== typeof concern.wtimeout) this.options.wtimeout = concern.wtimeout;\r\n  } else {\r\n    this.options.w = 'm' === concern ? 'majority' : concern;\r\n  }\r\n  return this;\r\n};\r\n\r\n/**\r\n * Specifies a time limit, in milliseconds, for the write concern.\r\n * If `ms > 1`, it is maximum amount of time to wait for this write\r\n * to propagate through the replica set before this operation fails.\r\n * The default is `0`, which means no timeout.\r\n *\r\n * This option is only valid for operations that write to the database:\r\n *\r\n * - `deleteOne()`\r\n * - `deleteMany()`\r\n * - `findOneAndDelete()`\r\n * - `findOneAndUpdate()`\r\n * - `remove()`\r\n * - `update()`\r\n * - `updateOne()`\r\n * - `updateMany()`\r\n *\r\n * Defaults to `wtimeout` value if it is specified in writeConcern\r\n *\r\n * ####Example:\r\n *\r\n *     mquery().w(2).j(true).wtimeout(2000)\r\n *\r\n * @method wtimeout\r\n * @memberOf Query\r\n * @instance\r\n * @param {number} ms number of milliseconds to wait\r\n * @see mongodb https://docs.mongodb.com/manual/reference/write-concern/#wtimeout\r\n * @return {Query} this\r\n * @api public\r\n */\r\n\r\nQuery.prototype.wtimeout = Query.prototype.wTimeout = function wtimeout(ms) {\r\n  this.options.wtimeout = ms;\r\n  return this;\r\n};\r\n\r\n/**\r\n * Merges another Query or conditions object into this one.\r\n *\r\n * When a Query is passed, conditions, field selection and options are merged.\r\n *\r\n * @param {Query|Object} source\r\n * @return {Query} this\r\n */\r\n\r\nQuery.prototype.merge = function(source) {\r\n  if (!source)\r\n    return this;\r\n\r\n  if (!Query.canMerge(source))\r\n    throw new TypeError('Invalid argument. Expected instanceof mquery or plain object');\r\n\r\n  if (source instanceof Query) {\r\n    // if source has a feature, apply it to ourselves\r\n\r\n    if (source._conditions) {\r\n      utils.merge(this._conditions, source._conditions);\r\n    }\r\n\r\n    if (source._fields) {\r\n      this._fields || (this._fields = {});\r\n      utils.merge(this._fields, source._fields);\r\n    }\r\n\r\n    if (source.options) {\r\n      this.options || (this.options = {});\r\n      utils.merge(this.options, source.options);\r\n    }\r\n\r\n    if (source._update) {\r\n      this._update || (this._update = {});\r\n      utils.mergeClone(this._update, source._update);\r\n    }\r\n\r\n    if (source._distinct) {\r\n      this._distinct = source._distinct;\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  // plain object\r\n  utils.merge(this._conditions, source);\r\n\r\n  return this;\r\n};\r\n\r\n/**\r\n * Finds documents.\r\n *\r\n * Passing a `callback` executes the query.\r\n *\r\n * ####Example\r\n *\r\n *     query.find()\r\n *     query.find(callback)\r\n *     query.find({ name: 'Burning Lights' }, callback)\r\n *\r\n * @param {Object} [criteria] mongodb selector\r\n * @param {Function} [callback]\r\n * @return {Query} this\r\n * @api public\r\n */\r\n\r\nQuery.prototype.find = function(criteria, callback) {\r\n  this.op = 'find';\r\n\r\n  if ('function' === typeof criteria) {\r\n    callback = criteria;\r\n    criteria = undefined;\r\n  } else if (Query.canMerge(criteria)) {\r\n    this.merge(criteria);\r\n  }\r\n\r\n  if (!callback) return this;\r\n\r\n  const conds = this._conditions;\r\n  const options = this._optionsForExec();\r\n\r\n  if (this.$useProjection) {\r\n    options.projection = this._fieldsForExec();\r\n  } else {\r\n    options.fields = this._fieldsForExec();\r\n  }\r\n\r\n  debug('find', this._collection.collectionName, conds, options);\r\n  callback = this._wrapCallback('find', callback, {\r\n    conditions: conds,\r\n    options: options\r\n  });\r\n\r\n  this._collection.find(conds, options, utils.tick(callback));\r\n  return this;\r\n};\r\n\r\n/**\r\n * Returns the query cursor\r\n *\r\n * ####Examples\r\n *\r\n *     query.find().cursor();\r\n *     query.cursor({ name: 'Burning Lights' });\r\n *\r\n * @param {Object} [criteria] mongodb selector\r\n * @return {Object} cursor\r\n * @api public\r\n */\r\n\r\nQuery.prototype.cursor = function cursor(criteria) {\r\n  if (this.op) {\r\n    if (this.op !== 'find') {\r\n      throw new TypeError('.cursor only support .find method');\r\n    }\r\n  } else {\r\n    this.find(criteria);\r\n  }\r\n\r\n  const conds = this._conditions;\r\n  const options = this._optionsForExec();\r\n\r\n  if (this.$useProjection) {\r\n    options.projection = this._fieldsForExec();\r\n  } else {\r\n    options.fields = this._fieldsForExec();\r\n  }\r\n\r\n  debug('findCursor', this._collection.collectionName, conds, options);\r\n  return this._collection.findCursor(conds, options);\r\n};\r\n\r\n/**\r\n * Executes the query as a findOne() operation.\r\n *\r\n * Passing a `callback` executes the query.\r\n *\r\n * ####Example\r\n *\r\n *     query.findOne().where('name', /^Burning/);\r\n *\r\n *     query.findOne({ name: /^Burning/ })\r\n *\r\n *     query.findOne({ name: /^Burning/ }, callback); // executes\r\n *\r\n *     query.findOne(function (err, doc) {\r\n *       if (err) return handleError(err);\r\n *       if (doc) {\r\n *         // doc may be null if no document matched\r\n *\r\n *       }\r\n *     });\r\n *\r\n * @param {Object|Query} [criteria] mongodb selector\r\n * @param {Function} [callback]\r\n * @return {Query} this\r\n * @api public\r\n */\r\n\r\nQuery.prototype.findOne = function(criteria, callback) {\r\n  this.op = 'findOne';\r\n\r\n  if ('function' === typeof criteria) {\r\n    callback = criteria;\r\n    criteria = undefined;\r\n  } else if (Query.canMerge(criteria)) {\r\n    this.merge(criteria);\r\n  }\r\n\r\n  if (!callback) return this;\r\n\r\n  const conds = this._conditions;\r\n  const options = this._optionsForExec();\r\n\r\n  if (this.$useProjection) {\r\n    options.projection = this._fieldsForExec();\r\n  } else {\r\n    options.fields = this._fieldsForExec();\r\n  }\r\n\r\n  debug('findOne', this._collection.collectionName, conds, options);\r\n  callback = this._wrapCallback('findOne', callback, {\r\n    conditions: conds,\r\n    options: options\r\n  });\r\n\r\n  this._collection.findOne(conds, options, utils.tick(callback));\r\n\r\n  return this;\r\n};\r\n\r\n/**\r\n * Exectues the query as a count() operation.\r\n *\r\n * Passing a `callback` executes the query.\r\n *\r\n * ####Example\r\n *\r\n *     query.count().where('color', 'black').exec(callback);\r\n *\r\n *     query.count({ color: 'black' }).count(callback)\r\n *\r\n *     query.count({ color: 'black' }, callback)\r\n *\r\n *     query.where('color', 'black').count(function (err, count) {\r\n *       if (err) return handleError(err);\r\n *       console.log('there are %d kittens', count);\r\n *     })\r\n *\r\n * @param {Object} [criteria] mongodb selector\r\n * @param {Function} [callback]\r\n * @return {Query} this\r\n * @see mongodb http://www.mongodb.org/display/DOCS/Aggregation#Aggregation-Count\r\n * @api public\r\n */\r\n\r\nQuery.prototype.count = function(criteria, callback) {\r\n  this.op = 'count';\r\n  this._validate();\r\n\r\n  if ('function' === typeof criteria) {\r\n    callback = criteria;\r\n    criteria = undefined;\r\n  } else if (Query.canMerge(criteria)) {\r\n    this.merge(criteria);\r\n  }\r\n\r\n  if (!callback) return this;\r\n\r\n  const conds = this._conditions,\r\n      options = this._optionsForExec();\r\n\r\n  debug('count', this._collection.collectionName, conds, options);\r\n  callback = this._wrapCallback('count', callback, {\r\n    conditions: conds,\r\n    options: options\r\n  });\r\n\r\n  this._collection.count(conds, options, utils.tick(callback));\r\n  return this;\r\n};\r\n\r\n/**\r\n * Declares or executes a distinct() operation.\r\n *\r\n * Passing a `callback` executes the query.\r\n *\r\n * ####Example\r\n *\r\n *     distinct(criteria, field, fn)\r\n *     distinct(criteria, field)\r\n *     distinct(field, fn)\r\n *     distinct(field)\r\n *     distinct(fn)\r\n *     distinct()\r\n *\r\n * @param {Object|Query} [criteria]\r\n * @param {String} [field]\r\n * @param {Function} [callback]\r\n * @return {Query} this\r\n * @see mongodb http://www.mongodb.org/display/DOCS/Aggregation#Aggregation-Distinct\r\n * @api public\r\n */\r\n\r\nQuery.prototype.distinct = function(criteria, field, callback) {\r\n  this.op = 'distinct';\r\n  this._validate();\r\n\r\n  if (!callback) {\r\n    switch (typeof field) {\r\n      case 'function':\r\n        callback = field;\r\n        if ('string' == typeof criteria) {\r\n          field = criteria;\r\n          criteria = undefined;\r\n        }\r\n        break;\r\n      case 'undefined':\r\n      case 'string':\r\n        break;\r\n      default:\r\n        throw new TypeError('Invalid `field` argument. Must be string or function');\r\n    }\r\n\r\n    switch (typeof criteria) {\r\n      case 'function':\r\n        callback = criteria;\r\n        criteria = field = undefined;\r\n        break;\r\n      case 'string':\r\n        field = criteria;\r\n        criteria = undefined;\r\n        break;\r\n    }\r\n  }\r\n\r\n  if ('string' == typeof field) {\r\n    this._distinct = field;\r\n  }\r\n\r\n  if (Query.canMerge(criteria)) {\r\n    this.merge(criteria);\r\n  }\r\n\r\n  if (!callback) {\r\n    return this;\r\n  }\r\n\r\n  if (!this._distinct) {\r\n    throw new Error('No value for `distinct` has been declared');\r\n  }\r\n\r\n  const conds = this._conditions,\r\n      options = this._optionsForExec();\r\n\r\n  debug('distinct', this._collection.collectionName, conds, options);\r\n  callback = this._wrapCallback('distinct', callback, {\r\n    conditions: conds,\r\n    options: options\r\n  });\r\n\r\n  this._collection.distinct(this._distinct, conds, options, utils.tick(callback));\r\n\r\n  return this;\r\n};\r\n\r\n/**\r\n * Declare and/or execute this query as an update() operation. By default,\r\n * `update()` only modifies the _first_ document that matches `criteria`.\r\n *\r\n * _All paths passed that are not $atomic operations will become $set ops._\r\n *\r\n * ####Example\r\n *\r\n *     mquery({ _id: id }).update({ title: 'words' }, ...)\r\n *\r\n * becomes\r\n *\r\n *     collection.update({ _id: id }, { $set: { title: 'words' }}, ...)\r\n *\r\n * ####Note\r\n *\r\n * Passing an empty object `{}` as the doc will result in a no-op unless the `overwrite` option is passed. Without the `overwrite` option set, the update operation will be ignored and the callback executed without sending the command to MongoDB so as to prevent accidently overwritting documents in the collection.\r\n *\r\n * ####Note\r\n *\r\n * The operation is only executed when a callback is passed. To force execution without a callback (which would be an unsafe write), we must first call update() and then execute it by using the `exec()` method.\r\n *\r\n *     var q = mquery(collection).where({ _id: id });\r\n *     q.update({ $set: { name: 'bob' }}).update(); // not executed\r\n *\r\n *     var q = mquery(collection).where({ _id: id });\r\n *     q.update({ $set: { name: 'bob' }}).exec(); // executed as unsafe\r\n *\r\n *     // keys that are not $atomic ops become $set.\r\n *     // this executes the same command as the previous example.\r\n *     q.update({ name: 'bob' }).where({ _id: id }).exec();\r\n *\r\n *     var q = mquery(collection).update(); // not executed\r\n *\r\n *     // overwriting with empty docs\r\n *     var q.where({ _id: id }).setOptions({ overwrite: true })\r\n *     q.update({ }, callback); // executes\r\n *\r\n *     // multi update with overwrite to empty doc\r\n *     var q = mquery(collection).where({ _id: id });\r\n *     q.setOptions({ multi: true, overwrite: true })\r\n *     q.update({ });\r\n *     q.update(callback); // executed\r\n *\r\n *     // multi updates\r\n *     mquery()\r\n *       .collection(coll)\r\n *       .update({ name: /^match/ }, { $set: { arr: [] }}, { multi: true }, callback)\r\n *     // more multi updates\r\n *     mquery({ })\r\n *       .collection(coll)\r\n *       .setOptions({ multi: true })\r\n *       .update({ $set: { arr: [] }}, callback)\r\n *\r\n *     // single update by default\r\n *     mquery({ email: 'address@example.com' })\r\n *      .collection(coll)\r\n *      .update({ $inc: { counter: 1 }}, callback)\r\n *\r\n *     // summary\r\n *     update(criteria, doc, opts, cb) // executes\r\n *     update(criteria, doc, opts)\r\n *     update(criteria, doc, cb) // executes\r\n *     update(criteria, doc)\r\n *     update(doc, cb) // executes\r\n *     update(doc)\r\n *     update(cb) // executes\r\n *     update(true) // executes (unsafe write)\r\n *     update()\r\n *\r\n * @param {Object} [criteria]\r\n * @param {Object} [doc] the update command\r\n * @param {Object} [options]\r\n * @param {Function} [callback]\r\n * @return {Query} this\r\n * @api public\r\n */\r\n\r\nQuery.prototype.update = function update(criteria, doc, options, callback) {\r\n  let force;\r\n\r\n  switch (arguments.length) {\r\n    case 3:\r\n      if ('function' == typeof options) {\r\n        callback = options;\r\n        options = undefined;\r\n      }\r\n      break;\r\n    case 2:\r\n      if ('function' == typeof doc) {\r\n        callback = doc;\r\n        doc = criteria;\r\n        criteria = undefined;\r\n      }\r\n      break;\r\n    case 1:\r\n      switch (typeof criteria) {\r\n        case 'function':\r\n          callback = criteria;\r\n          criteria = options = doc = undefined;\r\n          break;\r\n        case 'boolean':\r\n          // execution with no callback (unsafe write)\r\n          force = criteria;\r\n          criteria = undefined;\r\n          break;\r\n        default:\r\n          doc = criteria;\r\n          criteria = options = undefined;\r\n          break;\r\n      }\r\n  }\r\n\r\n  return _update(this, 'update', criteria, doc, options, force, callback);\r\n};\r\n\r\n/**\r\n * Declare and/or execute this query as an `updateMany()` operation. Identical\r\n * to `update()` except `updateMany()` will update _all_ documents that match\r\n * `criteria`, rather than just the first one.\r\n *\r\n * _All paths passed that are not $atomic operations will become $set ops._\r\n *\r\n * ####Example\r\n *\r\n *     // Update every document whose `title` contains 'test'\r\n *     mquery().updateMany({ title: /test/ }, { year: 2017 })\r\n *\r\n * @param {Object} [criteria]\r\n * @param {Object} [doc] the update command\r\n * @param {Object} [options]\r\n * @param {Function} [callback]\r\n * @return {Query} this\r\n * @api public\r\n */\r\n\r\nQuery.prototype.updateMany = function updateMany(criteria, doc, options, callback) {\r\n  let force;\r\n\r\n  switch (arguments.length) {\r\n    case 3:\r\n      if ('function' == typeof options) {\r\n        callback = options;\r\n        options = undefined;\r\n      }\r\n      break;\r\n    case 2:\r\n      if ('function' == typeof doc) {\r\n        callback = doc;\r\n        doc = criteria;\r\n        criteria = undefined;\r\n      }\r\n      break;\r\n    case 1:\r\n      switch (typeof criteria) {\r\n        case 'function':\r\n          callback = criteria;\r\n          criteria = options = doc = undefined;\r\n          break;\r\n        case 'boolean':\r\n          // execution with no callback (unsafe write)\r\n          force = criteria;\r\n          criteria = undefined;\r\n          break;\r\n        default:\r\n          doc = criteria;\r\n          criteria = options = undefined;\r\n          break;\r\n      }\r\n  }\r\n\r\n  return _update(this, 'updateMany', criteria, doc, options, force, callback);\r\n};\r\n\r\n/**\r\n * Declare and/or execute this query as an `updateOne()` operation. Identical\r\n * to `update()` except `updateOne()` will _always_ update just one document,\r\n * regardless of the `multi` option.\r\n *\r\n * _All paths passed that are not $atomic operations will become $set ops._\r\n *\r\n * ####Example\r\n *\r\n *     // Update the first document whose `title` contains 'test'\r\n *     mquery().updateMany({ title: /test/ }, { year: 2017 })\r\n *\r\n * @param {Object} [criteria]\r\n * @param {Object} [doc] the update command\r\n * @param {Object} [options]\r\n * @param {Function} [callback]\r\n * @return {Query} this\r\n * @api public\r\n */\r\n\r\nQuery.prototype.updateOne = function updateOne(criteria, doc, options, callback) {\r\n  let force;\r\n\r\n  switch (arguments.length) {\r\n    case 3:\r\n      if ('function' == typeof options) {\r\n        callback = options;\r\n        options = undefined;\r\n      }\r\n      break;\r\n    case 2:\r\n      if ('function' == typeof doc) {\r\n        callback = doc;\r\n        doc = criteria;\r\n        criteria = undefined;\r\n      }\r\n      break;\r\n    case 1:\r\n      switch (typeof criteria) {\r\n        case 'function':\r\n          callback = criteria;\r\n          criteria = options = doc = undefined;\r\n          break;\r\n        case 'boolean':\r\n          // execution with no callback (unsafe write)\r\n          force = criteria;\r\n          criteria = undefined;\r\n          break;\r\n        default:\r\n          doc = criteria;\r\n          criteria = options = undefined;\r\n          break;\r\n      }\r\n  }\r\n\r\n  return _update(this, 'updateOne', criteria, doc, options, force, callback);\r\n};\r\n\r\n/**\r\n * Declare and/or execute this query as an `replaceOne()` operation. Similar\r\n * to `updateOne()`, except `replaceOne()` is not allowed to use atomic\r\n * modifiers (`$set`, `$push`, etc.). Calling `replaceOne()` will always\r\n * replace the existing doc.\r\n *\r\n * ####Example\r\n *\r\n *     // Replace the document with `_id` 1 with `{ _id: 1, year: 2017 }`\r\n *     mquery().replaceOne({ _id: 1 }, { year: 2017 })\r\n *\r\n * @param {Object} [criteria]\r\n * @param {Object} [doc] the update command\r\n * @param {Object} [options]\r\n * @param {Function} [callback]\r\n * @return {Query} this\r\n * @api public\r\n */\r\n\r\nQuery.prototype.replaceOne = function replaceOne(criteria, doc, options, callback) {\r\n  let force;\r\n\r\n  switch (arguments.length) {\r\n    case 3:\r\n      if ('function' == typeof options) {\r\n        callback = options;\r\n        options = undefined;\r\n      }\r\n      break;\r\n    case 2:\r\n      if ('function' == typeof doc) {\r\n        callback = doc;\r\n        doc = criteria;\r\n        criteria = undefined;\r\n      }\r\n      break;\r\n    case 1:\r\n      switch (typeof criteria) {\r\n        case 'function':\r\n          callback = criteria;\r\n          criteria = options = doc = undefined;\r\n          break;\r\n        case 'boolean':\r\n          // execution with no callback (unsafe write)\r\n          force = criteria;\r\n          criteria = undefined;\r\n          break;\r\n        default:\r\n          doc = criteria;\r\n          criteria = options = undefined;\r\n          break;\r\n      }\r\n  }\r\n\r\n  this.setOptions({ overwrite: true });\r\n  return _update(this, 'replaceOne', criteria, doc, options, force, callback);\r\n};\r\n\r\n\r\n/*!\r\n * Internal helper for update, updateMany, updateOne\r\n */\r\n\r\nfunction _update(query, op, criteria, doc, options, force, callback) {\r\n  query.op = op;\r\n\r\n  if (Query.canMerge(criteria)) {\r\n    query.merge(criteria);\r\n  }\r\n\r\n  if (doc) {\r\n    query._mergeUpdate(doc);\r\n  }\r\n\r\n  if (utils.isObject(options)) {\r\n    // { overwrite: true }\r\n    query.setOptions(options);\r\n  }\r\n\r\n  // we are done if we don't have callback and they are\r\n  // not forcing an unsafe write.\r\n  if (!(force || callback)) {\r\n    return query;\r\n  }\r\n\r\n  if (!query._update ||\r\n      !query.options.overwrite && 0 === utils.keys(query._update).length) {\r\n    callback && utils.soon(callback.bind(null, null, 0));\r\n    return query;\r\n  }\r\n\r\n  options = query._optionsForExec();\r\n  if (!callback) options.safe = false;\r\n\r\n  criteria = query._conditions;\r\n  doc = query._updateForExec();\r\n\r\n  debug('update', query._collection.collectionName, criteria, doc, options);\r\n  callback = query._wrapCallback(op, callback, {\r\n    conditions: criteria,\r\n    doc: doc,\r\n    options: options\r\n  });\r\n\r\n  query._collection[op](criteria, doc, options, utils.tick(callback));\r\n\r\n  return query;\r\n}\r\n\r\n/**\r\n * Declare and/or execute this query as a remove() operation.\r\n *\r\n * ####Example\r\n *\r\n *     mquery(collection).remove({ artist: 'Anne Murray' }, callback)\r\n *\r\n * ####Note\r\n *\r\n * The operation is only executed when a callback is passed. To force execution without a callback (which would be an unsafe write), we must first call remove() and then execute it by using the `exec()` method.\r\n *\r\n *     // not executed\r\n *     var query = mquery(collection).remove({ name: 'Anne Murray' })\r\n *\r\n *     // executed\r\n *     mquery(collection).remove({ name: 'Anne Murray' }, callback)\r\n *     mquery(collection).remove({ name: 'Anne Murray' }).remove(callback)\r\n *\r\n *     // executed without a callback (unsafe write)\r\n *     query.exec()\r\n *\r\n *     // summary\r\n *     query.remove(conds, fn); // executes\r\n *     query.remove(conds)\r\n *     query.remove(fn) // executes\r\n *     query.remove()\r\n *\r\n * @param {Object|Query} [criteria] mongodb selector\r\n * @param {Function} [callback]\r\n * @return {Query} this\r\n * @api public\r\n */\r\n\r\nQuery.prototype.remove = function(criteria, callback) {\r\n  this.op = 'remove';\r\n  let force;\r\n\r\n  if ('function' === typeof criteria) {\r\n    callback = criteria;\r\n    criteria = undefined;\r\n  } else if (Query.canMerge(criteria)) {\r\n    this.merge(criteria);\r\n  } else if (true === criteria) {\r\n    force = criteria;\r\n    criteria = undefined;\r\n  }\r\n\r\n  if (!(force || callback))\r\n    return this;\r\n\r\n  const options = this._optionsForExec();\r\n  if (!callback) options.safe = false;\r\n\r\n  const conds = this._conditions;\r\n\r\n  debug('remove', this._collection.collectionName, conds, options);\r\n  callback = this._wrapCallback('remove', callback, {\r\n    conditions: conds,\r\n    options: options\r\n  });\r\n\r\n  this._collection.remove(conds, options, utils.tick(callback));\r\n\r\n  return this;\r\n};\r\n\r\n/**\r\n * Declare and/or execute this query as a `deleteOne()` operation. Behaves like\r\n * `remove()`, except for ignores the `justOne` option and always deletes at\r\n * most one document.\r\n *\r\n * ####Example\r\n *\r\n *     mquery(collection).deleteOne({ artist: 'Anne Murray' }, callback)\r\n *\r\n * @param {Object|Query} [criteria] mongodb selector\r\n * @param {Function} [callback]\r\n * @return {Query} this\r\n * @api public\r\n */\r\n\r\nQuery.prototype.deleteOne = function(criteria, callback) {\r\n  this.op = 'deleteOne';\r\n  let force;\r\n\r\n  if ('function' === typeof criteria) {\r\n    callback = criteria;\r\n    criteria = undefined;\r\n  } else if (Query.canMerge(criteria)) {\r\n    this.merge(criteria);\r\n  } else if (true === criteria) {\r\n    force = criteria;\r\n    criteria = undefined;\r\n  }\r\n\r\n  if (!(force || callback))\r\n    return this;\r\n\r\n  const options = this._optionsForExec();\r\n  if (!callback) options.safe = false;\r\n  delete options.justOne;\r\n\r\n  const conds = this._conditions;\r\n\r\n  debug('deleteOne', this._collection.collectionName, conds, options);\r\n  callback = this._wrapCallback('deleteOne', callback, {\r\n    conditions: conds,\r\n    options: options\r\n  });\r\n\r\n  this._collection.deleteOne(conds, options, utils.tick(callback));\r\n\r\n  return this;\r\n};\r\n\r\n/**\r\n * Declare and/or execute this query as a `deleteMany()` operation. Behaves like\r\n * `remove()`, except for ignores the `justOne` option and always deletes\r\n * _every_ document that matches `criteria`.\r\n *\r\n * ####Example\r\n *\r\n *     mquery(collection).deleteMany({ artist: 'Anne Murray' }, callback)\r\n *\r\n * @param {Object|Query} [criteria] mongodb selector\r\n * @param {Function} [callback]\r\n * @return {Query} this\r\n * @api public\r\n */\r\n\r\nQuery.prototype.deleteMany = function(criteria, callback) {\r\n  this.op = 'deleteMany';\r\n  let force;\r\n\r\n  if ('function' === typeof criteria) {\r\n    callback = criteria;\r\n    criteria = undefined;\r\n  } else if (Query.canMerge(criteria)) {\r\n    this.merge(criteria);\r\n  } else if (true === criteria) {\r\n    force = criteria;\r\n    criteria = undefined;\r\n  }\r\n\r\n  if (!(force || callback))\r\n    return this;\r\n\r\n  const options = this._optionsForExec();\r\n  if (!callback) options.safe = false;\r\n  delete options.justOne;\r\n\r\n  const conds = this._conditions;\r\n\r\n  debug('deleteOne', this._collection.collectionName, conds, options);\r\n  callback = this._wrapCallback('deleteOne', callback, {\r\n    conditions: conds,\r\n    options: options\r\n  });\r\n\r\n  this._collection.deleteMany(conds, options, utils.tick(callback));\r\n\r\n  return this;\r\n};\r\n\r\n/**\r\n * Issues a mongodb [findAndModify](http://www.mongodb.org/display/DOCS/findAndModify+Command) update command.\r\n *\r\n * Finds a matching document, updates it according to the `update` arg, passing any `options`, and returns the found document (if any) to the callback. The query executes immediately if `callback` is passed.\r\n *\r\n * ####Available options\r\n *\r\n * - `new`: bool - true to return the modified document rather than the original. defaults to true\r\n * - `upsert`: bool - creates the object if it doesn't exist. defaults to false.\r\n * - `sort`: if multiple docs are found by the conditions, sets the sort order to choose which doc to update\r\n *\r\n * ####Examples\r\n *\r\n *     query.findOneAndUpdate(conditions, update, options, callback) // executes\r\n *     query.findOneAndUpdate(conditions, update, options)  // returns Query\r\n *     query.findOneAndUpdate(conditions, update, callback) // executes\r\n *     query.findOneAndUpdate(conditions, update)           // returns Query\r\n *     query.findOneAndUpdate(update, callback)             // returns Query\r\n *     query.findOneAndUpdate(update)                       // returns Query\r\n *     query.findOneAndUpdate(callback)                     // executes\r\n *     query.findOneAndUpdate()                             // returns Query\r\n *\r\n * @param {Object|Query} [query]\r\n * @param {Object} [doc]\r\n * @param {Object} [options]\r\n * @param {Function} [callback]\r\n * @see mongodb http://www.mongodb.org/display/DOCS/findAndModify+Command\r\n * @return {Query} this\r\n * @api public\r\n */\r\n\r\nQuery.prototype.findOneAndUpdate = function(criteria, doc, options, callback) {\r\n  this.op = 'findOneAndUpdate';\r\n  this._validate();\r\n\r\n  switch (arguments.length) {\r\n    case 3:\r\n      if ('function' == typeof options) {\r\n        callback = options;\r\n        options = {};\r\n      }\r\n      break;\r\n    case 2:\r\n      if ('function' == typeof doc) {\r\n        callback = doc;\r\n        doc = criteria;\r\n        criteria = undefined;\r\n      }\r\n      options = undefined;\r\n      break;\r\n    case 1:\r\n      if ('function' == typeof criteria) {\r\n        callback = criteria;\r\n        criteria = options = doc = undefined;\r\n      } else {\r\n        doc = criteria;\r\n        criteria = options = undefined;\r\n      }\r\n  }\r\n\r\n  if (Query.canMerge(criteria)) {\r\n    this.merge(criteria);\r\n  }\r\n\r\n  // apply doc\r\n  if (doc) {\r\n    this._mergeUpdate(doc);\r\n  }\r\n\r\n  options && this.setOptions(options);\r\n\r\n  if (!callback) return this;\r\n\r\n  const conds = this._conditions;\r\n  const update = this._updateForExec();\r\n  options = this._optionsForExec();\r\n\r\n  return this._collection.findOneAndUpdate(conds, update, options, utils.tick(callback));\r\n};\r\n\r\n/**\r\n * Issues a mongodb [findAndModify](http://www.mongodb.org/display/DOCS/findAndModify+Command) remove command.\r\n *\r\n * Finds a matching document, removes it, passing the found document (if any) to the callback. Executes immediately if `callback` is passed.\r\n *\r\n * ####Available options\r\n *\r\n * - `sort`: if multiple docs are found by the conditions, sets the sort order to choose which doc to update\r\n *\r\n * ####Examples\r\n *\r\n *     A.where().findOneAndRemove(conditions, options, callback) // executes\r\n *     A.where().findOneAndRemove(conditions, options)  // return Query\r\n *     A.where().findOneAndRemove(conditions, callback) // executes\r\n *     A.where().findOneAndRemove(conditions) // returns Query\r\n *     A.where().findOneAndRemove(callback)   // executes\r\n *     A.where().findOneAndRemove()           // returns Query\r\n *     A.where().findOneAndDelete()           // alias of .findOneAndRemove()\r\n *\r\n * @param {Object} [conditions]\r\n * @param {Object} [options]\r\n * @param {Function} [callback]\r\n * @return {Query} this\r\n * @see mongodb http://www.mongodb.org/display/DOCS/findAndModify+Command\r\n * @api public\r\n */\r\n\r\nQuery.prototype.findOneAndRemove = Query.prototype.findOneAndDelete = function(conditions, options, callback) {\r\n  this.op = 'findOneAndRemove';\r\n  this._validate();\r\n\r\n  if ('function' == typeof options) {\r\n    callback = options;\r\n    options = undefined;\r\n  } else if ('function' == typeof conditions) {\r\n    callback = conditions;\r\n    conditions = undefined;\r\n  }\r\n\r\n  // apply conditions\r\n  if (Query.canMerge(conditions)) {\r\n    this.merge(conditions);\r\n  }\r\n\r\n  // apply options\r\n  options && this.setOptions(options);\r\n\r\n  if (!callback) return this;\r\n\r\n  options = this._optionsForExec();\r\n  const conds = this._conditions;\r\n\r\n  return this._collection.findOneAndDelete(conds, options, utils.tick(callback));\r\n};\r\n\r\n/**\r\n * Wrap callback to add tracing\r\n *\r\n * @param {Function} callback\r\n * @param {Object} [queryInfo]\r\n * @api private\r\n */\r\nQuery.prototype._wrapCallback = function(method, callback, queryInfo) {\r\n  const traceFunction = this._traceFunction || Query.traceFunction;\r\n\r\n  if (traceFunction) {\r\n    queryInfo.collectionName = this._collection.collectionName;\r\n\r\n    const traceCallback = traceFunction &&\r\n      traceFunction.call(null, method, queryInfo, this);\r\n\r\n    const startTime = new Date().getTime();\r\n\r\n    return function wrapperCallback(err, result) {\r\n      if (traceCallback) {\r\n        const millis = new Date().getTime() - startTime;\r\n        traceCallback.call(null, err, result, millis);\r\n      }\r\n\r\n      if (callback) {\r\n        callback.apply(null, arguments);\r\n      }\r\n    };\r\n  }\r\n\r\n  return callback;\r\n};\r\n\r\n/**\r\n * Add trace function that gets called when the query is executed.\r\n * The function will be called with (method, queryInfo, query) and\r\n * should return a callback function which will be called\r\n * with (err, result, millis) when the query is complete.\r\n *\r\n * queryInfo is an object containing: {\r\n *   collectionName: <name of the collection>,\r\n *   conditions: <query criteria>,\r\n *   options: <comment, fields, readPreference, etc>,\r\n *   doc: [document to update, if applicable]\r\n * }\r\n *\r\n * NOTE: Does not trace stream queries.\r\n *\r\n * @param {Function} traceFunction\r\n * @return {Query} this\r\n * @api public\r\n */\r\nQuery.prototype.setTraceFunction = function(traceFunction) {\r\n  this._traceFunction = traceFunction;\r\n  return this;\r\n};\r\n\r\n/**\r\n * Executes the query\r\n *\r\n * ####Examples\r\n *\r\n *     query.exec();\r\n *     query.exec(callback);\r\n *     query.exec('update');\r\n *     query.exec('find', callback);\r\n *\r\n * @param {String|Function} [operation]\r\n * @param {Function} [callback]\r\n * @api public\r\n */\r\n\r\nQuery.prototype.exec = function exec(op, callback) {\r\n  switch (typeof op) {\r\n    case 'function':\r\n      callback = op;\r\n      op = null;\r\n      break;\r\n    case 'string':\r\n      this.op = op;\r\n      break;\r\n  }\r\n\r\n  assert.ok(this.op, 'Missing query type: (find, update, etc)');\r\n\r\n  if ('update' == this.op || 'remove' == this.op) {\r\n    callback || (callback = true);\r\n  }\r\n\r\n  const _this = this;\r\n\r\n  if ('function' == typeof callback) {\r\n    this[this.op](callback);\r\n  } else {\r\n    return new Query.Promise(function(success, error) {\r\n      _this[_this.op](function(err, val) {\r\n        if (err) error(err);\r\n        else success(val);\r\n        success = error = null;\r\n      });\r\n    });\r\n  }\r\n};\r\n\r\n/**\r\n * Returns a thunk which when called runs this.exec()\r\n *\r\n * The thunk receives a callback function which will be\r\n * passed to `this.exec()`\r\n *\r\n * @return {Function}\r\n * @api public\r\n */\r\n\r\nQuery.prototype.thunk = function() {\r\n  const _this = this;\r\n  return function(cb) {\r\n    _this.exec(cb);\r\n  };\r\n};\r\n\r\n/**\r\n * Executes the query returning a `Promise` which will be\r\n * resolved with either the doc(s) or rejected with the error.\r\n *\r\n * @param {Function} [resolve]\r\n * @param {Function} [reject]\r\n * @return {Promise}\r\n * @api public\r\n */\r\n\r\nQuery.prototype.then = function(resolve, reject) {\r\n  const _this = this;\r\n  const promise = new Query.Promise(function(success, error) {\r\n    _this.exec(function(err, val) {\r\n      if (err) error(err);\r\n      else success(val);\r\n      success = error = null;\r\n    });\r\n  });\r\n  return promise.then(resolve, reject);\r\n};\r\n\r\n/**\r\n * Returns a cursor for the given `find` query.\r\n *\r\n * @throws Error if operation is not a find\r\n * @returns {Cursor} MongoDB driver cursor\r\n */\r\n\r\nQuery.prototype.cursor = function() {\r\n  if ('find' != this.op)\r\n    throw new Error('cursor() is only available for find');\r\n\r\n  const conds = this._conditions;\r\n\r\n  const options = this._optionsForExec();\r\n  if (this.$useProjection) {\r\n    options.projection = this._fieldsForExec();\r\n  } else {\r\n    options.fields = this._fieldsForExec();\r\n  }\r\n\r\n  debug('cursor', this._collection.collectionName, conds, options);\r\n\r\n  return this._collection.findCursor(conds, options);\r\n};\r\n\r\n/**\r\n * Determines if field selection has been made.\r\n *\r\n * @return {Boolean}\r\n * @api public\r\n */\r\n\r\nQuery.prototype.selected = function selected() {\r\n  return !!(this._fields && Object.keys(this._fields).length > 0);\r\n};\r\n\r\n/**\r\n * Determines if inclusive field selection has been made.\r\n *\r\n *     query.selectedInclusively() // false\r\n *     query.select('name')\r\n *     query.selectedInclusively() // true\r\n *     query.selectedExlusively() // false\r\n *\r\n * @returns {Boolean}\r\n */\r\n\r\nQuery.prototype.selectedInclusively = function selectedInclusively() {\r\n  if (!this._fields) return false;\r\n\r\n  const keys = Object.keys(this._fields);\r\n  if (0 === keys.length) return false;\r\n\r\n  for (let i = 0; i < keys.length; ++i) {\r\n    const key = keys[i];\r\n    if (0 === this._fields[key]) return false;\r\n    if (this._fields[key] &&\r\n        typeof this._fields[key] === 'object' &&\r\n        this._fields[key].$meta) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\n/**\r\n * Determines if exclusive field selection has been made.\r\n *\r\n *     query.selectedExlusively() // false\r\n *     query.select('-name')\r\n *     query.selectedExlusively() // true\r\n *     query.selectedInclusively() // false\r\n *\r\n * @returns {Boolean}\r\n */\r\n\r\nQuery.prototype.selectedExclusively = function selectedExclusively() {\r\n  if (!this._fields) return false;\r\n\r\n  const keys = Object.keys(this._fields);\r\n  if (0 === keys.length) return false;\r\n\r\n  for (let i = 0; i < keys.length; ++i) {\r\n    const key = keys[i];\r\n    if (0 === this._fields[key]) return true;\r\n  }\r\n\r\n  return false;\r\n};\r\n\r\n/**\r\n * Merges `doc` with the current update object.\r\n *\r\n * @param {Object} doc\r\n */\r\n\r\nQuery.prototype._mergeUpdate = function(doc) {\r\n  if (!this._update) this._update = {};\r\n  if (doc instanceof Query) {\r\n    if (doc._update) {\r\n      utils.mergeClone(this._update, doc._update);\r\n    }\r\n  } else {\r\n    utils.mergeClone(this._update, doc);\r\n  }\r\n};\r\n\r\n/**\r\n * Returns default options.\r\n *\r\n * @return {Object}\r\n * @api private\r\n */\r\n\r\nQuery.prototype._optionsForExec = function() {\r\n  const options = utils.clone(this.options);\r\n  return options;\r\n};\r\n\r\n/**\r\n * Returns fields selection for this query.\r\n *\r\n * @return {Object}\r\n * @api private\r\n */\r\n\r\nQuery.prototype._fieldsForExec = function() {\r\n  return utils.clone(this._fields);\r\n};\r\n\r\n/**\r\n * Return an update document with corrected $set operations.\r\n *\r\n * @api private\r\n */\r\n\r\nQuery.prototype._updateForExec = function() {\r\n  const update = utils.clone(this._update);\r\n  const ops = utils.keys(update);\r\n  const ret = {};\r\n\r\n  for (const op of ops) {\r\n    if (this.options.overwrite) {\r\n      ret[op] = update[op];\r\n      continue;\r\n    }\r\n\r\n    if ('$' !== op[0]) {\r\n      // fix up $set sugar\r\n      if (!ret.$set) {\r\n        if (update.$set) {\r\n          ret.$set = update.$set;\r\n        } else {\r\n          ret.$set = {};\r\n        }\r\n      }\r\n      ret.$set[op] = update[op];\r\n      if (!~ops.indexOf('$set')) ops.push('$set');\r\n    } else if ('$set' === op) {\r\n      if (!ret.$set) {\r\n        ret[op] = update[op];\r\n      }\r\n    } else {\r\n      ret[op] = update[op];\r\n    }\r\n  }\r\n\r\n  this._compiledUpdate = ret;\r\n  return ret;\r\n};\r\n\r\n/**\r\n * Make sure _path is set.\r\n *\r\n * @parmam {String} method\r\n */\r\n\r\nQuery.prototype._ensurePath = function(method) {\r\n  if (!this._path) {\r\n    const msg = method + '() must be used after where() '\r\n                     + 'when called with these arguments';\r\n    throw new Error(msg);\r\n  }\r\n};\r\n\r\n/*!\r\n * Permissions\r\n */\r\n\r\nQuery.permissions = require('./permissions');\r\n\r\nQuery._isPermitted = function(a, b) {\r\n  const denied = Query.permissions[b];\r\n  if (!denied) return true;\r\n  return true !== denied[a];\r\n};\r\n\r\nQuery.prototype._validate = function(action) {\r\n  let fail;\r\n  let validator;\r\n\r\n  if (undefined === action) {\r\n\r\n    validator = Query.permissions[this.op];\r\n    if ('function' != typeof validator) return true;\r\n\r\n    fail = validator(this);\r\n\r\n  } else if (!Query._isPermitted(action, this.op)) {\r\n    fail = action;\r\n  }\r\n\r\n  if (fail) {\r\n    throw new Error(fail + ' cannot be used with ' + this.op);\r\n  }\r\n};\r\n\r\n/**\r\n * Determines if `conds` can be merged using `mquery().merge()`\r\n *\r\n * @param {Object} conds\r\n * @return {Boolean}\r\n */\r\n\r\nQuery.canMerge = function(conds) {\r\n  return conds instanceof Query || utils.isObject(conds);\r\n};\r\n\r\n/**\r\n * Set a trace function that will get called whenever a\r\n * query is executed.\r\n *\r\n * See `setTraceFunction()` for details.\r\n *\r\n * @param {Object} conds\r\n * @return {Boolean}\r\n */\r\nQuery.setGlobalTraceFunction = function(traceFunction) {\r\n  Query.traceFunction = traceFunction;\r\n};\r\n\r\n/*!\r\n * Exports.\r\n */\r\n\r\nQuery.utils = utils;\r\nQuery.env = require('./env');\r\nQuery.Collection = require('./collection');\r\nQuery.BaseCollection = require('./collection/collection');\r\nQuery.Promise = Promise;\r\nmodule.exports = exports = Query;\r\n\r\n// TODO\r\n// test utils\r\n"],"mappings":"AAAA,YAAY;;AAEZ;AACA;AACA;AAEA,MAAMA,MAAM,GAAGC,OAAO,CAAC,QAAQ,CAAC;AAChC,MAAMC,IAAI,GAAGD,OAAO,CAAC,MAAM,CAAC;AAC5B,MAAME,KAAK,GAAGF,OAAO,CAAC,SAAS,CAAC;AAChC,MAAMG,KAAK,GAAGH,OAAO,CAAC,OAAO,CAAC,CAAC,QAAQ,CAAC;;AAExC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASI,KAAK,CAACC,QAAQ,EAAEC,OAAO,EAAE;EAChC,IAAI,EAAE,IAAI,YAAYF,KAAK,CAAC,EAC1B,OAAO,IAAIA,KAAK,CAACC,QAAQ,EAAEC,OAAO,CAAC;EAErC,MAAMC,KAAK,GAAG,IAAI,CAACC,WAAW,CAACC,SAAS;EAExC,IAAI,CAACC,EAAE,GAAGH,KAAK,CAACG,EAAE,IAAIC,SAAS;EAE/B,IAAI,CAACL,OAAO,GAAGM,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEN,KAAK,CAACD,OAAO,CAAC;EAE/C,IAAI,CAACQ,WAAW,GAAGP,KAAK,CAACO,WAAW,GAChCZ,KAAK,CAACa,KAAK,CAACR,KAAK,CAACO,WAAW,CAAC,GAC9B,CAAC,CAAC;EAEN,IAAI,CAACE,OAAO,GAAGT,KAAK,CAACS,OAAO,GACxBd,KAAK,CAACa,KAAK,CAACR,KAAK,CAACS,OAAO,CAAC,GAC1BL,SAAS;EAEb,IAAI,CAACM,OAAO,GAAGV,KAAK,CAACU,OAAO,GACxBf,KAAK,CAACa,KAAK,CAACR,KAAK,CAACU,OAAO,CAAC,GAC1BN,SAAS;EAEb,IAAI,CAACO,KAAK,GAAGX,KAAK,CAACW,KAAK,IAAIP,SAAS;EACrC,IAAI,CAACQ,SAAS,GAAGZ,KAAK,CAACY,SAAS,IAAIR,SAAS;EAC7C,IAAI,CAACS,WAAW,GAAGb,KAAK,CAACa,WAAW,IAAIT,SAAS;EACjD,IAAI,CAACU,cAAc,GAAGd,KAAK,CAACc,cAAc,IAAIV,SAAS;EAEvD,IAAIL,OAAO,EAAE;IACX,IAAI,CAACgB,UAAU,CAAChB,OAAO,CAAC;EAC1B;EAEA,IAAID,QAAQ,EAAE;IACZ,IAAIA,QAAQ,CAACkB,IAAI,IAAIlB,QAAQ,CAACmB,MAAM,IAAInB,QAAQ,CAACoB,MAAM,EAAE;MACvD;MACA,IAAI,CAACC,UAAU,CAACrB,QAAQ,CAAC;IAC3B,CAAC,MAAM;MACL,IAAI,CAACkB,IAAI,CAAClB,QAAQ,CAAC;IACrB;EACF;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIsB,UAAU,GAAG,YAAY;AAC7Bf,MAAM,CAACgB,cAAc,CAACxB,KAAK,EAAE,eAAe,EAAE;EAC5CyB,GAAG,EAAE,YAAW;IAAE,OAAOF,UAAU,IAAI,YAAY;EAAE,CAAC;EACtDG,GAAG,EAAE,UAASC,CAAC,EAAE;IACf,IAAI,IAAI,KAAKA,CAAC,EAAE;MACd;MACAJ,UAAU,GAAG,YAAY;IAC3B,CAAC,MAAM;MACLA,UAAU,GAAG,SAAS;IACxB;EACF;AACF,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAvB,KAAK,CAACK,SAAS,CAACuB,aAAa,GAAG,SAASA,aAAa,GAAG;EACvD,SAASC,WAAW,CAAC5B,QAAQ,EAAEC,OAAO,EAAE;IACtC,IAAI,EAAE,IAAI,YAAY2B,WAAW,CAAC,EAChC,OAAO,IAAIA,WAAW,CAAC5B,QAAQ,EAAEC,OAAO,CAAC;IAC3CF,KAAK,CAAC8B,IAAI,CAAC,IAAI,EAAE7B,QAAQ,EAAEC,OAAO,CAAC;EACrC;EAEAJ,KAAK,CAACiC,QAAQ,CAACF,WAAW,EAAE7B,KAAK,CAAC;;EAElC;EACA,MAAMgC,CAAC,GAAGH,WAAW,CAACxB,SAAS;EAE/B2B,CAAC,CAAC9B,OAAO,GAAG,CAAC,CAAC;EACd8B,CAAC,CAACd,UAAU,CAAC,IAAI,CAAChB,OAAO,CAAC;EAE1B8B,CAAC,CAAC1B,EAAE,GAAG,IAAI,CAACA,EAAE;EACd0B,CAAC,CAACtB,WAAW,GAAGZ,KAAK,CAACa,KAAK,CAAC,IAAI,CAACD,WAAW,CAAC;EAC7CsB,CAAC,CAACpB,OAAO,GAAGd,KAAK,CAACa,KAAK,CAAC,IAAI,CAACC,OAAO,CAAC;EACrCoB,CAAC,CAACnB,OAAO,GAAGf,KAAK,CAACa,KAAK,CAAC,IAAI,CAACE,OAAO,CAAC;EACrCmB,CAAC,CAAClB,KAAK,GAAG,IAAI,CAACA,KAAK;EACpBkB,CAAC,CAACjB,SAAS,GAAG,IAAI,CAACA,SAAS;EAC5BiB,CAAC,CAAChB,WAAW,GAAG,IAAI,CAACA,WAAW;EAChCgB,CAAC,CAACf,cAAc,GAAG,IAAI,CAACA,cAAc;EAEtC,OAAOY,WAAW;AACpB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA7B,KAAK,CAACK,SAAS,CAACa,UAAU,GAAG,UAAShB,OAAO,EAAE;EAC7C,IAAI,EAAEA,OAAO,IAAIJ,KAAK,CAACmC,QAAQ,CAAC/B,OAAO,CAAC,CAAC,EACvC,OAAO,IAAI;;EAEb;EACA,MAAMgC,OAAO,GAAGpC,KAAK,CAACqC,IAAI,CAACjC,OAAO,CAAC;EACnC,IAAIkC,MAAM;EAEV,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,OAAO,CAACI,MAAM,EAAE,EAAED,CAAC,EAAE;IACvCD,MAAM,GAAGF,OAAO,CAACG,CAAC,CAAC;;IAEnB;IACA,IAAI,UAAU,IAAI,OAAO,IAAI,CAACD,MAAM,CAAC,EAAE;MACrC,MAAMG,IAAI,GAAGC,KAAK,CAACC,OAAO,CAACvC,OAAO,CAACkC,MAAM,CAAC,CAAC,GACvClC,OAAO,CAACkC,MAAM,CAAC,GACf,CAAClC,OAAO,CAACkC,MAAM,CAAC,CAAC;MACrB,IAAI,CAACA,MAAM,CAAC,CAACM,KAAK,CAAC,IAAI,EAAEH,IAAI,CAAC;IAChC,CAAC,MAAM;MACL,IAAI,CAACrC,OAAO,CAACkC,MAAM,CAAC,GAAGlC,OAAO,CAACkC,MAAM,CAAC;IACxC;EACF;EAEA,OAAO,IAAI;AACb,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;;AAEApC,KAAK,CAACK,SAAS,CAACiB,UAAU,GAAG,SAASA,UAAU,CAACqB,IAAI,EAAE;EACrD,IAAI,CAAC3B,WAAW,GAAG,IAAIhB,KAAK,CAAC4C,UAAU,CAACD,IAAI,CAAC;EAE7C,OAAO,IAAI;AACb,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA3C,KAAK,CAACK,SAAS,CAACwC,SAAS,GAAG,UAASC,KAAK,EAAE;EAC1C,IAAI,CAAC5C,OAAO,CAAC2C,SAAS,GAAGC,KAAK;EAC9B,OAAO,IAAI;AACb,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA9C,KAAK,CAACK,SAAS,CAAC0C,MAAM,GAAG,UAASC,EAAE,EAAE;EACpC,IAAI,CAACtC,WAAW,CAACqC,MAAM,GAAGC,EAAE;EAC5B,OAAO,IAAI;AACb,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAhD,KAAK,CAACK,SAAS,CAAC4C,KAAK,GAAG,YAAW;EACjC,IAAI,CAACC,SAAS,CAACZ,MAAM,EAAE,OAAO,IAAI;EAClC,IAAI,CAAC,IAAI,CAAChC,EAAE,EAAE,IAAI,CAACA,EAAE,GAAG,MAAM;EAE9B,MAAM6C,IAAI,GAAG,OAAOD,SAAS,CAAC,CAAC,CAAC;EAEhC,IAAI,QAAQ,IAAIC,IAAI,EAAE;IACpB,IAAI,CAACrC,KAAK,GAAGoC,SAAS,CAAC,CAAC,CAAC;IAEzB,IAAI,CAAC,KAAKA,SAAS,CAACZ,MAAM,EAAE;MAC1B,IAAI,CAAC5B,WAAW,CAAC,IAAI,CAACI,KAAK,CAAC,GAAGoC,SAAS,CAAC,CAAC,CAAC;IAC7C;IAEA,OAAO,IAAI;EACb;EAEA,IAAI,QAAQ,IAAIC,IAAI,IAAI,CAACX,KAAK,CAACC,OAAO,CAACS,SAAS,CAAC,CAAC,CAAC,CAAC,EAAE;IACpD,OAAO,IAAI,CAACE,KAAK,CAACF,SAAS,CAAC,CAAC,CAAC,CAAC;EACjC;EAEA,MAAM,IAAIG,SAAS,CAAC,iCAAiC,CAAC;AACxD,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEArD,KAAK,CAACK,SAAS,CAACiD,MAAM,GAAG,SAASA,MAAM,CAACC,GAAG,EAAE;EAC5C,IAAI,CAACC,WAAW,CAAC,QAAQ,CAAC;EAC1B,MAAMC,IAAI,GAAG,IAAI,CAAC3C,KAAK;EACvB,IAAI,CAACJ,WAAW,CAAC+C,IAAI,CAAC,GAAGF,GAAG;EAC5B,OAAO,IAAI;AACb,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAvD,KAAK,CAACK,SAAS,CAACqD,EAAE,GAAG,SAASA,EAAE,CAACH,GAAG,EAAE;EACpC,IAAI,CAACC,WAAW,CAAC,IAAI,CAAC;EACtB,MAAMC,IAAI,GAAG,IAAI,CAAC3C,KAAK;EACvB,IAAI,CAACJ,WAAW,CAAC+C,IAAI,CAAC,GAAGF,GAAG;EAC5B,OAAO,IAAI;AACb,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAvD,KAAK,CAACK,SAAS,CAACsD,EAAE,GAAG,SAASA,EAAE,CAACC,KAAK,EAAE;EACtC,MAAMD,EAAE,GAAG,IAAI,CAACjD,WAAW,CAACmD,GAAG,KAAK,IAAI,CAACnD,WAAW,CAACmD,GAAG,GAAG,EAAE,CAAC;EAC9D,IAAI,CAACrB,KAAK,CAACC,OAAO,CAACmB,KAAK,CAAC,EAAEA,KAAK,GAAG,CAACA,KAAK,CAAC;EAC1CD,EAAE,CAACG,IAAI,CAACpB,KAAK,CAACiB,EAAE,EAAEC,KAAK,CAAC;EACxB,OAAO,IAAI;AACb,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA5D,KAAK,CAACK,SAAS,CAAC0D,GAAG,GAAG,SAASA,GAAG,CAACH,KAAK,EAAE;EACxC,MAAMG,GAAG,GAAG,IAAI,CAACrD,WAAW,CAACsD,IAAI,KAAK,IAAI,CAACtD,WAAW,CAACsD,IAAI,GAAG,EAAE,CAAC;EACjE,IAAI,CAACxB,KAAK,CAACC,OAAO,CAACmB,KAAK,CAAC,EAAEA,KAAK,GAAG,CAACA,KAAK,CAAC;EAC1CG,GAAG,CAACD,IAAI,CAACpB,KAAK,CAACqB,GAAG,EAAEH,KAAK,CAAC;EAC1B,OAAO,IAAI;AACb,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA5D,KAAK,CAACK,SAAS,CAAC4D,GAAG,GAAG,SAASA,GAAG,CAACL,KAAK,EAAE;EACxC,MAAMK,GAAG,GAAG,IAAI,CAACvD,WAAW,CAACwD,IAAI,KAAK,IAAI,CAACxD,WAAW,CAACwD,IAAI,GAAG,EAAE,CAAC;EACjE,IAAI,CAAC1B,KAAK,CAACC,OAAO,CAACmB,KAAK,CAAC,EAAEA,KAAK,GAAG,CAACA,KAAK,CAAC;EAC1CK,GAAG,CAACH,IAAI,CAACpB,KAAK,CAACuB,GAAG,EAAEL,KAAK,CAAC;EAC1B,OAAO,IAAI;AACb,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A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C1C7E,GAAG,GAAGoE,eAAe,CAACpE,GAAG,CAAC;IAC1B,IAAI,CAACA,GAAG,EAAE,MAAM,IAAIF,SAAS,CAAC,wBAAwB,GAAGiF,GAAG,GAAG,IAAI,GAAGxF,KAAK,GAAG,IAAI,CAAC;IAEnFkF,IAAI,CAACV,IAAI,CAAC5F,GAAG,CAAC4G,GAAG,EAAE/E,GAAG,CAAC;EACzB,CAAC,CAAC;AACJ;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,CAAC,OAAO,EAAE,MAAM,EAAE,SAAS,EAAE,WAAW,EAAE,SAAS,CAAC,CAACa,OAAO,CAAC,UAAShC,MAAM,EAAE;EAC5EpC,KAAK,CAACK,SAAS,CAAC+B,MAAM,CAAC,GAAG,UAAST,CAAC,EAAE;IACpC,IAAI,CAACgF,SAAS,CAACvE,MAAM,CAAC;IACtB,IAAI,CAAClC,OAAO,CAACkC,MAAM,CAAC,GAAGT,CAAC;IACxB,OAAO,IAAI;EACb,CAAC;AACH,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA3B,KAAK,CAACK,SAAS,CAACkI,OAAO,GAAGvI,KAAK,CAACK,SAAS,CAACmI,SAAS,GAAG,UAASC,EAAE,EAAE;EACjE,IAAI,CAAC9B,SAAS,CAAC,SAAS,CAAC;EACzB,IAAI,CAACzG,OAAO,CAACsI,SAAS,GAAGC,EAAE;EAC3B,OAAO,IAAI;AACb,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAzI,KAAK,CAACK,SAAS,CAACqI,QAAQ,GAAG,YAAW;EACpC,IAAI,CAAC/B,SAAS,CAAC,UAAU,CAAC;EAE1B,IAAI,CAACzG,OAAO,CAACwI,QAAQ,GAAGxF,SAAS,CAACZ,MAAM,GACpC,CAAC,CAACY,SAAS,CAAC,CAAC,CAAC,GACd,IAAI;EAER,OAAO,IAAI;AACb,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAlD,KAAK,CAACK,SAAS,CAACsI,IAAI,GAAG,YAAW;EAChC,IAAI,CAAC,KAAKzF,SAAS,CAACZ,MAAM,EAAE,OAAO,IAAI;EAEvC,IAAI,CAACqE,SAAS,CAAC,MAAM,CAAC;EAEtB,MAAMD,GAAG,GAAGxD,SAAS,CAAC,CAAC,CAAC;EACxB,IAAIpD,KAAK,CAACmC,QAAQ,CAACyE,GAAG,CAAC,EAAE;IACvB,MAAMiC,IAAI,GAAG,IAAI,CAACzI,OAAO,CAACyI,IAAI,KAAK,IAAI,CAACzI,OAAO,CAACyI,IAAI,GAAG,CAAC,CAAC,CAAC;;IAE1D;IACA,KAAK,MAAMC,CAAC,IAAIlC,GAAG,EAAE;MACnBiC,IAAI,CAACC,CAAC,CAAC,GAAGlC,GAAG,CAACkC,CAAC,CAAC;IAClB;IAEA,OAAO,IAAI;EACb;EACA,IAAI,OAAOlC,GAAG,KAAK,QAAQ,EAAE;IAC3B,IAAI,CAACxG,OAAO,CAACyI,IAAI,GAAGjC,GAAG;IACvB,OAAO,IAAI;EACb;EAEA,MAAM,IAAIrD,SAAS,CAAC,gBAAgB,GAAGqD,GAAG,CAAC;AAC7C,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA1G,KAAK,CAACK,SAAS,CAACwI,CAAC,GAAG,SAASA,CAAC,CAACtF,GAAG,EAAE;EAClC,IAAI,CAACrD,OAAO,CAAC2I,CAAC,GAAGtF,GAAG;EACpB,OAAO,IAAI;AACb,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAvD,KAAK,CAACK,SAAS,CAACyI,OAAO,GAAG,UAASnH,CAAC,EAAE;EACpC,IAAI,CAACzB,OAAO,CAAC4I,OAAO,GAAG5F,SAAS,CAACZ,MAAM,GAAG,CAAC,CAACX,CAAC,GAAG,IAAI;EACpD,OAAO,IAAI;AACb,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA3B,KAAK,CAACK,SAAS,CAAC0I,IAAI,GAAG/I,KAAK,CAACK,SAAS,CAAC2I,iBAAiB,GAAG,UAASC,IAAI,EAAE;EACxE,IAAI/F,SAAS,CAACZ,MAAM,GAAG,CAAC,IAAI,CAACtC,KAAK,CAACK,SAAS,CAAC0I,IAAI,CAACG,wBAAwB,EAAE;IAC1EC,OAAO,CAACC,KAAK,CAAC,2IAA2I,CAAC;IAC1JpJ,KAAK,CAACK,SAAS,CAAC0I,IAAI,CAACG,wBAAwB,GAAG,IAAI;EACtD;EACA,IAAI,CAAChJ,OAAO,CAACmJ,cAAc,GAAGvJ,KAAK,CAACwJ,QAAQ,CAACL,IAAI,CAAC;EAClD,OAAO,IAAI;AACb,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;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"},"metadata":{},"sourceType":"script","externalDependencies":[]}