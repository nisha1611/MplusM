{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports._advanceClusterTime = exports.drainTimerQueue = exports.ServerType = exports.TopologyType = exports.STATE_CONNECTED = exports.STATE_CONNECTING = exports.STATE_CLOSED = exports.STATE_CLOSING = void 0;\nconst timers_1 = require(\"timers\");\n// shared state names\nexports.STATE_CLOSING = 'closing';\nexports.STATE_CLOSED = 'closed';\nexports.STATE_CONNECTING = 'connecting';\nexports.STATE_CONNECTED = 'connected';\n/**\r\n * An enumeration of topology types we know about\r\n * @public\r\n */\nexports.TopologyType = Object.freeze({\n  Single: 'Single',\n  ReplicaSetNoPrimary: 'ReplicaSetNoPrimary',\n  ReplicaSetWithPrimary: 'ReplicaSetWithPrimary',\n  Sharded: 'Sharded',\n  Unknown: 'Unknown',\n  LoadBalanced: 'LoadBalanced'\n});\n/**\r\n * An enumeration of server types we know about\r\n * @public\r\n */\nexports.ServerType = Object.freeze({\n  Standalone: 'Standalone',\n  Mongos: 'Mongos',\n  PossiblePrimary: 'PossiblePrimary',\n  RSPrimary: 'RSPrimary',\n  RSSecondary: 'RSSecondary',\n  RSArbiter: 'RSArbiter',\n  RSOther: 'RSOther',\n  RSGhost: 'RSGhost',\n  Unknown: 'Unknown',\n  LoadBalancer: 'LoadBalancer'\n});\n/** @internal */\nfunction drainTimerQueue(queue) {\n  queue.forEach(timers_1.clearTimeout);\n  queue.clear();\n}\nexports.drainTimerQueue = drainTimerQueue;\n/** Shared function to determine clusterTime for a given topology or session */\nfunction _advanceClusterTime(entity, $clusterTime) {\n  if (entity.clusterTime == null) {\n    entity.clusterTime = $clusterTime;\n  } else {\n    if ($clusterTime.clusterTime.greaterThan(entity.clusterTime.clusterTime)) {\n      entity.clusterTime = $clusterTime;\n    }\n  }\n}\nexports._advanceClusterTime = _advanceClusterTime;","map":{"version":3,"mappings":";;;;;;AAAA;AAMA;AACaA,qBAAa,GAAG,SAAS;AACzBA,oBAAY,GAAG,QAAQ;AACvBA,wBAAgB,GAAG,YAAY;AAC/BA,uBAAe,GAAG,WAAW;AAE1C;;;;AAIaA,oBAAY,GAAGC,MAAM,CAACC,MAAM,CAAC;EACxCC,MAAM,EAAE,QAAQ;EAChBC,mBAAmB,EAAE,qBAAqB;EAC1CC,qBAAqB,EAAE,uBAAuB;EAC9CC,OAAO,EAAE,SAAS;EAClBC,OAAO,EAAE,SAAS;EAClBC,YAAY,EAAE;CACN,CAAC;AAKX;;;;AAIaR,kBAAU,GAAGC,MAAM,CAACC,MAAM,CAAC;EACtCO,UAAU,EAAE,YAAY;EACxBC,MAAM,EAAE,QAAQ;EAChBC,eAAe,EAAE,iBAAiB;EAClCC,SAAS,EAAE,WAAW;EACtBC,WAAW,EAAE,aAAa;EAC1BC,SAAS,EAAE,WAAW;EACtBC,OAAO,EAAE,SAAS;EAClBC,OAAO,EAAE,SAAS;EAClBT,OAAO,EAAE,SAAS;EAClBU,YAAY,EAAE;CACN,CAAC;AAQX;AACA,SAAgBC,eAAe,CAACC,KAAiB;EAC/CA,KAAK,CAACC,OAAO,CAACC,qBAAY,CAAC;EAC3BF,KAAK,CAACG,KAAK,EAAE;AACf;AAHAtB;AAcA;AACA,SAAgBuB,mBAAmB,CACjCC,MAAgC,EAChCC,YAAyB;EAEzB,IAAID,MAAM,CAACE,WAAW,IAAI,IAAI,EAAE;IAC9BF,MAAM,CAACE,WAAW,GAAGD,YAAY;GAClC,MAAM;IACL,IAAIA,YAAY,CAACC,WAAW,CAACC,WAAW,CAACH,MAAM,CAACE,WAAW,CAACA,WAAW,CAAC,EAAE;MACxEF,MAAM,CAACE,WAAW,GAAGD,YAAY;;;AAGvC;AAXAzB","names":["exports","Object","freeze","Single","ReplicaSetNoPrimary","ReplicaSetWithPrimary","Sharded","Unknown","LoadBalanced","Standalone","Mongos","PossiblePrimary","RSPrimary","RSSecondary","RSArbiter","RSOther","RSGhost","LoadBalancer","drainTimerQueue","queue","forEach","timers_1","clear","_advanceClusterTime","entity","$clusterTime","clusterTime","greaterThan"],"sources":["C:\\Users\\91930\\Desktop\\Github projects\\Pharmacy Demo\\back-end\\node_modules\\mongodb\\src\\sdam\\common.ts"],"sourcesContent":["import { clearTimeout } from 'timers';\r\n\r\nimport type { Binary, Long, Timestamp } from '../bson';\r\nimport type { ClientSession } from '../sessions';\r\nimport type { Topology } from './topology';\r\n\r\n// shared state names\r\nexport const STATE_CLOSING = 'closing';\r\nexport const STATE_CLOSED = 'closed';\r\nexport const STATE_CONNECTING = 'connecting';\r\nexport const STATE_CONNECTED = 'connected';\r\n\r\n/**\r\n * An enumeration of topology types we know about\r\n * @public\r\n */\r\nexport const TopologyType = Object.freeze({\r\n  Single: 'Single',\r\n  ReplicaSetNoPrimary: 'ReplicaSetNoPrimary',\r\n  ReplicaSetWithPrimary: 'ReplicaSetWithPrimary',\r\n  Sharded: 'Sharded',\r\n  Unknown: 'Unknown',\r\n  LoadBalanced: 'LoadBalanced'\r\n} as const);\r\n\r\n/** @public */\r\nexport type TopologyType = typeof TopologyType[keyof typeof TopologyType];\r\n\r\n/**\r\n * An enumeration of server types we know about\r\n * @public\r\n */\r\nexport const ServerType = Object.freeze({\r\n  Standalone: 'Standalone',\r\n  Mongos: 'Mongos',\r\n  PossiblePrimary: 'PossiblePrimary',\r\n  RSPrimary: 'RSPrimary',\r\n  RSSecondary: 'RSSecondary',\r\n  RSArbiter: 'RSArbiter',\r\n  RSOther: 'RSOther',\r\n  RSGhost: 'RSGhost',\r\n  Unknown: 'Unknown',\r\n  LoadBalancer: 'LoadBalancer'\r\n} as const);\r\n\r\n/** @public */\r\nexport type ServerType = typeof ServerType[keyof typeof ServerType];\r\n\r\n/** @internal */\r\nexport type TimerQueue = Set<NodeJS.Timeout>;\r\n\r\n/** @internal */\r\nexport function drainTimerQueue(queue: TimerQueue): void {\r\n  queue.forEach(clearTimeout);\r\n  queue.clear();\r\n}\r\n\r\n/** @public */\r\nexport interface ClusterTime {\r\n  clusterTime: Timestamp;\r\n  signature: {\r\n    hash: Binary;\r\n    keyId: Long;\r\n  };\r\n}\r\n\r\n/** Shared function to determine clusterTime for a given topology or session */\r\nexport function _advanceClusterTime(\r\n  entity: Topology | ClientSession,\r\n  $clusterTime: ClusterTime\r\n): void {\r\n  if (entity.clusterTime == null) {\r\n    entity.clusterTime = $clusterTime;\r\n  } else {\r\n    if ($clusterTime.clusterTime.greaterThan(entity.clusterTime.clusterTime)) {\r\n      entity.clusterTime = $clusterTime;\r\n    }\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}