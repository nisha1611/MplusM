{"ast":null,"code":"import { fromArrayBuffer, fromString } from \"@aws-sdk/util-buffer-from\";\nimport { Buffer } from \"buffer\";\nimport { createHash, createHmac } from \"crypto\";\nexport class Hash {\n  constructor(algorithmIdentifier, secret) {\n    this.hash = secret ? createHmac(algorithmIdentifier, castSourceData(secret)) : createHash(algorithmIdentifier);\n  }\n  update(toHash, encoding) {\n    this.hash.update(castSourceData(toHash, encoding));\n  }\n  digest() {\n    return Promise.resolve(this.hash.digest());\n  }\n}\nfunction castSourceData(toCast, encoding) {\n  if (Buffer.isBuffer(toCast)) {\n    return toCast;\n  }\n  if (typeof toCast === \"string\") {\n    return fromString(toCast, encoding);\n  }\n  if (ArrayBuffer.isView(toCast)) {\n    return fromArrayBuffer(toCast.buffer, toCast.byteOffset, toCast.byteLength);\n  }\n  return fromArrayBuffer(toCast);\n}","map":{"version":3,"names":["fromArrayBuffer","fromString","Buffer","createHash","createHmac","Hash","constructor","algorithmIdentifier","secret","hash","castSourceData","update","toHash","encoding","digest","Promise","resolve","toCast","isBuffer","ArrayBuffer","isView","buffer","byteOffset","byteLength"],"sources":["C:/Users/91930/Desktop/Github projects/Pharmacy Demo/back-end/node_modules/@aws-sdk/hash-node/dist-es/index.js"],"sourcesContent":["import { fromArrayBuffer, fromString } from \"@aws-sdk/util-buffer-from\";\r\nimport { Buffer } from \"buffer\";\r\nimport { createHash, createHmac } from \"crypto\";\r\nexport class Hash {\r\n    constructor(algorithmIdentifier, secret) {\r\n        this.hash = secret ? createHmac(algorithmIdentifier, castSourceData(secret)) : createHash(algorithmIdentifier);\r\n    }\r\n    update(toHash, encoding) {\r\n        this.hash.update(castSourceData(toHash, encoding));\r\n    }\r\n    digest() {\r\n        return Promise.resolve(this.hash.digest());\r\n    }\r\n}\r\nfunction castSourceData(toCast, encoding) {\r\n    if (Buffer.isBuffer(toCast)) {\r\n        return toCast;\r\n    }\r\n    if (typeof toCast === \"string\") {\r\n        return fromString(toCast, encoding);\r\n    }\r\n    if (ArrayBuffer.isView(toCast)) {\r\n        return fromArrayBuffer(toCast.buffer, toCast.byteOffset, toCast.byteLength);\r\n    }\r\n    return fromArrayBuffer(toCast);\r\n}\r\n"],"mappings":"AAAA,SAASA,eAAe,EAAEC,UAAU,QAAQ,2BAA2B;AACvE,SAASC,MAAM,QAAQ,QAAQ;AAC/B,SAASC,UAAU,EAAEC,UAAU,QAAQ,QAAQ;AAC/C,OAAO,MAAMC,IAAI,CAAC;EACdC,WAAW,CAACC,mBAAmB,EAAEC,MAAM,EAAE;IACrC,IAAI,CAACC,IAAI,GAAGD,MAAM,GAAGJ,UAAU,CAACG,mBAAmB,EAAEG,cAAc,CAACF,MAAM,CAAC,CAAC,GAAGL,UAAU,CAACI,mBAAmB,CAAC;EAClH;EACAI,MAAM,CAACC,MAAM,EAAEC,QAAQ,EAAE;IACrB,IAAI,CAACJ,IAAI,CAACE,MAAM,CAACD,cAAc,CAACE,MAAM,EAAEC,QAAQ,CAAC,CAAC;EACtD;EACAC,MAAM,GAAG;IACL,OAAOC,OAAO,CAACC,OAAO,CAAC,IAAI,CAACP,IAAI,CAACK,MAAM,EAAE,CAAC;EAC9C;AACJ;AACA,SAASJ,cAAc,CAACO,MAAM,EAAEJ,QAAQ,EAAE;EACtC,IAAIX,MAAM,CAACgB,QAAQ,CAACD,MAAM,CAAC,EAAE;IACzB,OAAOA,MAAM;EACjB;EACA,IAAI,OAAOA,MAAM,KAAK,QAAQ,EAAE;IAC5B,OAAOhB,UAAU,CAACgB,MAAM,EAAEJ,QAAQ,CAAC;EACvC;EACA,IAAIM,WAAW,CAACC,MAAM,CAACH,MAAM,CAAC,EAAE;IAC5B,OAAOjB,eAAe,CAACiB,MAAM,CAACI,MAAM,EAAEJ,MAAM,CAACK,UAAU,EAAEL,MAAM,CAACM,UAAU,CAAC;EAC/E;EACA,OAAOvB,eAAe,CAACiB,MAAM,CAAC;AAClC"},"metadata":{},"sourceType":"module","externalDependencies":[]}