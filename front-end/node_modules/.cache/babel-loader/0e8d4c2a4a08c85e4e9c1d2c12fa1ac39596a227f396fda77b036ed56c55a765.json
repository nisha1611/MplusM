{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.resolveDefaultsModeConfig = void 0;\nconst config_resolver_1 = require(\"@aws-sdk/config-resolver\");\nconst credential_provider_imds_1 = require(\"@aws-sdk/credential-provider-imds\");\nconst node_config_provider_1 = require(\"@aws-sdk/node-config-provider\");\nconst property_provider_1 = require(\"@aws-sdk/property-provider\");\nconst constants_1 = require(\"./constants\");\nconst defaultsModeConfig_1 = require(\"./defaultsModeConfig\");\nconst resolveDefaultsModeConfig = function () {\n  let {\n    region = (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_REGION_CONFIG_OPTIONS),\n    defaultsMode = (0, node_config_provider_1.loadConfig)(defaultsModeConfig_1.NODE_DEFAULTS_MODE_CONFIG_OPTIONS)\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return (0, property_provider_1.memoize)(async () => {\n    const mode = typeof defaultsMode === \"function\" ? await defaultsMode() : defaultsMode;\n    switch (mode === null || mode === void 0 ? void 0 : mode.toLowerCase()) {\n      case \"auto\":\n        return resolveNodeDefaultsModeAuto(region);\n      case \"in-region\":\n      case \"cross-region\":\n      case \"mobile\":\n      case \"standard\":\n      case \"legacy\":\n        return Promise.resolve(mode === null || mode === void 0 ? void 0 : mode.toLocaleLowerCase());\n      case undefined:\n        return Promise.resolve(\"legacy\");\n      default:\n        throw new Error(`Invalid parameter for \"defaultsMode\", expect ${constants_1.DEFAULTS_MODE_OPTIONS.join(\", \")}, got ${mode}`);\n    }\n  });\n};\nexports.resolveDefaultsModeConfig = resolveDefaultsModeConfig;\nconst resolveNodeDefaultsModeAuto = async clientRegion => {\n  if (clientRegion) {\n    const resolvedRegion = typeof clientRegion === \"function\" ? await clientRegion() : clientRegion;\n    const inferredRegion = await inferPhysicalRegion();\n    if (!inferredRegion) {\n      return \"standard\";\n    }\n    if (resolvedRegion === inferredRegion) {\n      return \"in-region\";\n    } else {\n      return \"cross-region\";\n    }\n  }\n  return \"standard\";\n};\nconst inferPhysicalRegion = async () => {\n  var _a;\n  if (process.env[constants_1.AWS_EXECUTION_ENV] && (process.env[constants_1.AWS_REGION_ENV] || process.env[constants_1.AWS_DEFAULT_REGION_ENV])) {\n    return (_a = process.env[constants_1.AWS_REGION_ENV]) !== null && _a !== void 0 ? _a : process.env[constants_1.AWS_DEFAULT_REGION_ENV];\n  }\n  if (!process.env[constants_1.ENV_IMDS_DISABLED]) {\n    try {\n      const endpoint = await (0, credential_provider_imds_1.getInstanceMetadataEndpoint)();\n      return (await (0, credential_provider_imds_1.httpRequest)({\n        ...endpoint,\n        path: constants_1.IMDS_REGION_PATH\n      })).toString();\n    } catch (e) {}\n  }\n};","map":{"version":3,"names":["Object","defineProperty","exports","value","resolveDefaultsModeConfig","config_resolver_1","require","credential_provider_imds_1","node_config_provider_1","property_provider_1","constants_1","defaultsModeConfig_1","region","loadConfig","NODE_REGION_CONFIG_OPTIONS","defaultsMode","NODE_DEFAULTS_MODE_CONFIG_OPTIONS","memoize","mode","toLowerCase","resolveNodeDefaultsModeAuto","Promise","resolve","toLocaleLowerCase","undefined","Error","DEFAULTS_MODE_OPTIONS","join","clientRegion","resolvedRegion","inferredRegion","inferPhysicalRegion","_a","process","env","AWS_EXECUTION_ENV","AWS_REGION_ENV","AWS_DEFAULT_REGION_ENV","ENV_IMDS_DISABLED","endpoint","getInstanceMetadataEndpoint","httpRequest","path","IMDS_REGION_PATH","toString","e"],"sources":["C:/Users/91930/Desktop/Github projects/Pharmacy Demo/back-end/node_modules/@aws-sdk/util-defaults-mode-node/dist-cjs/resolveDefaultsModeConfig.js"],"sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.resolveDefaultsModeConfig = void 0;\r\nconst config_resolver_1 = require(\"@aws-sdk/config-resolver\");\r\nconst credential_provider_imds_1 = require(\"@aws-sdk/credential-provider-imds\");\r\nconst node_config_provider_1 = require(\"@aws-sdk/node-config-provider\");\r\nconst property_provider_1 = require(\"@aws-sdk/property-provider\");\r\nconst constants_1 = require(\"./constants\");\r\nconst defaultsModeConfig_1 = require(\"./defaultsModeConfig\");\r\nconst resolveDefaultsModeConfig = ({ region = (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_REGION_CONFIG_OPTIONS), defaultsMode = (0, node_config_provider_1.loadConfig)(defaultsModeConfig_1.NODE_DEFAULTS_MODE_CONFIG_OPTIONS), } = {}) => (0, property_provider_1.memoize)(async () => {\r\n    const mode = typeof defaultsMode === \"function\" ? await defaultsMode() : defaultsMode;\r\n    switch (mode === null || mode === void 0 ? void 0 : mode.toLowerCase()) {\r\n        case \"auto\":\r\n            return resolveNodeDefaultsModeAuto(region);\r\n        case \"in-region\":\r\n        case \"cross-region\":\r\n        case \"mobile\":\r\n        case \"standard\":\r\n        case \"legacy\":\r\n            return Promise.resolve(mode === null || mode === void 0 ? void 0 : mode.toLocaleLowerCase());\r\n        case undefined:\r\n            return Promise.resolve(\"legacy\");\r\n        default:\r\n            throw new Error(`Invalid parameter for \"defaultsMode\", expect ${constants_1.DEFAULTS_MODE_OPTIONS.join(\", \")}, got ${mode}`);\r\n    }\r\n});\r\nexports.resolveDefaultsModeConfig = resolveDefaultsModeConfig;\r\nconst resolveNodeDefaultsModeAuto = async (clientRegion) => {\r\n    if (clientRegion) {\r\n        const resolvedRegion = typeof clientRegion === \"function\" ? await clientRegion() : clientRegion;\r\n        const inferredRegion = await inferPhysicalRegion();\r\n        if (!inferredRegion) {\r\n            return \"standard\";\r\n        }\r\n        if (resolvedRegion === inferredRegion) {\r\n            return \"in-region\";\r\n        }\r\n        else {\r\n            return \"cross-region\";\r\n        }\r\n    }\r\n    return \"standard\";\r\n};\r\nconst inferPhysicalRegion = async () => {\r\n    var _a;\r\n    if (process.env[constants_1.AWS_EXECUTION_ENV] && (process.env[constants_1.AWS_REGION_ENV] || process.env[constants_1.AWS_DEFAULT_REGION_ENV])) {\r\n        return (_a = process.env[constants_1.AWS_REGION_ENV]) !== null && _a !== void 0 ? _a : process.env[constants_1.AWS_DEFAULT_REGION_ENV];\r\n    }\r\n    if (!process.env[constants_1.ENV_IMDS_DISABLED]) {\r\n        try {\r\n            const endpoint = await (0, credential_provider_imds_1.getInstanceMetadataEndpoint)();\r\n            return (await (0, credential_provider_imds_1.httpRequest)({ ...endpoint, path: constants_1.IMDS_REGION_PATH })).toString();\r\n        }\r\n        catch (e) {\r\n        }\r\n    }\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}