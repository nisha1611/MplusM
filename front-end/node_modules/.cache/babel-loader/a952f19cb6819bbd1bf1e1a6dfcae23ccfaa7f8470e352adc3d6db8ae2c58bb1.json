{"ast":null,"code":"import { toHex } from \"@aws-sdk/util-hex-encoding\";\nimport { KEY_TYPE_IDENTIFIER, MAX_CACHE_SIZE } from \"./constants\";\nconst signingKeyCache = {};\nconst cacheQueue = [];\nexport const createScope = (shortDate, region, service) => `${shortDate}/${region}/${service}/${KEY_TYPE_IDENTIFIER}`;\nexport const getSigningKey = async (sha256Constructor, credentials, shortDate, region, service) => {\n  const credsHash = await hmac(sha256Constructor, credentials.secretAccessKey, credentials.accessKeyId);\n  const cacheKey = `${shortDate}:${region}:${service}:${toHex(credsHash)}:${credentials.sessionToken}`;\n  if (cacheKey in signingKeyCache) {\n    return signingKeyCache[cacheKey];\n  }\n  cacheQueue.push(cacheKey);\n  while (cacheQueue.length > MAX_CACHE_SIZE) {\n    delete signingKeyCache[cacheQueue.shift()];\n  }\n  let key = `AWS4${credentials.secretAccessKey}`;\n  for (const signable of [shortDate, region, service, KEY_TYPE_IDENTIFIER]) {\n    key = await hmac(sha256Constructor, key, signable);\n  }\n  return signingKeyCache[cacheKey] = key;\n};\nexport const clearCredentialCache = () => {\n  cacheQueue.length = 0;\n  Object.keys(signingKeyCache).forEach(cacheKey => {\n    delete signingKeyCache[cacheKey];\n  });\n};\nconst hmac = (ctor, secret, data) => {\n  const hash = new ctor(secret);\n  hash.update(data);\n  return hash.digest();\n};","map":{"version":3,"names":["toHex","KEY_TYPE_IDENTIFIER","MAX_CACHE_SIZE","signingKeyCache","cacheQueue","createScope","shortDate","region","service","getSigningKey","sha256Constructor","credentials","credsHash","hmac","secretAccessKey","accessKeyId","cacheKey","sessionToken","push","length","shift","key","signable","clearCredentialCache","Object","keys","forEach","ctor","secret","data","hash","update","digest"],"sources":["C:/Users/91930/Desktop/Github projects/Pharmacy Demo/back-end/node_modules/@aws-sdk/signature-v4/dist-es/credentialDerivation.js"],"sourcesContent":["import { toHex } from \"@aws-sdk/util-hex-encoding\";\r\nimport { KEY_TYPE_IDENTIFIER, MAX_CACHE_SIZE } from \"./constants\";\r\nconst signingKeyCache = {};\r\nconst cacheQueue = [];\r\nexport const createScope = (shortDate, region, service) => `${shortDate}/${region}/${service}/${KEY_TYPE_IDENTIFIER}`;\r\nexport const getSigningKey = async (sha256Constructor, credentials, shortDate, region, service) => {\r\n    const credsHash = await hmac(sha256Constructor, credentials.secretAccessKey, credentials.accessKeyId);\r\n    const cacheKey = `${shortDate}:${region}:${service}:${toHex(credsHash)}:${credentials.sessionToken}`;\r\n    if (cacheKey in signingKeyCache) {\r\n        return signingKeyCache[cacheKey];\r\n    }\r\n    cacheQueue.push(cacheKey);\r\n    while (cacheQueue.length > MAX_CACHE_SIZE) {\r\n        delete signingKeyCache[cacheQueue.shift()];\r\n    }\r\n    let key = `AWS4${credentials.secretAccessKey}`;\r\n    for (const signable of [shortDate, region, service, KEY_TYPE_IDENTIFIER]) {\r\n        key = await hmac(sha256Constructor, key, signable);\r\n    }\r\n    return (signingKeyCache[cacheKey] = key);\r\n};\r\nexport const clearCredentialCache = () => {\r\n    cacheQueue.length = 0;\r\n    Object.keys(signingKeyCache).forEach((cacheKey) => {\r\n        delete signingKeyCache[cacheKey];\r\n    });\r\n};\r\nconst hmac = (ctor, secret, data) => {\r\n    const hash = new ctor(secret);\r\n    hash.update(data);\r\n    return hash.digest();\r\n};\r\n"],"mappings":"AAAA,SAASA,KAAK,QAAQ,4BAA4B;AAClD,SAASC,mBAAmB,EAAEC,cAAc,QAAQ,aAAa;AACjE,MAAMC,eAAe,GAAG,CAAC,CAAC;AAC1B,MAAMC,UAAU,GAAG,EAAE;AACrB,OAAO,MAAMC,WAAW,GAAG,CAACC,SAAS,EAAEC,MAAM,EAAEC,OAAO,KAAM,GAAEF,SAAU,IAAGC,MAAO,IAAGC,OAAQ,IAAGP,mBAAoB,EAAC;AACrH,OAAO,MAAMQ,aAAa,GAAG,OAAOC,iBAAiB,EAAEC,WAAW,EAAEL,SAAS,EAAEC,MAAM,EAAEC,OAAO,KAAK;EAC/F,MAAMI,SAAS,GAAG,MAAMC,IAAI,CAACH,iBAAiB,EAAEC,WAAW,CAACG,eAAe,EAAEH,WAAW,CAACI,WAAW,CAAC;EACrG,MAAMC,QAAQ,GAAI,GAAEV,SAAU,IAAGC,MAAO,IAAGC,OAAQ,IAAGR,KAAK,CAACY,SAAS,CAAE,IAAGD,WAAW,CAACM,YAAa,EAAC;EACpG,IAAID,QAAQ,IAAIb,eAAe,EAAE;IAC7B,OAAOA,eAAe,CAACa,QAAQ,CAAC;EACpC;EACAZ,UAAU,CAACc,IAAI,CAACF,QAAQ,CAAC;EACzB,OAAOZ,UAAU,CAACe,MAAM,GAAGjB,cAAc,EAAE;IACvC,OAAOC,eAAe,CAACC,UAAU,CAACgB,KAAK,EAAE,CAAC;EAC9C;EACA,IAAIC,GAAG,GAAI,OAAMV,WAAW,CAACG,eAAgB,EAAC;EAC9C,KAAK,MAAMQ,QAAQ,IAAI,CAAChB,SAAS,EAAEC,MAAM,EAAEC,OAAO,EAAEP,mBAAmB,CAAC,EAAE;IACtEoB,GAAG,GAAG,MAAMR,IAAI,CAACH,iBAAiB,EAAEW,GAAG,EAAEC,QAAQ,CAAC;EACtD;EACA,OAAQnB,eAAe,CAACa,QAAQ,CAAC,GAAGK,GAAG;AAC3C,CAAC;AACD,OAAO,MAAME,oBAAoB,GAAG,MAAM;EACtCnB,UAAU,CAACe,MAAM,GAAG,CAAC;EACrBK,MAAM,CAACC,IAAI,CAACtB,eAAe,CAAC,CAACuB,OAAO,CAAEV,QAAQ,IAAK;IAC/C,OAAOb,eAAe,CAACa,QAAQ,CAAC;EACpC,CAAC,CAAC;AACN,CAAC;AACD,MAAMH,IAAI,GAAG,CAACc,IAAI,EAAEC,MAAM,EAAEC,IAAI,KAAK;EACjC,MAAMC,IAAI,GAAG,IAAIH,IAAI,CAACC,MAAM,CAAC;EAC7BE,IAAI,CAACC,MAAM,CAACF,IAAI,CAAC;EACjB,OAAOC,IAAI,CAACE,MAAM,EAAE;AACxB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}