{"ast":null,"code":"import { NODE_REGION_CONFIG_OPTIONS } from \"@aws-sdk/config-resolver\";\nimport { getInstanceMetadataEndpoint, httpRequest } from \"@aws-sdk/credential-provider-imds\";\nimport { loadConfig } from \"@aws-sdk/node-config-provider\";\nimport { memoize } from \"@aws-sdk/property-provider\";\nimport { AWS_DEFAULT_REGION_ENV, AWS_EXECUTION_ENV, AWS_REGION_ENV, DEFAULTS_MODE_OPTIONS, ENV_IMDS_DISABLED, IMDS_REGION_PATH } from \"./constants\";\nimport { NODE_DEFAULTS_MODE_CONFIG_OPTIONS } from \"./defaultsModeConfig\";\nexport const resolveDefaultsModeConfig = function () {\n  let {\n    region = loadConfig(NODE_REGION_CONFIG_OPTIONS),\n    defaultsMode = loadConfig(NODE_DEFAULTS_MODE_CONFIG_OPTIONS)\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return memoize(async () => {\n    const mode = typeof defaultsMode === \"function\" ? await defaultsMode() : defaultsMode;\n    switch (mode?.toLowerCase()) {\n      case \"auto\":\n        return resolveNodeDefaultsModeAuto(region);\n      case \"in-region\":\n      case \"cross-region\":\n      case \"mobile\":\n      case \"standard\":\n      case \"legacy\":\n        return Promise.resolve(mode?.toLocaleLowerCase());\n      case undefined:\n        return Promise.resolve(\"legacy\");\n      default:\n        throw new Error(`Invalid parameter for \"defaultsMode\", expect ${DEFAULTS_MODE_OPTIONS.join(\", \")}, got ${mode}`);\n    }\n  });\n};\nconst resolveNodeDefaultsModeAuto = async clientRegion => {\n  if (clientRegion) {\n    const resolvedRegion = typeof clientRegion === \"function\" ? await clientRegion() : clientRegion;\n    const inferredRegion = await inferPhysicalRegion();\n    if (!inferredRegion) {\n      return \"standard\";\n    }\n    if (resolvedRegion === inferredRegion) {\n      return \"in-region\";\n    } else {\n      return \"cross-region\";\n    }\n  }\n  return \"standard\";\n};\nconst inferPhysicalRegion = async () => {\n  if (process.env[AWS_EXECUTION_ENV] && (process.env[AWS_REGION_ENV] || process.env[AWS_DEFAULT_REGION_ENV])) {\n    return process.env[AWS_REGION_ENV] ?? process.env[AWS_DEFAULT_REGION_ENV];\n  }\n  if (!process.env[ENV_IMDS_DISABLED]) {\n    try {\n      const endpoint = await getInstanceMetadataEndpoint();\n      return (await httpRequest({\n        ...endpoint,\n        path: IMDS_REGION_PATH\n      })).toString();\n    } catch (e) {}\n  }\n};","map":{"version":3,"names":["NODE_REGION_CONFIG_OPTIONS","getInstanceMetadataEndpoint","httpRequest","loadConfig","memoize","AWS_DEFAULT_REGION_ENV","AWS_EXECUTION_ENV","AWS_REGION_ENV","DEFAULTS_MODE_OPTIONS","ENV_IMDS_DISABLED","IMDS_REGION_PATH","NODE_DEFAULTS_MODE_CONFIG_OPTIONS","resolveDefaultsModeConfig","region","defaultsMode","mode","toLowerCase","resolveNodeDefaultsModeAuto","Promise","resolve","toLocaleLowerCase","undefined","Error","join","clientRegion","resolvedRegion","inferredRegion","inferPhysicalRegion","process","env","endpoint","path","toString","e"],"sources":["C:/Users/91930/Desktop/Github projects/Pharmacy Demo/back-end/node_modules/@aws-sdk/util-defaults-mode-node/dist-es/resolveDefaultsModeConfig.js"],"sourcesContent":["import { NODE_REGION_CONFIG_OPTIONS } from \"@aws-sdk/config-resolver\";\r\nimport { getInstanceMetadataEndpoint, httpRequest } from \"@aws-sdk/credential-provider-imds\";\r\nimport { loadConfig } from \"@aws-sdk/node-config-provider\";\r\nimport { memoize } from \"@aws-sdk/property-provider\";\r\nimport { AWS_DEFAULT_REGION_ENV, AWS_EXECUTION_ENV, AWS_REGION_ENV, DEFAULTS_MODE_OPTIONS, ENV_IMDS_DISABLED, IMDS_REGION_PATH, } from \"./constants\";\r\nimport { NODE_DEFAULTS_MODE_CONFIG_OPTIONS } from \"./defaultsModeConfig\";\r\nexport const resolveDefaultsModeConfig = ({ region = loadConfig(NODE_REGION_CONFIG_OPTIONS), defaultsMode = loadConfig(NODE_DEFAULTS_MODE_CONFIG_OPTIONS), } = {}) => memoize(async () => {\r\n    const mode = typeof defaultsMode === \"function\" ? await defaultsMode() : defaultsMode;\r\n    switch (mode?.toLowerCase()) {\r\n        case \"auto\":\r\n            return resolveNodeDefaultsModeAuto(region);\r\n        case \"in-region\":\r\n        case \"cross-region\":\r\n        case \"mobile\":\r\n        case \"standard\":\r\n        case \"legacy\":\r\n            return Promise.resolve(mode?.toLocaleLowerCase());\r\n        case undefined:\r\n            return Promise.resolve(\"legacy\");\r\n        default:\r\n            throw new Error(`Invalid parameter for \"defaultsMode\", expect ${DEFAULTS_MODE_OPTIONS.join(\", \")}, got ${mode}`);\r\n    }\r\n});\r\nconst resolveNodeDefaultsModeAuto = async (clientRegion) => {\r\n    if (clientRegion) {\r\n        const resolvedRegion = typeof clientRegion === \"function\" ? await clientRegion() : clientRegion;\r\n        const inferredRegion = await inferPhysicalRegion();\r\n        if (!inferredRegion) {\r\n            return \"standard\";\r\n        }\r\n        if (resolvedRegion === inferredRegion) {\r\n            return \"in-region\";\r\n        }\r\n        else {\r\n            return \"cross-region\";\r\n        }\r\n    }\r\n    return \"standard\";\r\n};\r\nconst inferPhysicalRegion = async () => {\r\n    if (process.env[AWS_EXECUTION_ENV] && (process.env[AWS_REGION_ENV] || process.env[AWS_DEFAULT_REGION_ENV])) {\r\n        return process.env[AWS_REGION_ENV] ?? process.env[AWS_DEFAULT_REGION_ENV];\r\n    }\r\n    if (!process.env[ENV_IMDS_DISABLED]) {\r\n        try {\r\n            const endpoint = await getInstanceMetadataEndpoint();\r\n            return (await httpRequest({ ...endpoint, path: IMDS_REGION_PATH })).toString();\r\n        }\r\n        catch (e) {\r\n        }\r\n    }\r\n};\r\n"],"mappings":"AAAA,SAASA,0BAA0B,QAAQ,0BAA0B;AACrE,SAASC,2BAA2B,EAAEC,WAAW,QAAQ,mCAAmC;AAC5F,SAASC,UAAU,QAAQ,+BAA+B;AAC1D,SAASC,OAAO,QAAQ,4BAA4B;AACpD,SAASC,sBAAsB,EAAEC,iBAAiB,EAAEC,cAAc,EAAEC,qBAAqB,EAAEC,iBAAiB,EAAEC,gBAAgB,QAAS,aAAa;AACpJ,SAASC,iCAAiC,QAAQ,sBAAsB;AACxE,OAAO,MAAMC,yBAAyB,GAAG;EAAA,IAAC;IAAEC,MAAM,GAAGV,UAAU,CAACH,0BAA0B,CAAC;IAAEc,YAAY,GAAGX,UAAU,CAACQ,iCAAiC;EAAG,CAAC,uEAAG,CAAC,CAAC;EAAA,OAAKP,OAAO,CAAC,YAAY;IACtL,MAAMW,IAAI,GAAG,OAAOD,YAAY,KAAK,UAAU,GAAG,MAAMA,YAAY,EAAE,GAAGA,YAAY;IACrF,QAAQC,IAAI,EAAEC,WAAW,EAAE;MACvB,KAAK,MAAM;QACP,OAAOC,2BAA2B,CAACJ,MAAM,CAAC;MAC9C,KAAK,WAAW;MAChB,KAAK,cAAc;MACnB,KAAK,QAAQ;MACb,KAAK,UAAU;MACf,KAAK,QAAQ;QACT,OAAOK,OAAO,CAACC,OAAO,CAACJ,IAAI,EAAEK,iBAAiB,EAAE,CAAC;MACrD,KAAKC,SAAS;QACV,OAAOH,OAAO,CAACC,OAAO,CAAC,QAAQ,CAAC;MACpC;QACI,MAAM,IAAIG,KAAK,CAAE,gDAA+Cd,qBAAqB,CAACe,IAAI,CAAC,IAAI,CAAE,SAAQR,IAAK,EAAC,CAAC;IAAC;EAE7H,CAAC,CAAC;AAAA;AACF,MAAME,2BAA2B,GAAG,MAAOO,YAAY,IAAK;EACxD,IAAIA,YAAY,EAAE;IACd,MAAMC,cAAc,GAAG,OAAOD,YAAY,KAAK,UAAU,GAAG,MAAMA,YAAY,EAAE,GAAGA,YAAY;IAC/F,MAAME,cAAc,GAAG,MAAMC,mBAAmB,EAAE;IAClD,IAAI,CAACD,cAAc,EAAE;MACjB,OAAO,UAAU;IACrB;IACA,IAAID,cAAc,KAAKC,cAAc,EAAE;MACnC,OAAO,WAAW;IACtB,CAAC,MACI;MACD,OAAO,cAAc;IACzB;EACJ;EACA,OAAO,UAAU;AACrB,CAAC;AACD,MAAMC,mBAAmB,GAAG,YAAY;EACpC,IAAIC,OAAO,CAACC,GAAG,CAACvB,iBAAiB,CAAC,KAAKsB,OAAO,CAACC,GAAG,CAACtB,cAAc,CAAC,IAAIqB,OAAO,CAACC,GAAG,CAACxB,sBAAsB,CAAC,CAAC,EAAE;IACxG,OAAOuB,OAAO,CAACC,GAAG,CAACtB,cAAc,CAAC,IAAIqB,OAAO,CAACC,GAAG,CAACxB,sBAAsB,CAAC;EAC7E;EACA,IAAI,CAACuB,OAAO,CAACC,GAAG,CAACpB,iBAAiB,CAAC,EAAE;IACjC,IAAI;MACA,MAAMqB,QAAQ,GAAG,MAAM7B,2BAA2B,EAAE;MACpD,OAAO,CAAC,MAAMC,WAAW,CAAC;QAAE,GAAG4B,QAAQ;QAAEC,IAAI,EAAErB;MAAiB,CAAC,CAAC,EAAEsB,QAAQ,EAAE;IAClF,CAAC,CACD,OAAOC,CAAC,EAAE,CACV;EACJ;AACJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}