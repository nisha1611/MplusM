{"ast":null,"code":"/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Sergey Melyukov @smelukov\r\n*/\n\n\"use strict\";\n\nconst InnerGraph = require(\"./optimize/InnerGraph\");\n\n/** @typedef {import(\"./Compiler\")} Compiler */\n/** @typedef {import(\"./javascript/JavascriptParser\")} JavascriptParser */\n\nclass JavascriptMetaInfoPlugin {\n  /**\r\n   * Apply the plugin\r\n   * @param {Compiler} compiler the compiler instance\r\n   * @returns {void}\r\n   */\n  apply(compiler) {\n    compiler.hooks.compilation.tap(\"JavascriptMetaInfoPlugin\", (compilation, _ref) => {\n      let {\n        normalModuleFactory\n      } = _ref;\n      /**\r\n       * @param {JavascriptParser} parser the parser\r\n       * @returns {void}\r\n       */\n      const handler = parser => {\n        parser.hooks.call.for(\"eval\").tap(\"JavascriptMetaInfoPlugin\", () => {\n          parser.state.module.buildInfo.moduleConcatenationBailout = \"eval()\";\n          parser.state.module.buildInfo.usingEval = true;\n          const currentSymbol = InnerGraph.getTopLevelSymbol(parser.state);\n          if (currentSymbol) {\n            InnerGraph.addUsage(parser.state, null, currentSymbol);\n          } else {\n            InnerGraph.bailout(parser.state);\n          }\n        });\n        parser.hooks.finish.tap(\"JavascriptMetaInfoPlugin\", () => {\n          let topLevelDeclarations = parser.state.module.buildInfo.topLevelDeclarations;\n          if (topLevelDeclarations === undefined) {\n            topLevelDeclarations = parser.state.module.buildInfo.topLevelDeclarations = new Set();\n          }\n          for (const name of parser.scope.definitions.asSet()) {\n            const freeInfo = parser.getFreeInfoFromVariable(name);\n            if (freeInfo === undefined) {\n              topLevelDeclarations.add(name);\n            }\n          }\n        });\n      };\n      normalModuleFactory.hooks.parser.for(\"javascript/auto\").tap(\"JavascriptMetaInfoPlugin\", handler);\n      normalModuleFactory.hooks.parser.for(\"javascript/dynamic\").tap(\"JavascriptMetaInfoPlugin\", handler);\n      normalModuleFactory.hooks.parser.for(\"javascript/esm\").tap(\"JavascriptMetaInfoPlugin\", handler);\n    });\n  }\n}\nmodule.exports = JavascriptMetaInfoPlugin;","map":{"version":3,"names":["InnerGraph","require","JavascriptMetaInfoPlugin","apply","compiler","hooks","compilation","tap","normalModuleFactory","handler","parser","call","for","state","module","buildInfo","moduleConcatenationBailout","usingEval","currentSymbol","getTopLevelSymbol","addUsage","bailout","finish","topLevelDeclarations","undefined","Set","name","scope","definitions","asSet","freeInfo","getFreeInfoFromVariable","add","exports"],"sources":["C:/Users/91930/Desktop/Github projects/Pharmacy Demo/front-end/node_modules/webpack/lib/JavascriptMetaInfoPlugin.js"],"sourcesContent":["/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Sergey Melyukov @smelukov\r\n*/\r\n\r\n\"use strict\";\r\n\r\nconst InnerGraph = require(\"./optimize/InnerGraph\");\r\n\r\n/** @typedef {import(\"./Compiler\")} Compiler */\r\n/** @typedef {import(\"./javascript/JavascriptParser\")} JavascriptParser */\r\n\r\nclass JavascriptMetaInfoPlugin {\r\n\t/**\r\n\t * Apply the plugin\r\n\t * @param {Compiler} compiler the compiler instance\r\n\t * @returns {void}\r\n\t */\r\n\tapply(compiler) {\r\n\t\tcompiler.hooks.compilation.tap(\r\n\t\t\t\"JavascriptMetaInfoPlugin\",\r\n\t\t\t(compilation, { normalModuleFactory }) => {\r\n\t\t\t\t/**\r\n\t\t\t\t * @param {JavascriptParser} parser the parser\r\n\t\t\t\t * @returns {void}\r\n\t\t\t\t */\r\n\t\t\t\tconst handler = parser => {\r\n\t\t\t\t\tparser.hooks.call.for(\"eval\").tap(\"JavascriptMetaInfoPlugin\", () => {\r\n\t\t\t\t\t\tparser.state.module.buildInfo.moduleConcatenationBailout = \"eval()\";\r\n\t\t\t\t\t\tparser.state.module.buildInfo.usingEval = true;\r\n\t\t\t\t\t\tconst currentSymbol = InnerGraph.getTopLevelSymbol(parser.state);\r\n\t\t\t\t\t\tif (currentSymbol) {\r\n\t\t\t\t\t\t\tInnerGraph.addUsage(parser.state, null, currentSymbol);\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tInnerGraph.bailout(parser.state);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t\tparser.hooks.finish.tap(\"JavascriptMetaInfoPlugin\", () => {\r\n\t\t\t\t\t\tlet topLevelDeclarations =\r\n\t\t\t\t\t\t\tparser.state.module.buildInfo.topLevelDeclarations;\r\n\t\t\t\t\t\tif (topLevelDeclarations === undefined) {\r\n\t\t\t\t\t\t\ttopLevelDeclarations =\r\n\t\t\t\t\t\t\t\tparser.state.module.buildInfo.topLevelDeclarations = new Set();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tfor (const name of parser.scope.definitions.asSet()) {\r\n\t\t\t\t\t\t\tconst freeInfo = parser.getFreeInfoFromVariable(name);\r\n\t\t\t\t\t\t\tif (freeInfo === undefined) {\r\n\t\t\t\t\t\t\t\ttopLevelDeclarations.add(name);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t};\r\n\r\n\t\t\t\tnormalModuleFactory.hooks.parser\r\n\t\t\t\t\t.for(\"javascript/auto\")\r\n\t\t\t\t\t.tap(\"JavascriptMetaInfoPlugin\", handler);\r\n\t\t\t\tnormalModuleFactory.hooks.parser\r\n\t\t\t\t\t.for(\"javascript/dynamic\")\r\n\t\t\t\t\t.tap(\"JavascriptMetaInfoPlugin\", handler);\r\n\t\t\t\tnormalModuleFactory.hooks.parser\r\n\t\t\t\t\t.for(\"javascript/esm\")\r\n\t\t\t\t\t.tap(\"JavascriptMetaInfoPlugin\", handler);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n}\r\n\r\nmodule.exports = JavascriptMetaInfoPlugin;\r\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ,MAAMA,UAAU,GAAGC,OAAO,CAAC,uBAAuB,CAAC;;AAEnD;AACA;;AAEA,MAAMC,wBAAwB,CAAC;EAC9B;AACD;AACA;AACA;AACA;EACCC,KAAK,CAACC,QAAQ,EAAE;IACfA,QAAQ,CAACC,KAAK,CAACC,WAAW,CAACC,GAAG,CAC7B,0BAA0B,EAC1B,CAACD,WAAW,WAA8B;MAAA,IAA5B;QAAEE;MAAoB,CAAC;MACpC;AACJ;AACA;AACA;MACI,MAAMC,OAAO,GAAGC,MAAM,IAAI;QACzBA,MAAM,CAACL,KAAK,CAACM,IAAI,CAACC,GAAG,CAAC,MAAM,CAAC,CAACL,GAAG,CAAC,0BAA0B,EAAE,MAAM;UACnEG,MAAM,CAACG,KAAK,CAACC,MAAM,CAACC,SAAS,CAACC,0BAA0B,GAAG,QAAQ;UACnEN,MAAM,CAACG,KAAK,CAACC,MAAM,CAACC,SAAS,CAACE,SAAS,GAAG,IAAI;UAC9C,MAAMC,aAAa,GAAGlB,UAAU,CAACmB,iBAAiB,CAACT,MAAM,CAACG,KAAK,CAAC;UAChE,IAAIK,aAAa,EAAE;YAClBlB,UAAU,CAACoB,QAAQ,CAACV,MAAM,CAACG,KAAK,EAAE,IAAI,EAAEK,aAAa,CAAC;UACvD,CAAC,MAAM;YACNlB,UAAU,CAACqB,OAAO,CAACX,MAAM,CAACG,KAAK,CAAC;UACjC;QACD,CAAC,CAAC;QACFH,MAAM,CAACL,KAAK,CAACiB,MAAM,CAACf,GAAG,CAAC,0BAA0B,EAAE,MAAM;UACzD,IAAIgB,oBAAoB,GACvBb,MAAM,CAACG,KAAK,CAACC,MAAM,CAACC,SAAS,CAACQ,oBAAoB;UACnD,IAAIA,oBAAoB,KAAKC,SAAS,EAAE;YACvCD,oBAAoB,GACnBb,MAAM,CAACG,KAAK,CAACC,MAAM,CAACC,SAAS,CAACQ,oBAAoB,GAAG,IAAIE,GAAG,EAAE;UAChE;UACA,KAAK,MAAMC,IAAI,IAAIhB,MAAM,CAACiB,KAAK,CAACC,WAAW,CAACC,KAAK,EAAE,EAAE;YACpD,MAAMC,QAAQ,GAAGpB,MAAM,CAACqB,uBAAuB,CAACL,IAAI,CAAC;YACrD,IAAII,QAAQ,KAAKN,SAAS,EAAE;cAC3BD,oBAAoB,CAACS,GAAG,CAACN,IAAI,CAAC;YAC/B;UACD;QACD,CAAC,CAAC;MACH,CAAC;MAEDlB,mBAAmB,CAACH,KAAK,CAACK,MAAM,CAC9BE,GAAG,CAAC,iBAAiB,CAAC,CACtBL,GAAG,CAAC,0BAA0B,EAAEE,OAAO,CAAC;MAC1CD,mBAAmB,CAACH,KAAK,CAACK,MAAM,CAC9BE,GAAG,CAAC,oBAAoB,CAAC,CACzBL,GAAG,CAAC,0BAA0B,EAAEE,OAAO,CAAC;MAC1CD,mBAAmB,CAACH,KAAK,CAACK,MAAM,CAC9BE,GAAG,CAAC,gBAAgB,CAAC,CACrBL,GAAG,CAAC,0BAA0B,EAAEE,OAAO,CAAC;IAC3C,CAAC,CACD;EACF;AACD;AAEAK,MAAM,CAACmB,OAAO,GAAG/B,wBAAwB"},"metadata":{},"sourceType":"script","externalDependencies":[]}