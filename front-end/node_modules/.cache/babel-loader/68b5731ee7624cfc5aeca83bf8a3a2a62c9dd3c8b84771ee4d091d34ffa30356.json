{"ast":null,"code":"/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n*/\n\n\"use strict\";\n\nconst RuntimeGlobals = require(\"../RuntimeGlobals\");\nconst RuntimeModule = require(\"../RuntimeModule\");\nconst Template = require(\"../Template\");\n\n/** @typedef {import(\"../Compilation\")} Compilation */\n\nclass GetMainFilenameRuntimeModule extends RuntimeModule {\n  /**\r\n   * @param {string} name readable name\r\n   * @param {string} global global object binding\r\n   * @param {string} filename main file name\r\n   */\n  constructor(name, global, filename) {\n    super(`get ${name} filename`);\n    this.global = global;\n    this.filename = filename;\n  }\n\n  /**\r\n   * @returns {string} runtime code\r\n   */\n  generate() {\n    const {\n      global,\n      filename,\n      compilation,\n      chunk\n    } = this;\n    const {\n      runtimeTemplate\n    } = compilation;\n    const url = compilation.getPath(JSON.stringify(filename), {\n      hash: `\" + ${RuntimeGlobals.getFullHash}() + \"`,\n      hashWithLength: length => `\" + ${RuntimeGlobals.getFullHash}().slice(0, ${length}) + \"`,\n      chunk,\n      runtime: chunk.runtime\n    });\n    return Template.asString([`${global} = ${runtimeTemplate.returningFunction(url)};`]);\n  }\n}\nmodule.exports = GetMainFilenameRuntimeModule;","map":{"version":3,"names":["RuntimeGlobals","require","RuntimeModule","Template","GetMainFilenameRuntimeModule","constructor","name","global","filename","generate","compilation","chunk","runtimeTemplate","url","getPath","JSON","stringify","hash","getFullHash","hashWithLength","length","runtime","asString","returningFunction","module","exports"],"sources":["C:/Users/91930/Desktop/Github projects/Pharmacy Demo/front-end/node_modules/webpack/lib/runtime/GetMainFilenameRuntimeModule.js"],"sourcesContent":["/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n*/\r\n\r\n\"use strict\";\r\n\r\nconst RuntimeGlobals = require(\"../RuntimeGlobals\");\r\nconst RuntimeModule = require(\"../RuntimeModule\");\r\nconst Template = require(\"../Template\");\r\n\r\n/** @typedef {import(\"../Compilation\")} Compilation */\r\n\r\nclass GetMainFilenameRuntimeModule extends RuntimeModule {\r\n\t/**\r\n\t * @param {string} name readable name\r\n\t * @param {string} global global object binding\r\n\t * @param {string} filename main file name\r\n\t */\r\n\tconstructor(name, global, filename) {\r\n\t\tsuper(`get ${name} filename`);\r\n\t\tthis.global = global;\r\n\t\tthis.filename = filename;\r\n\t}\r\n\r\n\t/**\r\n\t * @returns {string} runtime code\r\n\t */\r\n\tgenerate() {\r\n\t\tconst { global, filename, compilation, chunk } = this;\r\n\t\tconst { runtimeTemplate } = compilation;\r\n\t\tconst url = compilation.getPath(JSON.stringify(filename), {\r\n\t\t\thash: `\" + ${RuntimeGlobals.getFullHash}() + \"`,\r\n\t\t\thashWithLength: length =>\r\n\t\t\t\t`\" + ${RuntimeGlobals.getFullHash}().slice(0, ${length}) + \"`,\r\n\t\t\tchunk,\r\n\t\t\truntime: chunk.runtime\r\n\t\t});\r\n\t\treturn Template.asString([\r\n\t\t\t`${global} = ${runtimeTemplate.returningFunction(url)};`\r\n\t\t]);\r\n\t}\r\n}\r\n\r\nmodule.exports = GetMainFilenameRuntimeModule;\r\n"],"mappings":"AAAA;AACA;AACA;;AAEA,YAAY;;AAEZ,MAAMA,cAAc,GAAGC,OAAO,CAAC,mBAAmB,CAAC;AACnD,MAAMC,aAAa,GAAGD,OAAO,CAAC,kBAAkB,CAAC;AACjD,MAAME,QAAQ,GAAGF,OAAO,CAAC,aAAa,CAAC;;AAEvC;;AAEA,MAAMG,4BAA4B,SAASF,aAAa,CAAC;EACxD;AACD;AACA;AACA;AACA;EACCG,WAAW,CAACC,IAAI,EAAEC,MAAM,EAAEC,QAAQ,EAAE;IACnC,KAAK,CAAE,OAAMF,IAAK,WAAU,CAAC;IAC7B,IAAI,CAACC,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACC,QAAQ,GAAGA,QAAQ;EACzB;;EAEA;AACD;AACA;EACCC,QAAQ,GAAG;IACV,MAAM;MAAEF,MAAM;MAAEC,QAAQ;MAAEE,WAAW;MAAEC;IAAM,CAAC,GAAG,IAAI;IACrD,MAAM;MAAEC;IAAgB,CAAC,GAAGF,WAAW;IACvC,MAAMG,GAAG,GAAGH,WAAW,CAACI,OAAO,CAACC,IAAI,CAACC,SAAS,CAACR,QAAQ,CAAC,EAAE;MACzDS,IAAI,EAAG,OAAMjB,cAAc,CAACkB,WAAY,QAAO;MAC/CC,cAAc,EAAEC,MAAM,IACpB,OAAMpB,cAAc,CAACkB,WAAY,eAAcE,MAAO,OAAM;MAC9DT,KAAK;MACLU,OAAO,EAAEV,KAAK,CAACU;IAChB,CAAC,CAAC;IACF,OAAOlB,QAAQ,CAACmB,QAAQ,CAAC,CACvB,GAAEf,MAAO,MAAKK,eAAe,CAACW,iBAAiB,CAACV,GAAG,CAAE,GAAE,CACxD,CAAC;EACH;AACD;AAEAW,MAAM,CAACC,OAAO,GAAGrB,4BAA4B"},"metadata":{},"sourceType":"script","externalDependencies":[]}