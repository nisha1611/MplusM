{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ChangeStream = void 0;\nconst collection_1 = require(\"./collection\");\nconst constants_1 = require(\"./constants\");\nconst change_stream_cursor_1 = require(\"./cursor/change_stream_cursor\");\nconst db_1 = require(\"./db\");\nconst error_1 = require(\"./error\");\nconst mongo_client_1 = require(\"./mongo_client\");\nconst mongo_types_1 = require(\"./mongo_types\");\nconst utils_1 = require(\"./utils\");\n/** @internal */\nconst kCursorStream = Symbol('cursorStream');\n/** @internal */\nconst kClosed = Symbol('closed');\n/** @internal */\nconst kMode = Symbol('mode');\nconst CHANGE_STREAM_OPTIONS = ['resumeAfter', 'startAfter', 'startAtOperationTime', 'fullDocument', 'fullDocumentBeforeChange', 'showExpandedEvents'];\nconst CHANGE_DOMAIN_TYPES = {\n  COLLECTION: Symbol('Collection'),\n  DATABASE: Symbol('Database'),\n  CLUSTER: Symbol('Cluster')\n};\nconst CHANGE_STREAM_EVENTS = [constants_1.RESUME_TOKEN_CHANGED, constants_1.END, constants_1.CLOSE];\nconst NO_RESUME_TOKEN_ERROR = 'A change stream document has been received that lacks a resume token (_id).';\nconst CHANGESTREAM_CLOSED_ERROR = 'ChangeStream is closed';\n/**\r\n * Creates a new Change Stream instance. Normally created using {@link Collection#watch|Collection.watch()}.\r\n * @public\r\n */\nclass ChangeStream extends mongo_types_1.TypedEventEmitter {\n  /**\r\n   * @internal\r\n   *\r\n   * @param parent - The parent object that created this change stream\r\n   * @param pipeline - An array of {@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline/|aggregation pipeline stages} through which to pass change stream documents\r\n   */\n  constructor(parent) {\n    let pipeline = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    super();\n    this.pipeline = pipeline;\n    this.options = options;\n    if (parent instanceof collection_1.Collection) {\n      this.type = CHANGE_DOMAIN_TYPES.COLLECTION;\n    } else if (parent instanceof db_1.Db) {\n      this.type = CHANGE_DOMAIN_TYPES.DATABASE;\n    } else if (parent instanceof mongo_client_1.MongoClient) {\n      this.type = CHANGE_DOMAIN_TYPES.CLUSTER;\n    } else {\n      throw new error_1.MongoChangeStreamError('Parent provided to ChangeStream constructor must be an instance of Collection, Db, or MongoClient');\n    }\n    this.parent = parent;\n    this.namespace = parent.s.namespace;\n    if (!this.options.readPreference && parent.readPreference) {\n      this.options.readPreference = parent.readPreference;\n    }\n    // Create contained Change Stream cursor\n    this.cursor = this._createChangeStreamCursor(options);\n    this[kClosed] = false;\n    this[kMode] = false;\n    // Listen for any `change` listeners being added to ChangeStream\n    this.on('newListener', eventName => {\n      if (eventName === 'change' && this.cursor && this.listenerCount('change') === 0) {\n        this._streamEvents(this.cursor);\n      }\n    });\n    this.on('removeListener', eventName => {\n      var _a;\n      if (eventName === 'change' && this.listenerCount('change') === 0 && this.cursor) {\n        (_a = this[kCursorStream]) === null || _a === void 0 ? void 0 : _a.removeAllListeners('data');\n      }\n    });\n  }\n  /** @internal */\n  get cursorStream() {\n    return this[kCursorStream];\n  }\n  /** The cached resume token that is used to resume after the most recently returned change. */\n  get resumeToken() {\n    var _a;\n    return (_a = this.cursor) === null || _a === void 0 ? void 0 : _a.resumeToken;\n  }\n  hasNext(callback) {\n    this._setIsIterator();\n    return (0, utils_1.maybeCallback)(async () => {\n      // Change streams must resume indefinitely while each resume event succeeds.\n      // This loop continues until either a change event is received or until a resume attempt\n      // fails.\n      // eslint-disable-next-line no-constant-condition\n      while (true) {\n        try {\n          const hasNext = await this.cursor.hasNext();\n          return hasNext;\n        } catch (error) {\n          try {\n            await this._processErrorIteratorMode(error);\n          } catch (error) {\n            try {\n              await this.close();\n            } catch {\n              // We are not concerned with errors from close()\n            }\n            throw error;\n          }\n        }\n      }\n    }, callback);\n  }\n  next(callback) {\n    this._setIsIterator();\n    return (0, utils_1.maybeCallback)(async () => {\n      // Change streams must resume indefinitely while each resume event succeeds.\n      // This loop continues until either a change event is received or until a resume attempt\n      // fails.\n      // eslint-disable-next-line no-constant-condition\n      while (true) {\n        try {\n          const change = await this.cursor.next();\n          const processedChange = this._processChange(change !== null && change !== void 0 ? change : null);\n          return processedChange;\n        } catch (error) {\n          try {\n            await this._processErrorIteratorMode(error);\n          } catch (error) {\n            try {\n              await this.close();\n            } catch {\n              // We are not concerned with errors from close()\n            }\n            throw error;\n          }\n        }\n      }\n    }, callback);\n  }\n  tryNext(callback) {\n    this._setIsIterator();\n    return (0, utils_1.maybeCallback)(async () => {\n      // Change streams must resume indefinitely while each resume event succeeds.\n      // This loop continues until either a change event is received or until a resume attempt\n      // fails.\n      // eslint-disable-next-line no-constant-condition\n      while (true) {\n        try {\n          const change = await this.cursor.tryNext();\n          return change !== null && change !== void 0 ? change : null;\n        } catch (error) {\n          try {\n            await this._processErrorIteratorMode(error);\n          } catch (error) {\n            try {\n              await this.close();\n            } catch {\n              // We are not concerned with errors from close()\n            }\n            throw error;\n          }\n        }\n      }\n    }, callback);\n  }\n  async *[Symbol.asyncIterator]() {\n    if (this.closed) {\n      return;\n    }\n    try {\n      // Change streams run indefinitely as long as errors are resumable\n      // So the only loop breaking condition is if `next()` throws\n      while (true) {\n        yield await this.next();\n      }\n    } finally {\n      try {\n        await this.close();\n      } catch {\n        // we're not concerned with errors from close()\n      }\n    }\n  }\n  /** Is the cursor closed */\n  get closed() {\n    return this[kClosed] || this.cursor.closed;\n  }\n  close(callback) {\n    this[kClosed] = true;\n    return (0, utils_1.maybeCallback)(async () => {\n      const cursor = this.cursor;\n      try {\n        await cursor.close();\n      } finally {\n        this._endStream();\n      }\n    }, callback);\n  }\n  /**\r\n   * Return a modified Readable stream including a possible transform method.\r\n   *\r\n   * NOTE: When using a Stream to process change stream events, the stream will\r\n   * NOT automatically resume in the case a resumable error is encountered.\r\n   *\r\n   * @throws MongoChangeStreamError if the underlying cursor or the change stream is closed\r\n   */\n  stream(options) {\n    if (this.closed) {\n      throw new error_1.MongoChangeStreamError(CHANGESTREAM_CLOSED_ERROR);\n    }\n    this.streamOptions = options;\n    return this.cursor.stream(options);\n  }\n  /** @internal */\n  _setIsEmitter() {\n    if (this[kMode] === 'iterator') {\n      // TODO(NODE-3485): Replace with MongoChangeStreamModeError\n      throw new error_1.MongoAPIError('ChangeStream cannot be used as an EventEmitter after being used as an iterator');\n    }\n    this[kMode] = 'emitter';\n  }\n  /** @internal */\n  _setIsIterator() {\n    if (this[kMode] === 'emitter') {\n      // TODO(NODE-3485): Replace with MongoChangeStreamModeError\n      throw new error_1.MongoAPIError('ChangeStream cannot be used as an iterator after being used as an EventEmitter');\n    }\n    this[kMode] = 'iterator';\n  }\n  /**\r\n   * Create a new change stream cursor based on self's configuration\r\n   * @internal\r\n   */\n  _createChangeStreamCursor(options) {\n    const changeStreamStageOptions = (0, utils_1.filterOptions)(options, CHANGE_STREAM_OPTIONS);\n    if (this.type === CHANGE_DOMAIN_TYPES.CLUSTER) {\n      changeStreamStageOptions.allChangesForCluster = true;\n    }\n    const pipeline = [{\n      $changeStream: changeStreamStageOptions\n    }, ...this.pipeline];\n    const client = this.type === CHANGE_DOMAIN_TYPES.CLUSTER ? this.parent : this.type === CHANGE_DOMAIN_TYPES.DATABASE ? this.parent.s.client : this.type === CHANGE_DOMAIN_TYPES.COLLECTION ? this.parent.s.db.s.client : null;\n    if (client == null) {\n      // This should never happen because of the assertion in the constructor\n      throw new error_1.MongoRuntimeError(`Changestream type should only be one of cluster, database, collection. Found ${this.type.toString()}`);\n    }\n    const changeStreamCursor = new change_stream_cursor_1.ChangeStreamCursor(client, this.namespace, pipeline, options);\n    for (const event of CHANGE_STREAM_EVENTS) {\n      changeStreamCursor.on(event, e => this.emit(event, e));\n    }\n    if (this.listenerCount(ChangeStream.CHANGE) > 0) {\n      this._streamEvents(changeStreamCursor);\n    }\n    return changeStreamCursor;\n  }\n  /** @internal */\n  _closeEmitterModeWithError(error) {\n    this.emit(ChangeStream.ERROR, error);\n    this.close(() => {\n      // nothing to do\n    });\n  }\n  /** @internal */\n  _streamEvents(cursor) {\n    var _a;\n    this._setIsEmitter();\n    const stream = (_a = this[kCursorStream]) !== null && _a !== void 0 ? _a : cursor.stream();\n    this[kCursorStream] = stream;\n    stream.on('data', change => {\n      try {\n        const processedChange = this._processChange(change);\n        this.emit(ChangeStream.CHANGE, processedChange);\n      } catch (error) {\n        this.emit(ChangeStream.ERROR, error);\n      }\n    });\n    stream.on('error', error => this._processErrorStreamMode(error));\n  }\n  /** @internal */\n  _endStream() {\n    const cursorStream = this[kCursorStream];\n    if (cursorStream) {\n      ['data', 'close', 'end', 'error'].forEach(event => cursorStream.removeAllListeners(event));\n      cursorStream.destroy();\n    }\n    this[kCursorStream] = undefined;\n  }\n  /** @internal */\n  _processChange(change) {\n    if (this[kClosed]) {\n      // TODO(NODE-3485): Replace with MongoChangeStreamClosedError\n      throw new error_1.MongoAPIError(CHANGESTREAM_CLOSED_ERROR);\n    }\n    // a null change means the cursor has been notified, implicitly closing the change stream\n    if (change == null) {\n      // TODO(NODE-3485): Replace with MongoChangeStreamClosedError\n      throw new error_1.MongoRuntimeError(CHANGESTREAM_CLOSED_ERROR);\n    }\n    if (change && !change._id) {\n      throw new error_1.MongoChangeStreamError(NO_RESUME_TOKEN_ERROR);\n    }\n    // cache the resume token\n    this.cursor.cacheResumeToken(change._id);\n    // wipe the startAtOperationTime if there was one so that there won't be a conflict\n    // between resumeToken and startAtOperationTime if we need to reconnect the cursor\n    this.options.startAtOperationTime = undefined;\n    return change;\n  }\n  /** @internal */\n  _processErrorStreamMode(changeStreamError) {\n    // If the change stream has been closed explicitly, do not process error.\n    if (this[kClosed]) return;\n    if ((0, error_1.isResumableError)(changeStreamError, this.cursor.maxWireVersion)) {\n      this._endStream();\n      this.cursor.close().catch(() => null);\n      const topology = (0, utils_1.getTopology)(this.parent);\n      topology.selectServer(this.cursor.readPreference, {}, serverSelectionError => {\n        if (serverSelectionError) return this._closeEmitterModeWithError(changeStreamError);\n        this.cursor = this._createChangeStreamCursor(this.cursor.resumeOptions);\n      });\n    } else {\n      this._closeEmitterModeWithError(changeStreamError);\n    }\n  }\n  /** @internal */\n  async _processErrorIteratorMode(changeStreamError) {\n    if (this[kClosed]) {\n      // TODO(NODE-3485): Replace with MongoChangeStreamClosedError\n      throw new error_1.MongoAPIError(CHANGESTREAM_CLOSED_ERROR);\n    }\n    if (!(0, error_1.isResumableError)(changeStreamError, this.cursor.maxWireVersion)) {\n      try {\n        await this.close();\n      } catch {\n        // ignore errors from close\n      }\n      throw changeStreamError;\n    }\n    await this.cursor.close().catch(() => null);\n    const topology = (0, utils_1.getTopology)(this.parent);\n    try {\n      await topology.selectServerAsync(this.cursor.readPreference, {});\n      this.cursor = this._createChangeStreamCursor(this.cursor.resumeOptions);\n    } catch {\n      // if the topology can't reconnect, close the stream\n      await this.close();\n      throw changeStreamError;\n    }\n  }\n}\nexports.ChangeStream = ChangeStream;\n/** @event */\nChangeStream.RESPONSE = constants_1.RESPONSE;\n/** @event */\nChangeStream.MORE = constants_1.MORE;\n/** @event */\nChangeStream.INIT = constants_1.INIT;\n/** @event */\nChangeStream.CLOSE = constants_1.CLOSE;\n/**\r\n * Fired for each new matching change in the specified namespace. Attaching a `change`\r\n * event listener to a Change Stream will switch the stream into flowing mode. Data will\r\n * then be passed as soon as it is available.\r\n * @event\r\n */\nChangeStream.CHANGE = constants_1.CHANGE;\n/** @event */\nChangeStream.END = constants_1.END;\n/** @event */\nChangeStream.ERROR = constants_1.ERROR;\n/**\r\n * Emitted each time the change stream stores a new resume token.\r\n * @event\r\n */\nChangeStream.RESUME_TOKEN_CHANGED = constants_1.RESUME_TOKEN_CHANGED;","map":{"version":3,"mappings":"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","names":["kCursorStream","Symbol","kClosed","kMode","CHANGE_STREAM_OPTIONS","CHANGE_DOMAIN_TYPES","COLLECTION","DATABASE","CLUSTER","CHANGE_STREAM_EVENTS","constants_1","NO_RESUME_TOKEN_ERROR","CHANGESTREAM_CLOSED_ERROR","ChangeStream","mongo_types_1","constructor","parent","pipeline","options","collection_1","type","db_1","mongo_client_1","error_1","namespace","s","readPreference","cursor","_createChangeStreamCursor","on","eventName","listenerCount","_streamEvents","removeAllListeners","cursorStream","resumeToken","hasNext","callback","_setIsIterator","error","_processErrorIteratorMode","close","next","change","processedChange","_processChange","tryNext","asyncIterator","closed","_endStream","stream","streamOptions","_setIsEmitter","changeStreamStageOptions","allChangesForCluster","$changeStream","client","db","toString","changeStreamCursor","change_stream_cursor_1","event","e","emit","CHANGE","_closeEmitterModeWithError","ERROR","_processErrorStreamMode","forEach","destroy","undefined","_id","cacheResumeToken","startAtOperationTime","changeStreamError","maxWireVersion","catch","topology","selectServer","serverSelectionError","resumeOptions","selectServerAsync","exports"],"sources":["C:\\Users\\91930\\Desktop\\Github projects\\Pharmacy Demo\\back-end\\node_modules\\mongodb\\src\\change_stream.ts"],"sourcesContent":["import type { Readable } from 'stream';\r\n\r\nimport type { Binary, Document, Timestamp } from './bson';\r\nimport { Collection } from './collection';\r\nimport { CHANGE, CLOSE, END, ERROR, INIT, MORE, RESPONSE, RESUME_TOKEN_CHANGED } from './constants';\r\nimport type { AbstractCursorEvents, CursorStreamOptions } from './cursor/abstract_cursor';\r\nimport { ChangeStreamCursor, ChangeStreamCursorOptions } from './cursor/change_stream_cursor';\r\nimport { Db } from './db';\r\nimport {\r\n  AnyError,\r\n  isResumableError,\r\n  MongoAPIError,\r\n  MongoChangeStreamError,\r\n  MongoRuntimeError\r\n} from './error';\r\nimport { MongoClient } from './mongo_client';\r\nimport { InferIdType, TypedEventEmitter } from './mongo_types';\r\nimport type { AggregateOptions } from './operations/aggregate';\r\nimport type { CollationOptions, OperationParent } from './operations/command';\r\nimport type { ReadPreference } from './read_preference';\r\nimport type { ServerSessionId } from './sessions';\r\nimport { Callback, filterOptions, getTopology, maybeCallback, MongoDBNamespace } from './utils';\r\n\r\n/** @internal */\r\nconst kCursorStream = Symbol('cursorStream');\r\n/** @internal */\r\nconst kClosed = Symbol('closed');\r\n/** @internal */\r\nconst kMode = Symbol('mode');\r\n\r\nconst CHANGE_STREAM_OPTIONS = [\r\n  'resumeAfter',\r\n  'startAfter',\r\n  'startAtOperationTime',\r\n  'fullDocument',\r\n  'fullDocumentBeforeChange',\r\n  'showExpandedEvents'\r\n] as const;\r\n\r\nconst CHANGE_DOMAIN_TYPES = {\r\n  COLLECTION: Symbol('Collection'),\r\n  DATABASE: Symbol('Database'),\r\n  CLUSTER: Symbol('Cluster')\r\n};\r\n\r\nconst CHANGE_STREAM_EVENTS = [RESUME_TOKEN_CHANGED, END, CLOSE];\r\n\r\nconst NO_RESUME_TOKEN_ERROR =\r\n  'A change stream document has been received that lacks a resume token (_id).';\r\nconst CHANGESTREAM_CLOSED_ERROR = 'ChangeStream is closed';\r\n\r\n/**\r\n * @public\r\n * @deprecated Please use the ChangeStreamCursorOptions type instead.\r\n */\r\nexport interface ResumeOptions {\r\n  startAtOperationTime?: Timestamp;\r\n  batchSize?: number;\r\n  maxAwaitTimeMS?: number;\r\n  collation?: CollationOptions;\r\n  readPreference?: ReadPreference;\r\n  resumeAfter?: ResumeToken;\r\n  startAfter?: ResumeToken;\r\n  fullDocument?: string;\r\n}\r\n\r\n/**\r\n * Represents the logical starting point for a new ChangeStream or resuming a ChangeStream on the server.\r\n * @see https://www.mongodb.com/docs/manual/changeStreams/#std-label-change-stream-resume\r\n * @public\r\n */\r\nexport type ResumeToken = unknown;\r\n\r\n/**\r\n * Represents a specific point in time on a server. Can be retrieved by using `db.command()`\r\n * @public\r\n * @see https://docs.mongodb.com/manual/reference/method/db.runCommand/#response\r\n */\r\nexport type OperationTime = Timestamp;\r\n\r\n/**\r\n * @public\r\n * @deprecated This interface is unused and will be removed in the next major version of the driver.\r\n */\r\nexport interface PipeOptions {\r\n  end?: boolean;\r\n}\r\n\r\n/**\r\n * Options that can be passed to a ChangeStream. Note that startAfter, resumeAfter, and startAtOperationTime are all mutually exclusive, and the server will error if more than one is specified.\r\n * @public\r\n */\r\nexport interface ChangeStreamOptions extends AggregateOptions {\r\n  /**\r\n   * Allowed values: 'updateLookup', 'whenAvailable', 'required'.\r\n   *\r\n   * When set to 'updateLookup', the change notification for partial updates\r\n   * will include both a delta describing the changes to the document as well\r\n   * as a copy of the entire document that was changed from some time after\r\n   * the change occurred.\r\n   *\r\n   * When set to 'whenAvailable', configures the change stream to return the\r\n   * post-image of the modified document for replace and update change events\r\n   * if the post-image for this event is available.\r\n   *\r\n   * When set to 'required', the same behavior as 'whenAvailable' except that\r\n   * an error is raised if the post-image is not available.\r\n   */\r\n  fullDocument?: string;\r\n\r\n  /**\r\n   * Allowed values: 'whenAvailable', 'required', 'off'.\r\n   *\r\n   * The default is to not send a value, which is equivalent to 'off'.\r\n   *\r\n   * When set to 'whenAvailable', configures the change stream to return the\r\n   * pre-image of the modified document for replace, update, and delete change\r\n   * events if it is available.\r\n   *\r\n   * When set to 'required', the same behavior as 'whenAvailable' except that\r\n   * an error is raised if the pre-image is not available.\r\n   */\r\n  fullDocumentBeforeChange?: string;\r\n  /** The maximum amount of time for the server to wait on new documents to satisfy a change stream query. */\r\n  maxAwaitTimeMS?: number;\r\n  /**\r\n   * Allows you to start a changeStream after a specified event.\r\n   * @see https://docs.mongodb.com/manual/changeStreams/#resumeafter-for-change-streams\r\n   */\r\n  resumeAfter?: ResumeToken;\r\n  /**\r\n   * Similar to resumeAfter, but will allow you to start after an invalidated event.\r\n   * @see https://docs.mongodb.com/manual/changeStreams/#startafter-for-change-streams\r\n   */\r\n  startAfter?: ResumeToken;\r\n  /** Will start the changeStream after the specified operationTime. */\r\n  startAtOperationTime?: OperationTime;\r\n  /**\r\n   * The number of documents to return per batch.\r\n   * @see https://docs.mongodb.com/manual/reference/command/aggregate\r\n   */\r\n  batchSize?: number;\r\n\r\n  /**\r\n   * When enabled, configures the change stream to include extra change events.\r\n   *\r\n   * - createIndexes\r\n   * - dropIndexes\r\n   * - modify\r\n   * - create\r\n   * - shardCollection\r\n   * - reshardCollection\r\n   * - refineCollectionShardKey\r\n   */\r\n  showExpandedEvents?: boolean;\r\n}\r\n\r\n/** @public */\r\nexport interface ChangeStreamNameSpace {\r\n  db: string;\r\n  coll: string;\r\n}\r\n\r\n/** @public */\r\nexport interface ChangeStreamDocumentKey<TSchema extends Document = Document> {\r\n  /**\r\n   * For unsharded collections this contains a single field `_id`.\r\n   * For sharded collections, this will contain all the components of the shard key\r\n   */\r\n  documentKey: { _id: InferIdType<TSchema>; [shardKey: string]: any };\r\n}\r\n\r\n/** @public */\r\nexport interface ChangeStreamDocumentCommon {\r\n  /**\r\n   * The id functions as an opaque token for use when resuming an interrupted\r\n   * change stream.\r\n   */\r\n  _id: ResumeToken;\r\n  /**\r\n   * The timestamp from the oplog entry associated with the event.\r\n   * For events that happened as part of a multi-document transaction, the associated change stream\r\n   * notifications will have the same clusterTime value, namely the time when the transaction was committed.\r\n   * On a sharded cluster, events that occur on different shards can have the same clusterTime but be\r\n   * associated with different transactions or even not be associated with any transaction.\r\n   * To identify events for a single transaction, you can use the combination of lsid and txnNumber in the change stream event document.\r\n   */\r\n  clusterTime?: Timestamp;\r\n\r\n  /**\r\n   * The transaction number.\r\n   * Only present if the operation is part of a multi-document transaction.\r\n   *\r\n   * **NOTE:** txnNumber can be a Long if promoteLongs is set to false\r\n   */\r\n  txnNumber?: number;\r\n\r\n  /**\r\n   * The identifier for the session associated with the transaction.\r\n   * Only present if the operation is part of a multi-document transaction.\r\n   */\r\n  lsid?: ServerSessionId;\r\n}\r\n\r\n/** @public */\r\nexport interface ChangeStreamDocumentCollectionUUID {\r\n  /**\r\n   * The UUID (Binary subtype 4) of the collection that the operation was performed on.\r\n   *\r\n   * Only present when the `showExpandedEvents` flag is enabled.\r\n   *\r\n   * **NOTE:** collectionUUID will be converted to a NodeJS Buffer if the promoteBuffers\r\n   *    flag is enabled.\r\n   *\r\n   * @sinceServerVersion 6.1.0\r\n   */\r\n  collectionUUID: Binary;\r\n}\r\n\r\n/** @public */\r\nexport interface ChangeStreamDocumentOperationDescription {\r\n  /**\r\n   * An description of the operation.\r\n   *\r\n   * Only present when the `showExpandedEvents` flag is enabled.\r\n   *\r\n   * @sinceServerVersion 6.1.0\r\n   */\r\n  operationDescription?: Document;\r\n}\r\n\r\n/**\r\n * @public\r\n * @see https://www.mongodb.com/docs/manual/reference/change-events/#insert-event\r\n */\r\nexport interface ChangeStreamInsertDocument<TSchema extends Document = Document>\r\n  extends ChangeStreamDocumentCommon,\r\n    ChangeStreamDocumentKey<TSchema>,\r\n    ChangeStreamDocumentCollectionUUID {\r\n  /** Describes the type of operation represented in this change notification */\r\n  operationType: 'insert';\r\n  /** This key will contain the document being inserted */\r\n  fullDocument: TSchema;\r\n  /** Namespace the insert event occurred on */\r\n  ns: ChangeStreamNameSpace;\r\n}\r\n\r\n/**\r\n * @public\r\n * @see https://www.mongodb.com/docs/manual/reference/change-events/#update-event\r\n */\r\nexport interface ChangeStreamUpdateDocument<TSchema extends Document = Document>\r\n  extends ChangeStreamDocumentCommon,\r\n    ChangeStreamDocumentKey<TSchema>,\r\n    ChangeStreamDocumentCollectionUUID {\r\n  /** Describes the type of operation represented in this change notification */\r\n  operationType: 'update';\r\n  /**\r\n   * This is only set if `fullDocument` is set to `'updateLookup'`\r\n   * Contains the point-in-time post-image of the modified document if the\r\n   * post-image is available and either 'required' or 'whenAvailable' was\r\n   * specified for the 'fullDocument' option when creating the change stream.\r\n   */\r\n  fullDocument?: TSchema;\r\n  /** Contains a description of updated and removed fields in this operation */\r\n  updateDescription: UpdateDescription<TSchema>;\r\n  /** Namespace the update event occurred on */\r\n  ns: ChangeStreamNameSpace;\r\n  /**\r\n   * Contains the pre-image of the modified or deleted document if the\r\n   * pre-image is available for the change event and either 'required' or\r\n   * 'whenAvailable' was specified for the 'fullDocumentBeforeChange' option\r\n   * when creating the change stream. If 'whenAvailable' was specified but the\r\n   * pre-image is unavailable, this will be explicitly set to null.\r\n   */\r\n  fullDocumentBeforeChange?: TSchema;\r\n}\r\n\r\n/**\r\n * @public\r\n * @see https://www.mongodb.com/docs/manual/reference/change-events/#replace-event\r\n */\r\nexport interface ChangeStreamReplaceDocument<TSchema extends Document = Document>\r\n  extends ChangeStreamDocumentCommon,\r\n    ChangeStreamDocumentKey<TSchema> {\r\n  /** Describes the type of operation represented in this change notification */\r\n  operationType: 'replace';\r\n  /** The fullDocument of a replace event represents the document after the insert of the replacement document */\r\n  fullDocument: TSchema;\r\n  /** Namespace the replace event occurred on */\r\n  ns: ChangeStreamNameSpace;\r\n  /**\r\n   * Contains the pre-image of the modified or deleted document if the\r\n   * pre-image is available for the change event and either 'required' or\r\n   * 'whenAvailable' was specified for the 'fullDocumentBeforeChange' option\r\n   * when creating the change stream. If 'whenAvailable' was specified but the\r\n   * pre-image is unavailable, this will be explicitly set to null.\r\n   */\r\n  fullDocumentBeforeChange?: TSchema;\r\n}\r\n\r\n/**\r\n * @public\r\n * @see https://www.mongodb.com/docs/manual/reference/change-events/#delete-event\r\n */\r\nexport interface ChangeStreamDeleteDocument<TSchema extends Document = Document>\r\n  extends ChangeStreamDocumentCommon,\r\n    ChangeStreamDocumentKey<TSchema>,\r\n    ChangeStreamDocumentCollectionUUID {\r\n  /** Describes the type of operation represented in this change notification */\r\n  operationType: 'delete';\r\n  /** Namespace the delete event occurred on */\r\n  ns: ChangeStreamNameSpace;\r\n  /**\r\n   * Contains the pre-image of the modified or deleted document if the\r\n   * pre-image is available for the change event and either 'required' or\r\n   * 'whenAvailable' was specified for the 'fullDocumentBeforeChange' option\r\n   * when creating the change stream. If 'whenAvailable' was specified but the\r\n   * pre-image is unavailable, this will be explicitly set to null.\r\n   */\r\n  fullDocumentBeforeChange?: TSchema;\r\n}\r\n\r\n/**\r\n * @public\r\n * @see https://www.mongodb.com/docs/manual/reference/change-events/#drop-event\r\n */\r\nexport interface ChangeStreamDropDocument\r\n  extends ChangeStreamDocumentCommon,\r\n    ChangeStreamDocumentCollectionUUID {\r\n  /** Describes the type of operation represented in this change notification */\r\n  operationType: 'drop';\r\n  /** Namespace the drop event occurred on */\r\n  ns: ChangeStreamNameSpace;\r\n}\r\n\r\n/**\r\n * @public\r\n * @see https://www.mongodb.com/docs/manual/reference/change-events/#rename-event\r\n */\r\nexport interface ChangeStreamRenameDocument\r\n  extends ChangeStreamDocumentCommon,\r\n    ChangeStreamDocumentCollectionUUID {\r\n  /** Describes the type of operation represented in this change notification */\r\n  operationType: 'rename';\r\n  /** The new name for the `ns.coll` collection */\r\n  to: { db: string; coll: string };\r\n  /** The \"from\" namespace that the rename occurred on */\r\n  ns: ChangeStreamNameSpace;\r\n}\r\n\r\n/**\r\n * @public\r\n * @see https://www.mongodb.com/docs/manual/reference/change-events/#dropdatabase-event\r\n */\r\nexport interface ChangeStreamDropDatabaseDocument extends ChangeStreamDocumentCommon {\r\n  /** Describes the type of operation represented in this change notification */\r\n  operationType: 'dropDatabase';\r\n  /** The database dropped */\r\n  ns: { db: string };\r\n}\r\n\r\n/**\r\n * @public\r\n * @see https://www.mongodb.com/docs/manual/reference/change-events/#invalidate-event\r\n */\r\nexport interface ChangeStreamInvalidateDocument extends ChangeStreamDocumentCommon {\r\n  /** Describes the type of operation represented in this change notification */\r\n  operationType: 'invalidate';\r\n}\r\n\r\n/**\r\n * Only present when the `showExpandedEvents` flag is enabled.\r\n * @public\r\n * @see https://www.mongodb.com/docs/manual/reference/change-events/\r\n */\r\nexport interface ChangeStreamCreateIndexDocument\r\n  extends ChangeStreamDocumentCommon,\r\n    ChangeStreamDocumentCollectionUUID,\r\n    ChangeStreamDocumentOperationDescription {\r\n  /** Describes the type of operation represented in this change notification */\r\n  operationType: 'createIndexes';\r\n}\r\n\r\n/**\r\n * Only present when the `showExpandedEvents` flag is enabled.\r\n * @public\r\n * @see https://www.mongodb.com/docs/manual/reference/change-events/\r\n */\r\nexport interface ChangeStreamDropIndexDocument\r\n  extends ChangeStreamDocumentCommon,\r\n    ChangeStreamDocumentCollectionUUID,\r\n    ChangeStreamDocumentOperationDescription {\r\n  /** Describes the type of operation represented in this change notification */\r\n  operationType: 'dropIndexes';\r\n}\r\n\r\n/**\r\n * Only present when the `showExpandedEvents` flag is enabled.\r\n * @public\r\n * @see https://www.mongodb.com/docs/manual/reference/change-events/\r\n */\r\nexport interface ChangeStreamCollModDocument\r\n  extends ChangeStreamDocumentCommon,\r\n    ChangeStreamDocumentCollectionUUID {\r\n  /** Describes the type of operation represented in this change notification */\r\n  operationType: 'modify';\r\n}\r\n\r\n/**\r\n * @public\r\n * @see https://www.mongodb.com/docs/manual/reference/change-events/\r\n */\r\nexport interface ChangeStreamCreateDocument\r\n  extends ChangeStreamDocumentCommon,\r\n    ChangeStreamDocumentCollectionUUID {\r\n  /** Describes the type of operation represented in this change notification */\r\n  operationType: 'create';\r\n}\r\n\r\n/**\r\n * @public\r\n * @see https://www.mongodb.com/docs/manual/reference/change-events/\r\n */\r\nexport interface ChangeStreamShardCollectionDocument\r\n  extends ChangeStreamDocumentCommon,\r\n    ChangeStreamDocumentCollectionUUID,\r\n    ChangeStreamDocumentOperationDescription {\r\n  /** Describes the type of operation represented in this change notification */\r\n  operationType: 'shardCollection';\r\n}\r\n\r\n/**\r\n * @public\r\n * @see https://www.mongodb.com/docs/manual/reference/change-events/\r\n */\r\nexport interface ChangeStreamReshardCollectionDocument\r\n  extends ChangeStreamDocumentCommon,\r\n    ChangeStreamDocumentCollectionUUID,\r\n    ChangeStreamDocumentOperationDescription {\r\n  /** Describes the type of operation represented in this change notification */\r\n  operationType: 'reshardCollection';\r\n}\r\n\r\n/**\r\n * @public\r\n * @see https://www.mongodb.com/docs/manual/reference/change-events/\r\n */\r\nexport interface ChangeStreamRefineCollectionShardKeyDocument\r\n  extends ChangeStreamDocumentCommon,\r\n    ChangeStreamDocumentCollectionUUID,\r\n    ChangeStreamDocumentOperationDescription {\r\n  /** Describes the type of operation represented in this change notification */\r\n  operationType: 'refineCollectionShardKey';\r\n}\r\n\r\n/** @public */\r\nexport type ChangeStreamDocument<TSchema extends Document = Document> =\r\n  | ChangeStreamInsertDocument<TSchema>\r\n  | ChangeStreamUpdateDocument<TSchema>\r\n  | ChangeStreamReplaceDocument<TSchema>\r\n  | ChangeStreamDeleteDocument<TSchema>\r\n  | ChangeStreamDropDocument\r\n  | ChangeStreamRenameDocument\r\n  | ChangeStreamDropDatabaseDocument\r\n  | ChangeStreamInvalidateDocument\r\n  | ChangeStreamCreateIndexDocument\r\n  | ChangeStreamCreateDocument\r\n  | ChangeStreamCollModDocument\r\n  | ChangeStreamDropIndexDocument\r\n  | ChangeStreamShardCollectionDocument\r\n  | ChangeStreamReshardCollectionDocument\r\n  | ChangeStreamRefineCollectionShardKeyDocument;\r\n\r\n/** @public */\r\nexport interface UpdateDescription<TSchema extends Document = Document> {\r\n  /**\r\n   * A document containing key:value pairs of names of the fields that were\r\n   * changed, and the new value for those fields.\r\n   */\r\n  updatedFields?: Partial<TSchema>;\r\n\r\n  /**\r\n   * An array of field names that were removed from the document.\r\n   */\r\n  removedFields?: string[];\r\n\r\n  /**\r\n   * An array of documents which record array truncations performed with pipeline-based updates using one or more of the following stages:\r\n   * - $addFields\r\n   * - $set\r\n   * - $replaceRoot\r\n   * - $replaceWith\r\n   */\r\n  truncatedArrays?: Array<{\r\n    /** The name of the truncated field. */\r\n    field: string;\r\n    /** The number of elements in the truncated array. */\r\n    newSize: number;\r\n  }>;\r\n\r\n  /**\r\n   * A document containing additional information about any ambiguous update paths from the update event.  The document\r\n   * maps the full ambiguous update path to an array containing the actual resolved components of the path.  For example,\r\n   * given a document shaped like `{ a: { '0': 0 } }`, and an update of `{ $inc: 'a.0' }`, disambiguated paths would look like\r\n   * the following:\r\n   *\r\n   * ```\r\n   *   {\r\n   *     'a.0': ['a', '0']\r\n   *   }\r\n   * ```\r\n   *\r\n   * This field is only present when there are ambiguous paths that are updated as a part of the update event and `showExpandedEvents`\r\n   * is enabled for the change stream.\r\n   * @sinceServerVersion 6.1.0\r\n   */\r\n  disambiguatedPaths?: Document;\r\n}\r\n\r\n/** @public */\r\nexport type ChangeStreamEvents<\r\n  TSchema extends Document = Document,\r\n  TChange extends Document = ChangeStreamDocument<TSchema>\r\n> = {\r\n  resumeTokenChanged(token: ResumeToken): void;\r\n  init(response: any): void;\r\n  more(response?: any): void;\r\n  response(): void;\r\n  end(): void;\r\n  error(error: Error): void;\r\n  change(change: TChange): void;\r\n} & AbstractCursorEvents;\r\n\r\n/**\r\n * Creates a new Change Stream instance. Normally created using {@link Collection#watch|Collection.watch()}.\r\n * @public\r\n */\r\nexport class ChangeStream<\r\n  TSchema extends Document = Document,\r\n  TChange extends Document = ChangeStreamDocument<TSchema>\r\n> extends TypedEventEmitter<ChangeStreamEvents<TSchema, TChange>> {\r\n  pipeline: Document[];\r\n  options: ChangeStreamOptions;\r\n  parent: MongoClient | Db | Collection;\r\n  namespace: MongoDBNamespace;\r\n  type: symbol;\r\n  /** @internal */\r\n  cursor: ChangeStreamCursor<TSchema, TChange>;\r\n  streamOptions?: CursorStreamOptions;\r\n  /** @internal */\r\n  [kCursorStream]?: Readable & AsyncIterable<TChange>;\r\n  /** @internal */\r\n  [kClosed]: boolean;\r\n  /** @internal */\r\n  [kMode]: false | 'iterator' | 'emitter';\r\n\r\n  /** @event */\r\n  static readonly RESPONSE = RESPONSE;\r\n  /** @event */\r\n  static readonly MORE = MORE;\r\n  /** @event */\r\n  static readonly INIT = INIT;\r\n  /** @event */\r\n  static readonly CLOSE = CLOSE;\r\n  /**\r\n   * Fired for each new matching change in the specified namespace. Attaching a `change`\r\n   * event listener to a Change Stream will switch the stream into flowing mode. Data will\r\n   * then be passed as soon as it is available.\r\n   * @event\r\n   */\r\n  static readonly CHANGE = CHANGE;\r\n  /** @event */\r\n  static readonly END = END;\r\n  /** @event */\r\n  static readonly ERROR = ERROR;\r\n  /**\r\n   * Emitted each time the change stream stores a new resume token.\r\n   * @event\r\n   */\r\n  static readonly RESUME_TOKEN_CHANGED = RESUME_TOKEN_CHANGED;\r\n\r\n  /**\r\n   * @internal\r\n   *\r\n   * @param parent - The parent object that created this change stream\r\n   * @param pipeline - An array of {@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline/|aggregation pipeline stages} through which to pass change stream documents\r\n   */\r\n  constructor(\r\n    parent: OperationParent,\r\n    pipeline: Document[] = [],\r\n    options: ChangeStreamOptions = {}\r\n  ) {\r\n    super();\r\n\r\n    this.pipeline = pipeline;\r\n    this.options = options;\r\n\r\n    if (parent instanceof Collection) {\r\n      this.type = CHANGE_DOMAIN_TYPES.COLLECTION;\r\n    } else if (parent instanceof Db) {\r\n      this.type = CHANGE_DOMAIN_TYPES.DATABASE;\r\n    } else if (parent instanceof MongoClient) {\r\n      this.type = CHANGE_DOMAIN_TYPES.CLUSTER;\r\n    } else {\r\n      throw new MongoChangeStreamError(\r\n        'Parent provided to ChangeStream constructor must be an instance of Collection, Db, or MongoClient'\r\n      );\r\n    }\r\n\r\n    this.parent = parent;\r\n    this.namespace = parent.s.namespace;\r\n    if (!this.options.readPreference && parent.readPreference) {\r\n      this.options.readPreference = parent.readPreference;\r\n    }\r\n\r\n    // Create contained Change Stream cursor\r\n    this.cursor = this._createChangeStreamCursor(options);\r\n\r\n    this[kClosed] = false;\r\n    this[kMode] = false;\r\n\r\n    // Listen for any `change` listeners being added to ChangeStream\r\n    this.on('newListener', eventName => {\r\n      if (eventName === 'change' && this.cursor && this.listenerCount('change') === 0) {\r\n        this._streamEvents(this.cursor);\r\n      }\r\n    });\r\n\r\n    this.on('removeListener', eventName => {\r\n      if (eventName === 'change' && this.listenerCount('change') === 0 && this.cursor) {\r\n        this[kCursorStream]?.removeAllListeners('data');\r\n      }\r\n    });\r\n  }\r\n\r\n  /** @internal */\r\n  get cursorStream(): (Readable & AsyncIterable<TChange>) | undefined {\r\n    return this[kCursorStream];\r\n  }\r\n\r\n  /** The cached resume token that is used to resume after the most recently returned change. */\r\n  get resumeToken(): ResumeToken {\r\n    return this.cursor?.resumeToken;\r\n  }\r\n\r\n  /** Check if there is any document still available in the Change Stream */\r\n  hasNext(): Promise<boolean>;\r\n  /** @deprecated Callbacks are deprecated and will be removed in the next major version. See [mongodb-legacy](https://github.com/mongodb-js/nodejs-mongodb-legacy) for migration assistance */\r\n  hasNext(callback: Callback<boolean>): void;\r\n  hasNext(callback?: Callback): Promise<boolean> | void {\r\n    this._setIsIterator();\r\n    return maybeCallback(async () => {\r\n      // Change streams must resume indefinitely while each resume event succeeds.\r\n      // This loop continues until either a change event is received or until a resume attempt\r\n      // fails.\r\n      // eslint-disable-next-line no-constant-condition\r\n      while (true) {\r\n        try {\r\n          const hasNext = await this.cursor.hasNext();\r\n          return hasNext;\r\n        } catch (error) {\r\n          try {\r\n            await this._processErrorIteratorMode(error);\r\n          } catch (error) {\r\n            try {\r\n              await this.close();\r\n            } catch {\r\n              // We are not concerned with errors from close()\r\n            }\r\n            throw error;\r\n          }\r\n        }\r\n      }\r\n    }, callback);\r\n  }\r\n\r\n  /** Get the next available document from the Change Stream. */\r\n  next(): Promise<TChange>;\r\n  /** @deprecated Callbacks are deprecated and will be removed in the next major version. See [mongodb-legacy](https://github.com/mongodb-js/nodejs-mongodb-legacy) for migration assistance */\r\n  next(callback: Callback<TChange>): void;\r\n  next(callback?: Callback<TChange>): Promise<TChange> | void {\r\n    this._setIsIterator();\r\n    return maybeCallback(async () => {\r\n      // Change streams must resume indefinitely while each resume event succeeds.\r\n      // This loop continues until either a change event is received or until a resume attempt\r\n      // fails.\r\n      // eslint-disable-next-line no-constant-condition\r\n      while (true) {\r\n        try {\r\n          const change = await this.cursor.next();\r\n          const processedChange = this._processChange(change ?? null);\r\n          return processedChange;\r\n        } catch (error) {\r\n          try {\r\n            await this._processErrorIteratorMode(error);\r\n          } catch (error) {\r\n            try {\r\n              await this.close();\r\n            } catch {\r\n              // We are not concerned with errors from close()\r\n            }\r\n            throw error;\r\n          }\r\n        }\r\n      }\r\n    }, callback);\r\n  }\r\n\r\n  /**\r\n   * Try to get the next available document from the Change Stream's cursor or `null` if an empty batch is returned\r\n   */\r\n  tryNext(): Promise<Document | null>;\r\n  /** @deprecated Callbacks are deprecated and will be removed in the next major version. See [mongodb-legacy](https://github.com/mongodb-js/nodejs-mongodb-legacy) for migration assistance */\r\n  tryNext(callback: Callback<Document | null>): void;\r\n  tryNext(callback?: Callback<Document | null>): Promise<Document | null> | void {\r\n    this._setIsIterator();\r\n    return maybeCallback(async () => {\r\n      // Change streams must resume indefinitely while each resume event succeeds.\r\n      // This loop continues until either a change event is received or until a resume attempt\r\n      // fails.\r\n      // eslint-disable-next-line no-constant-condition\r\n      while (true) {\r\n        try {\r\n          const change = await this.cursor.tryNext();\r\n          return change ?? null;\r\n        } catch (error) {\r\n          try {\r\n            await this._processErrorIteratorMode(error);\r\n          } catch (error) {\r\n            try {\r\n              await this.close();\r\n            } catch {\r\n              // We are not concerned with errors from close()\r\n            }\r\n            throw error;\r\n          }\r\n        }\r\n      }\r\n    }, callback);\r\n  }\r\n\r\n  async *[Symbol.asyncIterator](): AsyncGenerator<TChange, void, void> {\r\n    if (this.closed) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      // Change streams run indefinitely as long as errors are resumable\r\n      // So the only loop breaking condition is if `next()` throws\r\n      while (true) {\r\n        yield await this.next();\r\n      }\r\n    } finally {\r\n      try {\r\n        await this.close();\r\n      } catch {\r\n        // we're not concerned with errors from close()\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Is the cursor closed */\r\n  get closed(): boolean {\r\n    return this[kClosed] || this.cursor.closed;\r\n  }\r\n\r\n  /** Close the Change Stream */\r\n  close(): Promise<void>;\r\n  /** @deprecated Callbacks are deprecated and will be removed in the next major version. See [mongodb-legacy](https://github.com/mongodb-js/nodejs-mongodb-legacy) for migration assistance */\r\n  close(callback: Callback): void;\r\n  close(callback?: Callback): Promise<void> | void {\r\n    this[kClosed] = true;\r\n\r\n    return maybeCallback(async () => {\r\n      const cursor = this.cursor;\r\n      try {\r\n        await cursor.close();\r\n      } finally {\r\n        this._endStream();\r\n      }\r\n    }, callback);\r\n  }\r\n\r\n  /**\r\n   * Return a modified Readable stream including a possible transform method.\r\n   *\r\n   * NOTE: When using a Stream to process change stream events, the stream will\r\n   * NOT automatically resume in the case a resumable error is encountered.\r\n   *\r\n   * @throws MongoChangeStreamError if the underlying cursor or the change stream is closed\r\n   */\r\n  stream(options?: CursorStreamOptions): Readable & AsyncIterable<TChange> {\r\n    if (this.closed) {\r\n      throw new MongoChangeStreamError(CHANGESTREAM_CLOSED_ERROR);\r\n    }\r\n\r\n    this.streamOptions = options;\r\n    return this.cursor.stream(options);\r\n  }\r\n\r\n  /** @internal */\r\n  private _setIsEmitter(): void {\r\n    if (this[kMode] === 'iterator') {\r\n      // TODO(NODE-3485): Replace with MongoChangeStreamModeError\r\n      throw new MongoAPIError(\r\n        'ChangeStream cannot be used as an EventEmitter after being used as an iterator'\r\n      );\r\n    }\r\n    this[kMode] = 'emitter';\r\n  }\r\n\r\n  /** @internal */\r\n  private _setIsIterator(): void {\r\n    if (this[kMode] === 'emitter') {\r\n      // TODO(NODE-3485): Replace with MongoChangeStreamModeError\r\n      throw new MongoAPIError(\r\n        'ChangeStream cannot be used as an iterator after being used as an EventEmitter'\r\n      );\r\n    }\r\n    this[kMode] = 'iterator';\r\n  }\r\n\r\n  /**\r\n   * Create a new change stream cursor based on self's configuration\r\n   * @internal\r\n   */\r\n  private _createChangeStreamCursor(\r\n    options: ChangeStreamOptions | ChangeStreamCursorOptions\r\n  ): ChangeStreamCursor<TSchema, TChange> {\r\n    const changeStreamStageOptions = filterOptions(options, CHANGE_STREAM_OPTIONS);\r\n    if (this.type === CHANGE_DOMAIN_TYPES.CLUSTER) {\r\n      changeStreamStageOptions.allChangesForCluster = true;\r\n    }\r\n    const pipeline = [{ $changeStream: changeStreamStageOptions }, ...this.pipeline];\r\n\r\n    const client: MongoClient | null =\r\n      this.type === CHANGE_DOMAIN_TYPES.CLUSTER\r\n        ? (this.parent as MongoClient)\r\n        : this.type === CHANGE_DOMAIN_TYPES.DATABASE\r\n        ? (this.parent as Db).s.client\r\n        : this.type === CHANGE_DOMAIN_TYPES.COLLECTION\r\n        ? (this.parent as Collection).s.db.s.client\r\n        : null;\r\n\r\n    if (client == null) {\r\n      // This should never happen because of the assertion in the constructor\r\n      throw new MongoRuntimeError(\r\n        `Changestream type should only be one of cluster, database, collection. Found ${this.type.toString()}`\r\n      );\r\n    }\r\n\r\n    const changeStreamCursor = new ChangeStreamCursor<TSchema, TChange>(\r\n      client,\r\n      this.namespace,\r\n      pipeline,\r\n      options\r\n    );\r\n\r\n    for (const event of CHANGE_STREAM_EVENTS) {\r\n      changeStreamCursor.on(event, e => this.emit(event, e));\r\n    }\r\n\r\n    if (this.listenerCount(ChangeStream.CHANGE) > 0) {\r\n      this._streamEvents(changeStreamCursor);\r\n    }\r\n\r\n    return changeStreamCursor;\r\n  }\r\n\r\n  /** @internal */\r\n  private _closeEmitterModeWithError(error: AnyError): void {\r\n    this.emit(ChangeStream.ERROR, error);\r\n\r\n    this.close(() => {\r\n      // nothing to do\r\n    });\r\n  }\r\n\r\n  /** @internal */\r\n  private _streamEvents(cursor: ChangeStreamCursor<TSchema, TChange>): void {\r\n    this._setIsEmitter();\r\n    const stream = this[kCursorStream] ?? cursor.stream();\r\n    this[kCursorStream] = stream;\r\n    stream.on('data', change => {\r\n      try {\r\n        const processedChange = this._processChange(change);\r\n        this.emit(ChangeStream.CHANGE, processedChange);\r\n      } catch (error) {\r\n        this.emit(ChangeStream.ERROR, error);\r\n      }\r\n    });\r\n    stream.on('error', error => this._processErrorStreamMode(error));\r\n  }\r\n\r\n  /** @internal */\r\n  private _endStream(): void {\r\n    const cursorStream = this[kCursorStream];\r\n    if (cursorStream) {\r\n      ['data', 'close', 'end', 'error'].forEach(event => cursorStream.removeAllListeners(event));\r\n      cursorStream.destroy();\r\n    }\r\n\r\n    this[kCursorStream] = undefined;\r\n  }\r\n\r\n  /** @internal */\r\n  private _processChange(change: TChange | null): TChange {\r\n    if (this[kClosed]) {\r\n      // TODO(NODE-3485): Replace with MongoChangeStreamClosedError\r\n      throw new MongoAPIError(CHANGESTREAM_CLOSED_ERROR);\r\n    }\r\n\r\n    // a null change means the cursor has been notified, implicitly closing the change stream\r\n    if (change == null) {\r\n      // TODO(NODE-3485): Replace with MongoChangeStreamClosedError\r\n      throw new MongoRuntimeError(CHANGESTREAM_CLOSED_ERROR);\r\n    }\r\n\r\n    if (change && !change._id) {\r\n      throw new MongoChangeStreamError(NO_RESUME_TOKEN_ERROR);\r\n    }\r\n\r\n    // cache the resume token\r\n    this.cursor.cacheResumeToken(change._id);\r\n\r\n    // wipe the startAtOperationTime if there was one so that there won't be a conflict\r\n    // between resumeToken and startAtOperationTime if we need to reconnect the cursor\r\n    this.options.startAtOperationTime = undefined;\r\n\r\n    return change;\r\n  }\r\n\r\n  /** @internal */\r\n  private _processErrorStreamMode(changeStreamError: AnyError) {\r\n    // If the change stream has been closed explicitly, do not process error.\r\n    if (this[kClosed]) return;\r\n\r\n    if (isResumableError(changeStreamError, this.cursor.maxWireVersion)) {\r\n      this._endStream();\r\n      this.cursor.close().catch(() => null);\r\n\r\n      const topology = getTopology(this.parent);\r\n      topology.selectServer(this.cursor.readPreference, {}, serverSelectionError => {\r\n        if (serverSelectionError) return this._closeEmitterModeWithError(changeStreamError);\r\n        this.cursor = this._createChangeStreamCursor(this.cursor.resumeOptions);\r\n      });\r\n    } else {\r\n      this._closeEmitterModeWithError(changeStreamError);\r\n    }\r\n  }\r\n\r\n  /** @internal */\r\n  private async _processErrorIteratorMode(changeStreamError: AnyError) {\r\n    if (this[kClosed]) {\r\n      // TODO(NODE-3485): Replace with MongoChangeStreamClosedError\r\n      throw new MongoAPIError(CHANGESTREAM_CLOSED_ERROR);\r\n    }\r\n\r\n    if (!isResumableError(changeStreamError, this.cursor.maxWireVersion)) {\r\n      try {\r\n        await this.close();\r\n      } catch {\r\n        // ignore errors from close\r\n      }\r\n      throw changeStreamError;\r\n    }\r\n\r\n    await this.cursor.close().catch(() => null);\r\n    const topology = getTopology(this.parent);\r\n    try {\r\n      await topology.selectServerAsync(this.cursor.readPreference, {});\r\n      this.cursor = this._createChangeStreamCursor(this.cursor.resumeOptions);\r\n    } catch {\r\n      // if the topology can't reconnect, close the stream\r\n      await this.close();\r\n      throw changeStreamError;\r\n    }\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}