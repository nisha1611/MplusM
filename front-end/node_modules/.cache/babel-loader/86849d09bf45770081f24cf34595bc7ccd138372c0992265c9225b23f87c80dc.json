{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ConnectionPoolClearedEvent = exports.ConnectionCheckedInEvent = exports.ConnectionCheckedOutEvent = exports.ConnectionCheckOutFailedEvent = exports.ConnectionCheckOutStartedEvent = exports.ConnectionClosedEvent = exports.ConnectionReadyEvent = exports.ConnectionCreatedEvent = exports.ConnectionPoolClosedEvent = exports.ConnectionPoolReadyEvent = exports.ConnectionPoolCreatedEvent = exports.ConnectionPoolMonitoringEvent = void 0;\n/**\r\n * The base export class for all monitoring events published from the connection pool\r\n * @public\r\n * @category Event\r\n */\nclass ConnectionPoolMonitoringEvent {\n  /** @internal */\n  constructor(pool) {\n    this.time = new Date();\n    this.address = pool.address;\n  }\n}\nexports.ConnectionPoolMonitoringEvent = ConnectionPoolMonitoringEvent;\n/**\r\n * An event published when a connection pool is created\r\n * @public\r\n * @category Event\r\n */\nclass ConnectionPoolCreatedEvent extends ConnectionPoolMonitoringEvent {\n  /** @internal */\n  constructor(pool) {\n    super(pool);\n    this.options = pool.options;\n  }\n}\nexports.ConnectionPoolCreatedEvent = ConnectionPoolCreatedEvent;\n/**\r\n * An event published when a connection pool is ready\r\n * @public\r\n * @category Event\r\n */\nclass ConnectionPoolReadyEvent extends ConnectionPoolMonitoringEvent {\n  /** @internal */\n  constructor(pool) {\n    super(pool);\n  }\n}\nexports.ConnectionPoolReadyEvent = ConnectionPoolReadyEvent;\n/**\r\n * An event published when a connection pool is closed\r\n * @public\r\n * @category Event\r\n */\nclass ConnectionPoolClosedEvent extends ConnectionPoolMonitoringEvent {\n  /** @internal */\n  constructor(pool) {\n    super(pool);\n  }\n}\nexports.ConnectionPoolClosedEvent = ConnectionPoolClosedEvent;\n/**\r\n * An event published when a connection pool creates a new connection\r\n * @public\r\n * @category Event\r\n */\nclass ConnectionCreatedEvent extends ConnectionPoolMonitoringEvent {\n  /** @internal */\n  constructor(pool, connection) {\n    super(pool);\n    this.connectionId = connection.id;\n  }\n}\nexports.ConnectionCreatedEvent = ConnectionCreatedEvent;\n/**\r\n * An event published when a connection is ready for use\r\n * @public\r\n * @category Event\r\n */\nclass ConnectionReadyEvent extends ConnectionPoolMonitoringEvent {\n  /** @internal */\n  constructor(pool, connection) {\n    super(pool);\n    this.connectionId = connection.id;\n  }\n}\nexports.ConnectionReadyEvent = ConnectionReadyEvent;\n/**\r\n * An event published when a connection is closed\r\n * @public\r\n * @category Event\r\n */\nclass ConnectionClosedEvent extends ConnectionPoolMonitoringEvent {\n  /** @internal */\n  constructor(pool, connection, reason) {\n    super(pool);\n    this.connectionId = connection.id;\n    this.reason = reason || 'unknown';\n    this.serviceId = connection.serviceId;\n  }\n}\nexports.ConnectionClosedEvent = ConnectionClosedEvent;\n/**\r\n * An event published when a request to check a connection out begins\r\n * @public\r\n * @category Event\r\n */\nclass ConnectionCheckOutStartedEvent extends ConnectionPoolMonitoringEvent {\n  /** @internal */\n  constructor(pool) {\n    super(pool);\n  }\n}\nexports.ConnectionCheckOutStartedEvent = ConnectionCheckOutStartedEvent;\n/**\r\n * An event published when a request to check a connection out fails\r\n * @public\r\n * @category Event\r\n */\nclass ConnectionCheckOutFailedEvent extends ConnectionPoolMonitoringEvent {\n  /** @internal */\n  constructor(pool, reason) {\n    super(pool);\n    this.reason = reason;\n  }\n}\nexports.ConnectionCheckOutFailedEvent = ConnectionCheckOutFailedEvent;\n/**\r\n * An event published when a connection is checked out of the connection pool\r\n * @public\r\n * @category Event\r\n */\nclass ConnectionCheckedOutEvent extends ConnectionPoolMonitoringEvent {\n  /** @internal */\n  constructor(pool, connection) {\n    super(pool);\n    this.connectionId = connection.id;\n  }\n}\nexports.ConnectionCheckedOutEvent = ConnectionCheckedOutEvent;\n/**\r\n * An event published when a connection is checked into the connection pool\r\n * @public\r\n * @category Event\r\n */\nclass ConnectionCheckedInEvent extends ConnectionPoolMonitoringEvent {\n  /** @internal */\n  constructor(pool, connection) {\n    super(pool);\n    this.connectionId = connection.id;\n  }\n}\nexports.ConnectionCheckedInEvent = ConnectionCheckedInEvent;\n/**\r\n * An event published when a connection pool is cleared\r\n * @public\r\n * @category Event\r\n */\nclass ConnectionPoolClearedEvent extends ConnectionPoolMonitoringEvent {\n  /** @internal */\n  constructor(pool) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    super(pool);\n    this.serviceId = options.serviceId;\n    this.interruptInUseConnections = options.interruptInUseConnections;\n  }\n}\nexports.ConnectionPoolClearedEvent = ConnectionPoolClearedEvent;","map":{"version":3,"mappings":";;;;;;AAKA;;;;;AAKA,MAAaA,6BAA6B;EAMxC;EACAC,YAAYC,IAAoB;IAC9B,IAAI,CAACC,IAAI,GAAG,IAAIC,IAAI,EAAE;IACtB,IAAI,CAACC,OAAO,GAAGH,IAAI,CAACG,OAAO;EAC7B;;AAVFC;AAaA;;;;;AAKA,MAAaC,0BAA2B,SAAQP,6BAA6B;EAI3E;EACAC,YAAYC,IAAoB;IAC9B,KAAK,CAACA,IAAI,CAAC;IACX,IAAI,CAACM,OAAO,GAAGN,IAAI,CAACM,OAAO;EAC7B;;AARFF;AAWA;;;;;AAKA,MAAaG,wBAAyB,SAAQT,6BAA6B;EACzE;EACAC,YAAYC,IAAoB;IAC9B,KAAK,CAACA,IAAI,CAAC;EACb;;AAJFI;AAOA;;;;;AAKA,MAAaI,yBAA0B,SAAQV,6BAA6B;EAC1E;EACAC,YAAYC,IAAoB;IAC9B,KAAK,CAACA,IAAI,CAAC;EACb;;AAJFI;AAOA;;;;;AAKA,MAAaK,sBAAuB,SAAQX,6BAA6B;EAIvE;EACAC,YAAYC,IAAoB,EAAEU,UAAwC;IACxE,KAAK,CAACV,IAAI,CAAC;IACX,IAAI,CAACW,YAAY,GAAGD,UAAU,CAACE,EAAE;EACnC;;AARFR;AAWA;;;;;AAKA,MAAaS,oBAAqB,SAAQf,6BAA6B;EAIrE;EACAC,YAAYC,IAAoB,EAAEU,UAAsB;IACtD,KAAK,CAACV,IAAI,CAAC;IACX,IAAI,CAACW,YAAY,GAAGD,UAAU,CAACE,EAAE;EACnC;;AARFR;AAWA;;;;;AAKA,MAAaU,qBAAsB,SAAQhB,6BAA6B;EAOtE;EACAC,YACEC,IAAoB,EACpBU,UAAgD,EAChDK,MAAc;IAEd,KAAK,CAACf,IAAI,CAAC;IACX,IAAI,CAACW,YAAY,GAAGD,UAAU,CAACE,EAAE;IACjC,IAAI,CAACG,MAAM,GAAGA,MAAM,IAAI,SAAS;IACjC,IAAI,CAACC,SAAS,GAAGN,UAAU,CAACM,SAAS;EACvC;;AAjBFZ;AAoBA;;;;;AAKA,MAAaa,8BAA+B,SAAQnB,6BAA6B;EAC/E;EACAC,YAAYC,IAAoB;IAC9B,KAAK,CAACA,IAAI,CAAC;EACb;;AAJFI;AAOA;;;;;AAKA,MAAac,6BAA8B,SAAQpB,6BAA6B;EAI9E;EACAC,YAAYC,IAAoB,EAAEe,MAAyB;IACzD,KAAK,CAACf,IAAI,CAAC;IACX,IAAI,CAACe,MAAM,GAAGA,MAAM;EACtB;;AARFX;AAWA;;;;;AAKA,MAAae,yBAA0B,SAAQrB,6BAA6B;EAI1E;EACAC,YAAYC,IAAoB,EAAEU,UAAsB;IACtD,KAAK,CAACV,IAAI,CAAC;IACX,IAAI,CAACW,YAAY,GAAGD,UAAU,CAACE,EAAE;EACnC;;AARFR;AAWA;;;;;AAKA,MAAagB,wBAAyB,SAAQtB,6BAA6B;EAIzE;EACAC,YAAYC,IAAoB,EAAEU,UAAsB;IACtD,KAAK,CAACV,IAAI,CAAC;IACX,IAAI,CAACW,YAAY,GAAGD,UAAU,CAACE,EAAE;EACnC;;AARFR;AAWA;;;;;AAKA,MAAaiB,0BAA2B,SAAQvB,6BAA6B;EAM3E;EACAC,YACEC,IAAoB,EACuD;IAAA,IAA3EM,8EAAyE,EAAE;IAE3E,KAAK,CAACN,IAAI,CAAC;IACX,IAAI,CAACgB,SAAS,GAAGV,OAAO,CAACU,SAAS;IAClC,IAAI,CAACM,yBAAyB,GAAGhB,OAAO,CAACgB,yBAAyB;EACpE;;AAdFlB","names":["ConnectionPoolMonitoringEvent","constructor","pool","time","Date","address","exports","ConnectionPoolCreatedEvent","options","ConnectionPoolReadyEvent","ConnectionPoolClosedEvent","ConnectionCreatedEvent","connection","connectionId","id","ConnectionReadyEvent","ConnectionClosedEvent","reason","serviceId","ConnectionCheckOutStartedEvent","ConnectionCheckOutFailedEvent","ConnectionCheckedOutEvent","ConnectionCheckedInEvent","ConnectionPoolClearedEvent","interruptInUseConnections"],"sources":["C:\\Users\\91930\\Desktop\\Github projects\\Pharmacy Demo\\back-end\\node_modules\\mongodb\\src\\cmap\\connection_pool_events.ts"],"sourcesContent":["import type { ObjectId } from '../bson';\r\nimport type { AnyError } from '../error';\r\nimport type { Connection } from './connection';\r\nimport type { ConnectionPool, ConnectionPoolOptions } from './connection_pool';\r\n\r\n/**\r\n * The base export class for all monitoring events published from the connection pool\r\n * @public\r\n * @category Event\r\n */\r\nexport class ConnectionPoolMonitoringEvent {\r\n  /** A timestamp when the event was created  */\r\n  time: Date;\r\n  /** The address (host/port pair) of the pool */\r\n  address: string;\r\n\r\n  /** @internal */\r\n  constructor(pool: ConnectionPool) {\r\n    this.time = new Date();\r\n    this.address = pool.address;\r\n  }\r\n}\r\n\r\n/**\r\n * An event published when a connection pool is created\r\n * @public\r\n * @category Event\r\n */\r\nexport class ConnectionPoolCreatedEvent extends ConnectionPoolMonitoringEvent {\r\n  /** The options used to create this connection pool */\r\n  options?: ConnectionPoolOptions;\r\n\r\n  /** @internal */\r\n  constructor(pool: ConnectionPool) {\r\n    super(pool);\r\n    this.options = pool.options;\r\n  }\r\n}\r\n\r\n/**\r\n * An event published when a connection pool is ready\r\n * @public\r\n * @category Event\r\n */\r\nexport class ConnectionPoolReadyEvent extends ConnectionPoolMonitoringEvent {\r\n  /** @internal */\r\n  constructor(pool: ConnectionPool) {\r\n    super(pool);\r\n  }\r\n}\r\n\r\n/**\r\n * An event published when a connection pool is closed\r\n * @public\r\n * @category Event\r\n */\r\nexport class ConnectionPoolClosedEvent extends ConnectionPoolMonitoringEvent {\r\n  /** @internal */\r\n  constructor(pool: ConnectionPool) {\r\n    super(pool);\r\n  }\r\n}\r\n\r\n/**\r\n * An event published when a connection pool creates a new connection\r\n * @public\r\n * @category Event\r\n */\r\nexport class ConnectionCreatedEvent extends ConnectionPoolMonitoringEvent {\r\n  /** A monotonically increasing, per-pool id for the newly created connection */\r\n  connectionId: number | '<monitor>';\r\n\r\n  /** @internal */\r\n  constructor(pool: ConnectionPool, connection: { id: number | '<monitor>' }) {\r\n    super(pool);\r\n    this.connectionId = connection.id;\r\n  }\r\n}\r\n\r\n/**\r\n * An event published when a connection is ready for use\r\n * @public\r\n * @category Event\r\n */\r\nexport class ConnectionReadyEvent extends ConnectionPoolMonitoringEvent {\r\n  /** The id of the connection */\r\n  connectionId: number | '<monitor>';\r\n\r\n  /** @internal */\r\n  constructor(pool: ConnectionPool, connection: Connection) {\r\n    super(pool);\r\n    this.connectionId = connection.id;\r\n  }\r\n}\r\n\r\n/**\r\n * An event published when a connection is closed\r\n * @public\r\n * @category Event\r\n */\r\nexport class ConnectionClosedEvent extends ConnectionPoolMonitoringEvent {\r\n  /** The id of the connection */\r\n  connectionId: number | '<monitor>';\r\n  /** The reason the connection was closed */\r\n  reason: string;\r\n  serviceId?: ObjectId;\r\n\r\n  /** @internal */\r\n  constructor(\r\n    pool: ConnectionPool,\r\n    connection: Pick<Connection, 'id' | 'serviceId'>,\r\n    reason: string\r\n  ) {\r\n    super(pool);\r\n    this.connectionId = connection.id;\r\n    this.reason = reason || 'unknown';\r\n    this.serviceId = connection.serviceId;\r\n  }\r\n}\r\n\r\n/**\r\n * An event published when a request to check a connection out begins\r\n * @public\r\n * @category Event\r\n */\r\nexport class ConnectionCheckOutStartedEvent extends ConnectionPoolMonitoringEvent {\r\n  /** @internal */\r\n  constructor(pool: ConnectionPool) {\r\n    super(pool);\r\n  }\r\n}\r\n\r\n/**\r\n * An event published when a request to check a connection out fails\r\n * @public\r\n * @category Event\r\n */\r\nexport class ConnectionCheckOutFailedEvent extends ConnectionPoolMonitoringEvent {\r\n  /** The reason the attempt to check out failed */\r\n  reason: AnyError | string;\r\n\r\n  /** @internal */\r\n  constructor(pool: ConnectionPool, reason: AnyError | string) {\r\n    super(pool);\r\n    this.reason = reason;\r\n  }\r\n}\r\n\r\n/**\r\n * An event published when a connection is checked out of the connection pool\r\n * @public\r\n * @category Event\r\n */\r\nexport class ConnectionCheckedOutEvent extends ConnectionPoolMonitoringEvent {\r\n  /** The id of the connection */\r\n  connectionId: number | '<monitor>';\r\n\r\n  /** @internal */\r\n  constructor(pool: ConnectionPool, connection: Connection) {\r\n    super(pool);\r\n    this.connectionId = connection.id;\r\n  }\r\n}\r\n\r\n/**\r\n * An event published when a connection is checked into the connection pool\r\n * @public\r\n * @category Event\r\n */\r\nexport class ConnectionCheckedInEvent extends ConnectionPoolMonitoringEvent {\r\n  /** The id of the connection */\r\n  connectionId: number | '<monitor>';\r\n\r\n  /** @internal */\r\n  constructor(pool: ConnectionPool, connection: Connection) {\r\n    super(pool);\r\n    this.connectionId = connection.id;\r\n  }\r\n}\r\n\r\n/**\r\n * An event published when a connection pool is cleared\r\n * @public\r\n * @category Event\r\n */\r\nexport class ConnectionPoolClearedEvent extends ConnectionPoolMonitoringEvent {\r\n  /** @internal */\r\n  serviceId?: ObjectId;\r\n\r\n  interruptInUseConnections?: boolean;\r\n\r\n  /** @internal */\r\n  constructor(\r\n    pool: ConnectionPool,\r\n    options: { serviceId?: ObjectId; interruptInUseConnections?: boolean } = {}\r\n  ) {\r\n    super(pool);\r\n    this.serviceId = options.serviceId;\r\n    this.interruptInUseConnections = options.interruptInUseConnections;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}