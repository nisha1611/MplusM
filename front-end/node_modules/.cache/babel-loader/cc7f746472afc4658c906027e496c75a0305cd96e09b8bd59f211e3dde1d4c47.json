{"ast":null,"code":"'use strict';\n\nconst SchemaTypeOptions = require('./SchemaTypeOptions');\n\n/**\r\n * The options defined on a string schematype.\r\n *\r\n * #### Example:\r\n *\r\n *     const schema = new Schema({ name: String });\r\n *     schema.path('name').options; // SchemaStringOptions instance\r\n *\r\n * @api public\r\n * @inherits SchemaTypeOptions\r\n * @constructor SchemaStringOptions\r\n */\n\nclass SchemaStringOptions extends SchemaTypeOptions {}\nconst opts = require('./propertyOptions');\n\n/**\r\n * Array of allowed values for this path\r\n *\r\n * @api public\r\n * @property enum\r\n * @memberOf SchemaStringOptions\r\n * @type {Array}\r\n * @instance\r\n */\n\nObject.defineProperty(SchemaStringOptions.prototype, 'enum', opts);\n\n/**\r\n * Attach a validator that succeeds if the data string matches the given regular\r\n * expression, and fails otherwise.\r\n *\r\n * @api public\r\n * @property match\r\n * @memberOf SchemaStringOptions\r\n * @type {RegExp}\r\n * @instance\r\n */\n\nObject.defineProperty(SchemaStringOptions.prototype, 'match', opts);\n\n/**\r\n * If truthy, Mongoose will add a custom setter that lowercases this string\r\n * using JavaScript's built-in `String#toLowerCase()`.\r\n *\r\n * @api public\r\n * @property lowercase\r\n * @memberOf SchemaStringOptions\r\n * @type {Boolean}\r\n * @instance\r\n */\n\nObject.defineProperty(SchemaStringOptions.prototype, 'lowercase', opts);\n\n/**\r\n * If truthy, Mongoose will add a custom setter that removes leading and trailing\r\n * whitespace using [JavaScript's built-in `String#trim()`](https://masteringjs.io/tutorials/fundamentals/trim-string).\r\n *\r\n * @api public\r\n * @property trim\r\n * @memberOf SchemaStringOptions\r\n * @type {Boolean}\r\n * @instance\r\n */\n\nObject.defineProperty(SchemaStringOptions.prototype, 'trim', opts);\n\n/**\r\n * If truthy, Mongoose will add a custom setter that uppercases this string\r\n * using JavaScript's built-in [`String#toUpperCase()`](https://masteringjs.io/tutorials/fundamentals/uppercase).\r\n *\r\n * @api public\r\n * @property uppercase\r\n * @memberOf SchemaStringOptions\r\n * @type {Boolean}\r\n * @instance\r\n */\n\nObject.defineProperty(SchemaStringOptions.prototype, 'uppercase', opts);\n\n/**\r\n * If set, Mongoose will add a custom validator that ensures the given\r\n * string's `length` is at least the given number.\r\n *\r\n * Mongoose supports two different spellings for this option: `minLength` and `minlength`.\r\n * `minLength` is the recommended way to specify this option, but Mongoose also supports\r\n * `minlength` (lowercase \"l\").\r\n *\r\n * @api public\r\n * @property minLength\r\n * @memberOf SchemaStringOptions\r\n * @type {Number}\r\n * @instance\r\n */\n\nObject.defineProperty(SchemaStringOptions.prototype, 'minLength', opts);\nObject.defineProperty(SchemaStringOptions.prototype, 'minlength', opts);\n\n/**\r\n * If set, Mongoose will add a custom validator that ensures the given\r\n * string's `length` is at most the given number.\r\n *\r\n * Mongoose supports two different spellings for this option: `maxLength` and `maxlength`.\r\n * `maxLength` is the recommended way to specify this option, but Mongoose also supports\r\n * `maxlength` (lowercase \"l\").\r\n *\r\n * @api public\r\n * @property maxLength\r\n * @memberOf SchemaStringOptions\r\n * @type {Number}\r\n * @instance\r\n */\n\nObject.defineProperty(SchemaStringOptions.prototype, 'maxLength', opts);\nObject.defineProperty(SchemaStringOptions.prototype, 'maxlength', opts);\n\n/**\r\n * Sets default [populate options](/docs/populate.html#query-conditions).\r\n *\r\n * @api public\r\n * @property populate\r\n * @memberOf SchemaStringOptions\r\n * @type {Object}\r\n * @instance\r\n */\n\nObject.defineProperty(SchemaStringOptions.prototype, 'populate', opts);\n\n/*!\r\n * ignore\r\n */\n\nmodule.exports = SchemaStringOptions;","map":{"version":3,"names":["SchemaTypeOptions","require","SchemaStringOptions","opts","Object","defineProperty","prototype","module","exports"],"sources":["C:/Users/91930/Desktop/Github projects/Pharmacy Demo/back-end/node_modules/mongoose/lib/options/SchemaStringOptions.js"],"sourcesContent":["'use strict';\r\n\r\nconst SchemaTypeOptions = require('./SchemaTypeOptions');\r\n\r\n/**\r\n * The options defined on a string schematype.\r\n *\r\n * #### Example:\r\n *\r\n *     const schema = new Schema({ name: String });\r\n *     schema.path('name').options; // SchemaStringOptions instance\r\n *\r\n * @api public\r\n * @inherits SchemaTypeOptions\r\n * @constructor SchemaStringOptions\r\n */\r\n\r\nclass SchemaStringOptions extends SchemaTypeOptions {}\r\n\r\nconst opts = require('./propertyOptions');\r\n\r\n/**\r\n * Array of allowed values for this path\r\n *\r\n * @api public\r\n * @property enum\r\n * @memberOf SchemaStringOptions\r\n * @type {Array}\r\n * @instance\r\n */\r\n\r\nObject.defineProperty(SchemaStringOptions.prototype, 'enum', opts);\r\n\r\n/**\r\n * Attach a validator that succeeds if the data string matches the given regular\r\n * expression, and fails otherwise.\r\n *\r\n * @api public\r\n * @property match\r\n * @memberOf SchemaStringOptions\r\n * @type {RegExp}\r\n * @instance\r\n */\r\n\r\nObject.defineProperty(SchemaStringOptions.prototype, 'match', opts);\r\n\r\n/**\r\n * If truthy, Mongoose will add a custom setter that lowercases this string\r\n * using JavaScript's built-in `String#toLowerCase()`.\r\n *\r\n * @api public\r\n * @property lowercase\r\n * @memberOf SchemaStringOptions\r\n * @type {Boolean}\r\n * @instance\r\n */\r\n\r\nObject.defineProperty(SchemaStringOptions.prototype, 'lowercase', opts);\r\n\r\n/**\r\n * If truthy, Mongoose will add a custom setter that removes leading and trailing\r\n * whitespace using [JavaScript's built-in `String#trim()`](https://masteringjs.io/tutorials/fundamentals/trim-string).\r\n *\r\n * @api public\r\n * @property trim\r\n * @memberOf SchemaStringOptions\r\n * @type {Boolean}\r\n * @instance\r\n */\r\n\r\nObject.defineProperty(SchemaStringOptions.prototype, 'trim', opts);\r\n\r\n/**\r\n * If truthy, Mongoose will add a custom setter that uppercases this string\r\n * using JavaScript's built-in [`String#toUpperCase()`](https://masteringjs.io/tutorials/fundamentals/uppercase).\r\n *\r\n * @api public\r\n * @property uppercase\r\n * @memberOf SchemaStringOptions\r\n * @type {Boolean}\r\n * @instance\r\n */\r\n\r\nObject.defineProperty(SchemaStringOptions.prototype, 'uppercase', opts);\r\n\r\n/**\r\n * If set, Mongoose will add a custom validator that ensures the given\r\n * string's `length` is at least the given number.\r\n *\r\n * Mongoose supports two different spellings for this option: `minLength` and `minlength`.\r\n * `minLength` is the recommended way to specify this option, but Mongoose also supports\r\n * `minlength` (lowercase \"l\").\r\n *\r\n * @api public\r\n * @property minLength\r\n * @memberOf SchemaStringOptions\r\n * @type {Number}\r\n * @instance\r\n */\r\n\r\nObject.defineProperty(SchemaStringOptions.prototype, 'minLength', opts);\r\nObject.defineProperty(SchemaStringOptions.prototype, 'minlength', opts);\r\n\r\n/**\r\n * If set, Mongoose will add a custom validator that ensures the given\r\n * string's `length` is at most the given number.\r\n *\r\n * Mongoose supports two different spellings for this option: `maxLength` and `maxlength`.\r\n * `maxLength` is the recommended way to specify this option, but Mongoose also supports\r\n * `maxlength` (lowercase \"l\").\r\n *\r\n * @api public\r\n * @property maxLength\r\n * @memberOf SchemaStringOptions\r\n * @type {Number}\r\n * @instance\r\n */\r\n\r\nObject.defineProperty(SchemaStringOptions.prototype, 'maxLength', opts);\r\nObject.defineProperty(SchemaStringOptions.prototype, 'maxlength', opts);\r\n\r\n/**\r\n * Sets default [populate options](/docs/populate.html#query-conditions).\r\n *\r\n * @api public\r\n * @property populate\r\n * @memberOf SchemaStringOptions\r\n * @type {Object}\r\n * @instance\r\n */\r\n\r\nObject.defineProperty(SchemaStringOptions.prototype, 'populate', opts);\r\n\r\n/*!\r\n * ignore\r\n */\r\n\r\nmodule.exports = SchemaStringOptions;\r\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,iBAAiB,GAAGC,OAAO,CAAC,qBAAqB,CAAC;;AAExD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,mBAAmB,SAASF,iBAAiB,CAAC;AAEpD,MAAMG,IAAI,GAAGF,OAAO,CAAC,mBAAmB,CAAC;;AAEzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAG,MAAM,CAACC,cAAc,CAACH,mBAAmB,CAACI,SAAS,EAAE,MAAM,EAAEH,IAAI,CAAC;;AAElE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAC,MAAM,CAACC,cAAc,CAACH,mBAAmB,CAACI,SAAS,EAAE,OAAO,EAAEH,IAAI,CAAC;;AAEnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAC,MAAM,CAACC,cAAc,CAACH,mBAAmB,CAACI,SAAS,EAAE,WAAW,EAAEH,IAAI,CAAC;;AAEvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAC,MAAM,CAACC,cAAc,CAACH,mBAAmB,CAACI,SAAS,EAAE,MAAM,EAAEH,IAAI,CAAC;;AAElE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAC,MAAM,CAACC,cAAc,CAACH,mBAAmB,CAACI,SAAS,EAAE,WAAW,EAAEH,IAAI,CAAC;;AAEvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAC,MAAM,CAACC,cAAc,CAACH,mBAAmB,CAACI,SAAS,EAAE,WAAW,EAAEH,IAAI,CAAC;AACvEC,MAAM,CAACC,cAAc,CAACH,mBAAmB,CAACI,SAAS,EAAE,WAAW,EAAEH,IAAI,CAAC;;AAEvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAC,MAAM,CAACC,cAAc,CAACH,mBAAmB,CAACI,SAAS,EAAE,WAAW,EAAEH,IAAI,CAAC;AACvEC,MAAM,CAACC,cAAc,CAACH,mBAAmB,CAACI,SAAS,EAAE,WAAW,EAAEH,IAAI,CAAC;;AAEvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAC,MAAM,CAACC,cAAc,CAACH,mBAAmB,CAACI,SAAS,EAAE,UAAU,EAAEH,IAAI,CAAC;;AAEtE;AACA;AACA;;AAEAI,MAAM,CAACC,OAAO,GAAGN,mBAAmB"},"metadata":{},"sourceType":"script","externalDependencies":[]}