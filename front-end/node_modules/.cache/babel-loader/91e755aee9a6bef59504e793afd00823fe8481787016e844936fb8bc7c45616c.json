{"ast":null,"code":"/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Tobias Koppers @sokra\r\n*/\n\n\"use strict\";\n\nconst DependencyTemplate = require(\"../DependencyTemplate\");\nconst makeSerializable = require(\"../util/makeSerializable\");\nconst NullDependency = require(\"./NullDependency\");\n\n/** @typedef {import(\"webpack-sources\").ReplaceSource} ReplaceSource */\n/** @typedef {import(\"../Dependency\")} Dependency */\n/** @typedef {import(\"../DependencyTemplate\").DependencyTemplateContext} DependencyTemplateContext */\n\nclass AMDRequireArrayDependency extends NullDependency {\n  constructor(depsArray, range) {\n    super();\n    this.depsArray = depsArray;\n    this.range = range;\n  }\n  get type() {\n    return \"amd require array\";\n  }\n  get category() {\n    return \"amd\";\n  }\n  serialize(context) {\n    const {\n      write\n    } = context;\n    write(this.depsArray);\n    write(this.range);\n    super.serialize(context);\n  }\n  deserialize(context) {\n    const {\n      read\n    } = context;\n    this.depsArray = read();\n    this.range = read();\n    super.deserialize(context);\n  }\n}\nmakeSerializable(AMDRequireArrayDependency, \"webpack/lib/dependencies/AMDRequireArrayDependency\");\nAMDRequireArrayDependency.Template = class AMDRequireArrayDependencyTemplate extends DependencyTemplate {\n  /**\r\n   * @param {Dependency} dependency the dependency for which the template should be applied\r\n   * @param {ReplaceSource} source the current replace source which can be modified\r\n   * @param {DependencyTemplateContext} templateContext the context object\r\n   * @returns {void}\r\n   */\n  apply(dependency, source, templateContext) {\n    const dep = /** @type {AMDRequireArrayDependency} */dependency;\n    const content = this.getContent(dep, templateContext);\n    source.replace(dep.range[0], dep.range[1] - 1, content);\n  }\n  getContent(dep, templateContext) {\n    const requires = dep.depsArray.map(dependency => {\n      return this.contentForDependency(dependency, templateContext);\n    });\n    return `[${requires.join(\", \")}]`;\n  }\n  contentForDependency(dep, _ref) {\n    let {\n      runtimeTemplate,\n      moduleGraph,\n      chunkGraph,\n      runtimeRequirements\n    } = _ref;\n    if (typeof dep === \"string\") {\n      return dep;\n    }\n    if (dep.localModule) {\n      return dep.localModule.variableName();\n    } else {\n      return runtimeTemplate.moduleExports({\n        module: moduleGraph.getModule(dep),\n        chunkGraph,\n        request: dep.request,\n        runtimeRequirements\n      });\n    }\n  }\n};\nmodule.exports = AMDRequireArrayDependency;","map":{"version":3,"names":["DependencyTemplate","require","makeSerializable","NullDependency","AMDRequireArrayDependency","constructor","depsArray","range","type","category","serialize","context","write","deserialize","read","Template","AMDRequireArrayDependencyTemplate","apply","dependency","source","templateContext","dep","content","getContent","replace","requires","map","contentForDependency","join","runtimeTemplate","moduleGraph","chunkGraph","runtimeRequirements","localModule","variableName","moduleExports","module","getModule","request","exports"],"sources":["C:/Users/91930/Desktop/Github projects/Pharmacy Demo/front-end/node_modules/webpack/lib/dependencies/AMDRequireArrayDependency.js"],"sourcesContent":["/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Tobias Koppers @sokra\r\n*/\r\n\r\n\"use strict\";\r\n\r\nconst DependencyTemplate = require(\"../DependencyTemplate\");\r\nconst makeSerializable = require(\"../util/makeSerializable\");\r\nconst NullDependency = require(\"./NullDependency\");\r\n\r\n/** @typedef {import(\"webpack-sources\").ReplaceSource} ReplaceSource */\r\n/** @typedef {import(\"../Dependency\")} Dependency */\r\n/** @typedef {import(\"../DependencyTemplate\").DependencyTemplateContext} DependencyTemplateContext */\r\n\r\nclass AMDRequireArrayDependency extends NullDependency {\r\n\tconstructor(depsArray, range) {\r\n\t\tsuper();\r\n\r\n\t\tthis.depsArray = depsArray;\r\n\t\tthis.range = range;\r\n\t}\r\n\r\n\tget type() {\r\n\t\treturn \"amd require array\";\r\n\t}\r\n\r\n\tget category() {\r\n\t\treturn \"amd\";\r\n\t}\r\n\r\n\tserialize(context) {\r\n\t\tconst { write } = context;\r\n\r\n\t\twrite(this.depsArray);\r\n\t\twrite(this.range);\r\n\r\n\t\tsuper.serialize(context);\r\n\t}\r\n\r\n\tdeserialize(context) {\r\n\t\tconst { read } = context;\r\n\r\n\t\tthis.depsArray = read();\r\n\t\tthis.range = read();\r\n\r\n\t\tsuper.deserialize(context);\r\n\t}\r\n}\r\n\r\nmakeSerializable(\r\n\tAMDRequireArrayDependency,\r\n\t\"webpack/lib/dependencies/AMDRequireArrayDependency\"\r\n);\r\n\r\nAMDRequireArrayDependency.Template = class AMDRequireArrayDependencyTemplate extends (\r\n\tDependencyTemplate\r\n) {\r\n\t/**\r\n\t * @param {Dependency} dependency the dependency for which the template should be applied\r\n\t * @param {ReplaceSource} source the current replace source which can be modified\r\n\t * @param {DependencyTemplateContext} templateContext the context object\r\n\t * @returns {void}\r\n\t */\r\n\tapply(dependency, source, templateContext) {\r\n\t\tconst dep = /** @type {AMDRequireArrayDependency} */ (dependency);\r\n\t\tconst content = this.getContent(dep, templateContext);\r\n\t\tsource.replace(dep.range[0], dep.range[1] - 1, content);\r\n\t}\r\n\r\n\tgetContent(dep, templateContext) {\r\n\t\tconst requires = dep.depsArray.map(dependency => {\r\n\t\t\treturn this.contentForDependency(dependency, templateContext);\r\n\t\t});\r\n\t\treturn `[${requires.join(\", \")}]`;\r\n\t}\r\n\r\n\tcontentForDependency(\r\n\t\tdep,\r\n\t\t{ runtimeTemplate, moduleGraph, chunkGraph, runtimeRequirements }\r\n\t) {\r\n\t\tif (typeof dep === \"string\") {\r\n\t\t\treturn dep;\r\n\t\t}\r\n\r\n\t\tif (dep.localModule) {\r\n\t\t\treturn dep.localModule.variableName();\r\n\t\t} else {\r\n\t\t\treturn runtimeTemplate.moduleExports({\r\n\t\t\t\tmodule: moduleGraph.getModule(dep),\r\n\t\t\t\tchunkGraph,\r\n\t\t\t\trequest: dep.request,\r\n\t\t\t\truntimeRequirements\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n};\r\n\r\nmodule.exports = AMDRequireArrayDependency;\r\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ,MAAMA,kBAAkB,GAAGC,OAAO,CAAC,uBAAuB,CAAC;AAC3D,MAAMC,gBAAgB,GAAGD,OAAO,CAAC,0BAA0B,CAAC;AAC5D,MAAME,cAAc,GAAGF,OAAO,CAAC,kBAAkB,CAAC;;AAElD;AACA;AACA;;AAEA,MAAMG,yBAAyB,SAASD,cAAc,CAAC;EACtDE,WAAW,CAACC,SAAS,EAAEC,KAAK,EAAE;IAC7B,KAAK,EAAE;IAEP,IAAI,CAACD,SAAS,GAAGA,SAAS;IAC1B,IAAI,CAACC,KAAK,GAAGA,KAAK;EACnB;EAEA,IAAIC,IAAI,GAAG;IACV,OAAO,mBAAmB;EAC3B;EAEA,IAAIC,QAAQ,GAAG;IACd,OAAO,KAAK;EACb;EAEAC,SAAS,CAACC,OAAO,EAAE;IAClB,MAAM;MAAEC;IAAM,CAAC,GAAGD,OAAO;IAEzBC,KAAK,CAAC,IAAI,CAACN,SAAS,CAAC;IACrBM,KAAK,CAAC,IAAI,CAACL,KAAK,CAAC;IAEjB,KAAK,CAACG,SAAS,CAACC,OAAO,CAAC;EACzB;EAEAE,WAAW,CAACF,OAAO,EAAE;IACpB,MAAM;MAAEG;IAAK,CAAC,GAAGH,OAAO;IAExB,IAAI,CAACL,SAAS,GAAGQ,IAAI,EAAE;IACvB,IAAI,CAACP,KAAK,GAAGO,IAAI,EAAE;IAEnB,KAAK,CAACD,WAAW,CAACF,OAAO,CAAC;EAC3B;AACD;AAEAT,gBAAgB,CACfE,yBAAyB,EACzB,oDAAoD,CACpD;AAEDA,yBAAyB,CAACW,QAAQ,GAAG,MAAMC,iCAAiC,SAC3EhB,kBAAkB,CACjB;EACD;AACD;AACA;AACA;AACA;AACA;EACCiB,KAAK,CAACC,UAAU,EAAEC,MAAM,EAAEC,eAAe,EAAE;IAC1C,MAAMC,GAAG,GAAG,wCAA0CH,UAAW;IACjE,MAAMI,OAAO,GAAG,IAAI,CAACC,UAAU,CAACF,GAAG,EAAED,eAAe,CAAC;IACrDD,MAAM,CAACK,OAAO,CAACH,GAAG,CAACd,KAAK,CAAC,CAAC,CAAC,EAAEc,GAAG,CAACd,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,EAAEe,OAAO,CAAC;EACxD;EAEAC,UAAU,CAACF,GAAG,EAAED,eAAe,EAAE;IAChC,MAAMK,QAAQ,GAAGJ,GAAG,CAACf,SAAS,CAACoB,GAAG,CAACR,UAAU,IAAI;MAChD,OAAO,IAAI,CAACS,oBAAoB,CAACT,UAAU,EAAEE,eAAe,CAAC;IAC9D,CAAC,CAAC;IACF,OAAQ,IAAGK,QAAQ,CAACG,IAAI,CAAC,IAAI,CAAE,GAAE;EAClC;EAEAD,oBAAoB,CACnBN,GAAG,QAEF;IAAA,IADD;MAAEQ,eAAe;MAAEC,WAAW;MAAEC,UAAU;MAAEC;IAAoB,CAAC;IAEjE,IAAI,OAAOX,GAAG,KAAK,QAAQ,EAAE;MAC5B,OAAOA,GAAG;IACX;IAEA,IAAIA,GAAG,CAACY,WAAW,EAAE;MACpB,OAAOZ,GAAG,CAACY,WAAW,CAACC,YAAY,EAAE;IACtC,CAAC,MAAM;MACN,OAAOL,eAAe,CAACM,aAAa,CAAC;QACpCC,MAAM,EAAEN,WAAW,CAACO,SAAS,CAAChB,GAAG,CAAC;QAClCU,UAAU;QACVO,OAAO,EAAEjB,GAAG,CAACiB,OAAO;QACpBN;MACD,CAAC,CAAC;IACH;EACD;AACD,CAAC;AAEDI,MAAM,CAACG,OAAO,GAAGnC,yBAAyB"},"metadata":{},"sourceType":"script","externalDependencies":[]}