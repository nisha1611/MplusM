{"ast":null,"code":"'use strict';\n\nconst assert = require('assert');\nconst {\n  inspect\n} = require('util');\nconst {\n  mustCall\n} = require(`${__dirname}/common.js`);\nconst busboy = require('..');\nconst input = Buffer.from(['-----------------------------paZqsnEHRufoShdX6fh0lUhXBP4k', 'Content-Disposition: form-data; ' + 'name=\"upload_file_0\"; filename=\"テスト.dat\"', 'Content-Type: application/octet-stream', '', 'A'.repeat(1023), '-----------------------------paZqsnEHRufoShdX6fh0lUhXBP4k--'].join('\\r\\n'));\nconst boundary = '---------------------------paZqsnEHRufoShdX6fh0lUhXBP4k';\nconst expected = [{\n  type: 'file',\n  name: 'upload_file_0',\n  data: Buffer.from('A'.repeat(1023)),\n  info: {\n    filename: 'テスト.dat',\n    encoding: '7bit',\n    mimeType: 'application/octet-stream'\n  },\n  limited: false\n}];\nconst bb = busboy({\n  defParamCharset: 'utf8',\n  headers: {\n    'content-type': `multipart/form-data; boundary=${boundary}`\n  }\n});\nconst results = [];\nbb.on('field', (name, val, info) => {\n  results.push({\n    type: 'field',\n    name,\n    val,\n    info\n  });\n});\nbb.on('file', (name, stream, info) => {\n  const data = [];\n  let nb = 0;\n  const file = {\n    type: 'file',\n    name,\n    data: null,\n    info,\n    limited: false\n  };\n  results.push(file);\n  stream.on('data', d => {\n    data.push(d);\n    nb += d.length;\n  }).on('limit', () => {\n    file.limited = true;\n  }).on('close', () => {\n    file.data = Buffer.concat(data, nb);\n    assert.strictEqual(stream.truncated, file.limited);\n  }).once('error', err => {\n    file.err = err.message;\n  });\n});\nbb.on('error', err => {\n  results.push({\n    error: err.message\n  });\n});\nbb.on('partsLimit', () => {\n  results.push('partsLimit');\n});\nbb.on('filesLimit', () => {\n  results.push('filesLimit');\n});\nbb.on('fieldsLimit', () => {\n  results.push('fieldsLimit');\n});\nbb.on('close', mustCall(() => {\n  assert.deepStrictEqual(results, expected, 'Results mismatch.\\n' + `Parsed: ${inspect(results)}\\n` + `Expected: ${inspect(expected)}`);\n}));\nbb.end(input);","map":{"version":3,"names":["assert","require","inspect","mustCall","__dirname","busboy","input","Buffer","from","repeat","join","boundary","expected","type","name","data","info","filename","encoding","mimeType","limited","bb","defParamCharset","headers","results","on","val","push","stream","nb","file","d","length","concat","strictEqual","truncated","once","err","message","error","deepStrictEqual","end"],"sources":["C:/Users/91930/Desktop/Github projects/Pharmacy Demo/back-end/node_modules/busboy/test/test-types-multipart-charsets.js"],"sourcesContent":["'use strict';\n\nconst assert = require('assert');\nconst { inspect } = require('util');\n\nconst { mustCall } = require(`${__dirname}/common.js`);\n\nconst busboy = require('..');\n\nconst input = Buffer.from([\n  '-----------------------------paZqsnEHRufoShdX6fh0lUhXBP4k',\n 'Content-Disposition: form-data; '\n   + 'name=\"upload_file_0\"; filename=\"テスト.dat\"',\n 'Content-Type: application/octet-stream',\n '',\n 'A'.repeat(1023),\n '-----------------------------paZqsnEHRufoShdX6fh0lUhXBP4k--'\n].join('\\r\\n'));\nconst boundary = '---------------------------paZqsnEHRufoShdX6fh0lUhXBP4k';\nconst expected = [\n  { type: 'file',\n    name: 'upload_file_0',\n    data: Buffer.from('A'.repeat(1023)),\n    info: {\n      filename: 'テスト.dat',\n      encoding: '7bit',\n      mimeType: 'application/octet-stream',\n    },\n    limited: false,\n  },\n];\nconst bb = busboy({\n  defParamCharset: 'utf8',\n  headers: {\n    'content-type': `multipart/form-data; boundary=${boundary}`,\n  }\n});\nconst results = [];\n\nbb.on('field', (name, val, info) => {\n  results.push({ type: 'field', name, val, info });\n});\n\nbb.on('file', (name, stream, info) => {\n  const data = [];\n  let nb = 0;\n  const file = {\n    type: 'file',\n    name,\n    data: null,\n    info,\n    limited: false,\n  };\n  results.push(file);\n  stream.on('data', (d) => {\n    data.push(d);\n    nb += d.length;\n  }).on('limit', () => {\n    file.limited = true;\n  }).on('close', () => {\n    file.data = Buffer.concat(data, nb);\n    assert.strictEqual(stream.truncated, file.limited);\n  }).once('error', (err) => {\n    file.err = err.message;\n  });\n});\n\nbb.on('error', (err) => {\n  results.push({ error: err.message });\n});\n\nbb.on('partsLimit', () => {\n  results.push('partsLimit');\n});\n\nbb.on('filesLimit', () => {\n  results.push('filesLimit');\n});\n\nbb.on('fieldsLimit', () => {\n  results.push('fieldsLimit');\n});\n\nbb.on('close', mustCall(() => {\n  assert.deepStrictEqual(\n    results,\n    expected,\n    'Results mismatch.\\n'\n      + `Parsed: ${inspect(results)}\\n`\n      + `Expected: ${inspect(expected)}`\n  );\n}));\n\nbb.end(input);\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}