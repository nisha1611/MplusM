{"ast":null,"code":"/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Tobias Koppers @sokra\r\n*/\n\n\"use strict\";\n\nconst Template = require(\"../Template\");\nconst WebAssemblyImportDependency = require(\"../dependencies/WebAssemblyImportDependency\");\n\n/** @typedef {import(\"../Module\")} Module */\n/** @typedef {import(\"../ModuleGraph\")} ModuleGraph */\n\n/** @typedef {Object} UsedWasmDependency\r\n * @property {WebAssemblyImportDependency} dependency the dependency\r\n * @property {string} name the export name\r\n * @property {string} module the module name\r\n */\n\nconst MANGLED_MODULE = \"a\";\n\n/**\r\n * @param {ModuleGraph} moduleGraph the module graph\r\n * @param {Module} module the module\r\n * @param {boolean} mangle mangle module and export names\r\n * @returns {UsedWasmDependency[]} used dependencies and (mangled) name\r\n */\nconst getUsedDependencies = (moduleGraph, module, mangle) => {\n  /** @type {UsedWasmDependency[]} */\n  const array = [];\n  let importIndex = 0;\n  for (const dep of module.dependencies) {\n    if (dep instanceof WebAssemblyImportDependency) {\n      if (dep.description.type === \"GlobalType\" || moduleGraph.getModule(dep) === null) {\n        continue;\n      }\n      const exportName = dep.name;\n      // TODO add the following 3 lines when removing of ModuleExport is possible\n      // const importedModule = moduleGraph.getModule(dep);\n      // const usedName = importedModule && moduleGraph.getExportsInfo(importedModule).getUsedName(exportName, runtime);\n      // if (usedName !== false) {\n      if (mangle) {\n        array.push({\n          dependency: dep,\n          name: Template.numberToIdentifier(importIndex++),\n          module: MANGLED_MODULE\n        });\n      } else {\n        array.push({\n          dependency: dep,\n          name: exportName,\n          module: dep.request\n        });\n      }\n    }\n  }\n  return array;\n};\nexports.getUsedDependencies = getUsedDependencies;\nexports.MANGLED_MODULE = MANGLED_MODULE;","map":{"version":3,"names":["Template","require","WebAssemblyImportDependency","MANGLED_MODULE","getUsedDependencies","moduleGraph","module","mangle","array","importIndex","dep","dependencies","description","type","getModule","exportName","name","push","dependency","numberToIdentifier","request","exports"],"sources":["C:/Users/91930/Desktop/Github projects/Pharmacy Demo/front-end/node_modules/webpack/lib/wasm-sync/WebAssemblyUtils.js"],"sourcesContent":["/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Tobias Koppers @sokra\r\n*/\r\n\r\n\"use strict\";\r\n\r\nconst Template = require(\"../Template\");\r\nconst WebAssemblyImportDependency = require(\"../dependencies/WebAssemblyImportDependency\");\r\n\r\n/** @typedef {import(\"../Module\")} Module */\r\n/** @typedef {import(\"../ModuleGraph\")} ModuleGraph */\r\n\r\n/** @typedef {Object} UsedWasmDependency\r\n * @property {WebAssemblyImportDependency} dependency the dependency\r\n * @property {string} name the export name\r\n * @property {string} module the module name\r\n */\r\n\r\nconst MANGLED_MODULE = \"a\";\r\n\r\n/**\r\n * @param {ModuleGraph} moduleGraph the module graph\r\n * @param {Module} module the module\r\n * @param {boolean} mangle mangle module and export names\r\n * @returns {UsedWasmDependency[]} used dependencies and (mangled) name\r\n */\r\nconst getUsedDependencies = (moduleGraph, module, mangle) => {\r\n\t/** @type {UsedWasmDependency[]} */\r\n\tconst array = [];\r\n\tlet importIndex = 0;\r\n\tfor (const dep of module.dependencies) {\r\n\t\tif (dep instanceof WebAssemblyImportDependency) {\r\n\t\t\tif (\r\n\t\t\t\tdep.description.type === \"GlobalType\" ||\r\n\t\t\t\tmoduleGraph.getModule(dep) === null\r\n\t\t\t) {\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n\t\t\tconst exportName = dep.name;\r\n\t\t\t// TODO add the following 3 lines when removing of ModuleExport is possible\r\n\t\t\t// const importedModule = moduleGraph.getModule(dep);\r\n\t\t\t// const usedName = importedModule && moduleGraph.getExportsInfo(importedModule).getUsedName(exportName, runtime);\r\n\t\t\t// if (usedName !== false) {\r\n\t\t\tif (mangle) {\r\n\t\t\t\tarray.push({\r\n\t\t\t\t\tdependency: dep,\r\n\t\t\t\t\tname: Template.numberToIdentifier(importIndex++),\r\n\t\t\t\t\tmodule: MANGLED_MODULE\r\n\t\t\t\t});\r\n\t\t\t} else {\r\n\t\t\t\tarray.push({\r\n\t\t\t\t\tdependency: dep,\r\n\t\t\t\t\tname: exportName,\r\n\t\t\t\t\tmodule: dep.request\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn array;\r\n};\r\n\r\nexports.getUsedDependencies = getUsedDependencies;\r\nexports.MANGLED_MODULE = MANGLED_MODULE;\r\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ,MAAMA,QAAQ,GAAGC,OAAO,CAAC,aAAa,CAAC;AACvC,MAAMC,2BAA2B,GAAGD,OAAO,CAAC,6CAA6C,CAAC;;AAE1F;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,MAAME,cAAc,GAAG,GAAG;;AAE1B;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,mBAAmB,GAAG,CAACC,WAAW,EAAEC,MAAM,EAAEC,MAAM,KAAK;EAC5D;EACA,MAAMC,KAAK,GAAG,EAAE;EAChB,IAAIC,WAAW,GAAG,CAAC;EACnB,KAAK,MAAMC,GAAG,IAAIJ,MAAM,CAACK,YAAY,EAAE;IACtC,IAAID,GAAG,YAAYR,2BAA2B,EAAE;MAC/C,IACCQ,GAAG,CAACE,WAAW,CAACC,IAAI,KAAK,YAAY,IACrCR,WAAW,CAACS,SAAS,CAACJ,GAAG,CAAC,KAAK,IAAI,EAClC;QACD;MACD;MAEA,MAAMK,UAAU,GAAGL,GAAG,CAACM,IAAI;MAC3B;MACA;MACA;MACA;MACA,IAAIT,MAAM,EAAE;QACXC,KAAK,CAACS,IAAI,CAAC;UACVC,UAAU,EAAER,GAAG;UACfM,IAAI,EAAEhB,QAAQ,CAACmB,kBAAkB,CAACV,WAAW,EAAE,CAAC;UAChDH,MAAM,EAAEH;QACT,CAAC,CAAC;MACH,CAAC,MAAM;QACNK,KAAK,CAACS,IAAI,CAAC;UACVC,UAAU,EAAER,GAAG;UACfM,IAAI,EAAED,UAAU;UAChBT,MAAM,EAAEI,GAAG,CAACU;QACb,CAAC,CAAC;MACH;IACD;EACD;EACA,OAAOZ,KAAK;AACb,CAAC;AAEDa,OAAO,CAACjB,mBAAmB,GAAGA,mBAAmB;AACjDiB,OAAO,CAAClB,cAAc,GAAGA,cAAc"},"metadata":{},"sourceType":"script","externalDependencies":[]}