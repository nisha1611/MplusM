{"ast":null,"code":"// hoisted class for cyclic dependency\nclass Range {\n  constructor(range, options) {\n    if (!options || typeof options !== 'object') {\n      options = {\n        loose: !!options,\n        includePrerelease: false\n      };\n    }\n    if (range instanceof Range) {\n      if (range.loose === !!options.loose && range.includePrerelease === !!options.includePrerelease) {\n        return range;\n      } else {\n        return new Range(range.raw, options);\n      }\n    }\n    if (range instanceof Comparator) {\n      // just put it in the set and return\n      this.raw = range.value;\n      this.set = [[range]];\n      this.format();\n      return this;\n    }\n    this.options = options;\n    this.loose = !!options.loose;\n    this.includePrerelease = !!options.includePrerelease;\n\n    // First, split based on boolean or ||\n    this.raw = range;\n    this.set = range.split(/\\s*\\|\\|\\s*/)\n    // map the range to a 2d array of comparators\n    .map(range => this.parseRange(range.trim()))\n    // throw out any comparator lists that are empty\n    // this generally means that it was not a valid range, which is allowed\n    // in loose mode, but will still throw if the WHOLE range is invalid.\n    .filter(c => c.length);\n    if (!this.set.length) {\n      throw new TypeError(`Invalid SemVer Range: ${range}`);\n    }\n    this.format();\n  }\n  format() {\n    this.range = this.set.map(comps => {\n      return comps.join(' ').trim();\n    }).join('||').trim();\n    return this.range;\n  }\n  toString() {\n    return this.range;\n  }\n  parseRange(range) {\n    const loose = this.options.loose;\n    range = range.trim();\n    // `1.2.3 - 1.2.4` => `>=1.2.3 <=1.2.4`\n    const hr = loose ? re[t.HYPHENRANGELOOSE] : re[t.HYPHENRANGE];\n    range = range.replace(hr, hyphenReplace);\n    debug('hyphen replace', range);\n    // `> 1.2.3 < 1.2.5` => `>1.2.3 <1.2.5`\n    range = range.replace(re[t.COMPARATORTRIM], comparatorTrimReplace);\n    debug('comparator trim', range, re[t.COMPARATORTRIM]);\n\n    // `~ 1.2.3` => `~1.2.3`\n    range = range.replace(re[t.TILDETRIM], tildeTrimReplace);\n\n    // `^ 1.2.3` => `^1.2.3`\n    range = range.replace(re[t.CARETTRIM], caretTrimReplace);\n\n    // normalize spaces\n    range = range.split(/\\s+/).join(' ');\n\n    // At this point, the range is completely trimmed and\n    // ready to be split into comparators.\n\n    const compRe = loose ? re[t.COMPARATORLOOSE] : re[t.COMPARATOR];\n    return range.split(' ').map(comp => parseComparator(comp, this.options)).join(' ').split(/\\s+/)\n    // in loose mode, throw out any that are not valid comparators\n    .filter(this.options.loose ? comp => !!comp.match(compRe) : () => true).map(comp => new Comparator(comp, this.options));\n  }\n  intersects(range, options) {\n    if (!(range instanceof Range)) {\n      throw new TypeError('a Range is required');\n    }\n    return this.set.some(thisComparators => {\n      return isSatisfiable(thisComparators, options) && range.set.some(rangeComparators => {\n        return isSatisfiable(rangeComparators, options) && thisComparators.every(thisComparator => {\n          return rangeComparators.every(rangeComparator => {\n            return thisComparator.intersects(rangeComparator, options);\n          });\n        });\n      });\n    });\n  }\n\n  // if ANY of the sets match ALL of its comparators, then pass\n  test(version) {\n    if (!version) {\n      return false;\n    }\n    if (typeof version === 'string') {\n      try {\n        version = new SemVer(version, this.options);\n      } catch (er) {\n        return false;\n      }\n    }\n    for (let i = 0; i < this.set.length; i++) {\n      if (testSet(this.set[i], version, this.options)) {\n        return true;\n      }\n    }\n    return false;\n  }\n}\nmodule.exports = Range;\nconst Comparator = require('./comparator');\nconst debug = require('../internal/debug');\nconst SemVer = require('./semver');\nconst {\n  re,\n  t,\n  comparatorTrimReplace,\n  tildeTrimReplace,\n  caretTrimReplace\n} = require('../internal/re');\n\n// take a set of comparators and determine whether there\n// exists a version which can satisfy it\nconst isSatisfiable = (comparators, options) => {\n  let result = true;\n  const remainingComparators = comparators.slice();\n  let testComparator = remainingComparators.pop();\n  while (result && remainingComparators.length) {\n    result = remainingComparators.every(otherComparator => {\n      return testComparator.intersects(otherComparator, options);\n    });\n    testComparator = remainingComparators.pop();\n  }\n  return result;\n};\n\n// comprised of xranges, tildes, stars, and gtlt's at this point.\n// already replaced the hyphen ranges\n// turn into a set of JUST comparators.\nconst parseComparator = (comp, options) => {\n  debug('comp', comp, options);\n  comp = replaceCarets(comp, options);\n  debug('caret', comp);\n  comp = replaceTildes(comp, options);\n  debug('tildes', comp);\n  comp = replaceXRanges(comp, options);\n  debug('xrange', comp);\n  comp = replaceStars(comp, options);\n  debug('stars', comp);\n  return comp;\n};\nconst isX = id => !id || id.toLowerCase() === 'x' || id === '*';\n\n// ~, ~> --> * (any, kinda silly)\n// ~2, ~2.x, ~2.x.x, ~>2, ~>2.x ~>2.x.x --> >=2.0.0 <3.0.0\n// ~2.0, ~2.0.x, ~>2.0, ~>2.0.x --> >=2.0.0 <2.1.0\n// ~1.2, ~1.2.x, ~>1.2, ~>1.2.x --> >=1.2.0 <1.3.0\n// ~1.2.3, ~>1.2.3 --> >=1.2.3 <1.3.0\n// ~1.2.0, ~>1.2.0 --> >=1.2.0 <1.3.0\nconst replaceTildes = (comp, options) => comp.trim().split(/\\s+/).map(comp => {\n  return replaceTilde(comp, options);\n}).join(' ');\nconst replaceTilde = (comp, options) => {\n  const r = options.loose ? re[t.TILDELOOSE] : re[t.TILDE];\n  return comp.replace(r, (_, M, m, p, pr) => {\n    debug('tilde', comp, _, M, m, p, pr);\n    let ret;\n    if (isX(M)) {\n      ret = '';\n    } else if (isX(m)) {\n      ret = `>=${M}.0.0 <${+M + 1}.0.0`;\n    } else if (isX(p)) {\n      // ~1.2 == >=1.2.0 <1.3.0\n      ret = `>=${M}.${m}.0 <${M}.${+m + 1}.0`;\n    } else if (pr) {\n      debug('replaceTilde pr', pr);\n      ret = `>=${M}.${m}.${p}-${pr} <${M}.${+m + 1}.0`;\n    } else {\n      // ~1.2.3 == >=1.2.3 <1.3.0\n      ret = `>=${M}.${m}.${p} <${M}.${+m + 1}.0`;\n    }\n    debug('tilde return', ret);\n    return ret;\n  });\n};\n\n// ^ --> * (any, kinda silly)\n// ^2, ^2.x, ^2.x.x --> >=2.0.0 <3.0.0\n// ^2.0, ^2.0.x --> >=2.0.0 <3.0.0\n// ^1.2, ^1.2.x --> >=1.2.0 <2.0.0\n// ^1.2.3 --> >=1.2.3 <2.0.0\n// ^1.2.0 --> >=1.2.0 <2.0.0\nconst replaceCarets = (comp, options) => comp.trim().split(/\\s+/).map(comp => {\n  return replaceCaret(comp, options);\n}).join(' ');\nconst replaceCaret = (comp, options) => {\n  debug('caret', comp, options);\n  const r = options.loose ? re[t.CARETLOOSE] : re[t.CARET];\n  return comp.replace(r, (_, M, m, p, pr) => {\n    debug('caret', comp, _, M, m, p, pr);\n    let ret;\n    if (isX(M)) {\n      ret = '';\n    } else if (isX(m)) {\n      ret = `>=${M}.0.0 <${+M + 1}.0.0`;\n    } else if (isX(p)) {\n      if (M === '0') {\n        ret = `>=${M}.${m}.0 <${M}.${+m + 1}.0`;\n      } else {\n        ret = `>=${M}.${m}.0 <${+M + 1}.0.0`;\n      }\n    } else if (pr) {\n      debug('replaceCaret pr', pr);\n      if (M === '0') {\n        if (m === '0') {\n          ret = `>=${M}.${m}.${p}-${pr} <${M}.${m}.${+p + 1}`;\n        } else {\n          ret = `>=${M}.${m}.${p}-${pr} <${M}.${+m + 1}.0`;\n        }\n      } else {\n        ret = `>=${M}.${m}.${p}-${pr} <${+M + 1}.0.0`;\n      }\n    } else {\n      debug('no pr');\n      if (M === '0') {\n        if (m === '0') {\n          ret = `>=${M}.${m}.${p} <${M}.${m}.${+p + 1}`;\n        } else {\n          ret = `>=${M}.${m}.${p} <${M}.${+m + 1}.0`;\n        }\n      } else {\n        ret = `>=${M}.${m}.${p} <${+M + 1}.0.0`;\n      }\n    }\n    debug('caret return', ret);\n    return ret;\n  });\n};\nconst replaceXRanges = (comp, options) => {\n  debug('replaceXRanges', comp, options);\n  return comp.split(/\\s+/).map(comp => {\n    return replaceXRange(comp, options);\n  }).join(' ');\n};\nconst replaceXRange = (comp, options) => {\n  comp = comp.trim();\n  const r = options.loose ? re[t.XRANGELOOSE] : re[t.XRANGE];\n  return comp.replace(r, (ret, gtlt, M, m, p, pr) => {\n    debug('xRange', comp, ret, gtlt, M, m, p, pr);\n    const xM = isX(M);\n    const xm = xM || isX(m);\n    const xp = xm || isX(p);\n    const anyX = xp;\n    if (gtlt === '=' && anyX) {\n      gtlt = '';\n    }\n\n    // if we're including prereleases in the match, then we need\n    // to fix this to -0, the lowest possible prerelease value\n    pr = options.includePrerelease ? '-0' : '';\n    if (xM) {\n      if (gtlt === '>' || gtlt === '<') {\n        // nothing is allowed\n        ret = '<0.0.0-0';\n      } else {\n        // nothing is forbidden\n        ret = '*';\n      }\n    } else if (gtlt && anyX) {\n      // we know patch is an x, because we have any x at all.\n      // replace X with 0\n      if (xm) {\n        m = 0;\n      }\n      p = 0;\n      if (gtlt === '>') {\n        // >1 => >=2.0.0\n        // >1.2 => >=1.3.0\n        gtlt = '>=';\n        if (xm) {\n          M = +M + 1;\n          m = 0;\n          p = 0;\n        } else {\n          m = +m + 1;\n          p = 0;\n        }\n      } else if (gtlt === '<=') {\n        // <=0.7.x is actually <0.8.0, since any 0.7.x should\n        // pass.  Similarly, <=7.x is actually <8.0.0, etc.\n        gtlt = '<';\n        if (xm) {\n          M = +M + 1;\n        } else {\n          m = +m + 1;\n        }\n      }\n      ret = `${gtlt + M}.${m}.${p}${pr}`;\n    } else if (xm) {\n      ret = `>=${M}.0.0${pr} <${+M + 1}.0.0${pr}`;\n    } else if (xp) {\n      ret = `>=${M}.${m}.0${pr} <${M}.${+m + 1}.0${pr}`;\n    }\n    debug('xRange return', ret);\n    return ret;\n  });\n};\n\n// Because * is AND-ed with everything else in the comparator,\n// and '' means \"any version\", just remove the *s entirely.\nconst replaceStars = (comp, options) => {\n  debug('replaceStars', comp, options);\n  // Looseness is ignored here.  star is always as loose as it gets!\n  return comp.trim().replace(re[t.STAR], '');\n};\n\n// This function is passed to string.replace(re[t.HYPHENRANGE])\n// M, m, patch, prerelease, build\n// 1.2 - 3.4.5 => >=1.2.0 <=3.4.5\n// 1.2.3 - 3.4 => >=1.2.0 <3.5.0 Any 3.4.x will do\n// 1.2 - 3.4 => >=1.2.0 <3.5.0\nconst hyphenReplace = ($0, from, fM, fm, fp, fpr, fb, to, tM, tm, tp, tpr, tb) => {\n  if (isX(fM)) {\n    from = '';\n  } else if (isX(fm)) {\n    from = `>=${fM}.0.0`;\n  } else if (isX(fp)) {\n    from = `>=${fM}.${fm}.0`;\n  } else {\n    from = `>=${from}`;\n  }\n  if (isX(tM)) {\n    to = '';\n  } else if (isX(tm)) {\n    to = `<${+tM + 1}.0.0`;\n  } else if (isX(tp)) {\n    to = `<${tM}.${+tm + 1}.0`;\n  } else if (tpr) {\n    to = `<=${tM}.${tm}.${tp}-${tpr}`;\n  } else {\n    to = `<=${to}`;\n  }\n  return `${from} ${to}`.trim();\n};\nconst testSet = (set, version, options) => {\n  for (let i = 0; i < set.length; i++) {\n    if (!set[i].test(version)) {\n      return false;\n    }\n  }\n  if (version.prerelease.length && !options.includePrerelease) {\n    // Find the set of versions that are allowed to have prereleases\n    // For example, ^1.2.3-pr.1 desugars to >=1.2.3-pr.1 <2.0.0\n    // That should allow `1.2.3-pr.2` to pass.\n    // However, `1.2.4-alpha.notready` should NOT be allowed,\n    // even though it's within the range set by the comparators.\n    for (let i = 0; i < set.length; i++) {\n      debug(set[i].semver);\n      if (set[i].semver === Comparator.ANY) {\n        continue;\n      }\n      if (set[i].semver.prerelease.length > 0) {\n        const allowed = set[i].semver;\n        if (allowed.major === version.major && allowed.minor === version.minor && allowed.patch === version.patch) {\n          return true;\n        }\n      }\n    }\n\n    // Version has a -pre, but it's not one of the ones we like.\n    return false;\n  }\n  return true;\n};","map":{"version":3,"names":["Range","constructor","range","options","loose","includePrerelease","raw","Comparator","value","set","format","split","map","parseRange","trim","filter","c","length","TypeError","comps","join","toString","hr","re","t","HYPHENRANGELOOSE","HYPHENRANGE","replace","hyphenReplace","debug","COMPARATORTRIM","comparatorTrimReplace","TILDETRIM","tildeTrimReplace","CARETTRIM","caretTrimReplace","compRe","COMPARATORLOOSE","COMPARATOR","comp","parseComparator","match","intersects","some","thisComparators","isSatisfiable","rangeComparators","every","thisComparator","rangeComparator","test","version","SemVer","er","i","testSet","module","exports","require","comparators","result","remainingComparators","slice","testComparator","pop","otherComparator","replaceCarets","replaceTildes","replaceXRanges","replaceStars","isX","id","toLowerCase","replaceTilde","r","TILDELOOSE","TILDE","_","M","m","p","pr","ret","replaceCaret","CARETLOOSE","CARET","replaceXRange","XRANGELOOSE","XRANGE","gtlt","xM","xm","xp","anyX","STAR","$0","from","fM","fm","fp","fpr","fb","to","tM","tm","tp","tpr","tb","prerelease","semver","ANY","allowed","major","minor","patch"],"sources":["C:/Users/91930/Desktop/Github projects/Pharmacy Demo/back-end/node_modules/simple-update-notifier/node_modules/semver/classes/range.js"],"sourcesContent":["// hoisted class for cyclic dependency\r\nclass Range {\r\n  constructor (range, options) {\r\n    if (!options || typeof options !== 'object') {\r\n      options = {\r\n        loose: !!options,\r\n        includePrerelease: false\r\n      }\r\n    }\r\n\r\n    if (range instanceof Range) {\r\n      if (\r\n        range.loose === !!options.loose &&\r\n        range.includePrerelease === !!options.includePrerelease\r\n      ) {\r\n        return range\r\n      } else {\r\n        return new Range(range.raw, options)\r\n      }\r\n    }\r\n\r\n    if (range instanceof Comparator) {\r\n      // just put it in the set and return\r\n      this.raw = range.value\r\n      this.set = [[range]]\r\n      this.format()\r\n      return this\r\n    }\r\n\r\n    this.options = options\r\n    this.loose = !!options.loose\r\n    this.includePrerelease = !!options.includePrerelease\r\n\r\n    // First, split based on boolean or ||\r\n    this.raw = range\r\n    this.set = range\r\n      .split(/\\s*\\|\\|\\s*/)\r\n      // map the range to a 2d array of comparators\r\n      .map(range => this.parseRange(range.trim()))\r\n      // throw out any comparator lists that are empty\r\n      // this generally means that it was not a valid range, which is allowed\r\n      // in loose mode, but will still throw if the WHOLE range is invalid.\r\n      .filter(c => c.length)\r\n\r\n    if (!this.set.length) {\r\n      throw new TypeError(`Invalid SemVer Range: ${range}`)\r\n    }\r\n\r\n    this.format()\r\n  }\r\n\r\n  format () {\r\n    this.range = this.set\r\n      .map((comps) => {\r\n        return comps.join(' ').trim()\r\n      })\r\n      .join('||')\r\n      .trim()\r\n    return this.range\r\n  }\r\n\r\n  toString () {\r\n    return this.range\r\n  }\r\n\r\n  parseRange (range) {\r\n    const loose = this.options.loose\r\n    range = range.trim()\r\n    // `1.2.3 - 1.2.4` => `>=1.2.3 <=1.2.4`\r\n    const hr = loose ? re[t.HYPHENRANGELOOSE] : re[t.HYPHENRANGE]\r\n    range = range.replace(hr, hyphenReplace)\r\n    debug('hyphen replace', range)\r\n    // `> 1.2.3 < 1.2.5` => `>1.2.3 <1.2.5`\r\n    range = range.replace(re[t.COMPARATORTRIM], comparatorTrimReplace)\r\n    debug('comparator trim', range, re[t.COMPARATORTRIM])\r\n\r\n    // `~ 1.2.3` => `~1.2.3`\r\n    range = range.replace(re[t.TILDETRIM], tildeTrimReplace)\r\n\r\n    // `^ 1.2.3` => `^1.2.3`\r\n    range = range.replace(re[t.CARETTRIM], caretTrimReplace)\r\n\r\n    // normalize spaces\r\n    range = range.split(/\\s+/).join(' ')\r\n\r\n    // At this point, the range is completely trimmed and\r\n    // ready to be split into comparators.\r\n\r\n    const compRe = loose ? re[t.COMPARATORLOOSE] : re[t.COMPARATOR]\r\n    return range\r\n      .split(' ')\r\n      .map(comp => parseComparator(comp, this.options))\r\n      .join(' ')\r\n      .split(/\\s+/)\r\n      // in loose mode, throw out any that are not valid comparators\r\n      .filter(this.options.loose ? comp => !!comp.match(compRe) : () => true)\r\n      .map(comp => new Comparator(comp, this.options))\r\n  }\r\n\r\n  intersects (range, options) {\r\n    if (!(range instanceof Range)) {\r\n      throw new TypeError('a Range is required')\r\n    }\r\n\r\n    return this.set.some((thisComparators) => {\r\n      return (\r\n        isSatisfiable(thisComparators, options) &&\r\n        range.set.some((rangeComparators) => {\r\n          return (\r\n            isSatisfiable(rangeComparators, options) &&\r\n            thisComparators.every((thisComparator) => {\r\n              return rangeComparators.every((rangeComparator) => {\r\n                return thisComparator.intersects(rangeComparator, options)\r\n              })\r\n            })\r\n          )\r\n        })\r\n      )\r\n    })\r\n  }\r\n\r\n  // if ANY of the sets match ALL of its comparators, then pass\r\n  test (version) {\r\n    if (!version) {\r\n      return false\r\n    }\r\n\r\n    if (typeof version === 'string') {\r\n      try {\r\n        version = new SemVer(version, this.options)\r\n      } catch (er) {\r\n        return false\r\n      }\r\n    }\r\n\r\n    for (let i = 0; i < this.set.length; i++) {\r\n      if (testSet(this.set[i], version, this.options)) {\r\n        return true\r\n      }\r\n    }\r\n    return false\r\n  }\r\n}\r\nmodule.exports = Range\r\n\r\nconst Comparator = require('./comparator')\r\nconst debug = require('../internal/debug')\r\nconst SemVer = require('./semver')\r\nconst {\r\n  re,\r\n  t,\r\n  comparatorTrimReplace,\r\n  tildeTrimReplace,\r\n  caretTrimReplace\r\n} = require('../internal/re')\r\n\r\n// take a set of comparators and determine whether there\r\n// exists a version which can satisfy it\r\nconst isSatisfiable = (comparators, options) => {\r\n  let result = true\r\n  const remainingComparators = comparators.slice()\r\n  let testComparator = remainingComparators.pop()\r\n\r\n  while (result && remainingComparators.length) {\r\n    result = remainingComparators.every((otherComparator) => {\r\n      return testComparator.intersects(otherComparator, options)\r\n    })\r\n\r\n    testComparator = remainingComparators.pop()\r\n  }\r\n\r\n  return result\r\n}\r\n\r\n// comprised of xranges, tildes, stars, and gtlt's at this point.\r\n// already replaced the hyphen ranges\r\n// turn into a set of JUST comparators.\r\nconst parseComparator = (comp, options) => {\r\n  debug('comp', comp, options)\r\n  comp = replaceCarets(comp, options)\r\n  debug('caret', comp)\r\n  comp = replaceTildes(comp, options)\r\n  debug('tildes', comp)\r\n  comp = replaceXRanges(comp, options)\r\n  debug('xrange', comp)\r\n  comp = replaceStars(comp, options)\r\n  debug('stars', comp)\r\n  return comp\r\n}\r\n\r\nconst isX = id => !id || id.toLowerCase() === 'x' || id === '*'\r\n\r\n// ~, ~> --> * (any, kinda silly)\r\n// ~2, ~2.x, ~2.x.x, ~>2, ~>2.x ~>2.x.x --> >=2.0.0 <3.0.0\r\n// ~2.0, ~2.0.x, ~>2.0, ~>2.0.x --> >=2.0.0 <2.1.0\r\n// ~1.2, ~1.2.x, ~>1.2, ~>1.2.x --> >=1.2.0 <1.3.0\r\n// ~1.2.3, ~>1.2.3 --> >=1.2.3 <1.3.0\r\n// ~1.2.0, ~>1.2.0 --> >=1.2.0 <1.3.0\r\nconst replaceTildes = (comp, options) =>\r\n  comp.trim().split(/\\s+/).map((comp) => {\r\n    return replaceTilde(comp, options)\r\n  }).join(' ')\r\n\r\nconst replaceTilde = (comp, options) => {\r\n  const r = options.loose ? re[t.TILDELOOSE] : re[t.TILDE]\r\n  return comp.replace(r, (_, M, m, p, pr) => {\r\n    debug('tilde', comp, _, M, m, p, pr)\r\n    let ret\r\n\r\n    if (isX(M)) {\r\n      ret = ''\r\n    } else if (isX(m)) {\r\n      ret = `>=${M}.0.0 <${+M + 1}.0.0`\r\n    } else if (isX(p)) {\r\n      // ~1.2 == >=1.2.0 <1.3.0\r\n      ret = `>=${M}.${m}.0 <${M}.${+m + 1}.0`\r\n    } else if (pr) {\r\n      debug('replaceTilde pr', pr)\r\n      ret = `>=${M}.${m}.${p}-${pr\r\n      } <${M}.${+m + 1}.0`\r\n    } else {\r\n      // ~1.2.3 == >=1.2.3 <1.3.0\r\n      ret = `>=${M}.${m}.${p\r\n      } <${M}.${+m + 1}.0`\r\n    }\r\n\r\n    debug('tilde return', ret)\r\n    return ret\r\n  })\r\n}\r\n\r\n// ^ --> * (any, kinda silly)\r\n// ^2, ^2.x, ^2.x.x --> >=2.0.0 <3.0.0\r\n// ^2.0, ^2.0.x --> >=2.0.0 <3.0.0\r\n// ^1.2, ^1.2.x --> >=1.2.0 <2.0.0\r\n// ^1.2.3 --> >=1.2.3 <2.0.0\r\n// ^1.2.0 --> >=1.2.0 <2.0.0\r\nconst replaceCarets = (comp, options) =>\r\n  comp.trim().split(/\\s+/).map((comp) => {\r\n    return replaceCaret(comp, options)\r\n  }).join(' ')\r\n\r\nconst replaceCaret = (comp, options) => {\r\n  debug('caret', comp, options)\r\n  const r = options.loose ? re[t.CARETLOOSE] : re[t.CARET]\r\n  return comp.replace(r, (_, M, m, p, pr) => {\r\n    debug('caret', comp, _, M, m, p, pr)\r\n    let ret\r\n\r\n    if (isX(M)) {\r\n      ret = ''\r\n    } else if (isX(m)) {\r\n      ret = `>=${M}.0.0 <${+M + 1}.0.0`\r\n    } else if (isX(p)) {\r\n      if (M === '0') {\r\n        ret = `>=${M}.${m}.0 <${M}.${+m + 1}.0`\r\n      } else {\r\n        ret = `>=${M}.${m}.0 <${+M + 1}.0.0`\r\n      }\r\n    } else if (pr) {\r\n      debug('replaceCaret pr', pr)\r\n      if (M === '0') {\r\n        if (m === '0') {\r\n          ret = `>=${M}.${m}.${p}-${pr\r\n          } <${M}.${m}.${+p + 1}`\r\n        } else {\r\n          ret = `>=${M}.${m}.${p}-${pr\r\n          } <${M}.${+m + 1}.0`\r\n        }\r\n      } else {\r\n        ret = `>=${M}.${m}.${p}-${pr\r\n        } <${+M + 1}.0.0`\r\n      }\r\n    } else {\r\n      debug('no pr')\r\n      if (M === '0') {\r\n        if (m === '0') {\r\n          ret = `>=${M}.${m}.${p\r\n          } <${M}.${m}.${+p + 1}`\r\n        } else {\r\n          ret = `>=${M}.${m}.${p\r\n          } <${M}.${+m + 1}.0`\r\n        }\r\n      } else {\r\n        ret = `>=${M}.${m}.${p\r\n        } <${+M + 1}.0.0`\r\n      }\r\n    }\r\n\r\n    debug('caret return', ret)\r\n    return ret\r\n  })\r\n}\r\n\r\nconst replaceXRanges = (comp, options) => {\r\n  debug('replaceXRanges', comp, options)\r\n  return comp.split(/\\s+/).map((comp) => {\r\n    return replaceXRange(comp, options)\r\n  }).join(' ')\r\n}\r\n\r\nconst replaceXRange = (comp, options) => {\r\n  comp = comp.trim()\r\n  const r = options.loose ? re[t.XRANGELOOSE] : re[t.XRANGE]\r\n  return comp.replace(r, (ret, gtlt, M, m, p, pr) => {\r\n    debug('xRange', comp, ret, gtlt, M, m, p, pr)\r\n    const xM = isX(M)\r\n    const xm = xM || isX(m)\r\n    const xp = xm || isX(p)\r\n    const anyX = xp\r\n\r\n    if (gtlt === '=' && anyX) {\r\n      gtlt = ''\r\n    }\r\n\r\n    // if we're including prereleases in the match, then we need\r\n    // to fix this to -0, the lowest possible prerelease value\r\n    pr = options.includePrerelease ? '-0' : ''\r\n\r\n    if (xM) {\r\n      if (gtlt === '>' || gtlt === '<') {\r\n        // nothing is allowed\r\n        ret = '<0.0.0-0'\r\n      } else {\r\n        // nothing is forbidden\r\n        ret = '*'\r\n      }\r\n    } else if (gtlt && anyX) {\r\n      // we know patch is an x, because we have any x at all.\r\n      // replace X with 0\r\n      if (xm) {\r\n        m = 0\r\n      }\r\n      p = 0\r\n\r\n      if (gtlt === '>') {\r\n        // >1 => >=2.0.0\r\n        // >1.2 => >=1.3.0\r\n        gtlt = '>='\r\n        if (xm) {\r\n          M = +M + 1\r\n          m = 0\r\n          p = 0\r\n        } else {\r\n          m = +m + 1\r\n          p = 0\r\n        }\r\n      } else if (gtlt === '<=') {\r\n        // <=0.7.x is actually <0.8.0, since any 0.7.x should\r\n        // pass.  Similarly, <=7.x is actually <8.0.0, etc.\r\n        gtlt = '<'\r\n        if (xm) {\r\n          M = +M + 1\r\n        } else {\r\n          m = +m + 1\r\n        }\r\n      }\r\n\r\n      ret = `${gtlt + M}.${m}.${p}${pr}`\r\n    } else if (xm) {\r\n      ret = `>=${M}.0.0${pr} <${+M + 1}.0.0${pr}`\r\n    } else if (xp) {\r\n      ret = `>=${M}.${m}.0${pr\r\n      } <${M}.${+m + 1}.0${pr}`\r\n    }\r\n\r\n    debug('xRange return', ret)\r\n\r\n    return ret\r\n  })\r\n}\r\n\r\n// Because * is AND-ed with everything else in the comparator,\r\n// and '' means \"any version\", just remove the *s entirely.\r\nconst replaceStars = (comp, options) => {\r\n  debug('replaceStars', comp, options)\r\n  // Looseness is ignored here.  star is always as loose as it gets!\r\n  return comp.trim().replace(re[t.STAR], '')\r\n}\r\n\r\n// This function is passed to string.replace(re[t.HYPHENRANGE])\r\n// M, m, patch, prerelease, build\r\n// 1.2 - 3.4.5 => >=1.2.0 <=3.4.5\r\n// 1.2.3 - 3.4 => >=1.2.0 <3.5.0 Any 3.4.x will do\r\n// 1.2 - 3.4 => >=1.2.0 <3.5.0\r\nconst hyphenReplace = ($0,\r\n  from, fM, fm, fp, fpr, fb,\r\n  to, tM, tm, tp, tpr, tb) => {\r\n  if (isX(fM)) {\r\n    from = ''\r\n  } else if (isX(fm)) {\r\n    from = `>=${fM}.0.0`\r\n  } else if (isX(fp)) {\r\n    from = `>=${fM}.${fm}.0`\r\n  } else {\r\n    from = `>=${from}`\r\n  }\r\n\r\n  if (isX(tM)) {\r\n    to = ''\r\n  } else if (isX(tm)) {\r\n    to = `<${+tM + 1}.0.0`\r\n  } else if (isX(tp)) {\r\n    to = `<${tM}.${+tm + 1}.0`\r\n  } else if (tpr) {\r\n    to = `<=${tM}.${tm}.${tp}-${tpr}`\r\n  } else {\r\n    to = `<=${to}`\r\n  }\r\n\r\n  return (`${from} ${to}`).trim()\r\n}\r\n\r\nconst testSet = (set, version, options) => {\r\n  for (let i = 0; i < set.length; i++) {\r\n    if (!set[i].test(version)) {\r\n      return false\r\n    }\r\n  }\r\n\r\n  if (version.prerelease.length && !options.includePrerelease) {\r\n    // Find the set of versions that are allowed to have prereleases\r\n    // For example, ^1.2.3-pr.1 desugars to >=1.2.3-pr.1 <2.0.0\r\n    // That should allow `1.2.3-pr.2` to pass.\r\n    // However, `1.2.4-alpha.notready` should NOT be allowed,\r\n    // even though it's within the range set by the comparators.\r\n    for (let i = 0; i < set.length; i++) {\r\n      debug(set[i].semver)\r\n      if (set[i].semver === Comparator.ANY) {\r\n        continue\r\n      }\r\n\r\n      if (set[i].semver.prerelease.length > 0) {\r\n        const allowed = set[i].semver\r\n        if (allowed.major === version.major &&\r\n            allowed.minor === version.minor &&\r\n            allowed.patch === version.patch) {\r\n          return true\r\n        }\r\n      }\r\n    }\r\n\r\n    // Version has a -pre, but it's not one of the ones we like.\r\n    return false\r\n  }\r\n\r\n  return true\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}