{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CountDocumentsOperation = void 0;\nconst aggregate_1 = require(\"./aggregate\");\n/** @internal */\nclass CountDocumentsOperation extends aggregate_1.AggregateOperation {\n  constructor(collection, query, options) {\n    const pipeline = [];\n    pipeline.push({\n      $match: query\n    });\n    if (typeof options.skip === 'number') {\n      pipeline.push({\n        $skip: options.skip\n      });\n    }\n    if (typeof options.limit === 'number') {\n      pipeline.push({\n        $limit: options.limit\n      });\n    }\n    pipeline.push({\n      $group: {\n        _id: 1,\n        n: {\n          $sum: 1\n        }\n      }\n    });\n    super(collection.s.namespace, pipeline, options);\n  }\n  execute(server, session, callback) {\n    super.execute(server, session, (err, result) => {\n      if (err || !result) {\n        callback(err);\n        return;\n      }\n      // NOTE: We're avoiding creating a cursor here to reduce the callstack.\n      const response = result;\n      if (response.cursor == null || response.cursor.firstBatch == null) {\n        callback(undefined, 0);\n        return;\n      }\n      const docs = response.cursor.firstBatch;\n      callback(undefined, docs.length ? docs[0].n : 0);\n    });\n  }\n}\nexports.CountDocumentsOperation = CountDocumentsOperation;","map":{"version":3,"mappings":";;;;;;AAKA;AAUA;AACA,MAAaA,uBAAwB,SAAQC,8BAA0B;EACrEC,YAAYC,UAAsB,EAAEC,KAAe,EAAEC,OAA8B;IACjF,MAAMC,QAAQ,GAAG,EAAE;IACnBA,QAAQ,CAACC,IAAI,CAAC;MAAEC,MAAM,EAAEJ;IAAK,CAAE,CAAC;IAEhC,IAAI,OAAOC,OAAO,CAACI,IAAI,KAAK,QAAQ,EAAE;MACpCH,QAAQ,CAACC,IAAI,CAAC;QAAEG,KAAK,EAAEL,OAAO,CAACI;MAAI,CAAE,CAAC;;IAGxC,IAAI,OAAOJ,OAAO,CAACM,KAAK,KAAK,QAAQ,EAAE;MACrCL,QAAQ,CAACC,IAAI,CAAC;QAAEK,MAAM,EAAEP,OAAO,CAACM;MAAK,CAAE,CAAC;;IAG1CL,QAAQ,CAACC,IAAI,CAAC;MAAEM,MAAM,EAAE;QAAEC,GAAG,EAAE,CAAC;QAAEC,CAAC,EAAE;UAAEC,IAAI,EAAE;QAAC;MAAE;IAAE,CAAE,CAAC;IAErD,KAAK,CAACb,UAAU,CAACc,CAAC,CAACC,SAAS,EAAEZ,QAAQ,EAAED,OAAO,CAAC;EAClD;EAESc,OAAO,CACdC,MAAc,EACdC,OAAkC,EAClCC,QAA0B;IAE1B,KAAK,CAACH,OAAO,CAACC,MAAM,EAAEC,OAAO,EAAE,CAACE,GAAG,EAAEC,MAAM,KAAI;MAC7C,IAAID,GAAG,IAAI,CAACC,MAAM,EAAE;QAClBF,QAAQ,CAACC,GAAG,CAAC;QACb;;MAGF;MACA,MAAME,QAAQ,GAAGD,MAA6B;MAC9C,IAAIC,QAAQ,CAACC,MAAM,IAAI,IAAI,IAAID,QAAQ,CAACC,MAAM,CAACC,UAAU,IAAI,IAAI,EAAE;QACjEL,QAAQ,CAACM,SAAS,EAAE,CAAC,CAAC;QACtB;;MAGF,MAAMC,IAAI,GAAGJ,QAAQ,CAACC,MAAM,CAACC,UAAU;MACvCL,QAAQ,CAACM,SAAS,EAAEC,IAAI,CAACC,MAAM,GAAGD,IAAI,CAAC,CAAC,CAAC,CAACd,CAAC,GAAG,CAAC,CAAC;IAClD,CAAC,CAAC;EACJ;;AAvCFgB","names":["CountDocumentsOperation","aggregate_1","constructor","collection","query","options","pipeline","push","$match","skip","$skip","limit","$limit","$group","_id","n","$sum","s","namespace","execute","server","session","callback","err","result","response","cursor","firstBatch","undefined","docs","length","exports"],"sources":["C:\\Users\\91930\\Desktop\\Github projects\\Pharmacy Demo\\back-end\\node_modules\\mongodb\\src\\operations\\count_documents.ts"],"sourcesContent":["import type { Document } from '../bson';\r\nimport type { Collection } from '../collection';\r\nimport type { Server } from '../sdam/server';\r\nimport type { ClientSession } from '../sessions';\r\nimport type { Callback } from '../utils';\r\nimport { AggregateOperation, AggregateOptions } from './aggregate';\r\n\r\n/** @public */\r\nexport interface CountDocumentsOptions extends AggregateOptions {\r\n  /** The number of documents to skip. */\r\n  skip?: number;\r\n  /** The maximum amounts to count before aborting. */\r\n  limit?: number;\r\n}\r\n\r\n/** @internal */\r\nexport class CountDocumentsOperation extends AggregateOperation<number> {\r\n  constructor(collection: Collection, query: Document, options: CountDocumentsOptions) {\r\n    const pipeline = [];\r\n    pipeline.push({ $match: query });\r\n\r\n    if (typeof options.skip === 'number') {\r\n      pipeline.push({ $skip: options.skip });\r\n    }\r\n\r\n    if (typeof options.limit === 'number') {\r\n      pipeline.push({ $limit: options.limit });\r\n    }\r\n\r\n    pipeline.push({ $group: { _id: 1, n: { $sum: 1 } } });\r\n\r\n    super(collection.s.namespace, pipeline, options);\r\n  }\r\n\r\n  override execute(\r\n    server: Server,\r\n    session: ClientSession | undefined,\r\n    callback: Callback<number>\r\n  ): void {\r\n    super.execute(server, session, (err, result) => {\r\n      if (err || !result) {\r\n        callback(err);\r\n        return;\r\n      }\r\n\r\n      // NOTE: We're avoiding creating a cursor here to reduce the callstack.\r\n      const response = result as unknown as Document;\r\n      if (response.cursor == null || response.cursor.firstBatch == null) {\r\n        callback(undefined, 0);\r\n        return;\r\n      }\r\n\r\n      const docs = response.cursor.firstBatch;\r\n      callback(undefined, docs.length ? docs[0].n : 0);\r\n    });\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}