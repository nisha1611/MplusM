{"ast":null,"code":"const tap = require('tap');\nconst test = tap.test;\nconst readFile = require('fs').readFileSync;\nconst spawn = require('child_process').spawn;\nconst pstree = require('../');\nconst {\n  tree,\n  pidsForTree,\n  getStat\n} = require('../lib/utils');\nif (process.platform !== 'darwin') {\n  test('reads from /proc', async t => {\n    const ps = await getStat();\n    t.ok(ps.split('\\n').length > 1);\n  });\n}\ntest('tree for live env', async t => {\n  const pid = 4079;\n  const fixture = readFile(__dirname + '/fixtures/out2', 'utf8');\n  const ps = await tree(fixture);\n  t.deepEqual(pidsForTree(ps, pid).map(_ => _.PID), ['4080']);\n});\nfunction testTree(t, runCallCount) {\n  const sub = spawn('node', [`${__dirname}/fixtures/index.js`, runCallCount], {\n    stdio: 'pipe'\n  });\n  setTimeout(() => {\n    const pid = sub.pid;\n    pstree(pid, (error, pids) => {\n      pids.concat([pid]).forEach(p => {\n        spawn('kill', ['-s', 'SIGTERM', p]);\n      });\n\n      // the fixture launches `sh` which launches node which is why we\n      // are looking for two processes.\n      // Important: IDKW but MacOS seems to skip the `sh` process. no idea.\n      t.equal(pids.length, runCallCount * 2);\n      t.end();\n    });\n  }, 1000);\n}\ntest('can read full process tree', t => {\n  testTree(t, 1);\n});\ntest('can read full process tree with multiple processes', t => {\n  testTree(t, 2);\n});","map":{"version":3,"names":["tap","require","test","readFile","readFileSync","spawn","pstree","tree","pidsForTree","getStat","process","platform","t","ps","ok","split","length","pid","fixture","__dirname","deepEqual","map","_","PID","testTree","runCallCount","sub","stdio","setTimeout","error","pids","concat","forEach","p","equal","end"],"sources":["C:/Users/91930/Desktop/Github projects/Pharmacy Demo/back-end/node_modules/pstree.remy/tests/index.test.js"],"sourcesContent":["const tap = require('tap');\r\nconst test = tap.test;\r\nconst readFile = require('fs').readFileSync;\r\nconst spawn = require('child_process').spawn;\r\nconst pstree = require('../');\r\nconst { tree, pidsForTree, getStat } = require('../lib/utils');\r\n\r\nif (process.platform !== 'darwin') {\r\n  test('reads from /proc', async (t) => {\r\n    const ps = await getStat();\r\n    t.ok(ps.split('\\n').length > 1);\r\n  });\r\n}\r\n\r\ntest('tree for live env', async (t) => {\r\n  const pid = 4079;\r\n  const fixture = readFile(__dirname + '/fixtures/out2', 'utf8');\r\n  const ps = await tree(fixture);\r\n  t.deepEqual(\r\n    pidsForTree(ps, pid).map((_) => _.PID),\r\n    ['4080']\r\n  );\r\n});\r\n\r\nfunction testTree(t, runCallCount) {\r\n  const sub = spawn('node', [`${__dirname}/fixtures/index.js`, runCallCount], {\r\n    stdio: 'pipe',\r\n  });\r\n  setTimeout(() => {\r\n    const pid = sub.pid;\r\n\r\n    pstree(pid, (error, pids) => {\r\n      pids.concat([pid]).forEach((p) => {\r\n        spawn('kill', ['-s', 'SIGTERM', p]);\r\n      });\r\n\r\n      // the fixture launches `sh` which launches node which is why we\r\n      // are looking for two processes.\r\n      // Important: IDKW but MacOS seems to skip the `sh` process. no idea.\r\n      t.equal(pids.length, runCallCount * 2);\r\n      t.end();\r\n    });\r\n  }, 1000);\r\n}\r\n\r\ntest('can read full process tree', (t) => {\r\n  testTree(t, 1);\r\n});\r\ntest('can read full process tree with multiple processes', (t) => {\r\n  testTree(t, 2);\r\n});\r\n"],"mappings":"AAAA,MAAMA,GAAG,GAAGC,OAAO,CAAC,KAAK,CAAC;AAC1B,MAAMC,IAAI,GAAGF,GAAG,CAACE,IAAI;AACrB,MAAMC,QAAQ,GAAGF,OAAO,CAAC,IAAI,CAAC,CAACG,YAAY;AAC3C,MAAMC,KAAK,GAAGJ,OAAO,CAAC,eAAe,CAAC,CAACI,KAAK;AAC5C,MAAMC,MAAM,GAAGL,OAAO,CAAC,KAAK,CAAC;AAC7B,MAAM;EAAEM,IAAI;EAAEC,WAAW;EAAEC;AAAQ,CAAC,GAAGR,OAAO,CAAC,cAAc,CAAC;AAE9D,IAAIS,OAAO,CAACC,QAAQ,KAAK,QAAQ,EAAE;EACjCT,IAAI,CAAC,kBAAkB,EAAE,MAAOU,CAAC,IAAK;IACpC,MAAMC,EAAE,GAAG,MAAMJ,OAAO,EAAE;IAC1BG,CAAC,CAACE,EAAE,CAACD,EAAE,CAACE,KAAK,CAAC,IAAI,CAAC,CAACC,MAAM,GAAG,CAAC,CAAC;EACjC,CAAC,CAAC;AACJ;AAEAd,IAAI,CAAC,mBAAmB,EAAE,MAAOU,CAAC,IAAK;EACrC,MAAMK,GAAG,GAAG,IAAI;EAChB,MAAMC,OAAO,GAAGf,QAAQ,CAACgB,SAAS,GAAG,gBAAgB,EAAE,MAAM,CAAC;EAC9D,MAAMN,EAAE,GAAG,MAAMN,IAAI,CAACW,OAAO,CAAC;EAC9BN,CAAC,CAACQ,SAAS,CACTZ,WAAW,CAACK,EAAE,EAAEI,GAAG,CAAC,CAACI,GAAG,CAAEC,CAAC,IAAKA,CAAC,CAACC,GAAG,CAAC,EACtC,CAAC,MAAM,CAAC,CACT;AACH,CAAC,CAAC;AAEF,SAASC,QAAQ,CAACZ,CAAC,EAAEa,YAAY,EAAE;EACjC,MAAMC,GAAG,GAAGrB,KAAK,CAAC,MAAM,EAAE,CAAE,GAAEc,SAAU,oBAAmB,EAAEM,YAAY,CAAC,EAAE;IAC1EE,KAAK,EAAE;EACT,CAAC,CAAC;EACFC,UAAU,CAAC,MAAM;IACf,MAAMX,GAAG,GAAGS,GAAG,CAACT,GAAG;IAEnBX,MAAM,CAACW,GAAG,EAAE,CAACY,KAAK,EAAEC,IAAI,KAAK;MAC3BA,IAAI,CAACC,MAAM,CAAC,CAACd,GAAG,CAAC,CAAC,CAACe,OAAO,CAAEC,CAAC,IAAK;QAChC5B,KAAK,CAAC,MAAM,EAAE,CAAC,IAAI,EAAE,SAAS,EAAE4B,CAAC,CAAC,CAAC;MACrC,CAAC,CAAC;;MAEF;MACA;MACA;MACArB,CAAC,CAACsB,KAAK,CAACJ,IAAI,CAACd,MAAM,EAAES,YAAY,GAAG,CAAC,CAAC;MACtCb,CAAC,CAACuB,GAAG,EAAE;IACT,CAAC,CAAC;EACJ,CAAC,EAAE,IAAI,CAAC;AACV;AAEAjC,IAAI,CAAC,4BAA4B,EAAGU,CAAC,IAAK;EACxCY,QAAQ,CAACZ,CAAC,EAAE,CAAC,CAAC;AAChB,CAAC,CAAC;AACFV,IAAI,CAAC,oDAAoD,EAAGU,CAAC,IAAK;EAChEY,QAAQ,CAACZ,CAAC,EAAE,CAAC,CAAC;AAChB,CAAC,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}