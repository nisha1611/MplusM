{"ast":null,"code":"'use strict';\n\nconst clone = require('./clone');\nconst MongooseError = require('../error/index');\nfunction processConnectionOptions(uri, options) {\n  const opts = options ? options : {};\n  const readPreference = opts.readPreference ? opts.readPreference : getUriReadPreference(uri);\n  const resolvedOpts = readPreference && readPreference !== 'primary' && readPreference !== 'primaryPreferred' ? resolveOptsConflicts(readPreference, opts) : opts;\n  return clone(resolvedOpts);\n}\nfunction resolveOptsConflicts(pref, opts) {\n  // don't silently override user-provided indexing options\n  if (setsIndexOptions(opts) && setsSecondaryRead(pref)) {\n    throwReadPreferenceError();\n  }\n\n  // if user has not explicitly set any auto-indexing options,\n  // we can silently default them all to false\n  else {\n    return defaultIndexOptsToFalse(opts);\n  }\n}\nfunction setsIndexOptions(opts) {\n  const configIdx = opts.config && opts.config.autoIndex;\n  const {\n    autoCreate,\n    autoIndex\n  } = opts;\n  return !!(configIdx || autoCreate || autoIndex);\n}\nfunction setsSecondaryRead(prefString) {\n  return !!(prefString === 'secondary' || prefString === 'secondaryPreferred');\n}\nfunction getUriReadPreference(connectionString) {\n  const exp = /(?:&|\\?)readPreference=(\\w+)(?:&|$)/;\n  const match = exp.exec(connectionString);\n  return match ? match[1] : null;\n}\nfunction defaultIndexOptsToFalse(opts) {\n  opts.config = {\n    autoIndex: false\n  };\n  opts.autoCreate = false;\n  opts.autoIndex = false;\n  return opts;\n}\nfunction throwReadPreferenceError() {\n  throw new MongooseError('MongoDB prohibits index creation on connections that read from ' + 'non-primary replicas.  Connections that set \"readPreference\" to \"secondary\" or ' + '\"secondaryPreferred\" may not opt-in to the following connection options: ' + 'autoCreate, autoIndex');\n}\nmodule.exports = processConnectionOptions;","map":{"version":3,"names":["clone","require","MongooseError","processConnectionOptions","uri","options","opts","readPreference","getUriReadPreference","resolvedOpts","resolveOptsConflicts","pref","setsIndexOptions","setsSecondaryRead","throwReadPreferenceError","defaultIndexOptsToFalse","configIdx","config","autoIndex","autoCreate","prefString","connectionString","exp","match","exec","module","exports"],"sources":["C:/Users/91930/Desktop/Github projects/Pharmacy Demo/back-end/node_modules/mongoose/lib/helpers/processConnectionOptions.js"],"sourcesContent":["'use strict';\r\n\r\nconst clone = require('./clone');\r\nconst MongooseError = require('../error/index');\r\n\r\nfunction processConnectionOptions(uri, options) {\r\n  const opts = options ? options : {};\r\n  const readPreference = opts.readPreference\r\n    ? opts.readPreference\r\n    : getUriReadPreference(uri);\r\n\r\n  const resolvedOpts = (readPreference && readPreference !== 'primary' && readPreference !== 'primaryPreferred')\r\n    ? resolveOptsConflicts(readPreference, opts)\r\n    : opts;\r\n\r\n  return clone(resolvedOpts);\r\n}\r\n\r\nfunction resolveOptsConflicts(pref, opts) {\r\n  // don't silently override user-provided indexing options\r\n  if (setsIndexOptions(opts) && setsSecondaryRead(pref)) {\r\n    throwReadPreferenceError();\r\n  }\r\n\r\n  // if user has not explicitly set any auto-indexing options,\r\n  // we can silently default them all to false\r\n  else {\r\n    return defaultIndexOptsToFalse(opts);\r\n  }\r\n}\r\n\r\nfunction setsIndexOptions(opts) {\r\n  const configIdx = opts.config && opts.config.autoIndex;\r\n  const { autoCreate, autoIndex } = opts;\r\n  return !!(configIdx || autoCreate || autoIndex);\r\n}\r\n\r\nfunction setsSecondaryRead(prefString) {\r\n  return !!(prefString === 'secondary' || prefString === 'secondaryPreferred');\r\n}\r\n\r\nfunction getUriReadPreference(connectionString) {\r\n  const exp = /(?:&|\\?)readPreference=(\\w+)(?:&|$)/;\r\n  const match = exp.exec(connectionString);\r\n  return match ? match[1] : null;\r\n}\r\n\r\nfunction defaultIndexOptsToFalse(opts) {\r\n  opts.config = { autoIndex: false };\r\n  opts.autoCreate = false;\r\n  opts.autoIndex = false;\r\n  return opts;\r\n}\r\n\r\nfunction throwReadPreferenceError() {\r\n  throw new MongooseError(\r\n    'MongoDB prohibits index creation on connections that read from ' +\r\n            'non-primary replicas.  Connections that set \"readPreference\" to \"secondary\" or ' +\r\n            '\"secondaryPreferred\" may not opt-in to the following connection options: ' +\r\n            'autoCreate, autoIndex'\r\n  );\r\n}\r\n\r\nmodule.exports = processConnectionOptions;\r\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,KAAK,GAAGC,OAAO,CAAC,SAAS,CAAC;AAChC,MAAMC,aAAa,GAAGD,OAAO,CAAC,gBAAgB,CAAC;AAE/C,SAASE,wBAAwB,CAACC,GAAG,EAAEC,OAAO,EAAE;EAC9C,MAAMC,IAAI,GAAGD,OAAO,GAAGA,OAAO,GAAG,CAAC,CAAC;EACnC,MAAME,cAAc,GAAGD,IAAI,CAACC,cAAc,GACtCD,IAAI,CAACC,cAAc,GACnBC,oBAAoB,CAACJ,GAAG,CAAC;EAE7B,MAAMK,YAAY,GAAIF,cAAc,IAAIA,cAAc,KAAK,SAAS,IAAIA,cAAc,KAAK,kBAAkB,GACzGG,oBAAoB,CAACH,cAAc,EAAED,IAAI,CAAC,GAC1CA,IAAI;EAER,OAAON,KAAK,CAACS,YAAY,CAAC;AAC5B;AAEA,SAASC,oBAAoB,CAACC,IAAI,EAAEL,IAAI,EAAE;EACxC;EACA,IAAIM,gBAAgB,CAACN,IAAI,CAAC,IAAIO,iBAAiB,CAACF,IAAI,CAAC,EAAE;IACrDG,wBAAwB,EAAE;EAC5B;;EAEA;EACA;EAAA,KACK;IACH,OAAOC,uBAAuB,CAACT,IAAI,CAAC;EACtC;AACF;AAEA,SAASM,gBAAgB,CAACN,IAAI,EAAE;EAC9B,MAAMU,SAAS,GAAGV,IAAI,CAACW,MAAM,IAAIX,IAAI,CAACW,MAAM,CAACC,SAAS;EACtD,MAAM;IAAEC,UAAU;IAAED;EAAU,CAAC,GAAGZ,IAAI;EACtC,OAAO,CAAC,EAAEU,SAAS,IAAIG,UAAU,IAAID,SAAS,CAAC;AACjD;AAEA,SAASL,iBAAiB,CAACO,UAAU,EAAE;EACrC,OAAO,CAAC,EAAEA,UAAU,KAAK,WAAW,IAAIA,UAAU,KAAK,oBAAoB,CAAC;AAC9E;AAEA,SAASZ,oBAAoB,CAACa,gBAAgB,EAAE;EAC9C,MAAMC,GAAG,GAAG,qCAAqC;EACjD,MAAMC,KAAK,GAAGD,GAAG,CAACE,IAAI,CAACH,gBAAgB,CAAC;EACxC,OAAOE,KAAK,GAAGA,KAAK,CAAC,CAAC,CAAC,GAAG,IAAI;AAChC;AAEA,SAASR,uBAAuB,CAACT,IAAI,EAAE;EACrCA,IAAI,CAACW,MAAM,GAAG;IAAEC,SAAS,EAAE;EAAM,CAAC;EAClCZ,IAAI,CAACa,UAAU,GAAG,KAAK;EACvBb,IAAI,CAACY,SAAS,GAAG,KAAK;EACtB,OAAOZ,IAAI;AACb;AAEA,SAASQ,wBAAwB,GAAG;EAClC,MAAM,IAAIZ,aAAa,CACrB,iEAAiE,GACzD,iFAAiF,GACjF,2EAA2E,GAC3E,uBAAuB,CAChC;AACH;AAEAuB,MAAM,CAACC,OAAO,GAAGvB,wBAAwB"},"metadata":{},"sourceType":"script","externalDependencies":[]}