{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Code = void 0;\n/**\r\n * A class representation of the BSON Code type.\r\n * @public\r\n * @category BSONType\r\n */\nvar Code = /** @class */function () {\n  /**\r\n   * @param code - a string or function.\r\n   * @param scope - an optional scope for the function.\r\n   */\n  function Code(code, scope) {\n    if (!(this instanceof Code)) return new Code(code, scope);\n    this.code = code;\n    this.scope = scope;\n  }\n  Code.prototype.toJSON = function () {\n    return {\n      code: this.code,\n      scope: this.scope\n    };\n  };\n  /** @internal */\n  Code.prototype.toExtendedJSON = function () {\n    if (this.scope) {\n      return {\n        $code: this.code,\n        $scope: this.scope\n      };\n    }\n    return {\n      $code: this.code\n    };\n  };\n  /** @internal */\n  Code.fromExtendedJSON = function (doc) {\n    return new Code(doc.$code, doc.$scope);\n  };\n  /** @internal */\n  Code.prototype[Symbol.for('nodejs.util.inspect.custom')] = function () {\n    return this.inspect();\n  };\n  Code.prototype.inspect = function () {\n    var codeJson = this.toJSON();\n    return \"new Code(\\\"\".concat(String(codeJson.code), \"\\\"\").concat(codeJson.scope ? \", \".concat(JSON.stringify(codeJson.scope)) : '', \")\");\n  };\n  return Code;\n}();\nexports.Code = Code;\nObject.defineProperty(Code.prototype, '_bsontype', {\n  value: 'Code'\n});","map":{"version":3,"mappings":";;;;;;AAQA;;;;;AAKA;EAKE;;;;EAIA,cAAYA,IAAuB,EAAEC,KAAgB;IACnD,IAAI,EAAE,IAAI,YAAYC,IAAI,CAAC,EAAE,OAAO,IAAIA,IAAI,CAACF,IAAI,EAAEC,KAAK,CAAC;IAEzD,IAAI,CAACD,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACC,KAAK,GAAGA,KAAK;EACpB;EAEAC,qBAAM,GAAN;IACE,OAAO;MAAEF,IAAI,EAAE,IAAI,CAACA,IAAI;MAAEC,KAAK,EAAE,IAAI,CAACA;IAAK,CAAE;EAC/C,CAAC;EAED;EACAC,6BAAc,GAAd;IACE,IAAI,IAAI,CAACD,KAAK,EAAE;MACd,OAAO;QAAEE,KAAK,EAAE,IAAI,CAACH,IAAI;QAAEI,MAAM,EAAE,IAAI,CAACH;MAAK,CAAE;;IAGjD,OAAO;MAAEE,KAAK,EAAE,IAAI,CAACH;IAAI,CAAE;EAC7B,CAAC;EAED;EACOE,qBAAgB,GAAvB,UAAwBG,GAAiB;IACvC,OAAO,IAAIH,IAAI,CAACG,GAAG,CAACF,KAAK,EAAEE,GAAG,CAACD,MAAM,CAAC;EACxC,CAAC;EAED;EACAF,eAACI,MAAM,CAACC,GAAG,CAAC,4BAA4B,CAAC,CAAC,GAA1C;IACE,OAAO,IAAI,CAACC,OAAO,EAAE;EACvB,CAAC;EAEDN,sBAAO,GAAP;IACE,IAAMO,QAAQ,GAAG,IAAI,CAACC,MAAM,EAAE;IAC9B,OAAO,qBAAaC,MAAM,CAACF,QAAQ,CAACT,IAAI,CAAC,eACvCS,QAAQ,CAACR,KAAK,GAAG,YAAKW,IAAI,CAACC,SAAS,CAACJ,QAAQ,CAACR,KAAK,CAAC,CAAE,GAAG,EAAE,MAC1D;EACL,CAAC;EACH,WAAC;AAAD,CAAC,EA7CD;AAAaa;AA+CbC,MAAM,CAACC,cAAc,CAACd,IAAI,CAACe,SAAS,EAAE,WAAW,EAAE;EAAEC,KAAK,EAAE;AAAM,CAAE,CAAC","names":["code","scope","Code","$code","$scope","doc","Symbol","for","inspect","codeJson","toJSON","String","JSON","stringify","exports","Object","defineProperty","prototype","value"],"sources":["C:\\Users\\91930\\Desktop\\Github projects\\Pharmacy Demo\\back-end\\node_modules\\bson\\src\\code.ts"],"sourcesContent":["import type { Document } from './bson';\r\n\r\n/** @public */\r\nexport interface CodeExtended {\r\n  $code: string | Function;\r\n  $scope?: Document;\r\n}\r\n\r\n/**\r\n * A class representation of the BSON Code type.\r\n * @public\r\n * @category BSONType\r\n */\r\nexport class Code {\r\n  _bsontype!: 'Code';\r\n\r\n  code!: string | Function;\r\n  scope?: Document;\r\n  /**\r\n   * @param code - a string or function.\r\n   * @param scope - an optional scope for the function.\r\n   */\r\n  constructor(code: string | Function, scope?: Document) {\r\n    if (!(this instanceof Code)) return new Code(code, scope);\r\n\r\n    this.code = code;\r\n    this.scope = scope;\r\n  }\r\n\r\n  toJSON(): { code: string | Function; scope?: Document } {\r\n    return { code: this.code, scope: this.scope };\r\n  }\r\n\r\n  /** @internal */\r\n  toExtendedJSON(): CodeExtended {\r\n    if (this.scope) {\r\n      return { $code: this.code, $scope: this.scope };\r\n    }\r\n\r\n    return { $code: this.code };\r\n  }\r\n\r\n  /** @internal */\r\n  static fromExtendedJSON(doc: CodeExtended): Code {\r\n    return new Code(doc.$code, doc.$scope);\r\n  }\r\n\r\n  /** @internal */\r\n  [Symbol.for('nodejs.util.inspect.custom')](): string {\r\n    return this.inspect();\r\n  }\r\n\r\n  inspect(): string {\r\n    const codeJson = this.toJSON();\r\n    return `new Code(\"${String(codeJson.code)}\"${\r\n      codeJson.scope ? `, ${JSON.stringify(codeJson.scope)}` : ''\r\n    })`;\r\n  }\r\n}\r\n\r\nObject.defineProperty(Code.prototype, '_bsontype', { value: 'Code' });\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}