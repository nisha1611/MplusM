{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.fromCognitoIdentity = void 0;\nconst client_cognito_identity_1 = require(\"@aws-sdk/client-cognito-identity\");\nconst property_provider_1 = require(\"@aws-sdk/property-provider\");\nconst resolveLogins_1 = require(\"./resolveLogins\");\nfunction fromCognitoIdentity(parameters) {\n  return async () => {\n    const {\n      Credentials: {\n        AccessKeyId = throwOnMissingAccessKeyId(),\n        Expiration,\n        SecretKey = throwOnMissingSecretKey(),\n        SessionToken\n      } = throwOnMissingCredentials()\n    } = await parameters.client.send(new client_cognito_identity_1.GetCredentialsForIdentityCommand({\n      CustomRoleArn: parameters.customRoleArn,\n      IdentityId: parameters.identityId,\n      Logins: parameters.logins ? await (0, resolveLogins_1.resolveLogins)(parameters.logins) : undefined\n    }));\n    return {\n      identityId: parameters.identityId,\n      accessKeyId: AccessKeyId,\n      secretAccessKey: SecretKey,\n      sessionToken: SessionToken,\n      expiration: Expiration\n    };\n  };\n}\nexports.fromCognitoIdentity = fromCognitoIdentity;\nfunction throwOnMissingAccessKeyId() {\n  throw new property_provider_1.CredentialsProviderError(\"Response from Amazon Cognito contained no access key ID\");\n}\nfunction throwOnMissingCredentials() {\n  throw new property_provider_1.CredentialsProviderError(\"Response from Amazon Cognito contained no credentials\");\n}\nfunction throwOnMissingSecretKey() {\n  throw new property_provider_1.CredentialsProviderError(\"Response from Amazon Cognito contained no secret key\");\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","fromCognitoIdentity","client_cognito_identity_1","require","property_provider_1","resolveLogins_1","parameters","Credentials","AccessKeyId","throwOnMissingAccessKeyId","Expiration","SecretKey","throwOnMissingSecretKey","SessionToken","throwOnMissingCredentials","client","send","GetCredentialsForIdentityCommand","CustomRoleArn","customRoleArn","IdentityId","identityId","Logins","logins","resolveLogins","undefined","accessKeyId","secretAccessKey","sessionToken","expiration","CredentialsProviderError"],"sources":["C:/Users/91930/Desktop/Github projects/Pharmacy Demo/back-end/node_modules/@aws-sdk/credential-provider-cognito-identity/dist-cjs/fromCognitoIdentity.js"],"sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.fromCognitoIdentity = void 0;\r\nconst client_cognito_identity_1 = require(\"@aws-sdk/client-cognito-identity\");\r\nconst property_provider_1 = require(\"@aws-sdk/property-provider\");\r\nconst resolveLogins_1 = require(\"./resolveLogins\");\r\nfunction fromCognitoIdentity(parameters) {\r\n    return async () => {\r\n        const { Credentials: { AccessKeyId = throwOnMissingAccessKeyId(), Expiration, SecretKey = throwOnMissingSecretKey(), SessionToken, } = throwOnMissingCredentials(), } = await parameters.client.send(new client_cognito_identity_1.GetCredentialsForIdentityCommand({\r\n            CustomRoleArn: parameters.customRoleArn,\r\n            IdentityId: parameters.identityId,\r\n            Logins: parameters.logins ? await (0, resolveLogins_1.resolveLogins)(parameters.logins) : undefined,\r\n        }));\r\n        return {\r\n            identityId: parameters.identityId,\r\n            accessKeyId: AccessKeyId,\r\n            secretAccessKey: SecretKey,\r\n            sessionToken: SessionToken,\r\n            expiration: Expiration,\r\n        };\r\n    };\r\n}\r\nexports.fromCognitoIdentity = fromCognitoIdentity;\r\nfunction throwOnMissingAccessKeyId() {\r\n    throw new property_provider_1.CredentialsProviderError(\"Response from Amazon Cognito contained no access key ID\");\r\n}\r\nfunction throwOnMissingCredentials() {\r\n    throw new property_provider_1.CredentialsProviderError(\"Response from Amazon Cognito contained no credentials\");\r\n}\r\nfunction throwOnMissingSecretKey() {\r\n    throw new property_provider_1.CredentialsProviderError(\"Response from Amazon Cognito contained no secret key\");\r\n}\r\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,mBAAmB,GAAG,KAAK,CAAC;AACpC,MAAMC,yBAAyB,GAAGC,OAAO,CAAC,kCAAkC,CAAC;AAC7E,MAAMC,mBAAmB,GAAGD,OAAO,CAAC,4BAA4B,CAAC;AACjE,MAAME,eAAe,GAAGF,OAAO,CAAC,iBAAiB,CAAC;AAClD,SAASF,mBAAmB,CAACK,UAAU,EAAE;EACrC,OAAO,YAAY;IACf,MAAM;MAAEC,WAAW,EAAE;QAAEC,WAAW,GAAGC,yBAAyB,EAAE;QAAEC,UAAU;QAAEC,SAAS,GAAGC,uBAAuB,EAAE;QAAEC;MAAc,CAAC,GAAGC,yBAAyB;IAAI,CAAC,GAAG,MAAMR,UAAU,CAACS,MAAM,CAACC,IAAI,CAAC,IAAId,yBAAyB,CAACe,gCAAgC,CAAC;MAChQC,aAAa,EAAEZ,UAAU,CAACa,aAAa;MACvCC,UAAU,EAAEd,UAAU,CAACe,UAAU;MACjCC,MAAM,EAAEhB,UAAU,CAACiB,MAAM,GAAG,MAAM,CAAC,CAAC,EAAElB,eAAe,CAACmB,aAAa,EAAElB,UAAU,CAACiB,MAAM,CAAC,GAAGE;IAC9F,CAAC,CAAC,CAAC;IACH,OAAO;MACHJ,UAAU,EAAEf,UAAU,CAACe,UAAU;MACjCK,WAAW,EAAElB,WAAW;MACxBmB,eAAe,EAAEhB,SAAS;MAC1BiB,YAAY,EAAEf,YAAY;MAC1BgB,UAAU,EAAEnB;IAChB,CAAC;EACL,CAAC;AACL;AACAX,OAAO,CAACE,mBAAmB,GAAGA,mBAAmB;AACjD,SAASQ,yBAAyB,GAAG;EACjC,MAAM,IAAIL,mBAAmB,CAAC0B,wBAAwB,CAAC,yDAAyD,CAAC;AACrH;AACA,SAAShB,yBAAyB,GAAG;EACjC,MAAM,IAAIV,mBAAmB,CAAC0B,wBAAwB,CAAC,uDAAuD,CAAC;AACnH;AACA,SAASlB,uBAAuB,GAAG;EAC/B,MAAM,IAAIR,mBAAmB,CAAC0B,wBAAwB,CAAC,sDAAsD,CAAC;AAClH"},"metadata":{},"sourceType":"script","externalDependencies":[]}