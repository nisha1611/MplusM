{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Timestamp = exports.LongWithoutOverridesClass = void 0;\nvar long_1 = require(\"./long\");\nvar utils_1 = require(\"./parser/utils\");\n/** @public */\nexports.LongWithoutOverridesClass = long_1.Long;\n/**\r\n * @public\r\n * @category BSONType\r\n * */\nvar Timestamp = /** @class */function (_super) {\n  __extends(Timestamp, _super);\n  function Timestamp(low, high) {\n    var _this = this;\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-expect-error\n    if (!(_this instanceof Timestamp)) return new Timestamp(low, high);\n    if (long_1.Long.isLong(low)) {\n      _this = _super.call(this, low.low, low.high, true) || this;\n    } else if ((0, utils_1.isObjectLike)(low) && typeof low.t !== 'undefined' && typeof low.i !== 'undefined') {\n      _this = _super.call(this, low.i, low.t, true) || this;\n    } else {\n      _this = _super.call(this, low, high, true) || this;\n    }\n    Object.defineProperty(_this, '_bsontype', {\n      value: 'Timestamp',\n      writable: false,\n      configurable: false,\n      enumerable: false\n    });\n    return _this;\n  }\n  Timestamp.prototype.toJSON = function () {\n    return {\n      $timestamp: this.toString()\n    };\n  };\n  /** Returns a Timestamp represented by the given (32-bit) integer value. */\n  Timestamp.fromInt = function (value) {\n    return new Timestamp(long_1.Long.fromInt(value, true));\n  };\n  /** Returns a Timestamp representing the given number value, provided that it is a finite number. Otherwise, zero is returned. */\n  Timestamp.fromNumber = function (value) {\n    return new Timestamp(long_1.Long.fromNumber(value, true));\n  };\n  /**\r\n   * Returns a Timestamp for the given high and low bits. Each is assumed to use 32 bits.\r\n   *\r\n   * @param lowBits - the low 32-bits.\r\n   * @param highBits - the high 32-bits.\r\n   */\n  Timestamp.fromBits = function (lowBits, highBits) {\n    return new Timestamp(lowBits, highBits);\n  };\n  /**\r\n   * Returns a Timestamp from the given string, optionally using the given radix.\r\n   *\r\n   * @param str - the textual representation of the Timestamp.\r\n   * @param optRadix - the radix in which the text is written.\r\n   */\n  Timestamp.fromString = function (str, optRadix) {\n    return new Timestamp(long_1.Long.fromString(str, true, optRadix));\n  };\n  /** @internal */\n  Timestamp.prototype.toExtendedJSON = function () {\n    return {\n      $timestamp: {\n        t: this.high >>> 0,\n        i: this.low >>> 0\n      }\n    };\n  };\n  /** @internal */\n  Timestamp.fromExtendedJSON = function (doc) {\n    return new Timestamp(doc.$timestamp);\n  };\n  /** @internal */\n  Timestamp.prototype[Symbol.for('nodejs.util.inspect.custom')] = function () {\n    return this.inspect();\n  };\n  Timestamp.prototype.inspect = function () {\n    return \"new Timestamp({ t: \".concat(this.getHighBits(), \", i: \").concat(this.getLowBits(), \" })\");\n  };\n  Timestamp.MAX_VALUE = long_1.Long.MAX_UNSIGNED_VALUE;\n  return Timestamp;\n}(exports.LongWithoutOverridesClass);\nexports.Timestamp = Timestamp;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAQA;AACaA,iCAAyB,GACpCC,WAAuC;AAUzC;;;;AAIA;EAA+BC;EAmB7B,mBAAYC,GAA6C,EAAEC,IAAa;IAAxE;IACE;IACA;IACA,IAAI,EAAEC,KAAI,YAAYC,SAAS,CAAC,EAAE,OAAO,IAAIA,SAAS,CAACH,GAAG,EAAEC,IAAI,CAAC;IAEjE,IAAIH,WAAI,CAACM,MAAM,CAACJ,GAAG,CAAC,EAAE;MACpBE,0BAAMF,GAAG,CAACA,GAAG,EAAEA,GAAG,CAACC,IAAI,EAAE,IAAI,CAAC;KAC/B,MAAM,IAAI,wBAAY,EAACD,GAAG,CAAC,IAAI,OAAOA,GAAG,CAACK,CAAC,KAAK,WAAW,IAAI,OAAOL,GAAG,CAACM,CAAC,KAAK,WAAW,EAAE;MAC5FJ,0BAAMF,GAAG,CAACM,CAAC,EAAEN,GAAG,CAACK,CAAC,EAAE,IAAI,CAAC;KAC1B,MAAM;MACLH,0BAAMF,GAAG,EAAEC,IAAI,EAAE,IAAI,CAAC;;IAExBM,MAAM,CAACC,cAAc,CAACN,KAAI,EAAE,WAAW,EAAE;MACvCO,KAAK,EAAE,WAAW;MAClBC,QAAQ,EAAE,KAAK;MACfC,YAAY,EAAE,KAAK;MACnBC,UAAU,EAAE;KACb,CAAC;;EACJ;EAEAT,0BAAM,GAAN;IACE,OAAO;MACLU,UAAU,EAAE,IAAI,CAACC,QAAQ;KAC1B;EACH,CAAC;EAED;EACOX,iBAAO,GAAd,UAAeM,KAAa;IAC1B,OAAO,IAAIN,SAAS,CAACL,WAAI,CAACiB,OAAO,CAACN,KAAK,EAAE,IAAI,CAAC,CAAC;EACjD,CAAC;EAED;EACON,oBAAU,GAAjB,UAAkBM,KAAa;IAC7B,OAAO,IAAIN,SAAS,CAACL,WAAI,CAACkB,UAAU,CAACP,KAAK,EAAE,IAAI,CAAC,CAAC;EACpD,CAAC;EAED;;;;;;EAMON,kBAAQ,GAAf,UAAgBc,OAAe,EAAEC,QAAgB;IAC/C,OAAO,IAAIf,SAAS,CAACc,OAAO,EAAEC,QAAQ,CAAC;EACzC,CAAC;EAED;;;;;;EAMOf,oBAAU,GAAjB,UAAkBgB,GAAW,EAAEC,QAAgB;IAC7C,OAAO,IAAIjB,SAAS,CAACL,WAAI,CAACuB,UAAU,CAACF,GAAG,EAAE,IAAI,EAAEC,QAAQ,CAAC,CAAC;EAC5D,CAAC;EAED;EACAjB,kCAAc,GAAd;IACE,OAAO;MAAEU,UAAU,EAAE;QAAER,CAAC,EAAE,IAAI,CAACJ,IAAI,KAAK,CAAC;QAAEK,CAAC,EAAE,IAAI,CAACN,GAAG,KAAK;MAAC;IAAE,CAAE;EAClE,CAAC;EAED;EACOG,0BAAgB,GAAvB,UAAwBmB,GAAsB;IAC5C,OAAO,IAAInB,SAAS,CAACmB,GAAG,CAACT,UAAU,CAAC;EACtC,CAAC;EAED;EACAV,oBAACoB,MAAM,CAACC,GAAG,CAAC,4BAA4B,CAAC,CAAC,GAA1C;IACE,OAAO,IAAI,CAACC,OAAO,EAAE;EACvB,CAAC;EAEDtB,2BAAO,GAAP;IACE,OAAO,6BAAsB,IAAI,CAACuB,WAAW,EAAE,kBAAQ,IAAI,CAACC,UAAU,EAAE,QAAK;EAC/E,CAAC;EAzFexB,mBAAS,GAAGL,WAAI,CAAC8B,kBAAkB;EA0FrD,gBAAC;CAAA,CA7F8B/B,iCAAyB;AAA3CA","names":["exports","long_1","__extends","low","high","_this","Timestamp","isLong","t","i","Object","defineProperty","value","writable","configurable","enumerable","$timestamp","toString","fromInt","fromNumber","lowBits","highBits","str","optRadix","fromString","doc","Symbol","for","inspect","getHighBits","getLowBits","MAX_UNSIGNED_VALUE"],"sources":["C:\\Users\\91930\\Desktop\\Github projects\\Pharmacy Demo\\back-end\\node_modules\\bson\\src\\timestamp.ts"],"sourcesContent":["import { Long } from './long';\r\nimport { isObjectLike } from './parser/utils';\r\n\r\n/** @public */\r\nexport type TimestampOverrides = '_bsontype' | 'toExtendedJSON' | 'fromExtendedJSON' | 'inspect';\r\n/** @public */\r\nexport type LongWithoutOverrides = new (low: unknown, high?: number, unsigned?: boolean) => {\r\n  [P in Exclude<keyof Long, TimestampOverrides>]: Long[P];\r\n};\r\n/** @public */\r\nexport const LongWithoutOverridesClass: LongWithoutOverrides =\r\n  Long as unknown as LongWithoutOverrides;\r\n\r\n/** @public */\r\nexport interface TimestampExtended {\r\n  $timestamp: {\r\n    t: number;\r\n    i: number;\r\n  };\r\n}\r\n\r\n/**\r\n * @public\r\n * @category BSONType\r\n * */\r\nexport class Timestamp extends LongWithoutOverridesClass {\r\n  _bsontype!: 'Timestamp';\r\n\r\n  static readonly MAX_VALUE = Long.MAX_UNSIGNED_VALUE;\r\n\r\n  /**\r\n   * @param low - A 64-bit Long representing the Timestamp.\r\n   */\r\n  constructor(long: Long);\r\n  /**\r\n   * @param value - A pair of two values indicating timestamp and increment.\r\n   */\r\n  constructor(value: { t: number; i: number });\r\n  /**\r\n   * @param low - the low (signed) 32 bits of the Timestamp.\r\n   * @param high - the high (signed) 32 bits of the Timestamp.\r\n   * @deprecated Please use `Timestamp({ t: high, i: low })` or `Timestamp(Long(low, high))` instead.\r\n   */\r\n  constructor(low: number, high: number);\r\n  constructor(low: number | Long | { t: number; i: number }, high?: number) {\r\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n    // @ts-expect-error\r\n    if (!(this instanceof Timestamp)) return new Timestamp(low, high);\r\n\r\n    if (Long.isLong(low)) {\r\n      super(low.low, low.high, true);\r\n    } else if (isObjectLike(low) && typeof low.t !== 'undefined' && typeof low.i !== 'undefined') {\r\n      super(low.i, low.t, true);\r\n    } else {\r\n      super(low, high, true);\r\n    }\r\n    Object.defineProperty(this, '_bsontype', {\r\n      value: 'Timestamp',\r\n      writable: false,\r\n      configurable: false,\r\n      enumerable: false\r\n    });\r\n  }\r\n\r\n  toJSON(): { $timestamp: string } {\r\n    return {\r\n      $timestamp: this.toString()\r\n    };\r\n  }\r\n\r\n  /** Returns a Timestamp represented by the given (32-bit) integer value. */\r\n  static fromInt(value: number): Timestamp {\r\n    return new Timestamp(Long.fromInt(value, true));\r\n  }\r\n\r\n  /** Returns a Timestamp representing the given number value, provided that it is a finite number. Otherwise, zero is returned. */\r\n  static fromNumber(value: number): Timestamp {\r\n    return new Timestamp(Long.fromNumber(value, true));\r\n  }\r\n\r\n  /**\r\n   * Returns a Timestamp for the given high and low bits. Each is assumed to use 32 bits.\r\n   *\r\n   * @param lowBits - the low 32-bits.\r\n   * @param highBits - the high 32-bits.\r\n   */\r\n  static fromBits(lowBits: number, highBits: number): Timestamp {\r\n    return new Timestamp(lowBits, highBits);\r\n  }\r\n\r\n  /**\r\n   * Returns a Timestamp from the given string, optionally using the given radix.\r\n   *\r\n   * @param str - the textual representation of the Timestamp.\r\n   * @param optRadix - the radix in which the text is written.\r\n   */\r\n  static fromString(str: string, optRadix: number): Timestamp {\r\n    return new Timestamp(Long.fromString(str, true, optRadix));\r\n  }\r\n\r\n  /** @internal */\r\n  toExtendedJSON(): TimestampExtended {\r\n    return { $timestamp: { t: this.high >>> 0, i: this.low >>> 0 } };\r\n  }\r\n\r\n  /** @internal */\r\n  static fromExtendedJSON(doc: TimestampExtended): Timestamp {\r\n    return new Timestamp(doc.$timestamp);\r\n  }\r\n\r\n  /** @internal */\r\n  [Symbol.for('nodejs.util.inspect.custom')](): string {\r\n    return this.inspect();\r\n  }\r\n\r\n  inspect(): string {\r\n    return `new Timestamp({ t: ${this.getHighBits()}, i: ${this.getLowBits()} })`;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}