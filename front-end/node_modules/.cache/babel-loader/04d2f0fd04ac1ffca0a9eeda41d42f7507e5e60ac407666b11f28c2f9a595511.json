{"ast":null,"code":"var alloc = require('buffer-alloc');\nvar tape = require('tape');\nvar bitfield = require('./');\ntape('set and get', function (t) {\n  var bits = bitfield();\n  t.same(bits.get(0), false, 'first bit is false');\n  bits.set(0, true);\n  t.same(bits.get(0), true, 'first bit is true');\n  t.same(bits.get(1), false, 'second bit is false');\n  bits.set(0, false);\n  t.same(bits.get(0), false, 'first bit is reset');\n  t.end();\n});\ntape('set large and get', function (t) {\n  var bits = bitfield();\n  t.same(bits.get(9999999999999), false, 'large bit is false');\n  bits.set(9999999999999, true);\n  t.same(bits.get(9999999999999), true, 'large bit is true');\n  t.same(bits.get(9999999999999 + 1), false, 'large bit + 1 is false');\n  bits.set(9999999999999, false);\n  t.same(bits.get(9999999999999), false, 'large bit is reset');\n  t.end();\n});\ntape('get and set buffer', function (t) {\n  var bits = bitfield({\n    trackUpdates: true\n  });\n  t.same(bits.pages.get(0, true), undefined);\n  t.same(bits.pages.get(Math.floor(9999999999999 / 8 / 1024), true), undefined);\n  bits.set(9999999999999, true);\n  var bits2 = bitfield();\n  var upd = bits.pages.lastUpdate();\n  bits2.pages.set(Math.floor(upd.offset / 1024), upd.buffer);\n  t.same(bits2.get(9999999999999), true, 'bit is set');\n  t.end();\n});\ntape('toBuffer', function (t) {\n  var bits = bitfield();\n  t.same(bits.toBuffer(), alloc(0));\n  bits.set(0, true);\n  t.same(bits.toBuffer(), bits.pages.get(0).buffer);\n  bits.set(9000, true);\n  t.same(bits.toBuffer(), Buffer.concat([bits.pages.get(0).buffer, bits.pages.get(1).buffer]));\n  t.end();\n});\ntape('pass in buffer', function (t) {\n  var bits = bitfield();\n  bits.set(0, true);\n  bits.set(9000, true);\n  var clone = bitfield(bits.toBuffer());\n  t.same(clone.get(0), true);\n  t.same(clone.get(9000), true);\n  t.end();\n});\ntape('set small buffer', function (t) {\n  var buf = alloc(1);\n  buf[0] = 255;\n  var bits = bitfield(buf);\n  t.same(bits.get(0), true);\n  t.same(bits.pages.get(0).buffer.length, bits.pageSize);\n  t.end();\n});","map":{"version":3,"names":["alloc","require","tape","bitfield","t","bits","same","get","set","end","trackUpdates","pages","undefined","Math","floor","bits2","upd","lastUpdate","offset","buffer","toBuffer","Buffer","concat","clone","buf","length","pageSize"],"sources":["C:/Users/91930/Desktop/Github projects/Pharmacy Demo/back-end/node_modules/sparse-bitfield/test.js"],"sourcesContent":["var alloc = require('buffer-alloc')\r\nvar tape = require('tape')\r\nvar bitfield = require('./')\r\n\r\ntape('set and get', function (t) {\r\n  var bits = bitfield()\r\n\r\n  t.same(bits.get(0), false, 'first bit is false')\r\n  bits.set(0, true)\r\n  t.same(bits.get(0), true, 'first bit is true')\r\n  t.same(bits.get(1), false, 'second bit is false')\r\n  bits.set(0, false)\r\n  t.same(bits.get(0), false, 'first bit is reset')\r\n  t.end()\r\n})\r\n\r\ntape('set large and get', function (t) {\r\n  var bits = bitfield()\r\n\r\n  t.same(bits.get(9999999999999), false, 'large bit is false')\r\n  bits.set(9999999999999, true)\r\n  t.same(bits.get(9999999999999), true, 'large bit is true')\r\n  t.same(bits.get(9999999999999 + 1), false, 'large bit + 1 is false')\r\n  bits.set(9999999999999, false)\r\n  t.same(bits.get(9999999999999), false, 'large bit is reset')\r\n  t.end()\r\n})\r\n\r\ntape('get and set buffer', function (t) {\r\n  var bits = bitfield({trackUpdates: true})\r\n\r\n  t.same(bits.pages.get(0, true), undefined)\r\n  t.same(bits.pages.get(Math.floor(9999999999999 / 8 / 1024), true), undefined)\r\n  bits.set(9999999999999, true)\r\n\r\n  var bits2 = bitfield()\r\n  var upd = bits.pages.lastUpdate()\r\n  bits2.pages.set(Math.floor(upd.offset / 1024), upd.buffer)\r\n  t.same(bits2.get(9999999999999), true, 'bit is set')\r\n  t.end()\r\n})\r\n\r\ntape('toBuffer', function (t) {\r\n  var bits = bitfield()\r\n\r\n  t.same(bits.toBuffer(), alloc(0))\r\n\r\n  bits.set(0, true)\r\n\r\n  t.same(bits.toBuffer(), bits.pages.get(0).buffer)\r\n\r\n  bits.set(9000, true)\r\n\r\n  t.same(bits.toBuffer(), Buffer.concat([bits.pages.get(0).buffer, bits.pages.get(1).buffer]))\r\n  t.end()\r\n})\r\n\r\ntape('pass in buffer', function (t) {\r\n  var bits = bitfield()\r\n\r\n  bits.set(0, true)\r\n  bits.set(9000, true)\r\n\r\n  var clone = bitfield(bits.toBuffer())\r\n\r\n  t.same(clone.get(0), true)\r\n  t.same(clone.get(9000), true)\r\n  t.end()\r\n})\r\n\r\ntape('set small buffer', function (t) {\r\n  var buf = alloc(1)\r\n  buf[0] = 255\r\n  var bits = bitfield(buf)\r\n\r\n  t.same(bits.get(0), true)\r\n  t.same(bits.pages.get(0).buffer.length, bits.pageSize)\r\n  t.end()\r\n})\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}