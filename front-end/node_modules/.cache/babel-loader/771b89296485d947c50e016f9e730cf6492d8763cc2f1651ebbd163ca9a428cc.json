{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.deserializeAws_queryGetSessionTokenCommand = exports.deserializeAws_queryGetFederationTokenCommand = exports.deserializeAws_queryGetCallerIdentityCommand = exports.deserializeAws_queryGetAccessKeyInfoCommand = exports.deserializeAws_queryDecodeAuthorizationMessageCommand = exports.deserializeAws_queryAssumeRoleWithWebIdentityCommand = exports.deserializeAws_queryAssumeRoleWithSAMLCommand = exports.deserializeAws_queryAssumeRoleCommand = exports.serializeAws_queryGetSessionTokenCommand = exports.serializeAws_queryGetFederationTokenCommand = exports.serializeAws_queryGetCallerIdentityCommand = exports.serializeAws_queryGetAccessKeyInfoCommand = exports.serializeAws_queryDecodeAuthorizationMessageCommand = exports.serializeAws_queryAssumeRoleWithWebIdentityCommand = exports.serializeAws_queryAssumeRoleWithSAMLCommand = exports.serializeAws_queryAssumeRoleCommand = void 0;\nconst protocol_http_1 = require(\"@aws-sdk/protocol-http\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst fast_xml_parser_1 = require(\"fast-xml-parser\");\nconst models_0_1 = require(\"../models/models_0\");\nconst STSServiceException_1 = require(\"../models/STSServiceException\");\nconst serializeAws_queryAssumeRoleCommand = async (input, context) => {\n  const headers = {\n    \"content-type\": \"application/x-www-form-urlencoded\"\n  };\n  let body;\n  body = buildFormUrlencodedString({\n    ...serializeAws_queryAssumeRoleRequest(input, context),\n    Action: \"AssumeRole\",\n    Version: \"2011-06-15\"\n  });\n  return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexports.serializeAws_queryAssumeRoleCommand = serializeAws_queryAssumeRoleCommand;\nconst serializeAws_queryAssumeRoleWithSAMLCommand = async (input, context) => {\n  const headers = {\n    \"content-type\": \"application/x-www-form-urlencoded\"\n  };\n  let body;\n  body = buildFormUrlencodedString({\n    ...serializeAws_queryAssumeRoleWithSAMLRequest(input, context),\n    Action: \"AssumeRoleWithSAML\",\n    Version: \"2011-06-15\"\n  });\n  return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexports.serializeAws_queryAssumeRoleWithSAMLCommand = serializeAws_queryAssumeRoleWithSAMLCommand;\nconst serializeAws_queryAssumeRoleWithWebIdentityCommand = async (input, context) => {\n  const headers = {\n    \"content-type\": \"application/x-www-form-urlencoded\"\n  };\n  let body;\n  body = buildFormUrlencodedString({\n    ...serializeAws_queryAssumeRoleWithWebIdentityRequest(input, context),\n    Action: \"AssumeRoleWithWebIdentity\",\n    Version: \"2011-06-15\"\n  });\n  return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexports.serializeAws_queryAssumeRoleWithWebIdentityCommand = serializeAws_queryAssumeRoleWithWebIdentityCommand;\nconst serializeAws_queryDecodeAuthorizationMessageCommand = async (input, context) => {\n  const headers = {\n    \"content-type\": \"application/x-www-form-urlencoded\"\n  };\n  let body;\n  body = buildFormUrlencodedString({\n    ...serializeAws_queryDecodeAuthorizationMessageRequest(input, context),\n    Action: \"DecodeAuthorizationMessage\",\n    Version: \"2011-06-15\"\n  });\n  return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexports.serializeAws_queryDecodeAuthorizationMessageCommand = serializeAws_queryDecodeAuthorizationMessageCommand;\nconst serializeAws_queryGetAccessKeyInfoCommand = async (input, context) => {\n  const headers = {\n    \"content-type\": \"application/x-www-form-urlencoded\"\n  };\n  let body;\n  body = buildFormUrlencodedString({\n    ...serializeAws_queryGetAccessKeyInfoRequest(input, context),\n    Action: \"GetAccessKeyInfo\",\n    Version: \"2011-06-15\"\n  });\n  return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexports.serializeAws_queryGetAccessKeyInfoCommand = serializeAws_queryGetAccessKeyInfoCommand;\nconst serializeAws_queryGetCallerIdentityCommand = async (input, context) => {\n  const headers = {\n    \"content-type\": \"application/x-www-form-urlencoded\"\n  };\n  let body;\n  body = buildFormUrlencodedString({\n    ...serializeAws_queryGetCallerIdentityRequest(input, context),\n    Action: \"GetCallerIdentity\",\n    Version: \"2011-06-15\"\n  });\n  return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexports.serializeAws_queryGetCallerIdentityCommand = serializeAws_queryGetCallerIdentityCommand;\nconst serializeAws_queryGetFederationTokenCommand = async (input, context) => {\n  const headers = {\n    \"content-type\": \"application/x-www-form-urlencoded\"\n  };\n  let body;\n  body = buildFormUrlencodedString({\n    ...serializeAws_queryGetFederationTokenRequest(input, context),\n    Action: \"GetFederationToken\",\n    Version: \"2011-06-15\"\n  });\n  return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexports.serializeAws_queryGetFederationTokenCommand = serializeAws_queryGetFederationTokenCommand;\nconst serializeAws_queryGetSessionTokenCommand = async (input, context) => {\n  const headers = {\n    \"content-type\": \"application/x-www-form-urlencoded\"\n  };\n  let body;\n  body = buildFormUrlencodedString({\n    ...serializeAws_queryGetSessionTokenRequest(input, context),\n    Action: \"GetSessionToken\",\n    Version: \"2011-06-15\"\n  });\n  return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexports.serializeAws_queryGetSessionTokenCommand = serializeAws_queryGetSessionTokenCommand;\nconst deserializeAws_queryAssumeRoleCommand = async (output, context) => {\n  if (output.statusCode >= 300) {\n    return deserializeAws_queryAssumeRoleCommandError(output, context);\n  }\n  const data = await parseBody(output.body, context);\n  let contents = {};\n  contents = deserializeAws_queryAssumeRoleResponse(data.AssumeRoleResult, context);\n  const response = {\n    $metadata: deserializeMetadata(output),\n    ...contents\n  };\n  return Promise.resolve(response);\n};\nexports.deserializeAws_queryAssumeRoleCommand = deserializeAws_queryAssumeRoleCommand;\nconst deserializeAws_queryAssumeRoleCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadQueryErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    case \"ExpiredTokenException\":\n    case \"com.amazonaws.sts#ExpiredTokenException\":\n      throw await deserializeAws_queryExpiredTokenExceptionResponse(parsedOutput, context);\n    case \"MalformedPolicyDocument\":\n    case \"com.amazonaws.sts#MalformedPolicyDocumentException\":\n      throw await deserializeAws_queryMalformedPolicyDocumentExceptionResponse(parsedOutput, context);\n    case \"PackedPolicyTooLarge\":\n    case \"com.amazonaws.sts#PackedPolicyTooLargeException\":\n      throw await deserializeAws_queryPackedPolicyTooLargeExceptionResponse(parsedOutput, context);\n    case \"RegionDisabledException\":\n    case \"com.amazonaws.sts#RegionDisabledException\":\n      throw await deserializeAws_queryRegionDisabledExceptionResponse(parsedOutput, context);\n    default:\n      const parsedBody = parsedOutput.body;\n      (0, smithy_client_1.throwDefaultError)({\n        output,\n        parsedBody: parsedBody.Error,\n        exceptionCtor: STSServiceException_1.STSServiceException,\n        errorCode\n      });\n  }\n};\nconst deserializeAws_queryAssumeRoleWithSAMLCommand = async (output, context) => {\n  if (output.statusCode >= 300) {\n    return deserializeAws_queryAssumeRoleWithSAMLCommandError(output, context);\n  }\n  const data = await parseBody(output.body, context);\n  let contents = {};\n  contents = deserializeAws_queryAssumeRoleWithSAMLResponse(data.AssumeRoleWithSAMLResult, context);\n  const response = {\n    $metadata: deserializeMetadata(output),\n    ...contents\n  };\n  return Promise.resolve(response);\n};\nexports.deserializeAws_queryAssumeRoleWithSAMLCommand = deserializeAws_queryAssumeRoleWithSAMLCommand;\nconst deserializeAws_queryAssumeRoleWithSAMLCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadQueryErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    case \"ExpiredTokenException\":\n    case \"com.amazonaws.sts#ExpiredTokenException\":\n      throw await deserializeAws_queryExpiredTokenExceptionResponse(parsedOutput, context);\n    case \"IDPRejectedClaim\":\n    case \"com.amazonaws.sts#IDPRejectedClaimException\":\n      throw await deserializeAws_queryIDPRejectedClaimExceptionResponse(parsedOutput, context);\n    case \"InvalidIdentityToken\":\n    case \"com.amazonaws.sts#InvalidIdentityTokenException\":\n      throw await deserializeAws_queryInvalidIdentityTokenExceptionResponse(parsedOutput, context);\n    case \"MalformedPolicyDocument\":\n    case \"com.amazonaws.sts#MalformedPolicyDocumentException\":\n      throw await deserializeAws_queryMalformedPolicyDocumentExceptionResponse(parsedOutput, context);\n    case \"PackedPolicyTooLarge\":\n    case \"com.amazonaws.sts#PackedPolicyTooLargeException\":\n      throw await deserializeAws_queryPackedPolicyTooLargeExceptionResponse(parsedOutput, context);\n    case \"RegionDisabledException\":\n    case \"com.amazonaws.sts#RegionDisabledException\":\n      throw await deserializeAws_queryRegionDisabledExceptionResponse(parsedOutput, context);\n    default:\n      const parsedBody = parsedOutput.body;\n      (0, smithy_client_1.throwDefaultError)({\n        output,\n        parsedBody: parsedBody.Error,\n        exceptionCtor: STSServiceException_1.STSServiceException,\n        errorCode\n      });\n  }\n};\nconst deserializeAws_queryAssumeRoleWithWebIdentityCommand = async (output, context) => {\n  if (output.statusCode >= 300) {\n    return deserializeAws_queryAssumeRoleWithWebIdentityCommandError(output, context);\n  }\n  const data = await parseBody(output.body, context);\n  let contents = {};\n  contents = deserializeAws_queryAssumeRoleWithWebIdentityResponse(data.AssumeRoleWithWebIdentityResult, context);\n  const response = {\n    $metadata: deserializeMetadata(output),\n    ...contents\n  };\n  return Promise.resolve(response);\n};\nexports.deserializeAws_queryAssumeRoleWithWebIdentityCommand = deserializeAws_queryAssumeRoleWithWebIdentityCommand;\nconst deserializeAws_queryAssumeRoleWithWebIdentityCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadQueryErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    case \"ExpiredTokenException\":\n    case \"com.amazonaws.sts#ExpiredTokenException\":\n      throw await deserializeAws_queryExpiredTokenExceptionResponse(parsedOutput, context);\n    case \"IDPCommunicationError\":\n    case \"com.amazonaws.sts#IDPCommunicationErrorException\":\n      throw await deserializeAws_queryIDPCommunicationErrorExceptionResponse(parsedOutput, context);\n    case \"IDPRejectedClaim\":\n    case \"com.amazonaws.sts#IDPRejectedClaimException\":\n      throw await deserializeAws_queryIDPRejectedClaimExceptionResponse(parsedOutput, context);\n    case \"InvalidIdentityToken\":\n    case \"com.amazonaws.sts#InvalidIdentityTokenException\":\n      throw await deserializeAws_queryInvalidIdentityTokenExceptionResponse(parsedOutput, context);\n    case \"MalformedPolicyDocument\":\n    case \"com.amazonaws.sts#MalformedPolicyDocumentException\":\n      throw await deserializeAws_queryMalformedPolicyDocumentExceptionResponse(parsedOutput, context);\n    case \"PackedPolicyTooLarge\":\n    case \"com.amazonaws.sts#PackedPolicyTooLargeException\":\n      throw await deserializeAws_queryPackedPolicyTooLargeExceptionResponse(parsedOutput, context);\n    case \"RegionDisabledException\":\n    case \"com.amazonaws.sts#RegionDisabledException\":\n      throw await deserializeAws_queryRegionDisabledExceptionResponse(parsedOutput, context);\n    default:\n      const parsedBody = parsedOutput.body;\n      (0, smithy_client_1.throwDefaultError)({\n        output,\n        parsedBody: parsedBody.Error,\n        exceptionCtor: STSServiceException_1.STSServiceException,\n        errorCode\n      });\n  }\n};\nconst deserializeAws_queryDecodeAuthorizationMessageCommand = async (output, context) => {\n  if (output.statusCode >= 300) {\n    return deserializeAws_queryDecodeAuthorizationMessageCommandError(output, context);\n  }\n  const data = await parseBody(output.body, context);\n  let contents = {};\n  contents = deserializeAws_queryDecodeAuthorizationMessageResponse(data.DecodeAuthorizationMessageResult, context);\n  const response = {\n    $metadata: deserializeMetadata(output),\n    ...contents\n  };\n  return Promise.resolve(response);\n};\nexports.deserializeAws_queryDecodeAuthorizationMessageCommand = deserializeAws_queryDecodeAuthorizationMessageCommand;\nconst deserializeAws_queryDecodeAuthorizationMessageCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadQueryErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    case \"InvalidAuthorizationMessageException\":\n    case \"com.amazonaws.sts#InvalidAuthorizationMessageException\":\n      throw await deserializeAws_queryInvalidAuthorizationMessageExceptionResponse(parsedOutput, context);\n    default:\n      const parsedBody = parsedOutput.body;\n      (0, smithy_client_1.throwDefaultError)({\n        output,\n        parsedBody: parsedBody.Error,\n        exceptionCtor: STSServiceException_1.STSServiceException,\n        errorCode\n      });\n  }\n};\nconst deserializeAws_queryGetAccessKeyInfoCommand = async (output, context) => {\n  if (output.statusCode >= 300) {\n    return deserializeAws_queryGetAccessKeyInfoCommandError(output, context);\n  }\n  const data = await parseBody(output.body, context);\n  let contents = {};\n  contents = deserializeAws_queryGetAccessKeyInfoResponse(data.GetAccessKeyInfoResult, context);\n  const response = {\n    $metadata: deserializeMetadata(output),\n    ...contents\n  };\n  return Promise.resolve(response);\n};\nexports.deserializeAws_queryGetAccessKeyInfoCommand = deserializeAws_queryGetAccessKeyInfoCommand;\nconst deserializeAws_queryGetAccessKeyInfoCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadQueryErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  (0, smithy_client_1.throwDefaultError)({\n    output,\n    parsedBody: parsedBody.Error,\n    exceptionCtor: STSServiceException_1.STSServiceException,\n    errorCode\n  });\n};\nconst deserializeAws_queryGetCallerIdentityCommand = async (output, context) => {\n  if (output.statusCode >= 300) {\n    return deserializeAws_queryGetCallerIdentityCommandError(output, context);\n  }\n  const data = await parseBody(output.body, context);\n  let contents = {};\n  contents = deserializeAws_queryGetCallerIdentityResponse(data.GetCallerIdentityResult, context);\n  const response = {\n    $metadata: deserializeMetadata(output),\n    ...contents\n  };\n  return Promise.resolve(response);\n};\nexports.deserializeAws_queryGetCallerIdentityCommand = deserializeAws_queryGetCallerIdentityCommand;\nconst deserializeAws_queryGetCallerIdentityCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadQueryErrorCode(output, parsedOutput.body);\n  const parsedBody = parsedOutput.body;\n  (0, smithy_client_1.throwDefaultError)({\n    output,\n    parsedBody: parsedBody.Error,\n    exceptionCtor: STSServiceException_1.STSServiceException,\n    errorCode\n  });\n};\nconst deserializeAws_queryGetFederationTokenCommand = async (output, context) => {\n  if (output.statusCode >= 300) {\n    return deserializeAws_queryGetFederationTokenCommandError(output, context);\n  }\n  const data = await parseBody(output.body, context);\n  let contents = {};\n  contents = deserializeAws_queryGetFederationTokenResponse(data.GetFederationTokenResult, context);\n  const response = {\n    $metadata: deserializeMetadata(output),\n    ...contents\n  };\n  return Promise.resolve(response);\n};\nexports.deserializeAws_queryGetFederationTokenCommand = deserializeAws_queryGetFederationTokenCommand;\nconst deserializeAws_queryGetFederationTokenCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadQueryErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    case \"MalformedPolicyDocument\":\n    case \"com.amazonaws.sts#MalformedPolicyDocumentException\":\n      throw await deserializeAws_queryMalformedPolicyDocumentExceptionResponse(parsedOutput, context);\n    case \"PackedPolicyTooLarge\":\n    case \"com.amazonaws.sts#PackedPolicyTooLargeException\":\n      throw await deserializeAws_queryPackedPolicyTooLargeExceptionResponse(parsedOutput, context);\n    case \"RegionDisabledException\":\n    case \"com.amazonaws.sts#RegionDisabledException\":\n      throw await deserializeAws_queryRegionDisabledExceptionResponse(parsedOutput, context);\n    default:\n      const parsedBody = parsedOutput.body;\n      (0, smithy_client_1.throwDefaultError)({\n        output,\n        parsedBody: parsedBody.Error,\n        exceptionCtor: STSServiceException_1.STSServiceException,\n        errorCode\n      });\n  }\n};\nconst deserializeAws_queryGetSessionTokenCommand = async (output, context) => {\n  if (output.statusCode >= 300) {\n    return deserializeAws_queryGetSessionTokenCommandError(output, context);\n  }\n  const data = await parseBody(output.body, context);\n  let contents = {};\n  contents = deserializeAws_queryGetSessionTokenResponse(data.GetSessionTokenResult, context);\n  const response = {\n    $metadata: deserializeMetadata(output),\n    ...contents\n  };\n  return Promise.resolve(response);\n};\nexports.deserializeAws_queryGetSessionTokenCommand = deserializeAws_queryGetSessionTokenCommand;\nconst deserializeAws_queryGetSessionTokenCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadQueryErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    case \"RegionDisabledException\":\n    case \"com.amazonaws.sts#RegionDisabledException\":\n      throw await deserializeAws_queryRegionDisabledExceptionResponse(parsedOutput, context);\n    default:\n      const parsedBody = parsedOutput.body;\n      (0, smithy_client_1.throwDefaultError)({\n        output,\n        parsedBody: parsedBody.Error,\n        exceptionCtor: STSServiceException_1.STSServiceException,\n        errorCode\n      });\n  }\n};\nconst deserializeAws_queryExpiredTokenExceptionResponse = async (parsedOutput, context) => {\n  const body = parsedOutput.body;\n  const deserialized = deserializeAws_queryExpiredTokenException(body.Error, context);\n  const exception = new models_0_1.ExpiredTokenException({\n    $metadata: deserializeMetadata(parsedOutput),\n    ...deserialized\n  });\n  return (0, smithy_client_1.decorateServiceException)(exception, body);\n};\nconst deserializeAws_queryIDPCommunicationErrorExceptionResponse = async (parsedOutput, context) => {\n  const body = parsedOutput.body;\n  const deserialized = deserializeAws_queryIDPCommunicationErrorException(body.Error, context);\n  const exception = new models_0_1.IDPCommunicationErrorException({\n    $metadata: deserializeMetadata(parsedOutput),\n    ...deserialized\n  });\n  return (0, smithy_client_1.decorateServiceException)(exception, body);\n};\nconst deserializeAws_queryIDPRejectedClaimExceptionResponse = async (parsedOutput, context) => {\n  const body = parsedOutput.body;\n  const deserialized = deserializeAws_queryIDPRejectedClaimException(body.Error, context);\n  const exception = new models_0_1.IDPRejectedClaimException({\n    $metadata: deserializeMetadata(parsedOutput),\n    ...deserialized\n  });\n  return (0, smithy_client_1.decorateServiceException)(exception, body);\n};\nconst deserializeAws_queryInvalidAuthorizationMessageExceptionResponse = async (parsedOutput, context) => {\n  const body = parsedOutput.body;\n  const deserialized = deserializeAws_queryInvalidAuthorizationMessageException(body.Error, context);\n  const exception = new models_0_1.InvalidAuthorizationMessageException({\n    $metadata: deserializeMetadata(parsedOutput),\n    ...deserialized\n  });\n  return (0, smithy_client_1.decorateServiceException)(exception, body);\n};\nconst deserializeAws_queryInvalidIdentityTokenExceptionResponse = async (parsedOutput, context) => {\n  const body = parsedOutput.body;\n  const deserialized = deserializeAws_queryInvalidIdentityTokenException(body.Error, context);\n  const exception = new models_0_1.InvalidIdentityTokenException({\n    $metadata: deserializeMetadata(parsedOutput),\n    ...deserialized\n  });\n  return (0, smithy_client_1.decorateServiceException)(exception, body);\n};\nconst deserializeAws_queryMalformedPolicyDocumentExceptionResponse = async (parsedOutput, context) => {\n  const body = parsedOutput.body;\n  const deserialized = deserializeAws_queryMalformedPolicyDocumentException(body.Error, context);\n  const exception = new models_0_1.MalformedPolicyDocumentException({\n    $metadata: deserializeMetadata(parsedOutput),\n    ...deserialized\n  });\n  return (0, smithy_client_1.decorateServiceException)(exception, body);\n};\nconst deserializeAws_queryPackedPolicyTooLargeExceptionResponse = async (parsedOutput, context) => {\n  const body = parsedOutput.body;\n  const deserialized = deserializeAws_queryPackedPolicyTooLargeException(body.Error, context);\n  const exception = new models_0_1.PackedPolicyTooLargeException({\n    $metadata: deserializeMetadata(parsedOutput),\n    ...deserialized\n  });\n  return (0, smithy_client_1.decorateServiceException)(exception, body);\n};\nconst deserializeAws_queryRegionDisabledExceptionResponse = async (parsedOutput, context) => {\n  const body = parsedOutput.body;\n  const deserialized = deserializeAws_queryRegionDisabledException(body.Error, context);\n  const exception = new models_0_1.RegionDisabledException({\n    $metadata: deserializeMetadata(parsedOutput),\n    ...deserialized\n  });\n  return (0, smithy_client_1.decorateServiceException)(exception, body);\n};\nconst serializeAws_queryAssumeRoleRequest = (input, context) => {\n  const entries = {};\n  if (input.RoleArn != null) {\n    entries[\"RoleArn\"] = input.RoleArn;\n  }\n  if (input.RoleSessionName != null) {\n    entries[\"RoleSessionName\"] = input.RoleSessionName;\n  }\n  if (input.PolicyArns != null) {\n    const memberEntries = serializeAws_querypolicyDescriptorListType(input.PolicyArns, context);\n    if (input.PolicyArns?.length === 0) {\n      entries.PolicyArns = [];\n    }\n    Object.entries(memberEntries).forEach(_ref => {\n      let [key, value] = _ref;\n      const loc = `PolicyArns.${key}`;\n      entries[loc] = value;\n    });\n  }\n  if (input.Policy != null) {\n    entries[\"Policy\"] = input.Policy;\n  }\n  if (input.DurationSeconds != null) {\n    entries[\"DurationSeconds\"] = input.DurationSeconds;\n  }\n  if (input.Tags != null) {\n    const memberEntries = serializeAws_querytagListType(input.Tags, context);\n    if (input.Tags?.length === 0) {\n      entries.Tags = [];\n    }\n    Object.entries(memberEntries).forEach(_ref2 => {\n      let [key, value] = _ref2;\n      const loc = `Tags.${key}`;\n      entries[loc] = value;\n    });\n  }\n  if (input.TransitiveTagKeys != null) {\n    const memberEntries = serializeAws_querytagKeyListType(input.TransitiveTagKeys, context);\n    if (input.TransitiveTagKeys?.length === 0) {\n      entries.TransitiveTagKeys = [];\n    }\n    Object.entries(memberEntries).forEach(_ref3 => {\n      let [key, value] = _ref3;\n      const loc = `TransitiveTagKeys.${key}`;\n      entries[loc] = value;\n    });\n  }\n  if (input.ExternalId != null) {\n    entries[\"ExternalId\"] = input.ExternalId;\n  }\n  if (input.SerialNumber != null) {\n    entries[\"SerialNumber\"] = input.SerialNumber;\n  }\n  if (input.TokenCode != null) {\n    entries[\"TokenCode\"] = input.TokenCode;\n  }\n  if (input.SourceIdentity != null) {\n    entries[\"SourceIdentity\"] = input.SourceIdentity;\n  }\n  return entries;\n};\nconst serializeAws_queryAssumeRoleWithSAMLRequest = (input, context) => {\n  const entries = {};\n  if (input.RoleArn != null) {\n    entries[\"RoleArn\"] = input.RoleArn;\n  }\n  if (input.PrincipalArn != null) {\n    entries[\"PrincipalArn\"] = input.PrincipalArn;\n  }\n  if (input.SAMLAssertion != null) {\n    entries[\"SAMLAssertion\"] = input.SAMLAssertion;\n  }\n  if (input.PolicyArns != null) {\n    const memberEntries = serializeAws_querypolicyDescriptorListType(input.PolicyArns, context);\n    if (input.PolicyArns?.length === 0) {\n      entries.PolicyArns = [];\n    }\n    Object.entries(memberEntries).forEach(_ref4 => {\n      let [key, value] = _ref4;\n      const loc = `PolicyArns.${key}`;\n      entries[loc] = value;\n    });\n  }\n  if (input.Policy != null) {\n    entries[\"Policy\"] = input.Policy;\n  }\n  if (input.DurationSeconds != null) {\n    entries[\"DurationSeconds\"] = input.DurationSeconds;\n  }\n  return entries;\n};\nconst serializeAws_queryAssumeRoleWithWebIdentityRequest = (input, context) => {\n  const entries = {};\n  if (input.RoleArn != null) {\n    entries[\"RoleArn\"] = input.RoleArn;\n  }\n  if (input.RoleSessionName != null) {\n    entries[\"RoleSessionName\"] = input.RoleSessionName;\n  }\n  if (input.WebIdentityToken != null) {\n    entries[\"WebIdentityToken\"] = input.WebIdentityToken;\n  }\n  if (input.ProviderId != null) {\n    entries[\"ProviderId\"] = input.ProviderId;\n  }\n  if (input.PolicyArns != null) {\n    const memberEntries = serializeAws_querypolicyDescriptorListType(input.PolicyArns, context);\n    if (input.PolicyArns?.length === 0) {\n      entries.PolicyArns = [];\n    }\n    Object.entries(memberEntries).forEach(_ref5 => {\n      let [key, value] = _ref5;\n      const loc = `PolicyArns.${key}`;\n      entries[loc] = value;\n    });\n  }\n  if (input.Policy != null) {\n    entries[\"Policy\"] = input.Policy;\n  }\n  if (input.DurationSeconds != null) {\n    entries[\"DurationSeconds\"] = input.DurationSeconds;\n  }\n  return entries;\n};\nconst serializeAws_queryDecodeAuthorizationMessageRequest = (input, context) => {\n  const entries = {};\n  if (input.EncodedMessage != null) {\n    entries[\"EncodedMessage\"] = input.EncodedMessage;\n  }\n  return entries;\n};\nconst serializeAws_queryGetAccessKeyInfoRequest = (input, context) => {\n  const entries = {};\n  if (input.AccessKeyId != null) {\n    entries[\"AccessKeyId\"] = input.AccessKeyId;\n  }\n  return entries;\n};\nconst serializeAws_queryGetCallerIdentityRequest = (input, context) => {\n  const entries = {};\n  return entries;\n};\nconst serializeAws_queryGetFederationTokenRequest = (input, context) => {\n  const entries = {};\n  if (input.Name != null) {\n    entries[\"Name\"] = input.Name;\n  }\n  if (input.Policy != null) {\n    entries[\"Policy\"] = input.Policy;\n  }\n  if (input.PolicyArns != null) {\n    const memberEntries = serializeAws_querypolicyDescriptorListType(input.PolicyArns, context);\n    if (input.PolicyArns?.length === 0) {\n      entries.PolicyArns = [];\n    }\n    Object.entries(memberEntries).forEach(_ref6 => {\n      let [key, value] = _ref6;\n      const loc = `PolicyArns.${key}`;\n      entries[loc] = value;\n    });\n  }\n  if (input.DurationSeconds != null) {\n    entries[\"DurationSeconds\"] = input.DurationSeconds;\n  }\n  if (input.Tags != null) {\n    const memberEntries = serializeAws_querytagListType(input.Tags, context);\n    if (input.Tags?.length === 0) {\n      entries.Tags = [];\n    }\n    Object.entries(memberEntries).forEach(_ref7 => {\n      let [key, value] = _ref7;\n      const loc = `Tags.${key}`;\n      entries[loc] = value;\n    });\n  }\n  return entries;\n};\nconst serializeAws_queryGetSessionTokenRequest = (input, context) => {\n  const entries = {};\n  if (input.DurationSeconds != null) {\n    entries[\"DurationSeconds\"] = input.DurationSeconds;\n  }\n  if (input.SerialNumber != null) {\n    entries[\"SerialNumber\"] = input.SerialNumber;\n  }\n  if (input.TokenCode != null) {\n    entries[\"TokenCode\"] = input.TokenCode;\n  }\n  return entries;\n};\nconst serializeAws_querypolicyDescriptorListType = (input, context) => {\n  const entries = {};\n  let counter = 1;\n  for (const entry of input) {\n    if (entry === null) {\n      continue;\n    }\n    const memberEntries = serializeAws_queryPolicyDescriptorType(entry, context);\n    Object.entries(memberEntries).forEach(_ref8 => {\n      let [key, value] = _ref8;\n      entries[`member.${counter}.${key}`] = value;\n    });\n    counter++;\n  }\n  return entries;\n};\nconst serializeAws_queryPolicyDescriptorType = (input, context) => {\n  const entries = {};\n  if (input.arn != null) {\n    entries[\"arn\"] = input.arn;\n  }\n  return entries;\n};\nconst serializeAws_queryTag = (input, context) => {\n  const entries = {};\n  if (input.Key != null) {\n    entries[\"Key\"] = input.Key;\n  }\n  if (input.Value != null) {\n    entries[\"Value\"] = input.Value;\n  }\n  return entries;\n};\nconst serializeAws_querytagKeyListType = (input, context) => {\n  const entries = {};\n  let counter = 1;\n  for (const entry of input) {\n    if (entry === null) {\n      continue;\n    }\n    entries[`member.${counter}`] = entry;\n    counter++;\n  }\n  return entries;\n};\nconst serializeAws_querytagListType = (input, context) => {\n  const entries = {};\n  let counter = 1;\n  for (const entry of input) {\n    if (entry === null) {\n      continue;\n    }\n    const memberEntries = serializeAws_queryTag(entry, context);\n    Object.entries(memberEntries).forEach(_ref9 => {\n      let [key, value] = _ref9;\n      entries[`member.${counter}.${key}`] = value;\n    });\n    counter++;\n  }\n  return entries;\n};\nconst deserializeAws_queryAssumedRoleUser = (output, context) => {\n  const contents = {\n    AssumedRoleId: undefined,\n    Arn: undefined\n  };\n  if (output[\"AssumedRoleId\"] !== undefined) {\n    contents.AssumedRoleId = (0, smithy_client_1.expectString)(output[\"AssumedRoleId\"]);\n  }\n  if (output[\"Arn\"] !== undefined) {\n    contents.Arn = (0, smithy_client_1.expectString)(output[\"Arn\"]);\n  }\n  return contents;\n};\nconst deserializeAws_queryAssumeRoleResponse = (output, context) => {\n  const contents = {\n    Credentials: undefined,\n    AssumedRoleUser: undefined,\n    PackedPolicySize: undefined,\n    SourceIdentity: undefined\n  };\n  if (output[\"Credentials\"] !== undefined) {\n    contents.Credentials = deserializeAws_queryCredentials(output[\"Credentials\"], context);\n  }\n  if (output[\"AssumedRoleUser\"] !== undefined) {\n    contents.AssumedRoleUser = deserializeAws_queryAssumedRoleUser(output[\"AssumedRoleUser\"], context);\n  }\n  if (output[\"PackedPolicySize\"] !== undefined) {\n    contents.PackedPolicySize = (0, smithy_client_1.strictParseInt32)(output[\"PackedPolicySize\"]);\n  }\n  if (output[\"SourceIdentity\"] !== undefined) {\n    contents.SourceIdentity = (0, smithy_client_1.expectString)(output[\"SourceIdentity\"]);\n  }\n  return contents;\n};\nconst deserializeAws_queryAssumeRoleWithSAMLResponse = (output, context) => {\n  const contents = {\n    Credentials: undefined,\n    AssumedRoleUser: undefined,\n    PackedPolicySize: undefined,\n    Subject: undefined,\n    SubjectType: undefined,\n    Issuer: undefined,\n    Audience: undefined,\n    NameQualifier: undefined,\n    SourceIdentity: undefined\n  };\n  if (output[\"Credentials\"] !== undefined) {\n    contents.Credentials = deserializeAws_queryCredentials(output[\"Credentials\"], context);\n  }\n  if (output[\"AssumedRoleUser\"] !== undefined) {\n    contents.AssumedRoleUser = deserializeAws_queryAssumedRoleUser(output[\"AssumedRoleUser\"], context);\n  }\n  if (output[\"PackedPolicySize\"] !== undefined) {\n    contents.PackedPolicySize = (0, smithy_client_1.strictParseInt32)(output[\"PackedPolicySize\"]);\n  }\n  if (output[\"Subject\"] !== undefined) {\n    contents.Subject = (0, smithy_client_1.expectString)(output[\"Subject\"]);\n  }\n  if (output[\"SubjectType\"] !== undefined) {\n    contents.SubjectType = (0, smithy_client_1.expectString)(output[\"SubjectType\"]);\n  }\n  if (output[\"Issuer\"] !== undefined) {\n    contents.Issuer = (0, smithy_client_1.expectString)(output[\"Issuer\"]);\n  }\n  if (output[\"Audience\"] !== undefined) {\n    contents.Audience = (0, smithy_client_1.expectString)(output[\"Audience\"]);\n  }\n  if (output[\"NameQualifier\"] !== undefined) {\n    contents.NameQualifier = (0, smithy_client_1.expectString)(output[\"NameQualifier\"]);\n  }\n  if (output[\"SourceIdentity\"] !== undefined) {\n    contents.SourceIdentity = (0, smithy_client_1.expectString)(output[\"SourceIdentity\"]);\n  }\n  return contents;\n};\nconst deserializeAws_queryAssumeRoleWithWebIdentityResponse = (output, context) => {\n  const contents = {\n    Credentials: undefined,\n    SubjectFromWebIdentityToken: undefined,\n    AssumedRoleUser: undefined,\n    PackedPolicySize: undefined,\n    Provider: undefined,\n    Audience: undefined,\n    SourceIdentity: undefined\n  };\n  if (output[\"Credentials\"] !== undefined) {\n    contents.Credentials = deserializeAws_queryCredentials(output[\"Credentials\"], context);\n  }\n  if (output[\"SubjectFromWebIdentityToken\"] !== undefined) {\n    contents.SubjectFromWebIdentityToken = (0, smithy_client_1.expectString)(output[\"SubjectFromWebIdentityToken\"]);\n  }\n  if (output[\"AssumedRoleUser\"] !== undefined) {\n    contents.AssumedRoleUser = deserializeAws_queryAssumedRoleUser(output[\"AssumedRoleUser\"], context);\n  }\n  if (output[\"PackedPolicySize\"] !== undefined) {\n    contents.PackedPolicySize = (0, smithy_client_1.strictParseInt32)(output[\"PackedPolicySize\"]);\n  }\n  if (output[\"Provider\"] !== undefined) {\n    contents.Provider = (0, smithy_client_1.expectString)(output[\"Provider\"]);\n  }\n  if (output[\"Audience\"] !== undefined) {\n    contents.Audience = (0, smithy_client_1.expectString)(output[\"Audience\"]);\n  }\n  if (output[\"SourceIdentity\"] !== undefined) {\n    contents.SourceIdentity = (0, smithy_client_1.expectString)(output[\"SourceIdentity\"]);\n  }\n  return contents;\n};\nconst deserializeAws_queryCredentials = (output, context) => {\n  const contents = {\n    AccessKeyId: undefined,\n    SecretAccessKey: undefined,\n    SessionToken: undefined,\n    Expiration: undefined\n  };\n  if (output[\"AccessKeyId\"] !== undefined) {\n    contents.AccessKeyId = (0, smithy_client_1.expectString)(output[\"AccessKeyId\"]);\n  }\n  if (output[\"SecretAccessKey\"] !== undefined) {\n    contents.SecretAccessKey = (0, smithy_client_1.expectString)(output[\"SecretAccessKey\"]);\n  }\n  if (output[\"SessionToken\"] !== undefined) {\n    contents.SessionToken = (0, smithy_client_1.expectString)(output[\"SessionToken\"]);\n  }\n  if (output[\"Expiration\"] !== undefined) {\n    contents.Expiration = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output[\"Expiration\"]));\n  }\n  return contents;\n};\nconst deserializeAws_queryDecodeAuthorizationMessageResponse = (output, context) => {\n  const contents = {\n    DecodedMessage: undefined\n  };\n  if (output[\"DecodedMessage\"] !== undefined) {\n    contents.DecodedMessage = (0, smithy_client_1.expectString)(output[\"DecodedMessage\"]);\n  }\n  return contents;\n};\nconst deserializeAws_queryExpiredTokenException = (output, context) => {\n  const contents = {\n    message: undefined\n  };\n  if (output[\"message\"] !== undefined) {\n    contents.message = (0, smithy_client_1.expectString)(output[\"message\"]);\n  }\n  return contents;\n};\nconst deserializeAws_queryFederatedUser = (output, context) => {\n  const contents = {\n    FederatedUserId: undefined,\n    Arn: undefined\n  };\n  if (output[\"FederatedUserId\"] !== undefined) {\n    contents.FederatedUserId = (0, smithy_client_1.expectString)(output[\"FederatedUserId\"]);\n  }\n  if (output[\"Arn\"] !== undefined) {\n    contents.Arn = (0, smithy_client_1.expectString)(output[\"Arn\"]);\n  }\n  return contents;\n};\nconst deserializeAws_queryGetAccessKeyInfoResponse = (output, context) => {\n  const contents = {\n    Account: undefined\n  };\n  if (output[\"Account\"] !== undefined) {\n    contents.Account = (0, smithy_client_1.expectString)(output[\"Account\"]);\n  }\n  return contents;\n};\nconst deserializeAws_queryGetCallerIdentityResponse = (output, context) => {\n  const contents = {\n    UserId: undefined,\n    Account: undefined,\n    Arn: undefined\n  };\n  if (output[\"UserId\"] !== undefined) {\n    contents.UserId = (0, smithy_client_1.expectString)(output[\"UserId\"]);\n  }\n  if (output[\"Account\"] !== undefined) {\n    contents.Account = (0, smithy_client_1.expectString)(output[\"Account\"]);\n  }\n  if (output[\"Arn\"] !== undefined) {\n    contents.Arn = (0, smithy_client_1.expectString)(output[\"Arn\"]);\n  }\n  return contents;\n};\nconst deserializeAws_queryGetFederationTokenResponse = (output, context) => {\n  const contents = {\n    Credentials: undefined,\n    FederatedUser: undefined,\n    PackedPolicySize: undefined\n  };\n  if (output[\"Credentials\"] !== undefined) {\n    contents.Credentials = deserializeAws_queryCredentials(output[\"Credentials\"], context);\n  }\n  if (output[\"FederatedUser\"] !== undefined) {\n    contents.FederatedUser = deserializeAws_queryFederatedUser(output[\"FederatedUser\"], context);\n  }\n  if (output[\"PackedPolicySize\"] !== undefined) {\n    contents.PackedPolicySize = (0, smithy_client_1.strictParseInt32)(output[\"PackedPolicySize\"]);\n  }\n  return contents;\n};\nconst deserializeAws_queryGetSessionTokenResponse = (output, context) => {\n  const contents = {\n    Credentials: undefined\n  };\n  if (output[\"Credentials\"] !== undefined) {\n    contents.Credentials = deserializeAws_queryCredentials(output[\"Credentials\"], context);\n  }\n  return contents;\n};\nconst deserializeAws_queryIDPCommunicationErrorException = (output, context) => {\n  const contents = {\n    message: undefined\n  };\n  if (output[\"message\"] !== undefined) {\n    contents.message = (0, smithy_client_1.expectString)(output[\"message\"]);\n  }\n  return contents;\n};\nconst deserializeAws_queryIDPRejectedClaimException = (output, context) => {\n  const contents = {\n    message: undefined\n  };\n  if (output[\"message\"] !== undefined) {\n    contents.message = (0, smithy_client_1.expectString)(output[\"message\"]);\n  }\n  return contents;\n};\nconst deserializeAws_queryInvalidAuthorizationMessageException = (output, context) => {\n  const contents = {\n    message: undefined\n  };\n  if (output[\"message\"] !== undefined) {\n    contents.message = (0, smithy_client_1.expectString)(output[\"message\"]);\n  }\n  return contents;\n};\nconst deserializeAws_queryInvalidIdentityTokenException = (output, context) => {\n  const contents = {\n    message: undefined\n  };\n  if (output[\"message\"] !== undefined) {\n    contents.message = (0, smithy_client_1.expectString)(output[\"message\"]);\n  }\n  return contents;\n};\nconst deserializeAws_queryMalformedPolicyDocumentException = (output, context) => {\n  const contents = {\n    message: undefined\n  };\n  if (output[\"message\"] !== undefined) {\n    contents.message = (0, smithy_client_1.expectString)(output[\"message\"]);\n  }\n  return contents;\n};\nconst deserializeAws_queryPackedPolicyTooLargeException = (output, context) => {\n  const contents = {\n    message: undefined\n  };\n  if (output[\"message\"] !== undefined) {\n    contents.message = (0, smithy_client_1.expectString)(output[\"message\"]);\n  }\n  return contents;\n};\nconst deserializeAws_queryRegionDisabledException = (output, context) => {\n  const contents = {\n    message: undefined\n  };\n  if (output[\"message\"] !== undefined) {\n    contents.message = (0, smithy_client_1.expectString)(output[\"message\"]);\n  }\n  return contents;\n};\nconst deserializeMetadata = output => ({\n  httpStatusCode: output.statusCode,\n  requestId: output.headers[\"x-amzn-requestid\"] ?? output.headers[\"x-amzn-request-id\"] ?? output.headers[\"x-amz-request-id\"],\n  extendedRequestId: output.headers[\"x-amz-id-2\"],\n  cfId: output.headers[\"x-amz-cf-id\"]\n});\nconst collectBody = function () {\n  let streamBody = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Uint8Array();\n  let context = arguments.length > 1 ? arguments[1] : undefined;\n  if (streamBody instanceof Uint8Array) {\n    return Promise.resolve(streamBody);\n  }\n  return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());\n};\nconst collectBodyString = (streamBody, context) => collectBody(streamBody, context).then(body => context.utf8Encoder(body));\nconst buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const contents = {\n    protocol,\n    hostname,\n    port,\n    method: \"POST\",\n    path: basePath.endsWith(\"/\") ? basePath.slice(0, -1) + path : basePath + path,\n    headers\n  };\n  if (resolvedHostname !== undefined) {\n    contents.hostname = resolvedHostname;\n  }\n  if (body !== undefined) {\n    contents.body = body;\n  }\n  return new protocol_http_1.HttpRequest(contents);\n};\nconst parseBody = (streamBody, context) => collectBodyString(streamBody, context).then(encoded => {\n  if (encoded.length) {\n    const parser = new fast_xml_parser_1.XMLParser({\n      attributeNamePrefix: \"\",\n      htmlEntities: true,\n      ignoreAttributes: false,\n      ignoreDeclaration: true,\n      parseTagValue: false,\n      trimValues: false,\n      tagValueProcessor: (_, val) => val.trim() === \"\" && val.includes(\"\\n\") ? \"\" : undefined\n    });\n    parser.addEntity(\"#xD\", \"\\r\");\n    parser.addEntity(\"#10\", \"\\n\");\n    const parsedObj = parser.parse(encoded);\n    const textNodeName = \"#text\";\n    const key = Object.keys(parsedObj)[0];\n    const parsedObjToReturn = parsedObj[key];\n    if (parsedObjToReturn[textNodeName]) {\n      parsedObjToReturn[key] = parsedObjToReturn[textNodeName];\n      delete parsedObjToReturn[textNodeName];\n    }\n    return (0, smithy_client_1.getValueFromTextNode)(parsedObjToReturn);\n  }\n  return {};\n});\nconst parseErrorBody = async (errorBody, context) => {\n  const value = await parseBody(errorBody, context);\n  if (value.Error) {\n    value.Error.message = value.Error.message ?? value.Error.Message;\n  }\n  return value;\n};\nconst buildFormUrlencodedString = formEntries => Object.entries(formEntries).map(_ref10 => {\n  let [key, value] = _ref10;\n  return (0, smithy_client_1.extendedEncodeURIComponent)(key) + \"=\" + (0, smithy_client_1.extendedEncodeURIComponent)(value);\n}).join(\"&\");\nconst loadQueryErrorCode = (output, data) => {\n  if (data.Error.Code !== undefined) {\n    return data.Error.Code;\n  }\n  if (output.statusCode == 404) {\n    return \"NotFound\";\n  }\n};","map":{"version":3,"names":["Object","defineProperty","exports","value","deserializeAws_queryGetSessionTokenCommand","deserializeAws_queryGetFederationTokenCommand","deserializeAws_queryGetCallerIdentityCommand","deserializeAws_queryGetAccessKeyInfoCommand","deserializeAws_queryDecodeAuthorizationMessageCommand","deserializeAws_queryAssumeRoleWithWebIdentityCommand","deserializeAws_queryAssumeRoleWithSAMLCommand","deserializeAws_queryAssumeRoleCommand","serializeAws_queryGetSessionTokenCommand","serializeAws_queryGetFederationTokenCommand","serializeAws_queryGetCallerIdentityCommand","serializeAws_queryGetAccessKeyInfoCommand","serializeAws_queryDecodeAuthorizationMessageCommand","serializeAws_queryAssumeRoleWithWebIdentityCommand","serializeAws_queryAssumeRoleWithSAMLCommand","serializeAws_queryAssumeRoleCommand","protocol_http_1","require","smithy_client_1","fast_xml_parser_1","models_0_1","STSServiceException_1","input","context","headers","body","buildFormUrlencodedString","serializeAws_queryAssumeRoleRequest","Action","Version","buildHttpRpcRequest","undefined","serializeAws_queryAssumeRoleWithSAMLRequest","serializeAws_queryAssumeRoleWithWebIdentityRequest","serializeAws_queryDecodeAuthorizationMessageRequest","serializeAws_queryGetAccessKeyInfoRequest","serializeAws_queryGetCallerIdentityRequest","serializeAws_queryGetFederationTokenRequest","serializeAws_queryGetSessionTokenRequest","output","statusCode","deserializeAws_queryAssumeRoleCommandError","data","parseBody","contents","deserializeAws_queryAssumeRoleResponse","AssumeRoleResult","response","$metadata","deserializeMetadata","Promise","resolve","parsedOutput","parseErrorBody","errorCode","loadQueryErrorCode","deserializeAws_queryExpiredTokenExceptionResponse","deserializeAws_queryMalformedPolicyDocumentExceptionResponse","deserializeAws_queryPackedPolicyTooLargeExceptionResponse","deserializeAws_queryRegionDisabledExceptionResponse","parsedBody","throwDefaultError","Error","exceptionCtor","STSServiceException","deserializeAws_queryAssumeRoleWithSAMLCommandError","deserializeAws_queryAssumeRoleWithSAMLResponse","AssumeRoleWithSAMLResult","deserializeAws_queryIDPRejectedClaimExceptionResponse","deserializeAws_queryInvalidIdentityTokenExceptionResponse","deserializeAws_queryAssumeRoleWithWebIdentityCommandError","deserializeAws_queryAssumeRoleWithWebIdentityResponse","AssumeRoleWithWebIdentityResult","deserializeAws_queryIDPCommunicationErrorExceptionResponse","deserializeAws_queryDecodeAuthorizationMessageCommandError","deserializeAws_queryDecodeAuthorizationMessageResponse","DecodeAuthorizationMessageResult","deserializeAws_queryInvalidAuthorizationMessageExceptionResponse","deserializeAws_queryGetAccessKeyInfoCommandError","deserializeAws_queryGetAccessKeyInfoResponse","GetAccessKeyInfoResult","deserializeAws_queryGetCallerIdentityCommandError","deserializeAws_queryGetCallerIdentityResponse","GetCallerIdentityResult","deserializeAws_queryGetFederationTokenCommandError","deserializeAws_queryGetFederationTokenResponse","GetFederationTokenResult","deserializeAws_queryGetSessionTokenCommandError","deserializeAws_queryGetSessionTokenResponse","GetSessionTokenResult","deserialized","deserializeAws_queryExpiredTokenException","exception","ExpiredTokenException","decorateServiceException","deserializeAws_queryIDPCommunicationErrorException","IDPCommunicationErrorException","deserializeAws_queryIDPRejectedClaimException","IDPRejectedClaimException","deserializeAws_queryInvalidAuthorizationMessageException","InvalidAuthorizationMessageException","deserializeAws_queryInvalidIdentityTokenException","InvalidIdentityTokenException","deserializeAws_queryMalformedPolicyDocumentException","MalformedPolicyDocumentException","deserializeAws_queryPackedPolicyTooLargeException","PackedPolicyTooLargeException","deserializeAws_queryRegionDisabledException","RegionDisabledException","entries","RoleArn","RoleSessionName","PolicyArns","memberEntries","serializeAws_querypolicyDescriptorListType","length","forEach","key","loc","Policy","DurationSeconds","Tags","serializeAws_querytagListType","TransitiveTagKeys","serializeAws_querytagKeyListType","ExternalId","SerialNumber","TokenCode","SourceIdentity","PrincipalArn","SAMLAssertion","WebIdentityToken","ProviderId","EncodedMessage","AccessKeyId","Name","counter","entry","serializeAws_queryPolicyDescriptorType","arn","serializeAws_queryTag","Key","Value","deserializeAws_queryAssumedRoleUser","AssumedRoleId","Arn","expectString","Credentials","AssumedRoleUser","PackedPolicySize","deserializeAws_queryCredentials","strictParseInt32","Subject","SubjectType","Issuer","Audience","NameQualifier","SubjectFromWebIdentityToken","Provider","SecretAccessKey","SessionToken","Expiration","expectNonNull","parseRfc3339DateTime","DecodedMessage","message","deserializeAws_queryFederatedUser","FederatedUserId","Account","UserId","FederatedUser","httpStatusCode","requestId","extendedRequestId","cfId","collectBody","streamBody","Uint8Array","streamCollector","collectBodyString","then","utf8Encoder","path","resolvedHostname","hostname","protocol","port","basePath","endpoint","method","endsWith","slice","HttpRequest","encoded","parser","XMLParser","attributeNamePrefix","htmlEntities","ignoreAttributes","ignoreDeclaration","parseTagValue","trimValues","tagValueProcessor","_","val","trim","includes","addEntity","parsedObj","parse","textNodeName","keys","parsedObjToReturn","getValueFromTextNode","errorBody","Message","formEntries","map","extendedEncodeURIComponent","join","Code"],"sources":["C:/Users/91930/Desktop/Github projects/Pharmacy Demo/back-end/node_modules/@aws-sdk/client-sts/dist-cjs/protocols/Aws_query.js"],"sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.deserializeAws_queryGetSessionTokenCommand = exports.deserializeAws_queryGetFederationTokenCommand = exports.deserializeAws_queryGetCallerIdentityCommand = exports.deserializeAws_queryGetAccessKeyInfoCommand = exports.deserializeAws_queryDecodeAuthorizationMessageCommand = exports.deserializeAws_queryAssumeRoleWithWebIdentityCommand = exports.deserializeAws_queryAssumeRoleWithSAMLCommand = exports.deserializeAws_queryAssumeRoleCommand = exports.serializeAws_queryGetSessionTokenCommand = exports.serializeAws_queryGetFederationTokenCommand = exports.serializeAws_queryGetCallerIdentityCommand = exports.serializeAws_queryGetAccessKeyInfoCommand = exports.serializeAws_queryDecodeAuthorizationMessageCommand = exports.serializeAws_queryAssumeRoleWithWebIdentityCommand = exports.serializeAws_queryAssumeRoleWithSAMLCommand = exports.serializeAws_queryAssumeRoleCommand = void 0;\r\nconst protocol_http_1 = require(\"@aws-sdk/protocol-http\");\r\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\r\nconst fast_xml_parser_1 = require(\"fast-xml-parser\");\r\nconst models_0_1 = require(\"../models/models_0\");\r\nconst STSServiceException_1 = require(\"../models/STSServiceException\");\r\nconst serializeAws_queryAssumeRoleCommand = async (input, context) => {\r\n    const headers = {\r\n        \"content-type\": \"application/x-www-form-urlencoded\",\r\n    };\r\n    let body;\r\n    body = buildFormUrlencodedString({\r\n        ...serializeAws_queryAssumeRoleRequest(input, context),\r\n        Action: \"AssumeRole\",\r\n        Version: \"2011-06-15\",\r\n    });\r\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\r\n};\r\nexports.serializeAws_queryAssumeRoleCommand = serializeAws_queryAssumeRoleCommand;\r\nconst serializeAws_queryAssumeRoleWithSAMLCommand = async (input, context) => {\r\n    const headers = {\r\n        \"content-type\": \"application/x-www-form-urlencoded\",\r\n    };\r\n    let body;\r\n    body = buildFormUrlencodedString({\r\n        ...serializeAws_queryAssumeRoleWithSAMLRequest(input, context),\r\n        Action: \"AssumeRoleWithSAML\",\r\n        Version: \"2011-06-15\",\r\n    });\r\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\r\n};\r\nexports.serializeAws_queryAssumeRoleWithSAMLCommand = serializeAws_queryAssumeRoleWithSAMLCommand;\r\nconst serializeAws_queryAssumeRoleWithWebIdentityCommand = async (input, context) => {\r\n    const headers = {\r\n        \"content-type\": \"application/x-www-form-urlencoded\",\r\n    };\r\n    let body;\r\n    body = buildFormUrlencodedString({\r\n        ...serializeAws_queryAssumeRoleWithWebIdentityRequest(input, context),\r\n        Action: \"AssumeRoleWithWebIdentity\",\r\n        Version: \"2011-06-15\",\r\n    });\r\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\r\n};\r\nexports.serializeAws_queryAssumeRoleWithWebIdentityCommand = serializeAws_queryAssumeRoleWithWebIdentityCommand;\r\nconst serializeAws_queryDecodeAuthorizationMessageCommand = async (input, context) => {\r\n    const headers = {\r\n        \"content-type\": \"application/x-www-form-urlencoded\",\r\n    };\r\n    let body;\r\n    body = buildFormUrlencodedString({\r\n        ...serializeAws_queryDecodeAuthorizationMessageRequest(input, context),\r\n        Action: \"DecodeAuthorizationMessage\",\r\n        Version: \"2011-06-15\",\r\n    });\r\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\r\n};\r\nexports.serializeAws_queryDecodeAuthorizationMessageCommand = serializeAws_queryDecodeAuthorizationMessageCommand;\r\nconst serializeAws_queryGetAccessKeyInfoCommand = async (input, context) => {\r\n    const headers = {\r\n        \"content-type\": \"application/x-www-form-urlencoded\",\r\n    };\r\n    let body;\r\n    body = buildFormUrlencodedString({\r\n        ...serializeAws_queryGetAccessKeyInfoRequest(input, context),\r\n        Action: \"GetAccessKeyInfo\",\r\n        Version: \"2011-06-15\",\r\n    });\r\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\r\n};\r\nexports.serializeAws_queryGetAccessKeyInfoCommand = serializeAws_queryGetAccessKeyInfoCommand;\r\nconst serializeAws_queryGetCallerIdentityCommand = async (input, context) => {\r\n    const headers = {\r\n        \"content-type\": \"application/x-www-form-urlencoded\",\r\n    };\r\n    let body;\r\n    body = buildFormUrlencodedString({\r\n        ...serializeAws_queryGetCallerIdentityRequest(input, context),\r\n        Action: \"GetCallerIdentity\",\r\n        Version: \"2011-06-15\",\r\n    });\r\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\r\n};\r\nexports.serializeAws_queryGetCallerIdentityCommand = serializeAws_queryGetCallerIdentityCommand;\r\nconst serializeAws_queryGetFederationTokenCommand = async (input, context) => {\r\n    const headers = {\r\n        \"content-type\": \"application/x-www-form-urlencoded\",\r\n    };\r\n    let body;\r\n    body = buildFormUrlencodedString({\r\n        ...serializeAws_queryGetFederationTokenRequest(input, context),\r\n        Action: \"GetFederationToken\",\r\n        Version: \"2011-06-15\",\r\n    });\r\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\r\n};\r\nexports.serializeAws_queryGetFederationTokenCommand = serializeAws_queryGetFederationTokenCommand;\r\nconst serializeAws_queryGetSessionTokenCommand = async (input, context) => {\r\n    const headers = {\r\n        \"content-type\": \"application/x-www-form-urlencoded\",\r\n    };\r\n    let body;\r\n    body = buildFormUrlencodedString({\r\n        ...serializeAws_queryGetSessionTokenRequest(input, context),\r\n        Action: \"GetSessionToken\",\r\n        Version: \"2011-06-15\",\r\n    });\r\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\r\n};\r\nexports.serializeAws_queryGetSessionTokenCommand = serializeAws_queryGetSessionTokenCommand;\r\nconst deserializeAws_queryAssumeRoleCommand = async (output, context) => {\r\n    if (output.statusCode >= 300) {\r\n        return deserializeAws_queryAssumeRoleCommandError(output, context);\r\n    }\r\n    const data = await parseBody(output.body, context);\r\n    let contents = {};\r\n    contents = deserializeAws_queryAssumeRoleResponse(data.AssumeRoleResult, context);\r\n    const response = {\r\n        $metadata: deserializeMetadata(output),\r\n        ...contents,\r\n    };\r\n    return Promise.resolve(response);\r\n};\r\nexports.deserializeAws_queryAssumeRoleCommand = deserializeAws_queryAssumeRoleCommand;\r\nconst deserializeAws_queryAssumeRoleCommandError = async (output, context) => {\r\n    const parsedOutput = {\r\n        ...output,\r\n        body: await parseErrorBody(output.body, context),\r\n    };\r\n    const errorCode = loadQueryErrorCode(output, parsedOutput.body);\r\n    switch (errorCode) {\r\n        case \"ExpiredTokenException\":\r\n        case \"com.amazonaws.sts#ExpiredTokenException\":\r\n            throw await deserializeAws_queryExpiredTokenExceptionResponse(parsedOutput, context);\r\n        case \"MalformedPolicyDocument\":\r\n        case \"com.amazonaws.sts#MalformedPolicyDocumentException\":\r\n            throw await deserializeAws_queryMalformedPolicyDocumentExceptionResponse(parsedOutput, context);\r\n        case \"PackedPolicyTooLarge\":\r\n        case \"com.amazonaws.sts#PackedPolicyTooLargeException\":\r\n            throw await deserializeAws_queryPackedPolicyTooLargeExceptionResponse(parsedOutput, context);\r\n        case \"RegionDisabledException\":\r\n        case \"com.amazonaws.sts#RegionDisabledException\":\r\n            throw await deserializeAws_queryRegionDisabledExceptionResponse(parsedOutput, context);\r\n        default:\r\n            const parsedBody = parsedOutput.body;\r\n            (0, smithy_client_1.throwDefaultError)({\r\n                output,\r\n                parsedBody: parsedBody.Error,\r\n                exceptionCtor: STSServiceException_1.STSServiceException,\r\n                errorCode,\r\n            });\r\n    }\r\n};\r\nconst deserializeAws_queryAssumeRoleWithSAMLCommand = async (output, context) => {\r\n    if (output.statusCode >= 300) {\r\n        return deserializeAws_queryAssumeRoleWithSAMLCommandError(output, context);\r\n    }\r\n    const data = await parseBody(output.body, context);\r\n    let contents = {};\r\n    contents = deserializeAws_queryAssumeRoleWithSAMLResponse(data.AssumeRoleWithSAMLResult, context);\r\n    const response = {\r\n        $metadata: deserializeMetadata(output),\r\n        ...contents,\r\n    };\r\n    return Promise.resolve(response);\r\n};\r\nexports.deserializeAws_queryAssumeRoleWithSAMLCommand = deserializeAws_queryAssumeRoleWithSAMLCommand;\r\nconst deserializeAws_queryAssumeRoleWithSAMLCommandError = async (output, context) => {\r\n    const parsedOutput = {\r\n        ...output,\r\n        body: await parseErrorBody(output.body, context),\r\n    };\r\n    const errorCode = loadQueryErrorCode(output, parsedOutput.body);\r\n    switch (errorCode) {\r\n        case \"ExpiredTokenException\":\r\n        case \"com.amazonaws.sts#ExpiredTokenException\":\r\n            throw await deserializeAws_queryExpiredTokenExceptionResponse(parsedOutput, context);\r\n        case \"IDPRejectedClaim\":\r\n        case \"com.amazonaws.sts#IDPRejectedClaimException\":\r\n            throw await deserializeAws_queryIDPRejectedClaimExceptionResponse(parsedOutput, context);\r\n        case \"InvalidIdentityToken\":\r\n        case \"com.amazonaws.sts#InvalidIdentityTokenException\":\r\n            throw await deserializeAws_queryInvalidIdentityTokenExceptionResponse(parsedOutput, context);\r\n        case \"MalformedPolicyDocument\":\r\n        case \"com.amazonaws.sts#MalformedPolicyDocumentException\":\r\n            throw await deserializeAws_queryMalformedPolicyDocumentExceptionResponse(parsedOutput, context);\r\n        case \"PackedPolicyTooLarge\":\r\n        case \"com.amazonaws.sts#PackedPolicyTooLargeException\":\r\n            throw await deserializeAws_queryPackedPolicyTooLargeExceptionResponse(parsedOutput, context);\r\n        case \"RegionDisabledException\":\r\n        case \"com.amazonaws.sts#RegionDisabledException\":\r\n            throw await deserializeAws_queryRegionDisabledExceptionResponse(parsedOutput, context);\r\n        default:\r\n            const parsedBody = parsedOutput.body;\r\n            (0, smithy_client_1.throwDefaultError)({\r\n                output,\r\n                parsedBody: parsedBody.Error,\r\n                exceptionCtor: STSServiceException_1.STSServiceException,\r\n                errorCode,\r\n            });\r\n    }\r\n};\r\nconst deserializeAws_queryAssumeRoleWithWebIdentityCommand = async (output, context) => {\r\n    if (output.statusCode >= 300) {\r\n        return deserializeAws_queryAssumeRoleWithWebIdentityCommandError(output, context);\r\n    }\r\n    const data = await parseBody(output.body, context);\r\n    let contents = {};\r\n    contents = deserializeAws_queryAssumeRoleWithWebIdentityResponse(data.AssumeRoleWithWebIdentityResult, context);\r\n    const response = {\r\n        $metadata: deserializeMetadata(output),\r\n        ...contents,\r\n    };\r\n    return Promise.resolve(response);\r\n};\r\nexports.deserializeAws_queryAssumeRoleWithWebIdentityCommand = deserializeAws_queryAssumeRoleWithWebIdentityCommand;\r\nconst deserializeAws_queryAssumeRoleWithWebIdentityCommandError = async (output, context) => {\r\n    const parsedOutput = {\r\n        ...output,\r\n        body: await parseErrorBody(output.body, context),\r\n    };\r\n    const errorCode = loadQueryErrorCode(output, parsedOutput.body);\r\n    switch (errorCode) {\r\n        case \"ExpiredTokenException\":\r\n        case \"com.amazonaws.sts#ExpiredTokenException\":\r\n            throw await deserializeAws_queryExpiredTokenExceptionResponse(parsedOutput, context);\r\n        case \"IDPCommunicationError\":\r\n        case \"com.amazonaws.sts#IDPCommunicationErrorException\":\r\n            throw await deserializeAws_queryIDPCommunicationErrorExceptionResponse(parsedOutput, context);\r\n        case \"IDPRejectedClaim\":\r\n        case \"com.amazonaws.sts#IDPRejectedClaimException\":\r\n            throw await deserializeAws_queryIDPRejectedClaimExceptionResponse(parsedOutput, context);\r\n        case \"InvalidIdentityToken\":\r\n        case \"com.amazonaws.sts#InvalidIdentityTokenException\":\r\n            throw await deserializeAws_queryInvalidIdentityTokenExceptionResponse(parsedOutput, context);\r\n        case \"MalformedPolicyDocument\":\r\n        case \"com.amazonaws.sts#MalformedPolicyDocumentException\":\r\n            throw await deserializeAws_queryMalformedPolicyDocumentExceptionResponse(parsedOutput, context);\r\n        case \"PackedPolicyTooLarge\":\r\n        case \"com.amazonaws.sts#PackedPolicyTooLargeException\":\r\n            throw await deserializeAws_queryPackedPolicyTooLargeExceptionResponse(parsedOutput, context);\r\n        case \"RegionDisabledException\":\r\n        case \"com.amazonaws.sts#RegionDisabledException\":\r\n            throw await deserializeAws_queryRegionDisabledExceptionResponse(parsedOutput, context);\r\n        default:\r\n            const parsedBody = parsedOutput.body;\r\n            (0, smithy_client_1.throwDefaultError)({\r\n                output,\r\n                parsedBody: parsedBody.Error,\r\n                exceptionCtor: STSServiceException_1.STSServiceException,\r\n                errorCode,\r\n            });\r\n    }\r\n};\r\nconst deserializeAws_queryDecodeAuthorizationMessageCommand = async (output, context) => {\r\n    if (output.statusCode >= 300) {\r\n        return deserializeAws_queryDecodeAuthorizationMessageCommandError(output, context);\r\n    }\r\n    const data = await parseBody(output.body, context);\r\n    let contents = {};\r\n    contents = deserializeAws_queryDecodeAuthorizationMessageResponse(data.DecodeAuthorizationMessageResult, context);\r\n    const response = {\r\n        $metadata: deserializeMetadata(output),\r\n        ...contents,\r\n    };\r\n    return Promise.resolve(response);\r\n};\r\nexports.deserializeAws_queryDecodeAuthorizationMessageCommand = deserializeAws_queryDecodeAuthorizationMessageCommand;\r\nconst deserializeAws_queryDecodeAuthorizationMessageCommandError = async (output, context) => {\r\n    const parsedOutput = {\r\n        ...output,\r\n        body: await parseErrorBody(output.body, context),\r\n    };\r\n    const errorCode = loadQueryErrorCode(output, parsedOutput.body);\r\n    switch (errorCode) {\r\n        case \"InvalidAuthorizationMessageException\":\r\n        case \"com.amazonaws.sts#InvalidAuthorizationMessageException\":\r\n            throw await deserializeAws_queryInvalidAuthorizationMessageExceptionResponse(parsedOutput, context);\r\n        default:\r\n            const parsedBody = parsedOutput.body;\r\n            (0, smithy_client_1.throwDefaultError)({\r\n                output,\r\n                parsedBody: parsedBody.Error,\r\n                exceptionCtor: STSServiceException_1.STSServiceException,\r\n                errorCode,\r\n            });\r\n    }\r\n};\r\nconst deserializeAws_queryGetAccessKeyInfoCommand = async (output, context) => {\r\n    if (output.statusCode >= 300) {\r\n        return deserializeAws_queryGetAccessKeyInfoCommandError(output, context);\r\n    }\r\n    const data = await parseBody(output.body, context);\r\n    let contents = {};\r\n    contents = deserializeAws_queryGetAccessKeyInfoResponse(data.GetAccessKeyInfoResult, context);\r\n    const response = {\r\n        $metadata: deserializeMetadata(output),\r\n        ...contents,\r\n    };\r\n    return Promise.resolve(response);\r\n};\r\nexports.deserializeAws_queryGetAccessKeyInfoCommand = deserializeAws_queryGetAccessKeyInfoCommand;\r\nconst deserializeAws_queryGetAccessKeyInfoCommandError = async (output, context) => {\r\n    const parsedOutput = {\r\n        ...output,\r\n        body: await parseErrorBody(output.body, context),\r\n    };\r\n    const errorCode = loadQueryErrorCode(output, parsedOutput.body);\r\n    const parsedBody = parsedOutput.body;\r\n    (0, smithy_client_1.throwDefaultError)({\r\n        output,\r\n        parsedBody: parsedBody.Error,\r\n        exceptionCtor: STSServiceException_1.STSServiceException,\r\n        errorCode,\r\n    });\r\n};\r\nconst deserializeAws_queryGetCallerIdentityCommand = async (output, context) => {\r\n    if (output.statusCode >= 300) {\r\n        return deserializeAws_queryGetCallerIdentityCommandError(output, context);\r\n    }\r\n    const data = await parseBody(output.body, context);\r\n    let contents = {};\r\n    contents = deserializeAws_queryGetCallerIdentityResponse(data.GetCallerIdentityResult, context);\r\n    const response = {\r\n        $metadata: deserializeMetadata(output),\r\n        ...contents,\r\n    };\r\n    return Promise.resolve(response);\r\n};\r\nexports.deserializeAws_queryGetCallerIdentityCommand = deserializeAws_queryGetCallerIdentityCommand;\r\nconst deserializeAws_queryGetCallerIdentityCommandError = async (output, context) => {\r\n    const parsedOutput = {\r\n        ...output,\r\n        body: await parseErrorBody(output.body, context),\r\n    };\r\n    const errorCode = loadQueryErrorCode(output, parsedOutput.body);\r\n    const parsedBody = parsedOutput.body;\r\n    (0, smithy_client_1.throwDefaultError)({\r\n        output,\r\n        parsedBody: parsedBody.Error,\r\n        exceptionCtor: STSServiceException_1.STSServiceException,\r\n        errorCode,\r\n    });\r\n};\r\nconst deserializeAws_queryGetFederationTokenCommand = async (output, context) => {\r\n    if (output.statusCode >= 300) {\r\n        return deserializeAws_queryGetFederationTokenCommandError(output, context);\r\n    }\r\n    const data = await parseBody(output.body, context);\r\n    let contents = {};\r\n    contents = deserializeAws_queryGetFederationTokenResponse(data.GetFederationTokenResult, context);\r\n    const response = {\r\n        $metadata: deserializeMetadata(output),\r\n        ...contents,\r\n    };\r\n    return Promise.resolve(response);\r\n};\r\nexports.deserializeAws_queryGetFederationTokenCommand = deserializeAws_queryGetFederationTokenCommand;\r\nconst deserializeAws_queryGetFederationTokenCommandError = async (output, context) => {\r\n    const parsedOutput = {\r\n        ...output,\r\n        body: await parseErrorBody(output.body, context),\r\n    };\r\n    const errorCode = loadQueryErrorCode(output, parsedOutput.body);\r\n    switch (errorCode) {\r\n        case \"MalformedPolicyDocument\":\r\n        case \"com.amazonaws.sts#MalformedPolicyDocumentException\":\r\n            throw await deserializeAws_queryMalformedPolicyDocumentExceptionResponse(parsedOutput, context);\r\n        case \"PackedPolicyTooLarge\":\r\n        case \"com.amazonaws.sts#PackedPolicyTooLargeException\":\r\n            throw await deserializeAws_queryPackedPolicyTooLargeExceptionResponse(parsedOutput, context);\r\n        case \"RegionDisabledException\":\r\n        case \"com.amazonaws.sts#RegionDisabledException\":\r\n            throw await deserializeAws_queryRegionDisabledExceptionResponse(parsedOutput, context);\r\n        default:\r\n            const parsedBody = parsedOutput.body;\r\n            (0, smithy_client_1.throwDefaultError)({\r\n                output,\r\n                parsedBody: parsedBody.Error,\r\n                exceptionCtor: STSServiceException_1.STSServiceException,\r\n                errorCode,\r\n            });\r\n    }\r\n};\r\nconst deserializeAws_queryGetSessionTokenCommand = async (output, context) => {\r\n    if (output.statusCode >= 300) {\r\n        return deserializeAws_queryGetSessionTokenCommandError(output, context);\r\n    }\r\n    const data = await parseBody(output.body, context);\r\n    let contents = {};\r\n    contents = deserializeAws_queryGetSessionTokenResponse(data.GetSessionTokenResult, context);\r\n    const response = {\r\n        $metadata: deserializeMetadata(output),\r\n        ...contents,\r\n    };\r\n    return Promise.resolve(response);\r\n};\r\nexports.deserializeAws_queryGetSessionTokenCommand = deserializeAws_queryGetSessionTokenCommand;\r\nconst deserializeAws_queryGetSessionTokenCommandError = async (output, context) => {\r\n    const parsedOutput = {\r\n        ...output,\r\n        body: await parseErrorBody(output.body, context),\r\n    };\r\n    const errorCode = loadQueryErrorCode(output, parsedOutput.body);\r\n    switch (errorCode) {\r\n        case \"RegionDisabledException\":\r\n        case \"com.amazonaws.sts#RegionDisabledException\":\r\n            throw await deserializeAws_queryRegionDisabledExceptionResponse(parsedOutput, context);\r\n        default:\r\n            const parsedBody = parsedOutput.body;\r\n            (0, smithy_client_1.throwDefaultError)({\r\n                output,\r\n                parsedBody: parsedBody.Error,\r\n                exceptionCtor: STSServiceException_1.STSServiceException,\r\n                errorCode,\r\n            });\r\n    }\r\n};\r\nconst deserializeAws_queryExpiredTokenExceptionResponse = async (parsedOutput, context) => {\r\n    const body = parsedOutput.body;\r\n    const deserialized = deserializeAws_queryExpiredTokenException(body.Error, context);\r\n    const exception = new models_0_1.ExpiredTokenException({\r\n        $metadata: deserializeMetadata(parsedOutput),\r\n        ...deserialized,\r\n    });\r\n    return (0, smithy_client_1.decorateServiceException)(exception, body);\r\n};\r\nconst deserializeAws_queryIDPCommunicationErrorExceptionResponse = async (parsedOutput, context) => {\r\n    const body = parsedOutput.body;\r\n    const deserialized = deserializeAws_queryIDPCommunicationErrorException(body.Error, context);\r\n    const exception = new models_0_1.IDPCommunicationErrorException({\r\n        $metadata: deserializeMetadata(parsedOutput),\r\n        ...deserialized,\r\n    });\r\n    return (0, smithy_client_1.decorateServiceException)(exception, body);\r\n};\r\nconst deserializeAws_queryIDPRejectedClaimExceptionResponse = async (parsedOutput, context) => {\r\n    const body = parsedOutput.body;\r\n    const deserialized = deserializeAws_queryIDPRejectedClaimException(body.Error, context);\r\n    const exception = new models_0_1.IDPRejectedClaimException({\r\n        $metadata: deserializeMetadata(parsedOutput),\r\n        ...deserialized,\r\n    });\r\n    return (0, smithy_client_1.decorateServiceException)(exception, body);\r\n};\r\nconst deserializeAws_queryInvalidAuthorizationMessageExceptionResponse = async (parsedOutput, context) => {\r\n    const body = parsedOutput.body;\r\n    const deserialized = deserializeAws_queryInvalidAuthorizationMessageException(body.Error, context);\r\n    const exception = new models_0_1.InvalidAuthorizationMessageException({\r\n        $metadata: deserializeMetadata(parsedOutput),\r\n        ...deserialized,\r\n    });\r\n    return (0, smithy_client_1.decorateServiceException)(exception, body);\r\n};\r\nconst deserializeAws_queryInvalidIdentityTokenExceptionResponse = async (parsedOutput, context) => {\r\n    const body = parsedOutput.body;\r\n    const deserialized = deserializeAws_queryInvalidIdentityTokenException(body.Error, context);\r\n    const exception = new models_0_1.InvalidIdentityTokenException({\r\n        $metadata: deserializeMetadata(parsedOutput),\r\n        ...deserialized,\r\n    });\r\n    return (0, smithy_client_1.decorateServiceException)(exception, body);\r\n};\r\nconst deserializeAws_queryMalformedPolicyDocumentExceptionResponse = async (parsedOutput, context) => {\r\n    const body = parsedOutput.body;\r\n    const deserialized = deserializeAws_queryMalformedPolicyDocumentException(body.Error, context);\r\n    const exception = new models_0_1.MalformedPolicyDocumentException({\r\n        $metadata: deserializeMetadata(parsedOutput),\r\n        ...deserialized,\r\n    });\r\n    return (0, smithy_client_1.decorateServiceException)(exception, body);\r\n};\r\nconst deserializeAws_queryPackedPolicyTooLargeExceptionResponse = async (parsedOutput, context) => {\r\n    const body = parsedOutput.body;\r\n    const deserialized = deserializeAws_queryPackedPolicyTooLargeException(body.Error, context);\r\n    const exception = new models_0_1.PackedPolicyTooLargeException({\r\n        $metadata: deserializeMetadata(parsedOutput),\r\n        ...deserialized,\r\n    });\r\n    return (0, smithy_client_1.decorateServiceException)(exception, body);\r\n};\r\nconst deserializeAws_queryRegionDisabledExceptionResponse = async (parsedOutput, context) => {\r\n    const body = parsedOutput.body;\r\n    const deserialized = deserializeAws_queryRegionDisabledException(body.Error, context);\r\n    const exception = new models_0_1.RegionDisabledException({\r\n        $metadata: deserializeMetadata(parsedOutput),\r\n        ...deserialized,\r\n    });\r\n    return (0, smithy_client_1.decorateServiceException)(exception, body);\r\n};\r\nconst serializeAws_queryAssumeRoleRequest = (input, context) => {\r\n    const entries = {};\r\n    if (input.RoleArn != null) {\r\n        entries[\"RoleArn\"] = input.RoleArn;\r\n    }\r\n    if (input.RoleSessionName != null) {\r\n        entries[\"RoleSessionName\"] = input.RoleSessionName;\r\n    }\r\n    if (input.PolicyArns != null) {\r\n        const memberEntries = serializeAws_querypolicyDescriptorListType(input.PolicyArns, context);\r\n        if (input.PolicyArns?.length === 0) {\r\n            entries.PolicyArns = [];\r\n        }\r\n        Object.entries(memberEntries).forEach(([key, value]) => {\r\n            const loc = `PolicyArns.${key}`;\r\n            entries[loc] = value;\r\n        });\r\n    }\r\n    if (input.Policy != null) {\r\n        entries[\"Policy\"] = input.Policy;\r\n    }\r\n    if (input.DurationSeconds != null) {\r\n        entries[\"DurationSeconds\"] = input.DurationSeconds;\r\n    }\r\n    if (input.Tags != null) {\r\n        const memberEntries = serializeAws_querytagListType(input.Tags, context);\r\n        if (input.Tags?.length === 0) {\r\n            entries.Tags = [];\r\n        }\r\n        Object.entries(memberEntries).forEach(([key, value]) => {\r\n            const loc = `Tags.${key}`;\r\n            entries[loc] = value;\r\n        });\r\n    }\r\n    if (input.TransitiveTagKeys != null) {\r\n        const memberEntries = serializeAws_querytagKeyListType(input.TransitiveTagKeys, context);\r\n        if (input.TransitiveTagKeys?.length === 0) {\r\n            entries.TransitiveTagKeys = [];\r\n        }\r\n        Object.entries(memberEntries).forEach(([key, value]) => {\r\n            const loc = `TransitiveTagKeys.${key}`;\r\n            entries[loc] = value;\r\n        });\r\n    }\r\n    if (input.ExternalId != null) {\r\n        entries[\"ExternalId\"] = input.ExternalId;\r\n    }\r\n    if (input.SerialNumber != null) {\r\n        entries[\"SerialNumber\"] = input.SerialNumber;\r\n    }\r\n    if (input.TokenCode != null) {\r\n        entries[\"TokenCode\"] = input.TokenCode;\r\n    }\r\n    if (input.SourceIdentity != null) {\r\n        entries[\"SourceIdentity\"] = input.SourceIdentity;\r\n    }\r\n    return entries;\r\n};\r\nconst serializeAws_queryAssumeRoleWithSAMLRequest = (input, context) => {\r\n    const entries = {};\r\n    if (input.RoleArn != null) {\r\n        entries[\"RoleArn\"] = input.RoleArn;\r\n    }\r\n    if (input.PrincipalArn != null) {\r\n        entries[\"PrincipalArn\"] = input.PrincipalArn;\r\n    }\r\n    if (input.SAMLAssertion != null) {\r\n        entries[\"SAMLAssertion\"] = input.SAMLAssertion;\r\n    }\r\n    if (input.PolicyArns != null) {\r\n        const memberEntries = serializeAws_querypolicyDescriptorListType(input.PolicyArns, context);\r\n        if (input.PolicyArns?.length === 0) {\r\n            entries.PolicyArns = [];\r\n        }\r\n        Object.entries(memberEntries).forEach(([key, value]) => {\r\n            const loc = `PolicyArns.${key}`;\r\n            entries[loc] = value;\r\n        });\r\n    }\r\n    if (input.Policy != null) {\r\n        entries[\"Policy\"] = input.Policy;\r\n    }\r\n    if (input.DurationSeconds != null) {\r\n        entries[\"DurationSeconds\"] = input.DurationSeconds;\r\n    }\r\n    return entries;\r\n};\r\nconst serializeAws_queryAssumeRoleWithWebIdentityRequest = (input, context) => {\r\n    const entries = {};\r\n    if (input.RoleArn != null) {\r\n        entries[\"RoleArn\"] = input.RoleArn;\r\n    }\r\n    if (input.RoleSessionName != null) {\r\n        entries[\"RoleSessionName\"] = input.RoleSessionName;\r\n    }\r\n    if (input.WebIdentityToken != null) {\r\n        entries[\"WebIdentityToken\"] = input.WebIdentityToken;\r\n    }\r\n    if (input.ProviderId != null) {\r\n        entries[\"ProviderId\"] = input.ProviderId;\r\n    }\r\n    if (input.PolicyArns != null) {\r\n        const memberEntries = serializeAws_querypolicyDescriptorListType(input.PolicyArns, context);\r\n        if (input.PolicyArns?.length === 0) {\r\n            entries.PolicyArns = [];\r\n        }\r\n        Object.entries(memberEntries).forEach(([key, value]) => {\r\n            const loc = `PolicyArns.${key}`;\r\n            entries[loc] = value;\r\n        });\r\n    }\r\n    if (input.Policy != null) {\r\n        entries[\"Policy\"] = input.Policy;\r\n    }\r\n    if (input.DurationSeconds != null) {\r\n        entries[\"DurationSeconds\"] = input.DurationSeconds;\r\n    }\r\n    return entries;\r\n};\r\nconst serializeAws_queryDecodeAuthorizationMessageRequest = (input, context) => {\r\n    const entries = {};\r\n    if (input.EncodedMessage != null) {\r\n        entries[\"EncodedMessage\"] = input.EncodedMessage;\r\n    }\r\n    return entries;\r\n};\r\nconst serializeAws_queryGetAccessKeyInfoRequest = (input, context) => {\r\n    const entries = {};\r\n    if (input.AccessKeyId != null) {\r\n        entries[\"AccessKeyId\"] = input.AccessKeyId;\r\n    }\r\n    return entries;\r\n};\r\nconst serializeAws_queryGetCallerIdentityRequest = (input, context) => {\r\n    const entries = {};\r\n    return entries;\r\n};\r\nconst serializeAws_queryGetFederationTokenRequest = (input, context) => {\r\n    const entries = {};\r\n    if (input.Name != null) {\r\n        entries[\"Name\"] = input.Name;\r\n    }\r\n    if (input.Policy != null) {\r\n        entries[\"Policy\"] = input.Policy;\r\n    }\r\n    if (input.PolicyArns != null) {\r\n        const memberEntries = serializeAws_querypolicyDescriptorListType(input.PolicyArns, context);\r\n        if (input.PolicyArns?.length === 0) {\r\n            entries.PolicyArns = [];\r\n        }\r\n        Object.entries(memberEntries).forEach(([key, value]) => {\r\n            const loc = `PolicyArns.${key}`;\r\n            entries[loc] = value;\r\n        });\r\n    }\r\n    if (input.DurationSeconds != null) {\r\n        entries[\"DurationSeconds\"] = input.DurationSeconds;\r\n    }\r\n    if (input.Tags != null) {\r\n        const memberEntries = serializeAws_querytagListType(input.Tags, context);\r\n        if (input.Tags?.length === 0) {\r\n            entries.Tags = [];\r\n        }\r\n        Object.entries(memberEntries).forEach(([key, value]) => {\r\n            const loc = `Tags.${key}`;\r\n            entries[loc] = value;\r\n        });\r\n    }\r\n    return entries;\r\n};\r\nconst serializeAws_queryGetSessionTokenRequest = (input, context) => {\r\n    const entries = {};\r\n    if (input.DurationSeconds != null) {\r\n        entries[\"DurationSeconds\"] = input.DurationSeconds;\r\n    }\r\n    if (input.SerialNumber != null) {\r\n        entries[\"SerialNumber\"] = input.SerialNumber;\r\n    }\r\n    if (input.TokenCode != null) {\r\n        entries[\"TokenCode\"] = input.TokenCode;\r\n    }\r\n    return entries;\r\n};\r\nconst serializeAws_querypolicyDescriptorListType = (input, context) => {\r\n    const entries = {};\r\n    let counter = 1;\r\n    for (const entry of input) {\r\n        if (entry === null) {\r\n            continue;\r\n        }\r\n        const memberEntries = serializeAws_queryPolicyDescriptorType(entry, context);\r\n        Object.entries(memberEntries).forEach(([key, value]) => {\r\n            entries[`member.${counter}.${key}`] = value;\r\n        });\r\n        counter++;\r\n    }\r\n    return entries;\r\n};\r\nconst serializeAws_queryPolicyDescriptorType = (input, context) => {\r\n    const entries = {};\r\n    if (input.arn != null) {\r\n        entries[\"arn\"] = input.arn;\r\n    }\r\n    return entries;\r\n};\r\nconst serializeAws_queryTag = (input, context) => {\r\n    const entries = {};\r\n    if (input.Key != null) {\r\n        entries[\"Key\"] = input.Key;\r\n    }\r\n    if (input.Value != null) {\r\n        entries[\"Value\"] = input.Value;\r\n    }\r\n    return entries;\r\n};\r\nconst serializeAws_querytagKeyListType = (input, context) => {\r\n    const entries = {};\r\n    let counter = 1;\r\n    for (const entry of input) {\r\n        if (entry === null) {\r\n            continue;\r\n        }\r\n        entries[`member.${counter}`] = entry;\r\n        counter++;\r\n    }\r\n    return entries;\r\n};\r\nconst serializeAws_querytagListType = (input, context) => {\r\n    const entries = {};\r\n    let counter = 1;\r\n    for (const entry of input) {\r\n        if (entry === null) {\r\n            continue;\r\n        }\r\n        const memberEntries = serializeAws_queryTag(entry, context);\r\n        Object.entries(memberEntries).forEach(([key, value]) => {\r\n            entries[`member.${counter}.${key}`] = value;\r\n        });\r\n        counter++;\r\n    }\r\n    return entries;\r\n};\r\nconst deserializeAws_queryAssumedRoleUser = (output, context) => {\r\n    const contents = {\r\n        AssumedRoleId: undefined,\r\n        Arn: undefined,\r\n    };\r\n    if (output[\"AssumedRoleId\"] !== undefined) {\r\n        contents.AssumedRoleId = (0, smithy_client_1.expectString)(output[\"AssumedRoleId\"]);\r\n    }\r\n    if (output[\"Arn\"] !== undefined) {\r\n        contents.Arn = (0, smithy_client_1.expectString)(output[\"Arn\"]);\r\n    }\r\n    return contents;\r\n};\r\nconst deserializeAws_queryAssumeRoleResponse = (output, context) => {\r\n    const contents = {\r\n        Credentials: undefined,\r\n        AssumedRoleUser: undefined,\r\n        PackedPolicySize: undefined,\r\n        SourceIdentity: undefined,\r\n    };\r\n    if (output[\"Credentials\"] !== undefined) {\r\n        contents.Credentials = deserializeAws_queryCredentials(output[\"Credentials\"], context);\r\n    }\r\n    if (output[\"AssumedRoleUser\"] !== undefined) {\r\n        contents.AssumedRoleUser = deserializeAws_queryAssumedRoleUser(output[\"AssumedRoleUser\"], context);\r\n    }\r\n    if (output[\"PackedPolicySize\"] !== undefined) {\r\n        contents.PackedPolicySize = (0, smithy_client_1.strictParseInt32)(output[\"PackedPolicySize\"]);\r\n    }\r\n    if (output[\"SourceIdentity\"] !== undefined) {\r\n        contents.SourceIdentity = (0, smithy_client_1.expectString)(output[\"SourceIdentity\"]);\r\n    }\r\n    return contents;\r\n};\r\nconst deserializeAws_queryAssumeRoleWithSAMLResponse = (output, context) => {\r\n    const contents = {\r\n        Credentials: undefined,\r\n        AssumedRoleUser: undefined,\r\n        PackedPolicySize: undefined,\r\n        Subject: undefined,\r\n        SubjectType: undefined,\r\n        Issuer: undefined,\r\n        Audience: undefined,\r\n        NameQualifier: undefined,\r\n        SourceIdentity: undefined,\r\n    };\r\n    if (output[\"Credentials\"] !== undefined) {\r\n        contents.Credentials = deserializeAws_queryCredentials(output[\"Credentials\"], context);\r\n    }\r\n    if (output[\"AssumedRoleUser\"] !== undefined) {\r\n        contents.AssumedRoleUser = deserializeAws_queryAssumedRoleUser(output[\"AssumedRoleUser\"], context);\r\n    }\r\n    if (output[\"PackedPolicySize\"] !== undefined) {\r\n        contents.PackedPolicySize = (0, smithy_client_1.strictParseInt32)(output[\"PackedPolicySize\"]);\r\n    }\r\n    if (output[\"Subject\"] !== undefined) {\r\n        contents.Subject = (0, smithy_client_1.expectString)(output[\"Subject\"]);\r\n    }\r\n    if (output[\"SubjectType\"] !== undefined) {\r\n        contents.SubjectType = (0, smithy_client_1.expectString)(output[\"SubjectType\"]);\r\n    }\r\n    if (output[\"Issuer\"] !== undefined) {\r\n        contents.Issuer = (0, smithy_client_1.expectString)(output[\"Issuer\"]);\r\n    }\r\n    if (output[\"Audience\"] !== undefined) {\r\n        contents.Audience = (0, smithy_client_1.expectString)(output[\"Audience\"]);\r\n    }\r\n    if (output[\"NameQualifier\"] !== undefined) {\r\n        contents.NameQualifier = (0, smithy_client_1.expectString)(output[\"NameQualifier\"]);\r\n    }\r\n    if (output[\"SourceIdentity\"] !== undefined) {\r\n        contents.SourceIdentity = (0, smithy_client_1.expectString)(output[\"SourceIdentity\"]);\r\n    }\r\n    return contents;\r\n};\r\nconst deserializeAws_queryAssumeRoleWithWebIdentityResponse = (output, context) => {\r\n    const contents = {\r\n        Credentials: undefined,\r\n        SubjectFromWebIdentityToken: undefined,\r\n        AssumedRoleUser: undefined,\r\n        PackedPolicySize: undefined,\r\n        Provider: undefined,\r\n        Audience: undefined,\r\n        SourceIdentity: undefined,\r\n    };\r\n    if (output[\"Credentials\"] !== undefined) {\r\n        contents.Credentials = deserializeAws_queryCredentials(output[\"Credentials\"], context);\r\n    }\r\n    if (output[\"SubjectFromWebIdentityToken\"] !== undefined) {\r\n        contents.SubjectFromWebIdentityToken = (0, smithy_client_1.expectString)(output[\"SubjectFromWebIdentityToken\"]);\r\n    }\r\n    if (output[\"AssumedRoleUser\"] !== undefined) {\r\n        contents.AssumedRoleUser = deserializeAws_queryAssumedRoleUser(output[\"AssumedRoleUser\"], context);\r\n    }\r\n    if (output[\"PackedPolicySize\"] !== undefined) {\r\n        contents.PackedPolicySize = (0, smithy_client_1.strictParseInt32)(output[\"PackedPolicySize\"]);\r\n    }\r\n    if (output[\"Provider\"] !== undefined) {\r\n        contents.Provider = (0, smithy_client_1.expectString)(output[\"Provider\"]);\r\n    }\r\n    if (output[\"Audience\"] !== undefined) {\r\n        contents.Audience = (0, smithy_client_1.expectString)(output[\"Audience\"]);\r\n    }\r\n    if (output[\"SourceIdentity\"] !== undefined) {\r\n        contents.SourceIdentity = (0, smithy_client_1.expectString)(output[\"SourceIdentity\"]);\r\n    }\r\n    return contents;\r\n};\r\nconst deserializeAws_queryCredentials = (output, context) => {\r\n    const contents = {\r\n        AccessKeyId: undefined,\r\n        SecretAccessKey: undefined,\r\n        SessionToken: undefined,\r\n        Expiration: undefined,\r\n    };\r\n    if (output[\"AccessKeyId\"] !== undefined) {\r\n        contents.AccessKeyId = (0, smithy_client_1.expectString)(output[\"AccessKeyId\"]);\r\n    }\r\n    if (output[\"SecretAccessKey\"] !== undefined) {\r\n        contents.SecretAccessKey = (0, smithy_client_1.expectString)(output[\"SecretAccessKey\"]);\r\n    }\r\n    if (output[\"SessionToken\"] !== undefined) {\r\n        contents.SessionToken = (0, smithy_client_1.expectString)(output[\"SessionToken\"]);\r\n    }\r\n    if (output[\"Expiration\"] !== undefined) {\r\n        contents.Expiration = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output[\"Expiration\"]));\r\n    }\r\n    return contents;\r\n};\r\nconst deserializeAws_queryDecodeAuthorizationMessageResponse = (output, context) => {\r\n    const contents = {\r\n        DecodedMessage: undefined,\r\n    };\r\n    if (output[\"DecodedMessage\"] !== undefined) {\r\n        contents.DecodedMessage = (0, smithy_client_1.expectString)(output[\"DecodedMessage\"]);\r\n    }\r\n    return contents;\r\n};\r\nconst deserializeAws_queryExpiredTokenException = (output, context) => {\r\n    const contents = {\r\n        message: undefined,\r\n    };\r\n    if (output[\"message\"] !== undefined) {\r\n        contents.message = (0, smithy_client_1.expectString)(output[\"message\"]);\r\n    }\r\n    return contents;\r\n};\r\nconst deserializeAws_queryFederatedUser = (output, context) => {\r\n    const contents = {\r\n        FederatedUserId: undefined,\r\n        Arn: undefined,\r\n    };\r\n    if (output[\"FederatedUserId\"] !== undefined) {\r\n        contents.FederatedUserId = (0, smithy_client_1.expectString)(output[\"FederatedUserId\"]);\r\n    }\r\n    if (output[\"Arn\"] !== undefined) {\r\n        contents.Arn = (0, smithy_client_1.expectString)(output[\"Arn\"]);\r\n    }\r\n    return contents;\r\n};\r\nconst deserializeAws_queryGetAccessKeyInfoResponse = (output, context) => {\r\n    const contents = {\r\n        Account: undefined,\r\n    };\r\n    if (output[\"Account\"] !== undefined) {\r\n        contents.Account = (0, smithy_client_1.expectString)(output[\"Account\"]);\r\n    }\r\n    return contents;\r\n};\r\nconst deserializeAws_queryGetCallerIdentityResponse = (output, context) => {\r\n    const contents = {\r\n        UserId: undefined,\r\n        Account: undefined,\r\n        Arn: undefined,\r\n    };\r\n    if (output[\"UserId\"] !== undefined) {\r\n        contents.UserId = (0, smithy_client_1.expectString)(output[\"UserId\"]);\r\n    }\r\n    if (output[\"Account\"] !== undefined) {\r\n        contents.Account = (0, smithy_client_1.expectString)(output[\"Account\"]);\r\n    }\r\n    if (output[\"Arn\"] !== undefined) {\r\n        contents.Arn = (0, smithy_client_1.expectString)(output[\"Arn\"]);\r\n    }\r\n    return contents;\r\n};\r\nconst deserializeAws_queryGetFederationTokenResponse = (output, context) => {\r\n    const contents = {\r\n        Credentials: undefined,\r\n        FederatedUser: undefined,\r\n        PackedPolicySize: undefined,\r\n    };\r\n    if (output[\"Credentials\"] !== undefined) {\r\n        contents.Credentials = deserializeAws_queryCredentials(output[\"Credentials\"], context);\r\n    }\r\n    if (output[\"FederatedUser\"] !== undefined) {\r\n        contents.FederatedUser = deserializeAws_queryFederatedUser(output[\"FederatedUser\"], context);\r\n    }\r\n    if (output[\"PackedPolicySize\"] !== undefined) {\r\n        contents.PackedPolicySize = (0, smithy_client_1.strictParseInt32)(output[\"PackedPolicySize\"]);\r\n    }\r\n    return contents;\r\n};\r\nconst deserializeAws_queryGetSessionTokenResponse = (output, context) => {\r\n    const contents = {\r\n        Credentials: undefined,\r\n    };\r\n    if (output[\"Credentials\"] !== undefined) {\r\n        contents.Credentials = deserializeAws_queryCredentials(output[\"Credentials\"], context);\r\n    }\r\n    return contents;\r\n};\r\nconst deserializeAws_queryIDPCommunicationErrorException = (output, context) => {\r\n    const contents = {\r\n        message: undefined,\r\n    };\r\n    if (output[\"message\"] !== undefined) {\r\n        contents.message = (0, smithy_client_1.expectString)(output[\"message\"]);\r\n    }\r\n    return contents;\r\n};\r\nconst deserializeAws_queryIDPRejectedClaimException = (output, context) => {\r\n    const contents = {\r\n        message: undefined,\r\n    };\r\n    if (output[\"message\"] !== undefined) {\r\n        contents.message = (0, smithy_client_1.expectString)(output[\"message\"]);\r\n    }\r\n    return contents;\r\n};\r\nconst deserializeAws_queryInvalidAuthorizationMessageException = (output, context) => {\r\n    const contents = {\r\n        message: undefined,\r\n    };\r\n    if (output[\"message\"] !== undefined) {\r\n        contents.message = (0, smithy_client_1.expectString)(output[\"message\"]);\r\n    }\r\n    return contents;\r\n};\r\nconst deserializeAws_queryInvalidIdentityTokenException = (output, context) => {\r\n    const contents = {\r\n        message: undefined,\r\n    };\r\n    if (output[\"message\"] !== undefined) {\r\n        contents.message = (0, smithy_client_1.expectString)(output[\"message\"]);\r\n    }\r\n    return contents;\r\n};\r\nconst deserializeAws_queryMalformedPolicyDocumentException = (output, context) => {\r\n    const contents = {\r\n        message: undefined,\r\n    };\r\n    if (output[\"message\"] !== undefined) {\r\n        contents.message = (0, smithy_client_1.expectString)(output[\"message\"]);\r\n    }\r\n    return contents;\r\n};\r\nconst deserializeAws_queryPackedPolicyTooLargeException = (output, context) => {\r\n    const contents = {\r\n        message: undefined,\r\n    };\r\n    if (output[\"message\"] !== undefined) {\r\n        contents.message = (0, smithy_client_1.expectString)(output[\"message\"]);\r\n    }\r\n    return contents;\r\n};\r\nconst deserializeAws_queryRegionDisabledException = (output, context) => {\r\n    const contents = {\r\n        message: undefined,\r\n    };\r\n    if (output[\"message\"] !== undefined) {\r\n        contents.message = (0, smithy_client_1.expectString)(output[\"message\"]);\r\n    }\r\n    return contents;\r\n};\r\nconst deserializeMetadata = (output) => ({\r\n    httpStatusCode: output.statusCode,\r\n    requestId: output.headers[\"x-amzn-requestid\"] ?? output.headers[\"x-amzn-request-id\"] ?? output.headers[\"x-amz-request-id\"],\r\n    extendedRequestId: output.headers[\"x-amz-id-2\"],\r\n    cfId: output.headers[\"x-amz-cf-id\"],\r\n});\r\nconst collectBody = (streamBody = new Uint8Array(), context) => {\r\n    if (streamBody instanceof Uint8Array) {\r\n        return Promise.resolve(streamBody);\r\n    }\r\n    return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());\r\n};\r\nconst collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));\r\nconst buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {\r\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\r\n    const contents = {\r\n        protocol,\r\n        hostname,\r\n        port,\r\n        method: \"POST\",\r\n        path: basePath.endsWith(\"/\") ? basePath.slice(0, -1) + path : basePath + path,\r\n        headers,\r\n    };\r\n    if (resolvedHostname !== undefined) {\r\n        contents.hostname = resolvedHostname;\r\n    }\r\n    if (body !== undefined) {\r\n        contents.body = body;\r\n    }\r\n    return new protocol_http_1.HttpRequest(contents);\r\n};\r\nconst parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {\r\n    if (encoded.length) {\r\n        const parser = new fast_xml_parser_1.XMLParser({\r\n            attributeNamePrefix: \"\",\r\n            htmlEntities: true,\r\n            ignoreAttributes: false,\r\n            ignoreDeclaration: true,\r\n            parseTagValue: false,\r\n            trimValues: false,\r\n            tagValueProcessor: (_, val) => (val.trim() === \"\" && val.includes(\"\\n\") ? \"\" : undefined),\r\n        });\r\n        parser.addEntity(\"#xD\", \"\\r\");\r\n        parser.addEntity(\"#10\", \"\\n\");\r\n        const parsedObj = parser.parse(encoded);\r\n        const textNodeName = \"#text\";\r\n        const key = Object.keys(parsedObj)[0];\r\n        const parsedObjToReturn = parsedObj[key];\r\n        if (parsedObjToReturn[textNodeName]) {\r\n            parsedObjToReturn[key] = parsedObjToReturn[textNodeName];\r\n            delete parsedObjToReturn[textNodeName];\r\n        }\r\n        return (0, smithy_client_1.getValueFromTextNode)(parsedObjToReturn);\r\n    }\r\n    return {};\r\n});\r\nconst parseErrorBody = async (errorBody, context) => {\r\n    const value = await parseBody(errorBody, context);\r\n    if (value.Error) {\r\n        value.Error.message = value.Error.message ?? value.Error.Message;\r\n    }\r\n    return value;\r\n};\r\nconst buildFormUrlencodedString = (formEntries) => Object.entries(formEntries)\r\n    .map(([key, value]) => (0, smithy_client_1.extendedEncodeURIComponent)(key) + \"=\" + (0, smithy_client_1.extendedEncodeURIComponent)(value))\r\n    .join(\"&\");\r\nconst loadQueryErrorCode = (output, data) => {\r\n    if (data.Error.Code !== undefined) {\r\n        return data.Error.Code;\r\n    }\r\n    if (output.statusCode == 404) {\r\n        return \"NotFound\";\r\n    }\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}