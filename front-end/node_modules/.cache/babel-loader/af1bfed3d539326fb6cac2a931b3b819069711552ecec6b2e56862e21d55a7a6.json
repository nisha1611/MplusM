{"ast":null,"code":"/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Tobias Koppers @sokra\r\n*/\n\n\"use strict\";\n\nconst {\n  SyncWaterfallHook\n} = require(\"tapable\");\nconst Compilation = require(\"../Compilation\");\nconst Generator = require(\"../Generator\");\nconst {\n  tryRunOrWebpackError\n} = require(\"../HookWebpackError\");\nconst WebAssemblyImportDependency = require(\"../dependencies/WebAssemblyImportDependency\");\nconst {\n  compareModulesByIdentifier\n} = require(\"../util/comparators\");\nconst memoize = require(\"../util/memoize\");\n\n/** @typedef {import(\"webpack-sources\").Source} Source */\n/** @typedef {import(\"../Chunk\")} Chunk */\n/** @typedef {import(\"../ChunkGraph\")} ChunkGraph */\n/** @typedef {import(\"../CodeGenerationResults\")} CodeGenerationResults */\n/** @typedef {import(\"../Compiler\")} Compiler */\n/** @typedef {import(\"../DependencyTemplates\")} DependencyTemplates */\n/** @typedef {import(\"../Module\")} Module */\n/** @typedef {import(\"../ModuleGraph\")} ModuleGraph */\n/** @typedef {import(\"../RuntimeTemplate\")} RuntimeTemplate */\n/** @typedef {import(\"../Template\").RenderManifestEntry} RenderManifestEntry */\n/** @typedef {import(\"../Template\").RenderManifestOptions} RenderManifestOptions */\n\nconst getAsyncWebAssemblyGenerator = memoize(() => require(\"./AsyncWebAssemblyGenerator\"));\nconst getAsyncWebAssemblyJavascriptGenerator = memoize(() => require(\"./AsyncWebAssemblyJavascriptGenerator\"));\nconst getAsyncWebAssemblyParser = memoize(() => require(\"./AsyncWebAssemblyParser\"));\n\n/**\r\n * @typedef {Object} WebAssemblyRenderContext\r\n * @property {Chunk} chunk the chunk\r\n * @property {DependencyTemplates} dependencyTemplates the dependency templates\r\n * @property {RuntimeTemplate} runtimeTemplate the runtime template\r\n * @property {ModuleGraph} moduleGraph the module graph\r\n * @property {ChunkGraph} chunkGraph the chunk graph\r\n * @property {CodeGenerationResults} codeGenerationResults results of code generation\r\n */\n\n/**\r\n * @typedef {Object} CompilationHooks\r\n * @property {SyncWaterfallHook<[Source, Module, WebAssemblyRenderContext]>} renderModuleContent\r\n */\n\n/** @type {WeakMap<Compilation, CompilationHooks>} */\nconst compilationHooksMap = new WeakMap();\nclass AsyncWebAssemblyModulesPlugin {\n  /**\r\n   * @param {Compilation} compilation the compilation\r\n   * @returns {CompilationHooks} the attached hooks\r\n   */\n  static getCompilationHooks(compilation) {\n    if (!(compilation instanceof Compilation)) {\n      throw new TypeError(\"The 'compilation' argument must be an instance of Compilation\");\n    }\n    let hooks = compilationHooksMap.get(compilation);\n    if (hooks === undefined) {\n      hooks = {\n        renderModuleContent: new SyncWaterfallHook([\"source\", \"module\", \"renderContext\"])\n      };\n      compilationHooksMap.set(compilation, hooks);\n    }\n    return hooks;\n  }\n  constructor(options) {\n    this.options = options;\n  }\n\n  /**\r\n   * Apply the plugin\r\n   * @param {Compiler} compiler the compiler instance\r\n   * @returns {void}\r\n   */\n  apply(compiler) {\n    compiler.hooks.compilation.tap(\"AsyncWebAssemblyModulesPlugin\", (compilation, _ref) => {\n      let {\n        normalModuleFactory\n      } = _ref;\n      const hooks = AsyncWebAssemblyModulesPlugin.getCompilationHooks(compilation);\n      compilation.dependencyFactories.set(WebAssemblyImportDependency, normalModuleFactory);\n      normalModuleFactory.hooks.createParser.for(\"webassembly/async\").tap(\"AsyncWebAssemblyModulesPlugin\", () => {\n        const AsyncWebAssemblyParser = getAsyncWebAssemblyParser();\n        return new AsyncWebAssemblyParser();\n      });\n      normalModuleFactory.hooks.createGenerator.for(\"webassembly/async\").tap(\"AsyncWebAssemblyModulesPlugin\", () => {\n        const AsyncWebAssemblyJavascriptGenerator = getAsyncWebAssemblyJavascriptGenerator();\n        const AsyncWebAssemblyGenerator = getAsyncWebAssemblyGenerator();\n        return Generator.byType({\n          javascript: new AsyncWebAssemblyJavascriptGenerator(compilation.outputOptions.webassemblyModuleFilename),\n          webassembly: new AsyncWebAssemblyGenerator(this.options)\n        });\n      });\n      compilation.hooks.renderManifest.tap(\"WebAssemblyModulesPlugin\", (result, options) => {\n        const {\n          moduleGraph,\n          chunkGraph,\n          runtimeTemplate\n        } = compilation;\n        const {\n          chunk,\n          outputOptions,\n          dependencyTemplates,\n          codeGenerationResults\n        } = options;\n        for (const module of chunkGraph.getOrderedChunkModulesIterable(chunk, compareModulesByIdentifier)) {\n          if (module.type === \"webassembly/async\") {\n            const filenameTemplate = outputOptions.webassemblyModuleFilename;\n            result.push({\n              render: () => this.renderModule(module, {\n                chunk,\n                dependencyTemplates,\n                runtimeTemplate,\n                moduleGraph,\n                chunkGraph,\n                codeGenerationResults\n              }, hooks),\n              filenameTemplate,\n              pathOptions: {\n                module,\n                runtime: chunk.runtime,\n                chunkGraph\n              },\n              auxiliary: true,\n              identifier: `webassemblyAsyncModule${chunkGraph.getModuleId(module)}`,\n              hash: chunkGraph.getModuleHash(module, chunk.runtime)\n            });\n          }\n        }\n        return result;\n      });\n    });\n  }\n  renderModule(module, renderContext, hooks) {\n    const {\n      codeGenerationResults,\n      chunk\n    } = renderContext;\n    try {\n      const moduleSource = codeGenerationResults.getSource(module, chunk.runtime, \"webassembly\");\n      return tryRunOrWebpackError(() => hooks.renderModuleContent.call(moduleSource, module, renderContext), \"AsyncWebAssemblyModulesPlugin.getCompilationHooks().renderModuleContent\");\n    } catch (e) {\n      e.module = module;\n      throw e;\n    }\n  }\n}\nmodule.exports = AsyncWebAssemblyModulesPlugin;","map":{"version":3,"names":["SyncWaterfallHook","require","Compilation","Generator","tryRunOrWebpackError","WebAssemblyImportDependency","compareModulesByIdentifier","memoize","getAsyncWebAssemblyGenerator","getAsyncWebAssemblyJavascriptGenerator","getAsyncWebAssemblyParser","compilationHooksMap","WeakMap","AsyncWebAssemblyModulesPlugin","getCompilationHooks","compilation","TypeError","hooks","get","undefined","renderModuleContent","set","constructor","options","apply","compiler","tap","normalModuleFactory","dependencyFactories","createParser","for","AsyncWebAssemblyParser","createGenerator","AsyncWebAssemblyJavascriptGenerator","AsyncWebAssemblyGenerator","byType","javascript","outputOptions","webassemblyModuleFilename","webassembly","renderManifest","result","moduleGraph","chunkGraph","runtimeTemplate","chunk","dependencyTemplates","codeGenerationResults","module","getOrderedChunkModulesIterable","type","filenameTemplate","push","render","renderModule","pathOptions","runtime","auxiliary","identifier","getModuleId","hash","getModuleHash","renderContext","moduleSource","getSource","call","e","exports"],"sources":["C:/Users/91930/Desktop/Github projects/Pharmacy Demo/front-end/node_modules/webpack/lib/wasm-async/AsyncWebAssemblyModulesPlugin.js"],"sourcesContent":["/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Tobias Koppers @sokra\r\n*/\r\n\r\n\"use strict\";\r\n\r\nconst { SyncWaterfallHook } = require(\"tapable\");\r\nconst Compilation = require(\"../Compilation\");\r\nconst Generator = require(\"../Generator\");\r\nconst { tryRunOrWebpackError } = require(\"../HookWebpackError\");\r\nconst WebAssemblyImportDependency = require(\"../dependencies/WebAssemblyImportDependency\");\r\nconst { compareModulesByIdentifier } = require(\"../util/comparators\");\r\nconst memoize = require(\"../util/memoize\");\r\n\r\n/** @typedef {import(\"webpack-sources\").Source} Source */\r\n/** @typedef {import(\"../Chunk\")} Chunk */\r\n/** @typedef {import(\"../ChunkGraph\")} ChunkGraph */\r\n/** @typedef {import(\"../CodeGenerationResults\")} CodeGenerationResults */\r\n/** @typedef {import(\"../Compiler\")} Compiler */\r\n/** @typedef {import(\"../DependencyTemplates\")} DependencyTemplates */\r\n/** @typedef {import(\"../Module\")} Module */\r\n/** @typedef {import(\"../ModuleGraph\")} ModuleGraph */\r\n/** @typedef {import(\"../RuntimeTemplate\")} RuntimeTemplate */\r\n/** @typedef {import(\"../Template\").RenderManifestEntry} RenderManifestEntry */\r\n/** @typedef {import(\"../Template\").RenderManifestOptions} RenderManifestOptions */\r\n\r\nconst getAsyncWebAssemblyGenerator = memoize(() =>\r\n\trequire(\"./AsyncWebAssemblyGenerator\")\r\n);\r\nconst getAsyncWebAssemblyJavascriptGenerator = memoize(() =>\r\n\trequire(\"./AsyncWebAssemblyJavascriptGenerator\")\r\n);\r\nconst getAsyncWebAssemblyParser = memoize(() =>\r\n\trequire(\"./AsyncWebAssemblyParser\")\r\n);\r\n\r\n/**\r\n * @typedef {Object} WebAssemblyRenderContext\r\n * @property {Chunk} chunk the chunk\r\n * @property {DependencyTemplates} dependencyTemplates the dependency templates\r\n * @property {RuntimeTemplate} runtimeTemplate the runtime template\r\n * @property {ModuleGraph} moduleGraph the module graph\r\n * @property {ChunkGraph} chunkGraph the chunk graph\r\n * @property {CodeGenerationResults} codeGenerationResults results of code generation\r\n */\r\n\r\n/**\r\n * @typedef {Object} CompilationHooks\r\n * @property {SyncWaterfallHook<[Source, Module, WebAssemblyRenderContext]>} renderModuleContent\r\n */\r\n\r\n/** @type {WeakMap<Compilation, CompilationHooks>} */\r\nconst compilationHooksMap = new WeakMap();\r\n\r\nclass AsyncWebAssemblyModulesPlugin {\r\n\t/**\r\n\t * @param {Compilation} compilation the compilation\r\n\t * @returns {CompilationHooks} the attached hooks\r\n\t */\r\n\tstatic getCompilationHooks(compilation) {\r\n\t\tif (!(compilation instanceof Compilation)) {\r\n\t\t\tthrow new TypeError(\r\n\t\t\t\t\"The 'compilation' argument must be an instance of Compilation\"\r\n\t\t\t);\r\n\t\t}\r\n\t\tlet hooks = compilationHooksMap.get(compilation);\r\n\t\tif (hooks === undefined) {\r\n\t\t\thooks = {\r\n\t\t\t\trenderModuleContent: new SyncWaterfallHook([\r\n\t\t\t\t\t\"source\",\r\n\t\t\t\t\t\"module\",\r\n\t\t\t\t\t\"renderContext\"\r\n\t\t\t\t])\r\n\t\t\t};\r\n\t\t\tcompilationHooksMap.set(compilation, hooks);\r\n\t\t}\r\n\t\treturn hooks;\r\n\t}\r\n\r\n\tconstructor(options) {\r\n\t\tthis.options = options;\r\n\t}\r\n\r\n\t/**\r\n\t * Apply the plugin\r\n\t * @param {Compiler} compiler the compiler instance\r\n\t * @returns {void}\r\n\t */\r\n\tapply(compiler) {\r\n\t\tcompiler.hooks.compilation.tap(\r\n\t\t\t\"AsyncWebAssemblyModulesPlugin\",\r\n\t\t\t(compilation, { normalModuleFactory }) => {\r\n\t\t\t\tconst hooks =\r\n\t\t\t\t\tAsyncWebAssemblyModulesPlugin.getCompilationHooks(compilation);\r\n\t\t\t\tcompilation.dependencyFactories.set(\r\n\t\t\t\t\tWebAssemblyImportDependency,\r\n\t\t\t\t\tnormalModuleFactory\r\n\t\t\t\t);\r\n\r\n\t\t\t\tnormalModuleFactory.hooks.createParser\r\n\t\t\t\t\t.for(\"webassembly/async\")\r\n\t\t\t\t\t.tap(\"AsyncWebAssemblyModulesPlugin\", () => {\r\n\t\t\t\t\t\tconst AsyncWebAssemblyParser = getAsyncWebAssemblyParser();\r\n\r\n\t\t\t\t\t\treturn new AsyncWebAssemblyParser();\r\n\t\t\t\t\t});\r\n\t\t\t\tnormalModuleFactory.hooks.createGenerator\r\n\t\t\t\t\t.for(\"webassembly/async\")\r\n\t\t\t\t\t.tap(\"AsyncWebAssemblyModulesPlugin\", () => {\r\n\t\t\t\t\t\tconst AsyncWebAssemblyJavascriptGenerator =\r\n\t\t\t\t\t\t\tgetAsyncWebAssemblyJavascriptGenerator();\r\n\t\t\t\t\t\tconst AsyncWebAssemblyGenerator = getAsyncWebAssemblyGenerator();\r\n\r\n\t\t\t\t\t\treturn Generator.byType({\r\n\t\t\t\t\t\t\tjavascript: new AsyncWebAssemblyJavascriptGenerator(\r\n\t\t\t\t\t\t\t\tcompilation.outputOptions.webassemblyModuleFilename\r\n\t\t\t\t\t\t\t),\r\n\t\t\t\t\t\t\twebassembly: new AsyncWebAssemblyGenerator(this.options)\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\tcompilation.hooks.renderManifest.tap(\r\n\t\t\t\t\t\"WebAssemblyModulesPlugin\",\r\n\t\t\t\t\t(result, options) => {\r\n\t\t\t\t\t\tconst { moduleGraph, chunkGraph, runtimeTemplate } = compilation;\r\n\t\t\t\t\t\tconst {\r\n\t\t\t\t\t\t\tchunk,\r\n\t\t\t\t\t\t\toutputOptions,\r\n\t\t\t\t\t\t\tdependencyTemplates,\r\n\t\t\t\t\t\t\tcodeGenerationResults\r\n\t\t\t\t\t\t} = options;\r\n\r\n\t\t\t\t\t\tfor (const module of chunkGraph.getOrderedChunkModulesIterable(\r\n\t\t\t\t\t\t\tchunk,\r\n\t\t\t\t\t\t\tcompareModulesByIdentifier\r\n\t\t\t\t\t\t)) {\r\n\t\t\t\t\t\t\tif (module.type === \"webassembly/async\") {\r\n\t\t\t\t\t\t\t\tconst filenameTemplate =\r\n\t\t\t\t\t\t\t\t\toutputOptions.webassemblyModuleFilename;\r\n\r\n\t\t\t\t\t\t\t\tresult.push({\r\n\t\t\t\t\t\t\t\t\trender: () =>\r\n\t\t\t\t\t\t\t\t\t\tthis.renderModule(\r\n\t\t\t\t\t\t\t\t\t\t\tmodule,\r\n\t\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\t\tchunk,\r\n\t\t\t\t\t\t\t\t\t\t\t\tdependencyTemplates,\r\n\t\t\t\t\t\t\t\t\t\t\t\truntimeTemplate,\r\n\t\t\t\t\t\t\t\t\t\t\t\tmoduleGraph,\r\n\t\t\t\t\t\t\t\t\t\t\t\tchunkGraph,\r\n\t\t\t\t\t\t\t\t\t\t\t\tcodeGenerationResults\r\n\t\t\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t\t\t\thooks\r\n\t\t\t\t\t\t\t\t\t\t),\r\n\t\t\t\t\t\t\t\t\tfilenameTemplate,\r\n\t\t\t\t\t\t\t\t\tpathOptions: {\r\n\t\t\t\t\t\t\t\t\t\tmodule,\r\n\t\t\t\t\t\t\t\t\t\truntime: chunk.runtime,\r\n\t\t\t\t\t\t\t\t\t\tchunkGraph\r\n\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t\tauxiliary: true,\r\n\t\t\t\t\t\t\t\t\tidentifier: `webassemblyAsyncModule${chunkGraph.getModuleId(\r\n\t\t\t\t\t\t\t\t\t\tmodule\r\n\t\t\t\t\t\t\t\t\t)}`,\r\n\t\t\t\t\t\t\t\t\thash: chunkGraph.getModuleHash(module, chunk.runtime)\r\n\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\treturn result;\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\trenderModule(module, renderContext, hooks) {\r\n\t\tconst { codeGenerationResults, chunk } = renderContext;\r\n\t\ttry {\r\n\t\t\tconst moduleSource = codeGenerationResults.getSource(\r\n\t\t\t\tmodule,\r\n\t\t\t\tchunk.runtime,\r\n\t\t\t\t\"webassembly\"\r\n\t\t\t);\r\n\t\t\treturn tryRunOrWebpackError(\r\n\t\t\t\t() =>\r\n\t\t\t\t\thooks.renderModuleContent.call(moduleSource, module, renderContext),\r\n\t\t\t\t\"AsyncWebAssemblyModulesPlugin.getCompilationHooks().renderModuleContent\"\r\n\t\t\t);\r\n\t\t} catch (e) {\r\n\t\t\te.module = module;\r\n\t\t\tthrow e;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nmodule.exports = AsyncWebAssemblyModulesPlugin;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}