{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.fromInstanceMetadata = void 0;\nconst property_provider_1 = require(\"@aws-sdk/property-provider\");\nconst httpRequest_1 = require(\"./remoteProvider/httpRequest\");\nconst ImdsCredentials_1 = require(\"./remoteProvider/ImdsCredentials\");\nconst RemoteProviderInit_1 = require(\"./remoteProvider/RemoteProviderInit\");\nconst retry_1 = require(\"./remoteProvider/retry\");\nconst getInstanceMetadataEndpoint_1 = require(\"./utils/getInstanceMetadataEndpoint\");\nconst staticStabilityProvider_1 = require(\"./utils/staticStabilityProvider\");\nconst IMDS_PATH = \"/latest/meta-data/iam/security-credentials/\";\nconst IMDS_TOKEN_PATH = \"/latest/api/token\";\nconst fromInstanceMetadata = function () {\n  let init = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return (0, staticStabilityProvider_1.staticStabilityProvider)(getInstanceImdsProvider(init), {\n    logger: init.logger\n  });\n};\nexports.fromInstanceMetadata = fromInstanceMetadata;\nconst getInstanceImdsProvider = init => {\n  let disableFetchToken = false;\n  const {\n    timeout,\n    maxRetries\n  } = (0, RemoteProviderInit_1.providerConfigFromInit)(init);\n  const getCredentials = async (maxRetries, options) => {\n    const profile = (await (0, retry_1.retry)(async () => {\n      let profile;\n      try {\n        profile = await getProfile(options);\n      } catch (err) {\n        if (err.statusCode === 401) {\n          disableFetchToken = false;\n        }\n        throw err;\n      }\n      return profile;\n    }, maxRetries)).trim();\n    return (0, retry_1.retry)(async () => {\n      let creds;\n      try {\n        creds = await getCredentialsFromProfile(profile, options);\n      } catch (err) {\n        if (err.statusCode === 401) {\n          disableFetchToken = false;\n        }\n        throw err;\n      }\n      return creds;\n    }, maxRetries);\n  };\n  return async () => {\n    const endpoint = await (0, getInstanceMetadataEndpoint_1.getInstanceMetadataEndpoint)();\n    if (disableFetchToken) {\n      return getCredentials(maxRetries, {\n        ...endpoint,\n        timeout\n      });\n    } else {\n      let token;\n      try {\n        token = (await getMetadataToken({\n          ...endpoint,\n          timeout\n        })).toString();\n      } catch (error) {\n        if ((error === null || error === void 0 ? void 0 : error.statusCode) === 400) {\n          throw Object.assign(error, {\n            message: \"EC2 Metadata token request returned error\"\n          });\n        } else if (error.message === \"TimeoutError\" || [403, 404, 405].includes(error.statusCode)) {\n          disableFetchToken = true;\n        }\n        return getCredentials(maxRetries, {\n          ...endpoint,\n          timeout\n        });\n      }\n      return getCredentials(maxRetries, {\n        ...endpoint,\n        headers: {\n          \"x-aws-ec2-metadata-token\": token\n        },\n        timeout\n      });\n    }\n  };\n};\nconst getMetadataToken = async options => (0, httpRequest_1.httpRequest)({\n  ...options,\n  path: IMDS_TOKEN_PATH,\n  method: \"PUT\",\n  headers: {\n    \"x-aws-ec2-metadata-token-ttl-seconds\": \"21600\"\n  }\n});\nconst getProfile = async options => (await (0, httpRequest_1.httpRequest)({\n  ...options,\n  path: IMDS_PATH\n})).toString();\nconst getCredentialsFromProfile = async (profile, options) => {\n  const credsResponse = JSON.parse((await (0, httpRequest_1.httpRequest)({\n    ...options,\n    path: IMDS_PATH + profile\n  })).toString());\n  if (!(0, ImdsCredentials_1.isImdsCredentials)(credsResponse)) {\n    throw new property_provider_1.CredentialsProviderError(\"Invalid response received from instance metadata service.\");\n  }\n  return (0, ImdsCredentials_1.fromImdsCredentials)(credsResponse);\n};","map":{"version":3,"names":["Object","defineProperty","exports","value","fromInstanceMetadata","property_provider_1","require","httpRequest_1","ImdsCredentials_1","RemoteProviderInit_1","retry_1","getInstanceMetadataEndpoint_1","staticStabilityProvider_1","IMDS_PATH","IMDS_TOKEN_PATH","init","staticStabilityProvider","getInstanceImdsProvider","logger","disableFetchToken","timeout","maxRetries","providerConfigFromInit","getCredentials","options","profile","retry","getProfile","err","statusCode","trim","creds","getCredentialsFromProfile","endpoint","getInstanceMetadataEndpoint","token","getMetadataToken","toString","error","assign","message","includes","headers","httpRequest","path","method","credsResponse","JSON","parse","isImdsCredentials","CredentialsProviderError","fromImdsCredentials"],"sources":["C:/Users/91930/Desktop/Github projects/Pharmacy Demo/back-end/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/fromInstanceMetadata.js"],"sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.fromInstanceMetadata = void 0;\r\nconst property_provider_1 = require(\"@aws-sdk/property-provider\");\r\nconst httpRequest_1 = require(\"./remoteProvider/httpRequest\");\r\nconst ImdsCredentials_1 = require(\"./remoteProvider/ImdsCredentials\");\r\nconst RemoteProviderInit_1 = require(\"./remoteProvider/RemoteProviderInit\");\r\nconst retry_1 = require(\"./remoteProvider/retry\");\r\nconst getInstanceMetadataEndpoint_1 = require(\"./utils/getInstanceMetadataEndpoint\");\r\nconst staticStabilityProvider_1 = require(\"./utils/staticStabilityProvider\");\r\nconst IMDS_PATH = \"/latest/meta-data/iam/security-credentials/\";\r\nconst IMDS_TOKEN_PATH = \"/latest/api/token\";\r\nconst fromInstanceMetadata = (init = {}) => (0, staticStabilityProvider_1.staticStabilityProvider)(getInstanceImdsProvider(init), { logger: init.logger });\r\nexports.fromInstanceMetadata = fromInstanceMetadata;\r\nconst getInstanceImdsProvider = (init) => {\r\n    let disableFetchToken = false;\r\n    const { timeout, maxRetries } = (0, RemoteProviderInit_1.providerConfigFromInit)(init);\r\n    const getCredentials = async (maxRetries, options) => {\r\n        const profile = (await (0, retry_1.retry)(async () => {\r\n            let profile;\r\n            try {\r\n                profile = await getProfile(options);\r\n            }\r\n            catch (err) {\r\n                if (err.statusCode === 401) {\r\n                    disableFetchToken = false;\r\n                }\r\n                throw err;\r\n            }\r\n            return profile;\r\n        }, maxRetries)).trim();\r\n        return (0, retry_1.retry)(async () => {\r\n            let creds;\r\n            try {\r\n                creds = await getCredentialsFromProfile(profile, options);\r\n            }\r\n            catch (err) {\r\n                if (err.statusCode === 401) {\r\n                    disableFetchToken = false;\r\n                }\r\n                throw err;\r\n            }\r\n            return creds;\r\n        }, maxRetries);\r\n    };\r\n    return async () => {\r\n        const endpoint = await (0, getInstanceMetadataEndpoint_1.getInstanceMetadataEndpoint)();\r\n        if (disableFetchToken) {\r\n            return getCredentials(maxRetries, { ...endpoint, timeout });\r\n        }\r\n        else {\r\n            let token;\r\n            try {\r\n                token = (await getMetadataToken({ ...endpoint, timeout })).toString();\r\n            }\r\n            catch (error) {\r\n                if ((error === null || error === void 0 ? void 0 : error.statusCode) === 400) {\r\n                    throw Object.assign(error, {\r\n                        message: \"EC2 Metadata token request returned error\",\r\n                    });\r\n                }\r\n                else if (error.message === \"TimeoutError\" || [403, 404, 405].includes(error.statusCode)) {\r\n                    disableFetchToken = true;\r\n                }\r\n                return getCredentials(maxRetries, { ...endpoint, timeout });\r\n            }\r\n            return getCredentials(maxRetries, {\r\n                ...endpoint,\r\n                headers: {\r\n                    \"x-aws-ec2-metadata-token\": token,\r\n                },\r\n                timeout,\r\n            });\r\n        }\r\n    };\r\n};\r\nconst getMetadataToken = async (options) => (0, httpRequest_1.httpRequest)({\r\n    ...options,\r\n    path: IMDS_TOKEN_PATH,\r\n    method: \"PUT\",\r\n    headers: {\r\n        \"x-aws-ec2-metadata-token-ttl-seconds\": \"21600\",\r\n    },\r\n});\r\nconst getProfile = async (options) => (await (0, httpRequest_1.httpRequest)({ ...options, path: IMDS_PATH })).toString();\r\nconst getCredentialsFromProfile = async (profile, options) => {\r\n    const credsResponse = JSON.parse((await (0, httpRequest_1.httpRequest)({\r\n        ...options,\r\n        path: IMDS_PATH + profile,\r\n    })).toString());\r\n    if (!(0, ImdsCredentials_1.isImdsCredentials)(credsResponse)) {\r\n        throw new property_provider_1.CredentialsProviderError(\"Invalid response received from instance metadata service.\");\r\n    }\r\n    return (0, ImdsCredentials_1.fromImdsCredentials)(credsResponse);\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}