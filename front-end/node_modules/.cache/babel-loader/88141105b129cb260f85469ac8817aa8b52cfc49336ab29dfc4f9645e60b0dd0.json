{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AddUserOperation = void 0;\nconst crypto = require(\"crypto\");\nconst error_1 = require(\"../error\");\nconst utils_1 = require(\"../utils\");\nconst command_1 = require(\"./command\");\nconst operation_1 = require(\"./operation\");\n/** @internal */\nclass AddUserOperation extends command_1.CommandOperation {\n  constructor(db, username, password, options) {\n    super(db, options);\n    this.db = db;\n    this.username = username;\n    this.password = password;\n    this.options = options !== null && options !== void 0 ? options : {};\n  }\n  execute(server, session, callback) {\n    const db = this.db;\n    const username = this.username;\n    const password = this.password;\n    const options = this.options;\n    // Error out if digestPassword set\n    if (options.digestPassword != null) {\n      return callback(new error_1.MongoInvalidArgumentError('Option \"digestPassword\" not supported via addUser, use db.command(...) instead'));\n    }\n    let roles;\n    if (!options.roles || Array.isArray(options.roles) && options.roles.length === 0) {\n      (0, utils_1.emitWarningOnce)('Creating a user without roles is deprecated. Defaults to \"root\" if db is \"admin\" or \"dbOwner\" otherwise');\n      if (db.databaseName.toLowerCase() === 'admin') {\n        roles = ['root'];\n      } else {\n        roles = ['dbOwner'];\n      }\n    } else {\n      roles = Array.isArray(options.roles) ? options.roles : [options.roles];\n    }\n    let topology;\n    try {\n      topology = (0, utils_1.getTopology)(db);\n    } catch (error) {\n      return callback(error);\n    }\n    const digestPassword = topology.lastHello().maxWireVersion >= 7;\n    let userPassword = password;\n    if (!digestPassword) {\n      // Use node md5 generator\n      const md5 = crypto.createHash('md5');\n      // Generate keys used for authentication\n      md5.update(`${username}:mongo:${password}`);\n      userPassword = md5.digest('hex');\n    }\n    // Build the command to execute\n    const command = {\n      createUser: username,\n      customData: options.customData || {},\n      roles: roles,\n      digestPassword\n    };\n    // No password\n    if (typeof password === 'string') {\n      command.pwd = userPassword;\n    }\n    super.executeCommand(server, session, command, callback);\n  }\n}\nexports.AddUserOperation = AddUserOperation;\n(0, operation_1.defineAspects)(AddUserOperation, [operation_1.Aspect.WRITE_OPERATION]);","map":{"version":3,"mappings":";;;;;;AAAA;AAIA;AAGA;AACA;AACA;AAuBA;AACA,MAAaA,gBAAiB,SAAQC,0BAA0B;EAM9DC,YAAYC,EAAM,EAAEC,QAAgB,EAAEC,QAA4B,EAAEC,OAAwB;IAC1F,KAAK,CAACH,EAAE,EAAEG,OAAO,CAAC;IAElB,IAAI,CAACH,EAAE,GAAGA,EAAE;IACZ,IAAI,CAACC,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACC,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACC,OAAO,GAAGA,OAAO,aAAPA,OAAO,cAAPA,OAAO,GAAI,EAAE;EAC9B;EAESC,OAAO,CACdC,MAAc,EACdC,OAAkC,EAClCC,QAA4B;IAE5B,MAAMP,EAAE,GAAG,IAAI,CAACA,EAAE;IAClB,MAAMC,QAAQ,GAAG,IAAI,CAACA,QAAQ;IAC9B,MAAMC,QAAQ,GAAG,IAAI,CAACA,QAAQ;IAC9B,MAAMC,OAAO,GAAG,IAAI,CAACA,OAAO;IAE5B;IACA,IAAIA,OAAO,CAACK,cAAc,IAAI,IAAI,EAAE;MAClC,OAAOD,QAAQ,CACb,IAAIE,iCAAyB,CAC3B,gFAAgF,CACjF,CACF;;IAGH,IAAIC,KAAK;IACT,IAAI,CAACP,OAAO,CAACO,KAAK,IAAKC,KAAK,CAACC,OAAO,CAACT,OAAO,CAACO,KAAK,CAAC,IAAIP,OAAO,CAACO,KAAK,CAACG,MAAM,KAAK,CAAE,EAAE;MAClF,2BAAe,EACb,yGAAyG,CAC1G;MACD,IAAIb,EAAE,CAACc,YAAY,CAACC,WAAW,EAAE,KAAK,OAAO,EAAE;QAC7CL,KAAK,GAAG,CAAC,MAAM,CAAC;OACjB,MAAM;QACLA,KAAK,GAAG,CAAC,SAAS,CAAC;;KAEtB,MAAM;MACLA,KAAK,GAAGC,KAAK,CAACC,OAAO,CAACT,OAAO,CAACO,KAAK,CAAC,GAAGP,OAAO,CAACO,KAAK,GAAG,CAACP,OAAO,CAACO,KAAK,CAAC;;IAGxE,IAAIM,QAAQ;IACZ,IAAI;MACFA,QAAQ,GAAG,uBAAW,EAAChB,EAAE,CAAC;KAC3B,CAAC,OAAOiB,KAAK,EAAE;MACd,OAAOV,QAAQ,CAACU,KAAK,CAAC;;IAGxB,MAAMT,cAAc,GAAGQ,QAAQ,CAACE,SAAS,EAAE,CAACC,cAAc,IAAI,CAAC;IAE/D,IAAIC,YAAY,GAAGlB,QAAQ;IAE3B,IAAI,CAACM,cAAc,EAAE;MACnB;MACA,MAAMa,GAAG,GAAGC,MAAM,CAACC,UAAU,CAAC,KAAK,CAAC;MACpC;MACAF,GAAG,CAACG,MAAM,CAAC,GAAGvB,QAAQ,UAAUC,QAAQ,EAAE,CAAC;MAC3CkB,YAAY,GAAGC,GAAG,CAACI,MAAM,CAAC,KAAK,CAAC;;IAGlC;IACA,MAAMC,OAAO,GAAa;MACxBC,UAAU,EAAE1B,QAAQ;MACpB2B,UAAU,EAAEzB,OAAO,CAACyB,UAAU,IAAI,EAAE;MACpClB,KAAK,EAAEA,KAAK;MACZF;KACD;IAED;IACA,IAAI,OAAON,QAAQ,KAAK,QAAQ,EAAE;MAChCwB,OAAO,CAACG,GAAG,GAAGT,YAAY;;IAG5B,KAAK,CAACU,cAAc,CAACzB,MAAM,EAAEC,OAAO,EAAEoB,OAAO,EAAEnB,QAAQ,CAAC;EAC1D;;AAjFFwB;AAoFA,6BAAa,EAAClC,gBAAgB,EAAE,CAACmC,kBAAM,CAACC,eAAe,CAAC,CAAC","names":["AddUserOperation","command_1","constructor","db","username","password","options","execute","server","session","callback","digestPassword","error_1","roles","Array","isArray","length","databaseName","toLowerCase","topology","error","lastHello","maxWireVersion","userPassword","md5","crypto","createHash","update","digest","command","createUser","customData","pwd","executeCommand","exports","operation_1","WRITE_OPERATION"],"sources":["C:\\Users\\91930\\Desktop\\Github projects\\Pharmacy Demo\\back-end\\node_modules\\mongodb\\src\\operations\\add_user.ts"],"sourcesContent":["import * as crypto from 'crypto';\r\n\r\nimport type { Document } from '../bson';\r\nimport type { Db } from '../db';\r\nimport { MongoInvalidArgumentError } from '../error';\r\nimport type { Server } from '../sdam/server';\r\nimport type { ClientSession } from '../sessions';\r\nimport { Callback, emitWarningOnce, getTopology } from '../utils';\r\nimport { CommandOperation, CommandOperationOptions } from './command';\r\nimport { Aspect, defineAspects } from './operation';\r\n\r\n/** @public */\r\nexport interface RoleSpecification {\r\n  /**\r\n   * A role grants privileges to perform sets of actions on defined resources.\r\n   * A given role applies to the database on which it is defined and can grant access down to a collection level of granularity.\r\n   */\r\n  role: string;\r\n  /** The database this user's role should effect. */\r\n  db: string;\r\n}\r\n\r\n/** @public */\r\nexport interface AddUserOptions extends CommandOperationOptions {\r\n  /** @deprecated Please use db.command('createUser', ...) instead for this option */\r\n  digestPassword?: null;\r\n  /** Roles associated with the created user */\r\n  roles?: string | string[] | RoleSpecification | RoleSpecification[];\r\n  /** Custom data associated with the user (only Mongodb 2.6 or higher) */\r\n  customData?: Document;\r\n}\r\n\r\n/** @internal */\r\nexport class AddUserOperation extends CommandOperation<Document> {\r\n  override options: AddUserOptions;\r\n  db: Db;\r\n  username: string;\r\n  password?: string;\r\n\r\n  constructor(db: Db, username: string, password: string | undefined, options?: AddUserOptions) {\r\n    super(db, options);\r\n\r\n    this.db = db;\r\n    this.username = username;\r\n    this.password = password;\r\n    this.options = options ?? {};\r\n  }\r\n\r\n  override execute(\r\n    server: Server,\r\n    session: ClientSession | undefined,\r\n    callback: Callback<Document>\r\n  ): void {\r\n    const db = this.db;\r\n    const username = this.username;\r\n    const password = this.password;\r\n    const options = this.options;\r\n\r\n    // Error out if digestPassword set\r\n    if (options.digestPassword != null) {\r\n      return callback(\r\n        new MongoInvalidArgumentError(\r\n          'Option \"digestPassword\" not supported via addUser, use db.command(...) instead'\r\n        )\r\n      );\r\n    }\r\n\r\n    let roles;\r\n    if (!options.roles || (Array.isArray(options.roles) && options.roles.length === 0)) {\r\n      emitWarningOnce(\r\n        'Creating a user without roles is deprecated. Defaults to \"root\" if db is \"admin\" or \"dbOwner\" otherwise'\r\n      );\r\n      if (db.databaseName.toLowerCase() === 'admin') {\r\n        roles = ['root'];\r\n      } else {\r\n        roles = ['dbOwner'];\r\n      }\r\n    } else {\r\n      roles = Array.isArray(options.roles) ? options.roles : [options.roles];\r\n    }\r\n\r\n    let topology;\r\n    try {\r\n      topology = getTopology(db);\r\n    } catch (error) {\r\n      return callback(error);\r\n    }\r\n\r\n    const digestPassword = topology.lastHello().maxWireVersion >= 7;\r\n\r\n    let userPassword = password;\r\n\r\n    if (!digestPassword) {\r\n      // Use node md5 generator\r\n      const md5 = crypto.createHash('md5');\r\n      // Generate keys used for authentication\r\n      md5.update(`${username}:mongo:${password}`);\r\n      userPassword = md5.digest('hex');\r\n    }\r\n\r\n    // Build the command to execute\r\n    const command: Document = {\r\n      createUser: username,\r\n      customData: options.customData || {},\r\n      roles: roles,\r\n      digestPassword\r\n    };\r\n\r\n    // No password\r\n    if (typeof password === 'string') {\r\n      command.pwd = userPassword;\r\n    }\r\n\r\n    super.executeCommand(server, session, command, callback);\r\n  }\r\n}\r\n\r\ndefineAspects(AddUserOperation, [Aspect.WRITE_OPERATION]);\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}