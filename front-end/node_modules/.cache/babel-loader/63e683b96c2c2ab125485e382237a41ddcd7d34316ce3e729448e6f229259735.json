{"ast":null,"code":"/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Florent Cailhol @ooflorent\r\n*/\n\n\"use strict\";\n\nconst {\n  compareChunksNatural\n} = require(\"../util/comparators\");\nconst {\n  getFullChunkName,\n  getUsedChunkIds,\n  assignDeterministicIds\n} = require(\"./IdHelpers\");\n\n/** @typedef {import(\"../Compiler\")} Compiler */\n/** @typedef {import(\"../Module\")} Module */\n\nclass DeterministicChunkIdsPlugin {\n  constructor(options) {\n    this.options = options || {};\n  }\n\n  /**\r\n   * Apply the plugin\r\n   * @param {Compiler} compiler the compiler instance\r\n   * @returns {void}\r\n   */\n  apply(compiler) {\n    compiler.hooks.compilation.tap(\"DeterministicChunkIdsPlugin\", compilation => {\n      compilation.hooks.chunkIds.tap(\"DeterministicChunkIdsPlugin\", chunks => {\n        const chunkGraph = compilation.chunkGraph;\n        const context = this.options.context ? this.options.context : compiler.context;\n        const maxLength = this.options.maxLength || 3;\n        const compareNatural = compareChunksNatural(chunkGraph);\n        const usedIds = getUsedChunkIds(compilation);\n        assignDeterministicIds(Array.from(chunks).filter(chunk => {\n          return chunk.id === null;\n        }), chunk => getFullChunkName(chunk, chunkGraph, context, compiler.root), compareNatural, (chunk, id) => {\n          const size = usedIds.size;\n          usedIds.add(`${id}`);\n          if (size === usedIds.size) return false;\n          chunk.id = id;\n          chunk.ids = [id];\n          return true;\n        }, [Math.pow(10, maxLength)], 10, usedIds.size);\n      });\n    });\n  }\n}\nmodule.exports = DeterministicChunkIdsPlugin;","map":{"version":3,"names":["compareChunksNatural","require","getFullChunkName","getUsedChunkIds","assignDeterministicIds","DeterministicChunkIdsPlugin","constructor","options","apply","compiler","hooks","compilation","tap","chunkIds","chunks","chunkGraph","context","maxLength","compareNatural","usedIds","Array","from","filter","chunk","id","root","size","add","ids","Math","pow","module","exports"],"sources":["C:/Users/91930/Desktop/Github projects/Pharmacy Demo/front-end/node_modules/webpack/lib/ids/DeterministicChunkIdsPlugin.js"],"sourcesContent":["/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Florent Cailhol @ooflorent\r\n*/\r\n\r\n\"use strict\";\r\n\r\nconst { compareChunksNatural } = require(\"../util/comparators\");\r\nconst {\r\n\tgetFullChunkName,\r\n\tgetUsedChunkIds,\r\n\tassignDeterministicIds\r\n} = require(\"./IdHelpers\");\r\n\r\n/** @typedef {import(\"../Compiler\")} Compiler */\r\n/** @typedef {import(\"../Module\")} Module */\r\n\r\nclass DeterministicChunkIdsPlugin {\r\n\tconstructor(options) {\r\n\t\tthis.options = options || {};\r\n\t}\r\n\r\n\t/**\r\n\t * Apply the plugin\r\n\t * @param {Compiler} compiler the compiler instance\r\n\t * @returns {void}\r\n\t */\r\n\tapply(compiler) {\r\n\t\tcompiler.hooks.compilation.tap(\r\n\t\t\t\"DeterministicChunkIdsPlugin\",\r\n\t\t\tcompilation => {\r\n\t\t\t\tcompilation.hooks.chunkIds.tap(\r\n\t\t\t\t\t\"DeterministicChunkIdsPlugin\",\r\n\t\t\t\t\tchunks => {\r\n\t\t\t\t\t\tconst chunkGraph = compilation.chunkGraph;\r\n\t\t\t\t\t\tconst context = this.options.context\r\n\t\t\t\t\t\t\t? this.options.context\r\n\t\t\t\t\t\t\t: compiler.context;\r\n\t\t\t\t\t\tconst maxLength = this.options.maxLength || 3;\r\n\r\n\t\t\t\t\t\tconst compareNatural = compareChunksNatural(chunkGraph);\r\n\r\n\t\t\t\t\t\tconst usedIds = getUsedChunkIds(compilation);\r\n\t\t\t\t\t\tassignDeterministicIds(\r\n\t\t\t\t\t\t\tArray.from(chunks).filter(chunk => {\r\n\t\t\t\t\t\t\t\treturn chunk.id === null;\r\n\t\t\t\t\t\t\t}),\r\n\t\t\t\t\t\t\tchunk =>\r\n\t\t\t\t\t\t\t\tgetFullChunkName(chunk, chunkGraph, context, compiler.root),\r\n\t\t\t\t\t\t\tcompareNatural,\r\n\t\t\t\t\t\t\t(chunk, id) => {\r\n\t\t\t\t\t\t\t\tconst size = usedIds.size;\r\n\t\t\t\t\t\t\t\tusedIds.add(`${id}`);\r\n\t\t\t\t\t\t\t\tif (size === usedIds.size) return false;\r\n\t\t\t\t\t\t\t\tchunk.id = id;\r\n\t\t\t\t\t\t\t\tchunk.ids = [id];\r\n\t\t\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t[Math.pow(10, maxLength)],\r\n\t\t\t\t\t\t\t10,\r\n\t\t\t\t\t\t\tusedIds.size\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n}\r\n\r\nmodule.exports = DeterministicChunkIdsPlugin;\r\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ,MAAM;EAAEA;AAAqB,CAAC,GAAGC,OAAO,CAAC,qBAAqB,CAAC;AAC/D,MAAM;EACLC,gBAAgB;EAChBC,eAAe;EACfC;AACD,CAAC,GAAGH,OAAO,CAAC,aAAa,CAAC;;AAE1B;AACA;;AAEA,MAAMI,2BAA2B,CAAC;EACjCC,WAAW,CAACC,OAAO,EAAE;IACpB,IAAI,CAACA,OAAO,GAAGA,OAAO,IAAI,CAAC,CAAC;EAC7B;;EAEA;AACD;AACA;AACA;AACA;EACCC,KAAK,CAACC,QAAQ,EAAE;IACfA,QAAQ,CAACC,KAAK,CAACC,WAAW,CAACC,GAAG,CAC7B,6BAA6B,EAC7BD,WAAW,IAAI;MACdA,WAAW,CAACD,KAAK,CAACG,QAAQ,CAACD,GAAG,CAC7B,6BAA6B,EAC7BE,MAAM,IAAI;QACT,MAAMC,UAAU,GAAGJ,WAAW,CAACI,UAAU;QACzC,MAAMC,OAAO,GAAG,IAAI,CAACT,OAAO,CAACS,OAAO,GACjC,IAAI,CAACT,OAAO,CAACS,OAAO,GACpBP,QAAQ,CAACO,OAAO;QACnB,MAAMC,SAAS,GAAG,IAAI,CAACV,OAAO,CAACU,SAAS,IAAI,CAAC;QAE7C,MAAMC,cAAc,GAAGlB,oBAAoB,CAACe,UAAU,CAAC;QAEvD,MAAMI,OAAO,GAAGhB,eAAe,CAACQ,WAAW,CAAC;QAC5CP,sBAAsB,CACrBgB,KAAK,CAACC,IAAI,CAACP,MAAM,CAAC,CAACQ,MAAM,CAACC,KAAK,IAAI;UAClC,OAAOA,KAAK,CAACC,EAAE,KAAK,IAAI;QACzB,CAAC,CAAC,EACFD,KAAK,IACJrB,gBAAgB,CAACqB,KAAK,EAAER,UAAU,EAAEC,OAAO,EAAEP,QAAQ,CAACgB,IAAI,CAAC,EAC5DP,cAAc,EACd,CAACK,KAAK,EAAEC,EAAE,KAAK;UACd,MAAME,IAAI,GAAGP,OAAO,CAACO,IAAI;UACzBP,OAAO,CAACQ,GAAG,CAAE,GAAEH,EAAG,EAAC,CAAC;UACpB,IAAIE,IAAI,KAAKP,OAAO,CAACO,IAAI,EAAE,OAAO,KAAK;UACvCH,KAAK,CAACC,EAAE,GAAGA,EAAE;UACbD,KAAK,CAACK,GAAG,GAAG,CAACJ,EAAE,CAAC;UAChB,OAAO,IAAI;QACZ,CAAC,EACD,CAACK,IAAI,CAACC,GAAG,CAAC,EAAE,EAAEb,SAAS,CAAC,CAAC,EACzB,EAAE,EACFE,OAAO,CAACO,IAAI,CACZ;MACF,CAAC,CACD;IACF,CAAC,CACD;EACF;AACD;AAEAK,MAAM,CAACC,OAAO,GAAG3B,2BAA2B"},"metadata":{},"sourceType":"script","externalDependencies":[]}