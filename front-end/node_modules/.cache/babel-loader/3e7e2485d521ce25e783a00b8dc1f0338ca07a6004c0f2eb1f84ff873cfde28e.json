{"ast":null,"code":"import { HttpResponse } from \"@aws-sdk/protocol-http\";\nimport { buildQueryString } from \"@aws-sdk/querystring-builder\";\nimport { Agent as hAgent, request as hRequest } from \"http\";\nimport { Agent as hsAgent, request as hsRequest } from \"https\";\nimport { NODEJS_TIMEOUT_ERROR_CODES } from \"./constants\";\nimport { getTransformedHeaders } from \"./get-transformed-headers\";\nimport { setConnectionTimeout } from \"./set-connection-timeout\";\nimport { setSocketTimeout } from \"./set-socket-timeout\";\nimport { writeRequestBody } from \"./write-request-body\";\nexport class NodeHttpHandler {\n  constructor(options) {\n    this.metadata = {\n      handlerProtocol: \"http/1.1\"\n    };\n    this.configProvider = new Promise((resolve, reject) => {\n      if (typeof options === \"function\") {\n        options().then(_options => {\n          resolve(this.resolveDefaultConfig(_options));\n        }).catch(reject);\n      } else {\n        resolve(this.resolveDefaultConfig(options));\n      }\n    });\n  }\n  resolveDefaultConfig(options) {\n    const {\n      connectionTimeout,\n      socketTimeout,\n      httpAgent,\n      httpsAgent\n    } = options || {};\n    const keepAlive = true;\n    const maxSockets = 50;\n    return {\n      connectionTimeout,\n      socketTimeout,\n      httpAgent: httpAgent || new hAgent({\n        keepAlive,\n        maxSockets\n      }),\n      httpsAgent: httpsAgent || new hsAgent({\n        keepAlive,\n        maxSockets\n      })\n    };\n  }\n  destroy() {\n    this.config?.httpAgent?.destroy();\n    this.config?.httpsAgent?.destroy();\n  }\n  async handle(request) {\n    let {\n      abortSignal\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    if (!this.config) {\n      this.config = await this.configProvider;\n    }\n    return new Promise((resolve, reject) => {\n      if (!this.config) {\n        throw new Error(\"Node HTTP request handler config is not resolved\");\n      }\n      if (abortSignal?.aborted) {\n        const abortError = new Error(\"Request aborted\");\n        abortError.name = \"AbortError\";\n        reject(abortError);\n        return;\n      }\n      const isSSL = request.protocol === \"https:\";\n      const queryString = buildQueryString(request.query || {});\n      const nodeHttpsOptions = {\n        headers: request.headers,\n        host: request.hostname,\n        method: request.method,\n        path: queryString ? `${request.path}?${queryString}` : request.path,\n        port: request.port,\n        agent: isSSL ? this.config.httpsAgent : this.config.httpAgent\n      };\n      const requestFunc = isSSL ? hsRequest : hRequest;\n      const req = requestFunc(nodeHttpsOptions, res => {\n        const httpResponse = new HttpResponse({\n          statusCode: res.statusCode || -1,\n          headers: getTransformedHeaders(res.headers),\n          body: res\n        });\n        resolve({\n          response: httpResponse\n        });\n      });\n      req.on(\"error\", err => {\n        if (NODEJS_TIMEOUT_ERROR_CODES.includes(err.code)) {\n          reject(Object.assign(err, {\n            name: \"TimeoutError\"\n          }));\n        } else {\n          reject(err);\n        }\n      });\n      setConnectionTimeout(req, reject, this.config.connectionTimeout);\n      setSocketTimeout(req, reject, this.config.socketTimeout);\n      if (abortSignal) {\n        abortSignal.onabort = () => {\n          req.abort();\n          const abortError = new Error(\"Request aborted\");\n          abortError.name = \"AbortError\";\n          reject(abortError);\n        };\n      }\n      writeRequestBody(req, request);\n    });\n  }\n}","map":{"version":3,"names":["HttpResponse","buildQueryString","Agent","hAgent","request","hRequest","hsAgent","hsRequest","NODEJS_TIMEOUT_ERROR_CODES","getTransformedHeaders","setConnectionTimeout","setSocketTimeout","writeRequestBody","NodeHttpHandler","constructor","options","metadata","handlerProtocol","configProvider","Promise","resolve","reject","then","_options","resolveDefaultConfig","catch","connectionTimeout","socketTimeout","httpAgent","httpsAgent","keepAlive","maxSockets","destroy","config","handle","abortSignal","Error","aborted","abortError","name","isSSL","protocol","queryString","query","nodeHttpsOptions","headers","host","hostname","method","path","port","agent","requestFunc","req","res","httpResponse","statusCode","body","response","on","err","includes","code","Object","assign","onabort","abort"],"sources":["C:/Users/91930/Desktop/Github projects/Pharmacy Demo/back-end/node_modules/@aws-sdk/node-http-handler/dist-es/node-http-handler.js"],"sourcesContent":["import { HttpResponse } from \"@aws-sdk/protocol-http\";\r\nimport { buildQueryString } from \"@aws-sdk/querystring-builder\";\r\nimport { Agent as hAgent, request as hRequest } from \"http\";\r\nimport { Agent as hsAgent, request as hsRequest } from \"https\";\r\nimport { NODEJS_TIMEOUT_ERROR_CODES } from \"./constants\";\r\nimport { getTransformedHeaders } from \"./get-transformed-headers\";\r\nimport { setConnectionTimeout } from \"./set-connection-timeout\";\r\nimport { setSocketTimeout } from \"./set-socket-timeout\";\r\nimport { writeRequestBody } from \"./write-request-body\";\r\nexport class NodeHttpHandler {\r\n    constructor(options) {\r\n        this.metadata = { handlerProtocol: \"http/1.1\" };\r\n        this.configProvider = new Promise((resolve, reject) => {\r\n            if (typeof options === \"function\") {\r\n                options()\r\n                    .then((_options) => {\r\n                    resolve(this.resolveDefaultConfig(_options));\r\n                })\r\n                    .catch(reject);\r\n            }\r\n            else {\r\n                resolve(this.resolveDefaultConfig(options));\r\n            }\r\n        });\r\n    }\r\n    resolveDefaultConfig(options) {\r\n        const { connectionTimeout, socketTimeout, httpAgent, httpsAgent } = options || {};\r\n        const keepAlive = true;\r\n        const maxSockets = 50;\r\n        return {\r\n            connectionTimeout,\r\n            socketTimeout,\r\n            httpAgent: httpAgent || new hAgent({ keepAlive, maxSockets }),\r\n            httpsAgent: httpsAgent || new hsAgent({ keepAlive, maxSockets }),\r\n        };\r\n    }\r\n    destroy() {\r\n        this.config?.httpAgent?.destroy();\r\n        this.config?.httpsAgent?.destroy();\r\n    }\r\n    async handle(request, { abortSignal } = {}) {\r\n        if (!this.config) {\r\n            this.config = await this.configProvider;\r\n        }\r\n        return new Promise((resolve, reject) => {\r\n            if (!this.config) {\r\n                throw new Error(\"Node HTTP request handler config is not resolved\");\r\n            }\r\n            if (abortSignal?.aborted) {\r\n                const abortError = new Error(\"Request aborted\");\r\n                abortError.name = \"AbortError\";\r\n                reject(abortError);\r\n                return;\r\n            }\r\n            const isSSL = request.protocol === \"https:\";\r\n            const queryString = buildQueryString(request.query || {});\r\n            const nodeHttpsOptions = {\r\n                headers: request.headers,\r\n                host: request.hostname,\r\n                method: request.method,\r\n                path: queryString ? `${request.path}?${queryString}` : request.path,\r\n                port: request.port,\r\n                agent: isSSL ? this.config.httpsAgent : this.config.httpAgent,\r\n            };\r\n            const requestFunc = isSSL ? hsRequest : hRequest;\r\n            const req = requestFunc(nodeHttpsOptions, (res) => {\r\n                const httpResponse = new HttpResponse({\r\n                    statusCode: res.statusCode || -1,\r\n                    headers: getTransformedHeaders(res.headers),\r\n                    body: res,\r\n                });\r\n                resolve({ response: httpResponse });\r\n            });\r\n            req.on(\"error\", (err) => {\r\n                if (NODEJS_TIMEOUT_ERROR_CODES.includes(err.code)) {\r\n                    reject(Object.assign(err, { name: \"TimeoutError\" }));\r\n                }\r\n                else {\r\n                    reject(err);\r\n                }\r\n            });\r\n            setConnectionTimeout(req, reject, this.config.connectionTimeout);\r\n            setSocketTimeout(req, reject, this.config.socketTimeout);\r\n            if (abortSignal) {\r\n                abortSignal.onabort = () => {\r\n                    req.abort();\r\n                    const abortError = new Error(\"Request aborted\");\r\n                    abortError.name = \"AbortError\";\r\n                    reject(abortError);\r\n                };\r\n            }\r\n            writeRequestBody(req, request);\r\n        });\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}