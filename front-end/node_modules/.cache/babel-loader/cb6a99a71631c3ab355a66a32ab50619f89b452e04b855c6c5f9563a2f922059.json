{"ast":null,"code":"'use strict';\n\nconst Decimal128Type = require('../types/decimal128');\nconst assert = require('assert');\nmodule.exports = function castDecimal128(value) {\n  if (value == null) {\n    return value;\n  }\n  if (typeof value === 'object' && typeof value.$numberDecimal === 'string') {\n    return Decimal128Type.fromString(value.$numberDecimal);\n  }\n  if (value instanceof Decimal128Type) {\n    return value;\n  }\n  if (typeof value === 'string') {\n    return Decimal128Type.fromString(value);\n  }\n  if (Buffer.isBuffer(value)) {\n    return new Decimal128Type(value);\n  }\n  if (typeof value === 'number') {\n    return Decimal128Type.fromString(String(value));\n  }\n  if (typeof value.valueOf === 'function' && typeof value.valueOf() === 'string') {\n    return Decimal128Type.fromString(value.valueOf());\n  }\n  assert.ok(false);\n};","map":{"version":3,"names":["Decimal128Type","require","assert","module","exports","castDecimal128","value","$numberDecimal","fromString","Buffer","isBuffer","String","valueOf","ok"],"sources":["C:/Users/91930/Desktop/Github projects/Pharmacy Demo/back-end/node_modules/mongoose/lib/cast/decimal128.js"],"sourcesContent":["'use strict';\r\n\r\nconst Decimal128Type = require('../types/decimal128');\r\nconst assert = require('assert');\r\n\r\nmodule.exports = function castDecimal128(value) {\r\n  if (value == null) {\r\n    return value;\r\n  }\r\n\r\n  if (typeof value === 'object' && typeof value.$numberDecimal === 'string') {\r\n    return Decimal128Type.fromString(value.$numberDecimal);\r\n  }\r\n\r\n  if (value instanceof Decimal128Type) {\r\n    return value;\r\n  }\r\n\r\n  if (typeof value === 'string') {\r\n    return Decimal128Type.fromString(value);\r\n  }\r\n\r\n  if (Buffer.isBuffer(value)) {\r\n    return new Decimal128Type(value);\r\n  }\r\n\r\n  if (typeof value === 'number') {\r\n    return Decimal128Type.fromString(String(value));\r\n  }\r\n\r\n  if (typeof value.valueOf === 'function' && typeof value.valueOf() === 'string') {\r\n    return Decimal128Type.fromString(value.valueOf());\r\n  }\r\n\r\n  assert.ok(false);\r\n};\r\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,cAAc,GAAGC,OAAO,CAAC,qBAAqB,CAAC;AACrD,MAAMC,MAAM,GAAGD,OAAO,CAAC,QAAQ,CAAC;AAEhCE,MAAM,CAACC,OAAO,GAAG,SAASC,cAAc,CAACC,KAAK,EAAE;EAC9C,IAAIA,KAAK,IAAI,IAAI,EAAE;IACjB,OAAOA,KAAK;EACd;EAEA,IAAI,OAAOA,KAAK,KAAK,QAAQ,IAAI,OAAOA,KAAK,CAACC,cAAc,KAAK,QAAQ,EAAE;IACzE,OAAOP,cAAc,CAACQ,UAAU,CAACF,KAAK,CAACC,cAAc,CAAC;EACxD;EAEA,IAAID,KAAK,YAAYN,cAAc,EAAE;IACnC,OAAOM,KAAK;EACd;EAEA,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;IAC7B,OAAON,cAAc,CAACQ,UAAU,CAACF,KAAK,CAAC;EACzC;EAEA,IAAIG,MAAM,CAACC,QAAQ,CAACJ,KAAK,CAAC,EAAE;IAC1B,OAAO,IAAIN,cAAc,CAACM,KAAK,CAAC;EAClC;EAEA,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;IAC7B,OAAON,cAAc,CAACQ,UAAU,CAACG,MAAM,CAACL,KAAK,CAAC,CAAC;EACjD;EAEA,IAAI,OAAOA,KAAK,CAACM,OAAO,KAAK,UAAU,IAAI,OAAON,KAAK,CAACM,OAAO,EAAE,KAAK,QAAQ,EAAE;IAC9E,OAAOZ,cAAc,CAACQ,UAAU,CAACF,KAAK,CAACM,OAAO,EAAE,CAAC;EACnD;EAEAV,MAAM,CAACW,EAAE,CAAC,KAAK,CAAC;AAClB,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}