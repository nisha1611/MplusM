{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GridFSBucketWriteStream = void 0;\nconst stream_1 = require(\"stream\");\nconst bson_1 = require(\"../bson\");\nconst error_1 = require(\"../error\");\nconst utils_1 = require(\"../utils\");\nconst write_concern_1 = require(\"./../write_concern\");\n/**\r\n * A writable stream that enables you to write buffers to GridFS.\r\n *\r\n * Do not instantiate this class directly. Use `openUploadStream()` instead.\r\n * @public\r\n */\nclass GridFSBucketWriteStream extends stream_1.Writable {\n  /**\r\n   * @param bucket - Handle for this stream's corresponding bucket\r\n   * @param filename - The value of the 'filename' key in the files doc\r\n   * @param options - Optional settings.\r\n   * @internal\r\n   */\n  constructor(bucket, filename, options) {\n    super();\n    options = options !== null && options !== void 0 ? options : {};\n    this.bucket = bucket;\n    this.chunks = bucket.s._chunksCollection;\n    this.filename = filename;\n    this.files = bucket.s._filesCollection;\n    this.options = options;\n    this.writeConcern = write_concern_1.WriteConcern.fromOptions(options) || bucket.s.options.writeConcern;\n    // Signals the write is all done\n    this.done = false;\n    this.id = options.id ? options.id : new bson_1.ObjectId();\n    // properly inherit the default chunksize from parent\n    this.chunkSizeBytes = options.chunkSizeBytes || this.bucket.s.options.chunkSizeBytes;\n    this.bufToStore = Buffer.alloc(this.chunkSizeBytes);\n    this.length = 0;\n    this.n = 0;\n    this.pos = 0;\n    this.state = {\n      streamEnd: false,\n      outstandingRequests: 0,\n      errored: false,\n      aborted: false\n    };\n    if (!this.bucket.s.calledOpenUploadStream) {\n      this.bucket.s.calledOpenUploadStream = true;\n      checkIndexes(this, () => {\n        this.bucket.s.checkedIndexes = true;\n        this.bucket.emit('index');\n      });\n    }\n  }\n  write(chunk, encodingOrCallback, callback) {\n    const encoding = typeof encodingOrCallback === 'function' ? undefined : encodingOrCallback;\n    callback = typeof encodingOrCallback === 'function' ? encodingOrCallback : callback;\n    return waitForIndexes(this, () => doWrite(this, chunk, encoding, callback));\n  }\n  abort(callback) {\n    return (0, utils_1.maybeCallback)(async () => {\n      if (this.state.streamEnd) {\n        // TODO(NODE-3485): Replace with MongoGridFSStreamClosed\n        throw new error_1.MongoAPIError('Cannot abort a stream that has already completed');\n      }\n      if (this.state.aborted) {\n        // TODO(NODE-3485): Replace with MongoGridFSStreamClosed\n        throw new error_1.MongoAPIError('Cannot call abort() on a stream twice');\n      }\n      this.state.aborted = true;\n      await this.chunks.deleteMany({\n        files_id: this.id\n      });\n    }, callback);\n  }\n  end(chunkOrCallback, encodingOrCallback, callback) {\n    const chunk = typeof chunkOrCallback === 'function' ? undefined : chunkOrCallback;\n    const encoding = typeof encodingOrCallback === 'function' ? undefined : encodingOrCallback;\n    callback = typeof chunkOrCallback === 'function' ? chunkOrCallback : typeof encodingOrCallback === 'function' ? encodingOrCallback : callback;\n    if (this.state.streamEnd || checkAborted(this, callback)) return this;\n    this.state.streamEnd = true;\n    if (callback) {\n      this.once(GridFSBucketWriteStream.FINISH, result => {\n        if (callback) callback(undefined, result);\n      });\n    }\n    if (!chunk) {\n      waitForIndexes(this, () => !!writeRemnant(this));\n      return this;\n    }\n    this.write(chunk, encoding, () => {\n      writeRemnant(this);\n    });\n    return this;\n  }\n}\nexports.GridFSBucketWriteStream = GridFSBucketWriteStream;\n/** @event */\nGridFSBucketWriteStream.CLOSE = 'close';\n/** @event */\nGridFSBucketWriteStream.ERROR = 'error';\n/**\r\n * `end()` was called and the write stream successfully wrote the file metadata and all the chunks to MongoDB.\r\n * @event\r\n */\nGridFSBucketWriteStream.FINISH = 'finish';\nfunction __handleError(stream, error, callback) {\n  if (stream.state.errored) {\n    return;\n  }\n  stream.state.errored = true;\n  if (callback) {\n    return callback(error);\n  }\n  stream.emit(GridFSBucketWriteStream.ERROR, error);\n}\nfunction createChunkDoc(filesId, n, data) {\n  return {\n    _id: new bson_1.ObjectId(),\n    files_id: filesId,\n    n,\n    data\n  };\n}\nfunction checkChunksIndex(stream, callback) {\n  stream.chunks.listIndexes().toArray((error, indexes) => {\n    let index;\n    if (error) {\n      // Collection doesn't exist so create index\n      if (error instanceof error_1.MongoError && error.code === error_1.MONGODB_ERROR_CODES.NamespaceNotFound) {\n        index = {\n          files_id: 1,\n          n: 1\n        };\n        stream.chunks.createIndex(index, {\n          background: false,\n          unique: true\n        }, error => {\n          if (error) {\n            return callback(error);\n          }\n          callback();\n        });\n        return;\n      }\n      return callback(error);\n    }\n    let hasChunksIndex = false;\n    if (indexes) {\n      indexes.forEach(index => {\n        if (index.key) {\n          const keys = Object.keys(index.key);\n          if (keys.length === 2 && index.key.files_id === 1 && index.key.n === 1) {\n            hasChunksIndex = true;\n          }\n        }\n      });\n    }\n    if (hasChunksIndex) {\n      callback();\n    } else {\n      index = {\n        files_id: 1,\n        n: 1\n      };\n      const writeConcernOptions = getWriteOptions(stream);\n      stream.chunks.createIndex(index, {\n        ...writeConcernOptions,\n        background: true,\n        unique: true\n      }, callback);\n    }\n  });\n}\nfunction checkDone(stream, callback) {\n  if (stream.done) return true;\n  if (stream.state.streamEnd && stream.state.outstandingRequests === 0 && !stream.state.errored) {\n    // Set done so we do not trigger duplicate createFilesDoc\n    stream.done = true;\n    // Create a new files doc\n    const filesDoc = createFilesDoc(stream.id, stream.length, stream.chunkSizeBytes, stream.filename, stream.options.contentType, stream.options.aliases, stream.options.metadata);\n    if (checkAborted(stream, callback)) {\n      return false;\n    }\n    stream.files.insertOne(filesDoc, getWriteOptions(stream), error => {\n      if (error) {\n        return __handleError(stream, error, callback);\n      }\n      stream.emit(GridFSBucketWriteStream.FINISH, filesDoc);\n      stream.emit(GridFSBucketWriteStream.CLOSE);\n    });\n    return true;\n  }\n  return false;\n}\nfunction checkIndexes(stream, callback) {\n  stream.files.findOne({}, {\n    projection: {\n      _id: 1\n    }\n  }, (error, doc) => {\n    if (error) {\n      return callback(error);\n    }\n    if (doc) {\n      return callback();\n    }\n    stream.files.listIndexes().toArray((error, indexes) => {\n      let index;\n      if (error) {\n        // Collection doesn't exist so create index\n        if (error instanceof error_1.MongoError && error.code === error_1.MONGODB_ERROR_CODES.NamespaceNotFound) {\n          index = {\n            filename: 1,\n            uploadDate: 1\n          };\n          stream.files.createIndex(index, {\n            background: false\n          }, error => {\n            if (error) {\n              return callback(error);\n            }\n            checkChunksIndex(stream, callback);\n          });\n          return;\n        }\n        return callback(error);\n      }\n      let hasFileIndex = false;\n      if (indexes) {\n        indexes.forEach(index => {\n          const keys = Object.keys(index.key);\n          if (keys.length === 2 && index.key.filename === 1 && index.key.uploadDate === 1) {\n            hasFileIndex = true;\n          }\n        });\n      }\n      if (hasFileIndex) {\n        checkChunksIndex(stream, callback);\n      } else {\n        index = {\n          filename: 1,\n          uploadDate: 1\n        };\n        const writeConcernOptions = getWriteOptions(stream);\n        stream.files.createIndex(index, {\n          ...writeConcernOptions,\n          background: false\n        }, error => {\n          if (error) {\n            return callback(error);\n          }\n          checkChunksIndex(stream, callback);\n        });\n      }\n    });\n  });\n}\nfunction createFilesDoc(_id, length, chunkSize, filename, contentType, aliases, metadata) {\n  const ret = {\n    _id,\n    length,\n    chunkSize,\n    uploadDate: new Date(),\n    filename\n  };\n  if (contentType) {\n    ret.contentType = contentType;\n  }\n  if (aliases) {\n    ret.aliases = aliases;\n  }\n  if (metadata) {\n    ret.metadata = metadata;\n  }\n  return ret;\n}\nfunction doWrite(stream, chunk, encoding, callback) {\n  if (checkAborted(stream, callback)) {\n    return false;\n  }\n  const inputBuf = Buffer.isBuffer(chunk) ? chunk : Buffer.from(chunk, encoding);\n  stream.length += inputBuf.length;\n  // Input is small enough to fit in our buffer\n  if (stream.pos + inputBuf.length < stream.chunkSizeBytes) {\n    inputBuf.copy(stream.bufToStore, stream.pos);\n    stream.pos += inputBuf.length;\n    callback && callback();\n    // Note that we reverse the typical semantics of write's return value\n    // to be compatible with node's `.pipe()` function.\n    // True means client can keep writing.\n    return true;\n  }\n  // Otherwise, buffer is too big for current chunk, so we need to flush\n  // to MongoDB.\n  let inputBufRemaining = inputBuf.length;\n  let spaceRemaining = stream.chunkSizeBytes - stream.pos;\n  let numToCopy = Math.min(spaceRemaining, inputBuf.length);\n  let outstandingRequests = 0;\n  while (inputBufRemaining > 0) {\n    const inputBufPos = inputBuf.length - inputBufRemaining;\n    inputBuf.copy(stream.bufToStore, stream.pos, inputBufPos, inputBufPos + numToCopy);\n    stream.pos += numToCopy;\n    spaceRemaining -= numToCopy;\n    let doc;\n    if (spaceRemaining === 0) {\n      doc = createChunkDoc(stream.id, stream.n, Buffer.from(stream.bufToStore));\n      ++stream.state.outstandingRequests;\n      ++outstandingRequests;\n      if (checkAborted(stream, callback)) {\n        return false;\n      }\n      stream.chunks.insertOne(doc, getWriteOptions(stream), error => {\n        if (error) {\n          return __handleError(stream, error);\n        }\n        --stream.state.outstandingRequests;\n        --outstandingRequests;\n        if (!outstandingRequests) {\n          stream.emit('drain', doc);\n          callback && callback();\n          checkDone(stream);\n        }\n      });\n      spaceRemaining = stream.chunkSizeBytes;\n      stream.pos = 0;\n      ++stream.n;\n    }\n    inputBufRemaining -= numToCopy;\n    numToCopy = Math.min(spaceRemaining, inputBufRemaining);\n  }\n  // Note that we reverse the typical semantics of write's return value\n  // to be compatible with node's `.pipe()` function.\n  // False means the client should wait for the 'drain' event.\n  return false;\n}\nfunction getWriteOptions(stream) {\n  const obj = {};\n  if (stream.writeConcern) {\n    obj.writeConcern = {\n      w: stream.writeConcern.w,\n      wtimeout: stream.writeConcern.wtimeout,\n      j: stream.writeConcern.j\n    };\n  }\n  return obj;\n}\nfunction waitForIndexes(stream, callback) {\n  if (stream.bucket.s.checkedIndexes) {\n    return callback(false);\n  }\n  stream.bucket.once('index', () => {\n    callback(true);\n  });\n  return true;\n}\nfunction writeRemnant(stream, callback) {\n  // Buffer is empty, so don't bother to insert\n  if (stream.pos === 0) {\n    return checkDone(stream, callback);\n  }\n  ++stream.state.outstandingRequests;\n  // Create a new buffer to make sure the buffer isn't bigger than it needs\n  // to be.\n  const remnant = Buffer.alloc(stream.pos);\n  stream.bufToStore.copy(remnant, 0, 0, stream.pos);\n  const doc = createChunkDoc(stream.id, stream.n, remnant);\n  // If the stream was aborted, do not write remnant\n  if (checkAborted(stream, callback)) {\n    return false;\n  }\n  stream.chunks.insertOne(doc, getWriteOptions(stream), error => {\n    if (error) {\n      return __handleError(stream, error);\n    }\n    --stream.state.outstandingRequests;\n    checkDone(stream);\n  });\n  return true;\n}\nfunction checkAborted(stream, callback) {\n  if (stream.state.aborted) {\n    if (typeof callback === 'function') {\n      // TODO(NODE-3485): Replace with MongoGridFSStreamClosedError\n      callback(new error_1.MongoAPIError('Stream has been aborted'));\n    }\n    return true;\n  }\n  return false;\n}","map":{"version":3,"mappings":"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","names":["GridFSBucketWriteStream","stream_1","constructor","bucket","filename","options","chunks","s","_chunksCollection","files","_filesCollection","writeConcern","write_concern_1","fromOptions","done","id","bson_1","chunkSizeBytes","bufToStore","Buffer","alloc","length","n","pos","state","streamEnd","outstandingRequests","errored","aborted","calledOpenUploadStream","checkIndexes","checkedIndexes","emit","write","chunk","encodingOrCallback","callback","encoding","undefined","waitForIndexes","doWrite","abort","error_1","deleteMany","files_id","end","chunkOrCallback","checkAborted","once","FINISH","result","writeRemnant","exports","__handleError","stream","error","ERROR","createChunkDoc","filesId","data","_id","checkChunksIndex","listIndexes","toArray","indexes","index","code","NamespaceNotFound","createIndex","background","unique","hasChunksIndex","forEach","key","keys","Object","writeConcernOptions","getWriteOptions","checkDone","filesDoc","createFilesDoc","contentType","aliases","metadata","insertOne","CLOSE","findOne","projection","doc","uploadDate","hasFileIndex","chunkSize","ret","Date","inputBuf","isBuffer","from","copy","inputBufRemaining","spaceRemaining","numToCopy","Math","min","inputBufPos","obj","w","wtimeout","j","remnant"],"sources":["C:\\Users\\91930\\Desktop\\Github projects\\Pharmacy Demo\\back-end\\node_modules\\mongodb\\src\\gridfs\\upload.ts"],"sourcesContent":["import { Writable } from 'stream';\r\n\r\nimport type { Document } from '../bson';\r\nimport { ObjectId } from '../bson';\r\nimport type { Collection } from '../collection';\r\nimport { AnyError, MongoAPIError, MONGODB_ERROR_CODES, MongoError } from '../error';\r\nimport { Callback, maybeCallback } from '../utils';\r\nimport type { WriteConcernOptions } from '../write_concern';\r\nimport { WriteConcern } from './../write_concern';\r\nimport type { GridFSFile } from './download';\r\nimport type { GridFSBucket } from './index';\r\n\r\n/** @public */\r\nexport interface GridFSChunk {\r\n  _id: ObjectId;\r\n  files_id: ObjectId;\r\n  n: number;\r\n  data: Buffer | Uint8Array;\r\n}\r\n\r\n/** @public */\r\nexport interface GridFSBucketWriteStreamOptions extends WriteConcernOptions {\r\n  /** Overwrite this bucket's chunkSizeBytes for this file */\r\n  chunkSizeBytes?: number;\r\n  /** Custom file id for the GridFS file. */\r\n  id?: ObjectId;\r\n  /** Object to store in the file document's `metadata` field */\r\n  metadata?: Document;\r\n  /** String to store in the file document's `contentType` field */\r\n  contentType?: string;\r\n  /** Array of strings to store in the file document's `aliases` field */\r\n  aliases?: string[];\r\n}\r\n\r\n/**\r\n * A writable stream that enables you to write buffers to GridFS.\r\n *\r\n * Do not instantiate this class directly. Use `openUploadStream()` instead.\r\n * @public\r\n */\r\nexport class GridFSBucketWriteStream extends Writable implements NodeJS.WritableStream {\r\n  bucket: GridFSBucket;\r\n  chunks: Collection<GridFSChunk>;\r\n  filename: string;\r\n  files: Collection<GridFSFile>;\r\n  options: GridFSBucketWriteStreamOptions;\r\n  done: boolean;\r\n  id: ObjectId;\r\n  chunkSizeBytes: number;\r\n  bufToStore: Buffer;\r\n  length: number;\r\n  n: number;\r\n  pos: number;\r\n  state: {\r\n    streamEnd: boolean;\r\n    outstandingRequests: number;\r\n    errored: boolean;\r\n    aborted: boolean;\r\n  };\r\n  writeConcern?: WriteConcern;\r\n\r\n  /** @event */\r\n  static readonly CLOSE = 'close';\r\n  /** @event */\r\n  static readonly ERROR = 'error';\r\n  /**\r\n   * `end()` was called and the write stream successfully wrote the file metadata and all the chunks to MongoDB.\r\n   * @event\r\n   */\r\n  static readonly FINISH = 'finish';\r\n\r\n  /**\r\n   * @param bucket - Handle for this stream's corresponding bucket\r\n   * @param filename - The value of the 'filename' key in the files doc\r\n   * @param options - Optional settings.\r\n   * @internal\r\n   */\r\n  constructor(bucket: GridFSBucket, filename: string, options?: GridFSBucketWriteStreamOptions) {\r\n    super();\r\n\r\n    options = options ?? {};\r\n    this.bucket = bucket;\r\n    this.chunks = bucket.s._chunksCollection;\r\n    this.filename = filename;\r\n    this.files = bucket.s._filesCollection;\r\n    this.options = options;\r\n    this.writeConcern = WriteConcern.fromOptions(options) || bucket.s.options.writeConcern;\r\n    // Signals the write is all done\r\n    this.done = false;\r\n\r\n    this.id = options.id ? options.id : new ObjectId();\r\n    // properly inherit the default chunksize from parent\r\n    this.chunkSizeBytes = options.chunkSizeBytes || this.bucket.s.options.chunkSizeBytes;\r\n    this.bufToStore = Buffer.alloc(this.chunkSizeBytes);\r\n    this.length = 0;\r\n    this.n = 0;\r\n    this.pos = 0;\r\n    this.state = {\r\n      streamEnd: false,\r\n      outstandingRequests: 0,\r\n      errored: false,\r\n      aborted: false\r\n    };\r\n\r\n    if (!this.bucket.s.calledOpenUploadStream) {\r\n      this.bucket.s.calledOpenUploadStream = true;\r\n\r\n      checkIndexes(this, () => {\r\n        this.bucket.s.checkedIndexes = true;\r\n        this.bucket.emit('index');\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Write a buffer to the stream.\r\n   *\r\n   * @param chunk - Buffer to write\r\n   * @param encodingOrCallback - Optional encoding for the buffer\r\n   * @param callback - Function to call when the chunk was added to the buffer, or if the entire chunk was persisted to MongoDB if this chunk caused a flush.\r\n   * @returns False if this write required flushing a chunk to MongoDB. True otherwise.\r\n   */\r\n  override write(chunk: Buffer | string): boolean;\r\n  override write(chunk: Buffer | string, callback: Callback<void>): boolean;\r\n  override write(chunk: Buffer | string, encoding: BufferEncoding | undefined): boolean;\r\n  override write(\r\n    chunk: Buffer | string,\r\n    encoding: BufferEncoding | undefined,\r\n    callback: Callback<void>\r\n  ): boolean;\r\n  override write(\r\n    chunk: Buffer | string,\r\n    encodingOrCallback?: Callback<void> | BufferEncoding,\r\n    callback?: Callback<void>\r\n  ): boolean {\r\n    const encoding = typeof encodingOrCallback === 'function' ? undefined : encodingOrCallback;\r\n    callback = typeof encodingOrCallback === 'function' ? encodingOrCallback : callback;\r\n    return waitForIndexes(this, () => doWrite(this, chunk, encoding, callback));\r\n  }\r\n\r\n  /**\r\n   * Places this write stream into an aborted state (all future writes fail)\r\n   * and deletes all chunks that have already been written.\r\n   *\r\n   * @param callback - called when chunks are successfully removed or error occurred\r\n   */\r\n  abort(): Promise<void>;\r\n  /** @deprecated Callbacks are deprecated and will be removed in the next major version. See [mongodb-legacy](https://github.com/mongodb-js/nodejs-mongodb-legacy) for migration assistance */\r\n  abort(callback: Callback<void>): void;\r\n  abort(callback?: Callback<void>): Promise<void> | void {\r\n    return maybeCallback(async () => {\r\n      if (this.state.streamEnd) {\r\n        // TODO(NODE-3485): Replace with MongoGridFSStreamClosed\r\n        throw new MongoAPIError('Cannot abort a stream that has already completed');\r\n      }\r\n\r\n      if (this.state.aborted) {\r\n        // TODO(NODE-3485): Replace with MongoGridFSStreamClosed\r\n        throw new MongoAPIError('Cannot call abort() on a stream twice');\r\n      }\r\n\r\n      this.state.aborted = true;\r\n      await this.chunks.deleteMany({ files_id: this.id });\r\n    }, callback);\r\n  }\r\n\r\n  /**\r\n   * Tells the stream that no more data will be coming in. The stream will\r\n   * persist the remaining data to MongoDB, write the files document, and\r\n   * then emit a 'finish' event.\r\n   *\r\n   * @param chunk - Buffer to write\r\n   * @param encoding - Optional encoding for the buffer\r\n   * @param callback - Function to call when all files and chunks have been persisted to MongoDB\r\n   */\r\n  override end(): this;\r\n  override end(chunk: Buffer): this;\r\n  override end(callback: Callback<GridFSFile | void>): this;\r\n  override end(chunk: Buffer, callback: Callback<GridFSFile | void>): this;\r\n  override end(chunk: Buffer, encoding: BufferEncoding): this;\r\n  override end(\r\n    chunk: Buffer,\r\n    encoding: BufferEncoding | undefined,\r\n    callback: Callback<GridFSFile | void>\r\n  ): this;\r\n  override end(\r\n    chunkOrCallback?: Buffer | Callback<GridFSFile | void>,\r\n    encodingOrCallback?: BufferEncoding | Callback<GridFSFile | void>,\r\n    callback?: Callback<GridFSFile | void>\r\n  ): this {\r\n    const chunk = typeof chunkOrCallback === 'function' ? undefined : chunkOrCallback;\r\n    const encoding = typeof encodingOrCallback === 'function' ? undefined : encodingOrCallback;\r\n    callback =\r\n      typeof chunkOrCallback === 'function'\r\n        ? chunkOrCallback\r\n        : typeof encodingOrCallback === 'function'\r\n        ? encodingOrCallback\r\n        : callback;\r\n\r\n    if (this.state.streamEnd || checkAborted(this, callback)) return this;\r\n\r\n    this.state.streamEnd = true;\r\n\r\n    if (callback) {\r\n      this.once(GridFSBucketWriteStream.FINISH, (result: GridFSFile) => {\r\n        if (callback) callback(undefined, result);\r\n      });\r\n    }\r\n\r\n    if (!chunk) {\r\n      waitForIndexes(this, () => !!writeRemnant(this));\r\n      return this;\r\n    }\r\n\r\n    this.write(chunk, encoding, () => {\r\n      writeRemnant(this);\r\n    });\r\n\r\n    return this;\r\n  }\r\n}\r\n\r\nfunction __handleError(\r\n  stream: GridFSBucketWriteStream,\r\n  error: AnyError,\r\n  callback?: Callback\r\n): void {\r\n  if (stream.state.errored) {\r\n    return;\r\n  }\r\n  stream.state.errored = true;\r\n  if (callback) {\r\n    return callback(error);\r\n  }\r\n  stream.emit(GridFSBucketWriteStream.ERROR, error);\r\n}\r\n\r\nfunction createChunkDoc(filesId: ObjectId, n: number, data: Buffer): GridFSChunk {\r\n  return {\r\n    _id: new ObjectId(),\r\n    files_id: filesId,\r\n    n,\r\n    data\r\n  };\r\n}\r\n\r\nfunction checkChunksIndex(stream: GridFSBucketWriteStream, callback: Callback): void {\r\n  stream.chunks.listIndexes().toArray((error?: AnyError, indexes?: Document[]) => {\r\n    let index: { files_id: number; n: number };\r\n    if (error) {\r\n      // Collection doesn't exist so create index\r\n      if (error instanceof MongoError && error.code === MONGODB_ERROR_CODES.NamespaceNotFound) {\r\n        index = { files_id: 1, n: 1 };\r\n        stream.chunks.createIndex(index, { background: false, unique: true }, error => {\r\n          if (error) {\r\n            return callback(error);\r\n          }\r\n\r\n          callback();\r\n        });\r\n        return;\r\n      }\r\n      return callback(error);\r\n    }\r\n\r\n    let hasChunksIndex = false;\r\n    if (indexes) {\r\n      indexes.forEach((index: Document) => {\r\n        if (index.key) {\r\n          const keys = Object.keys(index.key);\r\n          if (keys.length === 2 && index.key.files_id === 1 && index.key.n === 1) {\r\n            hasChunksIndex = true;\r\n          }\r\n        }\r\n      });\r\n    }\r\n\r\n    if (hasChunksIndex) {\r\n      callback();\r\n    } else {\r\n      index = { files_id: 1, n: 1 };\r\n      const writeConcernOptions = getWriteOptions(stream);\r\n\r\n      stream.chunks.createIndex(\r\n        index,\r\n        {\r\n          ...writeConcernOptions,\r\n          background: true,\r\n          unique: true\r\n        },\r\n        callback\r\n      );\r\n    }\r\n  });\r\n}\r\n\r\nfunction checkDone(stream: GridFSBucketWriteStream, callback?: Callback): boolean {\r\n  if (stream.done) return true;\r\n  if (stream.state.streamEnd && stream.state.outstandingRequests === 0 && !stream.state.errored) {\r\n    // Set done so we do not trigger duplicate createFilesDoc\r\n    stream.done = true;\r\n    // Create a new files doc\r\n    const filesDoc = createFilesDoc(\r\n      stream.id,\r\n      stream.length,\r\n      stream.chunkSizeBytes,\r\n      stream.filename,\r\n      stream.options.contentType,\r\n      stream.options.aliases,\r\n      stream.options.metadata\r\n    );\r\n\r\n    if (checkAborted(stream, callback)) {\r\n      return false;\r\n    }\r\n\r\n    stream.files.insertOne(filesDoc, getWriteOptions(stream), (error?: AnyError) => {\r\n      if (error) {\r\n        return __handleError(stream, error, callback);\r\n      }\r\n      stream.emit(GridFSBucketWriteStream.FINISH, filesDoc);\r\n      stream.emit(GridFSBucketWriteStream.CLOSE);\r\n    });\r\n\r\n    return true;\r\n  }\r\n\r\n  return false;\r\n}\r\n\r\nfunction checkIndexes(stream: GridFSBucketWriteStream, callback: Callback): void {\r\n  stream.files.findOne({}, { projection: { _id: 1 } }, (error, doc) => {\r\n    if (error) {\r\n      return callback(error);\r\n    }\r\n    if (doc) {\r\n      return callback();\r\n    }\r\n\r\n    stream.files.listIndexes().toArray((error?: AnyError, indexes?: Document) => {\r\n      let index: { filename: number; uploadDate: number };\r\n      if (error) {\r\n        // Collection doesn't exist so create index\r\n        if (error instanceof MongoError && error.code === MONGODB_ERROR_CODES.NamespaceNotFound) {\r\n          index = { filename: 1, uploadDate: 1 };\r\n          stream.files.createIndex(index, { background: false }, (error?: AnyError) => {\r\n            if (error) {\r\n              return callback(error);\r\n            }\r\n\r\n            checkChunksIndex(stream, callback);\r\n          });\r\n          return;\r\n        }\r\n        return callback(error);\r\n      }\r\n\r\n      let hasFileIndex = false;\r\n      if (indexes) {\r\n        indexes.forEach((index: Document) => {\r\n          const keys = Object.keys(index.key);\r\n          if (keys.length === 2 && index.key.filename === 1 && index.key.uploadDate === 1) {\r\n            hasFileIndex = true;\r\n          }\r\n        });\r\n      }\r\n\r\n      if (hasFileIndex) {\r\n        checkChunksIndex(stream, callback);\r\n      } else {\r\n        index = { filename: 1, uploadDate: 1 };\r\n\r\n        const writeConcernOptions = getWriteOptions(stream);\r\n\r\n        stream.files.createIndex(\r\n          index,\r\n          {\r\n            ...writeConcernOptions,\r\n            background: false\r\n          },\r\n          (error?: AnyError) => {\r\n            if (error) {\r\n              return callback(error);\r\n            }\r\n\r\n            checkChunksIndex(stream, callback);\r\n          }\r\n        );\r\n      }\r\n    });\r\n  });\r\n}\r\n\r\nfunction createFilesDoc(\r\n  _id: ObjectId,\r\n  length: number,\r\n  chunkSize: number,\r\n  filename: string,\r\n  contentType?: string,\r\n  aliases?: string[],\r\n  metadata?: Document\r\n): GridFSFile {\r\n  const ret: GridFSFile = {\r\n    _id,\r\n    length,\r\n    chunkSize,\r\n    uploadDate: new Date(),\r\n    filename\r\n  };\r\n\r\n  if (contentType) {\r\n    ret.contentType = contentType;\r\n  }\r\n\r\n  if (aliases) {\r\n    ret.aliases = aliases;\r\n  }\r\n\r\n  if (metadata) {\r\n    ret.metadata = metadata;\r\n  }\r\n\r\n  return ret;\r\n}\r\n\r\nfunction doWrite(\r\n  stream: GridFSBucketWriteStream,\r\n  chunk: Buffer | string,\r\n  encoding?: BufferEncoding,\r\n  callback?: Callback<void>\r\n): boolean {\r\n  if (checkAborted(stream, callback)) {\r\n    return false;\r\n  }\r\n\r\n  const inputBuf = Buffer.isBuffer(chunk) ? chunk : Buffer.from(chunk, encoding);\r\n\r\n  stream.length += inputBuf.length;\r\n\r\n  // Input is small enough to fit in our buffer\r\n  if (stream.pos + inputBuf.length < stream.chunkSizeBytes) {\r\n    inputBuf.copy(stream.bufToStore, stream.pos);\r\n    stream.pos += inputBuf.length;\r\n\r\n    callback && callback();\r\n\r\n    // Note that we reverse the typical semantics of write's return value\r\n    // to be compatible with node's `.pipe()` function.\r\n    // True means client can keep writing.\r\n    return true;\r\n  }\r\n\r\n  // Otherwise, buffer is too big for current chunk, so we need to flush\r\n  // to MongoDB.\r\n  let inputBufRemaining = inputBuf.length;\r\n  let spaceRemaining: number = stream.chunkSizeBytes - stream.pos;\r\n  let numToCopy = Math.min(spaceRemaining, inputBuf.length);\r\n  let outstandingRequests = 0;\r\n  while (inputBufRemaining > 0) {\r\n    const inputBufPos = inputBuf.length - inputBufRemaining;\r\n    inputBuf.copy(stream.bufToStore, stream.pos, inputBufPos, inputBufPos + numToCopy);\r\n    stream.pos += numToCopy;\r\n    spaceRemaining -= numToCopy;\r\n    let doc: GridFSChunk;\r\n    if (spaceRemaining === 0) {\r\n      doc = createChunkDoc(stream.id, stream.n, Buffer.from(stream.bufToStore));\r\n      ++stream.state.outstandingRequests;\r\n      ++outstandingRequests;\r\n\r\n      if (checkAborted(stream, callback)) {\r\n        return false;\r\n      }\r\n\r\n      stream.chunks.insertOne(doc, getWriteOptions(stream), (error?: AnyError) => {\r\n        if (error) {\r\n          return __handleError(stream, error);\r\n        }\r\n        --stream.state.outstandingRequests;\r\n        --outstandingRequests;\r\n\r\n        if (!outstandingRequests) {\r\n          stream.emit('drain', doc);\r\n          callback && callback();\r\n          checkDone(stream);\r\n        }\r\n      });\r\n\r\n      spaceRemaining = stream.chunkSizeBytes;\r\n      stream.pos = 0;\r\n      ++stream.n;\r\n    }\r\n    inputBufRemaining -= numToCopy;\r\n    numToCopy = Math.min(spaceRemaining, inputBufRemaining);\r\n  }\r\n\r\n  // Note that we reverse the typical semantics of write's return value\r\n  // to be compatible with node's `.pipe()` function.\r\n  // False means the client should wait for the 'drain' event.\r\n  return false;\r\n}\r\n\r\nfunction getWriteOptions(stream: GridFSBucketWriteStream): WriteConcernOptions {\r\n  const obj: WriteConcernOptions = {};\r\n  if (stream.writeConcern) {\r\n    obj.writeConcern = {\r\n      w: stream.writeConcern.w,\r\n      wtimeout: stream.writeConcern.wtimeout,\r\n      j: stream.writeConcern.j\r\n    };\r\n  }\r\n  return obj;\r\n}\r\n\r\nfunction waitForIndexes(\r\n  stream: GridFSBucketWriteStream,\r\n  callback: (res: boolean) => boolean\r\n): boolean {\r\n  if (stream.bucket.s.checkedIndexes) {\r\n    return callback(false);\r\n  }\r\n\r\n  stream.bucket.once('index', () => {\r\n    callback(true);\r\n  });\r\n\r\n  return true;\r\n}\r\n\r\nfunction writeRemnant(stream: GridFSBucketWriteStream, callback?: Callback): boolean {\r\n  // Buffer is empty, so don't bother to insert\r\n  if (stream.pos === 0) {\r\n    return checkDone(stream, callback);\r\n  }\r\n\r\n  ++stream.state.outstandingRequests;\r\n\r\n  // Create a new buffer to make sure the buffer isn't bigger than it needs\r\n  // to be.\r\n  const remnant = Buffer.alloc(stream.pos);\r\n  stream.bufToStore.copy(remnant, 0, 0, stream.pos);\r\n  const doc = createChunkDoc(stream.id, stream.n, remnant);\r\n\r\n  // If the stream was aborted, do not write remnant\r\n  if (checkAborted(stream, callback)) {\r\n    return false;\r\n  }\r\n\r\n  stream.chunks.insertOne(doc, getWriteOptions(stream), (error?: AnyError) => {\r\n    if (error) {\r\n      return __handleError(stream, error);\r\n    }\r\n    --stream.state.outstandingRequests;\r\n    checkDone(stream);\r\n  });\r\n  return true;\r\n}\r\n\r\nfunction checkAborted(stream: GridFSBucketWriteStream, callback?: Callback<void>): boolean {\r\n  if (stream.state.aborted) {\r\n    if (typeof callback === 'function') {\r\n      // TODO(NODE-3485): Replace with MongoGridFSStreamClosedError\r\n      callback(new MongoAPIError('Stream has been aborted'));\r\n    }\r\n    return true;\r\n  }\r\n  return false;\r\n}\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}