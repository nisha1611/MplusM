{"ast":null,"code":"/*!\r\n * Module dependencies.\r\n */\n\n'use strict';\n\nconst SchemaType = require('../schematype');\nconst symbols = require('./symbols');\nconst isObject = require('../helpers/isObject');\nconst utils = require('../utils');\n\n/**\r\n * Mixed SchemaType constructor.\r\n *\r\n * @param {String} path\r\n * @param {Object} options\r\n * @inherits SchemaType\r\n * @api public\r\n */\n\nfunction Mixed(path, options) {\n  if (options && options.default) {\n    const def = options.default;\n    if (Array.isArray(def) && def.length === 0) {\n      // make sure empty array defaults are handled\n      options.default = Array;\n    } else if (!options.shared && isObject(def) && Object.keys(def).length === 0) {\n      // prevent odd \"shared\" objects between documents\n      options.default = function () {\n        return {};\n      };\n    }\n  }\n  SchemaType.call(this, path, options, 'Mixed');\n  this[symbols.schemaMixedSymbol] = true;\n}\n\n/**\r\n * This schema type's name, to defend against minifiers that mangle\r\n * function names.\r\n *\r\n * @api public\r\n */\nMixed.schemaName = 'Mixed';\nMixed.defaultOptions = {};\n\n/*!\r\n * Inherits from SchemaType.\r\n */\nMixed.prototype = Object.create(SchemaType.prototype);\nMixed.prototype.constructor = Mixed;\n\n/**\r\n * Attaches a getter for all Mixed paths.\r\n *\r\n * #### Example:\r\n *\r\n *     // Hide the 'hidden' path\r\n *     mongoose.Schema.Mixed.get(v => Object.assign({}, v, { hidden: null }));\r\n *\r\n *     const Model = mongoose.model('Test', new Schema({ test: {} }));\r\n *     new Model({ test: { hidden: 'Secret!' } }).test.hidden; // null\r\n *\r\n * @param {Function} getter\r\n * @return {this}\r\n * @function get\r\n * @static\r\n * @api public\r\n */\n\nMixed.get = SchemaType.get;\n\n/**\r\n * Sets a default option for all Mixed instances.\r\n *\r\n * #### Example:\r\n *\r\n *     // Make all mixed instances have `required` of true by default.\r\n *     mongoose.Schema.Mixed.set('required', true);\r\n *\r\n *     const User = mongoose.model('User', new Schema({ test: mongoose.Mixed }));\r\n *     new User({ }).validateSync().errors.test.message; // Path `test` is required.\r\n *\r\n * @param {String} option The option you'd like to set the value for\r\n * @param {Any} value value for option\r\n * @return {undefined}\r\n * @function set\r\n * @static\r\n * @api public\r\n */\n\nMixed.set = SchemaType.set;\n\n/**\r\n * Casts `val` for Mixed.\r\n *\r\n * _this is a no-op_\r\n *\r\n * @param {Object} value to cast\r\n * @api private\r\n */\n\nMixed.prototype.cast = function (val) {\n  if (val instanceof Error) {\n    return utils.errorToPOJO(val);\n  }\n  return val;\n};\n\n/**\r\n * Casts contents for queries.\r\n *\r\n * @param {String} $cond\r\n * @param {any} [val]\r\n * @api private\r\n */\n\nMixed.prototype.castForQuery = function ($cond, val) {\n  if (arguments.length === 2) {\n    return val;\n  }\n  return $cond;\n};\n\n/*!\r\n * Module exports.\r\n */\n\nmodule.exports = Mixed;","map":{"version":3,"names":["SchemaType","require","symbols","isObject","utils","Mixed","path","options","default","def","Array","isArray","length","shared","Object","keys","call","schemaMixedSymbol","schemaName","defaultOptions","prototype","create","constructor","get","set","cast","val","Error","errorToPOJO","castForQuery","$cond","arguments","module","exports"],"sources":["C:/Users/91930/Desktop/Github projects/Pharmacy Demo/back-end/node_modules/mongoose/lib/schema/mixed.js"],"sourcesContent":["/*!\r\n * Module dependencies.\r\n */\r\n\r\n'use strict';\r\n\r\nconst SchemaType = require('../schematype');\r\nconst symbols = require('./symbols');\r\nconst isObject = require('../helpers/isObject');\r\nconst utils = require('../utils');\r\n\r\n/**\r\n * Mixed SchemaType constructor.\r\n *\r\n * @param {String} path\r\n * @param {Object} options\r\n * @inherits SchemaType\r\n * @api public\r\n */\r\n\r\nfunction Mixed(path, options) {\r\n  if (options && options.default) {\r\n    const def = options.default;\r\n    if (Array.isArray(def) && def.length === 0) {\r\n      // make sure empty array defaults are handled\r\n      options.default = Array;\r\n    } else if (!options.shared && isObject(def) && Object.keys(def).length === 0) {\r\n      // prevent odd \"shared\" objects between documents\r\n      options.default = function() {\r\n        return {};\r\n      };\r\n    }\r\n  }\r\n\r\n  SchemaType.call(this, path, options, 'Mixed');\r\n\r\n  this[symbols.schemaMixedSymbol] = true;\r\n}\r\n\r\n/**\r\n * This schema type's name, to defend against minifiers that mangle\r\n * function names.\r\n *\r\n * @api public\r\n */\r\nMixed.schemaName = 'Mixed';\r\n\r\nMixed.defaultOptions = {};\r\n\r\n/*!\r\n * Inherits from SchemaType.\r\n */\r\nMixed.prototype = Object.create(SchemaType.prototype);\r\nMixed.prototype.constructor = Mixed;\r\n\r\n/**\r\n * Attaches a getter for all Mixed paths.\r\n *\r\n * #### Example:\r\n *\r\n *     // Hide the 'hidden' path\r\n *     mongoose.Schema.Mixed.get(v => Object.assign({}, v, { hidden: null }));\r\n *\r\n *     const Model = mongoose.model('Test', new Schema({ test: {} }));\r\n *     new Model({ test: { hidden: 'Secret!' } }).test.hidden; // null\r\n *\r\n * @param {Function} getter\r\n * @return {this}\r\n * @function get\r\n * @static\r\n * @api public\r\n */\r\n\r\nMixed.get = SchemaType.get;\r\n\r\n/**\r\n * Sets a default option for all Mixed instances.\r\n *\r\n * #### Example:\r\n *\r\n *     // Make all mixed instances have `required` of true by default.\r\n *     mongoose.Schema.Mixed.set('required', true);\r\n *\r\n *     const User = mongoose.model('User', new Schema({ test: mongoose.Mixed }));\r\n *     new User({ }).validateSync().errors.test.message; // Path `test` is required.\r\n *\r\n * @param {String} option The option you'd like to set the value for\r\n * @param {Any} value value for option\r\n * @return {undefined}\r\n * @function set\r\n * @static\r\n * @api public\r\n */\r\n\r\nMixed.set = SchemaType.set;\r\n\r\n/**\r\n * Casts `val` for Mixed.\r\n *\r\n * _this is a no-op_\r\n *\r\n * @param {Object} value to cast\r\n * @api private\r\n */\r\n\r\nMixed.prototype.cast = function(val) {\r\n  if (val instanceof Error) {\r\n    return utils.errorToPOJO(val);\r\n  }\r\n  return val;\r\n};\r\n\r\n/**\r\n * Casts contents for queries.\r\n *\r\n * @param {String} $cond\r\n * @param {any} [val]\r\n * @api private\r\n */\r\n\r\nMixed.prototype.castForQuery = function($cond, val) {\r\n  if (arguments.length === 2) {\r\n    return val;\r\n  }\r\n  return $cond;\r\n};\r\n\r\n/*!\r\n * Module exports.\r\n */\r\n\r\nmodule.exports = Mixed;\r\n"],"mappings":"AAAA;AACA;AACA;;AAEA,YAAY;;AAEZ,MAAMA,UAAU,GAAGC,OAAO,CAAC,eAAe,CAAC;AAC3C,MAAMC,OAAO,GAAGD,OAAO,CAAC,WAAW,CAAC;AACpC,MAAME,QAAQ,GAAGF,OAAO,CAAC,qBAAqB,CAAC;AAC/C,MAAMG,KAAK,GAAGH,OAAO,CAAC,UAAU,CAAC;;AAEjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASI,KAAK,CAACC,IAAI,EAAEC,OAAO,EAAE;EAC5B,IAAIA,OAAO,IAAIA,OAAO,CAACC,OAAO,EAAE;IAC9B,MAAMC,GAAG,GAAGF,OAAO,CAACC,OAAO;IAC3B,IAAIE,KAAK,CAACC,OAAO,CAACF,GAAG,CAAC,IAAIA,GAAG,CAACG,MAAM,KAAK,CAAC,EAAE;MAC1C;MACAL,OAAO,CAACC,OAAO,GAAGE,KAAK;IACzB,CAAC,MAAM,IAAI,CAACH,OAAO,CAACM,MAAM,IAAIV,QAAQ,CAACM,GAAG,CAAC,IAAIK,MAAM,CAACC,IAAI,CAACN,GAAG,CAAC,CAACG,MAAM,KAAK,CAAC,EAAE;MAC5E;MACAL,OAAO,CAACC,OAAO,GAAG,YAAW;QAC3B,OAAO,CAAC,CAAC;MACX,CAAC;IACH;EACF;EAEAR,UAAU,CAACgB,IAAI,CAAC,IAAI,EAAEV,IAAI,EAAEC,OAAO,EAAE,OAAO,CAAC;EAE7C,IAAI,CAACL,OAAO,CAACe,iBAAiB,CAAC,GAAG,IAAI;AACxC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACAZ,KAAK,CAACa,UAAU,GAAG,OAAO;AAE1Bb,KAAK,CAACc,cAAc,GAAG,CAAC,CAAC;;AAEzB;AACA;AACA;AACAd,KAAK,CAACe,SAAS,GAAGN,MAAM,CAACO,MAAM,CAACrB,UAAU,CAACoB,SAAS,CAAC;AACrDf,KAAK,CAACe,SAAS,CAACE,WAAW,GAAGjB,KAAK;;AAEnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAA,KAAK,CAACkB,GAAG,GAAGvB,UAAU,CAACuB,GAAG;;AAE1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAlB,KAAK,CAACmB,GAAG,GAAGxB,UAAU,CAACwB,GAAG;;AAE1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAnB,KAAK,CAACe,SAAS,CAACK,IAAI,GAAG,UAASC,GAAG,EAAE;EACnC,IAAIA,GAAG,YAAYC,KAAK,EAAE;IACxB,OAAOvB,KAAK,CAACwB,WAAW,CAACF,GAAG,CAAC;EAC/B;EACA,OAAOA,GAAG;AACZ,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AAEArB,KAAK,CAACe,SAAS,CAACS,YAAY,GAAG,UAASC,KAAK,EAAEJ,GAAG,EAAE;EAClD,IAAIK,SAAS,CAACnB,MAAM,KAAK,CAAC,EAAE;IAC1B,OAAOc,GAAG;EACZ;EACA,OAAOI,KAAK;AACd,CAAC;;AAED;AACA;AACA;;AAEAE,MAAM,CAACC,OAAO,GAAG5B,KAAK"},"metadata":{},"sourceType":"script","externalDependencies":[]}