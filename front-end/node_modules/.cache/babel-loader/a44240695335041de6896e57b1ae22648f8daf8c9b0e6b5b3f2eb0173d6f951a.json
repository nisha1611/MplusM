{"ast":null,"code":"'use strict';\n\nconst MongooseError = require('../../error/mongooseError');\n\n/**\r\n * A query thunk is the function responsible for sending the query to MongoDB,\r\n * like `Query#_findOne()` or `Query#_execUpdate()`. The `Query#exec()` function\r\n * calls a thunk. The term \"thunk\" here is the traditional Node.js definition:\r\n * a function that takes exactly 1 parameter, a callback.\r\n *\r\n * This function defines common behavior for all query thunks.\r\n * @param {Function} fn\r\n * @api private\r\n */\n\nmodule.exports = function wrapThunk(fn) {\n  return function _wrappedThunk(cb) {\n    if (this._executionStack != null) {\n      let str = this.toString();\n      if (str.length > 60) {\n        str = str.slice(0, 60) + '...';\n      }\n      const err = new MongooseError('Query was already executed: ' + str);\n      err.originalStack = this._executionStack.stack;\n      return cb(err);\n    }\n    this._executionStack = new Error();\n    fn.call(this, cb);\n  };\n};","map":{"version":3,"names":["MongooseError","require","module","exports","wrapThunk","fn","_wrappedThunk","cb","_executionStack","str","toString","length","slice","err","originalStack","stack","Error","call"],"sources":["C:/Users/91930/Desktop/Github projects/Pharmacy Demo/back-end/node_modules/mongoose/lib/helpers/query/wrapThunk.js"],"sourcesContent":["'use strict';\r\n\r\nconst MongooseError = require('../../error/mongooseError');\r\n\r\n/**\r\n * A query thunk is the function responsible for sending the query to MongoDB,\r\n * like `Query#_findOne()` or `Query#_execUpdate()`. The `Query#exec()` function\r\n * calls a thunk. The term \"thunk\" here is the traditional Node.js definition:\r\n * a function that takes exactly 1 parameter, a callback.\r\n *\r\n * This function defines common behavior for all query thunks.\r\n * @param {Function} fn\r\n * @api private\r\n */\r\n\r\nmodule.exports = function wrapThunk(fn) {\r\n  return function _wrappedThunk(cb) {\r\n    if (this._executionStack != null) {\r\n      let str = this.toString();\r\n      if (str.length > 60) {\r\n        str = str.slice(0, 60) + '...';\r\n      }\r\n      const err = new MongooseError('Query was already executed: ' + str);\r\n      err.originalStack = this._executionStack.stack;\r\n      return cb(err);\r\n    }\r\n    this._executionStack = new Error();\r\n\r\n    fn.call(this, cb);\r\n  };\r\n};\r\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,aAAa,GAAGC,OAAO,CAAC,2BAA2B,CAAC;;AAE1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAC,MAAM,CAACC,OAAO,GAAG,SAASC,SAAS,CAACC,EAAE,EAAE;EACtC,OAAO,SAASC,aAAa,CAACC,EAAE,EAAE;IAChC,IAAI,IAAI,CAACC,eAAe,IAAI,IAAI,EAAE;MAChC,IAAIC,GAAG,GAAG,IAAI,CAACC,QAAQ,EAAE;MACzB,IAAID,GAAG,CAACE,MAAM,GAAG,EAAE,EAAE;QACnBF,GAAG,GAAGA,GAAG,CAACG,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,KAAK;MAChC;MACA,MAAMC,GAAG,GAAG,IAAIb,aAAa,CAAC,8BAA8B,GAAGS,GAAG,CAAC;MACnEI,GAAG,CAACC,aAAa,GAAG,IAAI,CAACN,eAAe,CAACO,KAAK;MAC9C,OAAOR,EAAE,CAACM,GAAG,CAAC;IAChB;IACA,IAAI,CAACL,eAAe,GAAG,IAAIQ,KAAK,EAAE;IAElCX,EAAE,CAACY,IAAI,CAAC,IAAI,EAAEV,EAAE,CAAC;EACnB,CAAC;AACH,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}