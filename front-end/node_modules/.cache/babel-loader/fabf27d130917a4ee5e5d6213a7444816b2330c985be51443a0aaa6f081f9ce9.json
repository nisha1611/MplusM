{"ast":null,"code":"import Utils from './utils.js';\nimport { PLATFORMS_MAP } from './constants.js';\n\n/*\r\n * Tablets go first since usually they have more specific\r\n * signs to detect.\r\n */\n\nexport default [/* Googlebot */\n{\n  test: [/googlebot/i],\n  describe() {\n    return {\n      type: 'bot',\n      vendor: 'Google'\n    };\n  }\n}, /* Huawei */\n{\n  test: [/huawei/i],\n  describe(ua) {\n    const model = Utils.getFirstMatch(/(can-l01)/i, ua) && 'Nova';\n    const platform = {\n      type: PLATFORMS_MAP.mobile,\n      vendor: 'Huawei'\n    };\n    if (model) {\n      platform.model = model;\n    }\n    return platform;\n  }\n}, /* Nexus Tablet */\n{\n  test: [/nexus\\s*(?:7|8|9|10).*/i],\n  describe() {\n    return {\n      type: PLATFORMS_MAP.tablet,\n      vendor: 'Nexus'\n    };\n  }\n}, /* iPad */\n{\n  test: [/ipad/i],\n  describe() {\n    return {\n      type: PLATFORMS_MAP.tablet,\n      vendor: 'Apple',\n      model: 'iPad'\n    };\n  }\n}, /* Firefox on iPad */\n{\n  test: [/Macintosh(.*?) FxiOS(.*?)\\//],\n  describe() {\n    return {\n      type: PLATFORMS_MAP.tablet,\n      vendor: 'Apple',\n      model: 'iPad'\n    };\n  }\n}, /* Amazon Kindle Fire */\n{\n  test: [/kftt build/i],\n  describe() {\n    return {\n      type: PLATFORMS_MAP.tablet,\n      vendor: 'Amazon',\n      model: 'Kindle Fire HD 7'\n    };\n  }\n}, /* Another Amazon Tablet with Silk */\n{\n  test: [/silk/i],\n  describe() {\n    return {\n      type: PLATFORMS_MAP.tablet,\n      vendor: 'Amazon'\n    };\n  }\n}, /* Tablet */\n{\n  test: [/tablet(?! pc)/i],\n  describe() {\n    return {\n      type: PLATFORMS_MAP.tablet\n    };\n  }\n}, /* iPod/iPhone */\n{\n  test(parser) {\n    const iDevice = parser.test(/ipod|iphone/i);\n    const likeIDevice = parser.test(/like (ipod|iphone)/i);\n    return iDevice && !likeIDevice;\n  },\n  describe(ua) {\n    const model = Utils.getFirstMatch(/(ipod|iphone)/i, ua);\n    return {\n      type: PLATFORMS_MAP.mobile,\n      vendor: 'Apple',\n      model\n    };\n  }\n}, /* Nexus Mobile */\n{\n  test: [/nexus\\s*[0-6].*/i, /galaxy nexus/i],\n  describe() {\n    return {\n      type: PLATFORMS_MAP.mobile,\n      vendor: 'Nexus'\n    };\n  }\n}, /* Mobile */\n{\n  test: [/[^-]mobi/i],\n  describe() {\n    return {\n      type: PLATFORMS_MAP.mobile\n    };\n  }\n}, /* BlackBerry */\n{\n  test(parser) {\n    return parser.getBrowserName(true) === 'blackberry';\n  },\n  describe() {\n    return {\n      type: PLATFORMS_MAP.mobile,\n      vendor: 'BlackBerry'\n    };\n  }\n}, /* Bada */\n{\n  test(parser) {\n    return parser.getBrowserName(true) === 'bada';\n  },\n  describe() {\n    return {\n      type: PLATFORMS_MAP.mobile\n    };\n  }\n}, /* Windows Phone */\n{\n  test(parser) {\n    return parser.getBrowserName() === 'windows phone';\n  },\n  describe() {\n    return {\n      type: PLATFORMS_MAP.mobile,\n      vendor: 'Microsoft'\n    };\n  }\n}, /* Android Tablet */\n{\n  test(parser) {\n    const osMajorVersion = Number(String(parser.getOSVersion()).split('.')[0]);\n    return parser.getOSName(true) === 'android' && osMajorVersion >= 3;\n  },\n  describe() {\n    return {\n      type: PLATFORMS_MAP.tablet\n    };\n  }\n}, /* Android Mobile */\n{\n  test(parser) {\n    return parser.getOSName(true) === 'android';\n  },\n  describe() {\n    return {\n      type: PLATFORMS_MAP.mobile\n    };\n  }\n}, /* desktop */\n{\n  test(parser) {\n    return parser.getOSName(true) === 'macos';\n  },\n  describe() {\n    return {\n      type: PLATFORMS_MAP.desktop,\n      vendor: 'Apple'\n    };\n  }\n}, /* Windows */\n{\n  test(parser) {\n    return parser.getOSName(true) === 'windows';\n  },\n  describe() {\n    return {\n      type: PLATFORMS_MAP.desktop\n    };\n  }\n}, /* Linux */\n{\n  test(parser) {\n    return parser.getOSName(true) === 'linux';\n  },\n  describe() {\n    return {\n      type: PLATFORMS_MAP.desktop\n    };\n  }\n}, /* PlayStation 4 */\n{\n  test(parser) {\n    return parser.getOSName(true) === 'playstation 4';\n  },\n  describe() {\n    return {\n      type: PLATFORMS_MAP.tv\n    };\n  }\n}, /* Roku */\n{\n  test(parser) {\n    return parser.getOSName(true) === 'roku';\n  },\n  describe() {\n    return {\n      type: PLATFORMS_MAP.tv\n    };\n  }\n}];","map":{"version":3,"names":["Utils","PLATFORMS_MAP","test","describe","type","vendor","ua","model","getFirstMatch","platform","mobile","tablet","parser","iDevice","likeIDevice","getBrowserName","osMajorVersion","Number","String","getOSVersion","split","getOSName","desktop","tv"],"sources":["C:/Users/91930/Desktop/Github projects/Pharmacy Demo/back-end/node_modules/bowser/src/parser-platforms.js"],"sourcesContent":["import Utils from './utils.js';\r\nimport { PLATFORMS_MAP } from './constants.js';\r\n\r\n/*\r\n * Tablets go first since usually they have more specific\r\n * signs to detect.\r\n */\r\n\r\nexport default [\r\n  /* Googlebot */\r\n  {\r\n    test: [/googlebot/i],\r\n    describe() {\r\n      return {\r\n        type: 'bot',\r\n        vendor: 'Google',\r\n      };\r\n    },\r\n  },\r\n\r\n  /* Huawei */\r\n  {\r\n    test: [/huawei/i],\r\n    describe(ua) {\r\n      const model = Utils.getFirstMatch(/(can-l01)/i, ua) && 'Nova';\r\n      const platform = {\r\n        type: PLATFORMS_MAP.mobile,\r\n        vendor: 'Huawei',\r\n      };\r\n      if (model) {\r\n        platform.model = model;\r\n      }\r\n      return platform;\r\n    },\r\n  },\r\n\r\n  /* Nexus Tablet */\r\n  {\r\n    test: [/nexus\\s*(?:7|8|9|10).*/i],\r\n    describe() {\r\n      return {\r\n        type: PLATFORMS_MAP.tablet,\r\n        vendor: 'Nexus',\r\n      };\r\n    },\r\n  },\r\n\r\n  /* iPad */\r\n  {\r\n    test: [/ipad/i],\r\n    describe() {\r\n      return {\r\n        type: PLATFORMS_MAP.tablet,\r\n        vendor: 'Apple',\r\n        model: 'iPad',\r\n      };\r\n    },\r\n  },\r\n\r\n  /* Firefox on iPad */\r\n  {\r\n    test: [/Macintosh(.*?) FxiOS(.*?)\\//],\r\n    describe() {\r\n      return {\r\n        type: PLATFORMS_MAP.tablet,\r\n        vendor: 'Apple',\r\n        model: 'iPad',\r\n      };\r\n    },\r\n  },\r\n\r\n  /* Amazon Kindle Fire */\r\n  {\r\n    test: [/kftt build/i],\r\n    describe() {\r\n      return {\r\n        type: PLATFORMS_MAP.tablet,\r\n        vendor: 'Amazon',\r\n        model: 'Kindle Fire HD 7',\r\n      };\r\n    },\r\n  },\r\n\r\n  /* Another Amazon Tablet with Silk */\r\n  {\r\n    test: [/silk/i],\r\n    describe() {\r\n      return {\r\n        type: PLATFORMS_MAP.tablet,\r\n        vendor: 'Amazon',\r\n      };\r\n    },\r\n  },\r\n\r\n  /* Tablet */\r\n  {\r\n    test: [/tablet(?! pc)/i],\r\n    describe() {\r\n      return {\r\n        type: PLATFORMS_MAP.tablet,\r\n      };\r\n    },\r\n  },\r\n\r\n  /* iPod/iPhone */\r\n  {\r\n    test(parser) {\r\n      const iDevice = parser.test(/ipod|iphone/i);\r\n      const likeIDevice = parser.test(/like (ipod|iphone)/i);\r\n      return iDevice && !likeIDevice;\r\n    },\r\n    describe(ua) {\r\n      const model = Utils.getFirstMatch(/(ipod|iphone)/i, ua);\r\n      return {\r\n        type: PLATFORMS_MAP.mobile,\r\n        vendor: 'Apple',\r\n        model,\r\n      };\r\n    },\r\n  },\r\n\r\n  /* Nexus Mobile */\r\n  {\r\n    test: [/nexus\\s*[0-6].*/i, /galaxy nexus/i],\r\n    describe() {\r\n      return {\r\n        type: PLATFORMS_MAP.mobile,\r\n        vendor: 'Nexus',\r\n      };\r\n    },\r\n  },\r\n\r\n  /* Mobile */\r\n  {\r\n    test: [/[^-]mobi/i],\r\n    describe() {\r\n      return {\r\n        type: PLATFORMS_MAP.mobile,\r\n      };\r\n    },\r\n  },\r\n\r\n  /* BlackBerry */\r\n  {\r\n    test(parser) {\r\n      return parser.getBrowserName(true) === 'blackberry';\r\n    },\r\n    describe() {\r\n      return {\r\n        type: PLATFORMS_MAP.mobile,\r\n        vendor: 'BlackBerry',\r\n      };\r\n    },\r\n  },\r\n\r\n  /* Bada */\r\n  {\r\n    test(parser) {\r\n      return parser.getBrowserName(true) === 'bada';\r\n    },\r\n    describe() {\r\n      return {\r\n        type: PLATFORMS_MAP.mobile,\r\n      };\r\n    },\r\n  },\r\n\r\n  /* Windows Phone */\r\n  {\r\n    test(parser) {\r\n      return parser.getBrowserName() === 'windows phone';\r\n    },\r\n    describe() {\r\n      return {\r\n        type: PLATFORMS_MAP.mobile,\r\n        vendor: 'Microsoft',\r\n      };\r\n    },\r\n  },\r\n\r\n  /* Android Tablet */\r\n  {\r\n    test(parser) {\r\n      const osMajorVersion = Number(String(parser.getOSVersion()).split('.')[0]);\r\n      return parser.getOSName(true) === 'android' && (osMajorVersion >= 3);\r\n    },\r\n    describe() {\r\n      return {\r\n        type: PLATFORMS_MAP.tablet,\r\n      };\r\n    },\r\n  },\r\n\r\n  /* Android Mobile */\r\n  {\r\n    test(parser) {\r\n      return parser.getOSName(true) === 'android';\r\n    },\r\n    describe() {\r\n      return {\r\n        type: PLATFORMS_MAP.mobile,\r\n      };\r\n    },\r\n  },\r\n\r\n  /* desktop */\r\n  {\r\n    test(parser) {\r\n      return parser.getOSName(true) === 'macos';\r\n    },\r\n    describe() {\r\n      return {\r\n        type: PLATFORMS_MAP.desktop,\r\n        vendor: 'Apple',\r\n      };\r\n    },\r\n  },\r\n\r\n  /* Windows */\r\n  {\r\n    test(parser) {\r\n      return parser.getOSName(true) === 'windows';\r\n    },\r\n    describe() {\r\n      return {\r\n        type: PLATFORMS_MAP.desktop,\r\n      };\r\n    },\r\n  },\r\n\r\n  /* Linux */\r\n  {\r\n    test(parser) {\r\n      return parser.getOSName(true) === 'linux';\r\n    },\r\n    describe() {\r\n      return {\r\n        type: PLATFORMS_MAP.desktop,\r\n      };\r\n    },\r\n  },\r\n\r\n  /* PlayStation 4 */\r\n  {\r\n    test(parser) {\r\n      return parser.getOSName(true) === 'playstation 4';\r\n    },\r\n    describe() {\r\n      return {\r\n        type: PLATFORMS_MAP.tv,\r\n      };\r\n    },\r\n  },\r\n\r\n  /* Roku */\r\n  {\r\n    test(parser) {\r\n      return parser.getOSName(true) === 'roku';\r\n    },\r\n    describe() {\r\n      return {\r\n        type: PLATFORMS_MAP.tv,\r\n      };\r\n    },\r\n  },\r\n];\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}