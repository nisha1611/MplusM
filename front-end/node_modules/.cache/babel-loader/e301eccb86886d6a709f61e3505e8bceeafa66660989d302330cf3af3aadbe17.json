{"ast":null,"code":"'use strict';\n\nconst arrayAtomicsSymbol = require('../helpers/symbols').arrayAtomicsSymbol;\nconst sessionNewDocuments = require('../helpers/symbols').sessionNewDocuments;\nconst utils = require('../utils');\nmodule.exports = function trackTransaction(schema) {\n  schema.pre('save', function trackTransactionPreSave() {\n    const session = this.$session();\n    if (session == null) {\n      return;\n    }\n    if (session.transaction == null || session[sessionNewDocuments] == null) {\n      return;\n    }\n    if (!session[sessionNewDocuments].has(this)) {\n      const initialState = {};\n      if (this.isNew) {\n        initialState.isNew = true;\n      }\n      if (this.$__schema.options.versionKey) {\n        initialState.versionKey = this.get(this.$__schema.options.versionKey);\n      }\n      initialState.modifiedPaths = new Set(Object.keys(this.$__.activePaths.getStatePaths('modify')));\n      initialState.atomics = _getAtomics(this);\n      session[sessionNewDocuments].set(this, initialState);\n    } else {\n      const state = session[sessionNewDocuments].get(this);\n      for (const path of Object.keys(this.$__.activePaths.getStatePaths('modify'))) {\n        state.modifiedPaths.add(path);\n      }\n      state.atomics = _getAtomics(this, state.atomics);\n    }\n  });\n};\nfunction _getAtomics(doc, previous) {\n  const pathToAtomics = new Map();\n  previous = previous || new Map();\n  const pathsToCheck = Object.keys(doc.$__.activePaths.init).concat(Object.keys(doc.$__.activePaths.modify));\n  for (const path of pathsToCheck) {\n    const val = doc.$__getValue(path);\n    if (val != null && Array.isArray(val) && utils.isMongooseDocumentArray(val) && val.length && val[arrayAtomicsSymbol] != null && Object.keys(val[arrayAtomicsSymbol]).length !== 0) {\n      const existing = previous.get(path) || {};\n      pathToAtomics.set(path, mergeAtomics(existing, val[arrayAtomicsSymbol]));\n    }\n  }\n  const dirty = doc.$__dirty();\n  for (const dirt of dirty) {\n    const path = dirt.path;\n    const val = dirt.value;\n    if (val != null && val[arrayAtomicsSymbol] != null && Object.keys(val[arrayAtomicsSymbol]).length !== 0) {\n      const existing = previous.get(path) || {};\n      pathToAtomics.set(path, mergeAtomics(existing, val[arrayAtomicsSymbol]));\n    }\n  }\n  return pathToAtomics;\n}\nfunction mergeAtomics(destination, source) {\n  destination = destination || {};\n  if (source.$pullAll != null) {\n    destination.$pullAll = (destination.$pullAll || []).concat(source.$pullAll);\n  }\n  if (source.$push != null) {\n    destination.$push = destination.$push || {};\n    destination.$push.$each = (destination.$push.$each || []).concat(source.$push.$each);\n  }\n  if (source.$addToSet != null) {\n    destination.$addToSet = (destination.$addToSet || []).concat(source.$addToSet);\n  }\n  if (source.$set != null) {\n    destination.$set = Object.assign(destination.$set || {}, source.$set);\n  }\n  return destination;\n}","map":{"version":3,"names":["arrayAtomicsSymbol","require","sessionNewDocuments","utils","module","exports","trackTransaction","schema","pre","trackTransactionPreSave","session","$session","transaction","has","initialState","isNew","$__schema","options","versionKey","get","modifiedPaths","Set","Object","keys","$__","activePaths","getStatePaths","atomics","_getAtomics","set","state","path","add","doc","previous","pathToAtomics","Map","pathsToCheck","init","concat","modify","val","$__getValue","Array","isArray","isMongooseDocumentArray","length","existing","mergeAtomics","dirty","$__dirty","dirt","value","destination","source","$pullAll","$push","$each","$addToSet","$set","assign"],"sources":["C:/Users/91930/Desktop/Github projects/Pharmacy Demo/back-end/node_modules/mongoose/lib/plugins/trackTransaction.js"],"sourcesContent":["'use strict';\r\n\r\nconst arrayAtomicsSymbol = require('../helpers/symbols').arrayAtomicsSymbol;\r\nconst sessionNewDocuments = require('../helpers/symbols').sessionNewDocuments;\r\nconst utils = require('../utils');\r\n\r\nmodule.exports = function trackTransaction(schema) {\r\n  schema.pre('save', function trackTransactionPreSave() {\r\n    const session = this.$session();\r\n    if (session == null) {\r\n      return;\r\n    }\r\n    if (session.transaction == null || session[sessionNewDocuments] == null) {\r\n      return;\r\n    }\r\n\r\n    if (!session[sessionNewDocuments].has(this)) {\r\n      const initialState = {};\r\n      if (this.isNew) {\r\n        initialState.isNew = true;\r\n      }\r\n      if (this.$__schema.options.versionKey) {\r\n        initialState.versionKey = this.get(this.$__schema.options.versionKey);\r\n      }\r\n\r\n      initialState.modifiedPaths = new Set(Object.keys(this.$__.activePaths.getStatePaths('modify')));\r\n      initialState.atomics = _getAtomics(this);\r\n\r\n      session[sessionNewDocuments].set(this, initialState);\r\n    } else {\r\n      const state = session[sessionNewDocuments].get(this);\r\n\r\n      for (const path of Object.keys(this.$__.activePaths.getStatePaths('modify'))) {\r\n        state.modifiedPaths.add(path);\r\n      }\r\n      state.atomics = _getAtomics(this, state.atomics);\r\n    }\r\n  });\r\n};\r\n\r\nfunction _getAtomics(doc, previous) {\r\n  const pathToAtomics = new Map();\r\n  previous = previous || new Map();\r\n\r\n  const pathsToCheck = Object.keys(doc.$__.activePaths.init).concat(Object.keys(doc.$__.activePaths.modify));\r\n\r\n  for (const path of pathsToCheck) {\r\n    const val = doc.$__getValue(path);\r\n    if (val != null &&\r\n        Array.isArray(val) &&\r\n        utils.isMongooseDocumentArray(val) &&\r\n        val.length &&\r\n        val[arrayAtomicsSymbol] != null &&\r\n        Object.keys(val[arrayAtomicsSymbol]).length !== 0) {\r\n      const existing = previous.get(path) || {};\r\n      pathToAtomics.set(path, mergeAtomics(existing, val[arrayAtomicsSymbol]));\r\n    }\r\n  }\r\n\r\n  const dirty = doc.$__dirty();\r\n  for (const dirt of dirty) {\r\n    const path = dirt.path;\r\n\r\n    const val = dirt.value;\r\n    if (val != null && val[arrayAtomicsSymbol] != null && Object.keys(val[arrayAtomicsSymbol]).length !== 0) {\r\n      const existing = previous.get(path) || {};\r\n      pathToAtomics.set(path, mergeAtomics(existing, val[arrayAtomicsSymbol]));\r\n    }\r\n  }\r\n\r\n  return pathToAtomics;\r\n}\r\n\r\nfunction mergeAtomics(destination, source) {\r\n  destination = destination || {};\r\n\r\n  if (source.$pullAll != null) {\r\n    destination.$pullAll = (destination.$pullAll || []).concat(source.$pullAll);\r\n  }\r\n  if (source.$push != null) {\r\n    destination.$push = destination.$push || {};\r\n    destination.$push.$each = (destination.$push.$each || []).concat(source.$push.$each);\r\n  }\r\n  if (source.$addToSet != null) {\r\n    destination.$addToSet = (destination.$addToSet || []).concat(source.$addToSet);\r\n  }\r\n  if (source.$set != null) {\r\n    destination.$set = Object.assign(destination.$set || {}, source.$set);\r\n  }\r\n\r\n  return destination;\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}