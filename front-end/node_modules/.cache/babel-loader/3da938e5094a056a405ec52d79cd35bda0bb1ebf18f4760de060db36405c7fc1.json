{"ast":null,"code":"import { getExtendedInstanceMetadataCredentials } from \"./getExtendedInstanceMetadataCredentials\";\nexport const staticStabilityProvider = function (provider) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const logger = options?.logger || console;\n  let pastCredentials;\n  return async () => {\n    let credentials;\n    try {\n      credentials = await provider();\n      if (credentials.expiration && credentials.expiration.getTime() < Date.now()) {\n        credentials = getExtendedInstanceMetadataCredentials(credentials, logger);\n      }\n    } catch (e) {\n      if (pastCredentials) {\n        logger.warn(\"Credential renew failed: \", e);\n        credentials = getExtendedInstanceMetadataCredentials(pastCredentials, logger);\n      } else {\n        throw e;\n      }\n    }\n    pastCredentials = credentials;\n    return credentials;\n  };\n};","map":{"version":3,"names":["getExtendedInstanceMetadataCredentials","staticStabilityProvider","provider","options","logger","console","pastCredentials","credentials","expiration","getTime","Date","now","e","warn"],"sources":["C:/Users/91930/Desktop/Github projects/Pharmacy Demo/back-end/node_modules/@aws-sdk/credential-provider-imds/dist-es/utils/staticStabilityProvider.js"],"sourcesContent":["import { getExtendedInstanceMetadataCredentials } from \"./getExtendedInstanceMetadataCredentials\";\r\nexport const staticStabilityProvider = (provider, options = {}) => {\r\n    const logger = options?.logger || console;\r\n    let pastCredentials;\r\n    return async () => {\r\n        let credentials;\r\n        try {\r\n            credentials = await provider();\r\n            if (credentials.expiration && credentials.expiration.getTime() < Date.now()) {\r\n                credentials = getExtendedInstanceMetadataCredentials(credentials, logger);\r\n            }\r\n        }\r\n        catch (e) {\r\n            if (pastCredentials) {\r\n                logger.warn(\"Credential renew failed: \", e);\r\n                credentials = getExtendedInstanceMetadataCredentials(pastCredentials, logger);\r\n            }\r\n            else {\r\n                throw e;\r\n            }\r\n        }\r\n        pastCredentials = credentials;\r\n        return credentials;\r\n    };\r\n};\r\n"],"mappings":"AAAA,SAASA,sCAAsC,QAAQ,0CAA0C;AACjG,OAAO,MAAMC,uBAAuB,GAAG,UAACC,QAAQ,EAAmB;EAAA,IAAjBC,OAAO,uEAAG,CAAC,CAAC;EAC1D,MAAMC,MAAM,GAAGD,OAAO,EAAEC,MAAM,IAAIC,OAAO;EACzC,IAAIC,eAAe;EACnB,OAAO,YAAY;IACf,IAAIC,WAAW;IACf,IAAI;MACAA,WAAW,GAAG,MAAML,QAAQ,EAAE;MAC9B,IAAIK,WAAW,CAACC,UAAU,IAAID,WAAW,CAACC,UAAU,CAACC,OAAO,EAAE,GAAGC,IAAI,CAACC,GAAG,EAAE,EAAE;QACzEJ,WAAW,GAAGP,sCAAsC,CAACO,WAAW,EAAEH,MAAM,CAAC;MAC7E;IACJ,CAAC,CACD,OAAOQ,CAAC,EAAE;MACN,IAAIN,eAAe,EAAE;QACjBF,MAAM,CAACS,IAAI,CAAC,2BAA2B,EAAED,CAAC,CAAC;QAC3CL,WAAW,GAAGP,sCAAsC,CAACM,eAAe,EAAEF,MAAM,CAAC;MACjF,CAAC,MACI;QACD,MAAMQ,CAAC;MACX;IACJ;IACAN,eAAe,GAAGC,WAAW;IAC7B,OAAOA,WAAW;EACtB,CAAC;AACL,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}