{"ast":null,"code":"/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Yuta Hiroto @hiroppy\r\n*/\n\n\"use strict\";\n\nconst {\n  cleverMerge\n} = require(\"../util/cleverMerge\");\nconst {\n  compareModulesByIdentifier\n} = require(\"../util/comparators\");\nconst createSchemaValidation = require(\"../util/create-schema-validation\");\nconst memoize = require(\"../util/memoize\");\n\n/** @typedef {import(\"webpack-sources\").Source} Source */\n/** @typedef {import(\"../Chunk\")} Chunk */\n/** @typedef {import(\"../Compiler\")} Compiler */\n/** @typedef {import(\"../Module\")} Module */\n\nconst getSchema = name => {\n  const {\n    definitions\n  } = require(\"../../schemas/WebpackOptions.json\");\n  return {\n    definitions,\n    oneOf: [{\n      $ref: `#/definitions/${name}`\n    }]\n  };\n};\nconst generatorValidationOptions = {\n  name: \"Asset Modules Plugin\",\n  baseDataPath: \"generator\"\n};\nconst validateGeneratorOptions = {\n  asset: createSchemaValidation(require(\"../../schemas/plugins/asset/AssetGeneratorOptions.check.js\"), () => getSchema(\"AssetGeneratorOptions\"), generatorValidationOptions),\n  \"asset/resource\": createSchemaValidation(require(\"../../schemas/plugins/asset/AssetResourceGeneratorOptions.check.js\"), () => getSchema(\"AssetResourceGeneratorOptions\"), generatorValidationOptions),\n  \"asset/inline\": createSchemaValidation(require(\"../../schemas/plugins/asset/AssetInlineGeneratorOptions.check.js\"), () => getSchema(\"AssetInlineGeneratorOptions\"), generatorValidationOptions)\n};\nconst validateParserOptions = createSchemaValidation(require(\"../../schemas/plugins/asset/AssetParserOptions.check.js\"), () => getSchema(\"AssetParserOptions\"), {\n  name: \"Asset Modules Plugin\",\n  baseDataPath: \"parser\"\n});\nconst getAssetGenerator = memoize(() => require(\"./AssetGenerator\"));\nconst getAssetParser = memoize(() => require(\"./AssetParser\"));\nconst getAssetSourceParser = memoize(() => require(\"./AssetSourceParser\"));\nconst getAssetSourceGenerator = memoize(() => require(\"./AssetSourceGenerator\"));\nconst type = \"asset\";\nconst plugin = \"AssetModulesPlugin\";\nclass AssetModulesPlugin {\n  /**\r\n   * Apply the plugin\r\n   * @param {Compiler} compiler the compiler instance\r\n   * @returns {void}\r\n   */\n  apply(compiler) {\n    compiler.hooks.compilation.tap(plugin, (compilation, _ref) => {\n      let {\n        normalModuleFactory\n      } = _ref;\n      normalModuleFactory.hooks.createParser.for(\"asset\").tap(plugin, parserOptions => {\n        validateParserOptions(parserOptions);\n        parserOptions = cleverMerge(compiler.options.module.parser.asset, parserOptions);\n        let dataUrlCondition = parserOptions.dataUrlCondition;\n        if (!dataUrlCondition || typeof dataUrlCondition === \"object\") {\n          dataUrlCondition = {\n            maxSize: 8096,\n            ...dataUrlCondition\n          };\n        }\n        const AssetParser = getAssetParser();\n        return new AssetParser(dataUrlCondition);\n      });\n      normalModuleFactory.hooks.createParser.for(\"asset/inline\").tap(plugin, parserOptions => {\n        const AssetParser = getAssetParser();\n        return new AssetParser(true);\n      });\n      normalModuleFactory.hooks.createParser.for(\"asset/resource\").tap(plugin, parserOptions => {\n        const AssetParser = getAssetParser();\n        return new AssetParser(false);\n      });\n      normalModuleFactory.hooks.createParser.for(\"asset/source\").tap(plugin, parserOptions => {\n        const AssetSourceParser = getAssetSourceParser();\n        return new AssetSourceParser();\n      });\n      for (const type of [\"asset\", \"asset/inline\", \"asset/resource\"]) {\n        normalModuleFactory.hooks.createGenerator.for(type).tap(plugin, generatorOptions => {\n          validateGeneratorOptions[type](generatorOptions);\n          let dataUrl = undefined;\n          if (type !== \"asset/resource\") {\n            dataUrl = generatorOptions.dataUrl;\n            if (!dataUrl || typeof dataUrl === \"object\") {\n              dataUrl = {\n                encoding: undefined,\n                mimetype: undefined,\n                ...dataUrl\n              };\n            }\n          }\n          let filename = undefined;\n          let publicPath = undefined;\n          let outputPath = undefined;\n          if (type !== \"asset/inline\") {\n            filename = generatorOptions.filename;\n            publicPath = generatorOptions.publicPath;\n            outputPath = generatorOptions.outputPath;\n          }\n          const AssetGenerator = getAssetGenerator();\n          return new AssetGenerator(dataUrl, filename, publicPath, outputPath, generatorOptions.emit !== false);\n        });\n      }\n      normalModuleFactory.hooks.createGenerator.for(\"asset/source\").tap(plugin, () => {\n        const AssetSourceGenerator = getAssetSourceGenerator();\n        return new AssetSourceGenerator();\n      });\n      compilation.hooks.renderManifest.tap(plugin, (result, options) => {\n        const {\n          chunkGraph\n        } = compilation;\n        const {\n          chunk,\n          codeGenerationResults\n        } = options;\n        const modules = chunkGraph.getOrderedChunkModulesIterableBySourceType(chunk, \"asset\", compareModulesByIdentifier);\n        if (modules) {\n          for (const module of modules) {\n            try {\n              const codeGenResult = codeGenerationResults.get(module, chunk.runtime);\n              result.push({\n                render: () => codeGenResult.sources.get(type),\n                filename: module.buildInfo.filename || codeGenResult.data.get(\"filename\"),\n                info: module.buildInfo.assetInfo || codeGenResult.data.get(\"assetInfo\"),\n                auxiliary: true,\n                identifier: `assetModule${chunkGraph.getModuleId(module)}`,\n                hash: module.buildInfo.fullContentHash || codeGenResult.data.get(\"fullContentHash\")\n              });\n            } catch (e) {\n              e.message += `\\nduring rendering of asset ${module.identifier()}`;\n              throw e;\n            }\n          }\n        }\n        return result;\n      });\n      compilation.hooks.prepareModuleExecution.tap(\"AssetModulesPlugin\", (options, context) => {\n        const {\n          codeGenerationResult\n        } = options;\n        const source = codeGenerationResult.sources.get(\"asset\");\n        if (source === undefined) return;\n        context.assets.set(codeGenerationResult.data.get(\"filename\"), {\n          source,\n          info: codeGenerationResult.data.get(\"assetInfo\")\n        });\n      });\n    });\n  }\n}\nmodule.exports = AssetModulesPlugin;","map":{"version":3,"names":["cleverMerge","require","compareModulesByIdentifier","createSchemaValidation","memoize","getSchema","name","definitions","oneOf","$ref","generatorValidationOptions","baseDataPath","validateGeneratorOptions","asset","validateParserOptions","getAssetGenerator","getAssetParser","getAssetSourceParser","getAssetSourceGenerator","type","plugin","AssetModulesPlugin","apply","compiler","hooks","compilation","tap","normalModuleFactory","createParser","for","parserOptions","options","module","parser","dataUrlCondition","maxSize","AssetParser","AssetSourceParser","createGenerator","generatorOptions","dataUrl","undefined","encoding","mimetype","filename","publicPath","outputPath","AssetGenerator","emit","AssetSourceGenerator","renderManifest","result","chunkGraph","chunk","codeGenerationResults","modules","getOrderedChunkModulesIterableBySourceType","codeGenResult","get","runtime","push","render","sources","buildInfo","data","info","assetInfo","auxiliary","identifier","getModuleId","hash","fullContentHash","e","message","prepareModuleExecution","context","codeGenerationResult","source","assets","set","exports"],"sources":["C:/Users/91930/Desktop/Github projects/Pharmacy Demo/front-end/node_modules/webpack/lib/asset/AssetModulesPlugin.js"],"sourcesContent":["/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Yuta Hiroto @hiroppy\r\n*/\r\n\r\n\"use strict\";\r\n\r\nconst { cleverMerge } = require(\"../util/cleverMerge\");\r\nconst { compareModulesByIdentifier } = require(\"../util/comparators\");\r\nconst createSchemaValidation = require(\"../util/create-schema-validation\");\r\nconst memoize = require(\"../util/memoize\");\r\n\r\n/** @typedef {import(\"webpack-sources\").Source} Source */\r\n/** @typedef {import(\"../Chunk\")} Chunk */\r\n/** @typedef {import(\"../Compiler\")} Compiler */\r\n/** @typedef {import(\"../Module\")} Module */\r\n\r\nconst getSchema = name => {\r\n\tconst { definitions } = require(\"../../schemas/WebpackOptions.json\");\r\n\treturn {\r\n\t\tdefinitions,\r\n\t\toneOf: [{ $ref: `#/definitions/${name}` }]\r\n\t};\r\n};\r\n\r\nconst generatorValidationOptions = {\r\n\tname: \"Asset Modules Plugin\",\r\n\tbaseDataPath: \"generator\"\r\n};\r\nconst validateGeneratorOptions = {\r\n\tasset: createSchemaValidation(\r\n\t\trequire(\"../../schemas/plugins/asset/AssetGeneratorOptions.check.js\"),\r\n\t\t() => getSchema(\"AssetGeneratorOptions\"),\r\n\t\tgeneratorValidationOptions\r\n\t),\r\n\t\"asset/resource\": createSchemaValidation(\r\n\t\trequire(\"../../schemas/plugins/asset/AssetResourceGeneratorOptions.check.js\"),\r\n\t\t() => getSchema(\"AssetResourceGeneratorOptions\"),\r\n\t\tgeneratorValidationOptions\r\n\t),\r\n\t\"asset/inline\": createSchemaValidation(\r\n\t\trequire(\"../../schemas/plugins/asset/AssetInlineGeneratorOptions.check.js\"),\r\n\t\t() => getSchema(\"AssetInlineGeneratorOptions\"),\r\n\t\tgeneratorValidationOptions\r\n\t)\r\n};\r\n\r\nconst validateParserOptions = createSchemaValidation(\r\n\trequire(\"../../schemas/plugins/asset/AssetParserOptions.check.js\"),\r\n\t() => getSchema(\"AssetParserOptions\"),\r\n\t{\r\n\t\tname: \"Asset Modules Plugin\",\r\n\t\tbaseDataPath: \"parser\"\r\n\t}\r\n);\r\n\r\nconst getAssetGenerator = memoize(() => require(\"./AssetGenerator\"));\r\nconst getAssetParser = memoize(() => require(\"./AssetParser\"));\r\nconst getAssetSourceParser = memoize(() => require(\"./AssetSourceParser\"));\r\nconst getAssetSourceGenerator = memoize(() =>\r\n\trequire(\"./AssetSourceGenerator\")\r\n);\r\n\r\nconst type = \"asset\";\r\nconst plugin = \"AssetModulesPlugin\";\r\n\r\nclass AssetModulesPlugin {\r\n\t/**\r\n\t * Apply the plugin\r\n\t * @param {Compiler} compiler the compiler instance\r\n\t * @returns {void}\r\n\t */\r\n\tapply(compiler) {\r\n\t\tcompiler.hooks.compilation.tap(\r\n\t\t\tplugin,\r\n\t\t\t(compilation, { normalModuleFactory }) => {\r\n\t\t\t\tnormalModuleFactory.hooks.createParser\r\n\t\t\t\t\t.for(\"asset\")\r\n\t\t\t\t\t.tap(plugin, parserOptions => {\r\n\t\t\t\t\t\tvalidateParserOptions(parserOptions);\r\n\t\t\t\t\t\tparserOptions = cleverMerge(\r\n\t\t\t\t\t\t\tcompiler.options.module.parser.asset,\r\n\t\t\t\t\t\t\tparserOptions\r\n\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\tlet dataUrlCondition = parserOptions.dataUrlCondition;\r\n\t\t\t\t\t\tif (!dataUrlCondition || typeof dataUrlCondition === \"object\") {\r\n\t\t\t\t\t\t\tdataUrlCondition = {\r\n\t\t\t\t\t\t\t\tmaxSize: 8096,\r\n\t\t\t\t\t\t\t\t...dataUrlCondition\r\n\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tconst AssetParser = getAssetParser();\r\n\r\n\t\t\t\t\t\treturn new AssetParser(dataUrlCondition);\r\n\t\t\t\t\t});\r\n\t\t\t\tnormalModuleFactory.hooks.createParser\r\n\t\t\t\t\t.for(\"asset/inline\")\r\n\t\t\t\t\t.tap(plugin, parserOptions => {\r\n\t\t\t\t\t\tconst AssetParser = getAssetParser();\r\n\r\n\t\t\t\t\t\treturn new AssetParser(true);\r\n\t\t\t\t\t});\r\n\t\t\t\tnormalModuleFactory.hooks.createParser\r\n\t\t\t\t\t.for(\"asset/resource\")\r\n\t\t\t\t\t.tap(plugin, parserOptions => {\r\n\t\t\t\t\t\tconst AssetParser = getAssetParser();\r\n\r\n\t\t\t\t\t\treturn new AssetParser(false);\r\n\t\t\t\t\t});\r\n\t\t\t\tnormalModuleFactory.hooks.createParser\r\n\t\t\t\t\t.for(\"asset/source\")\r\n\t\t\t\t\t.tap(plugin, parserOptions => {\r\n\t\t\t\t\t\tconst AssetSourceParser = getAssetSourceParser();\r\n\r\n\t\t\t\t\t\treturn new AssetSourceParser();\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\tfor (const type of [\"asset\", \"asset/inline\", \"asset/resource\"]) {\r\n\t\t\t\t\tnormalModuleFactory.hooks.createGenerator\r\n\t\t\t\t\t\t.for(type)\r\n\t\t\t\t\t\t.tap(plugin, generatorOptions => {\r\n\t\t\t\t\t\t\tvalidateGeneratorOptions[type](generatorOptions);\r\n\r\n\t\t\t\t\t\t\tlet dataUrl = undefined;\r\n\t\t\t\t\t\t\tif (type !== \"asset/resource\") {\r\n\t\t\t\t\t\t\t\tdataUrl = generatorOptions.dataUrl;\r\n\t\t\t\t\t\t\t\tif (!dataUrl || typeof dataUrl === \"object\") {\r\n\t\t\t\t\t\t\t\t\tdataUrl = {\r\n\t\t\t\t\t\t\t\t\t\tencoding: undefined,\r\n\t\t\t\t\t\t\t\t\t\tmimetype: undefined,\r\n\t\t\t\t\t\t\t\t\t\t...dataUrl\r\n\t\t\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tlet filename = undefined;\r\n\t\t\t\t\t\t\tlet publicPath = undefined;\r\n\t\t\t\t\t\t\tlet outputPath = undefined;\r\n\t\t\t\t\t\t\tif (type !== \"asset/inline\") {\r\n\t\t\t\t\t\t\t\tfilename = generatorOptions.filename;\r\n\t\t\t\t\t\t\t\tpublicPath = generatorOptions.publicPath;\r\n\t\t\t\t\t\t\t\toutputPath = generatorOptions.outputPath;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tconst AssetGenerator = getAssetGenerator();\r\n\r\n\t\t\t\t\t\t\treturn new AssetGenerator(\r\n\t\t\t\t\t\t\t\tdataUrl,\r\n\t\t\t\t\t\t\t\tfilename,\r\n\t\t\t\t\t\t\t\tpublicPath,\r\n\t\t\t\t\t\t\t\toutputPath,\r\n\t\t\t\t\t\t\t\tgeneratorOptions.emit !== false\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\tnormalModuleFactory.hooks.createGenerator\r\n\t\t\t\t\t.for(\"asset/source\")\r\n\t\t\t\t\t.tap(plugin, () => {\r\n\t\t\t\t\t\tconst AssetSourceGenerator = getAssetSourceGenerator();\r\n\r\n\t\t\t\t\t\treturn new AssetSourceGenerator();\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\tcompilation.hooks.renderManifest.tap(plugin, (result, options) => {\r\n\t\t\t\t\tconst { chunkGraph } = compilation;\r\n\t\t\t\t\tconst { chunk, codeGenerationResults } = options;\r\n\r\n\t\t\t\t\tconst modules = chunkGraph.getOrderedChunkModulesIterableBySourceType(\r\n\t\t\t\t\t\tchunk,\r\n\t\t\t\t\t\t\"asset\",\r\n\t\t\t\t\t\tcompareModulesByIdentifier\r\n\t\t\t\t\t);\r\n\t\t\t\t\tif (modules) {\r\n\t\t\t\t\t\tfor (const module of modules) {\r\n\t\t\t\t\t\t\ttry {\r\n\t\t\t\t\t\t\t\tconst codeGenResult = codeGenerationResults.get(\r\n\t\t\t\t\t\t\t\t\tmodule,\r\n\t\t\t\t\t\t\t\t\tchunk.runtime\r\n\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\tresult.push({\r\n\t\t\t\t\t\t\t\t\trender: () => codeGenResult.sources.get(type),\r\n\t\t\t\t\t\t\t\t\tfilename:\r\n\t\t\t\t\t\t\t\t\t\tmodule.buildInfo.filename ||\r\n\t\t\t\t\t\t\t\t\t\tcodeGenResult.data.get(\"filename\"),\r\n\t\t\t\t\t\t\t\t\tinfo:\r\n\t\t\t\t\t\t\t\t\t\tmodule.buildInfo.assetInfo ||\r\n\t\t\t\t\t\t\t\t\t\tcodeGenResult.data.get(\"assetInfo\"),\r\n\t\t\t\t\t\t\t\t\tauxiliary: true,\r\n\t\t\t\t\t\t\t\t\tidentifier: `assetModule${chunkGraph.getModuleId(module)}`,\r\n\t\t\t\t\t\t\t\t\thash:\r\n\t\t\t\t\t\t\t\t\t\tmodule.buildInfo.fullContentHash ||\r\n\t\t\t\t\t\t\t\t\t\tcodeGenResult.data.get(\"fullContentHash\")\r\n\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t} catch (e) {\r\n\t\t\t\t\t\t\t\te.message += `\\nduring rendering of asset ${module.identifier()}`;\r\n\t\t\t\t\t\t\t\tthrow e;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t});\r\n\r\n\t\t\t\tcompilation.hooks.prepareModuleExecution.tap(\r\n\t\t\t\t\t\"AssetModulesPlugin\",\r\n\t\t\t\t\t(options, context) => {\r\n\t\t\t\t\t\tconst { codeGenerationResult } = options;\r\n\t\t\t\t\t\tconst source = codeGenerationResult.sources.get(\"asset\");\r\n\t\t\t\t\t\tif (source === undefined) return;\r\n\t\t\t\t\t\tcontext.assets.set(codeGenerationResult.data.get(\"filename\"), {\r\n\t\t\t\t\t\t\tsource,\r\n\t\t\t\t\t\t\tinfo: codeGenerationResult.data.get(\"assetInfo\")\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n}\r\n\r\nmodule.exports = AssetModulesPlugin;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}