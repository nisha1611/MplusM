{"ast":null,"code":"'use strict';\n\nconst clone = require('../helpers/clone');\n\n/**\r\n * The options defined on a schematype.\r\n *\r\n * #### Example:\r\n *\r\n *     const schema = new Schema({ name: String });\r\n *     schema.path('name').options instanceof mongoose.SchemaTypeOptions; // true\r\n *\r\n * @api public\r\n * @constructor SchemaTypeOptions\r\n */\n\nclass SchemaTypeOptions {\n  constructor(obj) {\n    if (obj == null) {\n      return this;\n    }\n    Object.assign(this, clone(obj));\n  }\n}\nconst opts = require('./propertyOptions');\n\n/**\r\n * The type to cast this path to.\r\n *\r\n * @api public\r\n * @property type\r\n * @memberOf SchemaTypeOptions\r\n * @type {Function|String|Object}\r\n * @instance\r\n */\n\nObject.defineProperty(SchemaTypeOptions.prototype, 'type', opts);\n\n/**\r\n * Function or object describing how to validate this schematype.\r\n *\r\n * @api public\r\n * @property validate\r\n * @memberOf SchemaTypeOptions\r\n * @type {Function|Object}\r\n * @instance\r\n */\n\nObject.defineProperty(SchemaTypeOptions.prototype, 'validate', opts);\n\n/**\r\n * Allows overriding casting logic for this individual path. If a string, the\r\n * given string overwrites Mongoose's default cast error message.\r\n *\r\n * #### Example:\r\n *\r\n *     const schema = new Schema({\r\n *       num: {\r\n *         type: Number,\r\n *         cast: '{VALUE} is not a valid number'\r\n *       }\r\n *     });\r\n *\r\n *     // Throws 'CastError: \"bad\" is not a valid number'\r\n *     schema.path('num').cast('bad');\r\n *\r\n *     const Model = mongoose.model('Test', schema);\r\n *     const doc = new Model({ num: 'fail' });\r\n *     const err = doc.validateSync();\r\n *\r\n *     err.errors['num']; // 'CastError: \"fail\" is not a valid number'\r\n *\r\n * @api public\r\n * @property cast\r\n * @memberOf SchemaTypeOptions\r\n * @type {String}\r\n * @instance\r\n */\n\nObject.defineProperty(SchemaTypeOptions.prototype, 'cast', opts);\n\n/**\r\n * If true, attach a required validator to this path, which ensures this path\r\n * cannot be set to a nullish value. If a function, Mongoose calls the\r\n * function and only checks for nullish values if the function returns a truthy value.\r\n *\r\n * @api public\r\n * @property required\r\n * @memberOf SchemaTypeOptions\r\n * @type {Function|Boolean}\r\n * @instance\r\n */\n\nObject.defineProperty(SchemaTypeOptions.prototype, 'required', opts);\n\n/**\r\n * The default value for this path. If a function, Mongoose executes the function\r\n * and uses the return value as the default.\r\n *\r\n * @api public\r\n * @property default\r\n * @memberOf SchemaTypeOptions\r\n * @type {Function|Any}\r\n * @instance\r\n */\n\nObject.defineProperty(SchemaTypeOptions.prototype, 'default', opts);\n\n/**\r\n * The model that `populate()` should use if populating this path.\r\n *\r\n * @api public\r\n * @property ref\r\n * @memberOf SchemaTypeOptions\r\n * @type {Function|String}\r\n * @instance\r\n */\n\nObject.defineProperty(SchemaTypeOptions.prototype, 'ref', opts);\n\n/**\r\n * The path in the document that `populate()` should use to find the model\r\n * to use.\r\n *\r\n * @api public\r\n * @property ref\r\n * @memberOf SchemaTypeOptions\r\n * @type {Function|String}\r\n * @instance\r\n */\n\nObject.defineProperty(SchemaTypeOptions.prototype, 'refPath', opts);\n\n/**\r\n * Whether to include or exclude this path by default when loading documents\r\n * using `find()`, `findOne()`, etc.\r\n *\r\n * @api public\r\n * @property select\r\n * @memberOf SchemaTypeOptions\r\n * @type {Boolean|Number}\r\n * @instance\r\n */\n\nObject.defineProperty(SchemaTypeOptions.prototype, 'select', opts);\n\n/**\r\n * If [truthy](https://masteringjs.io/tutorials/fundamentals/truthy), Mongoose will\r\n * build an index on this path when the model is compiled.\r\n *\r\n * @api public\r\n * @property index\r\n * @memberOf SchemaTypeOptions\r\n * @type {Boolean|Number|Object}\r\n * @instance\r\n */\n\nObject.defineProperty(SchemaTypeOptions.prototype, 'index', opts);\n\n/**\r\n * If [truthy](https://masteringjs.io/tutorials/fundamentals/truthy), Mongoose\r\n * will build a unique index on this path when the\r\n * model is compiled. [The `unique` option is **not** a validator](/docs/validation.html#the-unique-option-is-not-a-validator).\r\n *\r\n * @api public\r\n * @property unique\r\n * @memberOf SchemaTypeOptions\r\n * @type {Boolean|Number}\r\n * @instance\r\n */\n\nObject.defineProperty(SchemaTypeOptions.prototype, 'unique', opts);\n\n/**\r\n * If [truthy](https://masteringjs.io/tutorials/fundamentals/truthy), Mongoose will\r\n * disallow changes to this path once the document\r\n * is saved to the database for the first time. Read more about [immutability in Mongoose here](https://thecodebarbarian.com/whats-new-in-mongoose-5-6-immutable-properties.html).\r\n *\r\n * @api public\r\n * @property immutable\r\n * @memberOf SchemaTypeOptions\r\n * @type {Function|Boolean}\r\n * @instance\r\n */\n\nObject.defineProperty(SchemaTypeOptions.prototype, 'immutable', opts);\n\n/**\r\n * If [truthy](https://masteringjs.io/tutorials/fundamentals/truthy), Mongoose will\r\n * build a sparse index on this path.\r\n *\r\n * @api public\r\n * @property sparse\r\n * @memberOf SchemaTypeOptions\r\n * @type {Boolean|Number}\r\n * @instance\r\n */\n\nObject.defineProperty(SchemaTypeOptions.prototype, 'sparse', opts);\n\n/**\r\n * If [truthy](https://masteringjs.io/tutorials/fundamentals/truthy), Mongoose\r\n * will build a text index on this path.\r\n *\r\n * @api public\r\n * @property text\r\n * @memberOf SchemaTypeOptions\r\n * @type {Boolean|Number|Object}\r\n * @instance\r\n */\n\nObject.defineProperty(SchemaTypeOptions.prototype, 'text', opts);\n\n/**\r\n * Define a transform function for this individual schema type.\r\n * Only called when calling `toJSON()` or `toObject()`.\r\n *\r\n * #### Example:\r\n *\r\n *     const schema = Schema({\r\n *       myDate: {\r\n *         type: Date,\r\n *         transform: v => v.getFullYear()\r\n *       }\r\n *     });\r\n *     const Model = mongoose.model('Test', schema);\r\n *\r\n *     const doc = new Model({ myDate: new Date('2019/06/01') });\r\n *     doc.myDate instanceof Date; // true\r\n *\r\n *     const res = doc.toObject({ transform: true });\r\n *     res.myDate; // 2019\r\n *\r\n * @api public\r\n * @property transform\r\n * @memberOf SchemaTypeOptions\r\n * @type {Function}\r\n * @instance\r\n */\n\nObject.defineProperty(SchemaTypeOptions.prototype, 'transform', opts);\nmodule.exports = SchemaTypeOptions;","map":{"version":3,"names":["clone","require","SchemaTypeOptions","constructor","obj","Object","assign","opts","defineProperty","prototype","module","exports"],"sources":["C:/Users/91930/Desktop/Github projects/Pharmacy Demo/back-end/node_modules/mongoose/lib/options/SchemaTypeOptions.js"],"sourcesContent":["'use strict';\r\n\r\nconst clone = require('../helpers/clone');\r\n\r\n/**\r\n * The options defined on a schematype.\r\n *\r\n * #### Example:\r\n *\r\n *     const schema = new Schema({ name: String });\r\n *     schema.path('name').options instanceof mongoose.SchemaTypeOptions; // true\r\n *\r\n * @api public\r\n * @constructor SchemaTypeOptions\r\n */\r\n\r\nclass SchemaTypeOptions {\r\n  constructor(obj) {\r\n    if (obj == null) {\r\n      return this;\r\n    }\r\n    Object.assign(this, clone(obj));\r\n  }\r\n}\r\n\r\nconst opts = require('./propertyOptions');\r\n\r\n/**\r\n * The type to cast this path to.\r\n *\r\n * @api public\r\n * @property type\r\n * @memberOf SchemaTypeOptions\r\n * @type {Function|String|Object}\r\n * @instance\r\n */\r\n\r\nObject.defineProperty(SchemaTypeOptions.prototype, 'type', opts);\r\n\r\n/**\r\n * Function or object describing how to validate this schematype.\r\n *\r\n * @api public\r\n * @property validate\r\n * @memberOf SchemaTypeOptions\r\n * @type {Function|Object}\r\n * @instance\r\n */\r\n\r\nObject.defineProperty(SchemaTypeOptions.prototype, 'validate', opts);\r\n\r\n/**\r\n * Allows overriding casting logic for this individual path. If a string, the\r\n * given string overwrites Mongoose's default cast error message.\r\n *\r\n * #### Example:\r\n *\r\n *     const schema = new Schema({\r\n *       num: {\r\n *         type: Number,\r\n *         cast: '{VALUE} is not a valid number'\r\n *       }\r\n *     });\r\n *\r\n *     // Throws 'CastError: \"bad\" is not a valid number'\r\n *     schema.path('num').cast('bad');\r\n *\r\n *     const Model = mongoose.model('Test', schema);\r\n *     const doc = new Model({ num: 'fail' });\r\n *     const err = doc.validateSync();\r\n *\r\n *     err.errors['num']; // 'CastError: \"fail\" is not a valid number'\r\n *\r\n * @api public\r\n * @property cast\r\n * @memberOf SchemaTypeOptions\r\n * @type {String}\r\n * @instance\r\n */\r\n\r\nObject.defineProperty(SchemaTypeOptions.prototype, 'cast', opts);\r\n\r\n/**\r\n * If true, attach a required validator to this path, which ensures this path\r\n * cannot be set to a nullish value. If a function, Mongoose calls the\r\n * function and only checks for nullish values if the function returns a truthy value.\r\n *\r\n * @api public\r\n * @property required\r\n * @memberOf SchemaTypeOptions\r\n * @type {Function|Boolean}\r\n * @instance\r\n */\r\n\r\nObject.defineProperty(SchemaTypeOptions.prototype, 'required', opts);\r\n\r\n/**\r\n * The default value for this path. If a function, Mongoose executes the function\r\n * and uses the return value as the default.\r\n *\r\n * @api public\r\n * @property default\r\n * @memberOf SchemaTypeOptions\r\n * @type {Function|Any}\r\n * @instance\r\n */\r\n\r\nObject.defineProperty(SchemaTypeOptions.prototype, 'default', opts);\r\n\r\n/**\r\n * The model that `populate()` should use if populating this path.\r\n *\r\n * @api public\r\n * @property ref\r\n * @memberOf SchemaTypeOptions\r\n * @type {Function|String}\r\n * @instance\r\n */\r\n\r\nObject.defineProperty(SchemaTypeOptions.prototype, 'ref', opts);\r\n\r\n/**\r\n * The path in the document that `populate()` should use to find the model\r\n * to use.\r\n *\r\n * @api public\r\n * @property ref\r\n * @memberOf SchemaTypeOptions\r\n * @type {Function|String}\r\n * @instance\r\n */\r\n\r\nObject.defineProperty(SchemaTypeOptions.prototype, 'refPath', opts);\r\n\r\n/**\r\n * Whether to include or exclude this path by default when loading documents\r\n * using `find()`, `findOne()`, etc.\r\n *\r\n * @api public\r\n * @property select\r\n * @memberOf SchemaTypeOptions\r\n * @type {Boolean|Number}\r\n * @instance\r\n */\r\n\r\nObject.defineProperty(SchemaTypeOptions.prototype, 'select', opts);\r\n\r\n/**\r\n * If [truthy](https://masteringjs.io/tutorials/fundamentals/truthy), Mongoose will\r\n * build an index on this path when the model is compiled.\r\n *\r\n * @api public\r\n * @property index\r\n * @memberOf SchemaTypeOptions\r\n * @type {Boolean|Number|Object}\r\n * @instance\r\n */\r\n\r\nObject.defineProperty(SchemaTypeOptions.prototype, 'index', opts);\r\n\r\n/**\r\n * If [truthy](https://masteringjs.io/tutorials/fundamentals/truthy), Mongoose\r\n * will build a unique index on this path when the\r\n * model is compiled. [The `unique` option is **not** a validator](/docs/validation.html#the-unique-option-is-not-a-validator).\r\n *\r\n * @api public\r\n * @property unique\r\n * @memberOf SchemaTypeOptions\r\n * @type {Boolean|Number}\r\n * @instance\r\n */\r\n\r\nObject.defineProperty(SchemaTypeOptions.prototype, 'unique', opts);\r\n\r\n/**\r\n * If [truthy](https://masteringjs.io/tutorials/fundamentals/truthy), Mongoose will\r\n * disallow changes to this path once the document\r\n * is saved to the database for the first time. Read more about [immutability in Mongoose here](https://thecodebarbarian.com/whats-new-in-mongoose-5-6-immutable-properties.html).\r\n *\r\n * @api public\r\n * @property immutable\r\n * @memberOf SchemaTypeOptions\r\n * @type {Function|Boolean}\r\n * @instance\r\n */\r\n\r\nObject.defineProperty(SchemaTypeOptions.prototype, 'immutable', opts);\r\n\r\n/**\r\n * If [truthy](https://masteringjs.io/tutorials/fundamentals/truthy), Mongoose will\r\n * build a sparse index on this path.\r\n *\r\n * @api public\r\n * @property sparse\r\n * @memberOf SchemaTypeOptions\r\n * @type {Boolean|Number}\r\n * @instance\r\n */\r\n\r\nObject.defineProperty(SchemaTypeOptions.prototype, 'sparse', opts);\r\n\r\n/**\r\n * If [truthy](https://masteringjs.io/tutorials/fundamentals/truthy), Mongoose\r\n * will build a text index on this path.\r\n *\r\n * @api public\r\n * @property text\r\n * @memberOf SchemaTypeOptions\r\n * @type {Boolean|Number|Object}\r\n * @instance\r\n */\r\n\r\nObject.defineProperty(SchemaTypeOptions.prototype, 'text', opts);\r\n\r\n/**\r\n * Define a transform function for this individual schema type.\r\n * Only called when calling `toJSON()` or `toObject()`.\r\n *\r\n * #### Example:\r\n *\r\n *     const schema = Schema({\r\n *       myDate: {\r\n *         type: Date,\r\n *         transform: v => v.getFullYear()\r\n *       }\r\n *     });\r\n *     const Model = mongoose.model('Test', schema);\r\n *\r\n *     const doc = new Model({ myDate: new Date('2019/06/01') });\r\n *     doc.myDate instanceof Date; // true\r\n *\r\n *     const res = doc.toObject({ transform: true });\r\n *     res.myDate; // 2019\r\n *\r\n * @api public\r\n * @property transform\r\n * @memberOf SchemaTypeOptions\r\n * @type {Function}\r\n * @instance\r\n */\r\n\r\nObject.defineProperty(SchemaTypeOptions.prototype, 'transform', opts);\r\n\r\nmodule.exports = SchemaTypeOptions;\r\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,KAAK,GAAGC,OAAO,CAAC,kBAAkB,CAAC;;AAEzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,iBAAiB,CAAC;EACtBC,WAAW,CAACC,GAAG,EAAE;IACf,IAAIA,GAAG,IAAI,IAAI,EAAE;MACf,OAAO,IAAI;IACb;IACAC,MAAM,CAACC,MAAM,CAAC,IAAI,EAAEN,KAAK,CAACI,GAAG,CAAC,CAAC;EACjC;AACF;AAEA,MAAMG,IAAI,GAAGN,OAAO,CAAC,mBAAmB,CAAC;;AAEzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAI,MAAM,CAACG,cAAc,CAACN,iBAAiB,CAACO,SAAS,EAAE,MAAM,EAAEF,IAAI,CAAC;;AAEhE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAF,MAAM,CAACG,cAAc,CAACN,iBAAiB,CAACO,SAAS,EAAE,UAAU,EAAEF,IAAI,CAAC;;AAEpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAF,MAAM,CAACG,cAAc,CAACN,iBAAiB,CAACO,SAAS,EAAE,MAAM,EAAEF,IAAI,CAAC;;AAEhE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAF,MAAM,CAACG,cAAc,CAACN,iBAAiB,CAACO,SAAS,EAAE,UAAU,EAAEF,IAAI,CAAC;;AAEpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAF,MAAM,CAACG,cAAc,CAACN,iBAAiB,CAACO,SAAS,EAAE,SAAS,EAAEF,IAAI,CAAC;;AAEnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAF,MAAM,CAACG,cAAc,CAACN,iBAAiB,CAACO,SAAS,EAAE,KAAK,EAAEF,IAAI,CAAC;;AAE/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAF,MAAM,CAACG,cAAc,CAACN,iBAAiB,CAACO,SAAS,EAAE,SAAS,EAAEF,IAAI,CAAC;;AAEnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAF,MAAM,CAACG,cAAc,CAACN,iBAAiB,CAACO,SAAS,EAAE,QAAQ,EAAEF,IAAI,CAAC;;AAElE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAF,MAAM,CAACG,cAAc,CAACN,iBAAiB,CAACO,SAAS,EAAE,OAAO,EAAEF,IAAI,CAAC;;AAEjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAF,MAAM,CAACG,cAAc,CAACN,iBAAiB,CAACO,SAAS,EAAE,QAAQ,EAAEF,IAAI,CAAC;;AAElE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAF,MAAM,CAACG,cAAc,CAACN,iBAAiB,CAACO,SAAS,EAAE,WAAW,EAAEF,IAAI,CAAC;;AAErE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAF,MAAM,CAACG,cAAc,CAACN,iBAAiB,CAACO,SAAS,EAAE,QAAQ,EAAEF,IAAI,CAAC;;AAElE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAF,MAAM,CAACG,cAAc,CAACN,iBAAiB,CAACO,SAAS,EAAE,MAAM,EAAEF,IAAI,CAAC;;AAEhE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAF,MAAM,CAACG,cAAc,CAACN,iBAAiB,CAACO,SAAS,EAAE,WAAW,EAAEF,IAAI,CAAC;AAErEG,MAAM,CAACC,OAAO,GAAGT,iBAAiB"},"metadata":{},"sourceType":"script","externalDependencies":[]}