{"ast":null,"code":"'use strict';\n\nvar test = require('tape');\nvar qs = require('../');\nvar utils = require('../lib/utils');\nvar iconv = require('iconv-lite');\nvar SaferBuffer = require('safer-buffer').Buffer;\ntest('parse()', function (t) {\n  t.test('parses a simple string', function (st) {\n    st.deepEqual(qs.parse('0=foo'), {\n      0: 'foo'\n    });\n    st.deepEqual(qs.parse('foo=c++'), {\n      foo: 'c  '\n    });\n    st.deepEqual(qs.parse('a[>=]=23'), {\n      a: {\n        '>=': '23'\n      }\n    });\n    st.deepEqual(qs.parse('a[<=>]==23'), {\n      a: {\n        '<=>': '=23'\n      }\n    });\n    st.deepEqual(qs.parse('a[==]=23'), {\n      a: {\n        '==': '23'\n      }\n    });\n    st.deepEqual(qs.parse('foo', {\n      strictNullHandling: true\n    }), {\n      foo: null\n    });\n    st.deepEqual(qs.parse('foo'), {\n      foo: ''\n    });\n    st.deepEqual(qs.parse('foo='), {\n      foo: ''\n    });\n    st.deepEqual(qs.parse('foo=bar'), {\n      foo: 'bar'\n    });\n    st.deepEqual(qs.parse(' foo = bar = baz '), {\n      ' foo ': ' bar = baz '\n    });\n    st.deepEqual(qs.parse('foo=bar=baz'), {\n      foo: 'bar=baz'\n    });\n    st.deepEqual(qs.parse('foo=bar&bar=baz'), {\n      foo: 'bar',\n      bar: 'baz'\n    });\n    st.deepEqual(qs.parse('foo2=bar2&baz2='), {\n      foo2: 'bar2',\n      baz2: ''\n    });\n    st.deepEqual(qs.parse('foo=bar&baz', {\n      strictNullHandling: true\n    }), {\n      foo: 'bar',\n      baz: null\n    });\n    st.deepEqual(qs.parse('foo=bar&baz'), {\n      foo: 'bar',\n      baz: ''\n    });\n    st.deepEqual(qs.parse('cht=p3&chd=t:60,40&chs=250x100&chl=Hello|World'), {\n      cht: 'p3',\n      chd: 't:60,40',\n      chs: '250x100',\n      chl: 'Hello|World'\n    });\n    st.end();\n  });\n  t.test('arrayFormat: brackets allows only explicit arrays', function (st) {\n    st.deepEqual(qs.parse('a[]=b&a[]=c', {\n      arrayFormat: 'brackets'\n    }), {\n      a: ['b', 'c']\n    });\n    st.deepEqual(qs.parse('a[0]=b&a[1]=c', {\n      arrayFormat: 'brackets'\n    }), {\n      a: ['b', 'c']\n    });\n    st.deepEqual(qs.parse('a=b,c', {\n      arrayFormat: 'brackets'\n    }), {\n      a: 'b,c'\n    });\n    st.deepEqual(qs.parse('a=b&a=c', {\n      arrayFormat: 'brackets'\n    }), {\n      a: ['b', 'c']\n    });\n    st.end();\n  });\n  t.test('arrayFormat: indices allows only indexed arrays', function (st) {\n    st.deepEqual(qs.parse('a[]=b&a[]=c', {\n      arrayFormat: 'indices'\n    }), {\n      a: ['b', 'c']\n    });\n    st.deepEqual(qs.parse('a[0]=b&a[1]=c', {\n      arrayFormat: 'indices'\n    }), {\n      a: ['b', 'c']\n    });\n    st.deepEqual(qs.parse('a=b,c', {\n      arrayFormat: 'indices'\n    }), {\n      a: 'b,c'\n    });\n    st.deepEqual(qs.parse('a=b&a=c', {\n      arrayFormat: 'indices'\n    }), {\n      a: ['b', 'c']\n    });\n    st.end();\n  });\n  t.test('arrayFormat: comma allows only comma-separated arrays', function (st) {\n    st.deepEqual(qs.parse('a[]=b&a[]=c', {\n      arrayFormat: 'comma'\n    }), {\n      a: ['b', 'c']\n    });\n    st.deepEqual(qs.parse('a[0]=b&a[1]=c', {\n      arrayFormat: 'comma'\n    }), {\n      a: ['b', 'c']\n    });\n    st.deepEqual(qs.parse('a=b,c', {\n      arrayFormat: 'comma'\n    }), {\n      a: 'b,c'\n    });\n    st.deepEqual(qs.parse('a=b&a=c', {\n      arrayFormat: 'comma'\n    }), {\n      a: ['b', 'c']\n    });\n    st.end();\n  });\n  t.test('arrayFormat: repeat allows only repeated values', function (st) {\n    st.deepEqual(qs.parse('a[]=b&a[]=c', {\n      arrayFormat: 'repeat'\n    }), {\n      a: ['b', 'c']\n    });\n    st.deepEqual(qs.parse('a[0]=b&a[1]=c', {\n      arrayFormat: 'repeat'\n    }), {\n      a: ['b', 'c']\n    });\n    st.deepEqual(qs.parse('a=b,c', {\n      arrayFormat: 'repeat'\n    }), {\n      a: 'b,c'\n    });\n    st.deepEqual(qs.parse('a=b&a=c', {\n      arrayFormat: 'repeat'\n    }), {\n      a: ['b', 'c']\n    });\n    st.end();\n  });\n  t.test('allows enabling dot notation', function (st) {\n    st.deepEqual(qs.parse('a.b=c'), {\n      'a.b': 'c'\n    });\n    st.deepEqual(qs.parse('a.b=c', {\n      allowDots: true\n    }), {\n      a: {\n        b: 'c'\n      }\n    });\n    st.end();\n  });\n  t.deepEqual(qs.parse('a[b]=c'), {\n    a: {\n      b: 'c'\n    }\n  }, 'parses a single nested string');\n  t.deepEqual(qs.parse('a[b][c]=d'), {\n    a: {\n      b: {\n        c: 'd'\n      }\n    }\n  }, 'parses a double nested string');\n  t.deepEqual(qs.parse('a[b][c][d][e][f][g][h]=i'), {\n    a: {\n      b: {\n        c: {\n          d: {\n            e: {\n              f: {\n                '[g][h]': 'i'\n              }\n            }\n          }\n        }\n      }\n    }\n  }, 'defaults to a depth of 5');\n  t.test('only parses one level when depth = 1', function (st) {\n    st.deepEqual(qs.parse('a[b][c]=d', {\n      depth: 1\n    }), {\n      a: {\n        b: {\n          '[c]': 'd'\n        }\n      }\n    });\n    st.deepEqual(qs.parse('a[b][c][d]=e', {\n      depth: 1\n    }), {\n      a: {\n        b: {\n          '[c][d]': 'e'\n        }\n      }\n    });\n    st.end();\n  });\n  t.test('uses original key when depth = 0', function (st) {\n    st.deepEqual(qs.parse('a[0]=b&a[1]=c', {\n      depth: 0\n    }), {\n      'a[0]': 'b',\n      'a[1]': 'c'\n    });\n    st.deepEqual(qs.parse('a[0][0]=b&a[0][1]=c&a[1]=d&e=2', {\n      depth: 0\n    }), {\n      'a[0][0]': 'b',\n      'a[0][1]': 'c',\n      'a[1]': 'd',\n      e: '2'\n    });\n    st.end();\n  });\n  t.test('uses original key when depth = false', function (st) {\n    st.deepEqual(qs.parse('a[0]=b&a[1]=c', {\n      depth: false\n    }), {\n      'a[0]': 'b',\n      'a[1]': 'c'\n    });\n    st.deepEqual(qs.parse('a[0][0]=b&a[0][1]=c&a[1]=d&e=2', {\n      depth: false\n    }), {\n      'a[0][0]': 'b',\n      'a[0][1]': 'c',\n      'a[1]': 'd',\n      e: '2'\n    });\n    st.end();\n  });\n  t.deepEqual(qs.parse('a=b&a=c'), {\n    a: ['b', 'c']\n  }, 'parses a simple array');\n  t.test('parses an explicit array', function (st) {\n    st.deepEqual(qs.parse('a[]=b'), {\n      a: ['b']\n    });\n    st.deepEqual(qs.parse('a[]=b&a[]=c'), {\n      a: ['b', 'c']\n    });\n    st.deepEqual(qs.parse('a[]=b&a[]=c&a[]=d'), {\n      a: ['b', 'c', 'd']\n    });\n    st.end();\n  });\n  t.test('parses a mix of simple and explicit arrays', function (st) {\n    st.deepEqual(qs.parse('a=b&a[]=c'), {\n      a: ['b', 'c']\n    });\n    st.deepEqual(qs.parse('a[]=b&a=c'), {\n      a: ['b', 'c']\n    });\n    st.deepEqual(qs.parse('a[0]=b&a=c'), {\n      a: ['b', 'c']\n    });\n    st.deepEqual(qs.parse('a=b&a[0]=c'), {\n      a: ['b', 'c']\n    });\n    st.deepEqual(qs.parse('a[1]=b&a=c', {\n      arrayLimit: 20\n    }), {\n      a: ['b', 'c']\n    });\n    st.deepEqual(qs.parse('a[]=b&a=c', {\n      arrayLimit: 0\n    }), {\n      a: ['b', 'c']\n    });\n    st.deepEqual(qs.parse('a[]=b&a=c'), {\n      a: ['b', 'c']\n    });\n    st.deepEqual(qs.parse('a=b&a[1]=c', {\n      arrayLimit: 20\n    }), {\n      a: ['b', 'c']\n    });\n    st.deepEqual(qs.parse('a=b&a[]=c', {\n      arrayLimit: 0\n    }), {\n      a: ['b', 'c']\n    });\n    st.deepEqual(qs.parse('a=b&a[]=c'), {\n      a: ['b', 'c']\n    });\n    st.end();\n  });\n  t.test('parses a nested array', function (st) {\n    st.deepEqual(qs.parse('a[b][]=c&a[b][]=d'), {\n      a: {\n        b: ['c', 'd']\n      }\n    });\n    st.deepEqual(qs.parse('a[>=]=25'), {\n      a: {\n        '>=': '25'\n      }\n    });\n    st.end();\n  });\n  t.test('allows to specify array indices', function (st) {\n    st.deepEqual(qs.parse('a[1]=c&a[0]=b&a[2]=d'), {\n      a: ['b', 'c', 'd']\n    });\n    st.deepEqual(qs.parse('a[1]=c&a[0]=b'), {\n      a: ['b', 'c']\n    });\n    st.deepEqual(qs.parse('a[1]=c', {\n      arrayLimit: 20\n    }), {\n      a: ['c']\n    });\n    st.deepEqual(qs.parse('a[1]=c', {\n      arrayLimit: 0\n    }), {\n      a: {\n        1: 'c'\n      }\n    });\n    st.deepEqual(qs.parse('a[1]=c'), {\n      a: ['c']\n    });\n    st.end();\n  });\n  t.test('limits specific array indices to arrayLimit', function (st) {\n    st.deepEqual(qs.parse('a[20]=a', {\n      arrayLimit: 20\n    }), {\n      a: ['a']\n    });\n    st.deepEqual(qs.parse('a[21]=a', {\n      arrayLimit: 20\n    }), {\n      a: {\n        21: 'a'\n      }\n    });\n    st.deepEqual(qs.parse('a[20]=a'), {\n      a: ['a']\n    });\n    st.deepEqual(qs.parse('a[21]=a'), {\n      a: {\n        21: 'a'\n      }\n    });\n    st.end();\n  });\n  t.deepEqual(qs.parse('a[12b]=c'), {\n    a: {\n      '12b': 'c'\n    }\n  }, 'supports keys that begin with a number');\n  t.test('supports encoded = signs', function (st) {\n    st.deepEqual(qs.parse('he%3Dllo=th%3Dere'), {\n      'he=llo': 'th=ere'\n    });\n    st.end();\n  });\n  t.test('is ok with url encoded strings', function (st) {\n    st.deepEqual(qs.parse('a[b%20c]=d'), {\n      a: {\n        'b c': 'd'\n      }\n    });\n    st.deepEqual(qs.parse('a[b]=c%20d'), {\n      a: {\n        b: 'c d'\n      }\n    });\n    st.end();\n  });\n  t.test('allows brackets in the value', function (st) {\n    st.deepEqual(qs.parse('pets=[\"tobi\"]'), {\n      pets: '[\"tobi\"]'\n    });\n    st.deepEqual(qs.parse('operators=[\">=\", \"<=\"]'), {\n      operators: '[\">=\", \"<=\"]'\n    });\n    st.end();\n  });\n  t.test('allows empty values', function (st) {\n    st.deepEqual(qs.parse(''), {});\n    st.deepEqual(qs.parse(null), {});\n    st.deepEqual(qs.parse(undefined), {});\n    st.end();\n  });\n  t.test('transforms arrays to objects', function (st) {\n    st.deepEqual(qs.parse('foo[0]=bar&foo[bad]=baz'), {\n      foo: {\n        0: 'bar',\n        bad: 'baz'\n      }\n    });\n    st.deepEqual(qs.parse('foo[bad]=baz&foo[0]=bar'), {\n      foo: {\n        bad: 'baz',\n        0: 'bar'\n      }\n    });\n    st.deepEqual(qs.parse('foo[bad]=baz&foo[]=bar'), {\n      foo: {\n        bad: 'baz',\n        0: 'bar'\n      }\n    });\n    st.deepEqual(qs.parse('foo[]=bar&foo[bad]=baz'), {\n      foo: {\n        0: 'bar',\n        bad: 'baz'\n      }\n    });\n    st.deepEqual(qs.parse('foo[bad]=baz&foo[]=bar&foo[]=foo'), {\n      foo: {\n        bad: 'baz',\n        0: 'bar',\n        1: 'foo'\n      }\n    });\n    st.deepEqual(qs.parse('foo[0][a]=a&foo[0][b]=b&foo[1][a]=aa&foo[1][b]=bb'), {\n      foo: [{\n        a: 'a',\n        b: 'b'\n      }, {\n        a: 'aa',\n        b: 'bb'\n      }]\n    });\n    st.deepEqual(qs.parse('a[]=b&a[t]=u&a[hasOwnProperty]=c', {\n      allowPrototypes: false\n    }), {\n      a: {\n        0: 'b',\n        t: 'u'\n      }\n    });\n    st.deepEqual(qs.parse('a[]=b&a[t]=u&a[hasOwnProperty]=c', {\n      allowPrototypes: true\n    }), {\n      a: {\n        0: 'b',\n        t: 'u',\n        hasOwnProperty: 'c'\n      }\n    });\n    st.deepEqual(qs.parse('a[]=b&a[hasOwnProperty]=c&a[x]=y', {\n      allowPrototypes: false\n    }), {\n      a: {\n        0: 'b',\n        x: 'y'\n      }\n    });\n    st.deepEqual(qs.parse('a[]=b&a[hasOwnProperty]=c&a[x]=y', {\n      allowPrototypes: true\n    }), {\n      a: {\n        0: 'b',\n        hasOwnProperty: 'c',\n        x: 'y'\n      }\n    });\n    st.end();\n  });\n  t.test('transforms arrays to objects (dot notation)', function (st) {\n    st.deepEqual(qs.parse('foo[0].baz=bar&fool.bad=baz', {\n      allowDots: true\n    }), {\n      foo: [{\n        baz: 'bar'\n      }],\n      fool: {\n        bad: 'baz'\n      }\n    });\n    st.deepEqual(qs.parse('foo[0].baz=bar&fool.bad.boo=baz', {\n      allowDots: true\n    }), {\n      foo: [{\n        baz: 'bar'\n      }],\n      fool: {\n        bad: {\n          boo: 'baz'\n        }\n      }\n    });\n    st.deepEqual(qs.parse('foo[0][0].baz=bar&fool.bad=baz', {\n      allowDots: true\n    }), {\n      foo: [[{\n        baz: 'bar'\n      }]],\n      fool: {\n        bad: 'baz'\n      }\n    });\n    st.deepEqual(qs.parse('foo[0].baz[0]=15&foo[0].bar=2', {\n      allowDots: true\n    }), {\n      foo: [{\n        baz: ['15'],\n        bar: '2'\n      }]\n    });\n    st.deepEqual(qs.parse('foo[0].baz[0]=15&foo[0].baz[1]=16&foo[0].bar=2', {\n      allowDots: true\n    }), {\n      foo: [{\n        baz: ['15', '16'],\n        bar: '2'\n      }]\n    });\n    st.deepEqual(qs.parse('foo.bad=baz&foo[0]=bar', {\n      allowDots: true\n    }), {\n      foo: {\n        bad: 'baz',\n        0: 'bar'\n      }\n    });\n    st.deepEqual(qs.parse('foo.bad=baz&foo[]=bar', {\n      allowDots: true\n    }), {\n      foo: {\n        bad: 'baz',\n        0: 'bar'\n      }\n    });\n    st.deepEqual(qs.parse('foo[]=bar&foo.bad=baz', {\n      allowDots: true\n    }), {\n      foo: {\n        0: 'bar',\n        bad: 'baz'\n      }\n    });\n    st.deepEqual(qs.parse('foo.bad=baz&foo[]=bar&foo[]=foo', {\n      allowDots: true\n    }), {\n      foo: {\n        bad: 'baz',\n        0: 'bar',\n        1: 'foo'\n      }\n    });\n    st.deepEqual(qs.parse('foo[0].a=a&foo[0].b=b&foo[1].a=aa&foo[1].b=bb', {\n      allowDots: true\n    }), {\n      foo: [{\n        a: 'a',\n        b: 'b'\n      }, {\n        a: 'aa',\n        b: 'bb'\n      }]\n    });\n    st.end();\n  });\n  t.test('correctly prunes undefined values when converting an array to an object', function (st) {\n    st.deepEqual(qs.parse('a[2]=b&a[99999999]=c'), {\n      a: {\n        2: 'b',\n        99999999: 'c'\n      }\n    });\n    st.end();\n  });\n  t.test('supports malformed uri characters', function (st) {\n    st.deepEqual(qs.parse('{%:%}', {\n      strictNullHandling: true\n    }), {\n      '{%:%}': null\n    });\n    st.deepEqual(qs.parse('{%:%}='), {\n      '{%:%}': ''\n    });\n    st.deepEqual(qs.parse('foo=%:%}'), {\n      foo: '%:%}'\n    });\n    st.end();\n  });\n  t.test('doesn\\'t produce empty keys', function (st) {\n    st.deepEqual(qs.parse('_r=1&'), {\n      _r: '1'\n    });\n    st.end();\n  });\n  t.test('cannot access Object prototype', function (st) {\n    qs.parse('constructor[prototype][bad]=bad');\n    qs.parse('bad[constructor][prototype][bad]=bad');\n    st.equal(typeof Object.prototype.bad, 'undefined');\n    st.end();\n  });\n  t.test('parses arrays of objects', function (st) {\n    st.deepEqual(qs.parse('a[][b]=c'), {\n      a: [{\n        b: 'c'\n      }]\n    });\n    st.deepEqual(qs.parse('a[0][b]=c'), {\n      a: [{\n        b: 'c'\n      }]\n    });\n    st.end();\n  });\n  t.test('allows for empty strings in arrays', function (st) {\n    st.deepEqual(qs.parse('a[]=b&a[]=&a[]=c'), {\n      a: ['b', '', 'c']\n    });\n    st.deepEqual(qs.parse('a[0]=b&a[1]&a[2]=c&a[19]=', {\n      strictNullHandling: true,\n      arrayLimit: 20\n    }), {\n      a: ['b', null, 'c', '']\n    }, 'with arrayLimit 20 + array indices: null then empty string works');\n    st.deepEqual(qs.parse('a[]=b&a[]&a[]=c&a[]=', {\n      strictNullHandling: true,\n      arrayLimit: 0\n    }), {\n      a: ['b', null, 'c', '']\n    }, 'with arrayLimit 0 + array brackets: null then empty string works');\n    st.deepEqual(qs.parse('a[0]=b&a[1]=&a[2]=c&a[19]', {\n      strictNullHandling: true,\n      arrayLimit: 20\n    }), {\n      a: ['b', '', 'c', null]\n    }, 'with arrayLimit 20 + array indices: empty string then null works');\n    st.deepEqual(qs.parse('a[]=b&a[]=&a[]=c&a[]', {\n      strictNullHandling: true,\n      arrayLimit: 0\n    }), {\n      a: ['b', '', 'c', null]\n    }, 'with arrayLimit 0 + array brackets: empty string then null works');\n    st.deepEqual(qs.parse('a[]=&a[]=b&a[]=c'), {\n      a: ['', 'b', 'c']\n    }, 'array brackets: empty strings work');\n    st.end();\n  });\n  t.test('compacts sparse arrays', function (st) {\n    st.deepEqual(qs.parse('a[10]=1&a[2]=2', {\n      arrayLimit: 20\n    }), {\n      a: ['2', '1']\n    });\n    st.deepEqual(qs.parse('a[1][b][2][c]=1', {\n      arrayLimit: 20\n    }), {\n      a: [{\n        b: [{\n          c: '1'\n        }]\n      }]\n    });\n    st.deepEqual(qs.parse('a[1][2][3][c]=1', {\n      arrayLimit: 20\n    }), {\n      a: [[[{\n        c: '1'\n      }]]]\n    });\n    st.deepEqual(qs.parse('a[1][2][3][c][1]=1', {\n      arrayLimit: 20\n    }), {\n      a: [[[{\n        c: ['1']\n      }]]]\n    });\n    st.end();\n  });\n  t.test('parses sparse arrays', function (st) {\n    /* eslint no-sparse-arrays: 0 */\n    st.deepEqual(qs.parse('a[4]=1&a[1]=2', {\n      allowSparse: true\n    }), {\n      a: [, '2',,, '1']\n    });\n    st.deepEqual(qs.parse('a[1][b][2][c]=1', {\n      allowSparse: true\n    }), {\n      a: [, {\n        b: [,, {\n          c: '1'\n        }]\n      }]\n    });\n    st.deepEqual(qs.parse('a[1][2][3][c]=1', {\n      allowSparse: true\n    }), {\n      a: [, [,, [,,, {\n        c: '1'\n      }]]]\n    });\n    st.deepEqual(qs.parse('a[1][2][3][c][1]=1', {\n      allowSparse: true\n    }), {\n      a: [, [,, [,,, {\n        c: [, '1']\n      }]]]\n    });\n    st.end();\n  });\n  t.test('parses semi-parsed strings', function (st) {\n    st.deepEqual(qs.parse({\n      'a[b]': 'c'\n    }), {\n      a: {\n        b: 'c'\n      }\n    });\n    st.deepEqual(qs.parse({\n      'a[b]': 'c',\n      'a[d]': 'e'\n    }), {\n      a: {\n        b: 'c',\n        d: 'e'\n      }\n    });\n    st.end();\n  });\n  t.test('parses buffers correctly', function (st) {\n    var b = SaferBuffer.from('test');\n    st.deepEqual(qs.parse({\n      a: b\n    }), {\n      a: b\n    });\n    st.end();\n  });\n  t.test('parses jquery-param strings', function (st) {\n    // readable = 'filter[0][]=int1&filter[0][]==&filter[0][]=77&filter[]=and&filter[2][]=int2&filter[2][]==&filter[2][]=8'\n    var encoded = 'filter%5B0%5D%5B%5D=int1&filter%5B0%5D%5B%5D=%3D&filter%5B0%5D%5B%5D=77&filter%5B%5D=and&filter%5B2%5D%5B%5D=int2&filter%5B2%5D%5B%5D=%3D&filter%5B2%5D%5B%5D=8';\n    var expected = {\n      filter: [['int1', '=', '77'], 'and', ['int2', '=', '8']]\n    };\n    st.deepEqual(qs.parse(encoded), expected);\n    st.end();\n  });\n  t.test('continues parsing when no parent is found', function (st) {\n    st.deepEqual(qs.parse('[]=&a=b'), {\n      0: '',\n      a: 'b'\n    });\n    st.deepEqual(qs.parse('[]&a=b', {\n      strictNullHandling: true\n    }), {\n      0: null,\n      a: 'b'\n    });\n    st.deepEqual(qs.parse('[foo]=bar'), {\n      foo: 'bar'\n    });\n    st.end();\n  });\n  t.test('does not error when parsing a very long array', function (st) {\n    var str = 'a[]=a';\n    while (Buffer.byteLength(str) < 128 * 1024) {\n      str = str + '&' + str;\n    }\n    st.doesNotThrow(function () {\n      qs.parse(str);\n    });\n    st.end();\n  });\n  t.test('should not throw when a native prototype has an enumerable property', function (st) {\n    Object.prototype.crash = '';\n    Array.prototype.crash = '';\n    st.doesNotThrow(qs.parse.bind(null, 'a=b'));\n    st.deepEqual(qs.parse('a=b'), {\n      a: 'b'\n    });\n    st.doesNotThrow(qs.parse.bind(null, 'a[][b]=c'));\n    st.deepEqual(qs.parse('a[][b]=c'), {\n      a: [{\n        b: 'c'\n      }]\n    });\n    delete Object.prototype.crash;\n    delete Array.prototype.crash;\n    st.end();\n  });\n  t.test('parses a string with an alternative string delimiter', function (st) {\n    st.deepEqual(qs.parse('a=b;c=d', {\n      delimiter: ';'\n    }), {\n      a: 'b',\n      c: 'd'\n    });\n    st.end();\n  });\n  t.test('parses a string with an alternative RegExp delimiter', function (st) {\n    st.deepEqual(qs.parse('a=b; c=d', {\n      delimiter: /[;,] */\n    }), {\n      a: 'b',\n      c: 'd'\n    });\n    st.end();\n  });\n  t.test('does not use non-splittable objects as delimiters', function (st) {\n    st.deepEqual(qs.parse('a=b&c=d', {\n      delimiter: true\n    }), {\n      a: 'b',\n      c: 'd'\n    });\n    st.end();\n  });\n  t.test('allows overriding parameter limit', function (st) {\n    st.deepEqual(qs.parse('a=b&c=d', {\n      parameterLimit: 1\n    }), {\n      a: 'b'\n    });\n    st.end();\n  });\n  t.test('allows setting the parameter limit to Infinity', function (st) {\n    st.deepEqual(qs.parse('a=b&c=d', {\n      parameterLimit: Infinity\n    }), {\n      a: 'b',\n      c: 'd'\n    });\n    st.end();\n  });\n  t.test('allows overriding array limit', function (st) {\n    st.deepEqual(qs.parse('a[0]=b', {\n      arrayLimit: -1\n    }), {\n      a: {\n        0: 'b'\n      }\n    });\n    st.deepEqual(qs.parse('a[-1]=b', {\n      arrayLimit: -1\n    }), {\n      a: {\n        '-1': 'b'\n      }\n    });\n    st.deepEqual(qs.parse('a[0]=b&a[1]=c', {\n      arrayLimit: 0\n    }), {\n      a: {\n        0: 'b',\n        1: 'c'\n      }\n    });\n    st.end();\n  });\n  t.test('allows disabling array parsing', function (st) {\n    var indices = qs.parse('a[0]=b&a[1]=c', {\n      parseArrays: false\n    });\n    st.deepEqual(indices, {\n      a: {\n        0: 'b',\n        1: 'c'\n      }\n    });\n    st.equal(Array.isArray(indices.a), false, 'parseArrays:false, indices case is not an array');\n    var emptyBrackets = qs.parse('a[]=b', {\n      parseArrays: false\n    });\n    st.deepEqual(emptyBrackets, {\n      a: {\n        0: 'b'\n      }\n    });\n    st.equal(Array.isArray(emptyBrackets.a), false, 'parseArrays:false, empty brackets case is not an array');\n    st.end();\n  });\n  t.test('allows for query string prefix', function (st) {\n    st.deepEqual(qs.parse('?foo=bar', {\n      ignoreQueryPrefix: true\n    }), {\n      foo: 'bar'\n    });\n    st.deepEqual(qs.parse('foo=bar', {\n      ignoreQueryPrefix: true\n    }), {\n      foo: 'bar'\n    });\n    st.deepEqual(qs.parse('?foo=bar', {\n      ignoreQueryPrefix: false\n    }), {\n      '?foo': 'bar'\n    });\n    st.end();\n  });\n  t.test('parses an object', function (st) {\n    var input = {\n      'user[name]': {\n        'pop[bob]': 3\n      },\n      'user[email]': null\n    };\n    var expected = {\n      user: {\n        name: {\n          'pop[bob]': 3\n        },\n        email: null\n      }\n    };\n    var result = qs.parse(input);\n    st.deepEqual(result, expected);\n    st.end();\n  });\n  t.test('parses string with comma as array divider', function (st) {\n    st.deepEqual(qs.parse('foo=bar,tee', {\n      comma: true\n    }), {\n      foo: ['bar', 'tee']\n    });\n    st.deepEqual(qs.parse('foo[bar]=coffee,tee', {\n      comma: true\n    }), {\n      foo: {\n        bar: ['coffee', 'tee']\n      }\n    });\n    st.deepEqual(qs.parse('foo=', {\n      comma: true\n    }), {\n      foo: ''\n    });\n    st.deepEqual(qs.parse('foo', {\n      comma: true\n    }), {\n      foo: ''\n    });\n    st.deepEqual(qs.parse('foo', {\n      comma: true,\n      strictNullHandling: true\n    }), {\n      foo: null\n    });\n\n    // test cases inversed from from stringify tests\n    st.deepEqual(qs.parse('a[0]=c'), {\n      a: ['c']\n    });\n    st.deepEqual(qs.parse('a[]=c'), {\n      a: ['c']\n    });\n    st.deepEqual(qs.parse('a[]=c', {\n      comma: true\n    }), {\n      a: ['c']\n    });\n    st.deepEqual(qs.parse('a[0]=c&a[1]=d'), {\n      a: ['c', 'd']\n    });\n    st.deepEqual(qs.parse('a[]=c&a[]=d'), {\n      a: ['c', 'd']\n    });\n    st.deepEqual(qs.parse('a=c,d', {\n      comma: true\n    }), {\n      a: ['c', 'd']\n    });\n    st.end();\n  });\n  t.test('parses values with comma as array divider', function (st) {\n    st.deepEqual(qs.parse({\n      foo: 'bar,tee'\n    }, {\n      comma: false\n    }), {\n      foo: 'bar,tee'\n    });\n    st.deepEqual(qs.parse({\n      foo: 'bar,tee'\n    }, {\n      comma: true\n    }), {\n      foo: ['bar', 'tee']\n    });\n    st.end();\n  });\n  t.test('use number decoder, parses string that has one number with comma option enabled', function (st) {\n    var decoder = function (str, defaultDecoder, charset, type) {\n      if (!isNaN(Number(str))) {\n        return parseFloat(str);\n      }\n      return defaultDecoder(str, defaultDecoder, charset, type);\n    };\n    st.deepEqual(qs.parse('foo=1', {\n      comma: true,\n      decoder: decoder\n    }), {\n      foo: 1\n    });\n    st.deepEqual(qs.parse('foo=0', {\n      comma: true,\n      decoder: decoder\n    }), {\n      foo: 0\n    });\n    st.end();\n  });\n  t.test('parses brackets holds array of arrays when having two parts of strings with comma as array divider', function (st) {\n    st.deepEqual(qs.parse('foo[]=1,2,3&foo[]=4,5,6', {\n      comma: true\n    }), {\n      foo: [['1', '2', '3'], ['4', '5', '6']]\n    });\n    st.deepEqual(qs.parse('foo[]=1,2,3&foo[]=', {\n      comma: true\n    }), {\n      foo: [['1', '2', '3'], '']\n    });\n    st.deepEqual(qs.parse('foo[]=1,2,3&foo[]=,', {\n      comma: true\n    }), {\n      foo: [['1', '2', '3'], ['', '']]\n    });\n    st.deepEqual(qs.parse('foo[]=1,2,3&foo[]=a', {\n      comma: true\n    }), {\n      foo: [['1', '2', '3'], 'a']\n    });\n    st.end();\n  });\n  t.test('parses comma delimited array while having percent-encoded comma treated as normal text', function (st) {\n    st.deepEqual(qs.parse('foo=a%2Cb', {\n      comma: true\n    }), {\n      foo: 'a,b'\n    });\n    st.deepEqual(qs.parse('foo=a%2C%20b,d', {\n      comma: true\n    }), {\n      foo: ['a, b', 'd']\n    });\n    st.deepEqual(qs.parse('foo=a%2C%20b,c%2C%20d', {\n      comma: true\n    }), {\n      foo: ['a, b', 'c, d']\n    });\n    st.end();\n  });\n  t.test('parses an object in dot notation', function (st) {\n    var input = {\n      'user.name': {\n        'pop[bob]': 3\n      },\n      'user.email.': null\n    };\n    var expected = {\n      user: {\n        name: {\n          'pop[bob]': 3\n        },\n        email: null\n      }\n    };\n    var result = qs.parse(input, {\n      allowDots: true\n    });\n    st.deepEqual(result, expected);\n    st.end();\n  });\n  t.test('parses an object and not child values', function (st) {\n    var input = {\n      'user[name]': {\n        'pop[bob]': {\n          test: 3\n        }\n      },\n      'user[email]': null\n    };\n    var expected = {\n      user: {\n        name: {\n          'pop[bob]': {\n            test: 3\n          }\n        },\n        email: null\n      }\n    };\n    var result = qs.parse(input);\n    st.deepEqual(result, expected);\n    st.end();\n  });\n  t.test('does not blow up when Buffer global is missing', function (st) {\n    var tempBuffer = global.Buffer;\n    delete global.Buffer;\n    var result = qs.parse('a=b&c=d');\n    global.Buffer = tempBuffer;\n    st.deepEqual(result, {\n      a: 'b',\n      c: 'd'\n    });\n    st.end();\n  });\n  t.test('does not crash when parsing circular references', function (st) {\n    var a = {};\n    a.b = a;\n    var parsed;\n    st.doesNotThrow(function () {\n      parsed = qs.parse({\n        'foo[bar]': 'baz',\n        'foo[baz]': a\n      });\n    });\n    st.equal('foo' in parsed, true, 'parsed has \"foo\" property');\n    st.equal('bar' in parsed.foo, true);\n    st.equal('baz' in parsed.foo, true);\n    st.equal(parsed.foo.bar, 'baz');\n    st.deepEqual(parsed.foo.baz, a);\n    st.end();\n  });\n  t.test('does not crash when parsing deep objects', function (st) {\n    var parsed;\n    var str = 'foo';\n    for (var i = 0; i < 5000; i++) {\n      str += '[p]';\n    }\n    str += '=bar';\n    st.doesNotThrow(function () {\n      parsed = qs.parse(str, {\n        depth: 5000\n      });\n    });\n    st.equal('foo' in parsed, true, 'parsed has \"foo\" property');\n    var depth = 0;\n    var ref = parsed.foo;\n    while (ref = ref.p) {\n      depth += 1;\n    }\n    st.equal(depth, 5000, 'parsed is 5000 properties deep');\n    st.end();\n  });\n  t.test('parses null objects correctly', {\n    skip: !Object.create\n  }, function (st) {\n    var a = Object.create(null);\n    a.b = 'c';\n    st.deepEqual(qs.parse(a), {\n      b: 'c'\n    });\n    var result = qs.parse({\n      a: a\n    });\n    st.equal('a' in result, true, 'result has \"a\" property');\n    st.deepEqual(result.a, a);\n    st.end();\n  });\n  t.test('parses dates correctly', function (st) {\n    var now = new Date();\n    st.deepEqual(qs.parse({\n      a: now\n    }), {\n      a: now\n    });\n    st.end();\n  });\n  t.test('parses regular expressions correctly', function (st) {\n    var re = /^test$/;\n    st.deepEqual(qs.parse({\n      a: re\n    }), {\n      a: re\n    });\n    st.end();\n  });\n  t.test('does not allow overwriting prototype properties', function (st) {\n    st.deepEqual(qs.parse('a[hasOwnProperty]=b', {\n      allowPrototypes: false\n    }), {});\n    st.deepEqual(qs.parse('hasOwnProperty=b', {\n      allowPrototypes: false\n    }), {});\n    st.deepEqual(qs.parse('toString', {\n      allowPrototypes: false\n    }), {}, 'bare \"toString\" results in {}');\n    st.end();\n  });\n  t.test('can allow overwriting prototype properties', function (st) {\n    st.deepEqual(qs.parse('a[hasOwnProperty]=b', {\n      allowPrototypes: true\n    }), {\n      a: {\n        hasOwnProperty: 'b'\n      }\n    });\n    st.deepEqual(qs.parse('hasOwnProperty=b', {\n      allowPrototypes: true\n    }), {\n      hasOwnProperty: 'b'\n    });\n    st.deepEqual(qs.parse('toString', {\n      allowPrototypes: true\n    }), {\n      toString: ''\n    }, 'bare \"toString\" results in { toString: \"\" }');\n    st.end();\n  });\n  t.test('params starting with a closing bracket', function (st) {\n    st.deepEqual(qs.parse(']=toString'), {\n      ']': 'toString'\n    });\n    st.deepEqual(qs.parse(']]=toString'), {\n      ']]': 'toString'\n    });\n    st.deepEqual(qs.parse(']hello]=toString'), {\n      ']hello]': 'toString'\n    });\n    st.end();\n  });\n  t.test('params starting with a starting bracket', function (st) {\n    st.deepEqual(qs.parse('[=toString'), {\n      '[': 'toString'\n    });\n    st.deepEqual(qs.parse('[[=toString'), {\n      '[[': 'toString'\n    });\n    st.deepEqual(qs.parse('[hello[=toString'), {\n      '[hello[': 'toString'\n    });\n    st.end();\n  });\n  t.test('add keys to objects', function (st) {\n    st.deepEqual(qs.parse('a[b]=c&a=d'), {\n      a: {\n        b: 'c',\n        d: true\n      }\n    }, 'can add keys to objects');\n    st.deepEqual(qs.parse('a[b]=c&a=toString'), {\n      a: {\n        b: 'c'\n      }\n    }, 'can not overwrite prototype');\n    st.deepEqual(qs.parse('a[b]=c&a=toString', {\n      allowPrototypes: true\n    }), {\n      a: {\n        b: 'c',\n        toString: true\n      }\n    }, 'can overwrite prototype with allowPrototypes true');\n    st.deepEqual(qs.parse('a[b]=c&a=toString', {\n      plainObjects: true\n    }), {\n      __proto__: null,\n      a: {\n        __proto__: null,\n        b: 'c',\n        toString: true\n      }\n    }, 'can overwrite prototype with plainObjects true');\n    st.end();\n  });\n  t.test('dunder proto is ignored', function (st) {\n    var payload = 'categories[__proto__]=login&categories[__proto__]&categories[length]=42';\n    var result = qs.parse(payload, {\n      allowPrototypes: true\n    });\n    st.deepEqual(result, {\n      categories: {\n        length: '42'\n      }\n    }, 'silent [[Prototype]] payload');\n    var plainResult = qs.parse(payload, {\n      allowPrototypes: true,\n      plainObjects: true\n    });\n    st.deepEqual(plainResult, {\n      __proto__: null,\n      categories: {\n        __proto__: null,\n        length: '42'\n      }\n    }, 'silent [[Prototype]] payload: plain objects');\n    var query = qs.parse('categories[__proto__]=cats&categories[__proto__]=dogs&categories[some][json]=toInject', {\n      allowPrototypes: true\n    });\n    st.notOk(Array.isArray(query.categories), 'is not an array');\n    st.notOk(query.categories instanceof Array, 'is not instanceof an array');\n    st.deepEqual(query.categories, {\n      some: {\n        json: 'toInject'\n      }\n    });\n    st.equal(JSON.stringify(query.categories), '{\"some\":{\"json\":\"toInject\"}}', 'stringifies as a non-array');\n    st.deepEqual(qs.parse('foo[__proto__][hidden]=value&foo[bar]=stuffs', {\n      allowPrototypes: true\n    }), {\n      foo: {\n        bar: 'stuffs'\n      }\n    }, 'hidden values');\n    st.deepEqual(qs.parse('foo[__proto__][hidden]=value&foo[bar]=stuffs', {\n      allowPrototypes: true,\n      plainObjects: true\n    }), {\n      __proto__: null,\n      foo: {\n        __proto__: null,\n        bar: 'stuffs'\n      }\n    }, 'hidden values: plain objects');\n    st.end();\n  });\n  t.test('can return null objects', {\n    skip: !Object.create\n  }, function (st) {\n    var expected = Object.create(null);\n    expected.a = Object.create(null);\n    expected.a.b = 'c';\n    expected.a.hasOwnProperty = 'd';\n    st.deepEqual(qs.parse('a[b]=c&a[hasOwnProperty]=d', {\n      plainObjects: true\n    }), expected);\n    st.deepEqual(qs.parse(null, {\n      plainObjects: true\n    }), Object.create(null));\n    var expectedArray = Object.create(null);\n    expectedArray.a = Object.create(null);\n    expectedArray.a[0] = 'b';\n    expectedArray.a.c = 'd';\n    st.deepEqual(qs.parse('a[]=b&a[c]=d', {\n      plainObjects: true\n    }), expectedArray);\n    st.end();\n  });\n  t.test('can parse with custom encoding', function (st) {\n    st.deepEqual(qs.parse('%8c%a7=%91%e5%8d%e3%95%7b', {\n      decoder: function (str) {\n        var reg = /%([0-9A-F]{2})/ig;\n        var result = [];\n        var parts = reg.exec(str);\n        while (parts) {\n          result.push(parseInt(parts[1], 16));\n          parts = reg.exec(str);\n        }\n        return String(iconv.decode(SaferBuffer.from(result), 'shift_jis'));\n      }\n    }), {\n      県: '大阪府'\n    });\n    st.end();\n  });\n  t.test('receives the default decoder as a second argument', function (st) {\n    st.plan(1);\n    qs.parse('a', {\n      decoder: function (str, defaultDecoder) {\n        st.equal(defaultDecoder, utils.decode);\n      }\n    });\n    st.end();\n  });\n  t.test('throws error with wrong decoder', function (st) {\n    st['throws'](function () {\n      qs.parse({}, {\n        decoder: 'string'\n      });\n    }, new TypeError('Decoder has to be a function.'));\n    st.end();\n  });\n  t.test('does not mutate the options argument', function (st) {\n    var options = {};\n    qs.parse('a[b]=true', options);\n    st.deepEqual(options, {});\n    st.end();\n  });\n  t.test('throws if an invalid charset is specified', function (st) {\n    st['throws'](function () {\n      qs.parse('a=b', {\n        charset: 'foobar'\n      });\n    }, new TypeError('The charset option must be either utf-8, iso-8859-1, or undefined'));\n    st.end();\n  });\n  t.test('parses an iso-8859-1 string if asked to', function (st) {\n    st.deepEqual(qs.parse('%A2=%BD', {\n      charset: 'iso-8859-1'\n    }), {\n      '¢': '½'\n    });\n    st.end();\n  });\n  var urlEncodedCheckmarkInUtf8 = '%E2%9C%93';\n  var urlEncodedOSlashInUtf8 = '%C3%B8';\n  var urlEncodedNumCheckmark = '%26%2310003%3B';\n  var urlEncodedNumSmiley = '%26%239786%3B';\n  t.test('prefers an utf-8 charset specified by the utf8 sentinel to a default charset of iso-8859-1', function (st) {\n    st.deepEqual(qs.parse('utf8=' + urlEncodedCheckmarkInUtf8 + '&' + urlEncodedOSlashInUtf8 + '=' + urlEncodedOSlashInUtf8, {\n      charsetSentinel: true,\n      charset: 'iso-8859-1'\n    }), {\n      ø: 'ø'\n    });\n    st.end();\n  });\n  t.test('prefers an iso-8859-1 charset specified by the utf8 sentinel to a default charset of utf-8', function (st) {\n    st.deepEqual(qs.parse('utf8=' + urlEncodedNumCheckmark + '&' + urlEncodedOSlashInUtf8 + '=' + urlEncodedOSlashInUtf8, {\n      charsetSentinel: true,\n      charset: 'utf-8'\n    }), {\n      'Ã¸': 'Ã¸'\n    });\n    st.end();\n  });\n  t.test('does not require the utf8 sentinel to be defined before the parameters whose decoding it affects', function (st) {\n    st.deepEqual(qs.parse('a=' + urlEncodedOSlashInUtf8 + '&utf8=' + urlEncodedNumCheckmark, {\n      charsetSentinel: true,\n      charset: 'utf-8'\n    }), {\n      a: 'Ã¸'\n    });\n    st.end();\n  });\n  t.test('should ignore an utf8 sentinel with an unknown value', function (st) {\n    st.deepEqual(qs.parse('utf8=foo&' + urlEncodedOSlashInUtf8 + '=' + urlEncodedOSlashInUtf8, {\n      charsetSentinel: true,\n      charset: 'utf-8'\n    }), {\n      ø: 'ø'\n    });\n    st.end();\n  });\n  t.test('uses the utf8 sentinel to switch to utf-8 when no default charset is given', function (st) {\n    st.deepEqual(qs.parse('utf8=' + urlEncodedCheckmarkInUtf8 + '&' + urlEncodedOSlashInUtf8 + '=' + urlEncodedOSlashInUtf8, {\n      charsetSentinel: true\n    }), {\n      ø: 'ø'\n    });\n    st.end();\n  });\n  t.test('uses the utf8 sentinel to switch to iso-8859-1 when no default charset is given', function (st) {\n    st.deepEqual(qs.parse('utf8=' + urlEncodedNumCheckmark + '&' + urlEncodedOSlashInUtf8 + '=' + urlEncodedOSlashInUtf8, {\n      charsetSentinel: true\n    }), {\n      'Ã¸': 'Ã¸'\n    });\n    st.end();\n  });\n  t.test('interprets numeric entities in iso-8859-1 when `interpretNumericEntities`', function (st) {\n    st.deepEqual(qs.parse('foo=' + urlEncodedNumSmiley, {\n      charset: 'iso-8859-1',\n      interpretNumericEntities: true\n    }), {\n      foo: '☺'\n    });\n    st.end();\n  });\n  t.test('handles a custom decoder returning `null`, in the `iso-8859-1` charset, when `interpretNumericEntities`', function (st) {\n    st.deepEqual(qs.parse('foo=&bar=' + urlEncodedNumSmiley, {\n      charset: 'iso-8859-1',\n      decoder: function (str, defaultDecoder, charset) {\n        return str ? defaultDecoder(str, defaultDecoder, charset) : null;\n      },\n      interpretNumericEntities: true\n    }), {\n      foo: null,\n      bar: '☺'\n    });\n    st.end();\n  });\n  t.test('does not interpret numeric entities in iso-8859-1 when `interpretNumericEntities` is absent', function (st) {\n    st.deepEqual(qs.parse('foo=' + urlEncodedNumSmiley, {\n      charset: 'iso-8859-1'\n    }), {\n      foo: '&#9786;'\n    });\n    st.end();\n  });\n  t.test('does not interpret numeric entities when the charset is utf-8, even when `interpretNumericEntities`', function (st) {\n    st.deepEqual(qs.parse('foo=' + urlEncodedNumSmiley, {\n      charset: 'utf-8',\n      interpretNumericEntities: true\n    }), {\n      foo: '&#9786;'\n    });\n    st.end();\n  });\n  t.test('does not interpret %uXXXX syntax in iso-8859-1 mode', function (st) {\n    st.deepEqual(qs.parse('%u263A=%u263A', {\n      charset: 'iso-8859-1'\n    }), {\n      '%u263A': '%u263A'\n    });\n    st.end();\n  });\n  t.test('allows for decoding keys and values differently', function (st) {\n    var decoder = function (str, defaultDecoder, charset, type) {\n      if (type === 'key') {\n        return defaultDecoder(str, defaultDecoder, charset, type).toLowerCase();\n      }\n      if (type === 'value') {\n        return defaultDecoder(str, defaultDecoder, charset, type).toUpperCase();\n      }\n      throw 'this should never happen! type: ' + type;\n    };\n    st.deepEqual(qs.parse('KeY=vAlUe', {\n      decoder: decoder\n    }), {\n      key: 'VALUE'\n    });\n    st.end();\n  });\n  t.end();\n});","map":{"version":3,"names":["test","require","qs","utils","iconv","SaferBuffer","Buffer","t","st","deepEqual","parse","foo","a","strictNullHandling","bar","foo2","baz2","baz","cht","chd","chs","chl","end","arrayFormat","allowDots","b","c","d","e","f","depth","arrayLimit","pets","operators","undefined","bad","allowPrototypes","hasOwnProperty","x","fool","boo","_r","equal","Object","prototype","allowSparse","from","encoded","expected","filter","str","byteLength","doesNotThrow","crash","Array","bind","delimiter","parameterLimit","Infinity","indices","parseArrays","isArray","emptyBrackets","ignoreQueryPrefix","input","user","name","email","result","comma","decoder","defaultDecoder","charset","type","isNaN","Number","parseFloat","tempBuffer","global","parsed","i","ref","p","skip","create","now","Date","re","toString","plainObjects","__proto__","payload","categories","length","plainResult","query","notOk","some","json","JSON","stringify","expectedArray","reg","parts","exec","push","parseInt","String","decode","県","plan","TypeError","options","urlEncodedCheckmarkInUtf8","urlEncodedOSlashInUtf8","urlEncodedNumCheckmark","urlEncodedNumSmiley","charsetSentinel","ø","interpretNumericEntities","toLowerCase","toUpperCase","key"],"sources":["C:/Users/91930/Desktop/Github projects/Pharmacy Demo/back-end/node_modules/qs/test/parse.js"],"sourcesContent":["'use strict';\r\n\r\nvar test = require('tape');\r\nvar qs = require('../');\r\nvar utils = require('../lib/utils');\r\nvar iconv = require('iconv-lite');\r\nvar SaferBuffer = require('safer-buffer').Buffer;\r\n\r\ntest('parse()', function (t) {\r\n    t.test('parses a simple string', function (st) {\r\n        st.deepEqual(qs.parse('0=foo'), { 0: 'foo' });\r\n        st.deepEqual(qs.parse('foo=c++'), { foo: 'c  ' });\r\n        st.deepEqual(qs.parse('a[>=]=23'), { a: { '>=': '23' } });\r\n        st.deepEqual(qs.parse('a[<=>]==23'), { a: { '<=>': '=23' } });\r\n        st.deepEqual(qs.parse('a[==]=23'), { a: { '==': '23' } });\r\n        st.deepEqual(qs.parse('foo', { strictNullHandling: true }), { foo: null });\r\n        st.deepEqual(qs.parse('foo'), { foo: '' });\r\n        st.deepEqual(qs.parse('foo='), { foo: '' });\r\n        st.deepEqual(qs.parse('foo=bar'), { foo: 'bar' });\r\n        st.deepEqual(qs.parse(' foo = bar = baz '), { ' foo ': ' bar = baz ' });\r\n        st.deepEqual(qs.parse('foo=bar=baz'), { foo: 'bar=baz' });\r\n        st.deepEqual(qs.parse('foo=bar&bar=baz'), { foo: 'bar', bar: 'baz' });\r\n        st.deepEqual(qs.parse('foo2=bar2&baz2='), { foo2: 'bar2', baz2: '' });\r\n        st.deepEqual(qs.parse('foo=bar&baz', { strictNullHandling: true }), { foo: 'bar', baz: null });\r\n        st.deepEqual(qs.parse('foo=bar&baz'), { foo: 'bar', baz: '' });\r\n        st.deepEqual(qs.parse('cht=p3&chd=t:60,40&chs=250x100&chl=Hello|World'), {\r\n            cht: 'p3',\r\n            chd: 't:60,40',\r\n            chs: '250x100',\r\n            chl: 'Hello|World'\r\n        });\r\n        st.end();\r\n    });\r\n\r\n    t.test('arrayFormat: brackets allows only explicit arrays', function (st) {\r\n        st.deepEqual(qs.parse('a[]=b&a[]=c', { arrayFormat: 'brackets' }), { a: ['b', 'c'] });\r\n        st.deepEqual(qs.parse('a[0]=b&a[1]=c', { arrayFormat: 'brackets' }), { a: ['b', 'c'] });\r\n        st.deepEqual(qs.parse('a=b,c', { arrayFormat: 'brackets' }), { a: 'b,c' });\r\n        st.deepEqual(qs.parse('a=b&a=c', { arrayFormat: 'brackets' }), { a: ['b', 'c'] });\r\n        st.end();\r\n    });\r\n\r\n    t.test('arrayFormat: indices allows only indexed arrays', function (st) {\r\n        st.deepEqual(qs.parse('a[]=b&a[]=c', { arrayFormat: 'indices' }), { a: ['b', 'c'] });\r\n        st.deepEqual(qs.parse('a[0]=b&a[1]=c', { arrayFormat: 'indices' }), { a: ['b', 'c'] });\r\n        st.deepEqual(qs.parse('a=b,c', { arrayFormat: 'indices' }), { a: 'b,c' });\r\n        st.deepEqual(qs.parse('a=b&a=c', { arrayFormat: 'indices' }), { a: ['b', 'c'] });\r\n        st.end();\r\n    });\r\n\r\n    t.test('arrayFormat: comma allows only comma-separated arrays', function (st) {\r\n        st.deepEqual(qs.parse('a[]=b&a[]=c', { arrayFormat: 'comma' }), { a: ['b', 'c'] });\r\n        st.deepEqual(qs.parse('a[0]=b&a[1]=c', { arrayFormat: 'comma' }), { a: ['b', 'c'] });\r\n        st.deepEqual(qs.parse('a=b,c', { arrayFormat: 'comma' }), { a: 'b,c' });\r\n        st.deepEqual(qs.parse('a=b&a=c', { arrayFormat: 'comma' }), { a: ['b', 'c'] });\r\n        st.end();\r\n    });\r\n\r\n    t.test('arrayFormat: repeat allows only repeated values', function (st) {\r\n        st.deepEqual(qs.parse('a[]=b&a[]=c', { arrayFormat: 'repeat' }), { a: ['b', 'c'] });\r\n        st.deepEqual(qs.parse('a[0]=b&a[1]=c', { arrayFormat: 'repeat' }), { a: ['b', 'c'] });\r\n        st.deepEqual(qs.parse('a=b,c', { arrayFormat: 'repeat' }), { a: 'b,c' });\r\n        st.deepEqual(qs.parse('a=b&a=c', { arrayFormat: 'repeat' }), { a: ['b', 'c'] });\r\n        st.end();\r\n    });\r\n\r\n    t.test('allows enabling dot notation', function (st) {\r\n        st.deepEqual(qs.parse('a.b=c'), { 'a.b': 'c' });\r\n        st.deepEqual(qs.parse('a.b=c', { allowDots: true }), { a: { b: 'c' } });\r\n        st.end();\r\n    });\r\n\r\n    t.deepEqual(qs.parse('a[b]=c'), { a: { b: 'c' } }, 'parses a single nested string');\r\n    t.deepEqual(qs.parse('a[b][c]=d'), { a: { b: { c: 'd' } } }, 'parses a double nested string');\r\n    t.deepEqual(\r\n        qs.parse('a[b][c][d][e][f][g][h]=i'),\r\n        { a: { b: { c: { d: { e: { f: { '[g][h]': 'i' } } } } } } },\r\n        'defaults to a depth of 5'\r\n    );\r\n\r\n    t.test('only parses one level when depth = 1', function (st) {\r\n        st.deepEqual(qs.parse('a[b][c]=d', { depth: 1 }), { a: { b: { '[c]': 'd' } } });\r\n        st.deepEqual(qs.parse('a[b][c][d]=e', { depth: 1 }), { a: { b: { '[c][d]': 'e' } } });\r\n        st.end();\r\n    });\r\n\r\n    t.test('uses original key when depth = 0', function (st) {\r\n        st.deepEqual(qs.parse('a[0]=b&a[1]=c', { depth: 0 }), { 'a[0]': 'b', 'a[1]': 'c' });\r\n        st.deepEqual(qs.parse('a[0][0]=b&a[0][1]=c&a[1]=d&e=2', { depth: 0 }), { 'a[0][0]': 'b', 'a[0][1]': 'c', 'a[1]': 'd', e: '2' });\r\n        st.end();\r\n    });\r\n\r\n    t.test('uses original key when depth = false', function (st) {\r\n        st.deepEqual(qs.parse('a[0]=b&a[1]=c', { depth: false }), { 'a[0]': 'b', 'a[1]': 'c' });\r\n        st.deepEqual(qs.parse('a[0][0]=b&a[0][1]=c&a[1]=d&e=2', { depth: false }), { 'a[0][0]': 'b', 'a[0][1]': 'c', 'a[1]': 'd', e: '2' });\r\n        st.end();\r\n    });\r\n\r\n    t.deepEqual(qs.parse('a=b&a=c'), { a: ['b', 'c'] }, 'parses a simple array');\r\n\r\n    t.test('parses an explicit array', function (st) {\r\n        st.deepEqual(qs.parse('a[]=b'), { a: ['b'] });\r\n        st.deepEqual(qs.parse('a[]=b&a[]=c'), { a: ['b', 'c'] });\r\n        st.deepEqual(qs.parse('a[]=b&a[]=c&a[]=d'), { a: ['b', 'c', 'd'] });\r\n        st.end();\r\n    });\r\n\r\n    t.test('parses a mix of simple and explicit arrays', function (st) {\r\n        st.deepEqual(qs.parse('a=b&a[]=c'), { a: ['b', 'c'] });\r\n        st.deepEqual(qs.parse('a[]=b&a=c'), { a: ['b', 'c'] });\r\n        st.deepEqual(qs.parse('a[0]=b&a=c'), { a: ['b', 'c'] });\r\n        st.deepEqual(qs.parse('a=b&a[0]=c'), { a: ['b', 'c'] });\r\n\r\n        st.deepEqual(qs.parse('a[1]=b&a=c', { arrayLimit: 20 }), { a: ['b', 'c'] });\r\n        st.deepEqual(qs.parse('a[]=b&a=c', { arrayLimit: 0 }), { a: ['b', 'c'] });\r\n        st.deepEqual(qs.parse('a[]=b&a=c'), { a: ['b', 'c'] });\r\n\r\n        st.deepEqual(qs.parse('a=b&a[1]=c', { arrayLimit: 20 }), { a: ['b', 'c'] });\r\n        st.deepEqual(qs.parse('a=b&a[]=c', { arrayLimit: 0 }), { a: ['b', 'c'] });\r\n        st.deepEqual(qs.parse('a=b&a[]=c'), { a: ['b', 'c'] });\r\n\r\n        st.end();\r\n    });\r\n\r\n    t.test('parses a nested array', function (st) {\r\n        st.deepEqual(qs.parse('a[b][]=c&a[b][]=d'), { a: { b: ['c', 'd'] } });\r\n        st.deepEqual(qs.parse('a[>=]=25'), { a: { '>=': '25' } });\r\n        st.end();\r\n    });\r\n\r\n    t.test('allows to specify array indices', function (st) {\r\n        st.deepEqual(qs.parse('a[1]=c&a[0]=b&a[2]=d'), { a: ['b', 'c', 'd'] });\r\n        st.deepEqual(qs.parse('a[1]=c&a[0]=b'), { a: ['b', 'c'] });\r\n        st.deepEqual(qs.parse('a[1]=c', { arrayLimit: 20 }), { a: ['c'] });\r\n        st.deepEqual(qs.parse('a[1]=c', { arrayLimit: 0 }), { a: { 1: 'c' } });\r\n        st.deepEqual(qs.parse('a[1]=c'), { a: ['c'] });\r\n        st.end();\r\n    });\r\n\r\n    t.test('limits specific array indices to arrayLimit', function (st) {\r\n        st.deepEqual(qs.parse('a[20]=a', { arrayLimit: 20 }), { a: ['a'] });\r\n        st.deepEqual(qs.parse('a[21]=a', { arrayLimit: 20 }), { a: { 21: 'a' } });\r\n\r\n        st.deepEqual(qs.parse('a[20]=a'), { a: ['a'] });\r\n        st.deepEqual(qs.parse('a[21]=a'), { a: { 21: 'a' } });\r\n        st.end();\r\n    });\r\n\r\n    t.deepEqual(qs.parse('a[12b]=c'), { a: { '12b': 'c' } }, 'supports keys that begin with a number');\r\n\r\n    t.test('supports encoded = signs', function (st) {\r\n        st.deepEqual(qs.parse('he%3Dllo=th%3Dere'), { 'he=llo': 'th=ere' });\r\n        st.end();\r\n    });\r\n\r\n    t.test('is ok with url encoded strings', function (st) {\r\n        st.deepEqual(qs.parse('a[b%20c]=d'), { a: { 'b c': 'd' } });\r\n        st.deepEqual(qs.parse('a[b]=c%20d'), { a: { b: 'c d' } });\r\n        st.end();\r\n    });\r\n\r\n    t.test('allows brackets in the value', function (st) {\r\n        st.deepEqual(qs.parse('pets=[\"tobi\"]'), { pets: '[\"tobi\"]' });\r\n        st.deepEqual(qs.parse('operators=[\">=\", \"<=\"]'), { operators: '[\">=\", \"<=\"]' });\r\n        st.end();\r\n    });\r\n\r\n    t.test('allows empty values', function (st) {\r\n        st.deepEqual(qs.parse(''), {});\r\n        st.deepEqual(qs.parse(null), {});\r\n        st.deepEqual(qs.parse(undefined), {});\r\n        st.end();\r\n    });\r\n\r\n    t.test('transforms arrays to objects', function (st) {\r\n        st.deepEqual(qs.parse('foo[0]=bar&foo[bad]=baz'), { foo: { 0: 'bar', bad: 'baz' } });\r\n        st.deepEqual(qs.parse('foo[bad]=baz&foo[0]=bar'), { foo: { bad: 'baz', 0: 'bar' } });\r\n        st.deepEqual(qs.parse('foo[bad]=baz&foo[]=bar'), { foo: { bad: 'baz', 0: 'bar' } });\r\n        st.deepEqual(qs.parse('foo[]=bar&foo[bad]=baz'), { foo: { 0: 'bar', bad: 'baz' } });\r\n        st.deepEqual(qs.parse('foo[bad]=baz&foo[]=bar&foo[]=foo'), { foo: { bad: 'baz', 0: 'bar', 1: 'foo' } });\r\n        st.deepEqual(qs.parse('foo[0][a]=a&foo[0][b]=b&foo[1][a]=aa&foo[1][b]=bb'), { foo: [{ a: 'a', b: 'b' }, { a: 'aa', b: 'bb' }] });\r\n\r\n        st.deepEqual(qs.parse('a[]=b&a[t]=u&a[hasOwnProperty]=c', { allowPrototypes: false }), { a: { 0: 'b', t: 'u' } });\r\n        st.deepEqual(qs.parse('a[]=b&a[t]=u&a[hasOwnProperty]=c', { allowPrototypes: true }), { a: { 0: 'b', t: 'u', hasOwnProperty: 'c' } });\r\n        st.deepEqual(qs.parse('a[]=b&a[hasOwnProperty]=c&a[x]=y', { allowPrototypes: false }), { a: { 0: 'b', x: 'y' } });\r\n        st.deepEqual(qs.parse('a[]=b&a[hasOwnProperty]=c&a[x]=y', { allowPrototypes: true }), { a: { 0: 'b', hasOwnProperty: 'c', x: 'y' } });\r\n        st.end();\r\n    });\r\n\r\n    t.test('transforms arrays to objects (dot notation)', function (st) {\r\n        st.deepEqual(qs.parse('foo[0].baz=bar&fool.bad=baz', { allowDots: true }), { foo: [{ baz: 'bar' }], fool: { bad: 'baz' } });\r\n        st.deepEqual(qs.parse('foo[0].baz=bar&fool.bad.boo=baz', { allowDots: true }), { foo: [{ baz: 'bar' }], fool: { bad: { boo: 'baz' } } });\r\n        st.deepEqual(qs.parse('foo[0][0].baz=bar&fool.bad=baz', { allowDots: true }), { foo: [[{ baz: 'bar' }]], fool: { bad: 'baz' } });\r\n        st.deepEqual(qs.parse('foo[0].baz[0]=15&foo[0].bar=2', { allowDots: true }), { foo: [{ baz: ['15'], bar: '2' }] });\r\n        st.deepEqual(qs.parse('foo[0].baz[0]=15&foo[0].baz[1]=16&foo[0].bar=2', { allowDots: true }), { foo: [{ baz: ['15', '16'], bar: '2' }] });\r\n        st.deepEqual(qs.parse('foo.bad=baz&foo[0]=bar', { allowDots: true }), { foo: { bad: 'baz', 0: 'bar' } });\r\n        st.deepEqual(qs.parse('foo.bad=baz&foo[]=bar', { allowDots: true }), { foo: { bad: 'baz', 0: 'bar' } });\r\n        st.deepEqual(qs.parse('foo[]=bar&foo.bad=baz', { allowDots: true }), { foo: { 0: 'bar', bad: 'baz' } });\r\n        st.deepEqual(qs.parse('foo.bad=baz&foo[]=bar&foo[]=foo', { allowDots: true }), { foo: { bad: 'baz', 0: 'bar', 1: 'foo' } });\r\n        st.deepEqual(qs.parse('foo[0].a=a&foo[0].b=b&foo[1].a=aa&foo[1].b=bb', { allowDots: true }), { foo: [{ a: 'a', b: 'b' }, { a: 'aa', b: 'bb' }] });\r\n        st.end();\r\n    });\r\n\r\n    t.test('correctly prunes undefined values when converting an array to an object', function (st) {\r\n        st.deepEqual(qs.parse('a[2]=b&a[99999999]=c'), { a: { 2: 'b', 99999999: 'c' } });\r\n        st.end();\r\n    });\r\n\r\n    t.test('supports malformed uri characters', function (st) {\r\n        st.deepEqual(qs.parse('{%:%}', { strictNullHandling: true }), { '{%:%}': null });\r\n        st.deepEqual(qs.parse('{%:%}='), { '{%:%}': '' });\r\n        st.deepEqual(qs.parse('foo=%:%}'), { foo: '%:%}' });\r\n        st.end();\r\n    });\r\n\r\n    t.test('doesn\\'t produce empty keys', function (st) {\r\n        st.deepEqual(qs.parse('_r=1&'), { _r: '1' });\r\n        st.end();\r\n    });\r\n\r\n    t.test('cannot access Object prototype', function (st) {\r\n        qs.parse('constructor[prototype][bad]=bad');\r\n        qs.parse('bad[constructor][prototype][bad]=bad');\r\n        st.equal(typeof Object.prototype.bad, 'undefined');\r\n        st.end();\r\n    });\r\n\r\n    t.test('parses arrays of objects', function (st) {\r\n        st.deepEqual(qs.parse('a[][b]=c'), { a: [{ b: 'c' }] });\r\n        st.deepEqual(qs.parse('a[0][b]=c'), { a: [{ b: 'c' }] });\r\n        st.end();\r\n    });\r\n\r\n    t.test('allows for empty strings in arrays', function (st) {\r\n        st.deepEqual(qs.parse('a[]=b&a[]=&a[]=c'), { a: ['b', '', 'c'] });\r\n\r\n        st.deepEqual(\r\n            qs.parse('a[0]=b&a[1]&a[2]=c&a[19]=', { strictNullHandling: true, arrayLimit: 20 }),\r\n            { a: ['b', null, 'c', ''] },\r\n            'with arrayLimit 20 + array indices: null then empty string works'\r\n        );\r\n        st.deepEqual(\r\n            qs.parse('a[]=b&a[]&a[]=c&a[]=', { strictNullHandling: true, arrayLimit: 0 }),\r\n            { a: ['b', null, 'c', ''] },\r\n            'with arrayLimit 0 + array brackets: null then empty string works'\r\n        );\r\n\r\n        st.deepEqual(\r\n            qs.parse('a[0]=b&a[1]=&a[2]=c&a[19]', { strictNullHandling: true, arrayLimit: 20 }),\r\n            { a: ['b', '', 'c', null] },\r\n            'with arrayLimit 20 + array indices: empty string then null works'\r\n        );\r\n        st.deepEqual(\r\n            qs.parse('a[]=b&a[]=&a[]=c&a[]', { strictNullHandling: true, arrayLimit: 0 }),\r\n            { a: ['b', '', 'c', null] },\r\n            'with arrayLimit 0 + array brackets: empty string then null works'\r\n        );\r\n\r\n        st.deepEqual(\r\n            qs.parse('a[]=&a[]=b&a[]=c'),\r\n            { a: ['', 'b', 'c'] },\r\n            'array brackets: empty strings work'\r\n        );\r\n        st.end();\r\n    });\r\n\r\n    t.test('compacts sparse arrays', function (st) {\r\n        st.deepEqual(qs.parse('a[10]=1&a[2]=2', { arrayLimit: 20 }), { a: ['2', '1'] });\r\n        st.deepEqual(qs.parse('a[1][b][2][c]=1', { arrayLimit: 20 }), { a: [{ b: [{ c: '1' }] }] });\r\n        st.deepEqual(qs.parse('a[1][2][3][c]=1', { arrayLimit: 20 }), { a: [[[{ c: '1' }]]] });\r\n        st.deepEqual(qs.parse('a[1][2][3][c][1]=1', { arrayLimit: 20 }), { a: [[[{ c: ['1'] }]]] });\r\n        st.end();\r\n    });\r\n\r\n    t.test('parses sparse arrays', function (st) {\r\n        /* eslint no-sparse-arrays: 0 */\r\n        st.deepEqual(qs.parse('a[4]=1&a[1]=2', { allowSparse: true }), { a: [, '2', , , '1'] });\r\n        st.deepEqual(qs.parse('a[1][b][2][c]=1', { allowSparse: true }), { a: [, { b: [, , { c: '1' }] }] });\r\n        st.deepEqual(qs.parse('a[1][2][3][c]=1', { allowSparse: true }), { a: [, [, , [, , , { c: '1' }]]] });\r\n        st.deepEqual(qs.parse('a[1][2][3][c][1]=1', { allowSparse: true }), { a: [, [, , [, , , { c: [, '1'] }]]] });\r\n        st.end();\r\n    });\r\n\r\n    t.test('parses semi-parsed strings', function (st) {\r\n        st.deepEqual(qs.parse({ 'a[b]': 'c' }), { a: { b: 'c' } });\r\n        st.deepEqual(qs.parse({ 'a[b]': 'c', 'a[d]': 'e' }), { a: { b: 'c', d: 'e' } });\r\n        st.end();\r\n    });\r\n\r\n    t.test('parses buffers correctly', function (st) {\r\n        var b = SaferBuffer.from('test');\r\n        st.deepEqual(qs.parse({ a: b }), { a: b });\r\n        st.end();\r\n    });\r\n\r\n    t.test('parses jquery-param strings', function (st) {\r\n        // readable = 'filter[0][]=int1&filter[0][]==&filter[0][]=77&filter[]=and&filter[2][]=int2&filter[2][]==&filter[2][]=8'\r\n        var encoded = 'filter%5B0%5D%5B%5D=int1&filter%5B0%5D%5B%5D=%3D&filter%5B0%5D%5B%5D=77&filter%5B%5D=and&filter%5B2%5D%5B%5D=int2&filter%5B2%5D%5B%5D=%3D&filter%5B2%5D%5B%5D=8';\r\n        var expected = { filter: [['int1', '=', '77'], 'and', ['int2', '=', '8']] };\r\n        st.deepEqual(qs.parse(encoded), expected);\r\n        st.end();\r\n    });\r\n\r\n    t.test('continues parsing when no parent is found', function (st) {\r\n        st.deepEqual(qs.parse('[]=&a=b'), { 0: '', a: 'b' });\r\n        st.deepEqual(qs.parse('[]&a=b', { strictNullHandling: true }), { 0: null, a: 'b' });\r\n        st.deepEqual(qs.parse('[foo]=bar'), { foo: 'bar' });\r\n        st.end();\r\n    });\r\n\r\n    t.test('does not error when parsing a very long array', function (st) {\r\n        var str = 'a[]=a';\r\n        while (Buffer.byteLength(str) < 128 * 1024) {\r\n            str = str + '&' + str;\r\n        }\r\n\r\n        st.doesNotThrow(function () {\r\n            qs.parse(str);\r\n        });\r\n\r\n        st.end();\r\n    });\r\n\r\n    t.test('should not throw when a native prototype has an enumerable property', function (st) {\r\n        Object.prototype.crash = '';\r\n        Array.prototype.crash = '';\r\n        st.doesNotThrow(qs.parse.bind(null, 'a=b'));\r\n        st.deepEqual(qs.parse('a=b'), { a: 'b' });\r\n        st.doesNotThrow(qs.parse.bind(null, 'a[][b]=c'));\r\n        st.deepEqual(qs.parse('a[][b]=c'), { a: [{ b: 'c' }] });\r\n        delete Object.prototype.crash;\r\n        delete Array.prototype.crash;\r\n        st.end();\r\n    });\r\n\r\n    t.test('parses a string with an alternative string delimiter', function (st) {\r\n        st.deepEqual(qs.parse('a=b;c=d', { delimiter: ';' }), { a: 'b', c: 'd' });\r\n        st.end();\r\n    });\r\n\r\n    t.test('parses a string with an alternative RegExp delimiter', function (st) {\r\n        st.deepEqual(qs.parse('a=b; c=d', { delimiter: /[;,] */ }), { a: 'b', c: 'd' });\r\n        st.end();\r\n    });\r\n\r\n    t.test('does not use non-splittable objects as delimiters', function (st) {\r\n        st.deepEqual(qs.parse('a=b&c=d', { delimiter: true }), { a: 'b', c: 'd' });\r\n        st.end();\r\n    });\r\n\r\n    t.test('allows overriding parameter limit', function (st) {\r\n        st.deepEqual(qs.parse('a=b&c=d', { parameterLimit: 1 }), { a: 'b' });\r\n        st.end();\r\n    });\r\n\r\n    t.test('allows setting the parameter limit to Infinity', function (st) {\r\n        st.deepEqual(qs.parse('a=b&c=d', { parameterLimit: Infinity }), { a: 'b', c: 'd' });\r\n        st.end();\r\n    });\r\n\r\n    t.test('allows overriding array limit', function (st) {\r\n        st.deepEqual(qs.parse('a[0]=b', { arrayLimit: -1 }), { a: { 0: 'b' } });\r\n        st.deepEqual(qs.parse('a[-1]=b', { arrayLimit: -1 }), { a: { '-1': 'b' } });\r\n        st.deepEqual(qs.parse('a[0]=b&a[1]=c', { arrayLimit: 0 }), { a: { 0: 'b', 1: 'c' } });\r\n        st.end();\r\n    });\r\n\r\n    t.test('allows disabling array parsing', function (st) {\r\n        var indices = qs.parse('a[0]=b&a[1]=c', { parseArrays: false });\r\n        st.deepEqual(indices, { a: { 0: 'b', 1: 'c' } });\r\n        st.equal(Array.isArray(indices.a), false, 'parseArrays:false, indices case is not an array');\r\n\r\n        var emptyBrackets = qs.parse('a[]=b', { parseArrays: false });\r\n        st.deepEqual(emptyBrackets, { a: { 0: 'b' } });\r\n        st.equal(Array.isArray(emptyBrackets.a), false, 'parseArrays:false, empty brackets case is not an array');\r\n\r\n        st.end();\r\n    });\r\n\r\n    t.test('allows for query string prefix', function (st) {\r\n        st.deepEqual(qs.parse('?foo=bar', { ignoreQueryPrefix: true }), { foo: 'bar' });\r\n        st.deepEqual(qs.parse('foo=bar', { ignoreQueryPrefix: true }), { foo: 'bar' });\r\n        st.deepEqual(qs.parse('?foo=bar', { ignoreQueryPrefix: false }), { '?foo': 'bar' });\r\n\r\n        st.end();\r\n    });\r\n\r\n    t.test('parses an object', function (st) {\r\n        var input = {\r\n            'user[name]': { 'pop[bob]': 3 },\r\n            'user[email]': null\r\n        };\r\n\r\n        var expected = {\r\n            user: {\r\n                name: { 'pop[bob]': 3 },\r\n                email: null\r\n            }\r\n        };\r\n\r\n        var result = qs.parse(input);\r\n\r\n        st.deepEqual(result, expected);\r\n        st.end();\r\n    });\r\n\r\n    t.test('parses string with comma as array divider', function (st) {\r\n        st.deepEqual(qs.parse('foo=bar,tee', { comma: true }), { foo: ['bar', 'tee'] });\r\n        st.deepEqual(qs.parse('foo[bar]=coffee,tee', { comma: true }), { foo: { bar: ['coffee', 'tee'] } });\r\n        st.deepEqual(qs.parse('foo=', { comma: true }), { foo: '' });\r\n        st.deepEqual(qs.parse('foo', { comma: true }), { foo: '' });\r\n        st.deepEqual(qs.parse('foo', { comma: true, strictNullHandling: true }), { foo: null });\r\n\r\n        // test cases inversed from from stringify tests\r\n        st.deepEqual(qs.parse('a[0]=c'), { a: ['c'] });\r\n        st.deepEqual(qs.parse('a[]=c'), { a: ['c'] });\r\n        st.deepEqual(qs.parse('a[]=c', { comma: true }), { a: ['c'] });\r\n\r\n        st.deepEqual(qs.parse('a[0]=c&a[1]=d'), { a: ['c', 'd'] });\r\n        st.deepEqual(qs.parse('a[]=c&a[]=d'), { a: ['c', 'd'] });\r\n        st.deepEqual(qs.parse('a=c,d', { comma: true }), { a: ['c', 'd'] });\r\n\r\n        st.end();\r\n    });\r\n\r\n    t.test('parses values with comma as array divider', function (st) {\r\n        st.deepEqual(qs.parse({ foo: 'bar,tee' }, { comma: false }), { foo: 'bar,tee' });\r\n        st.deepEqual(qs.parse({ foo: 'bar,tee' }, { comma: true }), { foo: ['bar', 'tee'] });\r\n        st.end();\r\n    });\r\n\r\n    t.test('use number decoder, parses string that has one number with comma option enabled', function (st) {\r\n        var decoder = function (str, defaultDecoder, charset, type) {\r\n            if (!isNaN(Number(str))) {\r\n                return parseFloat(str);\r\n            }\r\n            return defaultDecoder(str, defaultDecoder, charset, type);\r\n        };\r\n\r\n        st.deepEqual(qs.parse('foo=1', { comma: true, decoder: decoder }), { foo: 1 });\r\n        st.deepEqual(qs.parse('foo=0', { comma: true, decoder: decoder }), { foo: 0 });\r\n\r\n        st.end();\r\n    });\r\n\r\n    t.test('parses brackets holds array of arrays when having two parts of strings with comma as array divider', function (st) {\r\n        st.deepEqual(qs.parse('foo[]=1,2,3&foo[]=4,5,6', { comma: true }), { foo: [['1', '2', '3'], ['4', '5', '6']] });\r\n        st.deepEqual(qs.parse('foo[]=1,2,3&foo[]=', { comma: true }), { foo: [['1', '2', '3'], ''] });\r\n        st.deepEqual(qs.parse('foo[]=1,2,3&foo[]=,', { comma: true }), { foo: [['1', '2', '3'], ['', '']] });\r\n        st.deepEqual(qs.parse('foo[]=1,2,3&foo[]=a', { comma: true }), { foo: [['1', '2', '3'], 'a'] });\r\n\r\n        st.end();\r\n    });\r\n\r\n    t.test('parses comma delimited array while having percent-encoded comma treated as normal text', function (st) {\r\n        st.deepEqual(qs.parse('foo=a%2Cb', { comma: true }), { foo: 'a,b' });\r\n        st.deepEqual(qs.parse('foo=a%2C%20b,d', { comma: true }), { foo: ['a, b', 'd'] });\r\n        st.deepEqual(qs.parse('foo=a%2C%20b,c%2C%20d', { comma: true }), { foo: ['a, b', 'c, d'] });\r\n\r\n        st.end();\r\n    });\r\n\r\n    t.test('parses an object in dot notation', function (st) {\r\n        var input = {\r\n            'user.name': { 'pop[bob]': 3 },\r\n            'user.email.': null\r\n        };\r\n\r\n        var expected = {\r\n            user: {\r\n                name: { 'pop[bob]': 3 },\r\n                email: null\r\n            }\r\n        };\r\n\r\n        var result = qs.parse(input, { allowDots: true });\r\n\r\n        st.deepEqual(result, expected);\r\n        st.end();\r\n    });\r\n\r\n    t.test('parses an object and not child values', function (st) {\r\n        var input = {\r\n            'user[name]': { 'pop[bob]': { test: 3 } },\r\n            'user[email]': null\r\n        };\r\n\r\n        var expected = {\r\n            user: {\r\n                name: { 'pop[bob]': { test: 3 } },\r\n                email: null\r\n            }\r\n        };\r\n\r\n        var result = qs.parse(input);\r\n\r\n        st.deepEqual(result, expected);\r\n        st.end();\r\n    });\r\n\r\n    t.test('does not blow up when Buffer global is missing', function (st) {\r\n        var tempBuffer = global.Buffer;\r\n        delete global.Buffer;\r\n        var result = qs.parse('a=b&c=d');\r\n        global.Buffer = tempBuffer;\r\n        st.deepEqual(result, { a: 'b', c: 'd' });\r\n        st.end();\r\n    });\r\n\r\n    t.test('does not crash when parsing circular references', function (st) {\r\n        var a = {};\r\n        a.b = a;\r\n\r\n        var parsed;\r\n\r\n        st.doesNotThrow(function () {\r\n            parsed = qs.parse({ 'foo[bar]': 'baz', 'foo[baz]': a });\r\n        });\r\n\r\n        st.equal('foo' in parsed, true, 'parsed has \"foo\" property');\r\n        st.equal('bar' in parsed.foo, true);\r\n        st.equal('baz' in parsed.foo, true);\r\n        st.equal(parsed.foo.bar, 'baz');\r\n        st.deepEqual(parsed.foo.baz, a);\r\n        st.end();\r\n    });\r\n\r\n    t.test('does not crash when parsing deep objects', function (st) {\r\n        var parsed;\r\n        var str = 'foo';\r\n\r\n        for (var i = 0; i < 5000; i++) {\r\n            str += '[p]';\r\n        }\r\n\r\n        str += '=bar';\r\n\r\n        st.doesNotThrow(function () {\r\n            parsed = qs.parse(str, { depth: 5000 });\r\n        });\r\n\r\n        st.equal('foo' in parsed, true, 'parsed has \"foo\" property');\r\n\r\n        var depth = 0;\r\n        var ref = parsed.foo;\r\n        while ((ref = ref.p)) {\r\n            depth += 1;\r\n        }\r\n\r\n        st.equal(depth, 5000, 'parsed is 5000 properties deep');\r\n\r\n        st.end();\r\n    });\r\n\r\n    t.test('parses null objects correctly', { skip: !Object.create }, function (st) {\r\n        var a = Object.create(null);\r\n        a.b = 'c';\r\n\r\n        st.deepEqual(qs.parse(a), { b: 'c' });\r\n        var result = qs.parse({ a: a });\r\n        st.equal('a' in result, true, 'result has \"a\" property');\r\n        st.deepEqual(result.a, a);\r\n        st.end();\r\n    });\r\n\r\n    t.test('parses dates correctly', function (st) {\r\n        var now = new Date();\r\n        st.deepEqual(qs.parse({ a: now }), { a: now });\r\n        st.end();\r\n    });\r\n\r\n    t.test('parses regular expressions correctly', function (st) {\r\n        var re = /^test$/;\r\n        st.deepEqual(qs.parse({ a: re }), { a: re });\r\n        st.end();\r\n    });\r\n\r\n    t.test('does not allow overwriting prototype properties', function (st) {\r\n        st.deepEqual(qs.parse('a[hasOwnProperty]=b', { allowPrototypes: false }), {});\r\n        st.deepEqual(qs.parse('hasOwnProperty=b', { allowPrototypes: false }), {});\r\n\r\n        st.deepEqual(\r\n            qs.parse('toString', { allowPrototypes: false }),\r\n            {},\r\n            'bare \"toString\" results in {}'\r\n        );\r\n\r\n        st.end();\r\n    });\r\n\r\n    t.test('can allow overwriting prototype properties', function (st) {\r\n        st.deepEqual(qs.parse('a[hasOwnProperty]=b', { allowPrototypes: true }), { a: { hasOwnProperty: 'b' } });\r\n        st.deepEqual(qs.parse('hasOwnProperty=b', { allowPrototypes: true }), { hasOwnProperty: 'b' });\r\n\r\n        st.deepEqual(\r\n            qs.parse('toString', { allowPrototypes: true }),\r\n            { toString: '' },\r\n            'bare \"toString\" results in { toString: \"\" }'\r\n        );\r\n\r\n        st.end();\r\n    });\r\n\r\n    t.test('params starting with a closing bracket', function (st) {\r\n        st.deepEqual(qs.parse(']=toString'), { ']': 'toString' });\r\n        st.deepEqual(qs.parse(']]=toString'), { ']]': 'toString' });\r\n        st.deepEqual(qs.parse(']hello]=toString'), { ']hello]': 'toString' });\r\n        st.end();\r\n    });\r\n\r\n    t.test('params starting with a starting bracket', function (st) {\r\n        st.deepEqual(qs.parse('[=toString'), { '[': 'toString' });\r\n        st.deepEqual(qs.parse('[[=toString'), { '[[': 'toString' });\r\n        st.deepEqual(qs.parse('[hello[=toString'), { '[hello[': 'toString' });\r\n        st.end();\r\n    });\r\n\r\n    t.test('add keys to objects', function (st) {\r\n        st.deepEqual(\r\n            qs.parse('a[b]=c&a=d'),\r\n            { a: { b: 'c', d: true } },\r\n            'can add keys to objects'\r\n        );\r\n\r\n        st.deepEqual(\r\n            qs.parse('a[b]=c&a=toString'),\r\n            { a: { b: 'c' } },\r\n            'can not overwrite prototype'\r\n        );\r\n\r\n        st.deepEqual(\r\n            qs.parse('a[b]=c&a=toString', { allowPrototypes: true }),\r\n            { a: { b: 'c', toString: true } },\r\n            'can overwrite prototype with allowPrototypes true'\r\n        );\r\n\r\n        st.deepEqual(\r\n            qs.parse('a[b]=c&a=toString', { plainObjects: true }),\r\n            { __proto__: null, a: { __proto__: null, b: 'c', toString: true } },\r\n            'can overwrite prototype with plainObjects true'\r\n        );\r\n\r\n        st.end();\r\n    });\r\n\r\n    t.test('dunder proto is ignored', function (st) {\r\n        var payload = 'categories[__proto__]=login&categories[__proto__]&categories[length]=42';\r\n        var result = qs.parse(payload, { allowPrototypes: true });\r\n\r\n        st.deepEqual(\r\n            result,\r\n            {\r\n                categories: {\r\n                    length: '42'\r\n                }\r\n            },\r\n            'silent [[Prototype]] payload'\r\n        );\r\n\r\n        var plainResult = qs.parse(payload, { allowPrototypes: true, plainObjects: true });\r\n\r\n        st.deepEqual(\r\n            plainResult,\r\n            {\r\n                __proto__: null,\r\n                categories: {\r\n                    __proto__: null,\r\n                    length: '42'\r\n                }\r\n            },\r\n            'silent [[Prototype]] payload: plain objects'\r\n        );\r\n\r\n        var query = qs.parse('categories[__proto__]=cats&categories[__proto__]=dogs&categories[some][json]=toInject', { allowPrototypes: true });\r\n\r\n        st.notOk(Array.isArray(query.categories), 'is not an array');\r\n        st.notOk(query.categories instanceof Array, 'is not instanceof an array');\r\n        st.deepEqual(query.categories, { some: { json: 'toInject' } });\r\n        st.equal(JSON.stringify(query.categories), '{\"some\":{\"json\":\"toInject\"}}', 'stringifies as a non-array');\r\n\r\n        st.deepEqual(\r\n            qs.parse('foo[__proto__][hidden]=value&foo[bar]=stuffs', { allowPrototypes: true }),\r\n            {\r\n                foo: {\r\n                    bar: 'stuffs'\r\n                }\r\n            },\r\n            'hidden values'\r\n        );\r\n\r\n        st.deepEqual(\r\n            qs.parse('foo[__proto__][hidden]=value&foo[bar]=stuffs', { allowPrototypes: true, plainObjects: true }),\r\n            {\r\n                __proto__: null,\r\n                foo: {\r\n                    __proto__: null,\r\n                    bar: 'stuffs'\r\n                }\r\n            },\r\n            'hidden values: plain objects'\r\n        );\r\n\r\n        st.end();\r\n    });\r\n\r\n    t.test('can return null objects', { skip: !Object.create }, function (st) {\r\n        var expected = Object.create(null);\r\n        expected.a = Object.create(null);\r\n        expected.a.b = 'c';\r\n        expected.a.hasOwnProperty = 'd';\r\n        st.deepEqual(qs.parse('a[b]=c&a[hasOwnProperty]=d', { plainObjects: true }), expected);\r\n        st.deepEqual(qs.parse(null, { plainObjects: true }), Object.create(null));\r\n        var expectedArray = Object.create(null);\r\n        expectedArray.a = Object.create(null);\r\n        expectedArray.a[0] = 'b';\r\n        expectedArray.a.c = 'd';\r\n        st.deepEqual(qs.parse('a[]=b&a[c]=d', { plainObjects: true }), expectedArray);\r\n        st.end();\r\n    });\r\n\r\n    t.test('can parse with custom encoding', function (st) {\r\n        st.deepEqual(qs.parse('%8c%a7=%91%e5%8d%e3%95%7b', {\r\n            decoder: function (str) {\r\n                var reg = /%([0-9A-F]{2})/ig;\r\n                var result = [];\r\n                var parts = reg.exec(str);\r\n                while (parts) {\r\n                    result.push(parseInt(parts[1], 16));\r\n                    parts = reg.exec(str);\r\n                }\r\n                return String(iconv.decode(SaferBuffer.from(result), 'shift_jis'));\r\n            }\r\n        }), { 県: '大阪府' });\r\n        st.end();\r\n    });\r\n\r\n    t.test('receives the default decoder as a second argument', function (st) {\r\n        st.plan(1);\r\n        qs.parse('a', {\r\n            decoder: function (str, defaultDecoder) {\r\n                st.equal(defaultDecoder, utils.decode);\r\n            }\r\n        });\r\n        st.end();\r\n    });\r\n\r\n    t.test('throws error with wrong decoder', function (st) {\r\n        st['throws'](function () {\r\n            qs.parse({}, { decoder: 'string' });\r\n        }, new TypeError('Decoder has to be a function.'));\r\n        st.end();\r\n    });\r\n\r\n    t.test('does not mutate the options argument', function (st) {\r\n        var options = {};\r\n        qs.parse('a[b]=true', options);\r\n        st.deepEqual(options, {});\r\n        st.end();\r\n    });\r\n\r\n    t.test('throws if an invalid charset is specified', function (st) {\r\n        st['throws'](function () {\r\n            qs.parse('a=b', { charset: 'foobar' });\r\n        }, new TypeError('The charset option must be either utf-8, iso-8859-1, or undefined'));\r\n        st.end();\r\n    });\r\n\r\n    t.test('parses an iso-8859-1 string if asked to', function (st) {\r\n        st.deepEqual(qs.parse('%A2=%BD', { charset: 'iso-8859-1' }), { '¢': '½' });\r\n        st.end();\r\n    });\r\n\r\n    var urlEncodedCheckmarkInUtf8 = '%E2%9C%93';\r\n    var urlEncodedOSlashInUtf8 = '%C3%B8';\r\n    var urlEncodedNumCheckmark = '%26%2310003%3B';\r\n    var urlEncodedNumSmiley = '%26%239786%3B';\r\n\r\n    t.test('prefers an utf-8 charset specified by the utf8 sentinel to a default charset of iso-8859-1', function (st) {\r\n        st.deepEqual(qs.parse('utf8=' + urlEncodedCheckmarkInUtf8 + '&' + urlEncodedOSlashInUtf8 + '=' + urlEncodedOSlashInUtf8, { charsetSentinel: true, charset: 'iso-8859-1' }), { ø: 'ø' });\r\n        st.end();\r\n    });\r\n\r\n    t.test('prefers an iso-8859-1 charset specified by the utf8 sentinel to a default charset of utf-8', function (st) {\r\n        st.deepEqual(qs.parse('utf8=' + urlEncodedNumCheckmark + '&' + urlEncodedOSlashInUtf8 + '=' + urlEncodedOSlashInUtf8, { charsetSentinel: true, charset: 'utf-8' }), { 'Ã¸': 'Ã¸' });\r\n        st.end();\r\n    });\r\n\r\n    t.test('does not require the utf8 sentinel to be defined before the parameters whose decoding it affects', function (st) {\r\n        st.deepEqual(qs.parse('a=' + urlEncodedOSlashInUtf8 + '&utf8=' + urlEncodedNumCheckmark, { charsetSentinel: true, charset: 'utf-8' }), { a: 'Ã¸' });\r\n        st.end();\r\n    });\r\n\r\n    t.test('should ignore an utf8 sentinel with an unknown value', function (st) {\r\n        st.deepEqual(qs.parse('utf8=foo&' + urlEncodedOSlashInUtf8 + '=' + urlEncodedOSlashInUtf8, { charsetSentinel: true, charset: 'utf-8' }), { ø: 'ø' });\r\n        st.end();\r\n    });\r\n\r\n    t.test('uses the utf8 sentinel to switch to utf-8 when no default charset is given', function (st) {\r\n        st.deepEqual(qs.parse('utf8=' + urlEncodedCheckmarkInUtf8 + '&' + urlEncodedOSlashInUtf8 + '=' + urlEncodedOSlashInUtf8, { charsetSentinel: true }), { ø: 'ø' });\r\n        st.end();\r\n    });\r\n\r\n    t.test('uses the utf8 sentinel to switch to iso-8859-1 when no default charset is given', function (st) {\r\n        st.deepEqual(qs.parse('utf8=' + urlEncodedNumCheckmark + '&' + urlEncodedOSlashInUtf8 + '=' + urlEncodedOSlashInUtf8, { charsetSentinel: true }), { 'Ã¸': 'Ã¸' });\r\n        st.end();\r\n    });\r\n\r\n    t.test('interprets numeric entities in iso-8859-1 when `interpretNumericEntities`', function (st) {\r\n        st.deepEqual(qs.parse('foo=' + urlEncodedNumSmiley, { charset: 'iso-8859-1', interpretNumericEntities: true }), { foo: '☺' });\r\n        st.end();\r\n    });\r\n\r\n    t.test('handles a custom decoder returning `null`, in the `iso-8859-1` charset, when `interpretNumericEntities`', function (st) {\r\n        st.deepEqual(qs.parse('foo=&bar=' + urlEncodedNumSmiley, {\r\n            charset: 'iso-8859-1',\r\n            decoder: function (str, defaultDecoder, charset) {\r\n                return str ? defaultDecoder(str, defaultDecoder, charset) : null;\r\n            },\r\n            interpretNumericEntities: true\r\n        }), { foo: null, bar: '☺' });\r\n        st.end();\r\n    });\r\n\r\n    t.test('does not interpret numeric entities in iso-8859-1 when `interpretNumericEntities` is absent', function (st) {\r\n        st.deepEqual(qs.parse('foo=' + urlEncodedNumSmiley, { charset: 'iso-8859-1' }), { foo: '&#9786;' });\r\n        st.end();\r\n    });\r\n\r\n    t.test('does not interpret numeric entities when the charset is utf-8, even when `interpretNumericEntities`', function (st) {\r\n        st.deepEqual(qs.parse('foo=' + urlEncodedNumSmiley, { charset: 'utf-8', interpretNumericEntities: true }), { foo: '&#9786;' });\r\n        st.end();\r\n    });\r\n\r\n    t.test('does not interpret %uXXXX syntax in iso-8859-1 mode', function (st) {\r\n        st.deepEqual(qs.parse('%u263A=%u263A', { charset: 'iso-8859-1' }), { '%u263A': '%u263A' });\r\n        st.end();\r\n    });\r\n\r\n    t.test('allows for decoding keys and values differently', function (st) {\r\n        var decoder = function (str, defaultDecoder, charset, type) {\r\n            if (type === 'key') {\r\n                return defaultDecoder(str, defaultDecoder, charset, type).toLowerCase();\r\n            }\r\n            if (type === 'value') {\r\n                return defaultDecoder(str, defaultDecoder, charset, type).toUpperCase();\r\n            }\r\n            throw 'this should never happen! type: ' + type;\r\n        };\r\n\r\n        st.deepEqual(qs.parse('KeY=vAlUe', { decoder: decoder }), { key: 'VALUE' });\r\n        st.end();\r\n    });\r\n\r\n    t.end();\r\n});\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}