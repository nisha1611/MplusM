{"ast":null,"code":"'use strict';\n\nmodule.exports = parallelLimit;\n\n/*!\r\n * ignore\r\n */\n\nfunction parallelLimit(fns, limit, callback) {\n  let numInProgress = 0;\n  let numFinished = 0;\n  let error = null;\n  if (limit <= 0) {\n    throw new Error('Limit must be positive');\n  }\n  if (fns.length === 0) {\n    return callback(null, []);\n  }\n  for (let i = 0; i < fns.length && i < limit; ++i) {\n    _start();\n  }\n  function _start() {\n    fns[numFinished + numInProgress](_done(numFinished + numInProgress));\n    ++numInProgress;\n  }\n  const results = [];\n  function _done(index) {\n    return (err, res) => {\n      --numInProgress;\n      ++numFinished;\n      if (error != null) {\n        return;\n      }\n      if (err != null) {\n        error = err;\n        return callback(error);\n      }\n      results[index] = res;\n      if (numFinished === fns.length) {\n        return callback(null, results);\n      } else if (numFinished + numInProgress < fns.length) {\n        _start();\n      }\n    };\n  }\n}","map":{"version":3,"names":["module","exports","parallelLimit","fns","limit","callback","numInProgress","numFinished","error","Error","length","i","_start","_done","results","index","err","res"],"sources":["C:/Users/91930/Desktop/Github projects/Pharmacy Demo/back-end/node_modules/mongoose/lib/helpers/parallelLimit.js"],"sourcesContent":["'use strict';\r\n\r\nmodule.exports = parallelLimit;\r\n\r\n/*!\r\n * ignore\r\n */\r\n\r\nfunction parallelLimit(fns, limit, callback) {\r\n  let numInProgress = 0;\r\n  let numFinished = 0;\r\n  let error = null;\r\n\r\n  if (limit <= 0) {\r\n    throw new Error('Limit must be positive');\r\n  }\r\n\r\n  if (fns.length === 0) {\r\n    return callback(null, []);\r\n  }\r\n\r\n  for (let i = 0; i < fns.length && i < limit; ++i) {\r\n    _start();\r\n  }\r\n\r\n  function _start() {\r\n    fns[numFinished + numInProgress](_done(numFinished + numInProgress));\r\n    ++numInProgress;\r\n  }\r\n\r\n  const results = [];\r\n\r\n  function _done(index) {\r\n    return (err, res) => {\r\n      --numInProgress;\r\n      ++numFinished;\r\n\r\n      if (error != null) {\r\n        return;\r\n      }\r\n      if (err != null) {\r\n        error = err;\r\n        return callback(error);\r\n      }\r\n\r\n      results[index] = res;\r\n\r\n      if (numFinished === fns.length) {\r\n        return callback(null, results);\r\n      } else if (numFinished + numInProgress < fns.length) {\r\n        _start();\r\n      }\r\n    };\r\n  }\r\n}\r\n"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,OAAO,GAAGC,aAAa;;AAE9B;AACA;AACA;;AAEA,SAASA,aAAa,CAACC,GAAG,EAAEC,KAAK,EAAEC,QAAQ,EAAE;EAC3C,IAAIC,aAAa,GAAG,CAAC;EACrB,IAAIC,WAAW,GAAG,CAAC;EACnB,IAAIC,KAAK,GAAG,IAAI;EAEhB,IAAIJ,KAAK,IAAI,CAAC,EAAE;IACd,MAAM,IAAIK,KAAK,CAAC,wBAAwB,CAAC;EAC3C;EAEA,IAAIN,GAAG,CAACO,MAAM,KAAK,CAAC,EAAE;IACpB,OAAOL,QAAQ,CAAC,IAAI,EAAE,EAAE,CAAC;EAC3B;EAEA,KAAK,IAAIM,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGR,GAAG,CAACO,MAAM,IAAIC,CAAC,GAAGP,KAAK,EAAE,EAAEO,CAAC,EAAE;IAChDC,MAAM,EAAE;EACV;EAEA,SAASA,MAAM,GAAG;IAChBT,GAAG,CAACI,WAAW,GAAGD,aAAa,CAAC,CAACO,KAAK,CAACN,WAAW,GAAGD,aAAa,CAAC,CAAC;IACpE,EAAEA,aAAa;EACjB;EAEA,MAAMQ,OAAO,GAAG,EAAE;EAElB,SAASD,KAAK,CAACE,KAAK,EAAE;IACpB,OAAO,CAACC,GAAG,EAAEC,GAAG,KAAK;MACnB,EAAEX,aAAa;MACf,EAAEC,WAAW;MAEb,IAAIC,KAAK,IAAI,IAAI,EAAE;QACjB;MACF;MACA,IAAIQ,GAAG,IAAI,IAAI,EAAE;QACfR,KAAK,GAAGQ,GAAG;QACX,OAAOX,QAAQ,CAACG,KAAK,CAAC;MACxB;MAEAM,OAAO,CAACC,KAAK,CAAC,GAAGE,GAAG;MAEpB,IAAIV,WAAW,KAAKJ,GAAG,CAACO,MAAM,EAAE;QAC9B,OAAOL,QAAQ,CAAC,IAAI,EAAES,OAAO,CAAC;MAChC,CAAC,MAAM,IAAIP,WAAW,GAAGD,aAAa,GAAGH,GAAG,CAACO,MAAM,EAAE;QACnDE,MAAM,EAAE;MACV;IACF,CAAC;EACH;AACF"},"metadata":{},"sourceType":"script","externalDependencies":[]}