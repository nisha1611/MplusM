{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.deprecate = exports.isObjectLike = exports.isDate = exports.haveBuffer = exports.isMap = exports.isRegExp = exports.isBigUInt64Array = exports.isBigInt64Array = exports.isUint8Array = exports.isAnyArrayBuffer = exports.randomBytes = exports.normalizedFunctionString = void 0;\nvar buffer_1 = require(\"buffer\");\nvar global_1 = require(\"../utils/global\");\n/**\r\n * Normalizes our expected stringified form of a function across versions of node\r\n * @param fn - The function to stringify\r\n */\nfunction normalizedFunctionString(fn) {\n  return fn.toString().replace('function(', 'function (');\n}\nexports.normalizedFunctionString = normalizedFunctionString;\nfunction isReactNative() {\n  var g = (0, global_1.getGlobal)();\n  return typeof g.navigator === 'object' && g.navigator.product === 'ReactNative';\n}\nvar insecureRandomBytes = function insecureRandomBytes(size) {\n  var insecureWarning = isReactNative() ? 'BSON: For React Native please polyfill crypto.getRandomValues, e.g. using: https://www.npmjs.com/package/react-native-get-random-values.' : 'BSON: No cryptographic implementation for random bytes present, falling back to a less secure implementation.';\n  console.warn(insecureWarning);\n  var result = buffer_1.Buffer.alloc(size);\n  for (var i = 0; i < size; ++i) result[i] = Math.floor(Math.random() * 256);\n  return result;\n};\nvar detectRandomBytes = function () {\n  if (process.browser) {\n    if (typeof window !== 'undefined') {\n      // browser crypto implementation(s)\n      var target_1 = window.crypto || window.msCrypto; // allow for IE11\n      if (target_1 && target_1.getRandomValues) {\n        return function (size) {\n          return target_1.getRandomValues(buffer_1.Buffer.alloc(size));\n        };\n      }\n    }\n    if (typeof global !== 'undefined' && global.crypto && global.crypto.getRandomValues) {\n      // allow for RN packages such as https://www.npmjs.com/package/react-native-get-random-values to populate global\n      return function (size) {\n        return global.crypto.getRandomValues(buffer_1.Buffer.alloc(size));\n      };\n    }\n    return insecureRandomBytes;\n  } else {\n    var requiredRandomBytes = void 0;\n    try {\n      requiredRandomBytes = require('crypto').randomBytes;\n    } catch (e) {\n      // keep the fallback\n    }\n    // NOTE: in transpiled cases the above require might return null/undefined\n    return requiredRandomBytes || insecureRandomBytes;\n  }\n};\nexports.randomBytes = detectRandomBytes();\nfunction isAnyArrayBuffer(value) {\n  return ['[object ArrayBuffer]', '[object SharedArrayBuffer]'].includes(Object.prototype.toString.call(value));\n}\nexports.isAnyArrayBuffer = isAnyArrayBuffer;\nfunction isUint8Array(value) {\n  return Object.prototype.toString.call(value) === '[object Uint8Array]';\n}\nexports.isUint8Array = isUint8Array;\nfunction isBigInt64Array(value) {\n  return Object.prototype.toString.call(value) === '[object BigInt64Array]';\n}\nexports.isBigInt64Array = isBigInt64Array;\nfunction isBigUInt64Array(value) {\n  return Object.prototype.toString.call(value) === '[object BigUint64Array]';\n}\nexports.isBigUInt64Array = isBigUInt64Array;\nfunction isRegExp(d) {\n  return Object.prototype.toString.call(d) === '[object RegExp]';\n}\nexports.isRegExp = isRegExp;\nfunction isMap(d) {\n  return Object.prototype.toString.call(d) === '[object Map]';\n}\nexports.isMap = isMap;\n/** Call to check if your environment has `Buffer` */\nfunction haveBuffer() {\n  return typeof global !== 'undefined' && typeof global.Buffer !== 'undefined';\n}\nexports.haveBuffer = haveBuffer;\n// To ensure that 0.4 of node works correctly\nfunction isDate(d) {\n  return isObjectLike(d) && Object.prototype.toString.call(d) === '[object Date]';\n}\nexports.isDate = isDate;\n/**\r\n * @internal\r\n * this is to solve the `'someKey' in x` problem where x is unknown.\r\n * https://github.com/typescript-eslint/typescript-eslint/issues/1071#issuecomment-541955753\r\n */\nfunction isObjectLike(candidate) {\n  return typeof candidate === 'object' && candidate !== null;\n}\nexports.isObjectLike = isObjectLike;\nfunction deprecate(fn, message) {\n  var warned = false;\n  function deprecated() {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n    if (!warned) {\n      console.warn(message);\n      warned = true;\n    }\n    return fn.apply(this, args);\n  }\n  return deprecated;\n}\nexports.deprecate = deprecate;","map":{"version":3,"mappings":";;;;;;AAAA;AACA;AAIA;;;;AAIA,SAAgBA,wBAAwB,CAACC,EAAY;EACnD,OAAOA,EAAE,CAACC,QAAQ,EAAE,CAACC,OAAO,CAAC,WAAW,EAAE,YAAY,CAAC;AACzD;AAFAC;AAIA,SAASC,aAAa;EACpB,IAAMC,CAAC,GAAG,sBAAS,GAAwC;EAC3D,OAAO,OAAOA,CAAC,CAACC,SAAS,KAAK,QAAQ,IAAID,CAAC,CAACC,SAAS,CAACC,OAAO,KAAK,aAAa;AACjF;AAEA,IAAMC,mBAAmB,GAAwB,SAASA,mBAAmB,CAACC,IAAY;EACxF,IAAMC,eAAe,GAAGN,aAAa,EAAE,GACnC,0IAA0I,GAC1I,+GAA+G;EACnHO,OAAO,CAACC,IAAI,CAACF,eAAe,CAAC;EAE7B,IAAMG,MAAM,GAAGC,eAAM,CAACC,KAAK,CAACN,IAAI,CAAC;EACjC,KAAK,IAAIO,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGP,IAAI,EAAE,EAAEO,CAAC,EAAEH,MAAM,CAACG,CAAC,CAAC,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAG,GAAG,CAAC;EAC1E,OAAON,MAAM;AACf,CAAC;AAWD,IAAMO,iBAAiB,GAAG;EACxB,IAAIC,OAAO,CAACC,OAAO,EAAE;IACnB,IAAI,OAAOC,MAAM,KAAK,WAAW,EAAE;MACjC;MACA,IAAMC,QAAM,GAAGD,MAAM,CAACE,MAAM,IAAIF,MAAM,CAACG,QAAQ,CAAC,CAAC;MACjD,IAAIF,QAAM,IAAIA,QAAM,CAACG,eAAe,EAAE;QACpC,OAAO,cAAI;UAAI,eAAM,CAACA,eAAe,CAACb,eAAM,CAACC,KAAK,CAACN,IAAI,CAAC,CAAC;QAA1C,CAA0C;;;IAI7D,IAAI,OAAOmB,MAAM,KAAK,WAAW,IAAIA,MAAM,CAACH,MAAM,IAAIG,MAAM,CAACH,MAAM,CAACE,eAAe,EAAE;MACnF;MACA,OAAO,cAAI;QAAI,aAAM,CAACF,MAAM,CAACE,eAAe,CAACb,eAAM,CAACC,KAAK,CAACN,IAAI,CAAC,CAAC;MAAjD,CAAiD;;IAGlE,OAAOD,mBAAmB;GAC3B,MAAM;IACL,IAAIqB,mBAAmB,SAAwC;IAC/D,IAAI;MACFA,mBAAmB,GAAGC,OAAO,CAAC,QAAQ,CAAC,CAACC,WAAW;KACpD,CAAC,OAAOC,CAAC,EAAE;MACV;IAAA;IAGF;IAEA,OAAOH,mBAAmB,IAAIrB,mBAAmB;;AAErD,CAAC;AAEYL,mBAAW,GAAGiB,iBAAiB,EAAE;AAE9C,SAAgBa,gBAAgB,CAACC,KAAc;EAC7C,OAAO,CAAC,sBAAsB,EAAE,4BAA4B,CAAC,CAACC,QAAQ,CACpEC,MAAM,CAACC,SAAS,CAACpC,QAAQ,CAACqC,IAAI,CAACJ,KAAK,CAAC,CACtC;AACH;AAJA/B;AAMA,SAAgBoC,YAAY,CAACL,KAAc;EACzC,OAAOE,MAAM,CAACC,SAAS,CAACpC,QAAQ,CAACqC,IAAI,CAACJ,KAAK,CAAC,KAAK,qBAAqB;AACxE;AAFA/B;AAIA,SAAgBqC,eAAe,CAACN,KAAc;EAC5C,OAAOE,MAAM,CAACC,SAAS,CAACpC,QAAQ,CAACqC,IAAI,CAACJ,KAAK,CAAC,KAAK,wBAAwB;AAC3E;AAFA/B;AAIA,SAAgBsC,gBAAgB,CAACP,KAAc;EAC7C,OAAOE,MAAM,CAACC,SAAS,CAACpC,QAAQ,CAACqC,IAAI,CAACJ,KAAK,CAAC,KAAK,yBAAyB;AAC5E;AAFA/B;AAIA,SAAgBuC,QAAQ,CAACC,CAAU;EACjC,OAAOP,MAAM,CAACC,SAAS,CAACpC,QAAQ,CAACqC,IAAI,CAACK,CAAC,CAAC,KAAK,iBAAiB;AAChE;AAFAxC;AAIA,SAAgByC,KAAK,CAACD,CAAU;EAC9B,OAAOP,MAAM,CAACC,SAAS,CAACpC,QAAQ,CAACqC,IAAI,CAACK,CAAC,CAAC,KAAK,cAAc;AAC7D;AAFAxC;AAIA;AACA,SAAgB0C,UAAU;EACxB,OAAO,OAAOjB,MAAM,KAAK,WAAW,IAAI,OAAOA,MAAM,CAACkB,MAAM,KAAK,WAAW;AAC9E;AAFA3C;AAIA;AACA,SAAgB4C,MAAM,CAACJ,CAAU;EAC/B,OAAOK,YAAY,CAACL,CAAC,CAAC,IAAIP,MAAM,CAACC,SAAS,CAACpC,QAAQ,CAACqC,IAAI,CAACK,CAAC,CAAC,KAAK,eAAe;AACjF;AAFAxC;AAIA;;;;;AAKA,SAAgB6C,YAAY,CAACC,SAAkB;EAC7C,OAAO,OAAOA,SAAS,KAAK,QAAQ,IAAIA,SAAS,KAAK,IAAI;AAC5D;AAFA9C;AAKA,SAAgB+C,SAAS,CAAqBlD,EAAK,EAAEmD,OAAe;EAClE,IAAIC,MAAM,GAAG,KAAK;EAClB,SAASC,UAAU;IAAgB;SAAA,UAAkB,EAAlBC,qBAAkB,EAAlBA,IAAkB;MAAlBC;;IACjC,IAAI,CAACH,MAAM,EAAE;MACXzC,OAAO,CAACC,IAAI,CAACuC,OAAO,CAAC;MACrBC,MAAM,GAAG,IAAI;;IAEf,OAAOpD,EAAE,CAACwD,KAAK,CAAC,IAAI,EAAED,IAAI,CAAC;EAC7B;EACA,OAAOF,UAA0B;AACnC;AAVAlD","names":["normalizedFunctionString","fn","toString","replace","exports","isReactNative","g","navigator","product","insecureRandomBytes","size","insecureWarning","console","warn","result","buffer_1","alloc","i","Math","floor","random","detectRandomBytes","process","browser","window","target_1","crypto","msCrypto","getRandomValues","global","requiredRandomBytes","require","randomBytes","e","isAnyArrayBuffer","value","includes","Object","prototype","call","isUint8Array","isBigInt64Array","isBigUInt64Array","isRegExp","d","isMap","haveBuffer","Buffer","isDate","isObjectLike","candidate","deprecate","message","warned","deprecated","_i","args","apply"],"sources":["C:\\Users\\91930\\Desktop\\Github projects\\Pharmacy Demo\\back-end\\node_modules\\bson\\src\\parser\\utils.ts"],"sourcesContent":["import { Buffer } from 'buffer';\r\nimport { getGlobal } from '../utils/global';\r\n\r\ntype RandomBytesFunction = (size: number) => Uint8Array;\r\n\r\n/**\r\n * Normalizes our expected stringified form of a function across versions of node\r\n * @param fn - The function to stringify\r\n */\r\nexport function normalizedFunctionString(fn: Function): string {\r\n  return fn.toString().replace('function(', 'function (');\r\n}\r\n\r\nfunction isReactNative() {\r\n  const g = getGlobal<{ navigator?: { product?: string } }>();\r\n  return typeof g.navigator === 'object' && g.navigator.product === 'ReactNative';\r\n}\r\n\r\nconst insecureRandomBytes: RandomBytesFunction = function insecureRandomBytes(size: number) {\r\n  const insecureWarning = isReactNative()\r\n    ? 'BSON: For React Native please polyfill crypto.getRandomValues, e.g. using: https://www.npmjs.com/package/react-native-get-random-values.'\r\n    : 'BSON: No cryptographic implementation for random bytes present, falling back to a less secure implementation.';\r\n  console.warn(insecureWarning);\r\n\r\n  const result = Buffer.alloc(size);\r\n  for (let i = 0; i < size; ++i) result[i] = Math.floor(Math.random() * 256);\r\n  return result;\r\n};\r\n\r\n/* We do not want to have to include DOM types just for this check */\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\ndeclare let window: any;\r\ndeclare let require: Function;\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\ndeclare let global: any;\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\ndeclare let process: any; // Used by @rollup/plugin-replace\r\n\r\nconst detectRandomBytes = (): RandomBytesFunction => {\r\n  if (process.browser) {\r\n    if (typeof window !== 'undefined') {\r\n      // browser crypto implementation(s)\r\n      const target = window.crypto || window.msCrypto; // allow for IE11\r\n      if (target && target.getRandomValues) {\r\n        return size => target.getRandomValues(Buffer.alloc(size));\r\n      }\r\n    }\r\n\r\n    if (typeof global !== 'undefined' && global.crypto && global.crypto.getRandomValues) {\r\n      // allow for RN packages such as https://www.npmjs.com/package/react-native-get-random-values to populate global\r\n      return size => global.crypto.getRandomValues(Buffer.alloc(size));\r\n    }\r\n\r\n    return insecureRandomBytes;\r\n  } else {\r\n    let requiredRandomBytes: RandomBytesFunction | null | undefined;\r\n    try {\r\n      requiredRandomBytes = require('crypto').randomBytes;\r\n    } catch (e) {\r\n      // keep the fallback\r\n    }\r\n\r\n    // NOTE: in transpiled cases the above require might return null/undefined\r\n\r\n    return requiredRandomBytes || insecureRandomBytes;\r\n  }\r\n};\r\n\r\nexport const randomBytes = detectRandomBytes();\r\n\r\nexport function isAnyArrayBuffer(value: unknown): value is ArrayBuffer {\r\n  return ['[object ArrayBuffer]', '[object SharedArrayBuffer]'].includes(\r\n    Object.prototype.toString.call(value)\r\n  );\r\n}\r\n\r\nexport function isUint8Array(value: unknown): value is Uint8Array {\r\n  return Object.prototype.toString.call(value) === '[object Uint8Array]';\r\n}\r\n\r\nexport function isBigInt64Array(value: unknown): value is BigInt64Array {\r\n  return Object.prototype.toString.call(value) === '[object BigInt64Array]';\r\n}\r\n\r\nexport function isBigUInt64Array(value: unknown): value is BigUint64Array {\r\n  return Object.prototype.toString.call(value) === '[object BigUint64Array]';\r\n}\r\n\r\nexport function isRegExp(d: unknown): d is RegExp {\r\n  return Object.prototype.toString.call(d) === '[object RegExp]';\r\n}\r\n\r\nexport function isMap(d: unknown): d is Map<unknown, unknown> {\r\n  return Object.prototype.toString.call(d) === '[object Map]';\r\n}\r\n\r\n/** Call to check if your environment has `Buffer` */\r\nexport function haveBuffer(): boolean {\r\n  return typeof global !== 'undefined' && typeof global.Buffer !== 'undefined';\r\n}\r\n\r\n// To ensure that 0.4 of node works correctly\r\nexport function isDate(d: unknown): d is Date {\r\n  return isObjectLike(d) && Object.prototype.toString.call(d) === '[object Date]';\r\n}\r\n\r\n/**\r\n * @internal\r\n * this is to solve the `'someKey' in x` problem where x is unknown.\r\n * https://github.com/typescript-eslint/typescript-eslint/issues/1071#issuecomment-541955753\r\n */\r\nexport function isObjectLike(candidate: unknown): candidate is Record<string, unknown> {\r\n  return typeof candidate === 'object' && candidate !== null;\r\n}\r\n\r\ndeclare let console: { warn(...message: unknown[]): void };\r\nexport function deprecate<T extends Function>(fn: T, message: string): T {\r\n  let warned = false;\r\n  function deprecated(this: unknown, ...args: unknown[]) {\r\n    if (!warned) {\r\n      console.warn(message);\r\n      warned = true;\r\n    }\r\n    return fn.apply(this, args);\r\n  }\r\n  return deprecated as unknown as T;\r\n}\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}