{"ast":null,"code":"var parse = require('../');\nvar test = require('tape');\ntest('flag boolean default false', function (t) {\n  var argv = parse(['moo'], {\n    boolean: ['t', 'verbose'],\n    default: {\n      verbose: false,\n      t: false\n    }\n  });\n  t.deepEqual(argv, {\n    verbose: false,\n    t: false,\n    _: ['moo']\n  });\n  t.deepEqual(typeof argv.verbose, 'boolean');\n  t.deepEqual(typeof argv.t, 'boolean');\n  t.end();\n});\ntest('boolean groups', function (t) {\n  var argv = parse(['-x', '-z', 'one', 'two', 'three'], {\n    boolean: ['x', 'y', 'z']\n  });\n  t.deepEqual(argv, {\n    x: true,\n    y: false,\n    z: true,\n    _: ['one', 'two', 'three']\n  });\n  t.deepEqual(typeof argv.x, 'boolean');\n  t.deepEqual(typeof argv.y, 'boolean');\n  t.deepEqual(typeof argv.z, 'boolean');\n  t.end();\n});\ntest('boolean and alias with chainable api', function (t) {\n  var aliased = ['-h', 'derp'];\n  var regular = ['--herp', 'derp'];\n  var opts = {\n    herp: {\n      alias: 'h',\n      boolean: true\n    }\n  };\n  var aliasedArgv = parse(aliased, {\n    boolean: 'herp',\n    alias: {\n      h: 'herp'\n    }\n  });\n  var propertyArgv = parse(regular, {\n    boolean: 'herp',\n    alias: {\n      h: 'herp'\n    }\n  });\n  var expected = {\n    herp: true,\n    h: true,\n    '_': ['derp']\n  };\n  t.same(aliasedArgv, expected);\n  t.same(propertyArgv, expected);\n  t.end();\n});\ntest('boolean and alias with options hash', function (t) {\n  var aliased = ['-h', 'derp'];\n  var regular = ['--herp', 'derp'];\n  var opts = {\n    alias: {\n      'h': 'herp'\n    },\n    boolean: 'herp'\n  };\n  var aliasedArgv = parse(aliased, opts);\n  var propertyArgv = parse(regular, opts);\n  var expected = {\n    herp: true,\n    h: true,\n    '_': ['derp']\n  };\n  t.same(aliasedArgv, expected);\n  t.same(propertyArgv, expected);\n  t.end();\n});\ntest('boolean and alias array with options hash', function (t) {\n  var aliased = ['-h', 'derp'];\n  var regular = ['--herp', 'derp'];\n  var alt = ['--harp', 'derp'];\n  var opts = {\n    alias: {\n      'h': ['herp', 'harp']\n    },\n    boolean: 'h'\n  };\n  var aliasedArgv = parse(aliased, opts);\n  var propertyArgv = parse(regular, opts);\n  var altPropertyArgv = parse(alt, opts);\n  var expected = {\n    harp: true,\n    herp: true,\n    h: true,\n    '_': ['derp']\n  };\n  t.same(aliasedArgv, expected);\n  t.same(propertyArgv, expected);\n  t.same(altPropertyArgv, expected);\n  t.end();\n});\ntest('boolean and alias using explicit true', function (t) {\n  var aliased = ['-h', 'true'];\n  var regular = ['--herp', 'true'];\n  var opts = {\n    alias: {\n      h: 'herp'\n    },\n    boolean: 'h'\n  };\n  var aliasedArgv = parse(aliased, opts);\n  var propertyArgv = parse(regular, opts);\n  var expected = {\n    herp: true,\n    h: true,\n    '_': []\n  };\n  t.same(aliasedArgv, expected);\n  t.same(propertyArgv, expected);\n  t.end();\n});\n\n// regression, see https://github.com/substack/node-optimist/issues/71\ntest('boolean and --x=true', function (t) {\n  var parsed = parse(['--boool', '--other=true'], {\n    boolean: 'boool'\n  });\n  t.same(parsed.boool, true);\n  t.same(parsed.other, 'true');\n  parsed = parse(['--boool', '--other=false'], {\n    boolean: 'boool'\n  });\n  t.same(parsed.boool, true);\n  t.same(parsed.other, 'false');\n  t.end();\n});\ntest('boolean --boool=true', function (t) {\n  var parsed = parse(['--boool=true'], {\n    default: {\n      boool: false\n    },\n    boolean: ['boool']\n  });\n  t.same(parsed.boool, true);\n  t.end();\n});\ntest('boolean --boool=false', function (t) {\n  var parsed = parse(['--boool=false'], {\n    default: {\n      boool: true\n    },\n    boolean: ['boool']\n  });\n  t.same(parsed.boool, false);\n  t.end();\n});\ntest('boolean using something similar to true', function (t) {\n  var opts = {\n    boolean: 'h'\n  };\n  var result = parse(['-h', 'true.txt'], opts);\n  var expected = {\n    h: true,\n    '_': ['true.txt']\n  };\n  t.same(result, expected);\n  t.end();\n});","map":{"version":3,"names":["parse","require","test","t","argv","boolean","default","verbose","deepEqual","_","end","x","y","z","aliased","regular","opts","herp","alias","aliasedArgv","h","propertyArgv","expected","same","alt","altPropertyArgv","harp","parsed","boool","other","result"],"sources":["C:/Users/91930/Desktop/Github projects/Pharmacy Demo/back-end/node_modules/minimist/test/bool.js"],"sourcesContent":["var parse = require('../');\nvar test = require('tape');\n\ntest('flag boolean default false', function (t) {\n    var argv = parse(['moo'], {\n        boolean: ['t', 'verbose'],\n        default: { verbose: false, t: false }\n    });\n    \n    t.deepEqual(argv, {\n        verbose: false,\n        t: false,\n        _: ['moo']\n    });\n    \n    t.deepEqual(typeof argv.verbose, 'boolean');\n    t.deepEqual(typeof argv.t, 'boolean');\n    t.end();\n\n});\n\ntest('boolean groups', function (t) {\n    var argv = parse([ '-x', '-z', 'one', 'two', 'three' ], {\n        boolean: ['x','y','z']\n    });\n    \n    t.deepEqual(argv, {\n        x : true,\n        y : false,\n        z : true,\n        _ : [ 'one', 'two', 'three' ]\n    });\n    \n    t.deepEqual(typeof argv.x, 'boolean');\n    t.deepEqual(typeof argv.y, 'boolean');\n    t.deepEqual(typeof argv.z, 'boolean');\n    t.end();\n});\ntest('boolean and alias with chainable api', function (t) {\n    var aliased = [ '-h', 'derp' ];\n    var regular = [ '--herp',  'derp' ];\n    var opts = {\n        herp: { alias: 'h', boolean: true }\n    };\n    var aliasedArgv = parse(aliased, {\n        boolean: 'herp',\n        alias: { h: 'herp' }\n    });\n    var propertyArgv = parse(regular, {\n        boolean: 'herp',\n        alias: { h: 'herp' }\n    });\n    var expected = {\n        herp: true,\n        h: true,\n        '_': [ 'derp' ]\n    };\n    \n    t.same(aliasedArgv, expected);\n    t.same(propertyArgv, expected); \n    t.end();\n});\n\ntest('boolean and alias with options hash', function (t) {\n    var aliased = [ '-h', 'derp' ];\n    var regular = [ '--herp', 'derp' ];\n    var opts = {\n        alias: { 'h': 'herp' },\n        boolean: 'herp'\n    };\n    var aliasedArgv = parse(aliased, opts);\n    var propertyArgv = parse(regular, opts);\n    var expected = {\n        herp: true,\n        h: true,\n        '_': [ 'derp' ]\n    };\n    t.same(aliasedArgv, expected);\n    t.same(propertyArgv, expected);\n    t.end();\n});\n\ntest('boolean and alias array with options hash', function (t) {\n    var aliased = [ '-h', 'derp' ];\n    var regular = [ '--herp', 'derp' ];\n    var alt = [ '--harp', 'derp' ];\n    var opts = {\n        alias: { 'h': ['herp', 'harp'] },\n        boolean: 'h'\n    };\n    var aliasedArgv = parse(aliased, opts);\n    var propertyArgv = parse(regular, opts);\n    var altPropertyArgv = parse(alt, opts);\n    var expected = {\n        harp: true,\n        herp: true,\n        h: true,\n        '_': [ 'derp' ]\n    };\n    t.same(aliasedArgv, expected);\n    t.same(propertyArgv, expected);\n    t.same(altPropertyArgv, expected);\n    t.end();\n});\n\ntest('boolean and alias using explicit true', function (t) {\n    var aliased = [ '-h', 'true' ];\n    var regular = [ '--herp',  'true' ];\n    var opts = {\n        alias: { h: 'herp' },\n        boolean: 'h'\n    };\n    var aliasedArgv = parse(aliased, opts);\n    var propertyArgv = parse(regular, opts);\n    var expected = {\n        herp: true,\n        h: true,\n        '_': [ ]\n    };\n\n    t.same(aliasedArgv, expected);\n    t.same(propertyArgv, expected); \n    t.end();\n});\n\n// regression, see https://github.com/substack/node-optimist/issues/71\ntest('boolean and --x=true', function(t) {\n    var parsed = parse(['--boool', '--other=true'], {\n        boolean: 'boool'\n    });\n\n    t.same(parsed.boool, true);\n    t.same(parsed.other, 'true');\n\n    parsed = parse(['--boool', '--other=false'], {\n        boolean: 'boool'\n    });\n    \n    t.same(parsed.boool, true);\n    t.same(parsed.other, 'false');\n    t.end();\n});\n\ntest('boolean --boool=true', function (t) {\n    var parsed = parse(['--boool=true'], {\n        default: {\n            boool: false\n        },\n        boolean: ['boool']\n    });\n\n    t.same(parsed.boool, true);\n    t.end();\n});\n\ntest('boolean --boool=false', function (t) {\n    var parsed = parse(['--boool=false'], {\n        default: {\n          boool: true\n        },\n        boolean: ['boool']\n    });\n\n    t.same(parsed.boool, false);\n    t.end();\n});\n\ntest('boolean using something similar to true', function (t) {\n    var opts = { boolean: 'h' };\n    var result = parse(['-h', 'true.txt'], opts);\n    var expected = {\n        h: true,\n        '_': ['true.txt']\n    };\n\n    t.same(result, expected);\n    t.end();\n});"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}