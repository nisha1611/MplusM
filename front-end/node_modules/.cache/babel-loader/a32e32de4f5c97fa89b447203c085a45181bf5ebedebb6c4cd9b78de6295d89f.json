{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Double = void 0;\n/**\r\n * A class representation of the BSON Double type.\r\n * @public\r\n * @category BSONType\r\n */\nvar Double = /** @class */function () {\n  /**\r\n   * Create a Double type\r\n   *\r\n   * @param value - the number we want to represent as a double.\r\n   */\n  function Double(value) {\n    if (!(this instanceof Double)) return new Double(value);\n    if (value instanceof Number) {\n      value = value.valueOf();\n    }\n    this.value = +value;\n  }\n  /**\r\n   * Access the number value.\r\n   *\r\n   * @returns returns the wrapped double number.\r\n   */\n  Double.prototype.valueOf = function () {\n    return this.value;\n  };\n  Double.prototype.toJSON = function () {\n    return this.value;\n  };\n  Double.prototype.toString = function (radix) {\n    return this.value.toString(radix);\n  };\n  /** @internal */\n  Double.prototype.toExtendedJSON = function (options) {\n    if (options && (options.legacy || options.relaxed && isFinite(this.value))) {\n      return this.value;\n    }\n    // NOTE: JavaScript has +0 and -0, apparently to model limit calculations. If a user\n    // explicitly provided `-0` then we need to ensure the sign makes it into the output\n    if (Object.is(Math.sign(this.value), -0)) {\n      return {\n        $numberDouble: \"-\".concat(this.value.toFixed(1))\n      };\n    }\n    var $numberDouble;\n    if (Number.isInteger(this.value)) {\n      $numberDouble = this.value.toFixed(1);\n      if ($numberDouble.length >= 13) {\n        $numberDouble = this.value.toExponential(13).toUpperCase();\n      }\n    } else {\n      $numberDouble = this.value.toString();\n    }\n    return {\n      $numberDouble: $numberDouble\n    };\n  };\n  /** @internal */\n  Double.fromExtendedJSON = function (doc, options) {\n    var doubleValue = parseFloat(doc.$numberDouble);\n    return options && options.relaxed ? doubleValue : new Double(doubleValue);\n  };\n  /** @internal */\n  Double.prototype[Symbol.for('nodejs.util.inspect.custom')] = function () {\n    return this.inspect();\n  };\n  Double.prototype.inspect = function () {\n    var eJSON = this.toExtendedJSON();\n    return \"new Double(\".concat(eJSON.$numberDouble, \")\");\n  };\n  return Double;\n}();\nexports.Double = Double;\nObject.defineProperty(Double.prototype, '_bsontype', {\n  value: 'Double'\n});","map":{"version":3,"mappings":";;;;;;AAOA;;;;;AAKA;EAIE;;;;;EAKA,gBAAYA,KAAa;IACvB,IAAI,EAAE,IAAI,YAAYC,MAAM,CAAC,EAAE,OAAO,IAAIA,MAAM,CAACD,KAAK,CAAC;IAEvD,IAAKA,KAAiB,YAAYE,MAAM,EAAE;MACxCF,KAAK,GAAGA,KAAK,CAACG,OAAO,EAAE;;IAGzB,IAAI,CAACH,KAAK,GAAG,CAACA,KAAK;EACrB;EAEA;;;;;EAKAC,wBAAO,GAAP;IACE,OAAO,IAAI,CAACD,KAAK;EACnB,CAAC;EAEDC,uBAAM,GAAN;IACE,OAAO,IAAI,CAACD,KAAK;EACnB,CAAC;EAEDC,yBAAQ,GAAR,UAASG,KAAc;IACrB,OAAO,IAAI,CAACJ,KAAK,CAACK,QAAQ,CAACD,KAAK,CAAC;EACnC,CAAC;EAED;EACAH,+BAAc,GAAd,UAAeK,OAAsB;IACnC,IAAIA,OAAO,KAAKA,OAAO,CAACC,MAAM,IAAKD,OAAO,CAACE,OAAO,IAAIC,QAAQ,CAAC,IAAI,CAACT,KAAK,CAAE,CAAC,EAAE;MAC5E,OAAO,IAAI,CAACA,KAAK;;IAGnB;IACA;IACA,IAAIU,MAAM,CAACC,EAAE,CAACC,IAAI,CAACC,IAAI,CAAC,IAAI,CAACb,KAAK,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE;MACxC,OAAO;QAAEc,aAAa,EAAE,WAAI,IAAI,CAACd,KAAK,CAACe,OAAO,CAAC,CAAC,CAAC;MAAE,CAAE;;IAGvD,IAAID,aAAqB;IACzB,IAAIZ,MAAM,CAACc,SAAS,CAAC,IAAI,CAAChB,KAAK,CAAC,EAAE;MAChCc,aAAa,GAAG,IAAI,CAACd,KAAK,CAACe,OAAO,CAAC,CAAC,CAAC;MACrC,IAAID,aAAa,CAACG,MAAM,IAAI,EAAE,EAAE;QAC9BH,aAAa,GAAG,IAAI,CAACd,KAAK,CAACkB,aAAa,CAAC,EAAE,CAAC,CAACC,WAAW,EAAE;;KAE7D,MAAM;MACLL,aAAa,GAAG,IAAI,CAACd,KAAK,CAACK,QAAQ,EAAE;;IAGvC,OAAO;MAAES,aAAa;IAAA,CAAE;EAC1B,CAAC;EAED;EACOb,uBAAgB,GAAvB,UAAwBmB,GAAmB,EAAEd,OAAsB;IACjE,IAAMe,WAAW,GAAGC,UAAU,CAACF,GAAG,CAACN,aAAa,CAAC;IACjD,OAAOR,OAAO,IAAIA,OAAO,CAACE,OAAO,GAAGa,WAAW,GAAG,IAAIpB,MAAM,CAACoB,WAAW,CAAC;EAC3E,CAAC;EAED;EACApB,iBAACsB,MAAM,CAACC,GAAG,CAAC,4BAA4B,CAAC,CAAC,GAA1C;IACE,OAAO,IAAI,CAACC,OAAO,EAAE;EACvB,CAAC;EAEDxB,wBAAO,GAAP;IACE,IAAMyB,KAAK,GAAG,IAAI,CAACC,cAAc,EAAoB;IACrD,OAAO,qBAAcD,KAAK,CAACZ,aAAa,MAAG;EAC7C,CAAC;EACH,aAAC;AAAD,CAAC,EA5ED;AAAac;AA8EblB,MAAM,CAACmB,cAAc,CAAC5B,MAAM,CAAC6B,SAAS,EAAE,WAAW,EAAE;EAAE9B,KAAK,EAAE;AAAQ,CAAE,CAAC","names":["value","Double","Number","valueOf","radix","toString","options","legacy","relaxed","isFinite","Object","is","Math","sign","$numberDouble","toFixed","isInteger","length","toExponential","toUpperCase","doc","doubleValue","parseFloat","Symbol","for","inspect","eJSON","toExtendedJSON","exports","defineProperty","prototype"],"sources":["C:\\Users\\91930\\Desktop\\Github projects\\Pharmacy Demo\\back-end\\node_modules\\bson\\src\\double.ts"],"sourcesContent":["import type { EJSONOptions } from './extended_json';\r\n\r\n/** @public */\r\nexport interface DoubleExtended {\r\n  $numberDouble: string;\r\n}\r\n\r\n/**\r\n * A class representation of the BSON Double type.\r\n * @public\r\n * @category BSONType\r\n */\r\nexport class Double {\r\n  _bsontype!: 'Double';\r\n\r\n  value!: number;\r\n  /**\r\n   * Create a Double type\r\n   *\r\n   * @param value - the number we want to represent as a double.\r\n   */\r\n  constructor(value: number) {\r\n    if (!(this instanceof Double)) return new Double(value);\r\n\r\n    if ((value as unknown) instanceof Number) {\r\n      value = value.valueOf();\r\n    }\r\n\r\n    this.value = +value;\r\n  }\r\n\r\n  /**\r\n   * Access the number value.\r\n   *\r\n   * @returns returns the wrapped double number.\r\n   */\r\n  valueOf(): number {\r\n    return this.value;\r\n  }\r\n\r\n  toJSON(): number {\r\n    return this.value;\r\n  }\r\n\r\n  toString(radix?: number): string {\r\n    return this.value.toString(radix);\r\n  }\r\n\r\n  /** @internal */\r\n  toExtendedJSON(options?: EJSONOptions): number | DoubleExtended {\r\n    if (options && (options.legacy || (options.relaxed && isFinite(this.value)))) {\r\n      return this.value;\r\n    }\r\n\r\n    // NOTE: JavaScript has +0 and -0, apparently to model limit calculations. If a user\r\n    // explicitly provided `-0` then we need to ensure the sign makes it into the output\r\n    if (Object.is(Math.sign(this.value), -0)) {\r\n      return { $numberDouble: `-${this.value.toFixed(1)}` };\r\n    }\r\n\r\n    let $numberDouble: string;\r\n    if (Number.isInteger(this.value)) {\r\n      $numberDouble = this.value.toFixed(1);\r\n      if ($numberDouble.length >= 13) {\r\n        $numberDouble = this.value.toExponential(13).toUpperCase();\r\n      }\r\n    } else {\r\n      $numberDouble = this.value.toString();\r\n    }\r\n\r\n    return { $numberDouble };\r\n  }\r\n\r\n  /** @internal */\r\n  static fromExtendedJSON(doc: DoubleExtended, options?: EJSONOptions): number | Double {\r\n    const doubleValue = parseFloat(doc.$numberDouble);\r\n    return options && options.relaxed ? doubleValue : new Double(doubleValue);\r\n  }\r\n\r\n  /** @internal */\r\n  [Symbol.for('nodejs.util.inspect.custom')](): string {\r\n    return this.inspect();\r\n  }\r\n\r\n  inspect(): string {\r\n    const eJSON = this.toExtendedJSON() as DoubleExtended;\r\n    return `new Double(${eJSON.$numberDouble})`;\r\n  }\r\n}\r\n\r\nObject.defineProperty(Double.prototype, '_bsontype', { value: 'Double' });\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}