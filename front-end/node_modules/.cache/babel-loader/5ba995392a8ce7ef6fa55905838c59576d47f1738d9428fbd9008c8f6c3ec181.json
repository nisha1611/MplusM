{"ast":null,"code":"const {\n  buildOptions\n} = require(\"./OptionsBuilder\");\nconst OrderedObjParser = require(\"./OrderedObjParser\");\nconst {\n  prettify\n} = require(\"./node2json\");\nconst validator = require('../validator');\nclass XMLParser {\n  constructor(options) {\n    this.externalEntities = {};\n    this.options = buildOptions(options);\n  }\n  /**\r\n   * Parse XML dats to JS object \r\n   * @param {string|Buffer} xmlData \r\n   * @param {boolean|Object} validationOption \r\n   */\n  parse(xmlData, validationOption) {\n    if (typeof xmlData === \"string\") {} else if (xmlData.toString) {\n      xmlData = xmlData.toString();\n    } else {\n      throw new Error(\"XML data is accepted in String or Bytes[] form.\");\n    }\n    if (validationOption) {\n      if (validationOption === true) validationOption = {}; //validate with default options\n\n      const result = validator.validate(xmlData, validationOption);\n      if (result !== true) {\n        throw Error(`${result.err.msg}:${result.err.line}:${result.err.col}`);\n      }\n    }\n    const orderedObjParser = new OrderedObjParser(this.options);\n    orderedObjParser.addExternalEntities(this.externalEntities);\n    const orderedResult = orderedObjParser.parseXml(xmlData);\n    if (this.options.preserveOrder || orderedResult === undefined) return orderedResult;else return prettify(orderedResult, this.options);\n  }\n\n  /**\r\n   * Add Entity which is not by default supported by this library\r\n   * @param {string} key \r\n   * @param {string} value \r\n   */\n  addEntity(key, value) {\n    if (value.indexOf(\"&\") !== -1) {\n      throw new Error(\"Entity value can't have '&'\");\n    } else if (key.indexOf(\"&\") !== -1 || key.indexOf(\";\") !== -1) {\n      throw new Error(\"An entity must be set without '&' and ';'. Eg. use '#xD' for '&#xD;'\");\n    } else if (value === \"&\") {\n      throw new Error(\"An entity with value '&' is not permitted\");\n    } else {\n      this.externalEntities[key] = value;\n    }\n  }\n}\nmodule.exports = XMLParser;","map":{"version":3,"names":["buildOptions","require","OrderedObjParser","prettify","validator","XMLParser","constructor","options","externalEntities","parse","xmlData","validationOption","toString","Error","result","validate","err","msg","line","col","orderedObjParser","addExternalEntities","orderedResult","parseXml","preserveOrder","undefined","addEntity","key","value","indexOf","module","exports"],"sources":["C:/Users/91930/Desktop/Github projects/Pharmacy Demo/back-end/node_modules/fast-xml-parser/src/xmlparser/XMLParser.js"],"sourcesContent":["const { buildOptions} = require(\"./OptionsBuilder\");\r\nconst OrderedObjParser = require(\"./OrderedObjParser\");\r\nconst { prettify} = require(\"./node2json\");\r\nconst validator = require('../validator');\r\n\r\nclass XMLParser{\r\n    \r\n    constructor(options){\r\n        this.externalEntities = {};\r\n        this.options = buildOptions(options);\r\n        \r\n    }\r\n    /**\r\n     * Parse XML dats to JS object \r\n     * @param {string|Buffer} xmlData \r\n     * @param {boolean|Object} validationOption \r\n     */\r\n    parse(xmlData,validationOption){\r\n        if(typeof xmlData === \"string\"){\r\n        }else if( xmlData.toString){\r\n            xmlData = xmlData.toString();\r\n        }else{\r\n            throw new Error(\"XML data is accepted in String or Bytes[] form.\")\r\n        }\r\n        if( validationOption){\r\n            if(validationOption === true) validationOption = {}; //validate with default options\r\n            \r\n            const result = validator.validate(xmlData, validationOption);\r\n            if (result !== true) {\r\n              throw Error( `${result.err.msg}:${result.err.line}:${result.err.col}` )\r\n            }\r\n          }\r\n        const orderedObjParser = new OrderedObjParser(this.options);\r\n        orderedObjParser.addExternalEntities(this.externalEntities);\r\n        const orderedResult = orderedObjParser.parseXml(xmlData);\r\n        if(this.options.preserveOrder || orderedResult === undefined) return orderedResult;\r\n        else return prettify(orderedResult, this.options);\r\n    }\r\n\r\n    /**\r\n     * Add Entity which is not by default supported by this library\r\n     * @param {string} key \r\n     * @param {string} value \r\n     */\r\n    addEntity(key, value){\r\n        if(value.indexOf(\"&\") !== -1){\r\n            throw new Error(\"Entity value can't have '&'\")\r\n        }else if(key.indexOf(\"&\") !== -1 || key.indexOf(\";\") !== -1){\r\n            throw new Error(\"An entity must be set without '&' and ';'. Eg. use '#xD' for '&#xD;'\")\r\n        }else if(value === \"&\"){\r\n            throw new Error(\"An entity with value '&' is not permitted\");\r\n        }else{\r\n            this.externalEntities[key] = value;\r\n        }\r\n    }\r\n}\r\n\r\nmodule.exports = XMLParser;"],"mappings":"AAAA,MAAM;EAAEA;AAAY,CAAC,GAAGC,OAAO,CAAC,kBAAkB,CAAC;AACnD,MAAMC,gBAAgB,GAAGD,OAAO,CAAC,oBAAoB,CAAC;AACtD,MAAM;EAAEE;AAAQ,CAAC,GAAGF,OAAO,CAAC,aAAa,CAAC;AAC1C,MAAMG,SAAS,GAAGH,OAAO,CAAC,cAAc,CAAC;AAEzC,MAAMI,SAAS;EAEXC,WAAW,CAACC,OAAO,EAAC;IAChB,IAAI,CAACC,gBAAgB,GAAG,CAAC,CAAC;IAC1B,IAAI,CAACD,OAAO,GAAGP,YAAY,CAACO,OAAO,CAAC;EAExC;EACA;AACJ;AACA;AACA;AACA;EACIE,KAAK,CAACC,OAAO,EAACC,gBAAgB,EAAC;IAC3B,IAAG,OAAOD,OAAO,KAAK,QAAQ,EAAC,CAC/B,CAAC,MAAK,IAAIA,OAAO,CAACE,QAAQ,EAAC;MACvBF,OAAO,GAAGA,OAAO,CAACE,QAAQ,EAAE;IAChC,CAAC,MAAI;MACD,MAAM,IAAIC,KAAK,CAAC,iDAAiD,CAAC;IACtE;IACA,IAAIF,gBAAgB,EAAC;MACjB,IAAGA,gBAAgB,KAAK,IAAI,EAAEA,gBAAgB,GAAG,CAAC,CAAC,CAAC,CAAC;;MAErD,MAAMG,MAAM,GAAGV,SAAS,CAACW,QAAQ,CAACL,OAAO,EAAEC,gBAAgB,CAAC;MAC5D,IAAIG,MAAM,KAAK,IAAI,EAAE;QACnB,MAAMD,KAAK,CAAG,GAAEC,MAAM,CAACE,GAAG,CAACC,GAAI,IAAGH,MAAM,CAACE,GAAG,CAACE,IAAK,IAAGJ,MAAM,CAACE,GAAG,CAACG,GAAI,EAAC,CAAE;MACzE;IACF;IACF,MAAMC,gBAAgB,GAAG,IAAIlB,gBAAgB,CAAC,IAAI,CAACK,OAAO,CAAC;IAC3Da,gBAAgB,CAACC,mBAAmB,CAAC,IAAI,CAACb,gBAAgB,CAAC;IAC3D,MAAMc,aAAa,GAAGF,gBAAgB,CAACG,QAAQ,CAACb,OAAO,CAAC;IACxD,IAAG,IAAI,CAACH,OAAO,CAACiB,aAAa,IAAIF,aAAa,KAAKG,SAAS,EAAE,OAAOH,aAAa,CAAC,KAC9E,OAAOnB,QAAQ,CAACmB,aAAa,EAAE,IAAI,CAACf,OAAO,CAAC;EACrD;;EAEA;AACJ;AACA;AACA;AACA;EACImB,SAAS,CAACC,GAAG,EAAEC,KAAK,EAAC;IACjB,IAAGA,KAAK,CAACC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAAC;MACzB,MAAM,IAAIhB,KAAK,CAAC,6BAA6B,CAAC;IAClD,CAAC,MAAK,IAAGc,GAAG,CAACE,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,IAAIF,GAAG,CAACE,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAAC;MACxD,MAAM,IAAIhB,KAAK,CAAC,sEAAsE,CAAC;IAC3F,CAAC,MAAK,IAAGe,KAAK,KAAK,GAAG,EAAC;MACnB,MAAM,IAAIf,KAAK,CAAC,2CAA2C,CAAC;IAChE,CAAC,MAAI;MACD,IAAI,CAACL,gBAAgB,CAACmB,GAAG,CAAC,GAAGC,KAAK;IACtC;EACJ;AACJ;AAEAE,MAAM,CAACC,OAAO,GAAG1B,SAAS"},"metadata":{},"sourceType":"script","externalDependencies":[]}