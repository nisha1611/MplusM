{"ast":null,"code":"import { debugId, toDebugString } from \"../debug\";\nimport { evaluateConditions } from \"./evaluateConditions\";\nimport { getEndpointHeaders } from \"./getEndpointHeaders\";\nimport { getEndpointProperties } from \"./getEndpointProperties\";\nimport { getEndpointUrl } from \"./getEndpointUrl\";\nexport const evaluateEndpointRule = (endpointRule, options) => {\n  const {\n    conditions,\n    endpoint\n  } = endpointRule;\n  const {\n    result,\n    referenceRecord\n  } = evaluateConditions(conditions, options);\n  if (!result) {\n    return;\n  }\n  const endpointRuleOptions = {\n    ...options,\n    referenceRecord: {\n      ...options.referenceRecord,\n      ...referenceRecord\n    }\n  };\n  const {\n    url,\n    properties,\n    headers\n  } = endpoint;\n  options.logger?.debug?.(debugId, `Resolving endpoint from template: ${toDebugString(endpoint)}`);\n  return {\n    ...(headers != undefined && {\n      headers: getEndpointHeaders(headers, endpointRuleOptions)\n    }),\n    ...(properties != undefined && {\n      properties: getEndpointProperties(properties, endpointRuleOptions)\n    }),\n    url: getEndpointUrl(url, endpointRuleOptions)\n  };\n};","map":{"version":3,"names":["debugId","toDebugString","evaluateConditions","getEndpointHeaders","getEndpointProperties","getEndpointUrl","evaluateEndpointRule","endpointRule","options","conditions","endpoint","result","referenceRecord","endpointRuleOptions","url","properties","headers","logger","debug","undefined"],"sources":["C:/Users/91930/Desktop/Github projects/Pharmacy Demo/back-end/node_modules/@aws-sdk/util-endpoints/dist-es/utils/evaluateEndpointRule.js"],"sourcesContent":["import { debugId, toDebugString } from \"../debug\";\r\nimport { evaluateConditions } from \"./evaluateConditions\";\r\nimport { getEndpointHeaders } from \"./getEndpointHeaders\";\r\nimport { getEndpointProperties } from \"./getEndpointProperties\";\r\nimport { getEndpointUrl } from \"./getEndpointUrl\";\r\nexport const evaluateEndpointRule = (endpointRule, options) => {\r\n    const { conditions, endpoint } = endpointRule;\r\n    const { result, referenceRecord } = evaluateConditions(conditions, options);\r\n    if (!result) {\r\n        return;\r\n    }\r\n    const endpointRuleOptions = {\r\n        ...options,\r\n        referenceRecord: { ...options.referenceRecord, ...referenceRecord },\r\n    };\r\n    const { url, properties, headers } = endpoint;\r\n    options.logger?.debug?.(debugId, `Resolving endpoint from template: ${toDebugString(endpoint)}`);\r\n    return {\r\n        ...(headers != undefined && {\r\n            headers: getEndpointHeaders(headers, endpointRuleOptions),\r\n        }),\r\n        ...(properties != undefined && {\r\n            properties: getEndpointProperties(properties, endpointRuleOptions),\r\n        }),\r\n        url: getEndpointUrl(url, endpointRuleOptions),\r\n    };\r\n};\r\n"],"mappings":"AAAA,SAASA,OAAO,EAAEC,aAAa,QAAQ,UAAU;AACjD,SAASC,kBAAkB,QAAQ,sBAAsB;AACzD,SAASC,kBAAkB,QAAQ,sBAAsB;AACzD,SAASC,qBAAqB,QAAQ,yBAAyB;AAC/D,SAASC,cAAc,QAAQ,kBAAkB;AACjD,OAAO,MAAMC,oBAAoB,GAAG,CAACC,YAAY,EAAEC,OAAO,KAAK;EAC3D,MAAM;IAAEC,UAAU;IAAEC;EAAS,CAAC,GAAGH,YAAY;EAC7C,MAAM;IAAEI,MAAM;IAAEC;EAAgB,CAAC,GAAGV,kBAAkB,CAACO,UAAU,EAAED,OAAO,CAAC;EAC3E,IAAI,CAACG,MAAM,EAAE;IACT;EACJ;EACA,MAAME,mBAAmB,GAAG;IACxB,GAAGL,OAAO;IACVI,eAAe,EAAE;MAAE,GAAGJ,OAAO,CAACI,eAAe;MAAE,GAAGA;IAAgB;EACtE,CAAC;EACD,MAAM;IAAEE,GAAG;IAAEC,UAAU;IAAEC;EAAQ,CAAC,GAAGN,QAAQ;EAC7CF,OAAO,CAACS,MAAM,EAAEC,KAAK,GAAGlB,OAAO,EAAG,qCAAoCC,aAAa,CAACS,QAAQ,CAAE,EAAC,CAAC;EAChG,OAAO;IACH,IAAIM,OAAO,IAAIG,SAAS,IAAI;MACxBH,OAAO,EAAEb,kBAAkB,CAACa,OAAO,EAAEH,mBAAmB;IAC5D,CAAC,CAAC;IACF,IAAIE,UAAU,IAAII,SAAS,IAAI;MAC3BJ,UAAU,EAAEX,qBAAqB,CAACW,UAAU,EAAEF,mBAAmB;IACrE,CAAC,CAAC;IACFC,GAAG,EAAET,cAAc,CAACS,GAAG,EAAED,mBAAmB;EAChD,CAAC;AACL,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}