{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Long = void 0;\nvar utils_1 = require(\"./parser/utils\");\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\nvar wasm = undefined;\ntry {\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(\n  // prettier-ignore\n  new Uint8Array([0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11])), {}).exports;\n} catch (_a) {\n  // no wasm support\n}\nvar TWO_PWR_16_DBL = 1 << 16;\nvar TWO_PWR_24_DBL = 1 << 24;\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\n/** A cache of the Long representations of small integer values. */\nvar INT_CACHE = {};\n/** A cache of the Long representations of small unsigned integer values. */\nvar UINT_CACHE = {};\n/**\r\n * A class representing a 64-bit integer\r\n * @public\r\n * @category BSONType\r\n * @remarks\r\n * The internal representation of a long is the two given signed, 32-bit values.\r\n * We use 32-bit pieces because these are the size of integers on which\r\n * Javascript performs bit-operations.  For operations like addition and\r\n * multiplication, we split each number into 16 bit pieces, which can easily be\r\n * multiplied within Javascript's floating-point representation without overflow\r\n * or change in sign.\r\n * In the algorithms below, we frequently reduce the negative case to the\r\n * positive case by negating the input(s) and then post-processing the result.\r\n * Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n * (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n * a positive number, it overflows back into a negative).  Not handling this\r\n * case would often result in infinite recursion.\r\n * Common constant values ZERO, ONE, NEG_ONE, etc. are found as static properties on this class.\r\n */\nvar Long = /** @class */function () {\n  /**\r\n   * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n   *  See the from* functions below for more convenient ways of constructing Longs.\r\n   *\r\n   * Acceptable signatures are:\r\n   * - Long(low, high, unsigned?)\r\n   * - Long(bigint, unsigned?)\r\n   * - Long(string, unsigned?)\r\n   *\r\n   * @param low - The low (signed) 32 bits of the long\r\n   * @param high - The high (signed) 32 bits of the long\r\n   * @param unsigned - Whether unsigned or not, defaults to signed\r\n   */\n  function Long(low, high, unsigned) {\n    if (low === void 0) {\n      low = 0;\n    }\n    if (!(this instanceof Long)) return new Long(low, high, unsigned);\n    if (typeof low === 'bigint') {\n      Object.assign(this, Long.fromBigInt(low, !!high));\n    } else if (typeof low === 'string') {\n      Object.assign(this, Long.fromString(low, !!high));\n    } else {\n      this.low = low | 0;\n      this.high = high | 0;\n      this.unsigned = !!unsigned;\n    }\n    Object.defineProperty(this, '__isLong__', {\n      value: true,\n      configurable: false,\n      writable: false,\n      enumerable: false\n    });\n  }\n  /**\r\n   * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits.\r\n   * Each is assumed to use 32 bits.\r\n   * @param lowBits - The low 32 bits\r\n   * @param highBits - The high 32 bits\r\n   * @param unsigned - Whether unsigned or not, defaults to signed\r\n   * @returns The corresponding Long value\r\n   */\n  Long.fromBits = function (lowBits, highBits, unsigned) {\n    return new Long(lowBits, highBits, unsigned);\n  };\n  /**\r\n   * Returns a Long representing the given 32 bit integer value.\r\n   * @param value - The 32 bit integer in question\r\n   * @param unsigned - Whether unsigned or not, defaults to signed\r\n   * @returns The corresponding Long value\r\n   */\n  Long.fromInt = function (value, unsigned) {\n    var obj, cachedObj, cache;\n    if (unsigned) {\n      value >>>= 0;\n      if (cache = 0 <= value && value < 256) {\n        cachedObj = UINT_CACHE[value];\n        if (cachedObj) return cachedObj;\n      }\n      obj = Long.fromBits(value, (value | 0) < 0 ? -1 : 0, true);\n      if (cache) UINT_CACHE[value] = obj;\n      return obj;\n    } else {\n      value |= 0;\n      if (cache = -128 <= value && value < 128) {\n        cachedObj = INT_CACHE[value];\n        if (cachedObj) return cachedObj;\n      }\n      obj = Long.fromBits(value, value < 0 ? -1 : 0, false);\n      if (cache) INT_CACHE[value] = obj;\n      return obj;\n    }\n  };\n  /**\r\n   * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n   * @param value - The number in question\r\n   * @param unsigned - Whether unsigned or not, defaults to signed\r\n   * @returns The corresponding Long value\r\n   */\n  Long.fromNumber = function (value, unsigned) {\n    if (isNaN(value)) return unsigned ? Long.UZERO : Long.ZERO;\n    if (unsigned) {\n      if (value < 0) return Long.UZERO;\n      if (value >= TWO_PWR_64_DBL) return Long.MAX_UNSIGNED_VALUE;\n    } else {\n      if (value <= -TWO_PWR_63_DBL) return Long.MIN_VALUE;\n      if (value + 1 >= TWO_PWR_63_DBL) return Long.MAX_VALUE;\n    }\n    if (value < 0) return Long.fromNumber(-value, unsigned).neg();\n    return Long.fromBits(value % TWO_PWR_32_DBL | 0, value / TWO_PWR_32_DBL | 0, unsigned);\n  };\n  /**\r\n   * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n   * @param value - The number in question\r\n   * @param unsigned - Whether unsigned or not, defaults to signed\r\n   * @returns The corresponding Long value\r\n   */\n  Long.fromBigInt = function (value, unsigned) {\n    return Long.fromString(value.toString(), unsigned);\n  };\n  /**\r\n   * Returns a Long representation of the given string, written using the specified radix.\r\n   * @param str - The textual representation of the Long\r\n   * @param unsigned - Whether unsigned or not, defaults to signed\r\n   * @param radix - The radix in which the text is written (2-36), defaults to 10\r\n   * @returns The corresponding Long value\r\n   */\n  Long.fromString = function (str, unsigned, radix) {\n    if (str.length === 0) throw Error('empty string');\n    if (str === 'NaN' || str === 'Infinity' || str === '+Infinity' || str === '-Infinity') return Long.ZERO;\n    if (typeof unsigned === 'number') {\n      // For goog.math.long compatibility\n      radix = unsigned, unsigned = false;\n    } else {\n      unsigned = !!unsigned;\n    }\n    radix = radix || 10;\n    if (radix < 2 || 36 < radix) throw RangeError('radix');\n    var p;\n    if ((p = str.indexOf('-')) > 0) throw Error('interior hyphen');else if (p === 0) {\n      return Long.fromString(str.substring(1), unsigned, radix).neg();\n    }\n    // Do several (8) digits each time through the loop, so as to\n    // minimize the calls to the very expensive emulated div.\n    var radixToPower = Long.fromNumber(Math.pow(radix, 8));\n    var result = Long.ZERO;\n    for (var i = 0; i < str.length; i += 8) {\n      var size = Math.min(8, str.length - i),\n        value = parseInt(str.substring(i, i + size), radix);\n      if (size < 8) {\n        var power = Long.fromNumber(Math.pow(radix, size));\n        result = result.mul(power).add(Long.fromNumber(value));\n      } else {\n        result = result.mul(radixToPower);\n        result = result.add(Long.fromNumber(value));\n      }\n    }\n    result.unsigned = unsigned;\n    return result;\n  };\n  /**\r\n   * Creates a Long from its byte representation.\r\n   * @param bytes - Byte representation\r\n   * @param unsigned - Whether unsigned or not, defaults to signed\r\n   * @param le - Whether little or big endian, defaults to big endian\r\n   * @returns The corresponding Long value\r\n   */\n  Long.fromBytes = function (bytes, unsigned, le) {\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\n  };\n  /**\r\n   * Creates a Long from its little endian byte representation.\r\n   * @param bytes - Little endian byte representation\r\n   * @param unsigned - Whether unsigned or not, defaults to signed\r\n   * @returns The corresponding Long value\r\n   */\n  Long.fromBytesLE = function (bytes, unsigned) {\n    return new Long(bytes[0] | bytes[1] << 8 | bytes[2] << 16 | bytes[3] << 24, bytes[4] | bytes[5] << 8 | bytes[6] << 16 | bytes[7] << 24, unsigned);\n  };\n  /**\r\n   * Creates a Long from its big endian byte representation.\r\n   * @param bytes - Big endian byte representation\r\n   * @param unsigned - Whether unsigned or not, defaults to signed\r\n   * @returns The corresponding Long value\r\n   */\n  Long.fromBytesBE = function (bytes, unsigned) {\n    return new Long(bytes[4] << 24 | bytes[5] << 16 | bytes[6] << 8 | bytes[7], bytes[0] << 24 | bytes[1] << 16 | bytes[2] << 8 | bytes[3], unsigned);\n  };\n  /**\r\n   * Tests if the specified object is a Long.\r\n   */\n  Long.isLong = function (value) {\n    return (0, utils_1.isObjectLike)(value) && value['__isLong__'] === true;\n  };\n  /**\r\n   * Converts the specified value to a Long.\r\n   * @param unsigned - Whether unsigned or not, defaults to signed\r\n   */\n  Long.fromValue = function (val, unsigned) {\n    if (typeof val === 'number') return Long.fromNumber(val, unsigned);\n    if (typeof val === 'string') return Long.fromString(val, unsigned);\n    // Throws for non-objects, converts non-instanceof Long:\n    return Long.fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\n  };\n  /** Returns the sum of this and the specified Long. */\n  Long.prototype.add = function (addend) {\n    if (!Long.isLong(addend)) addend = Long.fromValue(addend);\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\n    var a48 = this.high >>> 16;\n    var a32 = this.high & 0xffff;\n    var a16 = this.low >>> 16;\n    var a00 = this.low & 0xffff;\n    var b48 = addend.high >>> 16;\n    var b32 = addend.high & 0xffff;\n    var b16 = addend.low >>> 16;\n    var b00 = addend.low & 0xffff;\n    var c48 = 0,\n      c32 = 0,\n      c16 = 0,\n      c00 = 0;\n    c00 += a00 + b00;\n    c16 += c00 >>> 16;\n    c00 &= 0xffff;\n    c16 += a16 + b16;\n    c32 += c16 >>> 16;\n    c16 &= 0xffff;\n    c32 += a32 + b32;\n    c48 += c32 >>> 16;\n    c32 &= 0xffff;\n    c48 += a48 + b48;\n    c48 &= 0xffff;\n    return Long.fromBits(c16 << 16 | c00, c48 << 16 | c32, this.unsigned);\n  };\n  /**\r\n   * Returns the sum of this and the specified Long.\r\n   * @returns Sum\r\n   */\n  Long.prototype.and = function (other) {\n    if (!Long.isLong(other)) other = Long.fromValue(other);\n    return Long.fromBits(this.low & other.low, this.high & other.high, this.unsigned);\n  };\n  /**\r\n   * Compares this Long's value with the specified's.\r\n   * @returns 0 if they are the same, 1 if the this is greater and -1 if the given one is greater\r\n   */\n  Long.prototype.compare = function (other) {\n    if (!Long.isLong(other)) other = Long.fromValue(other);\n    if (this.eq(other)) return 0;\n    var thisNeg = this.isNegative(),\n      otherNeg = other.isNegative();\n    if (thisNeg && !otherNeg) return -1;\n    if (!thisNeg && otherNeg) return 1;\n    // At this point the sign bits are the same\n    if (!this.unsigned) return this.sub(other).isNegative() ? -1 : 1;\n    // Both are positive if at least one is unsigned\n    return other.high >>> 0 > this.high >>> 0 || other.high === this.high && other.low >>> 0 > this.low >>> 0 ? -1 : 1;\n  };\n  /** This is an alias of {@link Long.compare} */\n  Long.prototype.comp = function (other) {\n    return this.compare(other);\n  };\n  /**\r\n   * Returns this Long divided by the specified. The result is signed if this Long is signed or unsigned if this Long is unsigned.\r\n   * @returns Quotient\r\n   */\n  Long.prototype.divide = function (divisor) {\n    if (!Long.isLong(divisor)) divisor = Long.fromValue(divisor);\n    if (divisor.isZero()) throw Error('division by zero');\n    // use wasm support if present\n    if (wasm) {\n      // guard against signed division overflow: the largest\n      // negative number / -1 would be 1 larger than the largest\n      // positive number, due to two's complement.\n      if (!this.unsigned && this.high === -0x80000000 && divisor.low === -1 && divisor.high === -1) {\n        // be consistent with non-wasm code path\n        return this;\n      }\n      var low = (this.unsigned ? wasm.div_u : wasm.div_s)(this.low, this.high, divisor.low, divisor.high);\n      return Long.fromBits(low, wasm.get_high(), this.unsigned);\n    }\n    if (this.isZero()) return this.unsigned ? Long.UZERO : Long.ZERO;\n    var approx, rem, res;\n    if (!this.unsigned) {\n      // This section is only relevant for signed longs and is derived from the\n      // closure library as a whole.\n      if (this.eq(Long.MIN_VALUE)) {\n        if (divisor.eq(Long.ONE) || divisor.eq(Long.NEG_ONE)) return Long.MIN_VALUE;\n        // recall that -MIN_VALUE == MIN_VALUE\n        else if (divisor.eq(Long.MIN_VALUE)) return Long.ONE;else {\n          // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\n          var halfThis = this.shr(1);\n          approx = halfThis.div(divisor).shl(1);\n          if (approx.eq(Long.ZERO)) {\n            return divisor.isNegative() ? Long.ONE : Long.NEG_ONE;\n          } else {\n            rem = this.sub(divisor.mul(approx));\n            res = approx.add(rem.div(divisor));\n            return res;\n          }\n        }\n      } else if (divisor.eq(Long.MIN_VALUE)) return this.unsigned ? Long.UZERO : Long.ZERO;\n      if (this.isNegative()) {\n        if (divisor.isNegative()) return this.neg().div(divisor.neg());\n        return this.neg().div(divisor).neg();\n      } else if (divisor.isNegative()) return this.div(divisor.neg()).neg();\n      res = Long.ZERO;\n    } else {\n      // The algorithm below has not been made for unsigned longs. It's therefore\n      // required to take special care of the MSB prior to running it.\n      if (!divisor.unsigned) divisor = divisor.toUnsigned();\n      if (divisor.gt(this)) return Long.UZERO;\n      if (divisor.gt(this.shru(1)))\n        // 15 >>> 1 = 7 ; with divisor = 8 ; true\n        return Long.UONE;\n      res = Long.UZERO;\n    }\n    // Repeat the following until the remainder is less than other:  find a\n    // floating-point that approximates remainder / other *from below*, add this\n    // into the result, and subtract it from the remainder.  It is critical that\n    // the approximate value is less than or equal to the real value so that the\n    // remainder never becomes negative.\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    rem = this;\n    while (rem.gte(divisor)) {\n      // Approximate the result of division. This may be a little greater or\n      // smaller than the actual value.\n      approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\n      // We will tweak the approximate result by changing it in the 48-th digit or\n      // the smallest non-fractional digit, whichever is larger.\n      var log2 = Math.ceil(Math.log(approx) / Math.LN2);\n      var delta = log2 <= 48 ? 1 : Math.pow(2, log2 - 48);\n      // Decrease the approximation until it is smaller than the remainder.  Note\n      // that if it is too large, the product overflows and is negative.\n      var approxRes = Long.fromNumber(approx);\n      var approxRem = approxRes.mul(divisor);\n      while (approxRem.isNegative() || approxRem.gt(rem)) {\n        approx -= delta;\n        approxRes = Long.fromNumber(approx, this.unsigned);\n        approxRem = approxRes.mul(divisor);\n      }\n      // We know the answer can't be zero... and actually, zero would cause\n      // infinite recursion since we would make no progress.\n      if (approxRes.isZero()) approxRes = Long.ONE;\n      res = res.add(approxRes);\n      rem = rem.sub(approxRem);\n    }\n    return res;\n  };\n  /**This is an alias of {@link Long.divide} */\n  Long.prototype.div = function (divisor) {\n    return this.divide(divisor);\n  };\n  /**\r\n   * Tests if this Long's value equals the specified's.\r\n   * @param other - Other value\r\n   */\n  Long.prototype.equals = function (other) {\n    if (!Long.isLong(other)) other = Long.fromValue(other);\n    if (this.unsigned !== other.unsigned && this.high >>> 31 === 1 && other.high >>> 31 === 1) return false;\n    return this.high === other.high && this.low === other.low;\n  };\n  /** This is an alias of {@link Long.equals} */\n  Long.prototype.eq = function (other) {\n    return this.equals(other);\n  };\n  /** Gets the high 32 bits as a signed integer. */\n  Long.prototype.getHighBits = function () {\n    return this.high;\n  };\n  /** Gets the high 32 bits as an unsigned integer. */\n  Long.prototype.getHighBitsUnsigned = function () {\n    return this.high >>> 0;\n  };\n  /** Gets the low 32 bits as a signed integer. */\n  Long.prototype.getLowBits = function () {\n    return this.low;\n  };\n  /** Gets the low 32 bits as an unsigned integer. */\n  Long.prototype.getLowBitsUnsigned = function () {\n    return this.low >>> 0;\n  };\n  /** Gets the number of bits needed to represent the absolute value of this Long. */\n  Long.prototype.getNumBitsAbs = function () {\n    if (this.isNegative()) {\n      // Unsigned Longs are never negative\n      return this.eq(Long.MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\n    }\n    var val = this.high !== 0 ? this.high : this.low;\n    var bit;\n    for (bit = 31; bit > 0; bit--) if ((val & 1 << bit) !== 0) break;\n    return this.high !== 0 ? bit + 33 : bit + 1;\n  };\n  /** Tests if this Long's value is greater than the specified's. */\n  Long.prototype.greaterThan = function (other) {\n    return this.comp(other) > 0;\n  };\n  /** This is an alias of {@link Long.greaterThan} */\n  Long.prototype.gt = function (other) {\n    return this.greaterThan(other);\n  };\n  /** Tests if this Long's value is greater than or equal the specified's. */\n  Long.prototype.greaterThanOrEqual = function (other) {\n    return this.comp(other) >= 0;\n  };\n  /** This is an alias of {@link Long.greaterThanOrEqual} */\n  Long.prototype.gte = function (other) {\n    return this.greaterThanOrEqual(other);\n  };\n  /** This is an alias of {@link Long.greaterThanOrEqual} */\n  Long.prototype.ge = function (other) {\n    return this.greaterThanOrEqual(other);\n  };\n  /** Tests if this Long's value is even. */\n  Long.prototype.isEven = function () {\n    return (this.low & 1) === 0;\n  };\n  /** Tests if this Long's value is negative. */\n  Long.prototype.isNegative = function () {\n    return !this.unsigned && this.high < 0;\n  };\n  /** Tests if this Long's value is odd. */\n  Long.prototype.isOdd = function () {\n    return (this.low & 1) === 1;\n  };\n  /** Tests if this Long's value is positive. */\n  Long.prototype.isPositive = function () {\n    return this.unsigned || this.high >= 0;\n  };\n  /** Tests if this Long's value equals zero. */\n  Long.prototype.isZero = function () {\n    return this.high === 0 && this.low === 0;\n  };\n  /** Tests if this Long's value is less than the specified's. */\n  Long.prototype.lessThan = function (other) {\n    return this.comp(other) < 0;\n  };\n  /** This is an alias of {@link Long#lessThan}. */\n  Long.prototype.lt = function (other) {\n    return this.lessThan(other);\n  };\n  /** Tests if this Long's value is less than or equal the specified's. */\n  Long.prototype.lessThanOrEqual = function (other) {\n    return this.comp(other) <= 0;\n  };\n  /** This is an alias of {@link Long.lessThanOrEqual} */\n  Long.prototype.lte = function (other) {\n    return this.lessThanOrEqual(other);\n  };\n  /** Returns this Long modulo the specified. */\n  Long.prototype.modulo = function (divisor) {\n    if (!Long.isLong(divisor)) divisor = Long.fromValue(divisor);\n    // use wasm support if present\n    if (wasm) {\n      var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(this.low, this.high, divisor.low, divisor.high);\n      return Long.fromBits(low, wasm.get_high(), this.unsigned);\n    }\n    return this.sub(this.div(divisor).mul(divisor));\n  };\n  /** This is an alias of {@link Long.modulo} */\n  Long.prototype.mod = function (divisor) {\n    return this.modulo(divisor);\n  };\n  /** This is an alias of {@link Long.modulo} */\n  Long.prototype.rem = function (divisor) {\n    return this.modulo(divisor);\n  };\n  /**\r\n   * Returns the product of this and the specified Long.\r\n   * @param multiplier - Multiplier\r\n   * @returns Product\r\n   */\n  Long.prototype.multiply = function (multiplier) {\n    if (this.isZero()) return Long.ZERO;\n    if (!Long.isLong(multiplier)) multiplier = Long.fromValue(multiplier);\n    // use wasm support if present\n    if (wasm) {\n      var low = wasm.mul(this.low, this.high, multiplier.low, multiplier.high);\n      return Long.fromBits(low, wasm.get_high(), this.unsigned);\n    }\n    if (multiplier.isZero()) return Long.ZERO;\n    if (this.eq(Long.MIN_VALUE)) return multiplier.isOdd() ? Long.MIN_VALUE : Long.ZERO;\n    if (multiplier.eq(Long.MIN_VALUE)) return this.isOdd() ? Long.MIN_VALUE : Long.ZERO;\n    if (this.isNegative()) {\n      if (multiplier.isNegative()) return this.neg().mul(multiplier.neg());else return this.neg().mul(multiplier).neg();\n    } else if (multiplier.isNegative()) return this.mul(multiplier.neg()).neg();\n    // If both longs are small, use float multiplication\n    if (this.lt(Long.TWO_PWR_24) && multiplier.lt(Long.TWO_PWR_24)) return Long.fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\n    // We can skip products that would overflow.\n    var a48 = this.high >>> 16;\n    var a32 = this.high & 0xffff;\n    var a16 = this.low >>> 16;\n    var a00 = this.low & 0xffff;\n    var b48 = multiplier.high >>> 16;\n    var b32 = multiplier.high & 0xffff;\n    var b16 = multiplier.low >>> 16;\n    var b00 = multiplier.low & 0xffff;\n    var c48 = 0,\n      c32 = 0,\n      c16 = 0,\n      c00 = 0;\n    c00 += a00 * b00;\n    c16 += c00 >>> 16;\n    c00 &= 0xffff;\n    c16 += a16 * b00;\n    c32 += c16 >>> 16;\n    c16 &= 0xffff;\n    c16 += a00 * b16;\n    c32 += c16 >>> 16;\n    c16 &= 0xffff;\n    c32 += a32 * b00;\n    c48 += c32 >>> 16;\n    c32 &= 0xffff;\n    c32 += a16 * b16;\n    c48 += c32 >>> 16;\n    c32 &= 0xffff;\n    c32 += a00 * b32;\n    c48 += c32 >>> 16;\n    c32 &= 0xffff;\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\n    c48 &= 0xffff;\n    return Long.fromBits(c16 << 16 | c00, c48 << 16 | c32, this.unsigned);\n  };\n  /** This is an alias of {@link Long.multiply} */\n  Long.prototype.mul = function (multiplier) {\n    return this.multiply(multiplier);\n  };\n  /** Returns the Negation of this Long's value. */\n  Long.prototype.negate = function () {\n    if (!this.unsigned && this.eq(Long.MIN_VALUE)) return Long.MIN_VALUE;\n    return this.not().add(Long.ONE);\n  };\n  /** This is an alias of {@link Long.negate} */\n  Long.prototype.neg = function () {\n    return this.negate();\n  };\n  /** Returns the bitwise NOT of this Long. */\n  Long.prototype.not = function () {\n    return Long.fromBits(~this.low, ~this.high, this.unsigned);\n  };\n  /** Tests if this Long's value differs from the specified's. */\n  Long.prototype.notEquals = function (other) {\n    return !this.equals(other);\n  };\n  /** This is an alias of {@link Long.notEquals} */\n  Long.prototype.neq = function (other) {\n    return this.notEquals(other);\n  };\n  /** This is an alias of {@link Long.notEquals} */\n  Long.prototype.ne = function (other) {\n    return this.notEquals(other);\n  };\n  /**\r\n   * Returns the bitwise OR of this Long and the specified.\r\n   */\n  Long.prototype.or = function (other) {\n    if (!Long.isLong(other)) other = Long.fromValue(other);\n    return Long.fromBits(this.low | other.low, this.high | other.high, this.unsigned);\n  };\n  /**\r\n   * Returns this Long with bits shifted to the left by the given amount.\r\n   * @param numBits - Number of bits\r\n   * @returns Shifted Long\r\n   */\n  Long.prototype.shiftLeft = function (numBits) {\n    if (Long.isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;else if (numBits < 32) return Long.fromBits(this.low << numBits, this.high << numBits | this.low >>> 32 - numBits, this.unsigned);else return Long.fromBits(0, this.low << numBits - 32, this.unsigned);\n  };\n  /** This is an alias of {@link Long.shiftLeft} */\n  Long.prototype.shl = function (numBits) {\n    return this.shiftLeft(numBits);\n  };\n  /**\r\n   * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n   * @param numBits - Number of bits\r\n   * @returns Shifted Long\r\n   */\n  Long.prototype.shiftRight = function (numBits) {\n    if (Long.isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;else if (numBits < 32) return Long.fromBits(this.low >>> numBits | this.high << 32 - numBits, this.high >> numBits, this.unsigned);else return Long.fromBits(this.high >> numBits - 32, this.high >= 0 ? 0 : -1, this.unsigned);\n  };\n  /** This is an alias of {@link Long.shiftRight} */\n  Long.prototype.shr = function (numBits) {\n    return this.shiftRight(numBits);\n  };\n  /**\r\n   * Returns this Long with bits logically shifted to the right by the given amount.\r\n   * @param numBits - Number of bits\r\n   * @returns Shifted Long\r\n   */\n  Long.prototype.shiftRightUnsigned = function (numBits) {\n    if (Long.isLong(numBits)) numBits = numBits.toInt();\n    numBits &= 63;\n    if (numBits === 0) return this;else {\n      var high = this.high;\n      if (numBits < 32) {\n        var low = this.low;\n        return Long.fromBits(low >>> numBits | high << 32 - numBits, high >>> numBits, this.unsigned);\n      } else if (numBits === 32) return Long.fromBits(high, 0, this.unsigned);else return Long.fromBits(high >>> numBits - 32, 0, this.unsigned);\n    }\n  };\n  /** This is an alias of {@link Long.shiftRightUnsigned} */\n  Long.prototype.shr_u = function (numBits) {\n    return this.shiftRightUnsigned(numBits);\n  };\n  /** This is an alias of {@link Long.shiftRightUnsigned} */\n  Long.prototype.shru = function (numBits) {\n    return this.shiftRightUnsigned(numBits);\n  };\n  /**\r\n   * Returns the difference of this and the specified Long.\r\n   * @param subtrahend - Subtrahend\r\n   * @returns Difference\r\n   */\n  Long.prototype.subtract = function (subtrahend) {\n    if (!Long.isLong(subtrahend)) subtrahend = Long.fromValue(subtrahend);\n    return this.add(subtrahend.neg());\n  };\n  /** This is an alias of {@link Long.subtract} */\n  Long.prototype.sub = function (subtrahend) {\n    return this.subtract(subtrahend);\n  };\n  /** Converts the Long to a 32 bit integer, assuming it is a 32 bit integer. */\n  Long.prototype.toInt = function () {\n    return this.unsigned ? this.low >>> 0 : this.low;\n  };\n  /** Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa). */\n  Long.prototype.toNumber = function () {\n    if (this.unsigned) return (this.high >>> 0) * TWO_PWR_32_DBL + (this.low >>> 0);\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\n  };\n  /** Converts the Long to a BigInt (arbitrary precision). */\n  Long.prototype.toBigInt = function () {\n    return BigInt(this.toString());\n  };\n  /**\r\n   * Converts this Long to its byte representation.\r\n   * @param le - Whether little or big endian, defaults to big endian\r\n   * @returns Byte representation\r\n   */\n  Long.prototype.toBytes = function (le) {\n    return le ? this.toBytesLE() : this.toBytesBE();\n  };\n  /**\r\n   * Converts this Long to its little endian byte representation.\r\n   * @returns Little endian byte representation\r\n   */\n  Long.prototype.toBytesLE = function () {\n    var hi = this.high,\n      lo = this.low;\n    return [lo & 0xff, lo >>> 8 & 0xff, lo >>> 16 & 0xff, lo >>> 24, hi & 0xff, hi >>> 8 & 0xff, hi >>> 16 & 0xff, hi >>> 24];\n  };\n  /**\r\n   * Converts this Long to its big endian byte representation.\r\n   * @returns Big endian byte representation\r\n   */\n  Long.prototype.toBytesBE = function () {\n    var hi = this.high,\n      lo = this.low;\n    return [hi >>> 24, hi >>> 16 & 0xff, hi >>> 8 & 0xff, hi & 0xff, lo >>> 24, lo >>> 16 & 0xff, lo >>> 8 & 0xff, lo & 0xff];\n  };\n  /**\r\n   * Converts this Long to signed.\r\n   */\n  Long.prototype.toSigned = function () {\n    if (!this.unsigned) return this;\n    return Long.fromBits(this.low, this.high, false);\n  };\n  /**\r\n   * Converts the Long to a string written in the specified radix.\r\n   * @param radix - Radix (2-36), defaults to 10\r\n   * @throws RangeError If `radix` is out of range\r\n   */\n  Long.prototype.toString = function (radix) {\n    radix = radix || 10;\n    if (radix < 2 || 36 < radix) throw RangeError('radix');\n    if (this.isZero()) return '0';\n    if (this.isNegative()) {\n      // Unsigned Longs are never negative\n      if (this.eq(Long.MIN_VALUE)) {\n        // We need to change the Long value before it can be negated, so we remove\n        // the bottom-most digit in this base and then recurse to do the rest.\n        var radixLong = Long.fromNumber(radix),\n          div = this.div(radixLong),\n          rem1 = div.mul(radixLong).sub(this);\n        return div.toString(radix) + rem1.toInt().toString(radix);\n      } else return '-' + this.neg().toString(radix);\n    }\n    // Do several (6) digits each time through the loop, so as to\n    // minimize the calls to the very expensive emulated div.\n    var radixToPower = Long.fromNumber(Math.pow(radix, 6), this.unsigned);\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    var rem = this;\n    var result = '';\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n      var remDiv = rem.div(radixToPower);\n      var intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0;\n      var digits = intval.toString(radix);\n      rem = remDiv;\n      if (rem.isZero()) {\n        return digits + result;\n      } else {\n        while (digits.length < 6) digits = '0' + digits;\n        result = '' + digits + result;\n      }\n    }\n  };\n  /** Converts this Long to unsigned. */\n  Long.prototype.toUnsigned = function () {\n    if (this.unsigned) return this;\n    return Long.fromBits(this.low, this.high, true);\n  };\n  /** Returns the bitwise XOR of this Long and the given one. */\n  Long.prototype.xor = function (other) {\n    if (!Long.isLong(other)) other = Long.fromValue(other);\n    return Long.fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\n  };\n  /** This is an alias of {@link Long.isZero} */\n  Long.prototype.eqz = function () {\n    return this.isZero();\n  };\n  /** This is an alias of {@link Long.lessThanOrEqual} */\n  Long.prototype.le = function (other) {\n    return this.lessThanOrEqual(other);\n  };\n  /*\r\n   ****************************************************************\r\n   *                  BSON SPECIFIC ADDITIONS                     *\r\n   ****************************************************************\r\n   */\n  Long.prototype.toExtendedJSON = function (options) {\n    if (options && options.relaxed) return this.toNumber();\n    return {\n      $numberLong: this.toString()\n    };\n  };\n  Long.fromExtendedJSON = function (doc, options) {\n    var result = Long.fromString(doc.$numberLong);\n    return options && options.relaxed ? result.toNumber() : result;\n  };\n  /** @internal */\n  Long.prototype[Symbol.for('nodejs.util.inspect.custom')] = function () {\n    return this.inspect();\n  };\n  Long.prototype.inspect = function () {\n    return \"new Long(\\\"\".concat(this.toString(), \"\\\"\").concat(this.unsigned ? ', true' : '', \")\");\n  };\n  Long.TWO_PWR_24 = Long.fromInt(TWO_PWR_24_DBL);\n  /** Maximum unsigned value. */\n  Long.MAX_UNSIGNED_VALUE = Long.fromBits(0xffffffff | 0, 0xffffffff | 0, true);\n  /** Signed zero */\n  Long.ZERO = Long.fromInt(0);\n  /** Unsigned zero. */\n  Long.UZERO = Long.fromInt(0, true);\n  /** Signed one. */\n  Long.ONE = Long.fromInt(1);\n  /** Unsigned one. */\n  Long.UONE = Long.fromInt(1, true);\n  /** Signed negative one. */\n  Long.NEG_ONE = Long.fromInt(-1);\n  /** Maximum signed value. */\n  Long.MAX_VALUE = Long.fromBits(0xffffffff | 0, 0x7fffffff | 0, false);\n  /** Minimum signed value. */\n  Long.MIN_VALUE = Long.fromBits(0, 0x80000000 | 0, false);\n  return Long;\n}();\nexports.Long = Long;\nObject.defineProperty(Long.prototype, '__isLong__', {\n  value: true\n});\nObject.defineProperty(Long.prototype, '_bsontype', {\n  value: 'Long'\n});","map":{"version":3,"mappings":";;;;;;AACA;AA2CA;;;AAGA,IAAIA,IAAI,GAAgCC,SAAS;AAMjD,IAAI;EACFD,IAAI,GAAG,IAAIE,WAAW,CAACC,QAAQ,CAC7B,IAAID,WAAW,CAACE,MAAM;EACpB;EACA,IAAIC,UAAU,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG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","names":["wasm","undefined","WebAssembly","Instance","Module","Uint8Array","exports","TWO_PWR_16_DBL","TWO_PWR_24_DBL","TWO_PWR_32_DBL","TWO_PWR_64_DBL","TWO_PWR_63_DBL","INT_CACHE","UINT_CACHE","low","high","unsigned","Long","Object","assign","fromBigInt","fromString","defineProperty","value","configurable","writable","enumerable","lowBits","highBits","obj","cachedObj","cache","fromBits","isNaN","UZERO","ZERO","MAX_UNSIGNED_VALUE","MIN_VALUE","MAX_VALUE","fromNumber","neg","toString","str","radix","length","Error","RangeError","p","indexOf","substring","radixToPower","Math","pow","result","i","size","min","parseInt","power","mul","add","bytes","le","fromBytesLE","fromBytesBE","val","addend","isLong","fromValue","a48","a32","a16","a00","b48","b32","b16","b00","c48","c32","c16","c00","other","eq","thisNeg","isNegative","otherNeg","sub","compare","divisor","isZero","div_u","div_s","get_high","approx","rem","res","ONE","NEG_ONE","halfThis","shr","div","shl","toUnsigned","gt","shru","UONE","gte","max","floor","toNumber","log2","ceil","log","LN2","delta","approxRes","approxRem","divide","equals","getNumBitsAbs","bit","comp","greaterThan","greaterThanOrEqual","lessThan","lessThanOrEqual","rem_u","rem_s","modulo","multiplier","isOdd","lt","TWO_PWR_24","multiply","not","negate","notEquals","numBits","toInt","shiftLeft","shiftRight","shiftRightUnsigned","subtrahend","subtract","BigInt","toBytesLE","toBytesBE","hi","lo","radixLong","rem1","remDiv","intval","digits","options","relaxed","$numberLong","doc","Symbol","for","inspect","fromInt","prototype"],"sources":["C:\\Users\\91930\\Desktop\\Github projects\\Pharmacy Demo\\back-end\\node_modules\\bson\\src\\long.ts"],"sourcesContent":["import type { EJSONOptions } from './extended_json';\r\nimport { isObjectLike } from './parser/utils';\r\nimport type { Timestamp } from './timestamp';\r\n\r\ninterface LongWASMHelpers {\r\n  /** Gets the high bits of the last operation performed */\r\n  get_high(this: void): number;\r\n  div_u(\r\n    this: void,\r\n    lowBits: number,\r\n    highBits: number,\r\n    lowBitsDivisor: number,\r\n    highBitsDivisor: number\r\n  ): number;\r\n  div_s(\r\n    this: void,\r\n    lowBits: number,\r\n    highBits: number,\r\n    lowBitsDivisor: number,\r\n    highBitsDivisor: number\r\n  ): number;\r\n  rem_u(\r\n    this: void,\r\n    lowBits: number,\r\n    highBits: number,\r\n    lowBitsDivisor: number,\r\n    highBitsDivisor: number\r\n  ): number;\r\n  rem_s(\r\n    this: void,\r\n    lowBits: number,\r\n    highBits: number,\r\n    lowBitsDivisor: number,\r\n    highBitsDivisor: number\r\n  ): number;\r\n  mul(\r\n    this: void,\r\n    lowBits: number,\r\n    highBits: number,\r\n    lowBitsMultiplier: number,\r\n    highBitsMultiplier: number\r\n  ): number;\r\n}\r\n\r\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\r\nlet wasm: LongWASMHelpers | undefined = undefined;\r\n\r\n/* We do not want to have to include DOM types just for this check */\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\ndeclare const WebAssembly: any;\r\n\r\ntry {\r\n  wasm = new WebAssembly.Instance(\r\n    new WebAssembly.Module(\r\n      // prettier-ignore\r\n      new Uint8Array([0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11])\r\n    ),\r\n    {}\r\n  ).exports as unknown as LongWASMHelpers;\r\n} catch {\r\n  // no wasm support\r\n}\r\n\r\nconst TWO_PWR_16_DBL = 1 << 16;\r\nconst TWO_PWR_24_DBL = 1 << 24;\r\nconst TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\nconst TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\nconst TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n/** A cache of the Long representations of small integer values. */\r\nconst INT_CACHE: { [key: number]: Long } = {};\r\n\r\n/** A cache of the Long representations of small unsigned integer values. */\r\nconst UINT_CACHE: { [key: number]: Long } = {};\r\n\r\n/** @public */\r\nexport interface LongExtended {\r\n  $numberLong: string;\r\n}\r\n\r\n/**\r\n * A class representing a 64-bit integer\r\n * @public\r\n * @category BSONType\r\n * @remarks\r\n * The internal representation of a long is the two given signed, 32-bit values.\r\n * We use 32-bit pieces because these are the size of integers on which\r\n * Javascript performs bit-operations.  For operations like addition and\r\n * multiplication, we split each number into 16 bit pieces, which can easily be\r\n * multiplied within Javascript's floating-point representation without overflow\r\n * or change in sign.\r\n * In the algorithms below, we frequently reduce the negative case to the\r\n * positive case by negating the input(s) and then post-processing the result.\r\n * Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n * (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n * a positive number, it overflows back into a negative).  Not handling this\r\n * case would often result in infinite recursion.\r\n * Common constant values ZERO, ONE, NEG_ONE, etc. are found as static properties on this class.\r\n */\r\nexport class Long {\r\n  _bsontype!: 'Long';\r\n\r\n  /** An indicator used to reliably determine if an object is a Long or not. */\r\n  __isLong__!: true;\r\n\r\n  /**\r\n   * The high 32 bits as a signed value.\r\n   */\r\n  high!: number;\r\n\r\n  /**\r\n   * The low 32 bits as a signed value.\r\n   */\r\n  low!: number;\r\n\r\n  /**\r\n   * Whether unsigned or not.\r\n   */\r\n  unsigned!: boolean;\r\n\r\n  /**\r\n   * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n   *  See the from* functions below for more convenient ways of constructing Longs.\r\n   *\r\n   * Acceptable signatures are:\r\n   * - Long(low, high, unsigned?)\r\n   * - Long(bigint, unsigned?)\r\n   * - Long(string, unsigned?)\r\n   *\r\n   * @param low - The low (signed) 32 bits of the long\r\n   * @param high - The high (signed) 32 bits of the long\r\n   * @param unsigned - Whether unsigned or not, defaults to signed\r\n   */\r\n  constructor(low: number | bigint | string = 0, high?: number | boolean, unsigned?: boolean) {\r\n    if (!(this instanceof Long)) return new Long(low, high, unsigned);\r\n\r\n    if (typeof low === 'bigint') {\r\n      Object.assign(this, Long.fromBigInt(low, !!high));\r\n    } else if (typeof low === 'string') {\r\n      Object.assign(this, Long.fromString(low, !!high));\r\n    } else {\r\n      this.low = low | 0;\r\n      this.high = (high as number) | 0;\r\n      this.unsigned = !!unsigned;\r\n    }\r\n\r\n    Object.defineProperty(this, '__isLong__', {\r\n      value: true,\r\n      configurable: false,\r\n      writable: false,\r\n      enumerable: false\r\n    });\r\n  }\r\n\r\n  static TWO_PWR_24 = Long.fromInt(TWO_PWR_24_DBL);\r\n\r\n  /** Maximum unsigned value. */\r\n  static MAX_UNSIGNED_VALUE = Long.fromBits(0xffffffff | 0, 0xffffffff | 0, true);\r\n  /** Signed zero */\r\n  static ZERO = Long.fromInt(0);\r\n  /** Unsigned zero. */\r\n  static UZERO = Long.fromInt(0, true);\r\n  /** Signed one. */\r\n  static ONE = Long.fromInt(1);\r\n  /** Unsigned one. */\r\n  static UONE = Long.fromInt(1, true);\r\n  /** Signed negative one. */\r\n  static NEG_ONE = Long.fromInt(-1);\r\n  /** Maximum signed value. */\r\n  static MAX_VALUE = Long.fromBits(0xffffffff | 0, 0x7fffffff | 0, false);\r\n  /** Minimum signed value. */\r\n  static MIN_VALUE = Long.fromBits(0, 0x80000000 | 0, false);\r\n\r\n  /**\r\n   * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits.\r\n   * Each is assumed to use 32 bits.\r\n   * @param lowBits - The low 32 bits\r\n   * @param highBits - The high 32 bits\r\n   * @param unsigned - Whether unsigned or not, defaults to signed\r\n   * @returns The corresponding Long value\r\n   */\r\n  static fromBits(lowBits: number, highBits: number, unsigned?: boolean): Long {\r\n    return new Long(lowBits, highBits, unsigned);\r\n  }\r\n\r\n  /**\r\n   * Returns a Long representing the given 32 bit integer value.\r\n   * @param value - The 32 bit integer in question\r\n   * @param unsigned - Whether unsigned or not, defaults to signed\r\n   * @returns The corresponding Long value\r\n   */\r\n  static fromInt(value: number, unsigned?: boolean): Long {\r\n    let obj, cachedObj, cache;\r\n    if (unsigned) {\r\n      value >>>= 0;\r\n      if ((cache = 0 <= value && value < 256)) {\r\n        cachedObj = UINT_CACHE[value];\r\n        if (cachedObj) return cachedObj;\r\n      }\r\n      obj = Long.fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n      if (cache) UINT_CACHE[value] = obj;\r\n      return obj;\r\n    } else {\r\n      value |= 0;\r\n      if ((cache = -128 <= value && value < 128)) {\r\n        cachedObj = INT_CACHE[value];\r\n        if (cachedObj) return cachedObj;\r\n      }\r\n      obj = Long.fromBits(value, value < 0 ? -1 : 0, false);\r\n      if (cache) INT_CACHE[value] = obj;\r\n      return obj;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n   * @param value - The number in question\r\n   * @param unsigned - Whether unsigned or not, defaults to signed\r\n   * @returns The corresponding Long value\r\n   */\r\n  static fromNumber(value: number, unsigned?: boolean): Long {\r\n    if (isNaN(value)) return unsigned ? Long.UZERO : Long.ZERO;\r\n    if (unsigned) {\r\n      if (value < 0) return Long.UZERO;\r\n      if (value >= TWO_PWR_64_DBL) return Long.MAX_UNSIGNED_VALUE;\r\n    } else {\r\n      if (value <= -TWO_PWR_63_DBL) return Long.MIN_VALUE;\r\n      if (value + 1 >= TWO_PWR_63_DBL) return Long.MAX_VALUE;\r\n    }\r\n    if (value < 0) return Long.fromNumber(-value, unsigned).neg();\r\n    return Long.fromBits(value % TWO_PWR_32_DBL | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n  }\r\n\r\n  /**\r\n   * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n   * @param value - The number in question\r\n   * @param unsigned - Whether unsigned or not, defaults to signed\r\n   * @returns The corresponding Long value\r\n   */\r\n  static fromBigInt(value: bigint, unsigned?: boolean): Long {\r\n    return Long.fromString(value.toString(), unsigned);\r\n  }\r\n\r\n  /**\r\n   * Returns a Long representation of the given string, written using the specified radix.\r\n   * @param str - The textual representation of the Long\r\n   * @param unsigned - Whether unsigned or not, defaults to signed\r\n   * @param radix - The radix in which the text is written (2-36), defaults to 10\r\n   * @returns The corresponding Long value\r\n   */\r\n  static fromString(str: string, unsigned?: boolean, radix?: number): Long {\r\n    if (str.length === 0) throw Error('empty string');\r\n    if (str === 'NaN' || str === 'Infinity' || str === '+Infinity' || str === '-Infinity')\r\n      return Long.ZERO;\r\n    if (typeof unsigned === 'number') {\r\n      // For goog.math.long compatibility\r\n      (radix = unsigned), (unsigned = false);\r\n    } else {\r\n      unsigned = !!unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix) throw RangeError('radix');\r\n\r\n    let p;\r\n    if ((p = str.indexOf('-')) > 0) throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n      return Long.fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n\r\n    // Do several (8) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    const radixToPower = Long.fromNumber(Math.pow(radix, 8));\r\n\r\n    let result = Long.ZERO;\r\n    for (let i = 0; i < str.length; i += 8) {\r\n      const size = Math.min(8, str.length - i),\r\n        value = parseInt(str.substring(i, i + size), radix);\r\n      if (size < 8) {\r\n        const power = Long.fromNumber(Math.pow(radix, size));\r\n        result = result.mul(power).add(Long.fromNumber(value));\r\n      } else {\r\n        result = result.mul(radixToPower);\r\n        result = result.add(Long.fromNumber(value));\r\n      }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Creates a Long from its byte representation.\r\n   * @param bytes - Byte representation\r\n   * @param unsigned - Whether unsigned or not, defaults to signed\r\n   * @param le - Whether little or big endian, defaults to big endian\r\n   * @returns The corresponding Long value\r\n   */\r\n  static fromBytes(bytes: number[], unsigned?: boolean, le?: boolean): Long {\r\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n  }\r\n\r\n  /**\r\n   * Creates a Long from its little endian byte representation.\r\n   * @param bytes - Little endian byte representation\r\n   * @param unsigned - Whether unsigned or not, defaults to signed\r\n   * @returns The corresponding Long value\r\n   */\r\n  static fromBytesLE(bytes: number[], unsigned?: boolean): Long {\r\n    return new Long(\r\n      bytes[0] | (bytes[1] << 8) | (bytes[2] << 16) | (bytes[3] << 24),\r\n      bytes[4] | (bytes[5] << 8) | (bytes[6] << 16) | (bytes[7] << 24),\r\n      unsigned\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Creates a Long from its big endian byte representation.\r\n   * @param bytes - Big endian byte representation\r\n   * @param unsigned - Whether unsigned or not, defaults to signed\r\n   * @returns The corresponding Long value\r\n   */\r\n  static fromBytesBE(bytes: number[], unsigned?: boolean): Long {\r\n    return new Long(\r\n      (bytes[4] << 24) | (bytes[5] << 16) | (bytes[6] << 8) | bytes[7],\r\n      (bytes[0] << 24) | (bytes[1] << 16) | (bytes[2] << 8) | bytes[3],\r\n      unsigned\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Tests if the specified object is a Long.\r\n   */\r\n  static isLong(value: unknown): value is Long {\r\n    return isObjectLike(value) && value['__isLong__'] === true;\r\n  }\r\n\r\n  /**\r\n   * Converts the specified value to a Long.\r\n   * @param unsigned - Whether unsigned or not, defaults to signed\r\n   */\r\n  static fromValue(\r\n    val: number | string | { low: number; high: number; unsigned?: boolean },\r\n    unsigned?: boolean\r\n  ): Long {\r\n    if (typeof val === 'number') return Long.fromNumber(val, unsigned);\r\n    if (typeof val === 'string') return Long.fromString(val, unsigned);\r\n    // Throws for non-objects, converts non-instanceof Long:\r\n    return Long.fromBits(\r\n      val.low,\r\n      val.high,\r\n      typeof unsigned === 'boolean' ? unsigned : val.unsigned\r\n    );\r\n  }\r\n\r\n  /** Returns the sum of this and the specified Long. */\r\n  add(addend: string | number | Long | Timestamp): Long {\r\n    if (!Long.isLong(addend)) addend = Long.fromValue(addend);\r\n\r\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n    const a48 = this.high >>> 16;\r\n    const a32 = this.high & 0xffff;\r\n    const a16 = this.low >>> 16;\r\n    const a00 = this.low & 0xffff;\r\n\r\n    const b48 = addend.high >>> 16;\r\n    const b32 = addend.high & 0xffff;\r\n    const b16 = addend.low >>> 16;\r\n    const b00 = addend.low & 0xffff;\r\n\r\n    let c48 = 0,\r\n      c32 = 0,\r\n      c16 = 0,\r\n      c00 = 0;\r\n    c00 += a00 + b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xffff;\r\n    c16 += a16 + b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xffff;\r\n    c32 += a32 + b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xffff;\r\n    c48 += a48 + b48;\r\n    c48 &= 0xffff;\r\n    return Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n  }\r\n\r\n  /**\r\n   * Returns the sum of this and the specified Long.\r\n   * @returns Sum\r\n   */\r\n  and(other: string | number | Long | Timestamp): Long {\r\n    if (!Long.isLong(other)) other = Long.fromValue(other);\r\n    return Long.fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n  }\r\n\r\n  /**\r\n   * Compares this Long's value with the specified's.\r\n   * @returns 0 if they are the same, 1 if the this is greater and -1 if the given one is greater\r\n   */\r\n  compare(other: string | number | Long | Timestamp): 0 | 1 | -1 {\r\n    if (!Long.isLong(other)) other = Long.fromValue(other);\r\n    if (this.eq(other)) return 0;\r\n    const thisNeg = this.isNegative(),\r\n      otherNeg = other.isNegative();\r\n    if (thisNeg && !otherNeg) return -1;\r\n    if (!thisNeg && otherNeg) return 1;\r\n    // At this point the sign bits are the same\r\n    if (!this.unsigned) return this.sub(other).isNegative() ? -1 : 1;\r\n    // Both are positive if at least one is unsigned\r\n    return other.high >>> 0 > this.high >>> 0 ||\r\n      (other.high === this.high && other.low >>> 0 > this.low >>> 0)\r\n      ? -1\r\n      : 1;\r\n  }\r\n\r\n  /** This is an alias of {@link Long.compare} */\r\n  comp(other: string | number | Long | Timestamp): 0 | 1 | -1 {\r\n    return this.compare(other);\r\n  }\r\n\r\n  /**\r\n   * Returns this Long divided by the specified. The result is signed if this Long is signed or unsigned if this Long is unsigned.\r\n   * @returns Quotient\r\n   */\r\n  divide(divisor: string | number | Long | Timestamp): Long {\r\n    if (!Long.isLong(divisor)) divisor = Long.fromValue(divisor);\r\n    if (divisor.isZero()) throw Error('division by zero');\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n      // guard against signed division overflow: the largest\r\n      // negative number / -1 would be 1 larger than the largest\r\n      // positive number, due to two's complement.\r\n      if (\r\n        !this.unsigned &&\r\n        this.high === -0x80000000 &&\r\n        divisor.low === -1 &&\r\n        divisor.high === -1\r\n      ) {\r\n        // be consistent with non-wasm code path\r\n        return this;\r\n      }\r\n      const low = (this.unsigned ? wasm.div_u : wasm.div_s)(\r\n        this.low,\r\n        this.high,\r\n        divisor.low,\r\n        divisor.high\r\n      );\r\n      return Long.fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (this.isZero()) return this.unsigned ? Long.UZERO : Long.ZERO;\r\n    let approx, rem, res;\r\n    if (!this.unsigned) {\r\n      // This section is only relevant for signed longs and is derived from the\r\n      // closure library as a whole.\r\n      if (this.eq(Long.MIN_VALUE)) {\r\n        if (divisor.eq(Long.ONE) || divisor.eq(Long.NEG_ONE)) return Long.MIN_VALUE;\r\n        // recall that -MIN_VALUE == MIN_VALUE\r\n        else if (divisor.eq(Long.MIN_VALUE)) return Long.ONE;\r\n        else {\r\n          // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n          const halfThis = this.shr(1);\r\n          approx = halfThis.div(divisor).shl(1);\r\n          if (approx.eq(Long.ZERO)) {\r\n            return divisor.isNegative() ? Long.ONE : Long.NEG_ONE;\r\n          } else {\r\n            rem = this.sub(divisor.mul(approx));\r\n            res = approx.add(rem.div(divisor));\r\n            return res;\r\n          }\r\n        }\r\n      } else if (divisor.eq(Long.MIN_VALUE)) return this.unsigned ? Long.UZERO : Long.ZERO;\r\n      if (this.isNegative()) {\r\n        if (divisor.isNegative()) return this.neg().div(divisor.neg());\r\n        return this.neg().div(divisor).neg();\r\n      } else if (divisor.isNegative()) return this.div(divisor.neg()).neg();\r\n      res = Long.ZERO;\r\n    } else {\r\n      // The algorithm below has not been made for unsigned longs. It's therefore\r\n      // required to take special care of the MSB prior to running it.\r\n      if (!divisor.unsigned) divisor = divisor.toUnsigned();\r\n      if (divisor.gt(this)) return Long.UZERO;\r\n      if (divisor.gt(this.shru(1)))\r\n        // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n        return Long.UONE;\r\n      res = Long.UZERO;\r\n    }\r\n\r\n    // Repeat the following until the remainder is less than other:  find a\r\n    // floating-point that approximates remainder / other *from below*, add this\r\n    // into the result, and subtract it from the remainder.  It is critical that\r\n    // the approximate value is less than or equal to the real value so that the\r\n    // remainder never becomes negative.\r\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\r\n    rem = this;\r\n    while (rem.gte(divisor)) {\r\n      // Approximate the result of division. This may be a little greater or\r\n      // smaller than the actual value.\r\n      approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n      // We will tweak the approximate result by changing it in the 48-th digit or\r\n      // the smallest non-fractional digit, whichever is larger.\r\n      const log2 = Math.ceil(Math.log(approx) / Math.LN2);\r\n      const delta = log2 <= 48 ? 1 : Math.pow(2, log2 - 48);\r\n      // Decrease the approximation until it is smaller than the remainder.  Note\r\n      // that if it is too large, the product overflows and is negative.\r\n      let approxRes = Long.fromNumber(approx);\r\n      let approxRem = approxRes.mul(divisor);\r\n      while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n        approx -= delta;\r\n        approxRes = Long.fromNumber(approx, this.unsigned);\r\n        approxRem = approxRes.mul(divisor);\r\n      }\r\n\r\n      // We know the answer can't be zero... and actually, zero would cause\r\n      // infinite recursion since we would make no progress.\r\n      if (approxRes.isZero()) approxRes = Long.ONE;\r\n\r\n      res = res.add(approxRes);\r\n      rem = rem.sub(approxRem);\r\n    }\r\n    return res;\r\n  }\r\n\r\n  /**This is an alias of {@link Long.divide} */\r\n  div(divisor: string | number | Long | Timestamp): Long {\r\n    return this.divide(divisor);\r\n  }\r\n\r\n  /**\r\n   * Tests if this Long's value equals the specified's.\r\n   * @param other - Other value\r\n   */\r\n  equals(other: string | number | Long | Timestamp): boolean {\r\n    if (!Long.isLong(other)) other = Long.fromValue(other);\r\n    if (this.unsigned !== other.unsigned && this.high >>> 31 === 1 && other.high >>> 31 === 1)\r\n      return false;\r\n    return this.high === other.high && this.low === other.low;\r\n  }\r\n\r\n  /** This is an alias of {@link Long.equals} */\r\n  eq(other: string | number | Long | Timestamp): boolean {\r\n    return this.equals(other);\r\n  }\r\n\r\n  /** Gets the high 32 bits as a signed integer. */\r\n  getHighBits(): number {\r\n    return this.high;\r\n  }\r\n\r\n  /** Gets the high 32 bits as an unsigned integer. */\r\n  getHighBitsUnsigned(): number {\r\n    return this.high >>> 0;\r\n  }\r\n\r\n  /** Gets the low 32 bits as a signed integer. */\r\n  getLowBits(): number {\r\n    return this.low;\r\n  }\r\n\r\n  /** Gets the low 32 bits as an unsigned integer. */\r\n  getLowBitsUnsigned(): number {\r\n    return this.low >>> 0;\r\n  }\r\n\r\n  /** Gets the number of bits needed to represent the absolute value of this Long. */\r\n  getNumBitsAbs(): number {\r\n    if (this.isNegative()) {\r\n      // Unsigned Longs are never negative\r\n      return this.eq(Long.MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n    }\r\n    const val = this.high !== 0 ? this.high : this.low;\r\n    let bit: number;\r\n    for (bit = 31; bit > 0; bit--) if ((val & (1 << bit)) !== 0) break;\r\n    return this.high !== 0 ? bit + 33 : bit + 1;\r\n  }\r\n\r\n  /** Tests if this Long's value is greater than the specified's. */\r\n  greaterThan(other: string | number | Long | Timestamp): boolean {\r\n    return this.comp(other) > 0;\r\n  }\r\n\r\n  /** This is an alias of {@link Long.greaterThan} */\r\n  gt(other: string | number | Long | Timestamp): boolean {\r\n    return this.greaterThan(other);\r\n  }\r\n\r\n  /** Tests if this Long's value is greater than or equal the specified's. */\r\n  greaterThanOrEqual(other: string | number | Long | Timestamp): boolean {\r\n    return this.comp(other) >= 0;\r\n  }\r\n\r\n  /** This is an alias of {@link Long.greaterThanOrEqual} */\r\n  gte(other: string | number | Long | Timestamp): boolean {\r\n    return this.greaterThanOrEqual(other);\r\n  }\r\n  /** This is an alias of {@link Long.greaterThanOrEqual} */\r\n  ge(other: string | number | Long | Timestamp): boolean {\r\n    return this.greaterThanOrEqual(other);\r\n  }\r\n\r\n  /** Tests if this Long's value is even. */\r\n  isEven(): boolean {\r\n    return (this.low & 1) === 0;\r\n  }\r\n\r\n  /** Tests if this Long's value is negative. */\r\n  isNegative(): boolean {\r\n    return !this.unsigned && this.high < 0;\r\n  }\r\n\r\n  /** Tests if this Long's value is odd. */\r\n  isOdd(): boolean {\r\n    return (this.low & 1) === 1;\r\n  }\r\n\r\n  /** Tests if this Long's value is positive. */\r\n  isPositive(): boolean {\r\n    return this.unsigned || this.high >= 0;\r\n  }\r\n\r\n  /** Tests if this Long's value equals zero. */\r\n  isZero(): boolean {\r\n    return this.high === 0 && this.low === 0;\r\n  }\r\n\r\n  /** Tests if this Long's value is less than the specified's. */\r\n  lessThan(other: string | number | Long | Timestamp): boolean {\r\n    return this.comp(other) < 0;\r\n  }\r\n\r\n  /** This is an alias of {@link Long#lessThan}. */\r\n  lt(other: string | number | Long | Timestamp): boolean {\r\n    return this.lessThan(other);\r\n  }\r\n\r\n  /** Tests if this Long's value is less than or equal the specified's. */\r\n  lessThanOrEqual(other: string | number | Long | Timestamp): boolean {\r\n    return this.comp(other) <= 0;\r\n  }\r\n\r\n  /** This is an alias of {@link Long.lessThanOrEqual} */\r\n  lte(other: string | number | Long | Timestamp): boolean {\r\n    return this.lessThanOrEqual(other);\r\n  }\r\n\r\n  /** Returns this Long modulo the specified. */\r\n  modulo(divisor: string | number | Long | Timestamp): Long {\r\n    if (!Long.isLong(divisor)) divisor = Long.fromValue(divisor);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n      const low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\r\n        this.low,\r\n        this.high,\r\n        divisor.low,\r\n        divisor.high\r\n      );\r\n      return Long.fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    return this.sub(this.div(divisor).mul(divisor));\r\n  }\r\n\r\n  /** This is an alias of {@link Long.modulo} */\r\n  mod(divisor: string | number | Long | Timestamp): Long {\r\n    return this.modulo(divisor);\r\n  }\r\n  /** This is an alias of {@link Long.modulo} */\r\n  rem(divisor: string | number | Long | Timestamp): Long {\r\n    return this.modulo(divisor);\r\n  }\r\n\r\n  /**\r\n   * Returns the product of this and the specified Long.\r\n   * @param multiplier - Multiplier\r\n   * @returns Product\r\n   */\r\n  multiply(multiplier: string | number | Long | Timestamp): Long {\r\n    if (this.isZero()) return Long.ZERO;\r\n    if (!Long.isLong(multiplier)) multiplier = Long.fromValue(multiplier);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n      const low = wasm.mul(this.low, this.high, multiplier.low, multiplier.high);\r\n      return Long.fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (multiplier.isZero()) return Long.ZERO;\r\n    if (this.eq(Long.MIN_VALUE)) return multiplier.isOdd() ? Long.MIN_VALUE : Long.ZERO;\r\n    if (multiplier.eq(Long.MIN_VALUE)) return this.isOdd() ? Long.MIN_VALUE : Long.ZERO;\r\n\r\n    if (this.isNegative()) {\r\n      if (multiplier.isNegative()) return this.neg().mul(multiplier.neg());\r\n      else return this.neg().mul(multiplier).neg();\r\n    } else if (multiplier.isNegative()) return this.mul(multiplier.neg()).neg();\r\n\r\n    // If both longs are small, use float multiplication\r\n    if (this.lt(Long.TWO_PWR_24) && multiplier.lt(Long.TWO_PWR_24))\r\n      return Long.fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n    // We can skip products that would overflow.\r\n\r\n    const a48 = this.high >>> 16;\r\n    const a32 = this.high & 0xffff;\r\n    const a16 = this.low >>> 16;\r\n    const a00 = this.low & 0xffff;\r\n\r\n    const b48 = multiplier.high >>> 16;\r\n    const b32 = multiplier.high & 0xffff;\r\n    const b16 = multiplier.low >>> 16;\r\n    const b00 = multiplier.low & 0xffff;\r\n\r\n    let c48 = 0,\r\n      c32 = 0,\r\n      c16 = 0,\r\n      c00 = 0;\r\n    c00 += a00 * b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xffff;\r\n    c16 += a16 * b00;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xffff;\r\n    c16 += a00 * b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xffff;\r\n    c32 += a32 * b00;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xffff;\r\n    c32 += a16 * b16;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xffff;\r\n    c32 += a00 * b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xffff;\r\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n    c48 &= 0xffff;\r\n    return Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n  }\r\n\r\n  /** This is an alias of {@link Long.multiply} */\r\n  mul(multiplier: string | number | Long | Timestamp): Long {\r\n    return this.multiply(multiplier);\r\n  }\r\n\r\n  /** Returns the Negation of this Long's value. */\r\n  negate(): Long {\r\n    if (!this.unsigned && this.eq(Long.MIN_VALUE)) return Long.MIN_VALUE;\r\n    return this.not().add(Long.ONE);\r\n  }\r\n\r\n  /** This is an alias of {@link Long.negate} */\r\n  neg(): Long {\r\n    return this.negate();\r\n  }\r\n\r\n  /** Returns the bitwise NOT of this Long. */\r\n  not(): Long {\r\n    return Long.fromBits(~this.low, ~this.high, this.unsigned);\r\n  }\r\n\r\n  /** Tests if this Long's value differs from the specified's. */\r\n  notEquals(other: string | number | Long | Timestamp): boolean {\r\n    return !this.equals(other);\r\n  }\r\n\r\n  /** This is an alias of {@link Long.notEquals} */\r\n  neq(other: string | number | Long | Timestamp): boolean {\r\n    return this.notEquals(other);\r\n  }\r\n  /** This is an alias of {@link Long.notEquals} */\r\n  ne(other: string | number | Long | Timestamp): boolean {\r\n    return this.notEquals(other);\r\n  }\r\n\r\n  /**\r\n   * Returns the bitwise OR of this Long and the specified.\r\n   */\r\n  or(other: number | string | Long): Long {\r\n    if (!Long.isLong(other)) other = Long.fromValue(other);\r\n    return Long.fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n  }\r\n\r\n  /**\r\n   * Returns this Long with bits shifted to the left by the given amount.\r\n   * @param numBits - Number of bits\r\n   * @returns Shifted Long\r\n   */\r\n  shiftLeft(numBits: number | Long): Long {\r\n    if (Long.isLong(numBits)) numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0) return this;\r\n    else if (numBits < 32)\r\n      return Long.fromBits(\r\n        this.low << numBits,\r\n        (this.high << numBits) | (this.low >>> (32 - numBits)),\r\n        this.unsigned\r\n      );\r\n    else return Long.fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n  }\r\n\r\n  /** This is an alias of {@link Long.shiftLeft} */\r\n  shl(numBits: number | Long): Long {\r\n    return this.shiftLeft(numBits);\r\n  }\r\n\r\n  /**\r\n   * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n   * @param numBits - Number of bits\r\n   * @returns Shifted Long\r\n   */\r\n  shiftRight(numBits: number | Long): Long {\r\n    if (Long.isLong(numBits)) numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0) return this;\r\n    else if (numBits < 32)\r\n      return Long.fromBits(\r\n        (this.low >>> numBits) | (this.high << (32 - numBits)),\r\n        this.high >> numBits,\r\n        this.unsigned\r\n      );\r\n    else return Long.fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n  }\r\n\r\n  /** This is an alias of {@link Long.shiftRight} */\r\n  shr(numBits: number | Long): Long {\r\n    return this.shiftRight(numBits);\r\n  }\r\n\r\n  /**\r\n   * Returns this Long with bits logically shifted to the right by the given amount.\r\n   * @param numBits - Number of bits\r\n   * @returns Shifted Long\r\n   */\r\n  shiftRightUnsigned(numBits: Long | number): Long {\r\n    if (Long.isLong(numBits)) numBits = numBits.toInt();\r\n    numBits &= 63;\r\n    if (numBits === 0) return this;\r\n    else {\r\n      const high = this.high;\r\n      if (numBits < 32) {\r\n        const low = this.low;\r\n        return Long.fromBits(\r\n          (low >>> numBits) | (high << (32 - numBits)),\r\n          high >>> numBits,\r\n          this.unsigned\r\n        );\r\n      } else if (numBits === 32) return Long.fromBits(high, 0, this.unsigned);\r\n      else return Long.fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n    }\r\n  }\r\n\r\n  /** This is an alias of {@link Long.shiftRightUnsigned} */\r\n  shr_u(numBits: number | Long): Long {\r\n    return this.shiftRightUnsigned(numBits);\r\n  }\r\n  /** This is an alias of {@link Long.shiftRightUnsigned} */\r\n  shru(numBits: number | Long): Long {\r\n    return this.shiftRightUnsigned(numBits);\r\n  }\r\n\r\n  /**\r\n   * Returns the difference of this and the specified Long.\r\n   * @param subtrahend - Subtrahend\r\n   * @returns Difference\r\n   */\r\n  subtract(subtrahend: string | number | Long | Timestamp): Long {\r\n    if (!Long.isLong(subtrahend)) subtrahend = Long.fromValue(subtrahend);\r\n    return this.add(subtrahend.neg());\r\n  }\r\n\r\n  /** This is an alias of {@link Long.subtract} */\r\n  sub(subtrahend: string | number | Long | Timestamp): Long {\r\n    return this.subtract(subtrahend);\r\n  }\r\n\r\n  /** Converts the Long to a 32 bit integer, assuming it is a 32 bit integer. */\r\n  toInt(): number {\r\n    return this.unsigned ? this.low >>> 0 : this.low;\r\n  }\r\n\r\n  /** Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa). */\r\n  toNumber(): number {\r\n    if (this.unsigned) return (this.high >>> 0) * TWO_PWR_32_DBL + (this.low >>> 0);\r\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n  }\r\n\r\n  /** Converts the Long to a BigInt (arbitrary precision). */\r\n  toBigInt(): bigint {\r\n    return BigInt(this.toString());\r\n  }\r\n\r\n  /**\r\n   * Converts this Long to its byte representation.\r\n   * @param le - Whether little or big endian, defaults to big endian\r\n   * @returns Byte representation\r\n   */\r\n  toBytes(le?: boolean): number[] {\r\n    return le ? this.toBytesLE() : this.toBytesBE();\r\n  }\r\n\r\n  /**\r\n   * Converts this Long to its little endian byte representation.\r\n   * @returns Little endian byte representation\r\n   */\r\n  toBytesLE(): number[] {\r\n    const hi = this.high,\r\n      lo = this.low;\r\n    return [\r\n      lo & 0xff,\r\n      (lo >>> 8) & 0xff,\r\n      (lo >>> 16) & 0xff,\r\n      lo >>> 24,\r\n      hi & 0xff,\r\n      (hi >>> 8) & 0xff,\r\n      (hi >>> 16) & 0xff,\r\n      hi >>> 24\r\n    ];\r\n  }\r\n\r\n  /**\r\n   * Converts this Long to its big endian byte representation.\r\n   * @returns Big endian byte representation\r\n   */\r\n  toBytesBE(): number[] {\r\n    const hi = this.high,\r\n      lo = this.low;\r\n    return [\r\n      hi >>> 24,\r\n      (hi >>> 16) & 0xff,\r\n      (hi >>> 8) & 0xff,\r\n      hi & 0xff,\r\n      lo >>> 24,\r\n      (lo >>> 16) & 0xff,\r\n      (lo >>> 8) & 0xff,\r\n      lo & 0xff\r\n    ];\r\n  }\r\n\r\n  /**\r\n   * Converts this Long to signed.\r\n   */\r\n  toSigned(): Long {\r\n    if (!this.unsigned) return this;\r\n    return Long.fromBits(this.low, this.high, false);\r\n  }\r\n\r\n  /**\r\n   * Converts the Long to a string written in the specified radix.\r\n   * @param radix - Radix (2-36), defaults to 10\r\n   * @throws RangeError If `radix` is out of range\r\n   */\r\n  toString(radix?: number): string {\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix) throw RangeError('radix');\r\n    if (this.isZero()) return '0';\r\n    if (this.isNegative()) {\r\n      // Unsigned Longs are never negative\r\n      if (this.eq(Long.MIN_VALUE)) {\r\n        // We need to change the Long value before it can be negated, so we remove\r\n        // the bottom-most digit in this base and then recurse to do the rest.\r\n        const radixLong = Long.fromNumber(radix),\r\n          div = this.div(radixLong),\r\n          rem1 = div.mul(radixLong).sub(this);\r\n        return div.toString(radix) + rem1.toInt().toString(radix);\r\n      } else return '-' + this.neg().toString(radix);\r\n    }\r\n\r\n    // Do several (6) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    const radixToPower = Long.fromNumber(Math.pow(radix, 6), this.unsigned);\r\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\r\n    let rem: Long = this;\r\n    let result = '';\r\n    // eslint-disable-next-line no-constant-condition\r\n    while (true) {\r\n      const remDiv = rem.div(radixToPower);\r\n      const intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0;\r\n      let digits = intval.toString(radix);\r\n      rem = remDiv;\r\n      if (rem.isZero()) {\r\n        return digits + result;\r\n      } else {\r\n        while (digits.length < 6) digits = '0' + digits;\r\n        result = '' + digits + result;\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Converts this Long to unsigned. */\r\n  toUnsigned(): Long {\r\n    if (this.unsigned) return this;\r\n    return Long.fromBits(this.low, this.high, true);\r\n  }\r\n\r\n  /** Returns the bitwise XOR of this Long and the given one. */\r\n  xor(other: Long | number | string): Long {\r\n    if (!Long.isLong(other)) other = Long.fromValue(other);\r\n    return Long.fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n  }\r\n\r\n  /** This is an alias of {@link Long.isZero} */\r\n  eqz(): boolean {\r\n    return this.isZero();\r\n  }\r\n\r\n  /** This is an alias of {@link Long.lessThanOrEqual} */\r\n  le(other: string | number | Long | Timestamp): boolean {\r\n    return this.lessThanOrEqual(other);\r\n  }\r\n\r\n  /*\r\n   ****************************************************************\r\n   *                  BSON SPECIFIC ADDITIONS                     *\r\n   ****************************************************************\r\n   */\r\n  toExtendedJSON(options?: EJSONOptions): number | LongExtended {\r\n    if (options && options.relaxed) return this.toNumber();\r\n    return { $numberLong: this.toString() };\r\n  }\r\n  static fromExtendedJSON(doc: { $numberLong: string }, options?: EJSONOptions): number | Long {\r\n    const result = Long.fromString(doc.$numberLong);\r\n    return options && options.relaxed ? result.toNumber() : result;\r\n  }\r\n\r\n  /** @internal */\r\n  [Symbol.for('nodejs.util.inspect.custom')](): string {\r\n    return this.inspect();\r\n  }\r\n\r\n  inspect(): string {\r\n    return `new Long(\"${this.toString()}\"${this.unsigned ? ', true' : ''})`;\r\n  }\r\n}\r\n\r\nObject.defineProperty(Long.prototype, '__isLong__', { value: true });\r\nObject.defineProperty(Long.prototype, '_bsontype', { value: 'Long' });\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}