{"ast":null,"code":"'use strict';\n\nconst assert = require('assert');\nconst {\n  transcode\n} = require('buffer');\nconst {\n  inspect\n} = require('util');\nconst busboy = require('..');\nconst active = new Map();\nconst tests = [{\n  source: ['foo'],\n  expected: [['foo', '', {\n    nameTruncated: false,\n    valueTruncated: false,\n    encoding: 'utf-8',\n    mimeType: 'text/plain'\n  }]],\n  what: 'Unassigned value'\n}, {\n  source: ['foo=bar'],\n  expected: [['foo', 'bar', {\n    nameTruncated: false,\n    valueTruncated: false,\n    encoding: 'utf-8',\n    mimeType: 'text/plain'\n  }]],\n  what: 'Assigned value'\n}, {\n  source: ['foo&bar=baz'],\n  expected: [['foo', '', {\n    nameTruncated: false,\n    valueTruncated: false,\n    encoding: 'utf-8',\n    mimeType: 'text/plain'\n  }], ['bar', 'baz', {\n    nameTruncated: false,\n    valueTruncated: false,\n    encoding: 'utf-8',\n    mimeType: 'text/plain'\n  }]],\n  what: 'Unassigned and assigned value'\n}, {\n  source: ['foo=bar&baz'],\n  expected: [['foo', 'bar', {\n    nameTruncated: false,\n    valueTruncated: false,\n    encoding: 'utf-8',\n    mimeType: 'text/plain'\n  }], ['baz', '', {\n    nameTruncated: false,\n    valueTruncated: false,\n    encoding: 'utf-8',\n    mimeType: 'text/plain'\n  }]],\n  what: 'Assigned and unassigned value'\n}, {\n  source: ['foo=bar&baz=bla'],\n  expected: [['foo', 'bar', {\n    nameTruncated: false,\n    valueTruncated: false,\n    encoding: 'utf-8',\n    mimeType: 'text/plain'\n  }], ['baz', 'bla', {\n    nameTruncated: false,\n    valueTruncated: false,\n    encoding: 'utf-8',\n    mimeType: 'text/plain'\n  }]],\n  what: 'Two assigned values'\n}, {\n  source: ['foo&bar'],\n  expected: [['foo', '', {\n    nameTruncated: false,\n    valueTruncated: false,\n    encoding: 'utf-8',\n    mimeType: 'text/plain'\n  }], ['bar', '', {\n    nameTruncated: false,\n    valueTruncated: false,\n    encoding: 'utf-8',\n    mimeType: 'text/plain'\n  }]],\n  what: 'Two unassigned values'\n}, {\n  source: ['foo&bar&'],\n  expected: [['foo', '', {\n    nameTruncated: false,\n    valueTruncated: false,\n    encoding: 'utf-8',\n    mimeType: 'text/plain'\n  }], ['bar', '', {\n    nameTruncated: false,\n    valueTruncated: false,\n    encoding: 'utf-8',\n    mimeType: 'text/plain'\n  }]],\n  what: 'Two unassigned values and ampersand'\n}, {\n  source: ['foo+1=bar+baz%2Bquux'],\n  expected: [['foo 1', 'bar baz+quux', {\n    nameTruncated: false,\n    valueTruncated: false,\n    encoding: 'utf-8',\n    mimeType: 'text/plain'\n  }]],\n  what: 'Assigned key and value with (plus) space'\n}, {\n  source: ['foo=bar%20baz%21'],\n  expected: [['foo', 'bar baz!', {\n    nameTruncated: false,\n    valueTruncated: false,\n    encoding: 'utf-8',\n    mimeType: 'text/plain'\n  }]],\n  what: 'Assigned value with encoded bytes'\n}, {\n  source: ['foo%20bar=baz%20bla%21'],\n  expected: [['foo bar', 'baz bla!', {\n    nameTruncated: false,\n    valueTruncated: false,\n    encoding: 'utf-8',\n    mimeType: 'text/plain'\n  }]],\n  what: 'Assigned value with encoded bytes #2'\n}, {\n  source: ['foo=bar%20baz%21&num=1000'],\n  expected: [['foo', 'bar baz!', {\n    nameTruncated: false,\n    valueTruncated: false,\n    encoding: 'utf-8',\n    mimeType: 'text/plain'\n  }], ['num', '1000', {\n    nameTruncated: false,\n    valueTruncated: false,\n    encoding: 'utf-8',\n    mimeType: 'text/plain'\n  }]],\n  what: 'Two assigned values, one with encoded bytes'\n}, {\n  source: [Array.from(transcode(Buffer.from('foo'), 'utf8', 'utf16le')).map(n => `%${n.toString(16).padStart(2, '0')}`).join(''), '=', Array.from(transcode(Buffer.from('ðŸ˜€!'), 'utf8', 'utf16le')).map(n => `%${n.toString(16).padStart(2, '0')}`).join('')],\n  expected: [['foo', 'ðŸ˜€!', {\n    nameTruncated: false,\n    valueTruncated: false,\n    encoding: 'UTF-16LE',\n    mimeType: 'text/plain'\n  }]],\n  charset: 'UTF-16LE',\n  what: 'Encoded value with multi-byte charset'\n}, {\n  source: ['foo=<', Array.from(transcode(Buffer.from('Â©:^Ã¾'), 'utf8', 'latin1')).map(n => `%${n.toString(16).padStart(2, '0')}`).join('')],\n  expected: [['foo', '<Â©:^Ã¾', {\n    nameTruncated: false,\n    valueTruncated: false,\n    encoding: 'ISO-8859-1',\n    mimeType: 'text/plain'\n  }]],\n  charset: 'ISO-8859-1',\n  what: 'Encoded value with single-byte, ASCII-compatible, non-UTF8 charset'\n}, {\n  source: ['foo=bar&baz=bla'],\n  expected: [],\n  what: 'Limits: zero fields',\n  limits: {\n    fields: 0\n  }\n}, {\n  source: ['foo=bar&baz=bla'],\n  expected: [['foo', 'bar', {\n    nameTruncated: false,\n    valueTruncated: false,\n    encoding: 'utf-8',\n    mimeType: 'text/plain'\n  }]],\n  what: 'Limits: one field',\n  limits: {\n    fields: 1\n  }\n}, {\n  source: ['foo=bar&baz=bla'],\n  expected: [['foo', 'bar', {\n    nameTruncated: false,\n    valueTruncated: false,\n    encoding: 'utf-8',\n    mimeType: 'text/plain'\n  }], ['baz', 'bla', {\n    nameTruncated: false,\n    valueTruncated: false,\n    encoding: 'utf-8',\n    mimeType: 'text/plain'\n  }]],\n  what: 'Limits: field part lengths match limits',\n  limits: {\n    fieldNameSize: 3,\n    fieldSize: 3\n  }\n}, {\n  source: ['foo=bar&baz=bla'],\n  expected: [['fo', 'bar', {\n    nameTruncated: true,\n    valueTruncated: false,\n    encoding: 'utf-8',\n    mimeType: 'text/plain'\n  }], ['ba', 'bla', {\n    nameTruncated: true,\n    valueTruncated: false,\n    encoding: 'utf-8',\n    mimeType: 'text/plain'\n  }]],\n  what: 'Limits: truncated field name',\n  limits: {\n    fieldNameSize: 2\n  }\n}, {\n  source: ['foo=bar&baz=bla'],\n  expected: [['foo', 'ba', {\n    nameTruncated: false,\n    valueTruncated: true,\n    encoding: 'utf-8',\n    mimeType: 'text/plain'\n  }], ['baz', 'bl', {\n    nameTruncated: false,\n    valueTruncated: true,\n    encoding: 'utf-8',\n    mimeType: 'text/plain'\n  }]],\n  what: 'Limits: truncated field value',\n  limits: {\n    fieldSize: 2\n  }\n}, {\n  source: ['foo=bar&baz=bla'],\n  expected: [['fo', 'ba', {\n    nameTruncated: true,\n    valueTruncated: true,\n    encoding: 'utf-8',\n    mimeType: 'text/plain'\n  }], ['ba', 'bl', {\n    nameTruncated: true,\n    valueTruncated: true,\n    encoding: 'utf-8',\n    mimeType: 'text/plain'\n  }]],\n  what: 'Limits: truncated field name and value',\n  limits: {\n    fieldNameSize: 2,\n    fieldSize: 2\n  }\n}, {\n  source: ['foo=bar&baz=bla'],\n  expected: [['fo', '', {\n    nameTruncated: true,\n    valueTruncated: true,\n    encoding: 'utf-8',\n    mimeType: 'text/plain'\n  }], ['ba', '', {\n    nameTruncated: true,\n    valueTruncated: true,\n    encoding: 'utf-8',\n    mimeType: 'text/plain'\n  }]],\n  what: 'Limits: truncated field name and zero value limit',\n  limits: {\n    fieldNameSize: 2,\n    fieldSize: 0\n  }\n}, {\n  source: ['foo=bar&baz=bla'],\n  expected: [['', '', {\n    nameTruncated: true,\n    valueTruncated: true,\n    encoding: 'utf-8',\n    mimeType: 'text/plain'\n  }], ['', '', {\n    nameTruncated: true,\n    valueTruncated: true,\n    encoding: 'utf-8',\n    mimeType: 'text/plain'\n  }]],\n  what: 'Limits: truncated zero field name and zero value limit',\n  limits: {\n    fieldNameSize: 0,\n    fieldSize: 0\n  }\n}, {\n  source: ['&'],\n  expected: [],\n  what: 'Ampersand'\n}, {\n  source: ['&&&&&'],\n  expected: [],\n  what: 'Many ampersands'\n}, {\n  source: ['='],\n  expected: [['', '', {\n    nameTruncated: false,\n    valueTruncated: false,\n    encoding: 'utf-8',\n    mimeType: 'text/plain'\n  }]],\n  what: 'Assigned value, empty name and value'\n}, {\n  source: [''],\n  expected: [],\n  what: 'Nothing'\n}];\nfor (const test of tests) {\n  active.set(test, 1);\n  const {\n    what\n  } = test;\n  const charset = test.charset || 'utf-8';\n  const bb = busboy({\n    limits: test.limits,\n    headers: {\n      'content-type': `application/x-www-form-urlencoded; charset=${charset}`\n    }\n  });\n  const results = [];\n  bb.on('field', (key, val, info) => {\n    results.push([key, val, info]);\n  });\n  bb.on('file', () => {\n    throw new Error(`[${what}] Unexpected file`);\n  });\n  bb.on('close', () => {\n    active.delete(test);\n    assert.deepStrictEqual(results, test.expected, `[${what}] Results mismatch.\\n` + `Parsed: ${inspect(results)}\\n` + `Expected: ${inspect(test.expected)}`);\n  });\n  for (const src of test.source) {\n    const buf = typeof src === 'string' ? Buffer.from(src, 'utf8') : src;\n    bb.write(buf);\n  }\n  bb.end();\n}\n\n// Byte-by-byte versions\nfor (let test of tests) {\n  test = {\n    ...test\n  };\n  test.what += ' (byte-by-byte)';\n  active.set(test, 1);\n  const {\n    what\n  } = test;\n  const charset = test.charset || 'utf-8';\n  const bb = busboy({\n    limits: test.limits,\n    headers: {\n      'content-type': `application/x-www-form-urlencoded; charset=\"${charset}\"`\n    }\n  });\n  const results = [];\n  bb.on('field', (key, val, info) => {\n    results.push([key, val, info]);\n  });\n  bb.on('file', () => {\n    throw new Error(`[${what}] Unexpected file`);\n  });\n  bb.on('close', () => {\n    active.delete(test);\n    assert.deepStrictEqual(results, test.expected, `[${what}] Results mismatch.\\n` + `Parsed: ${inspect(results)}\\n` + `Expected: ${inspect(test.expected)}`);\n  });\n  for (const src of test.source) {\n    const buf = typeof src === 'string' ? Buffer.from(src, 'utf8') : src;\n    for (let i = 0; i < buf.length; ++i) bb.write(buf.slice(i, i + 1));\n  }\n  bb.end();\n}\n{\n  let exception = false;\n  process.once('uncaughtException', ex => {\n    exception = true;\n    throw ex;\n  });\n  process.on('exit', () => {\n    if (exception || active.size === 0) return;\n    process.exitCode = 1;\n    console.error('==========================');\n    console.error(`${active.size} test(s) did not finish:`);\n    console.error('==========================');\n    console.error(Array.from(active.keys()).map(v => v.what).join('\\n'));\n  });\n}","map":{"version":3,"names":["assert","require","transcode","inspect","busboy","active","Map","tests","source","expected","nameTruncated","valueTruncated","encoding","mimeType","what","Array","from","Buffer","map","n","toString","padStart","join","charset","limits","fields","fieldNameSize","fieldSize","test","set","bb","headers","results","on","key","val","info","push","Error","delete","deepStrictEqual","src","buf","write","end","i","length","slice","exception","process","once","ex","size","exitCode","console","error","keys","v"],"sources":["C:/Users/91930/Desktop/Github projects/Pharmacy Demo/back-end/node_modules/busboy/test/test-types-urlencoded.js"],"sourcesContent":["'use strict';\n\nconst assert = require('assert');\nconst { transcode } = require('buffer');\nconst { inspect } = require('util');\n\nconst busboy = require('..');\n\nconst active = new Map();\n\nconst tests = [\n  { source: ['foo'],\n    expected: [\n      ['foo',\n       '',\n       { nameTruncated: false,\n         valueTruncated: false,\n         encoding: 'utf-8',\n         mimeType: 'text/plain' },\n      ],\n    ],\n    what: 'Unassigned value'\n  },\n  { source: ['foo=bar'],\n    expected: [\n      ['foo',\n       'bar',\n       { nameTruncated: false,\n         valueTruncated: false,\n         encoding: 'utf-8',\n         mimeType: 'text/plain' },\n      ],\n    ],\n    what: 'Assigned value'\n  },\n  { source: ['foo&bar=baz'],\n    expected: [\n      ['foo',\n       '',\n       { nameTruncated: false,\n         valueTruncated: false,\n         encoding: 'utf-8',\n         mimeType: 'text/plain' },\n      ],\n      ['bar',\n       'baz',\n       { nameTruncated: false,\n         valueTruncated: false,\n         encoding: 'utf-8',\n         mimeType: 'text/plain' },\n      ],\n    ],\n    what: 'Unassigned and assigned value'\n  },\n  { source: ['foo=bar&baz'],\n    expected: [\n      ['foo',\n       'bar',\n       { nameTruncated: false,\n         valueTruncated: false,\n         encoding: 'utf-8',\n         mimeType: 'text/plain' },\n      ],\n      ['baz',\n       '',\n       { nameTruncated: false,\n         valueTruncated: false,\n         encoding: 'utf-8',\n         mimeType: 'text/plain' },\n      ],\n    ],\n    what: 'Assigned and unassigned value'\n  },\n  { source: ['foo=bar&baz=bla'],\n    expected: [\n      ['foo',\n       'bar',\n       { nameTruncated: false,\n         valueTruncated: false,\n         encoding: 'utf-8',\n         mimeType: 'text/plain' },\n      ],\n      ['baz',\n       'bla',\n       { nameTruncated: false,\n         valueTruncated: false,\n         encoding: 'utf-8',\n         mimeType: 'text/plain' },\n      ],\n    ],\n    what: 'Two assigned values'\n  },\n  { source: ['foo&bar'],\n    expected: [\n      ['foo',\n       '',\n       { nameTruncated: false,\n         valueTruncated: false,\n         encoding: 'utf-8',\n         mimeType: 'text/plain' },\n      ],\n      ['bar',\n       '',\n       { nameTruncated: false,\n         valueTruncated: false,\n         encoding: 'utf-8',\n         mimeType: 'text/plain' },\n      ],\n    ],\n    what: 'Two unassigned values'\n  },\n  { source: ['foo&bar&'],\n    expected: [\n      ['foo',\n       '',\n       { nameTruncated: false,\n         valueTruncated: false,\n         encoding: 'utf-8',\n         mimeType: 'text/plain' },\n      ],\n      ['bar',\n       '',\n       { nameTruncated: false,\n         valueTruncated: false,\n         encoding: 'utf-8',\n         mimeType: 'text/plain' },\n      ],\n    ],\n    what: 'Two unassigned values and ampersand'\n  },\n  { source: ['foo+1=bar+baz%2Bquux'],\n    expected: [\n      ['foo 1',\n       'bar baz+quux',\n       { nameTruncated: false,\n         valueTruncated: false,\n         encoding: 'utf-8',\n         mimeType: 'text/plain' },\n      ],\n    ],\n    what: 'Assigned key and value with (plus) space'\n  },\n  { source: ['foo=bar%20baz%21'],\n    expected: [\n      ['foo',\n       'bar baz!',\n       { nameTruncated: false,\n         valueTruncated: false,\n         encoding: 'utf-8',\n         mimeType: 'text/plain' },\n      ],\n    ],\n    what: 'Assigned value with encoded bytes'\n  },\n  { source: ['foo%20bar=baz%20bla%21'],\n    expected: [\n      ['foo bar',\n       'baz bla!',\n       { nameTruncated: false,\n         valueTruncated: false,\n         encoding: 'utf-8',\n         mimeType: 'text/plain' },\n      ],\n    ],\n    what: 'Assigned value with encoded bytes #2'\n  },\n  { source: ['foo=bar%20baz%21&num=1000'],\n    expected: [\n      ['foo',\n       'bar baz!',\n       { nameTruncated: false,\n         valueTruncated: false,\n         encoding: 'utf-8',\n         mimeType: 'text/plain' },\n      ],\n      ['num',\n       '1000',\n       { nameTruncated: false,\n         valueTruncated: false,\n         encoding: 'utf-8',\n         mimeType: 'text/plain' },\n      ],\n    ],\n    what: 'Two assigned values, one with encoded bytes'\n  },\n  { source: [\n      Array.from(transcode(Buffer.from('foo'), 'utf8', 'utf16le')).map(\n        (n) => `%${n.toString(16).padStart(2, '0')}`\n      ).join(''),\n      '=',\n      Array.from(transcode(Buffer.from('ðŸ˜€!'), 'utf8', 'utf16le')).map(\n        (n) => `%${n.toString(16).padStart(2, '0')}`\n      ).join(''),\n    ],\n    expected: [\n      ['foo',\n       'ðŸ˜€!',\n       { nameTruncated: false,\n         valueTruncated: false,\n         encoding: 'UTF-16LE',\n         mimeType: 'text/plain' },\n      ],\n    ],\n    charset: 'UTF-16LE',\n    what: 'Encoded value with multi-byte charset'\n  },\n  { source: [\n      'foo=<',\n      Array.from(transcode(Buffer.from('Â©:^Ã¾'), 'utf8', 'latin1')).map(\n        (n) => `%${n.toString(16).padStart(2, '0')}`\n      ).join(''),\n    ],\n    expected: [\n      ['foo',\n       '<Â©:^Ã¾',\n       { nameTruncated: false,\n         valueTruncated: false,\n         encoding: 'ISO-8859-1',\n         mimeType: 'text/plain' },\n      ],\n    ],\n    charset: 'ISO-8859-1',\n    what: 'Encoded value with single-byte, ASCII-compatible, non-UTF8 charset'\n  },\n  { source: ['foo=bar&baz=bla'],\n    expected: [],\n    what: 'Limits: zero fields',\n    limits: { fields: 0 }\n  },\n  { source: ['foo=bar&baz=bla'],\n    expected: [\n      ['foo',\n       'bar',\n       { nameTruncated: false,\n         valueTruncated: false,\n         encoding: 'utf-8',\n         mimeType: 'text/plain' },\n      ],\n    ],\n    what: 'Limits: one field',\n    limits: { fields: 1 }\n  },\n  { source: ['foo=bar&baz=bla'],\n    expected: [\n      ['foo',\n       'bar',\n       { nameTruncated: false,\n         valueTruncated: false,\n         encoding: 'utf-8',\n         mimeType: 'text/plain' },\n      ],\n      ['baz',\n       'bla',\n       { nameTruncated: false,\n         valueTruncated: false,\n         encoding: 'utf-8',\n         mimeType: 'text/plain' },\n      ],\n    ],\n    what: 'Limits: field part lengths match limits',\n    limits: { fieldNameSize: 3, fieldSize: 3 }\n  },\n  { source: ['foo=bar&baz=bla'],\n    expected: [\n      ['fo',\n       'bar',\n       { nameTruncated: true,\n         valueTruncated: false,\n         encoding: 'utf-8',\n         mimeType: 'text/plain' },\n      ],\n      ['ba',\n       'bla',\n       { nameTruncated: true,\n         valueTruncated: false,\n         encoding: 'utf-8',\n         mimeType: 'text/plain' },\n      ],\n    ],\n    what: 'Limits: truncated field name',\n    limits: { fieldNameSize: 2 }\n  },\n  { source: ['foo=bar&baz=bla'],\n    expected: [\n      ['foo',\n       'ba',\n       { nameTruncated: false,\n         valueTruncated: true,\n         encoding: 'utf-8',\n         mimeType: 'text/plain' },\n      ],\n      ['baz',\n       'bl',\n       { nameTruncated: false,\n         valueTruncated: true,\n         encoding: 'utf-8',\n         mimeType: 'text/plain' },\n      ],\n    ],\n    what: 'Limits: truncated field value',\n    limits: { fieldSize: 2 }\n  },\n  { source: ['foo=bar&baz=bla'],\n    expected: [\n      ['fo',\n       'ba',\n       { nameTruncated: true,\n         valueTruncated: true,\n         encoding: 'utf-8',\n         mimeType: 'text/plain' },\n      ],\n      ['ba',\n       'bl',\n       { nameTruncated: true,\n         valueTruncated: true,\n         encoding: 'utf-8',\n         mimeType: 'text/plain' },\n      ],\n    ],\n    what: 'Limits: truncated field name and value',\n    limits: { fieldNameSize: 2, fieldSize: 2 }\n  },\n  { source: ['foo=bar&baz=bla'],\n    expected: [\n      ['fo',\n       '',\n       { nameTruncated: true,\n         valueTruncated: true,\n         encoding: 'utf-8',\n         mimeType: 'text/plain' },\n      ],\n      ['ba',\n       '',\n       { nameTruncated: true,\n         valueTruncated: true,\n         encoding: 'utf-8',\n         mimeType: 'text/plain' },\n      ],\n    ],\n    what: 'Limits: truncated field name and zero value limit',\n    limits: { fieldNameSize: 2, fieldSize: 0 }\n  },\n  { source: ['foo=bar&baz=bla'],\n    expected: [\n      ['',\n       '',\n       { nameTruncated: true,\n         valueTruncated: true,\n         encoding: 'utf-8',\n         mimeType: 'text/plain' },\n      ],\n      ['',\n       '',\n       { nameTruncated: true,\n         valueTruncated: true,\n         encoding: 'utf-8',\n         mimeType: 'text/plain' },\n      ],\n    ],\n    what: 'Limits: truncated zero field name and zero value limit',\n    limits: { fieldNameSize: 0, fieldSize: 0 }\n  },\n  { source: ['&'],\n    expected: [],\n    what: 'Ampersand'\n  },\n  { source: ['&&&&&'],\n    expected: [],\n    what: 'Many ampersands'\n  },\n  { source: ['='],\n    expected: [\n      ['',\n       '',\n       { nameTruncated: false,\n         valueTruncated: false,\n         encoding: 'utf-8',\n         mimeType: 'text/plain' },\n      ],\n    ],\n    what: 'Assigned value, empty name and value'\n  },\n  { source: [''],\n    expected: [],\n    what: 'Nothing'\n  },\n];\n\nfor (const test of tests) {\n  active.set(test, 1);\n\n  const { what } = test;\n  const charset = test.charset || 'utf-8';\n  const bb = busboy({\n    limits: test.limits,\n    headers: {\n      'content-type': `application/x-www-form-urlencoded; charset=${charset}`,\n    },\n  });\n  const results = [];\n\n  bb.on('field', (key, val, info) => {\n    results.push([key, val, info]);\n  });\n\n  bb.on('file', () => {\n    throw new Error(`[${what}] Unexpected file`);\n  });\n\n  bb.on('close', () => {\n    active.delete(test);\n\n    assert.deepStrictEqual(\n      results,\n      test.expected,\n      `[${what}] Results mismatch.\\n`\n        + `Parsed: ${inspect(results)}\\n`\n        + `Expected: ${inspect(test.expected)}`\n    );\n  });\n\n  for (const src of test.source) {\n    const buf = (typeof src === 'string' ? Buffer.from(src, 'utf8') : src);\n    bb.write(buf);\n  }\n  bb.end();\n}\n\n// Byte-by-byte versions\nfor (let test of tests) {\n  test = { ...test };\n  test.what += ' (byte-by-byte)';\n  active.set(test, 1);\n\n  const { what } = test;\n  const charset = test.charset || 'utf-8';\n  const bb = busboy({\n    limits: test.limits,\n    headers: {\n      'content-type': `application/x-www-form-urlencoded; charset=\"${charset}\"`,\n    },\n  });\n  const results = [];\n\n  bb.on('field', (key, val, info) => {\n    results.push([key, val, info]);\n  });\n\n  bb.on('file', () => {\n    throw new Error(`[${what}] Unexpected file`);\n  });\n\n  bb.on('close', () => {\n    active.delete(test);\n\n    assert.deepStrictEqual(\n      results,\n      test.expected,\n      `[${what}] Results mismatch.\\n`\n        + `Parsed: ${inspect(results)}\\n`\n        + `Expected: ${inspect(test.expected)}`\n    );\n  });\n\n  for (const src of test.source) {\n    const buf = (typeof src === 'string' ? Buffer.from(src, 'utf8') : src);\n    for (let i = 0; i < buf.length; ++i)\n      bb.write(buf.slice(i, i + 1));\n  }\n  bb.end();\n}\n\n{\n  let exception = false;\n  process.once('uncaughtException', (ex) => {\n    exception = true;\n    throw ex;\n  });\n  process.on('exit', () => {\n    if (exception || active.size === 0)\n      return;\n    process.exitCode = 1;\n    console.error('==========================');\n    console.error(`${active.size} test(s) did not finish:`);\n    console.error('==========================');\n    console.error(Array.from(active.keys()).map((v) => v.what).join('\\n'));\n  });\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}