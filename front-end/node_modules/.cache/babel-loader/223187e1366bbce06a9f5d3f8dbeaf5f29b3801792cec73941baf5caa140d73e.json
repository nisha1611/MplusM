{"ast":null,"code":"var noop = function () {};\nvar path = require('path');\nconst semver = require('semver');\nvar version = process.versions.node.split('.') || [null, null, null];\nvar utils = module.exports = {\n  semver: semver,\n  satisfies: test => semver.satisfies(process.versions.node, test),\n  version: {\n    major: parseInt(version[0] || 0, 10),\n    minor: parseInt(version[1] || 0, 10),\n    patch: parseInt(version[2] || 0, 10)\n  },\n  clone: require('./clone'),\n  merge: require('./merge'),\n  bus: require('./bus'),\n  isWindows: process.platform === 'win32',\n  isMac: process.platform === 'darwin',\n  isLinux: process.platform === 'linux',\n  isRequired: function () {\n    var p = module.parent;\n    while (p) {\n      // in electron.js engine it happens\n      if (!p.filename) {\n        return true;\n      }\n      if (p.filename.indexOf('bin' + path.sep + 'nodemon.js') !== -1) {\n        return false;\n      }\n      p = p.parent;\n    }\n    return true;\n  }(),\n  home: process.env.HOME || process.env.HOMEPATH,\n  quiet: function () {\n    // nukes the logging\n    if (!this.debug) {\n      for (var method in utils.log) {\n        if (typeof utils.log[method] === 'function') {\n          utils.log[method] = noop;\n        }\n      }\n    }\n  },\n  reset: function () {\n    if (!this.debug) {\n      for (var method in utils.log) {\n        if (typeof utils.log[method] === 'function') {\n          delete utils.log[method];\n        }\n      }\n    }\n    this.debug = false;\n  },\n  regexpToText: function (t) {\n    return t.replace(/\\.\\*\\\\./g, '*.').replace(/\\\\{2}/g, '^^').replace(/\\\\/g, '').replace(/\\^\\^/g, '\\\\');\n  },\n  stringify: function (exec, args) {\n    // serializes an executable string and array of arguments into a string\n    args = args || [];\n    return [exec].concat(args.map(function (arg) {\n      // if an argument contains a space, we want to show it with quotes\n      // around it to indicate that it is a single argument\n      if (arg.length > 0 && arg.indexOf(' ') === -1) {\n        return arg;\n      }\n      // this should correctly escape nested quotes\n      return JSON.stringify(arg);\n    })).join(' ').trim();\n  }\n};\nutils.log = require('./log')(utils.isRequired);\nObject.defineProperty(utils, 'debug', {\n  set: function (value) {\n    this.log.debug = value;\n  },\n  get: function () {\n    return this.log.debug;\n  }\n});\nObject.defineProperty(utils, 'colours', {\n  set: function (value) {\n    this.log.useColours = value;\n  },\n  get: function () {\n    return this.log.useColours;\n  }\n});","map":{"version":3,"names":["noop","path","require","semver","version","process","versions","node","split","utils","module","exports","satisfies","test","major","parseInt","minor","patch","clone","merge","bus","isWindows","platform","isMac","isLinux","isRequired","p","parent","filename","indexOf","sep","home","env","HOME","HOMEPATH","quiet","debug","method","log","reset","regexpToText","t","replace","stringify","exec","args","concat","map","arg","length","JSON","join","trim","Object","defineProperty","set","value","get","useColours"],"sources":["C:/Users/91930/Desktop/Github projects/Pharmacy Demo/back-end/node_modules/nodemon/lib/utils/index.js"],"sourcesContent":["var noop = function () { };\r\nvar path = require('path');\r\nconst semver = require('semver');\r\nvar version = process.versions.node.split('.') || [null, null, null];\r\n\r\nvar utils = (module.exports = {\r\n  semver: semver,\r\n  satisfies: test => semver.satisfies(process.versions.node, test),\r\n  version: {\r\n    major: parseInt(version[0] || 0, 10),\r\n    minor: parseInt(version[1] || 0, 10),\r\n    patch: parseInt(version[2] || 0, 10),\r\n  },\r\n  clone: require('./clone'),\r\n  merge: require('./merge'),\r\n  bus: require('./bus'),\r\n  isWindows: process.platform === 'win32',\r\n  isMac: process.platform === 'darwin',\r\n  isLinux: process.platform === 'linux',\r\n  isRequired: (function () {\r\n    var p = module.parent;\r\n    while (p) {\r\n      // in electron.js engine it happens\r\n      if (!p.filename) {\r\n        return true;\r\n      }\r\n      if (p.filename.indexOf('bin' + path.sep + 'nodemon.js') !== -1) {\r\n        return false;\r\n      }\r\n      p = p.parent;\r\n    }\r\n\r\n    return true;\r\n  })(),\r\n  home: process.env.HOME || process.env.HOMEPATH,\r\n  quiet: function () {\r\n    // nukes the logging\r\n    if (!this.debug) {\r\n      for (var method in utils.log) {\r\n        if (typeof utils.log[method] === 'function') {\r\n          utils.log[method] = noop;\r\n        }\r\n      }\r\n    }\r\n  },\r\n  reset: function () {\r\n    if (!this.debug) {\r\n      for (var method in utils.log) {\r\n        if (typeof utils.log[method] === 'function') {\r\n          delete utils.log[method];\r\n        }\r\n      }\r\n    }\r\n    this.debug = false;\r\n  },\r\n  regexpToText: function (t) {\r\n    return t\r\n      .replace(/\\.\\*\\\\./g, '*.')\r\n      .replace(/\\\\{2}/g, '^^')\r\n      .replace(/\\\\/g, '')\r\n      .replace(/\\^\\^/g, '\\\\');\r\n  },\r\n  stringify: function (exec, args) {\r\n    // serializes an executable string and array of arguments into a string\r\n    args = args || [];\r\n\r\n    return [exec]\r\n      .concat(\r\n      args.map(function (arg) {\r\n        // if an argument contains a space, we want to show it with quotes\r\n        // around it to indicate that it is a single argument\r\n        if (arg.length > 0 && arg.indexOf(' ') === -1) {\r\n          return arg;\r\n        }\r\n        // this should correctly escape nested quotes\r\n        return JSON.stringify(arg);\r\n      })\r\n      )\r\n      .join(' ')\r\n      .trim();\r\n  },\r\n});\r\n\r\nutils.log = require('./log')(utils.isRequired);\r\n\r\nObject.defineProperty(utils, 'debug', {\r\n  set: function (value) {\r\n    this.log.debug = value;\r\n  },\r\n  get: function () {\r\n    return this.log.debug;\r\n  },\r\n});\r\n\r\nObject.defineProperty(utils, 'colours', {\r\n  set: function (value) {\r\n    this.log.useColours = value;\r\n  },\r\n  get: function () {\r\n    return this.log.useColours;\r\n  },\r\n});\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}