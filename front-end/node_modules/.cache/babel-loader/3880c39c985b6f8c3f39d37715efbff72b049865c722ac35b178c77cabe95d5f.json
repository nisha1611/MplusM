{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.StandardRetryStrategy = void 0;\nconst config_1 = require(\"./config\");\nconst constants_1 = require(\"./constants\");\nconst defaultRetryToken_1 = require(\"./defaultRetryToken\");\nclass StandardRetryStrategy {\n  constructor(maxAttemptsProvider) {\n    this.maxAttemptsProvider = maxAttemptsProvider;\n    this.mode = config_1.RETRY_MODES.STANDARD;\n    this.retryToken = (0, defaultRetryToken_1.getDefaultRetryToken)(constants_1.INITIAL_RETRY_TOKENS, constants_1.DEFAULT_RETRY_DELAY_BASE);\n    this.maxAttemptsProvider = maxAttemptsProvider;\n  }\n  async acquireInitialRetryToken(retryTokenScope) {\n    return this.retryToken;\n  }\n  async refreshRetryTokenForRetry(tokenToRenew, errorInfo) {\n    const maxAttempts = await this.getMaxAttempts();\n    if (this.shouldRetry(tokenToRenew, errorInfo, maxAttempts)) {\n      tokenToRenew.getRetryTokenCount(errorInfo);\n      return tokenToRenew;\n    }\n    throw new Error(\"No retry token available\");\n  }\n  recordSuccess(token) {\n    this.retryToken.releaseRetryTokens(token.getLastRetryCost());\n  }\n  async getMaxAttempts() {\n    let maxAttempts;\n    try {\n      return await this.maxAttemptsProvider();\n    } catch (error) {\n      console.warn(`Max attempts provider could not resolve. Using default of ${config_1.DEFAULT_MAX_ATTEMPTS}`);\n      return config_1.DEFAULT_MAX_ATTEMPTS;\n    }\n  }\n  shouldRetry(tokenToRenew, errorInfo, maxAttempts) {\n    const attempts = tokenToRenew.getRetryCount();\n    return attempts < maxAttempts && tokenToRenew.hasRetryTokens(errorInfo.errorType) && this.isRetryableError(errorInfo.errorType);\n  }\n  isRetryableError(errorType) {\n    return errorType === \"THROTTLING\" || errorType === \"TRANSIENT\";\n  }\n}\nexports.StandardRetryStrategy = StandardRetryStrategy;","map":{"version":3,"names":["Object","defineProperty","exports","value","StandardRetryStrategy","config_1","require","constants_1","defaultRetryToken_1","constructor","maxAttemptsProvider","mode","RETRY_MODES","STANDARD","retryToken","getDefaultRetryToken","INITIAL_RETRY_TOKENS","DEFAULT_RETRY_DELAY_BASE","acquireInitialRetryToken","retryTokenScope","refreshRetryTokenForRetry","tokenToRenew","errorInfo","maxAttempts","getMaxAttempts","shouldRetry","getRetryTokenCount","Error","recordSuccess","token","releaseRetryTokens","getLastRetryCost","error","console","warn","DEFAULT_MAX_ATTEMPTS","attempts","getRetryCount","hasRetryTokens","errorType","isRetryableError"],"sources":["C:/Users/91930/Desktop/Github projects/Pharmacy Demo/back-end/node_modules/@aws-sdk/util-retry/dist-cjs/StandardRetryStrategy.js"],"sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.StandardRetryStrategy = void 0;\r\nconst config_1 = require(\"./config\");\r\nconst constants_1 = require(\"./constants\");\r\nconst defaultRetryToken_1 = require(\"./defaultRetryToken\");\r\nclass StandardRetryStrategy {\r\n    constructor(maxAttemptsProvider) {\r\n        this.maxAttemptsProvider = maxAttemptsProvider;\r\n        this.mode = config_1.RETRY_MODES.STANDARD;\r\n        this.retryToken = (0, defaultRetryToken_1.getDefaultRetryToken)(constants_1.INITIAL_RETRY_TOKENS, constants_1.DEFAULT_RETRY_DELAY_BASE);\r\n        this.maxAttemptsProvider = maxAttemptsProvider;\r\n    }\r\n    async acquireInitialRetryToken(retryTokenScope) {\r\n        return this.retryToken;\r\n    }\r\n    async refreshRetryTokenForRetry(tokenToRenew, errorInfo) {\r\n        const maxAttempts = await this.getMaxAttempts();\r\n        if (this.shouldRetry(tokenToRenew, errorInfo, maxAttempts)) {\r\n            tokenToRenew.getRetryTokenCount(errorInfo);\r\n            return tokenToRenew;\r\n        }\r\n        throw new Error(\"No retry token available\");\r\n    }\r\n    recordSuccess(token) {\r\n        this.retryToken.releaseRetryTokens(token.getLastRetryCost());\r\n    }\r\n    async getMaxAttempts() {\r\n        let maxAttempts;\r\n        try {\r\n            return await this.maxAttemptsProvider();\r\n        }\r\n        catch (error) {\r\n            console.warn(`Max attempts provider could not resolve. Using default of ${config_1.DEFAULT_MAX_ATTEMPTS}`);\r\n            return config_1.DEFAULT_MAX_ATTEMPTS;\r\n        }\r\n    }\r\n    shouldRetry(tokenToRenew, errorInfo, maxAttempts) {\r\n        const attempts = tokenToRenew.getRetryCount();\r\n        return (attempts < maxAttempts &&\r\n            tokenToRenew.hasRetryTokens(errorInfo.errorType) &&\r\n            this.isRetryableError(errorInfo.errorType));\r\n    }\r\n    isRetryableError(errorType) {\r\n        return errorType === \"THROTTLING\" || errorType === \"TRANSIENT\";\r\n    }\r\n}\r\nexports.StandardRetryStrategy = StandardRetryStrategy;\r\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,qBAAqB,GAAG,KAAK,CAAC;AACtC,MAAMC,QAAQ,GAAGC,OAAO,CAAC,UAAU,CAAC;AACpC,MAAMC,WAAW,GAAGD,OAAO,CAAC,aAAa,CAAC;AAC1C,MAAME,mBAAmB,GAAGF,OAAO,CAAC,qBAAqB,CAAC;AAC1D,MAAMF,qBAAqB,CAAC;EACxBK,WAAW,CAACC,mBAAmB,EAAE;IAC7B,IAAI,CAACA,mBAAmB,GAAGA,mBAAmB;IAC9C,IAAI,CAACC,IAAI,GAAGN,QAAQ,CAACO,WAAW,CAACC,QAAQ;IACzC,IAAI,CAACC,UAAU,GAAG,CAAC,CAAC,EAAEN,mBAAmB,CAACO,oBAAoB,EAAER,WAAW,CAACS,oBAAoB,EAAET,WAAW,CAACU,wBAAwB,CAAC;IACvI,IAAI,CAACP,mBAAmB,GAAGA,mBAAmB;EAClD;EACA,MAAMQ,wBAAwB,CAACC,eAAe,EAAE;IAC5C,OAAO,IAAI,CAACL,UAAU;EAC1B;EACA,MAAMM,yBAAyB,CAACC,YAAY,EAAEC,SAAS,EAAE;IACrD,MAAMC,WAAW,GAAG,MAAM,IAAI,CAACC,cAAc,EAAE;IAC/C,IAAI,IAAI,CAACC,WAAW,CAACJ,YAAY,EAAEC,SAAS,EAAEC,WAAW,CAAC,EAAE;MACxDF,YAAY,CAACK,kBAAkB,CAACJ,SAAS,CAAC;MAC1C,OAAOD,YAAY;IACvB;IACA,MAAM,IAAIM,KAAK,CAAC,0BAA0B,CAAC;EAC/C;EACAC,aAAa,CAACC,KAAK,EAAE;IACjB,IAAI,CAACf,UAAU,CAACgB,kBAAkB,CAACD,KAAK,CAACE,gBAAgB,EAAE,CAAC;EAChE;EACA,MAAMP,cAAc,GAAG;IACnB,IAAID,WAAW;IACf,IAAI;MACA,OAAO,MAAM,IAAI,CAACb,mBAAmB,EAAE;IAC3C,CAAC,CACD,OAAOsB,KAAK,EAAE;MACVC,OAAO,CAACC,IAAI,CAAE,6DAA4D7B,QAAQ,CAAC8B,oBAAqB,EAAC,CAAC;MAC1G,OAAO9B,QAAQ,CAAC8B,oBAAoB;IACxC;EACJ;EACAV,WAAW,CAACJ,YAAY,EAAEC,SAAS,EAAEC,WAAW,EAAE;IAC9C,MAAMa,QAAQ,GAAGf,YAAY,CAACgB,aAAa,EAAE;IAC7C,OAAQD,QAAQ,GAAGb,WAAW,IAC1BF,YAAY,CAACiB,cAAc,CAAChB,SAAS,CAACiB,SAAS,CAAC,IAChD,IAAI,CAACC,gBAAgB,CAAClB,SAAS,CAACiB,SAAS,CAAC;EAClD;EACAC,gBAAgB,CAACD,SAAS,EAAE;IACxB,OAAOA,SAAS,KAAK,YAAY,IAAIA,SAAS,KAAK,WAAW;EAClE;AACJ;AACArC,OAAO,CAACE,qBAAqB,GAAGA,qBAAqB"},"metadata":{},"sourceType":"script","externalDependencies":[]}