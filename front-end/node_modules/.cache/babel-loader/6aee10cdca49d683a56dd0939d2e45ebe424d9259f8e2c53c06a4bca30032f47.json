{"ast":null,"code":"'use strict';\n\nconst mquery = require('../');\nconst assert = require('assert');\ndescribe('mquery', function () {\n  let col;\n  before(function (done) {\n    // get the env specific collection interface\n    require('./env').getCollection(function (err, collection) {\n      assert.ifError(err);\n      col = collection;\n      done();\n    });\n  });\n  after(function (done) {\n    require('./env').dropCollection(done);\n  });\n  describe('mquery', function () {\n    it('is a function', function () {\n      assert.equal('function', typeof mquery);\n    });\n    it('creates instances with the `new` keyword', function () {\n      assert.ok(mquery() instanceof mquery);\n    });\n    describe('defaults', function () {\n      it('are set', function () {\n        const m = mquery();\n        assert.strictEqual(undefined, m.op);\n        assert.deepEqual({}, m.options);\n      });\n    });\n    describe('criteria', function () {\n      it('if collection-like is used as collection', function () {\n        const m = mquery(col);\n        assert.equal(col, m._collection.collection);\n      });\n      it('non-collection-like is used as criteria', function () {\n        const m = mquery({\n          works: true\n        });\n        assert.ok(!m._collection);\n        assert.deepEqual({\n          works: true\n        }, m._conditions);\n      });\n    });\n    describe('options', function () {\n      it('are merged when passed', function () {\n        let m;\n        m = mquery(col, {\n          w: 'majority'\n        });\n        assert.deepEqual({\n          w: 'majority'\n        }, m.options);\n        m = mquery({\n          name: 'mquery'\n        }, {\n          w: 'majority'\n        });\n        assert.deepEqual({\n          w: 'majority'\n        }, m.options);\n      });\n    });\n  });\n  describe('toConstructor', function () {\n    it('creates subclasses of mquery', function () {\n      const opts = {\n        safe: {\n          w: 'majority'\n        },\n        readPreference: 'p'\n      };\n      const match = {\n        name: 'test',\n        count: {\n          $gt: 101\n        }\n      };\n      const select = {\n        name: 1,\n        count: 0\n      };\n      const update = {\n        $set: {\n          x: true\n        }\n      };\n      const path = 'street';\n      const q = mquery().setOptions(opts);\n      q.where(match);\n      q.select(select);\n      q.updateOne(update);\n      q.where(path);\n      q.find();\n      const M = q.toConstructor();\n      const m = M();\n      assert.ok(m instanceof mquery);\n      assert.deepEqual(opts, m.options);\n      assert.deepEqual(match, m._conditions);\n      assert.deepEqual(select, m._fields);\n      assert.deepEqual(update, m._update);\n      assert.equal(path, m._path);\n      assert.equal('find', m.op);\n    });\n  });\n  describe('setOptions', function () {\n    it('calls associated methods', function () {\n      const m = mquery();\n      assert.equal(m._collection, null);\n      m.setOptions({\n        collection: col\n      });\n      assert.equal(m._collection.collection, col);\n    });\n    it('directly sets option when no method exists', function () {\n      const m = mquery();\n      assert.equal(m.options.woot, null);\n      m.setOptions({\n        woot: 'yay'\n      });\n      assert.equal(m.options.woot, 'yay');\n    });\n    it('is chainable', function () {\n      const m = mquery();\n      let n;\n      n = m.setOptions();\n      assert.equal(m, n);\n      n = m.setOptions({\n        x: 1\n      });\n      assert.equal(m, n);\n    });\n  });\n  describe('collection', function () {\n    it('sets the _collection', function () {\n      const m = mquery();\n      m.collection(col);\n      assert.equal(m._collection.collection, col);\n    });\n    it('is chainable', function () {\n      const m = mquery();\n      const n = m.collection(col);\n      assert.equal(m, n);\n    });\n  });\n  describe('$where', function () {\n    it('sets the $where condition', function () {\n      const m = mquery();\n      function go() {}\n      m.$where(go);\n      assert.ok(go === m._conditions.$where);\n    });\n    it('is chainable', function () {\n      const m = mquery();\n      const n = m.$where('x');\n      assert.equal(m, n);\n    });\n  });\n  describe('where', function () {\n    it('without arguments', function () {\n      const m = mquery();\n      m.where();\n      assert.deepEqual({}, m._conditions);\n    });\n    it('with non-string/object argument', function () {\n      const m = mquery();\n      assert.throws(function () {\n        m.where([]);\n      }, /path must be a string or object/);\n    });\n    describe('with one argument', function () {\n      it('that is an object', function () {\n        const m = mquery();\n        m.where({\n          name: 'flawed'\n        });\n        assert.strictEqual(m._conditions.name, 'flawed');\n      });\n      it('that is a query', function () {\n        const m = mquery({\n          name: 'first'\n        });\n        const n = mquery({\n          name: 'changed'\n        });\n        m.where(n);\n        assert.strictEqual(m._conditions.name, 'changed');\n      });\n      it('that is a string', function () {\n        const m = mquery();\n        m.where('name');\n        assert.equal('name', m._path);\n        assert.strictEqual(m._conditions.name, undefined);\n      });\n    });\n    it('with two arguments', function () {\n      const m = mquery();\n      m.where('name', 'The Great Pumpkin');\n      assert.equal('name', m._path);\n      assert.strictEqual(m._conditions.name, 'The Great Pumpkin');\n    });\n    it('is chainable', function () {\n      const m = mquery();\n      let n = m.where('x', 'y');\n      assert.equal(m, n);\n      n = m.where();\n      assert.equal(m, n);\n    });\n  });\n  describe('equals', function () {\n    it('must be called after where()', function () {\n      const m = mquery();\n      assert.throws(function () {\n        m.equals();\n      }, /must be used after where/);\n    });\n    it('sets value of path set with where()', function () {\n      const m = mquery();\n      m.where('age').equals(1000);\n      assert.deepEqual({\n        age: 1000\n      }, m._conditions);\n    });\n    it('is chainable', function () {\n      const m = mquery();\n      const n = m.where('x').equals(3);\n      assert.equal(m, n);\n    });\n  });\n  describe('eq', function () {\n    it('is alias of equals', function () {\n      const m = mquery();\n      m.where('age').eq(1000);\n      assert.deepEqual({\n        age: 1000\n      }, m._conditions);\n    });\n  });\n  describe('or', function () {\n    it('pushes onto the internal $or condition', function () {\n      const m = mquery();\n      m.or({\n        'Nightmare Before Christmas': true\n      });\n      assert.deepEqual([{\n        'Nightmare Before Christmas': true\n      }], m._conditions.$or);\n    });\n    it('allows passing arrays', function () {\n      const m = mquery();\n      const arg = [{\n        'Nightmare Before Christmas': true\n      }, {\n        x: 1\n      }];\n      m.or(arg);\n      assert.deepEqual(arg, m._conditions.$or);\n    });\n    it('allows calling multiple times', function () {\n      const m = mquery();\n      const arg = [{\n        looper: true\n      }, {\n        x: 1\n      }];\n      m.or(arg);\n      m.or({\n        y: 1\n      });\n      m.or([{\n        w: 'oo'\n      }, {\n        z: 'oo'\n      }]);\n      assert.deepEqual([{\n        looper: true\n      }, {\n        x: 1\n      }, {\n        y: 1\n      }, {\n        w: 'oo'\n      }, {\n        z: 'oo'\n      }], m._conditions.$or);\n    });\n    it('is chainable', function () {\n      const m = mquery();\n      m.or({\n        o: 'k'\n      }).where('name', 'table');\n      assert.deepEqual({\n        name: 'table',\n        $or: [{\n          o: 'k'\n        }]\n      }, m._conditions);\n    });\n  });\n  describe('nor', function () {\n    it('pushes onto the internal $nor condition', function () {\n      const m = mquery();\n      m.nor({\n        'Nightmare Before Christmas': true\n      });\n      assert.deepEqual([{\n        'Nightmare Before Christmas': true\n      }], m._conditions.$nor);\n    });\n    it('allows passing arrays', function () {\n      const m = mquery();\n      const arg = [{\n        'Nightmare Before Christmas': true\n      }, {\n        x: 1\n      }];\n      m.nor(arg);\n      assert.deepEqual(arg, m._conditions.$nor);\n    });\n    it('allows calling multiple times', function () {\n      const m = mquery();\n      const arg = [{\n        looper: true\n      }, {\n        x: 1\n      }];\n      m.nor(arg);\n      m.nor({\n        y: 1\n      });\n      m.nor([{\n        w: 'oo'\n      }, {\n        z: 'oo'\n      }]);\n      assert.deepEqual([{\n        looper: true\n      }, {\n        x: 1\n      }, {\n        y: 1\n      }, {\n        w: 'oo'\n      }, {\n        z: 'oo'\n      }], m._conditions.$nor);\n    });\n    it('is chainable', function () {\n      const m = mquery();\n      m.nor({\n        o: 'k'\n      }).where('name', 'table');\n      assert.deepEqual({\n        name: 'table',\n        $nor: [{\n          o: 'k'\n        }]\n      }, m._conditions);\n    });\n  });\n  describe('and', function () {\n    it('pushes onto the internal $and condition', function () {\n      const m = mquery();\n      m.and({\n        'Nightmare Before Christmas': true\n      });\n      assert.deepEqual([{\n        'Nightmare Before Christmas': true\n      }], m._conditions.$and);\n    });\n    it('allows passing arrays', function () {\n      const m = mquery();\n      const arg = [{\n        'Nightmare Before Christmas': true\n      }, {\n        x: 1\n      }];\n      m.and(arg);\n      assert.deepEqual(arg, m._conditions.$and);\n    });\n    it('allows calling multiple times', function () {\n      const m = mquery();\n      const arg = [{\n        looper: true\n      }, {\n        x: 1\n      }];\n      m.and(arg);\n      m.and({\n        y: 1\n      });\n      m.and([{\n        w: 'oo'\n      }, {\n        z: 'oo'\n      }]);\n      assert.deepEqual([{\n        looper: true\n      }, {\n        x: 1\n      }, {\n        y: 1\n      }, {\n        w: 'oo'\n      }, {\n        z: 'oo'\n      }], m._conditions.$and);\n    });\n    it('is chainable', function () {\n      const m = mquery();\n      m.and({\n        o: 'k'\n      }).where('name', 'table');\n      assert.deepEqual({\n        name: 'table',\n        $and: [{\n          o: 'k'\n        }]\n      }, m._conditions);\n    });\n  });\n  function generalCondition(type) {\n    return function () {\n      it('accepts 2 args', function () {\n        const m = mquery()[type]('count', 3);\n        const check = {};\n        check['$' + type] = 3;\n        assert.deepEqual(m._conditions.count, check);\n      });\n      it('uses previously set `where` path if 1 arg passed', function () {\n        const m = mquery().where('count')[type](3);\n        const check = {};\n        check['$' + type] = 3;\n        assert.deepEqual(m._conditions.count, check);\n      });\n      it('throws if 1 arg was passed but no previous `where` was used', function () {\n        assert.throws(function () {\n          mquery()[type](3);\n        }, /must be used after where/);\n      });\n      it('is chainable', function () {\n        const m = mquery().where('count')[type](3).where('x', 8);\n        const check = {\n          x: 8,\n          count: {}\n        };\n        check.count['$' + type] = 3;\n        assert.deepEqual(m._conditions, check);\n      });\n      it('overwrites previous value', function () {\n        const m = mquery().where('count')[type](3)[type](8);\n        const check = {};\n        check['$' + type] = 8;\n        assert.deepEqual(m._conditions.count, check);\n      });\n    };\n  }\n  'gt gte lt lte ne in nin regex size maxDistance minDistance'.split(' ').forEach(function (type) {\n    describe(type, generalCondition(type));\n  });\n  describe('mod', function () {\n    describe('with 1 argument', function () {\n      it('requires a previous where()', function () {\n        assert.throws(function () {\n          mquery().mod([30, 10]);\n        }, /must be used after where/);\n      });\n      it('works', function () {\n        const m = mquery().where('madmen').mod([10, 20]);\n        assert.deepEqual(m._conditions, {\n          madmen: {\n            $mod: [10, 20]\n          }\n        });\n      });\n    });\n    describe('with 2 arguments and second is non-Array', function () {\n      it('requires a previous where()', function () {\n        assert.throws(function () {\n          mquery().mod('x', 10);\n        }, /must be used after where/);\n      });\n      it('works', function () {\n        const m = mquery().where('madmen').mod(10, 20);\n        assert.deepEqual(m._conditions, {\n          madmen: {\n            $mod: [10, 20]\n          }\n        });\n      });\n    });\n    it('with 2 arguments and second is an array', function () {\n      const m = mquery().mod('madmen', [10, 20]);\n      assert.deepEqual(m._conditions, {\n        madmen: {\n          $mod: [10, 20]\n        }\n      });\n    });\n    it('with 3 arguments', function () {\n      const m = mquery().mod('madmen', 10, 20);\n      assert.deepEqual(m._conditions, {\n        madmen: {\n          $mod: [10, 20]\n        }\n      });\n    });\n    it('is chainable', function () {\n      const m = mquery().mod('madmen', 10, 20).where('x', 8);\n      const check = {\n        madmen: {\n          $mod: [10, 20]\n        },\n        x: 8\n      };\n      assert.deepEqual(m._conditions, check);\n    });\n  });\n  describe('exists', function () {\n    it('with 0 args', function () {\n      it('throws if not used after where()', function () {\n        assert.throws(function () {\n          mquery().exists();\n        }, /must be used after where/);\n      });\n      it('works', function () {\n        const m = mquery().where('name').exists();\n        const check = {\n          name: {\n            $exists: true\n          }\n        };\n        assert.deepEqual(m._conditions, check);\n      });\n    });\n    describe('with 1 arg', function () {\n      describe('that is boolean', function () {\n        it('throws if not used after where()', function () {\n          assert.throws(function () {\n            mquery().exists();\n          }, /must be used after where/);\n        });\n        it('works', function () {\n          const m = mquery().exists('name', false);\n          const check = {\n            name: {\n              $exists: false\n            }\n          };\n          assert.deepEqual(m._conditions, check);\n        });\n      });\n      describe('that is not boolean', function () {\n        it('sets the value to `true`', function () {\n          const m = mquery().where('name').exists('yummy');\n          const check = {\n            yummy: {\n              $exists: true\n            }\n          };\n          assert.deepEqual(m._conditions, check);\n        });\n      });\n    });\n    describe('with 2 args', function () {\n      it('works', function () {\n        const m = mquery().exists('yummy', false);\n        const check = {\n          yummy: {\n            $exists: false\n          }\n        };\n        assert.deepEqual(m._conditions, check);\n      });\n    });\n    it('is chainable', function () {\n      const m = mquery().where('name').exists().find({\n        x: 1\n      });\n      const check = {\n        name: {\n          $exists: true\n        },\n        x: 1\n      };\n      assert.deepEqual(m._conditions, check);\n    });\n  });\n  describe('elemMatch', function () {\n    describe('with null/undefined first argument', function () {\n      assert.throws(function () {\n        mquery().elemMatch();\n      }, /Invalid argument/);\n      assert.throws(function () {\n        mquery().elemMatch(null);\n      }, /Invalid argument/);\n      assert.doesNotThrow(function () {\n        mquery().elemMatch('', {});\n      });\n    });\n    describe('with 1 argument', function () {\n      it('throws if not a function or object', function () {\n        assert.throws(function () {\n          mquery().elemMatch([]);\n        }, /Invalid argument/);\n      });\n      describe('that is an object', function () {\n        it('throws if no previous `where` was used', function () {\n          assert.throws(function () {\n            mquery().elemMatch({});\n          }, /must be used after where/);\n        });\n        it('works', function () {\n          const m = mquery().where('comment').elemMatch({\n            author: 'joe',\n            votes: {\n              $gte: 3\n            }\n          });\n          assert.deepEqual({\n            comment: {\n              $elemMatch: {\n                author: 'joe',\n                votes: {\n                  $gte: 3\n                }\n              }\n            }\n          }, m._conditions);\n        });\n      });\n      describe('that is a function', function () {\n        it('throws if no previous `where` was used', function () {\n          assert.throws(function () {\n            mquery().elemMatch(function () {});\n          }, /must be used after where/);\n        });\n        it('works', function () {\n          const m = mquery().where('comment').elemMatch(function (query) {\n            query.where({\n              author: 'joe',\n              votes: {\n                $gte: 3\n              }\n            });\n          });\n          assert.deepEqual({\n            comment: {\n              $elemMatch: {\n                author: 'joe',\n                votes: {\n                  $gte: 3\n                }\n              }\n            }\n          }, m._conditions);\n        });\n      });\n    });\n    describe('with 2 arguments', function () {\n      describe('and the 2nd is an object', function () {\n        it('works', function () {\n          const m = mquery().elemMatch('comment', {\n            author: 'joe',\n            votes: {\n              $gte: 3\n            }\n          });\n          assert.deepEqual({\n            comment: {\n              $elemMatch: {\n                author: 'joe',\n                votes: {\n                  $gte: 3\n                }\n              }\n            }\n          }, m._conditions);\n        });\n      });\n      describe('and the 2nd is a function', function () {\n        it('works', function () {\n          const m = mquery().elemMatch('comment', function (query) {\n            query.where({\n              author: 'joe',\n              votes: {\n                $gte: 3\n              }\n            });\n          });\n          assert.deepEqual({\n            comment: {\n              $elemMatch: {\n                author: 'joe',\n                votes: {\n                  $gte: 3\n                }\n              }\n            }\n          }, m._conditions);\n        });\n      });\n      it('and the 2nd is not a function or object', function () {\n        assert.throws(function () {\n          mquery().elemMatch('comment', []);\n        }, /Invalid argument/);\n      });\n    });\n  });\n  describe('within', function () {\n    it('is chainable', function () {\n      const m = mquery();\n      assert.equal(m.where('a').within(), m);\n    });\n    describe('when called with arguments', function () {\n      it('must follow where()', function () {\n        assert.throws(function () {\n          mquery().within([]);\n        }, /must be used after where/);\n      });\n      describe('of length 1', function () {\n        it('throws if not a recognized shape', function () {\n          assert.throws(function () {\n            mquery().where('loc').within({});\n          }, /Invalid argument/);\n          assert.throws(function () {\n            mquery().where('loc').within(null);\n          }, /Invalid argument/);\n        });\n        it('delegates to circle when center exists', function () {\n          const m = mquery().where('loc').within({\n            center: [10, 10],\n            radius: 3\n          });\n          assert.deepEqual({\n            $geoWithin: {\n              $center: [[10, 10], 3]\n            }\n          }, m._conditions.loc);\n        });\n        it('delegates to box when exists', function () {\n          const m = mquery().where('loc').within({\n            box: [[10, 10], [11, 14]]\n          });\n          assert.deepEqual({\n            $geoWithin: {\n              $box: [[10, 10], [11, 14]]\n            }\n          }, m._conditions.loc);\n        });\n        it('delegates to polygon when exists', function () {\n          const m = mquery().where('loc').within({\n            polygon: [[10, 10], [11, 14], [10, 9]]\n          });\n          assert.deepEqual({\n            $geoWithin: {\n              $polygon: [[10, 10], [11, 14], [10, 9]]\n            }\n          }, m._conditions.loc);\n        });\n        it('delegates to geometry when exists', function () {\n          const m = mquery().where('loc').within({\n            type: 'Polygon',\n            coordinates: [[10, 10], [11, 14], [10, 9]]\n          });\n          assert.deepEqual({\n            $geoWithin: {\n              $geometry: {\n                type: 'Polygon',\n                coordinates: [[10, 10], [11, 14], [10, 9]]\n              }\n            }\n          }, m._conditions.loc);\n        });\n      });\n      describe('of length 2', function () {\n        it('delegates to box()', function () {\n          const m = mquery().where('loc').within([1, 2], [2, 5]);\n          assert.deepEqual(m._conditions.loc, {\n            $geoWithin: {\n              $box: [[1, 2], [2, 5]]\n            }\n          });\n        });\n      });\n      describe('of length > 2', function () {\n        it('delegates to polygon()', function () {\n          const m = mquery().where('loc').within([1, 2], [2, 5], [2, 4], [1, 3]);\n          assert.deepEqual(m._conditions.loc, {\n            $geoWithin: {\n              $polygon: [[1, 2], [2, 5], [2, 4], [1, 3]]\n            }\n          });\n        });\n      });\n    });\n  });\n  describe('geoWithin', function () {\n    before(function () {\n      mquery.use$geoWithin = false;\n    });\n    after(function () {\n      mquery.use$geoWithin = true;\n    });\n    describe('when called with arguments', function () {\n      describe('of length 1', function () {\n        it('delegates to circle when center exists', function () {\n          const m = mquery().where('loc').within({\n            center: [10, 10],\n            radius: 3\n          });\n          assert.deepEqual({\n            $within: {\n              $center: [[10, 10], 3]\n            }\n          }, m._conditions.loc);\n        });\n        it('delegates to box when exists', function () {\n          const m = mquery().where('loc').within({\n            box: [[10, 10], [11, 14]]\n          });\n          assert.deepEqual({\n            $within: {\n              $box: [[10, 10], [11, 14]]\n            }\n          }, m._conditions.loc);\n        });\n        it('delegates to polygon when exists', function () {\n          const m = mquery().where('loc').within({\n            polygon: [[10, 10], [11, 14], [10, 9]]\n          });\n          assert.deepEqual({\n            $within: {\n              $polygon: [[10, 10], [11, 14], [10, 9]]\n            }\n          }, m._conditions.loc);\n        });\n        it('delegates to geometry when exists', function () {\n          const m = mquery().where('loc').within({\n            type: 'Polygon',\n            coordinates: [[10, 10], [11, 14], [10, 9]]\n          });\n          assert.deepEqual({\n            $within: {\n              $geometry: {\n                type: 'Polygon',\n                coordinates: [[10, 10], [11, 14], [10, 9]]\n              }\n            }\n          }, m._conditions.loc);\n        });\n      });\n      describe('of length 2', function () {\n        it('delegates to box()', function () {\n          const m = mquery().where('loc').within([1, 2], [2, 5]);\n          assert.deepEqual(m._conditions.loc, {\n            $within: {\n              $box: [[1, 2], [2, 5]]\n            }\n          });\n        });\n      });\n      describe('of length > 2', function () {\n        it('delegates to polygon()', function () {\n          const m = mquery().where('loc').within([1, 2], [2, 5], [2, 4], [1, 3]);\n          assert.deepEqual(m._conditions.loc, {\n            $within: {\n              $polygon: [[1, 2], [2, 5], [2, 4], [1, 3]]\n            }\n          });\n        });\n      });\n    });\n  });\n  describe('box', function () {\n    describe('with 1 argument', function () {\n      it('throws', function () {\n        assert.throws(function () {\n          mquery().box('sometihng');\n        }, /Invalid argument/);\n      });\n    });\n    describe('with > 3 arguments', function () {\n      it('throws', function () {\n        assert.throws(function () {\n          mquery().box(1, 2, 3, 4);\n        }, /Invalid argument/);\n      });\n    });\n    describe('with 2 arguments', function () {\n      it('throws if not used after where()', function () {\n        assert.throws(function () {\n          mquery().box([], []);\n        }, /must be used after where/);\n      });\n      it('works', function () {\n        const m = mquery().where('loc').box([1, 2], [3, 4]);\n        assert.deepEqual(m._conditions.loc, {\n          $geoWithin: {\n            $box: [[1, 2], [3, 4]]\n          }\n        });\n      });\n    });\n    describe('with 3 arguments', function () {\n      it('works', function () {\n        const m = mquery().box('loc', [1, 2], [3, 4]);\n        assert.deepEqual(m._conditions.loc, {\n          $geoWithin: {\n            $box: [[1, 2], [3, 4]]\n          }\n        });\n      });\n    });\n  });\n  describe('polygon', function () {\n    describe('when first argument is not a string', function () {\n      it('throws if not used after where()', function () {\n        assert.throws(function () {\n          mquery().polygon({});\n        }, /must be used after where/);\n        assert.doesNotThrow(function () {\n          mquery().where('loc').polygon([1, 2], [2, 3], [3, 6]);\n        });\n      });\n      it('assigns arguments to within polygon condition', function () {\n        const m = mquery().where('loc').polygon([1, 2], [2, 3], [3, 6]);\n        assert.deepEqual(m._conditions, {\n          loc: {\n            $geoWithin: {\n              $polygon: [[1, 2], [2, 3], [3, 6]]\n            }\n          }\n        });\n      });\n    });\n    describe('when first arg is a string', function () {\n      it('assigns remaining arguments to within polygon condition', function () {\n        const m = mquery().polygon('loc', [1, 2], [2, 3], [3, 6]);\n        assert.deepEqual(m._conditions, {\n          loc: {\n            $geoWithin: {\n              $polygon: [[1, 2], [2, 3], [3, 6]]\n            }\n          }\n        });\n      });\n    });\n  });\n  describe('circle', function () {\n    describe('with one arg', function () {\n      it('must follow where()', function () {\n        assert.throws(function () {\n          mquery().circle('x');\n        }, /must be used after where/);\n        assert.doesNotThrow(function () {\n          mquery().where('loc').circle({\n            center: [0, 0],\n            radius: 3\n          });\n        });\n      });\n      it('works', function () {\n        const m = mquery().where('loc').circle({\n          center: [0, 0],\n          radius: 3\n        });\n        assert.deepEqual(m._conditions, {\n          loc: {\n            $geoWithin: {\n              $center: [[0, 0], 3]\n            }\n          }\n        });\n      });\n    });\n    describe('with 3 args', function () {\n      it('throws', function () {\n        assert.throws(function () {\n          mquery().where('loc').circle(1, 2, 3);\n        }, /Invalid argument/);\n      });\n    });\n    describe('requires radius and center', function () {\n      assert.throws(function () {\n        mquery().circle('loc', {\n          center: 1\n        });\n      }, /center and radius are required/);\n      assert.throws(function () {\n        mquery().circle('loc', {\n          radius: 1\n        });\n      }, /center and radius are required/);\n      assert.doesNotThrow(function () {\n        mquery().circle('loc', {\n          center: [1, 2],\n          radius: 1\n        });\n      });\n    });\n  });\n  describe('geometry', function () {\n    // within + intersects\n    const point = {\n      type: 'Point',\n      coordinates: [[0, 0], [1, 1]]\n    };\n    it('must be called after within or intersects', function (done) {\n      assert.throws(function () {\n        mquery().where('a').geometry(point);\n      }, /must come after/);\n      assert.doesNotThrow(function () {\n        mquery().where('a').within().geometry(point);\n      });\n      assert.doesNotThrow(function () {\n        mquery().where('a').intersects().geometry(point);\n      });\n      done();\n    });\n    describe('when called with one argument', function () {\n      describe('after within()', function () {\n        it('and arg quacks like geoJSON', function (done) {\n          const m = mquery().where('a').within().geometry(point);\n          assert.deepEqual({\n            a: {\n              $geoWithin: {\n                $geometry: point\n              }\n            }\n          }, m._conditions);\n          done();\n        });\n      });\n      describe('after intersects()', function () {\n        it('and arg quacks like geoJSON', function (done) {\n          const m = mquery().where('a').intersects().geometry(point);\n          assert.deepEqual({\n            a: {\n              $geoIntersects: {\n                $geometry: point\n              }\n            }\n          }, m._conditions);\n          done();\n        });\n      });\n      it('and arg does not quack like geoJSON', function (done) {\n        assert.throws(function () {\n          mquery().where('b').within().geometry({\n            type: 1,\n            coordinates: 2\n          });\n        }, /Invalid argument/);\n        done();\n      });\n    });\n    describe('when called with zero arguments', function () {\n      it('throws', function (done) {\n        assert.throws(function () {\n          mquery().where('a').within().geometry();\n        }, /Invalid argument/);\n        done();\n      });\n    });\n    describe('when called with more than one arguments', function () {\n      it('throws', function (done) {\n        assert.throws(function () {\n          mquery().where('a').within().geometry({\n            type: 'a',\n            coordinates: []\n          }, 2);\n        }, /Invalid argument/);\n        done();\n      });\n    });\n  });\n  describe('intersects', function () {\n    it('must be used after where()', function (done) {\n      const m = mquery();\n      assert.throws(function () {\n        m.intersects();\n      }, /must be used after where/);\n      done();\n    });\n    it('sets geo comparison to \"$intersects\"', function (done) {\n      const n = mquery().where('a').intersects();\n      assert.equal('$geoIntersects', n._geoComparison);\n      done();\n    });\n    it('is chainable', function () {\n      const m = mquery();\n      assert.equal(m.where('a').intersects(), m);\n    });\n    it('calls geometry if argument quacks like geojson', function (done) {\n      const m = mquery();\n      const o = {\n        type: 'LineString',\n        coordinates: [[0, 1], [3, 40]]\n      };\n      let ran = false;\n      m.geometry = function (arg) {\n        ran = true;\n        assert.deepEqual(o, arg);\n      };\n      m.where('a').intersects(o);\n      assert.ok(ran);\n      done();\n    });\n    it('throws if argument is not geometry-like', function (done) {\n      const m = mquery().where('a');\n      assert.throws(function () {\n        m.intersects(null);\n      }, /Invalid argument/);\n      assert.throws(function () {\n        m.intersects(undefined);\n      }, /Invalid argument/);\n      assert.throws(function () {\n        m.intersects(false);\n      }, /Invalid argument/);\n      assert.throws(function () {\n        m.intersects({});\n      }, /Invalid argument/);\n      assert.throws(function () {\n        m.intersects([]);\n      }, /Invalid argument/);\n      assert.throws(function () {\n        m.intersects(function () {});\n      }, /Invalid argument/);\n      assert.throws(function () {\n        m.intersects(NaN);\n      }, /Invalid argument/);\n      done();\n    });\n  });\n  describe('near', function () {\n    // near nearSphere\n    describe('with 0 args', function () {\n      it('is compatible with geometry()', function (done) {\n        const q = mquery().where('x').near().geometry({\n          type: 'Point',\n          coordinates: [180, 11]\n        });\n        assert.deepEqual({\n          $near: {\n            $geometry: {\n              type: 'Point',\n              coordinates: [180, 11]\n            }\n          }\n        }, q._conditions.x);\n        done();\n      });\n    });\n    describe('with 1 arg', function () {\n      it('throws if not used after where()', function () {\n        assert.throws(function () {\n          mquery().near(1);\n        }, /must be used after where/);\n      });\n      it('does not throw if used after where()', function () {\n        assert.doesNotThrow(function () {\n          mquery().where('loc').near({\n            center: [1, 1]\n          });\n        });\n      });\n    });\n    describe('with > 2 args', function () {\n      it('throws', function () {\n        assert.throws(function () {\n          mquery().near(1, 2, 3);\n        }, /Invalid argument/);\n      });\n    });\n    it('creates $geometry args for GeoJSON', function () {\n      const m = mquery().where('loc').near({\n        center: {\n          type: 'Point',\n          coordinates: [10, 10]\n        }\n      });\n      assert.deepEqual({\n        $near: {\n          $geometry: {\n            type: 'Point',\n            coordinates: [10, 10]\n          }\n        }\n      }, m._conditions.loc);\n    });\n    it('expects `center`', function () {\n      assert.throws(function () {\n        mquery().near('loc', {\n          maxDistance: 3\n        });\n      }, /center is required/);\n      assert.doesNotThrow(function () {\n        mquery().near('loc', {\n          center: [3, 4]\n        });\n      });\n    });\n    it('accepts spherical conditions', function () {\n      const m = mquery().where('loc').near({\n        center: [1, 2],\n        spherical: true\n      });\n      assert.deepEqual(m._conditions, {\n        loc: {\n          $nearSphere: [1, 2]\n        }\n      });\n    });\n    it('is non-spherical by default', function () {\n      const m = mquery().where('loc').near({\n        center: [1, 2]\n      });\n      assert.deepEqual(m._conditions, {\n        loc: {\n          $near: [1, 2]\n        }\n      });\n    });\n    it('supports maxDistance', function () {\n      const m = mquery().where('loc').near({\n        center: [1, 2],\n        maxDistance: 4\n      });\n      assert.deepEqual(m._conditions, {\n        loc: {\n          $near: [1, 2],\n          $maxDistance: 4\n        }\n      });\n    });\n    it('supports minDistance', function () {\n      const m = mquery().where('loc').near({\n        center: [1, 2],\n        minDistance: 4\n      });\n      assert.deepEqual(m._conditions, {\n        loc: {\n          $near: [1, 2],\n          $minDistance: 4\n        }\n      });\n    });\n    it('is chainable', function () {\n      const m = mquery().where('loc').near({\n        center: [1, 2],\n        maxDistance: 4\n      }).find({\n        x: 1\n      });\n      assert.deepEqual(m._conditions, {\n        loc: {\n          $near: [1, 2],\n          $maxDistance: 4\n        },\n        x: 1\n      });\n    });\n    describe('supports passing GeoJSON, gh-13', function () {\n      it('with center', function () {\n        const m = mquery().where('loc').near({\n          center: {\n            type: 'Point',\n            coordinates: [1, 1]\n          },\n          maxDistance: 2\n        });\n        const expect = {\n          loc: {\n            $near: {\n              $geometry: {\n                type: 'Point',\n                coordinates: [1, 1]\n              },\n              $maxDistance: 2\n            }\n          }\n        };\n        assert.deepEqual(m._conditions, expect);\n      });\n    });\n  });\n\n  // fields\n\n  describe('select', function () {\n    describe('with 0 args', function () {\n      it('is chainable', function () {\n        const m = mquery();\n        assert.equal(m, m.select());\n      });\n    });\n    it('accepts an object', function () {\n      const o = {\n        x: 1,\n        y: 1\n      };\n      const m = mquery().select(o);\n      assert.deepEqual(m._fields, o);\n    });\n    it('accepts a string', function () {\n      const o = 'x -y';\n      const m = mquery().select(o);\n      assert.deepEqual(m._fields, {\n        x: 1,\n        y: 0\n      });\n    });\n    it('does accept an array', function () {\n      const o = ['x', '-y'];\n      const m = mquery().select(o);\n      assert.deepEqual(m._fields, {\n        x: 1,\n        y: 0\n      });\n    });\n    it('merges previous arguments', function () {\n      const o = {\n        x: 1,\n        y: 0,\n        a: 1\n      };\n      const m = mquery().select(o);\n      m.select('z -u w').select({\n        x: 0\n      });\n      assert.deepEqual(m._fields, {\n        x: 0,\n        y: 0,\n        z: 1,\n        u: 0,\n        w: 1,\n        a: 1\n      });\n    });\n    it('rejects non-string, object, arrays', function () {\n      assert.throws(function () {\n        mquery().select(function () {});\n      }, /Invalid select\\(\\) argument/);\n    });\n    it('accepts arguments objects', function () {\n      const m = mquery();\n      function t() {\n        m.select(arguments);\n        assert.deepEqual(m._fields, {\n          x: 1,\n          y: 0\n        });\n      }\n      t('x', '-y');\n    });\n    noDistinct('select');\n  });\n  describe('selected', function () {\n    it('returns true when fields have been selected', function (done) {\n      let m;\n      m = mquery().select({\n        name: 1\n      });\n      assert.ok(m.selected());\n      m = mquery().select('name');\n      assert.ok(m.selected());\n      done();\n    });\n    it('returns false when no fields have been selected', function (done) {\n      const m = mquery();\n      assert.strictEqual(false, m.selected());\n      done();\n    });\n  });\n  describe('selectedInclusively', function () {\n    describe('returns false', function () {\n      it('when no fields have been selected', function (done) {\n        assert.strictEqual(false, mquery().selectedInclusively());\n        assert.equal(false, mquery().select({}).selectedInclusively());\n        done();\n      });\n      it('when any fields have been excluded', function (done) {\n        assert.strictEqual(false, mquery().select('-name').selectedInclusively());\n        assert.strictEqual(false, mquery().select({\n          name: 0\n        }).selectedInclusively());\n        assert.strictEqual(false, mquery().select('name bio -_id').selectedInclusively());\n        assert.strictEqual(false, mquery().select({\n          name: 1,\n          _id: 0\n        }).selectedInclusively());\n        done();\n      });\n      it('when using $meta', function (done) {\n        assert.strictEqual(false, mquery().select({\n          name: {\n            $meta: 'textScore'\n          }\n        }).selectedInclusively());\n        done();\n      });\n    });\n    describe('returns true', function () {\n      it('when fields have been included', function (done) {\n        assert.equal(true, mquery().select('name').selectedInclusively());\n        assert.equal(true, mquery().select({\n          name: 1\n        }).selectedInclusively());\n        done();\n      });\n    });\n  });\n  describe('selectedExclusively', function () {\n    describe('returns false', function () {\n      it('when no fields have been selected', function (done) {\n        assert.equal(false, mquery().selectedExclusively());\n        assert.equal(false, mquery().select({}).selectedExclusively());\n        done();\n      });\n      it('when fields have only been included', function (done) {\n        assert.equal(false, mquery().select('name').selectedExclusively());\n        assert.equal(false, mquery().select({\n          name: 1\n        }).selectedExclusively());\n        done();\n      });\n    });\n    describe('returns true', function () {\n      it('when any field has been excluded', function (done) {\n        assert.equal(true, mquery().select('-name').selectedExclusively());\n        assert.equal(true, mquery().select({\n          name: 0\n        }).selectedExclusively());\n        assert.equal(true, mquery().select('-_id').selectedExclusively());\n        assert.strictEqual(true, mquery().select('name bio -_id').selectedExclusively());\n        assert.strictEqual(true, mquery().select({\n          name: 1,\n          _id: 0\n        }).selectedExclusively());\n        done();\n      });\n    });\n  });\n  describe('slice', function () {\n    describe('with 0 args', function () {\n      it('is chainable', function () {\n        const m = mquery();\n        assert.equal(m, m.slice());\n      });\n      it('is a noop', function () {\n        const m = mquery().slice();\n        assert.deepEqual(m._fields, undefined);\n      });\n    });\n    describe('with 1 arg', function () {\n      it('throws if not called after where()', function () {\n        assert.throws(function () {\n          mquery().slice(1);\n        }, /must be used after where/);\n        assert.doesNotThrow(function () {\n          mquery().where('a').slice(1);\n        });\n      });\n      it('that is a number', function () {\n        const query = mquery();\n        query.where('collection').slice(5);\n        assert.deepEqual(query._fields, {\n          collection: {\n            $slice: 5\n          }\n        });\n      });\n      it('that is an array', function () {\n        const query = mquery();\n        query.where('collection').slice([5, 10]);\n        assert.deepEqual(query._fields, {\n          collection: {\n            $slice: [5, 10]\n          }\n        });\n      });\n      it('that is an object', function () {\n        const query = mquery();\n        query.slice({\n          collection: [5, 10]\n        });\n        assert.deepEqual(query._fields, {\n          collection: {\n            $slice: [5, 10]\n          }\n        });\n      });\n    });\n    describe('with 2 args', function () {\n      describe('and first is a number', function () {\n        it('throws if not called after where', function () {\n          assert.throws(function () {\n            mquery().slice(2, 3);\n          }, /must be used after where/);\n        });\n        it('does not throw if used after where', function () {\n          const query = mquery();\n          query.where('collection').slice(2, 3);\n          assert.deepEqual(query._fields, {\n            collection: {\n              $slice: [2, 3]\n            }\n          });\n        });\n      });\n      it('and first is not a number', function () {\n        const query = mquery().slice('collection', [-5, 2]);\n        assert.deepEqual(query._fields, {\n          collection: {\n            $slice: [-5, 2]\n          }\n        });\n      });\n    });\n    describe('with 3 args', function () {\n      it('works', function () {\n        const query = mquery();\n        query.slice('collection', 14, 10);\n        assert.deepEqual(query._fields, {\n          collection: {\n            $slice: [14, 10]\n          }\n        });\n      });\n    });\n    noDistinct('slice');\n    no('count', 'slice');\n  });\n\n  // options\n\n  describe('sort', function () {\n    describe('with 0 args', function () {\n      it('chains', function () {\n        const m = mquery();\n        assert.equal(m, m.sort());\n      });\n      it('has no affect', function () {\n        const m = mquery();\n        assert.equal(m.options.sort, undefined);\n      });\n    });\n    it('works', function () {\n      let query = mquery();\n      query.sort('a -c b');\n      assert.deepEqual(query.options.sort, {\n        a: 1,\n        b: 1,\n        c: -1\n      });\n      query = mquery();\n      query.sort({\n        a: 1,\n        c: -1,\n        b: 'asc',\n        e: 'descending',\n        f: 'ascending'\n      });\n      assert.deepEqual(query.options.sort, {\n        a: 1,\n        c: -1,\n        b: 1,\n        e: -1,\n        f: 1\n      });\n      query = mquery();\n      query.sort([['a', -1], ['c', 1], ['b', 'desc'], ['e', 'ascending'], ['f', 'descending']]);\n      assert.deepEqual(query.options.sort, [['a', -1], ['c', 1], ['b', -1], ['e', 1], ['f', -1]]);\n      query = mquery();\n      let e = undefined;\n      try {\n        query.sort([['a', 1], {\n          b: 5\n        }]);\n      } catch (err) {\n        e = err;\n      }\n      assert.ok(e, 'uh oh. no error was thrown');\n      assert.equal(e.message, 'Invalid sort() argument, must be array of arrays');\n      query = mquery();\n      e = undefined;\n      try {\n        query.sort('a', 1, 'c', -1, 'b', 1);\n      } catch (err) {\n        e = err;\n      }\n      assert.ok(e, 'uh oh. no error was thrown');\n      assert.equal(e.message, 'Invalid sort() argument. Must be a string, object, or array.');\n    });\n    it('handles $meta sort options', function () {\n      const query = mquery();\n      query.sort({\n        score: {\n          $meta: 'textScore'\n        }\n      });\n      assert.deepEqual(query.options.sort, {\n        score: {\n          $meta: 'textScore'\n        }\n      });\n    });\n    it('array syntax', function () {\n      const query = mquery();\n      query.sort([['field', 1], ['test', -1]]);\n      assert.deepEqual(query.options.sort, [['field', 1], ['test', -1]]);\n    });\n    it('throws with mixed array/object syntax', function () {\n      const query = mquery();\n      assert.throws(function () {\n        query.sort({\n          field: 1\n        }).sort([['test', -1]]);\n      }, /Can't mix sort syntaxes/);\n      assert.throws(function () {\n        query.sort([['field', 1]]).sort({\n          test: 1\n        });\n      }, /Can't mix sort syntaxes/);\n    });\n    it('works with maps', function () {\n      if (typeof Map === 'undefined') {\n        return this.skip();\n      }\n      const query = mquery();\n      query.sort(new Map().set('field', 1).set('test', -1));\n      assert.deepEqual(query.options.sort, new Map().set('field', 1).set('test', -1));\n    });\n  });\n  function simpleOption(type, options) {\n    describe(type, function () {\n      it('sets the ' + type + ' option', function () {\n        const m = mquery()[type](2);\n        const optionName = options.name || type;\n        assert.equal(2, m.options[optionName]);\n      });\n      it('is chainable', function () {\n        const m = mquery();\n        assert.equal(m[type](3), m);\n      });\n      if (!options.distinct) noDistinct(type);\n      if (!options.count) no('count', type);\n    });\n  }\n  const negated = {\n    limit: {\n      distinct: false,\n      count: true\n    },\n    skip: {\n      distinct: false,\n      count: true\n    },\n    maxScan: {\n      distinct: false,\n      count: false\n    },\n    batchSize: {\n      distinct: false,\n      count: false\n    },\n    maxTime: {\n      distinct: true,\n      count: true,\n      name: 'maxTimeMS'\n    }\n  };\n  Object.keys(negated).forEach(function (key) {\n    simpleOption(key, negated[key]);\n  });\n  describe('snapshot', function () {\n    it('works', function () {\n      let query;\n      query = mquery();\n      query.snapshot();\n      assert.equal(true, query.options.snapshot);\n      query = mquery();\n      query.snapshot(true);\n      assert.equal(true, query.options.snapshot);\n      query = mquery();\n      query.snapshot(false);\n      assert.equal(false, query.options.snapshot);\n    });\n    noDistinct('snapshot');\n    no('count', 'snapshot');\n  });\n  describe('hint', function () {\n    it('accepts an object', function () {\n      const query2 = mquery();\n      query2.hint({\n        a: 1,\n        b: -1\n      });\n      assert.deepEqual(query2.options.hint, {\n        a: 1,\n        b: -1\n      });\n    });\n    it('accepts a string', function () {\n      const query2 = mquery();\n      query2.hint('a');\n      assert.deepEqual(query2.options.hint, 'a');\n    });\n    it('rejects everything else', function () {\n      assert.throws(function () {\n        mquery().hint(['c']);\n      }, /Invalid hint./);\n      assert.throws(function () {\n        mquery().hint(1);\n      }, /Invalid hint./);\n    });\n    describe('does not have side affects', function () {\n      it('on invalid arg', function () {\n        const m = mquery();\n        try {\n          m.hint(1);\n        } catch (err) {\n          // ignore\n        }\n        assert.equal(undefined, m.options.hint);\n      });\n      it('on missing arg', function () {\n        const m = mquery().hint();\n        assert.equal(undefined, m.options.hint);\n      });\n    });\n    noDistinct('hint');\n  });\n  describe('j', function () {\n    it('works', function () {\n      const m = mquery().j(true);\n      assert.equal(true, m.options.j);\n    });\n  });\n  describe('slaveOk', function () {\n    it('works', function () {\n      let query;\n      query = mquery();\n      query.slaveOk();\n      assert.equal(true, query.options.slaveOk);\n      query = mquery();\n      query.slaveOk(true);\n      assert.equal(true, query.options.slaveOk);\n      query = mquery();\n      query.slaveOk(false);\n      assert.equal(false, query.options.slaveOk);\n    });\n  });\n  describe('read', function () {\n    it('sets associated readPreference option', function () {\n      const m = mquery();\n      m.read('p');\n      assert.equal('primary', m.options.readPreference);\n    });\n    it('is chainable', function () {\n      const m = mquery();\n      assert.equal(m, m.read('sp'));\n    });\n  });\n  describe('readConcern', function () {\n    it('sets associated readConcern option', function () {\n      let m;\n      m = mquery();\n      m.readConcern('s');\n      assert.deepEqual({\n        level: 'snapshot'\n      }, m.options.readConcern);\n      m = mquery();\n      m.r('local');\n      assert.deepEqual({\n        level: 'local'\n      }, m.options.readConcern);\n    });\n    it('is chainable', function () {\n      const m = mquery();\n      assert.equal(m, m.readConcern('lz'));\n    });\n  });\n  describe('tailable', function () {\n    it('works', function () {\n      let query;\n      query = mquery();\n      query.tailable();\n      assert.equal(true, query.options.tailable);\n      query = mquery();\n      query.tailable(true);\n      assert.equal(true, query.options.tailable);\n      query = mquery();\n      query.tailable(false);\n      assert.equal(false, query.options.tailable);\n    });\n    it('is chainable', function () {\n      const m = mquery();\n      assert.equal(m, m.tailable());\n    });\n    noDistinct('tailable');\n    no('count', 'tailable');\n  });\n  describe('writeConcern', function () {\n    it('sets associated writeConcern option', function () {\n      let m;\n      m = mquery();\n      m.writeConcern('majority');\n      assert.equal('majority', m.options.w);\n      m = mquery();\n      m.writeConcern('m'); // m is alias of majority\n      assert.equal('majority', m.options.w);\n      m = mquery();\n      m.writeConcern(1);\n      assert.equal(1, m.options.w);\n    });\n    it('accepts object', function () {\n      let m;\n      m = mquery().writeConcern({\n        w: 'm',\n        j: true,\n        wtimeout: 1000\n      });\n      assert.equal('m', m.options.w); // check it does not convert m to majority\n      assert.equal(true, m.options.j);\n      assert.equal(1000, m.options.wtimeout);\n      m = mquery().w('m').w({\n        j: false,\n        wtimeout: 0\n      });\n      assert.equal('majority', m.options.w);\n      assert.strictEqual(false, m.options.j);\n      assert.strictEqual(0, m.options.wtimeout);\n    });\n    it('is chainable', function () {\n      const m = mquery();\n      assert.equal(m, m.writeConcern('majority'));\n    });\n  });\n\n  // query utilities\n\n  describe('merge', function () {\n    describe('with falsy arg', function () {\n      it('returns itself', function () {\n        const m = mquery();\n        assert.equal(m, m.merge());\n        assert.equal(m, m.merge(null));\n        assert.equal(m, m.merge(0));\n      });\n    });\n    describe('with an argument', function () {\n      describe('that is not a query or plain object', function () {\n        it('throws', function () {\n          assert.throws(function () {\n            mquery().merge([]);\n          }, /Invalid argument/);\n          assert.throws(function () {\n            mquery().merge('merge');\n          }, /Invalid argument/);\n          assert.doesNotThrow(function () {\n            mquery().merge({});\n          }, /Invalid argument/);\n        });\n      });\n      describe('that is a query', function () {\n        it('merges conditions, field selection, and options', function () {\n          const m = mquery({\n            x: 'hi'\n          }, {\n            select: 'x y',\n            another: true\n          });\n          const n = mquery().merge(m);\n          assert.deepEqual(n._conditions, m._conditions);\n          assert.deepEqual(n._fields, m._fields);\n          assert.deepEqual(n.options, m.options);\n        });\n        it('clones update arguments', function (done) {\n          const original = {\n            $set: {\n              iTerm: true\n            }\n          };\n          const m = mquery().updateOne(original);\n          const n = mquery().merge(m);\n          m.updateOne({\n            $set: {\n              x: 2\n            }\n          });\n          assert.notDeepEqual(m._update, n._update);\n          done();\n        });\n        it('is chainable', function () {\n          const m = mquery({\n            x: 'hi'\n          });\n          const n = mquery();\n          assert.equal(n, n.merge(m));\n        });\n      });\n      describe('that is an object', function () {\n        it('merges', function () {\n          const m = {\n            x: 'hi'\n          };\n          const n = mquery().merge(m);\n          assert.deepEqual(n._conditions, {\n            x: 'hi'\n          });\n        });\n        it('clones update arguments', function (done) {\n          const original = {\n            $set: {\n              iTerm: true\n            }\n          };\n          const m = mquery().updateOne(original);\n          const n = mquery().merge(original);\n          m.updateOne({\n            $set: {\n              x: 2\n            }\n          });\n          assert.notDeepEqual(m._update, n._update);\n          done();\n        });\n        it('is chainable', function () {\n          const m = {\n            x: 'hi'\n          };\n          const n = mquery();\n          assert.equal(n, n.merge(m));\n        });\n      });\n    });\n  });\n\n  // queries\n\n  describe('find', function () {\n    describe('with no callback', function () {\n      it('does not execute', function () {\n        const m = mquery();\n        assert.doesNotThrow(function () {\n          m.find();\n        });\n        assert.doesNotThrow(function () {\n          m.find({\n            x: 1\n          });\n        });\n      });\n    });\n    it('is chainable', function () {\n      const m = mquery().find({\n        x: 1\n      }).find().find({\n        y: 2\n      });\n      assert.deepEqual(m._conditions, {\n        x: 1,\n        y: 2\n      });\n    });\n    it('merges other queries', function () {\n      const m = mquery({\n        name: 'mquery'\n      });\n      m.tailable();\n      m.select('_id');\n      const a = mquery().find(m);\n      assert.deepEqual(a._conditions, m._conditions);\n      assert.deepEqual(a.options, m.options);\n      assert.deepEqual(a._fields, m._fields);\n    });\n    describe('executes', function () {\n      before(function (done) {\n        col.insertOne({\n          name: 'mquery'\n        }, done);\n      });\n      after(function (done) {\n        col.remove({\n          name: 'mquery'\n        }, done);\n      });\n      it('when criteria is passed with a callback', function (done) {\n        mquery(col).find({\n          name: 'mquery'\n        }, function (err, docs) {\n          assert.ifError(err);\n          assert.equal(1, docs.length);\n          done();\n        });\n      });\n      it('when Query is passed with a callback', function (done) {\n        const m = mquery({\n          name: 'mquery'\n        });\n        mquery(col).find(m, function (err, docs) {\n          assert.ifError(err);\n          assert.equal(1, docs.length);\n          done();\n        });\n      });\n      it('when just a callback is passed', function (done) {\n        mquery({\n          name: 'mquery'\n        }).collection(col).find(function (err, docs) {\n          assert.ifError(err);\n          assert.equal(1, docs.length);\n          done();\n        });\n      });\n    });\n  });\n  describe('findOne', function () {\n    describe('with no callback', function () {\n      it('does not execute', function () {\n        const m = mquery();\n        assert.doesNotThrow(function () {\n          m.findOne();\n        });\n        assert.doesNotThrow(function () {\n          m.findOne({\n            x: 1\n          });\n        });\n      });\n    });\n    it('is chainable', function () {\n      const m = mquery();\n      const n = m.findOne({\n        x: 1\n      }).findOne().findOne({\n        y: 2\n      });\n      assert.equal(m, n);\n      assert.deepEqual(m._conditions, {\n        x: 1,\n        y: 2\n      });\n      assert.equal('findOne', m.op);\n    });\n    it('merges other queries', function () {\n      const m = mquery({\n        name: 'mquery'\n      });\n      m.read('nearest');\n      m.select('_id');\n      const a = mquery().findOne(m);\n      assert.deepEqual(a._conditions, m._conditions);\n      assert.deepEqual(a.options, m.options);\n      assert.deepEqual(a._fields, m._fields);\n    });\n    describe('executes', function () {\n      before(function (done) {\n        col.insertOne({\n          name: 'mquery findone'\n        }, done);\n      });\n      after(function (done) {\n        col.remove({\n          name: 'mquery findone'\n        }, done);\n      });\n      it('when criteria is passed with a callback', function (done) {\n        mquery(col).findOne({\n          name: 'mquery findone'\n        }, function (err, doc) {\n          assert.ifError(err);\n          assert.ok(doc);\n          assert.equal('mquery findone', doc.name);\n          done();\n        });\n      });\n      it('when Query is passed with a callback', function (done) {\n        const m = mquery(col).where({\n          name: 'mquery findone'\n        });\n        mquery(col).findOne(m, function (err, doc) {\n          assert.ifError(err);\n          assert.ok(doc);\n          assert.equal('mquery findone', doc.name);\n          done();\n        });\n      });\n      it('when just a callback is passed', function (done) {\n        mquery({\n          name: 'mquery findone'\n        }).collection(col).findOne(function (err, doc) {\n          assert.ifError(err);\n          assert.ok(doc);\n          assert.equal('mquery findone', doc.name);\n          done();\n        });\n      });\n    });\n  });\n  describe('count', function () {\n    describe('with no callback', function () {\n      it('does not execute', function () {\n        const m = mquery();\n        assert.doesNotThrow(function () {\n          m.count();\n        });\n        assert.doesNotThrow(function () {\n          m.count({\n            x: 1\n          });\n        });\n      });\n    });\n    it('is chainable', function () {\n      const m = mquery();\n      const n = m.count({\n        x: 1\n      }).count().count({\n        y: 2\n      });\n      assert.equal(m, n);\n      assert.deepEqual(m._conditions, {\n        x: 1,\n        y: 2\n      });\n      assert.equal('count', m.op);\n    });\n    it('merges other queries', function () {\n      const m = mquery({\n        name: 'mquery'\n      });\n      m.read('nearest');\n      m.select('_id');\n      const a = mquery().count(m);\n      assert.deepEqual(a._conditions, m._conditions);\n      assert.deepEqual(a.options, m.options);\n      assert.deepEqual(a._fields, m._fields);\n    });\n    describe('executes', function () {\n      before(function (done) {\n        col.insertOne({\n          name: 'mquery count'\n        }, done);\n      });\n      after(function (done) {\n        col.remove({\n          name: 'mquery count'\n        }, done);\n      });\n      it('when criteria is passed with a callback', function (done) {\n        mquery(col).count({\n          name: 'mquery count'\n        }, function (err, count) {\n          assert.ifError(err);\n          assert.ok(count);\n          assert.ok(1 === count);\n          done();\n        });\n      });\n      it('when Query is passed with a callback', function (done) {\n        const m = mquery({\n          name: 'mquery count'\n        });\n        mquery(col).count(m, function (err, count) {\n          assert.ifError(err);\n          assert.ok(count);\n          assert.ok(1 === count);\n          done();\n        });\n      });\n      it('when just a callback is passed', function (done) {\n        mquery({\n          name: 'mquery count'\n        }).collection(col).count(function (err, count) {\n          assert.ifError(err);\n          assert.ok(1 === count);\n          done();\n        });\n      });\n    });\n    describe('validates its option', function () {\n      it('sort', function (done) {\n        assert.doesNotThrow(function () {\n          mquery().sort('x').count();\n        });\n        done();\n      });\n      it('select', function (done) {\n        assert.throws(function () {\n          mquery().select('x').count();\n        }, /field selection and slice cannot be used with count/);\n        done();\n      });\n      it('slice', function (done) {\n        assert.throws(function () {\n          mquery().where('x').slice(-3).count();\n        }, /field selection and slice cannot be used with count/);\n        done();\n      });\n      it('limit', function (done) {\n        assert.doesNotThrow(function () {\n          mquery().limit(3).count();\n        });\n        done();\n      });\n      it('skip', function (done) {\n        assert.doesNotThrow(function () {\n          mquery().skip(3).count();\n        });\n        done();\n      });\n      it('batchSize', function (done) {\n        assert.throws(function () {\n          mquery({}, {\n            batchSize: 3\n          }).count();\n        }, /batchSize cannot be used with count/);\n        done();\n      });\n      it('maxScan', function (done) {\n        assert.throws(function () {\n          mquery().maxScan(300).count();\n        }, /maxScan cannot be used with count/);\n        done();\n      });\n      it('snapshot', function (done) {\n        assert.throws(function () {\n          mquery().snapshot().count();\n        }, /snapshot cannot be used with count/);\n        done();\n      });\n      it('tailable', function (done) {\n        assert.throws(function () {\n          mquery().tailable().count();\n        }, /tailable cannot be used with count/);\n        done();\n      });\n    });\n  });\n  describe('distinct', function () {\n    describe('with no callback', function () {\n      it('does not execute', function () {\n        const m = mquery();\n        assert.doesNotThrow(function () {\n          m.distinct();\n        });\n        assert.doesNotThrow(function () {\n          m.distinct('name');\n        });\n        assert.doesNotThrow(function () {\n          m.distinct({\n            name: 'mquery distinct'\n          });\n        });\n        assert.doesNotThrow(function () {\n          m.distinct({\n            name: 'mquery distinct'\n          }, 'name');\n        });\n      });\n    });\n    it('is chainable', function () {\n      const m = mquery({\n        x: 1\n      }).distinct('name');\n      const n = m.distinct({\n        y: 2\n      });\n      assert.equal(m, n);\n      assert.deepEqual(n._conditions, {\n        x: 1,\n        y: 2\n      });\n      assert.equal('name', n._distinct);\n      assert.equal('distinct', n.op);\n    });\n    it('overwrites field', function () {\n      const m = mquery({\n        name: 'mquery'\n      }).distinct('name');\n      m.distinct('rename');\n      assert.equal(m._distinct, 'rename');\n      m.distinct({\n        x: 1\n      }, 'renamed');\n      assert.equal(m._distinct, 'renamed');\n    });\n    it('merges other queries', function () {\n      const m = mquery().distinct({\n        name: 'mquery'\n      }, 'age');\n      m.read('nearest');\n      const a = mquery().distinct(m);\n      assert.deepEqual(a._conditions, m._conditions);\n      assert.deepEqual(a.options, m.options);\n      assert.deepEqual(a._fields, m._fields);\n      assert.deepEqual(a._distinct, m._distinct);\n    });\n    describe('executes', function () {\n      before(function (done) {\n        col.insertOne({\n          name: 'mquery distinct',\n          age: 1\n        }, done);\n      });\n      after(function (done) {\n        col.remove({\n          name: 'mquery distinct'\n        }, done);\n      });\n      it('when distinct arg is passed with a callback', function (done) {\n        mquery(col).distinct('distinct', function (err, doc) {\n          assert.ifError(err);\n          assert.ok(doc);\n          done();\n        });\n      });\n      describe('when criteria is passed with a callback', function () {\n        it('if distinct arg was declared', function (done) {\n          mquery(col).distinct('age').distinct({\n            name: 'mquery distinct'\n          }, function (err, doc) {\n            assert.ifError(err);\n            assert.ok(doc);\n            done();\n          });\n        });\n        it('but not if distinct arg was not declared', function () {\n          assert.throws(function () {\n            mquery(col).distinct({\n              name: 'mquery distinct'\n            }, function () {});\n          }, /No value for `distinct`/);\n        });\n      });\n      describe('when Query is passed with a callback', function () {\n        const m = mquery({\n          name: 'mquery distinct'\n        });\n        it('if distinct arg was declared', function (done) {\n          mquery(col).distinct('age').distinct(m, function (err, doc) {\n            assert.ifError(err);\n            assert.ok(doc);\n            done();\n          });\n        });\n        it('but not if distinct arg was not declared', function () {\n          assert.throws(function () {\n            mquery(col).distinct(m, function () {});\n          }, /No value for `distinct`/);\n        });\n      });\n      describe('when just a callback is passed', function () {\n        it('if distinct arg was declared', function (done) {\n          const m = mquery({\n            name: 'mquery distinct'\n          });\n          m.collection(col);\n          m.distinct('age');\n          m.distinct(function (err, doc) {\n            assert.ifError(err);\n            assert.ok(doc);\n            done();\n          });\n        });\n        it('but not if no distinct arg was declared', function () {\n          const m = mquery();\n          m.collection(col);\n          assert.throws(function () {\n            m.distinct(function () {});\n          }, /No value for `distinct`/);\n        });\n      });\n    });\n    describe('validates its option', function () {\n      it('sort', function (done) {\n        assert.throws(function () {\n          mquery().sort('x').distinct();\n        }, /sort cannot be used with distinct/);\n        done();\n      });\n      it('select', function (done) {\n        assert.throws(function () {\n          mquery().select('x').distinct();\n        }, /field selection and slice cannot be used with distinct/);\n        done();\n      });\n      it('slice', function (done) {\n        assert.throws(function () {\n          mquery().where('x').slice(-3).distinct();\n        }, /field selection and slice cannot be used with distinct/);\n        done();\n      });\n      it('limit', function (done) {\n        assert.throws(function () {\n          mquery().limit(3).distinct();\n        }, /limit cannot be used with distinct/);\n        done();\n      });\n      it('skip', function (done) {\n        assert.throws(function () {\n          mquery().skip(3).distinct();\n        }, /skip cannot be used with distinct/);\n        done();\n      });\n      it('batchSize', function (done) {\n        assert.throws(function () {\n          mquery({}, {\n            batchSize: 3\n          }).distinct();\n        }, /batchSize cannot be used with distinct/);\n        done();\n      });\n      it('maxScan', function (done) {\n        assert.throws(function () {\n          mquery().maxScan(300).distinct();\n        }, /maxScan cannot be used with distinct/);\n        done();\n      });\n      it('snapshot', function (done) {\n        assert.throws(function () {\n          mquery().snapshot().distinct();\n        }, /snapshot cannot be used with distinct/);\n        done();\n      });\n      it('hint', function (done) {\n        assert.throws(function () {\n          mquery().hint({\n            x: 1\n          }).distinct();\n        }, /hint cannot be used with distinct/);\n        done();\n      });\n      it('tailable', function (done) {\n        assert.throws(function () {\n          mquery().tailable().distinct();\n        }, /tailable cannot be used with distinct/);\n        done();\n      });\n    });\n  });\n  describe('update', function () {\n    describe('with no callback', function () {\n      it('does not execute', function () {\n        const m = mquery();\n        assert.doesNotThrow(function () {\n          m.updateOne({\n            name: 'old'\n          }, {\n            name: 'updated'\n          }, {\n            multi: true\n          });\n        });\n        assert.doesNotThrow(function () {\n          m.updateOne({\n            name: 'old'\n          }, {\n            name: 'updated'\n          });\n        });\n        assert.doesNotThrow(function () {\n          m.updateOne({\n            name: 'updated'\n          });\n        });\n        assert.doesNotThrow(function () {\n          m.updateOne();\n        });\n      });\n    });\n    it('is chainable', function () {\n      const m = mquery({\n        x: 1\n      }).updateOne({\n        y: 2\n      });\n      const n = m.where({\n        y: 2\n      });\n      assert.equal(m, n);\n      assert.deepEqual(n._conditions, {\n        x: 1,\n        y: 2\n      });\n      assert.deepEqual({\n        y: 2\n      }, n._update);\n      assert.equal('updateOne', n.op);\n    });\n    it('merges update doc arg', function () {\n      const a = [1, 2];\n      const m = mquery().where({\n        name: 'mquery'\n      }).updateOne({\n        x: 'stuff',\n        a: a\n      });\n      m.updateOne({\n        z: 'stuff'\n      });\n      assert.deepEqual(m._update, {\n        z: 'stuff',\n        x: 'stuff',\n        a: a\n      });\n      assert.deepEqual(m._conditions, {\n        name: 'mquery'\n      });\n      assert.ok(!m.options.overwrite);\n      m.updateOne({}, {\n        z: 'renamed'\n      }, {\n        overwrite: true\n      });\n      assert.ok(m.options.overwrite === true);\n      assert.deepEqual(m._conditions, {\n        name: 'mquery'\n      });\n      assert.deepEqual(m._update, {\n        z: 'renamed',\n        x: 'stuff',\n        a: a\n      });\n      a.push(3);\n      assert.notDeepEqual(m._update, {\n        z: 'renamed',\n        x: 'stuff',\n        a: a\n      });\n    });\n    describe('executes', function () {\n      let id;\n      before(function (done) {\n        col.insertOne({\n          name: 'mquery update',\n          age: 1\n        }, function (err, res) {\n          id = res.insertedId;\n          done();\n        });\n      });\n      after(function (done) {\n        col.remove({\n          _id: id\n        }, done);\n      });\n      describe('when conds + doc + opts + callback passed', function () {\n        it('works', function (done) {\n          const m = mquery(col).where({\n            _id: id\n          });\n          m.updateOne({}, {\n            name: 'Sparky'\n          }, {}, function (err, res) {\n            assert.ifError(err);\n            assert.equal(res.modifiedCount, 1);\n            m.findOne(function (err, doc) {\n              assert.ifError(err);\n              assert.equal(doc.name, 'Sparky');\n              done();\n            });\n          });\n        });\n      });\n      describe('when conds + doc + callback passed', function () {\n        it('works', function (done) {\n          const m = mquery(col).updateOne({\n            _id: id\n          }, {\n            name: 'fairgrounds'\n          }, function (err, num) {\n            assert.ifError(err);\n            assert.ok(1, num);\n            m.findOne(function (err, doc) {\n              assert.ifError(err);\n              assert.equal(doc.name, 'fairgrounds');\n              done();\n            });\n          });\n        });\n      });\n      describe('when doc + callback passed', function () {\n        it('works', function (done) {\n          const m = mquery(col).where({\n            _id: id\n          }).updateOne({\n            name: 'changed'\n          }, function (err, num) {\n            assert.ifError(err);\n            assert.ok(1, num);\n            m.findOne(function (err, doc) {\n              assert.ifError(err);\n              assert.equal(doc.name, 'changed');\n              done();\n            });\n          });\n        });\n      });\n      describe('when just callback passed', function () {\n        it('works', function (done) {\n          const m = mquery(col).where({\n            _id: id\n          });\n          m.updateOne({\n            name: 'Frankenweenie'\n          });\n          m.updateOne(function (err, res) {\n            assert.ifError(err);\n            assert.equal(res.modifiedCount, 1);\n            m.findOne(function (err, doc) {\n              assert.ifError(err);\n              assert.equal(doc.name, 'Frankenweenie');\n              done();\n            });\n          });\n        });\n      });\n      describe('without a callback', function () {\n        it('when forced by exec()', function (done) {\n          const m = mquery(col).where({\n            _id: id\n          });\n          m.setOptions({\n            w: 'majority'\n          });\n          m.updateOne({\n            name: 'forced'\n          });\n          const update = m._collection.update;\n          m._collection.updateOne = function (conds, doc, opts) {\n            m._collection.update = update;\n            assert.equal(opts.w, 'majority');\n            assert.equal('forced', doc.$set.name);\n            done();\n          };\n          m.exec();\n        });\n      });\n      describe('except when update doc is empty and missing overwrite flag', function () {\n        it('works', function (done) {\n          const m = mquery(col).where({\n            _id: id\n          });\n          m.updateOne({}, function (err, num) {\n            assert.ifError(err);\n            assert.ok(0 === num);\n            setTimeout(function () {\n              m.findOne(function (err, doc) {\n                assert.ifError(err);\n                assert.equal(3, mquery.utils.keys(doc).length);\n                assert.equal(id, doc._id.toString());\n                assert.equal('Frankenweenie', doc.name);\n                done();\n              });\n            }, 300);\n          });\n        });\n      });\n      describe('when boolean (true) - exec()', function () {\n        it('works', function (done) {\n          const m = mquery(col).where({\n            _id: id\n          });\n          m.updateOne({\n            name: 'bool'\n          }).updateOne(true);\n          setTimeout(function () {\n            m.findOne(function (err, doc) {\n              assert.ifError(err);\n              assert.ok(doc);\n              assert.equal('bool', doc.name);\n              done();\n            });\n          }, 300);\n        });\n      });\n    });\n  });\n  describe('remove', function () {\n    describe('with 0 args', function () {\n      const name = 'remove: no args test';\n      before(function (done) {\n        col.insertOne({\n          name: name\n        }, done);\n      });\n      after(function (done) {\n        col.remove({\n          name: name\n        }, done);\n      });\n      it('does not execute', function (done) {\n        const remove = col.remove;\n        col.remove = function () {\n          col.remove = remove;\n          done(new Error('remove executed!'));\n        };\n        mquery(col).where({\n          name: name\n        }).remove();\n        setTimeout(function () {\n          col.remove = remove;\n          done();\n        }, 10);\n      });\n      it('chains', function () {\n        const m = mquery();\n        assert.equal(m, m.remove());\n      });\n    });\n    describe('with 1 argument', function () {\n      const name = 'remove: 1 arg test';\n      before(function (done) {\n        col.insertOne({\n          name: name\n        }, done);\n      });\n      after(function (done) {\n        col.remove({\n          name: name\n        }, done);\n      });\n      describe('that is a', function () {\n        it('plain object', function () {\n          const m = mquery(col).remove({\n            name: 'Whiskers'\n          });\n          m.remove({\n            color: '#fff'\n          });\n          assert.deepEqual({\n            name: 'Whiskers',\n            color: '#fff'\n          }, m._conditions);\n        });\n        it('query', function () {\n          const q = mquery({\n            color: '#fff'\n          });\n          const m = mquery(col).remove({\n            name: 'Whiskers'\n          });\n          m.remove(q);\n          assert.deepEqual({\n            name: 'Whiskers',\n            color: '#fff'\n          }, m._conditions);\n        });\n        it('function', function (done) {\n          mquery(col).where({\n            name: name\n          }).remove(function (err) {\n            assert.ifError(err);\n            mquery(col).findOne({\n              name: name\n            }, function (err, doc) {\n              assert.ifError(err);\n              assert.equal(null, doc);\n              done();\n            });\n          });\n        });\n        it('boolean (true) - execute', function (done) {\n          col.insertOne({\n            name: name\n          }, function (err) {\n            assert.ifError(err);\n            mquery(col).findOne({\n              name: name\n            }, function (err, doc) {\n              assert.ifError(err);\n              assert.ok(doc);\n              mquery(col).remove(true);\n              setTimeout(function () {\n                mquery(col).find(function (err, docs) {\n                  assert.ifError(err);\n                  assert.ok(docs);\n                  assert.equal(0, docs.length);\n                  done();\n                });\n              }, 300);\n            });\n          });\n        });\n      });\n    });\n    describe('with 2 arguments', function () {\n      const name = 'remove: 2 arg test';\n      beforeEach(function (done) {\n        col.remove({}, function (err) {\n          assert.ifError(err);\n          col.insertMany([{\n            name: 'shelly'\n          }, {\n            name: name\n          }], function (err) {\n            assert.ifError(err);\n            mquery(col).find(function (err, docs) {\n              assert.ifError(err);\n              assert.equal(2, docs.length);\n              done();\n            });\n          });\n        });\n      });\n      describe('plain object + callback', function () {\n        it('works', function (done) {\n          mquery(col).remove({\n            name: name\n          }, function (err) {\n            assert.ifError(err);\n            mquery(col).find(function (err, docs) {\n              assert.ifError(err);\n              assert.ok(docs);\n              assert.equal(1, docs.length);\n              assert.equal('shelly', docs[0].name);\n              done();\n            });\n          });\n        });\n      });\n      describe('mquery + callback', function () {\n        it('works', function (done) {\n          const m = mquery({\n            name: name\n          });\n          mquery(col).remove(m, function (err) {\n            assert.ifError(err);\n            mquery(col).find(function (err, docs) {\n              assert.ifError(err);\n              assert.ok(docs);\n              assert.equal(1, docs.length);\n              assert.equal('shelly', docs[0].name);\n              done();\n            });\n          });\n        });\n      });\n    });\n  });\n  function validateFindAndModifyOptions(method) {\n    describe('validates its option', function () {\n      it('sort', function (done) {\n        assert.doesNotThrow(function () {\n          mquery().sort('x')[method]();\n        });\n        done();\n      });\n      it('select', function (done) {\n        assert.doesNotThrow(function () {\n          mquery().select('x')[method]();\n        });\n        done();\n      });\n      it('limit', function (done) {\n        assert.throws(function () {\n          mquery().limit(3)[method]();\n        }, new RegExp('limit cannot be used with ' + method));\n        done();\n      });\n      it('skip', function (done) {\n        assert.throws(function () {\n          mquery().skip(3)[method]();\n        }, new RegExp('skip cannot be used with ' + method));\n        done();\n      });\n      it('batchSize', function (done) {\n        assert.throws(function () {\n          mquery({}, {\n            batchSize: 3\n          })[method]();\n        }, new RegExp('batchSize cannot be used with ' + method));\n        done();\n      });\n      it('maxScan', function (done) {\n        assert.throws(function () {\n          mquery().maxScan(300)[method]();\n        }, new RegExp('maxScan cannot be used with ' + method));\n        done();\n      });\n      it('snapshot', function (done) {\n        assert.throws(function () {\n          mquery().snapshot()[method]();\n        }, new RegExp('snapshot cannot be used with ' + method));\n        done();\n      });\n      it('tailable', function (done) {\n        assert.throws(function () {\n          mquery().tailable()[method]();\n        }, new RegExp('tailable cannot be used with ' + method));\n        done();\n      });\n    });\n  }\n  describe('findOneAndUpdate', function () {\n    let name = 'findOneAndUpdate + fn';\n    validateFindAndModifyOptions('findOneAndUpdate');\n    describe('with 0 args', function () {\n      it('makes no changes', function () {\n        const m = mquery();\n        const n = m.findOneAndUpdate();\n        assert.deepEqual(m, n);\n      });\n    });\n    describe('with 1 arg', function () {\n      describe('that is an object', function () {\n        it('updates the doc', function () {\n          const m = mquery();\n          const n = m.findOneAndUpdate({\n            $set: {\n              name: '1 arg'\n            }\n          });\n          assert.deepEqual(n._update, {\n            $set: {\n              name: '1 arg'\n            }\n          });\n        });\n      });\n      describe('that is a query', function () {\n        it('updates the doc', function () {\n          const m = mquery({\n            name: name\n          }).updateOne({\n            x: 1\n          });\n          const n = mquery().findOneAndUpdate(m);\n          assert.deepEqual(n._update, {\n            x: 1\n          });\n        });\n      });\n      it('that is a function', function (done) {\n        col.insertOne({\n          name: name\n        }, function (err) {\n          assert.ifError(err);\n          const m = mquery({\n            name: name\n          }).collection(col);\n          name = '1 arg';\n          const n = m.updateOne({\n            $set: {\n              name: name\n            }\n          }).setOptions({\n            returnDocument: 'after'\n          });\n          n.findOneAndUpdate(function (err, res) {\n            assert.ifError(err);\n            assert.ok(res.value);\n            assert.equal(res.value.name, name);\n            done();\n          });\n        });\n      });\n    });\n    describe('with 2 args', function () {\n      it('conditions + update', function () {\n        const m = mquery(col);\n        m.findOneAndUpdate({\n          name: name\n        }, {\n          age: 100\n        });\n        assert.deepEqual({\n          name: name\n        }, m._conditions);\n        assert.deepEqual({\n          age: 100\n        }, m._update);\n      });\n      it('query + update', function () {\n        const n = mquery({\n          name: name\n        });\n        const m = mquery(col);\n        m.findOneAndUpdate(n, {\n          age: 100\n        });\n        assert.deepEqual({\n          name: name\n        }, m._conditions);\n        assert.deepEqual({\n          age: 100\n        }, m._update);\n      });\n      it('update + callback', function (done) {\n        const m = mquery(col).where({\n          name: name\n        });\n        m.findOneAndUpdate({}, {\n          $inc: {\n            age: 10\n          }\n        }, {\n          returnDocument: 'after'\n        }, function (err, res) {\n          assert.ifError(err);\n          assert.equal(10, res.value.age);\n          done();\n        });\n      });\n    });\n    describe('with 3 args', function () {\n      it('conditions + update + options', function () {\n        const m = mquery();\n        const n = m.findOneAndUpdate({\n          name: name\n        }, {\n          works: true\n        }, {\n          returnDocument: 'before'\n        });\n        assert.deepEqual({\n          name: name\n        }, n._conditions);\n        assert.deepEqual({\n          works: true\n        }, n._update);\n        assert.deepEqual({\n          returnDocument: 'before'\n        }, n.options);\n      });\n      it('conditions + update + callback', function (done) {\n        const m = mquery(col);\n        m.findOneAndUpdate({\n          name: name\n        }, {\n          works: true\n        }, {\n          returnDocument: 'after'\n        }, function (err, res) {\n          assert.ifError(err);\n          assert.ok(res.value);\n          assert.equal(name, res.value.name);\n          assert.ok(true === res.value.works);\n          done();\n        });\n      });\n    });\n    describe('with 4 args', function () {\n      it('conditions + update + options + callback', function (done) {\n        const m = mquery(col);\n        m.findOneAndUpdate({\n          name: name\n        }, {\n          works: false\n        }, {}, function (err, res) {\n          assert.ifError(err);\n          assert.ok(res.value);\n          assert.equal(name, res.value.name);\n          assert.ok(true === res.value.works);\n          done();\n        });\n      });\n    });\n  });\n  describe('findOneAndRemove', function () {\n    let name = 'findOneAndRemove';\n    validateFindAndModifyOptions('findOneAndRemove');\n    describe('with 0 args', function () {\n      it('makes no changes', function () {\n        const m = mquery();\n        const n = m.findOneAndRemove();\n        assert.deepEqual(m, n);\n      });\n    });\n    describe('with 1 arg', function () {\n      describe('that is an object', function () {\n        it('updates the doc', function () {\n          const m = mquery();\n          const n = m.findOneAndRemove({\n            name: '1 arg'\n          });\n          assert.deepEqual(n._conditions, {\n            name: '1 arg'\n          });\n        });\n      });\n      describe('that is a query', function () {\n        it('updates the doc', function () {\n          const m = mquery({\n            name: name\n          });\n          const n = m.findOneAndRemove(m);\n          assert.deepEqual(n._conditions, {\n            name: name\n          });\n        });\n      });\n      it('that is a function', function (done) {\n        col.insertOne({\n          name: name\n        }, function (err) {\n          assert.ifError(err);\n          const m = mquery({\n            name: name\n          }).collection(col);\n          m.findOneAndRemove(function (err, res) {\n            assert.ifError(err);\n            assert.ok(res.value);\n            assert.equal(name, res.value.name);\n            done();\n          });\n        });\n      });\n    });\n    describe('with 2 args', function () {\n      it('conditions + options', function () {\n        const m = mquery(col);\n        m.findOneAndRemove({\n          name: name\n        }, {\n          returnDocument: 'after'\n        });\n        assert.deepEqual({\n          name: name\n        }, m._conditions);\n        assert.deepEqual({\n          returnDocument: 'after'\n        }, m.options);\n      });\n      it('query + options', function () {\n        const n = mquery({\n          name: name\n        });\n        const m = mquery(col);\n        m.findOneAndRemove(n, {\n          sort: {\n            x: 1\n          }\n        });\n        assert.deepEqual({\n          name: name\n        }, m._conditions);\n        assert.deepEqual({\n          sort: {\n            x: 1\n          }\n        }, m.options);\n      });\n      it('conditions + callback', function (done) {\n        col.insertOne({\n          name: name\n        }, function (err) {\n          assert.ifError(err);\n          const m = mquery(col);\n          m.findOneAndRemove({\n            name: name\n          }, function (err, res) {\n            assert.ifError(err);\n            assert.equal(name, res.value.name);\n            done();\n          });\n        });\n      });\n      it('query + callback', function (done) {\n        col.insertOne({\n          name: name\n        }, function (err) {\n          assert.ifError(err);\n          const n = mquery({\n            name: name\n          });\n          const m = mquery(col);\n          m.findOneAndRemove(n, function (err, res) {\n            assert.ifError(err);\n            assert.equal(name, res.value.name);\n            done();\n          });\n        });\n      });\n    });\n    describe('with 3 args', function () {\n      it('conditions + options + callback', function (done) {\n        name = 'findOneAndRemove + conds + options + cb';\n        col.insertMany([{\n          name: name\n        }, {\n          name: 'a'\n        }], function (err) {\n          assert.ifError(err);\n          const m = mquery(col);\n          m.findOneAndRemove({\n            name: name\n          }, {\n            sort: {\n              name: 1\n            }\n          }, function (err, res) {\n            assert.ifError(err);\n            assert.ok(res.value);\n            assert.equal(name, res.value.name);\n            done();\n          });\n        });\n      });\n    });\n  });\n  describe('exec', function () {\n    beforeEach(function (done) {\n      col.insertMany([{\n        name: 'exec',\n        age: 1\n      }, {\n        name: 'exec',\n        age: 2\n      }], done);\n    });\n    afterEach(function (done) {\n      mquery(col).remove(done);\n    });\n    it('requires an op', function () {\n      assert.throws(function () {\n        mquery().exec();\n      }, /Missing query type/);\n    });\n    describe('find', function () {\n      it('works', function (done) {\n        const m = mquery(col).find({\n          name: 'exec'\n        });\n        m.exec(function (err, docs) {\n          assert.ifError(err);\n          assert.equal(2, docs.length);\n          done();\n        });\n      });\n      it('works with readPreferences', function (done) {\n        const m = mquery(col).find({\n          name: 'exec'\n        });\n        try {\n          const ReadPreference = require('mongodb').ReadPreference;\n          const rp = new ReadPreference('primary');\n          m.read(rp);\n        } catch (e) {\n          done(e.code === 'MODULE_NOT_FOUND' ? null : e);\n          return;\n        }\n        m.exec(function (err, docs) {\n          assert.ifError(err);\n          assert.equal(2, docs.length);\n          done();\n        });\n      });\n      it('works with hint', function (done) {\n        mquery(col).hint({\n          _id: 1\n        }).find({\n          name: 'exec'\n        }).exec(function (err, docs) {\n          assert.ifError(err);\n          assert.equal(2, docs.length);\n          mquery(col).hint('_id_').find({\n            age: 1\n          }).exec(function (err, docs) {\n            assert.ifError(err);\n            assert.equal(1, docs.length);\n            done();\n          });\n        });\n      });\n      it('works with readConcern', function (done) {\n        const m = mquery(col).find({\n          name: 'exec'\n        });\n        m.readConcern('l');\n        m.exec(function (err, docs) {\n          assert.ifError(err);\n          assert.equal(2, docs.length);\n          done();\n        });\n      });\n      it('works with collation', function (done) {\n        const m = mquery(col).find({\n          name: 'EXEC'\n        });\n        m.collation({\n          locale: 'en_US',\n          strength: 1\n        });\n        m.exec(function (err, docs) {\n          assert.ifError(err);\n          assert.equal(2, docs.length);\n          done();\n        });\n      });\n    });\n    it('findOne', function (done) {\n      const m = mquery(col).findOne({\n        age: 2\n      });\n      m.exec(function (err, doc) {\n        assert.ifError(err);\n        assert.equal(2, doc.age);\n        done();\n      });\n    });\n    it('count', function (done) {\n      const m = mquery(col).count({\n        name: 'exec'\n      });\n      m.exec(function (err, count) {\n        assert.ifError(err);\n        assert.equal(2, count);\n        done();\n      });\n    });\n    it('distinct', function (done) {\n      const m = mquery({\n        name: 'exec'\n      });\n      m.collection(col);\n      m.distinct('age');\n      m.exec(function (err, array) {\n        assert.ifError(err);\n        assert.ok(Array.isArray(array));\n        assert.equal(2, array.length);\n        assert(~array.indexOf(1));\n        assert(~array.indexOf(2));\n        done();\n      });\n    });\n    describe('update', function () {\n      describe('updateMany', function () {\n        it('works', function (done) {\n          mquery(col).updateMany({\n            name: 'exec'\n          }, {\n            name: 'test'\n          }).exec(function (error) {\n            assert.ifError(error);\n            mquery(col).count({\n              name: 'test'\n            }).exec(function (error, res) {\n              assert.ifError(error);\n              assert.equal(res, 2);\n              done();\n            });\n          });\n        });\n        it('works with write concern', function (done) {\n          mquery(col).updateMany({\n            name: 'exec'\n          }, {\n            name: 'test'\n          }).w(1).j(true).wtimeout(1000).exec(function (error) {\n            assert.ifError(error);\n            mquery(col).count({\n              name: 'test'\n            }).exec(function (error, res) {\n              assert.ifError(error);\n              assert.equal(res, 2);\n              done();\n            });\n          });\n        });\n      });\n      describe('updateOne', function () {\n        it('works', function (done) {\n          mquery(col).updateOne({\n            name: 'exec'\n          }, {\n            name: 'test'\n          }).exec(function (error) {\n            assert.ifError(error);\n            mquery(col).count({\n              name: 'test'\n            }).exec(function (error, res) {\n              assert.ifError(error);\n              assert.equal(res, 1);\n              done();\n            });\n          });\n        });\n      });\n      describe('replaceOne', function () {\n        it('works', function (done) {\n          mquery(col).replaceOne({\n            name: 'exec'\n          }, {\n            name: 'test'\n          }).exec(function (error) {\n            assert.ifError(error);\n            mquery(col).findOne({\n              name: 'test'\n            }).exec(function (error, res) {\n              assert.ifError(error);\n              assert.equal(res.name, 'test');\n              assert.ok(res.age == null);\n              done();\n            });\n          });\n        });\n      });\n    });\n    describe('remove', function () {\n      it('with a callback', function (done) {\n        const m = mquery(col).where({\n          age: 2\n        }).remove();\n        m.exec(function (err, res) {\n          assert.ifError(err);\n          assert.equal(1, res.deletedCount);\n          done();\n        });\n      });\n      it('without a callback', function (done) {\n        const m = mquery(col).where({\n          age: 1\n        }).remove();\n        m.exec();\n        setTimeout(function () {\n          mquery(col).where('name', 'exec').count(function (err, num) {\n            assert.equal(1, num);\n            done();\n          });\n        }, 200);\n      });\n    });\n    describe('deleteOne', function () {\n      it('with a callback', function (done) {\n        const m = mquery(col).where({\n          age: {\n            $gte: 0\n          }\n        }).deleteOne();\n        m.exec(function (err, res) {\n          assert.ifError(err);\n          assert.equal(res.deletedCount, 1);\n          done();\n        });\n      });\n      it('with justOne set', function (done) {\n        const m = mquery(col).where({\n          age: {\n            $gte: 0\n          }\n        }).\n        // Should ignore `justOne`\n        setOptions({\n          justOne: false\n        }).deleteOne();\n        m.exec(function (err, res) {\n          assert.ifError(err);\n          assert.equal(res.deletedCount, 1);\n          done();\n        });\n      });\n    });\n    describe('deleteMany', function () {\n      it('with a callback', function (done) {\n        const m = mquery(col).where({\n          age: {\n            $gte: 0\n          }\n        }).deleteMany();\n        m.exec(function (err, res) {\n          assert.ifError(err);\n          assert.equal(res.deletedCount, 2);\n          done();\n        });\n      });\n    });\n    describe('findOneAndUpdate', function () {\n      it('with a callback', function (done) {\n        const m = mquery(col);\n        m.findOneAndUpdate({\n          name: 'exec',\n          age: 1\n        }, {\n          $set: {\n            name: 'findOneAndUpdate'\n          }\n        }, {\n          returnDocument: 'after'\n        });\n        m.exec(function (err, res) {\n          assert.ifError(err);\n          assert.equal('findOneAndUpdate', res.value.name);\n          done();\n        });\n      });\n    });\n    describe('findOneAndRemove', function () {\n      it('with a callback', function (done) {\n        const m = mquery(col);\n        m.findOneAndRemove({\n          name: 'exec',\n          age: 2\n        });\n        m.exec(function (err, res) {\n          assert.ifError(err);\n          assert.equal('exec', res.value.name);\n          assert.equal(2, res.value.age);\n          mquery(col).count({\n            name: 'exec'\n          }, function (err, num) {\n            assert.ifError(err);\n            assert.equal(1, num);\n            done();\n          });\n        });\n      });\n    });\n  });\n  describe('setTraceFunction', function () {\n    beforeEach(function (done) {\n      col.insertMany([{\n        name: 'trace',\n        age: 93\n      }], done);\n    });\n    it('calls trace function when executing query', function (done) {\n      const m = mquery(col);\n      let resultTraceCalled;\n      m.setTraceFunction(function (method, queryInfo) {\n        try {\n          assert.equal('findOne', method);\n          assert.equal('trace', queryInfo.conditions.name);\n        } catch (e) {\n          done(e);\n        }\n        return function (err, result, millis) {\n          try {\n            assert.equal(93, result.age);\n            assert.ok(typeof millis === 'number');\n          } catch (e) {\n            done(e);\n          }\n          resultTraceCalled = true;\n        };\n      });\n      m.findOne({\n        name: 'trace'\n      }, function (err, doc) {\n        assert.ifError(err);\n        assert.equal(resultTraceCalled, true);\n        assert.equal(93, doc.age);\n        done();\n      });\n    });\n    it('inherits trace function when calling toConstructor', function (done) {\n      function traceFunction() {\n        return function () {};\n      }\n      const tracedQuery = mquery().setTraceFunction(traceFunction).toConstructor();\n      const query = tracedQuery();\n      assert.equal(traceFunction, query._traceFunction);\n      done();\n    });\n  });\n  describe('thunk', function () {\n    it('returns a function', function (done) {\n      assert.equal('function', typeof mquery().thunk());\n      done();\n    });\n    it('passes the fn arg to `exec`', function (done) {\n      function cb() {}\n      const m = mquery();\n      m.exec = function testing(fn) {\n        assert.equal(this, m);\n        assert.equal(cb, fn);\n        done();\n      };\n      m.thunk()(cb);\n    });\n  });\n  describe('then', function () {\n    before(function (done) {\n      col.insertMany([{\n        name: 'then',\n        age: 1\n      }, {\n        name: 'then',\n        age: 2\n      }], done);\n    });\n    after(function (done) {\n      mquery(col).remove({\n        name: 'then'\n      }).exec(done);\n    });\n    it('returns a promise A+ compat object', function (done) {\n      const m = mquery(col).find();\n      assert.equal('function', typeof m.then);\n      done();\n    });\n    it('creates a promise that is resolved on success', function (done) {\n      const promise = mquery(col).count({\n        name: 'then'\n      }).then();\n      promise.then(function (count) {\n        assert.equal(2, count);\n        done();\n      }, done);\n    });\n    it('supports exec() cb being called synchronously #66', function (done) {\n      const query = mquery(col).count({\n        name: 'then'\n      });\n      query.exec = function (cb) {\n        cb(null, 66);\n      };\n      query.then(success, done);\n      function success(count) {\n        assert.equal(66, count);\n        done();\n      }\n    });\n  });\n  describe('stream', function () {\n    before(function (done) {\n      col.insertMany([{\n        name: 'stream',\n        age: 1\n      }, {\n        name: 'stream',\n        age: 2\n      }], done);\n    });\n    after(function (done) {\n      mquery(col).remove({\n        name: 'stream'\n      }).exec(done);\n    });\n    describe('throws', function () {\n      describe('if used with non-find operations', function () {\n        const ops = ['update', 'findOneAndUpdate', 'remove', 'count', 'distinct'];\n        ops.forEach(function (op) {\n          assert.throws(function () {\n            mquery(col)[op]().stream();\n          });\n        });\n      });\n    });\n    it('returns a stream', function (done) {\n      const stream = mquery(col).find({\n        name: 'stream'\n      }).cursor().stream();\n      let count = 0;\n      let err;\n      stream.on('data', function (doc) {\n        assert.equal('stream', doc.name);\n        ++count;\n      });\n      stream.on('error', function (er) {\n        err = er;\n      });\n      stream.on('end', function () {\n        if (err) return done(err);\n        assert.equal(2, count);\n        done();\n      });\n    });\n  });\n  function noDistinct(type) {\n    it('cannot be used with distinct()', function (done) {\n      assert.throws(function () {\n        mquery().distinct('name')[type](4);\n      }, new RegExp(type + ' cannot be used with distinct'));\n      done();\n    });\n  }\n  function no(method, type) {\n    it('cannot be used with ' + method + '()', function (done) {\n      assert.throws(function () {\n        mquery()[method]()[type](4);\n      }, new RegExp(type + ' cannot be used with ' + method));\n      done();\n    });\n  }\n\n  // query internal\n\n  describe('_updateForExec', function () {\n    it('returns a clone of the update object with same key order #19', function (done) {\n      const update = {};\n      update.$push = {\n        n: {\n          $each: [{\n            x: 10\n          }],\n          $slice: -1,\n          $sort: {\n            x: 1\n          }\n        }\n      };\n      const q = mquery().updateOne({\n        x: 1\n      }, update);\n\n      // capture original key order\n      const order = [];\n      let key;\n      for (key in q._update.$push.n) {\n        order.push(key);\n      }\n\n      // compare output\n      const doc = q._updateForExec();\n      let i = 0;\n      for (key in doc.$push.n) {\n        assert.equal(key, order[i]);\n        i++;\n      }\n      done();\n    });\n  });\n});","map":{"version":3,"names":["mquery","require","assert","describe","col","before","done","getCollection","err","collection","ifError","after","dropCollection","it","equal","ok","m","strictEqual","undefined","op","deepEqual","options","_collection","works","_conditions","w","name","opts","safe","readPreference","match","count","$gt","select","update","$set","x","path","q","setOptions","where","updateOne","find","M","toConstructor","_fields","_update","_path","woot","n","go","$where","throws","equals","age","eq","or","$or","arg","looper","y","z","o","nor","$nor","and","$and","generalCondition","type","check","split","forEach","mod","madmen","$mod","exists","$exists","yummy","elemMatch","doesNotThrow","author","votes","$gte","comment","$elemMatch","query","within","center","radius","$geoWithin","$center","loc","box","$box","polygon","$polygon","coordinates","$geometry","use$geoWithin","$within","circle","point","geometry","intersects","a","$geoIntersects","_geoComparison","ran","NaN","near","$near","maxDistance","spherical","$nearSphere","$maxDistance","minDistance","$minDistance","expect","u","t","arguments","noDistinct","selected","selectedInclusively","_id","$meta","selectedExclusively","slice","$slice","no","sort","b","c","e","f","message","score","field","test","Map","skip","set","simpleOption","optionName","distinct","negated","limit","maxScan","batchSize","maxTime","Object","keys","key","snapshot","query2","hint","j","slaveOk","read","readConcern","level","r","tailable","writeConcern","wtimeout","merge","another","original","iTerm","notDeepEqual","insertOne","remove","docs","length","findOne","doc","_distinct","multi","overwrite","push","id","res","insertedId","modifiedCount","num","conds","exec","setTimeout","utils","toString","Error","color","beforeEach","insertMany","validateFindAndModifyOptions","method","RegExp","findOneAndUpdate","returnDocument","value","$inc","findOneAndRemove","afterEach","ReadPreference","rp","code","collation","locale","strength","array","Array","isArray","indexOf","updateMany","error","replaceOne","deletedCount","deleteOne","justOne","deleteMany","resultTraceCalled","setTraceFunction","queryInfo","conditions","result","millis","traceFunction","tracedQuery","_traceFunction","thunk","cb","testing","fn","then","promise","success","ops","stream","cursor","on","er","$push","$each","$sort","order","_updateForExec","i"],"sources":["C:/Users/91930/Desktop/Github projects/Pharmacy Demo/back-end/node_modules/mquery/test/index.js"],"sourcesContent":["'use strict';\r\n\r\nconst mquery = require('../');\r\nconst assert = require('assert');\r\n\r\ndescribe('mquery', function() {\r\n  let col;\r\n\r\n  before(function(done) {\r\n    // get the env specific collection interface\r\n    require('./env').getCollection(function(err, collection) {\r\n      assert.ifError(err);\r\n      col = collection;\r\n      done();\r\n    });\r\n  });\r\n\r\n  after(function(done) {\r\n    require('./env').dropCollection(done);\r\n  });\r\n\r\n  describe('mquery', function() {\r\n    it('is a function', function() {\r\n      assert.equal('function', typeof mquery);\r\n    });\r\n    it('creates instances with the `new` keyword', function() {\r\n      assert.ok(mquery() instanceof mquery);\r\n    });\r\n    describe('defaults', function() {\r\n      it('are set', function() {\r\n        const m = mquery();\r\n        assert.strictEqual(undefined, m.op);\r\n        assert.deepEqual({}, m.options);\r\n      });\r\n    });\r\n    describe('criteria', function() {\r\n      it('if collection-like is used as collection', function() {\r\n        const m = mquery(col);\r\n        assert.equal(col, m._collection.collection);\r\n      });\r\n      it('non-collection-like is used as criteria', function() {\r\n        const m = mquery({ works: true });\r\n        assert.ok(!m._collection);\r\n        assert.deepEqual({ works: true }, m._conditions);\r\n      });\r\n    });\r\n    describe('options', function() {\r\n      it('are merged when passed', function() {\r\n        let m;\r\n        m = mquery(col, { w: 'majority' });\r\n        assert.deepEqual({ w: 'majority' }, m.options);\r\n        m = mquery({ name: 'mquery' }, { w: 'majority' });\r\n        assert.deepEqual({ w: 'majority' }, m.options);\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('toConstructor', function() {\r\n    it('creates subclasses of mquery', function() {\r\n      const opts = { safe: { w: 'majority' }, readPreference: 'p' };\r\n      const match = { name: 'test', count: { $gt: 101 } };\r\n      const select = { name: 1, count: 0 };\r\n      const update = { $set: { x: true } };\r\n      const path = 'street';\r\n\r\n      const q = mquery().setOptions(opts);\r\n      q.where(match);\r\n      q.select(select);\r\n      q.updateOne(update);\r\n      q.where(path);\r\n      q.find();\r\n\r\n      const M = q.toConstructor();\r\n      const m = M();\r\n\r\n      assert.ok(m instanceof mquery);\r\n      assert.deepEqual(opts, m.options);\r\n      assert.deepEqual(match, m._conditions);\r\n      assert.deepEqual(select, m._fields);\r\n      assert.deepEqual(update, m._update);\r\n      assert.equal(path, m._path);\r\n      assert.equal('find', m.op);\r\n    });\r\n  });\r\n\r\n  describe('setOptions', function() {\r\n    it('calls associated methods', function() {\r\n      const m = mquery();\r\n      assert.equal(m._collection, null);\r\n      m.setOptions({ collection: col });\r\n      assert.equal(m._collection.collection, col);\r\n    });\r\n    it('directly sets option when no method exists', function() {\r\n      const m = mquery();\r\n      assert.equal(m.options.woot, null);\r\n      m.setOptions({ woot: 'yay' });\r\n      assert.equal(m.options.woot, 'yay');\r\n    });\r\n    it('is chainable', function() {\r\n      const m = mquery();\r\n      let n;\r\n\r\n      n = m.setOptions();\r\n      assert.equal(m, n);\r\n      n = m.setOptions({ x: 1 });\r\n      assert.equal(m, n);\r\n    });\r\n  });\r\n\r\n  describe('collection', function() {\r\n    it('sets the _collection', function() {\r\n      const m = mquery();\r\n      m.collection(col);\r\n      assert.equal(m._collection.collection, col);\r\n    });\r\n    it('is chainable', function() {\r\n      const m = mquery();\r\n      const n = m.collection(col);\r\n      assert.equal(m, n);\r\n    });\r\n  });\r\n\r\n  describe('$where', function() {\r\n    it('sets the $where condition', function() {\r\n      const m = mquery();\r\n      function go() {}\r\n      m.$where(go);\r\n      assert.ok(go === m._conditions.$where);\r\n    });\r\n    it('is chainable', function() {\r\n      const m = mquery();\r\n      const n = m.$where('x');\r\n      assert.equal(m, n);\r\n    });\r\n  });\r\n\r\n  describe('where', function() {\r\n    it('without arguments', function() {\r\n      const m = mquery();\r\n      m.where();\r\n      assert.deepEqual({}, m._conditions);\r\n    });\r\n    it('with non-string/object argument', function() {\r\n      const m = mquery();\r\n\r\n      assert.throws(function() {\r\n        m.where([]);\r\n      }, /path must be a string or object/);\r\n    });\r\n    describe('with one argument', function() {\r\n      it('that is an object', function() {\r\n        const m = mquery();\r\n        m.where({ name: 'flawed' });\r\n        assert.strictEqual(m._conditions.name, 'flawed');\r\n      });\r\n      it('that is a query', function() {\r\n        const m = mquery({ name: 'first' });\r\n        const n = mquery({ name: 'changed' });\r\n        m.where(n);\r\n        assert.strictEqual(m._conditions.name, 'changed');\r\n      });\r\n      it('that is a string', function() {\r\n        const m = mquery();\r\n        m.where('name');\r\n        assert.equal('name', m._path);\r\n        assert.strictEqual(m._conditions.name, undefined);\r\n      });\r\n    });\r\n    it('with two arguments', function() {\r\n      const m = mquery();\r\n      m.where('name', 'The Great Pumpkin');\r\n      assert.equal('name', m._path);\r\n      assert.strictEqual(m._conditions.name, 'The Great Pumpkin');\r\n    });\r\n    it('is chainable', function() {\r\n      const m = mquery();\r\n\r\n      let n = m.where('x', 'y');\r\n      assert.equal(m, n);\r\n      n = m.where();\r\n      assert.equal(m, n);\r\n    });\r\n  });\r\n  describe('equals', function() {\r\n    it('must be called after where()', function() {\r\n      const m = mquery();\r\n      assert.throws(function() {\r\n        m.equals();\r\n      }, /must be used after where/);\r\n    });\r\n    it('sets value of path set with where()', function() {\r\n      const m = mquery();\r\n      m.where('age').equals(1000);\r\n      assert.deepEqual({ age: 1000 }, m._conditions);\r\n    });\r\n    it('is chainable', function() {\r\n      const m = mquery();\r\n      const n = m.where('x').equals(3);\r\n      assert.equal(m, n);\r\n    });\r\n  });\r\n  describe('eq', function() {\r\n    it('is alias of equals', function() {\r\n      const m = mquery();\r\n      m.where('age').eq(1000);\r\n      assert.deepEqual({ age: 1000 }, m._conditions);\r\n    });\r\n  });\r\n  describe('or', function() {\r\n    it('pushes onto the internal $or condition', function() {\r\n      const m = mquery();\r\n      m.or({ 'Nightmare Before Christmas': true });\r\n      assert.deepEqual([{ 'Nightmare Before Christmas': true }], m._conditions.$or);\r\n    });\r\n    it('allows passing arrays', function() {\r\n      const m = mquery();\r\n      const arg = [{ 'Nightmare Before Christmas': true }, { x: 1 }];\r\n      m.or(arg);\r\n      assert.deepEqual(arg, m._conditions.$or);\r\n    });\r\n    it('allows calling multiple times', function() {\r\n      const m = mquery();\r\n      const arg = [{ looper: true }, { x: 1 }];\r\n      m.or(arg);\r\n      m.or({ y: 1 });\r\n      m.or([{ w: 'oo' }, { z: 'oo' }]);\r\n      assert.deepEqual([{ looper: true }, { x: 1 }, { y: 1 }, { w: 'oo' }, { z: 'oo' }], m._conditions.$or);\r\n    });\r\n    it('is chainable', function() {\r\n      const m = mquery();\r\n      m.or({ o: 'k' }).where('name', 'table');\r\n      assert.deepEqual({ name: 'table', $or: [{ o: 'k' }] }, m._conditions);\r\n    });\r\n  });\r\n\r\n  describe('nor', function() {\r\n    it('pushes onto the internal $nor condition', function() {\r\n      const m = mquery();\r\n      m.nor({ 'Nightmare Before Christmas': true });\r\n      assert.deepEqual([{ 'Nightmare Before Christmas': true }], m._conditions.$nor);\r\n    });\r\n    it('allows passing arrays', function() {\r\n      const m = mquery();\r\n      const arg = [{ 'Nightmare Before Christmas': true }, { x: 1 }];\r\n      m.nor(arg);\r\n      assert.deepEqual(arg, m._conditions.$nor);\r\n    });\r\n    it('allows calling multiple times', function() {\r\n      const m = mquery();\r\n      const arg = [{ looper: true }, { x: 1 }];\r\n      m.nor(arg);\r\n      m.nor({ y: 1 });\r\n      m.nor([{ w: 'oo' }, { z: 'oo' }]);\r\n      assert.deepEqual([{ looper: true }, { x: 1 }, { y: 1 }, { w: 'oo' }, { z: 'oo' }], m._conditions.$nor);\r\n    });\r\n    it('is chainable', function() {\r\n      const m = mquery();\r\n      m.nor({ o: 'k' }).where('name', 'table');\r\n      assert.deepEqual({ name: 'table', $nor: [{ o: 'k' }] }, m._conditions);\r\n    });\r\n  });\r\n\r\n  describe('and', function() {\r\n    it('pushes onto the internal $and condition', function() {\r\n      const m = mquery();\r\n      m.and({ 'Nightmare Before Christmas': true });\r\n      assert.deepEqual([{ 'Nightmare Before Christmas': true }], m._conditions.$and);\r\n    });\r\n    it('allows passing arrays', function() {\r\n      const m = mquery();\r\n      const arg = [{ 'Nightmare Before Christmas': true }, { x: 1 }];\r\n      m.and(arg);\r\n      assert.deepEqual(arg, m._conditions.$and);\r\n    });\r\n    it('allows calling multiple times', function() {\r\n      const m = mquery();\r\n      const arg = [{ looper: true }, { x: 1 }];\r\n      m.and(arg);\r\n      m.and({ y: 1 });\r\n      m.and([{ w: 'oo' }, { z: 'oo' }]);\r\n      assert.deepEqual([{ looper: true }, { x: 1 }, { y: 1 }, { w: 'oo' }, { z: 'oo' }], m._conditions.$and);\r\n    });\r\n    it('is chainable', function() {\r\n      const m = mquery();\r\n      m.and({ o: 'k' }).where('name', 'table');\r\n      assert.deepEqual({ name: 'table', $and: [{ o: 'k' }] }, m._conditions);\r\n    });\r\n  });\r\n\r\n  function generalCondition(type) {\r\n    return function() {\r\n      it('accepts 2 args', function() {\r\n        const m = mquery()[type]('count', 3);\r\n        const check = {};\r\n        check['$' + type] = 3;\r\n        assert.deepEqual(m._conditions.count, check);\r\n      });\r\n      it('uses previously set `where` path if 1 arg passed', function() {\r\n        const m = mquery().where('count')[type](3);\r\n        const check = {};\r\n        check['$' + type] = 3;\r\n        assert.deepEqual(m._conditions.count, check);\r\n      });\r\n      it('throws if 1 arg was passed but no previous `where` was used', function() {\r\n        assert.throws(function() {\r\n          mquery()[type](3);\r\n        }, /must be used after where/);\r\n      });\r\n      it('is chainable', function() {\r\n        const m = mquery().where('count')[type](3).where('x', 8);\r\n        const check = { x: 8, count: {} };\r\n        check.count['$' + type] = 3;\r\n        assert.deepEqual(m._conditions, check);\r\n      });\r\n      it('overwrites previous value', function() {\r\n        const m = mquery().where('count')[type](3)[type](8);\r\n        const check = {};\r\n        check['$' + type] = 8;\r\n        assert.deepEqual(m._conditions.count, check);\r\n      });\r\n    };\r\n  }\r\n\r\n  'gt gte lt lte ne in nin regex size maxDistance minDistance'.split(' ').forEach(function(type) {\r\n    describe(type, generalCondition(type));\r\n  });\r\n\r\n  describe('mod', function() {\r\n    describe('with 1 argument', function() {\r\n      it('requires a previous where()', function() {\r\n        assert.throws(function() {\r\n          mquery().mod([30, 10]);\r\n        }, /must be used after where/);\r\n      });\r\n      it('works', function() {\r\n        const m = mquery().where('madmen').mod([10, 20]);\r\n        assert.deepEqual(m._conditions, { madmen: { $mod: [10, 20] } });\r\n      });\r\n    });\r\n\r\n    describe('with 2 arguments and second is non-Array', function() {\r\n      it('requires a previous where()', function() {\r\n        assert.throws(function() {\r\n          mquery().mod('x', 10);\r\n        }, /must be used after where/);\r\n      });\r\n      it('works', function() {\r\n        const m = mquery().where('madmen').mod(10, 20);\r\n        assert.deepEqual(m._conditions, { madmen: { $mod: [10, 20] } });\r\n      });\r\n    });\r\n\r\n    it('with 2 arguments and second is an array', function() {\r\n      const m = mquery().mod('madmen', [10, 20]);\r\n      assert.deepEqual(m._conditions, { madmen: { $mod: [10, 20] } });\r\n    });\r\n\r\n    it('with 3 arguments', function() {\r\n      const m = mquery().mod('madmen', 10, 20);\r\n      assert.deepEqual(m._conditions, { madmen: { $mod: [10, 20] } });\r\n    });\r\n\r\n    it('is chainable', function() {\r\n      const m = mquery().mod('madmen', 10, 20).where('x', 8);\r\n      const check = { madmen: { $mod: [10, 20] }, x: 8 };\r\n      assert.deepEqual(m._conditions, check);\r\n    });\r\n  });\r\n\r\n  describe('exists', function() {\r\n    it('with 0 args', function() {\r\n      it('throws if not used after where()', function() {\r\n        assert.throws(function() {\r\n          mquery().exists();\r\n        }, /must be used after where/);\r\n      });\r\n      it('works', function() {\r\n        const m = mquery().where('name').exists();\r\n        const check = { name: { $exists: true } };\r\n        assert.deepEqual(m._conditions, check);\r\n      });\r\n    });\r\n\r\n    describe('with 1 arg', function() {\r\n      describe('that is boolean', function() {\r\n        it('throws if not used after where()', function() {\r\n          assert.throws(function() {\r\n            mquery().exists();\r\n          }, /must be used after where/);\r\n        });\r\n        it('works', function() {\r\n          const m = mquery().exists('name', false);\r\n          const check = { name: { $exists: false } };\r\n          assert.deepEqual(m._conditions, check);\r\n        });\r\n      });\r\n      describe('that is not boolean', function() {\r\n        it('sets the value to `true`', function() {\r\n          const m = mquery().where('name').exists('yummy');\r\n          const check = { yummy: { $exists: true } };\r\n          assert.deepEqual(m._conditions, check);\r\n        });\r\n      });\r\n    });\r\n\r\n    describe('with 2 args', function() {\r\n      it('works', function() {\r\n        const m = mquery().exists('yummy', false);\r\n        const check = { yummy: { $exists: false } };\r\n        assert.deepEqual(m._conditions, check);\r\n      });\r\n    });\r\n\r\n    it('is chainable', function() {\r\n      const m = mquery().where('name').exists().find({ x: 1 });\r\n      const check = { name: { $exists: true }, x: 1 };\r\n      assert.deepEqual(m._conditions, check);\r\n    });\r\n  });\r\n\r\n  describe('elemMatch', function() {\r\n    describe('with null/undefined first argument', function() {\r\n      assert.throws(function() {\r\n        mquery().elemMatch();\r\n      }, /Invalid argument/);\r\n      assert.throws(function() {\r\n        mquery().elemMatch(null);\r\n      }, /Invalid argument/);\r\n      assert.doesNotThrow(function() {\r\n        mquery().elemMatch('', {});\r\n      });\r\n    });\r\n\r\n    describe('with 1 argument', function() {\r\n      it('throws if not a function or object', function() {\r\n        assert.throws(function() {\r\n          mquery().elemMatch([]);\r\n        }, /Invalid argument/);\r\n      });\r\n\r\n      describe('that is an object', function() {\r\n        it('throws if no previous `where` was used', function() {\r\n          assert.throws(function() {\r\n            mquery().elemMatch({});\r\n          }, /must be used after where/);\r\n        });\r\n        it('works', function() {\r\n          const m = mquery().where('comment').elemMatch({ author: 'joe', votes: { $gte: 3 } });\r\n          assert.deepEqual({ comment: { $elemMatch: { author: 'joe', votes: { $gte: 3 } } } }, m._conditions);\r\n        });\r\n      });\r\n      describe('that is a function', function() {\r\n        it('throws if no previous `where` was used', function() {\r\n          assert.throws(function() {\r\n            mquery().elemMatch(function() {});\r\n          }, /must be used after where/);\r\n        });\r\n        it('works', function() {\r\n          const m = mquery().where('comment').elemMatch(function(query) {\r\n            query.where({ author: 'joe', votes: { $gte: 3 } });\r\n          });\r\n          assert.deepEqual({ comment: { $elemMatch: { author: 'joe', votes: { $gte: 3 } } } }, m._conditions);\r\n        });\r\n      });\r\n    });\r\n\r\n    describe('with 2 arguments', function() {\r\n      describe('and the 2nd is an object', function() {\r\n        it('works', function() {\r\n          const m = mquery().elemMatch('comment', { author: 'joe', votes: { $gte: 3 } });\r\n          assert.deepEqual({ comment: { $elemMatch: { author: 'joe', votes: { $gte: 3 } } } }, m._conditions);\r\n        });\r\n      });\r\n      describe('and the 2nd is a function', function() {\r\n        it('works', function() {\r\n          const m = mquery().elemMatch('comment', function(query) {\r\n            query.where({ author: 'joe', votes: { $gte: 3 } });\r\n          });\r\n          assert.deepEqual({ comment: { $elemMatch: { author: 'joe', votes: { $gte: 3 } } } }, m._conditions);\r\n        });\r\n      });\r\n      it('and the 2nd is not a function or object', function() {\r\n        assert.throws(function() {\r\n          mquery().elemMatch('comment', []);\r\n        }, /Invalid argument/);\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('within', function() {\r\n    it('is chainable', function() {\r\n      const m = mquery();\r\n      assert.equal(m.where('a').within(), m);\r\n    });\r\n    describe('when called with arguments', function() {\r\n      it('must follow where()', function() {\r\n        assert.throws(function() {\r\n          mquery().within([]);\r\n        }, /must be used after where/);\r\n      });\r\n\r\n      describe('of length 1', function() {\r\n        it('throws if not a recognized shape', function() {\r\n          assert.throws(function() {\r\n            mquery().where('loc').within({});\r\n          }, /Invalid argument/);\r\n          assert.throws(function() {\r\n            mquery().where('loc').within(null);\r\n          }, /Invalid argument/);\r\n        });\r\n        it('delegates to circle when center exists', function() {\r\n          const m = mquery().where('loc').within({ center: [10, 10], radius: 3 });\r\n          assert.deepEqual({ $geoWithin: { $center: [[10, 10], 3] } }, m._conditions.loc);\r\n        });\r\n        it('delegates to box when exists', function() {\r\n          const m = mquery().where('loc').within({ box: [[10, 10], [11, 14]] });\r\n          assert.deepEqual({ $geoWithin: { $box: [[10, 10], [11, 14]] } }, m._conditions.loc);\r\n        });\r\n        it('delegates to polygon when exists', function() {\r\n          const m = mquery().where('loc').within({ polygon: [[10, 10], [11, 14], [10, 9]] });\r\n          assert.deepEqual({ $geoWithin: { $polygon: [[10, 10], [11, 14], [10, 9]] } }, m._conditions.loc);\r\n        });\r\n        it('delegates to geometry when exists', function() {\r\n          const m = mquery().where('loc').within({ type: 'Polygon', coordinates: [[10, 10], [11, 14], [10, 9]] });\r\n          assert.deepEqual({ $geoWithin: { $geometry: { type: 'Polygon', coordinates: [[10, 10], [11, 14], [10, 9]] } } }, m._conditions.loc);\r\n        });\r\n      });\r\n\r\n      describe('of length 2', function() {\r\n        it('delegates to box()', function() {\r\n          const m = mquery().where('loc').within([1, 2], [2, 5]);\r\n          assert.deepEqual(m._conditions.loc, { $geoWithin: { $box: [[1, 2], [2, 5]] } });\r\n        });\r\n      });\r\n\r\n      describe('of length > 2', function() {\r\n        it('delegates to polygon()', function() {\r\n          const m = mquery().where('loc').within([1, 2], [2, 5], [2, 4], [1, 3]);\r\n          assert.deepEqual(m._conditions.loc, { $geoWithin: { $polygon: [[1, 2], [2, 5], [2, 4], [1, 3]] } });\r\n        });\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('geoWithin', function() {\r\n    before(function() {\r\n      mquery.use$geoWithin = false;\r\n    });\r\n    after(function() {\r\n      mquery.use$geoWithin = true;\r\n    });\r\n    describe('when called with arguments', function() {\r\n      describe('of length 1', function() {\r\n        it('delegates to circle when center exists', function() {\r\n          const m = mquery().where('loc').within({ center: [10, 10], radius: 3 });\r\n          assert.deepEqual({ $within: { $center: [[10, 10], 3] } }, m._conditions.loc);\r\n        });\r\n        it('delegates to box when exists', function() {\r\n          const m = mquery().where('loc').within({ box: [[10, 10], [11, 14]] });\r\n          assert.deepEqual({ $within: { $box: [[10, 10], [11, 14]] } }, m._conditions.loc);\r\n        });\r\n        it('delegates to polygon when exists', function() {\r\n          const m = mquery().where('loc').within({ polygon: [[10, 10], [11, 14], [10, 9]] });\r\n          assert.deepEqual({ $within: { $polygon: [[10, 10], [11, 14], [10, 9]] } }, m._conditions.loc);\r\n        });\r\n        it('delegates to geometry when exists', function() {\r\n          const m = mquery().where('loc').within({ type: 'Polygon', coordinates: [[10, 10], [11, 14], [10, 9]] });\r\n          assert.deepEqual({ $within: { $geometry: { type: 'Polygon', coordinates: [[10, 10], [11, 14], [10, 9]] } } }, m._conditions.loc);\r\n        });\r\n      });\r\n\r\n      describe('of length 2', function() {\r\n        it('delegates to box()', function() {\r\n          const m = mquery().where('loc').within([1, 2], [2, 5]);\r\n          assert.deepEqual(m._conditions.loc, { $within: { $box: [[1, 2], [2, 5]] } });\r\n        });\r\n      });\r\n\r\n      describe('of length > 2', function() {\r\n        it('delegates to polygon()', function() {\r\n          const m = mquery().where('loc').within([1, 2], [2, 5], [2, 4], [1, 3]);\r\n          assert.deepEqual(m._conditions.loc, { $within: { $polygon: [[1, 2], [2, 5], [2, 4], [1, 3]] } });\r\n        });\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('box', function() {\r\n    describe('with 1 argument', function() {\r\n      it('throws', function() {\r\n        assert.throws(function() {\r\n          mquery().box('sometihng');\r\n        }, /Invalid argument/);\r\n      });\r\n    });\r\n    describe('with > 3 arguments', function() {\r\n      it('throws', function() {\r\n        assert.throws(function() {\r\n          mquery().box(1, 2, 3, 4);\r\n        }, /Invalid argument/);\r\n      });\r\n    });\r\n\r\n    describe('with 2 arguments', function() {\r\n      it('throws if not used after where()', function() {\r\n        assert.throws(function() {\r\n          mquery().box([], []);\r\n        }, /must be used after where/);\r\n      });\r\n      it('works', function() {\r\n        const m = mquery().where('loc').box([1, 2], [3, 4]);\r\n        assert.deepEqual(m._conditions.loc, { $geoWithin: { $box: [[1, 2], [3, 4]] } });\r\n      });\r\n    });\r\n\r\n    describe('with 3 arguments', function() {\r\n      it('works', function() {\r\n        const m = mquery().box('loc', [1, 2], [3, 4]);\r\n        assert.deepEqual(m._conditions.loc, { $geoWithin: { $box: [[1, 2], [3, 4]] } });\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('polygon', function() {\r\n    describe('when first argument is not a string', function() {\r\n      it('throws if not used after where()', function() {\r\n        assert.throws(function() {\r\n          mquery().polygon({});\r\n        }, /must be used after where/);\r\n\r\n        assert.doesNotThrow(function() {\r\n          mquery().where('loc').polygon([1, 2], [2, 3], [3, 6]);\r\n        });\r\n      });\r\n\r\n      it('assigns arguments to within polygon condition', function() {\r\n        const m = mquery().where('loc').polygon([1, 2], [2, 3], [3, 6]);\r\n        assert.deepEqual(m._conditions, { loc: { $geoWithin: { $polygon: [[1, 2], [2, 3], [3, 6]] } } });\r\n      });\r\n    });\r\n\r\n    describe('when first arg is a string', function() {\r\n      it('assigns remaining arguments to within polygon condition', function() {\r\n        const m = mquery().polygon('loc', [1, 2], [2, 3], [3, 6]);\r\n        assert.deepEqual(m._conditions, { loc: { $geoWithin: { $polygon: [[1, 2], [2, 3], [3, 6]] } } });\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('circle', function() {\r\n    describe('with one arg', function() {\r\n      it('must follow where()', function() {\r\n        assert.throws(function() {\r\n          mquery().circle('x');\r\n        }, /must be used after where/);\r\n        assert.doesNotThrow(function() {\r\n          mquery().where('loc').circle({ center: [0, 0], radius: 3 });\r\n        });\r\n      });\r\n      it('works', function() {\r\n        const m = mquery().where('loc').circle({ center: [0, 0], radius: 3 });\r\n        assert.deepEqual(m._conditions, { loc: { $geoWithin: { $center: [[0, 0], 3] } } });\r\n      });\r\n    });\r\n    describe('with 3 args', function() {\r\n      it('throws', function() {\r\n        assert.throws(function() {\r\n          mquery().where('loc').circle(1, 2, 3);\r\n        }, /Invalid argument/);\r\n      });\r\n    });\r\n    describe('requires radius and center', function() {\r\n      assert.throws(function() {\r\n        mquery().circle('loc', { center: 1 });\r\n      }, /center and radius are required/);\r\n      assert.throws(function() {\r\n        mquery().circle('loc', { radius: 1 });\r\n      }, /center and radius are required/);\r\n      assert.doesNotThrow(function() {\r\n        mquery().circle('loc', { center: [1, 2], radius: 1 });\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('geometry', function() {\r\n    // within + intersects\r\n    const point = { type: 'Point', coordinates: [[0, 0], [1, 1]] };\r\n\r\n    it('must be called after within or intersects', function(done) {\r\n      assert.throws(function() {\r\n        mquery().where('a').geometry(point);\r\n      }, /must come after/);\r\n\r\n      assert.doesNotThrow(function() {\r\n        mquery().where('a').within().geometry(point);\r\n      });\r\n\r\n      assert.doesNotThrow(function() {\r\n        mquery().where('a').intersects().geometry(point);\r\n      });\r\n\r\n      done();\r\n    });\r\n\r\n    describe('when called with one argument', function() {\r\n      describe('after within()', function() {\r\n        it('and arg quacks like geoJSON', function(done) {\r\n          const m = mquery().where('a').within().geometry(point);\r\n          assert.deepEqual({ a: { $geoWithin: { $geometry: point } } }, m._conditions);\r\n          done();\r\n        });\r\n      });\r\n\r\n      describe('after intersects()', function() {\r\n        it('and arg quacks like geoJSON', function(done) {\r\n          const m = mquery().where('a').intersects().geometry(point);\r\n          assert.deepEqual({ a: { $geoIntersects: { $geometry: point } } }, m._conditions);\r\n          done();\r\n        });\r\n      });\r\n\r\n      it('and arg does not quack like geoJSON', function(done) {\r\n        assert.throws(function() {\r\n          mquery().where('b').within().geometry({ type: 1, coordinates: 2 });\r\n        }, /Invalid argument/);\r\n        done();\r\n      });\r\n    });\r\n\r\n    describe('when called with zero arguments', function() {\r\n      it('throws', function(done) {\r\n        assert.throws(function() {\r\n          mquery().where('a').within().geometry();\r\n        }, /Invalid argument/);\r\n\r\n        done();\r\n      });\r\n    });\r\n\r\n    describe('when called with more than one arguments', function() {\r\n      it('throws', function(done) {\r\n        assert.throws(function() {\r\n          mquery().where('a').within().geometry({ type: 'a', coordinates: [] }, 2);\r\n        }, /Invalid argument/);\r\n        done();\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('intersects', function() {\r\n    it('must be used after where()', function(done) {\r\n      const m = mquery();\r\n      assert.throws(function() {\r\n        m.intersects();\r\n      }, /must be used after where/);\r\n      done();\r\n    });\r\n\r\n    it('sets geo comparison to \"$intersects\"', function(done) {\r\n      const n = mquery().where('a').intersects();\r\n      assert.equal('$geoIntersects', n._geoComparison);\r\n      done();\r\n    });\r\n\r\n    it('is chainable', function() {\r\n      const m = mquery();\r\n      assert.equal(m.where('a').intersects(), m);\r\n    });\r\n\r\n    it('calls geometry if argument quacks like geojson', function(done) {\r\n      const m = mquery();\r\n      const o = { type: 'LineString', coordinates: [[0, 1], [3, 40]] };\r\n      let ran = false;\r\n\r\n      m.geometry = function(arg) {\r\n        ran = true;\r\n        assert.deepEqual(o, arg);\r\n      };\r\n\r\n      m.where('a').intersects(o);\r\n      assert.ok(ran);\r\n\r\n      done();\r\n    });\r\n\r\n    it('throws if argument is not geometry-like', function(done) {\r\n      const m = mquery().where('a');\r\n\r\n      assert.throws(function() {\r\n        m.intersects(null);\r\n      }, /Invalid argument/);\r\n\r\n      assert.throws(function() {\r\n        m.intersects(undefined);\r\n      }, /Invalid argument/);\r\n\r\n      assert.throws(function() {\r\n        m.intersects(false);\r\n      }, /Invalid argument/);\r\n\r\n      assert.throws(function() {\r\n        m.intersects({});\r\n      }, /Invalid argument/);\r\n\r\n      assert.throws(function() {\r\n        m.intersects([]);\r\n      }, /Invalid argument/);\r\n\r\n      assert.throws(function() {\r\n        m.intersects(function() {});\r\n      }, /Invalid argument/);\r\n\r\n      assert.throws(function() {\r\n        m.intersects(NaN);\r\n      }, /Invalid argument/);\r\n\r\n      done();\r\n    });\r\n  });\r\n\r\n  describe('near', function() {\r\n    // near nearSphere\r\n    describe('with 0 args', function() {\r\n      it('is compatible with geometry()', function(done) {\r\n        const q = mquery().where('x').near().geometry({ type: 'Point', coordinates: [180, 11] });\r\n        assert.deepEqual({ $near: { $geometry: { type: 'Point', coordinates: [180, 11] } } }, q._conditions.x);\r\n        done();\r\n      });\r\n    });\r\n\r\n    describe('with 1 arg', function() {\r\n      it('throws if not used after where()', function() {\r\n        assert.throws(function() {\r\n          mquery().near(1);\r\n        }, /must be used after where/);\r\n      });\r\n      it('does not throw if used after where()', function() {\r\n        assert.doesNotThrow(function() {\r\n          mquery().where('loc').near({ center: [1, 1] });\r\n        });\r\n      });\r\n    });\r\n    describe('with > 2 args', function() {\r\n      it('throws', function() {\r\n        assert.throws(function() {\r\n          mquery().near(1, 2, 3);\r\n        }, /Invalid argument/);\r\n      });\r\n    });\r\n\r\n    it('creates $geometry args for GeoJSON', function() {\r\n      const m = mquery().where('loc').near({ center: { type: 'Point', coordinates: [10, 10] } });\r\n      assert.deepEqual({ $near: { $geometry: { type: 'Point', coordinates: [10, 10] } } }, m._conditions.loc);\r\n    });\r\n\r\n    it('expects `center`', function() {\r\n      assert.throws(function() {\r\n        mquery().near('loc', { maxDistance: 3 });\r\n      }, /center is required/);\r\n      assert.doesNotThrow(function() {\r\n        mquery().near('loc', { center: [3, 4] });\r\n      });\r\n    });\r\n\r\n    it('accepts spherical conditions', function() {\r\n      const m = mquery().where('loc').near({ center: [1, 2], spherical: true });\r\n      assert.deepEqual(m._conditions, { loc: { $nearSphere: [1, 2] } });\r\n    });\r\n\r\n    it('is non-spherical by default', function() {\r\n      const m = mquery().where('loc').near({ center: [1, 2] });\r\n      assert.deepEqual(m._conditions, { loc: { $near: [1, 2] } });\r\n    });\r\n\r\n    it('supports maxDistance', function() {\r\n      const m = mquery().where('loc').near({ center: [1, 2], maxDistance: 4 });\r\n      assert.deepEqual(m._conditions, { loc: { $near: [1, 2], $maxDistance: 4 } });\r\n    });\r\n\r\n    it('supports minDistance', function() {\r\n      const m = mquery().where('loc').near({ center: [1, 2], minDistance: 4 });\r\n      assert.deepEqual(m._conditions, { loc: { $near: [1, 2], $minDistance: 4 } });\r\n    });\r\n\r\n    it('is chainable', function() {\r\n      const m = mquery().where('loc').near({ center: [1, 2], maxDistance: 4 }).find({ x: 1 });\r\n      assert.deepEqual(m._conditions, { loc: { $near: [1, 2], $maxDistance: 4 }, x: 1 });\r\n    });\r\n\r\n    describe('supports passing GeoJSON, gh-13', function() {\r\n      it('with center', function() {\r\n        const m = mquery().where('loc').near({\r\n          center: { type: 'Point', coordinates: [1, 1] },\r\n          maxDistance: 2\r\n        });\r\n\r\n        const expect = {\r\n          loc: {\r\n            $near: {\r\n              $geometry: {\r\n                type: 'Point',\r\n                coordinates: [1, 1]\r\n              },\r\n              $maxDistance: 2\r\n            }\r\n          }\r\n        };\r\n\r\n        assert.deepEqual(m._conditions, expect);\r\n      });\r\n    });\r\n  });\r\n\r\n  // fields\r\n\r\n  describe('select', function() {\r\n    describe('with 0 args', function() {\r\n      it('is chainable', function() {\r\n        const m = mquery();\r\n        assert.equal(m, m.select());\r\n      });\r\n    });\r\n\r\n    it('accepts an object', function() {\r\n      const o = { x: 1, y: 1 };\r\n      const m = mquery().select(o);\r\n      assert.deepEqual(m._fields, o);\r\n    });\r\n\r\n    it('accepts a string', function() {\r\n      const o = 'x -y';\r\n      const m = mquery().select(o);\r\n      assert.deepEqual(m._fields, { x: 1, y: 0 });\r\n    });\r\n\r\n    it('does accept an array', function() {\r\n      const o = ['x', '-y'];\r\n      const m = mquery().select(o);\r\n      assert.deepEqual(m._fields, { x: 1, y: 0 });\r\n    });\r\n\r\n    it('merges previous arguments', function() {\r\n      const o = { x: 1, y: 0, a: 1 };\r\n      const m = mquery().select(o);\r\n      m.select('z -u w').select({ x: 0 });\r\n      assert.deepEqual(m._fields, {\r\n        x: 0,\r\n        y: 0,\r\n        z: 1,\r\n        u: 0,\r\n        w: 1,\r\n        a: 1\r\n      });\r\n    });\r\n\r\n    it('rejects non-string, object, arrays', function() {\r\n      assert.throws(function() {\r\n        mquery().select(function() {});\r\n      }, /Invalid select\\(\\) argument/);\r\n    });\r\n\r\n    it('accepts arguments objects', function() {\r\n      const m = mquery();\r\n      function t() {\r\n        m.select(arguments);\r\n        assert.deepEqual(m._fields, { x: 1, y: 0 });\r\n      }\r\n      t('x', '-y');\r\n    });\r\n\r\n    noDistinct('select');\r\n  });\r\n\r\n  describe('selected', function() {\r\n    it('returns true when fields have been selected', function(done) {\r\n      let m;\r\n\r\n      m = mquery().select({ name: 1 });\r\n      assert.ok(m.selected());\r\n\r\n      m = mquery().select('name');\r\n      assert.ok(m.selected());\r\n\r\n      done();\r\n    });\r\n\r\n    it('returns false when no fields have been selected', function(done) {\r\n      const m = mquery();\r\n      assert.strictEqual(false, m.selected());\r\n      done();\r\n    });\r\n  });\r\n\r\n  describe('selectedInclusively', function() {\r\n    describe('returns false', function() {\r\n      it('when no fields have been selected', function(done) {\r\n        assert.strictEqual(false, mquery().selectedInclusively());\r\n        assert.equal(false, mquery().select({}).selectedInclusively());\r\n        done();\r\n      });\r\n      it('when any fields have been excluded', function(done) {\r\n        assert.strictEqual(false, mquery().select('-name').selectedInclusively());\r\n        assert.strictEqual(false, mquery().select({ name: 0 }).selectedInclusively());\r\n        assert.strictEqual(false, mquery().select('name bio -_id').selectedInclusively());\r\n        assert.strictEqual(false, mquery().select({ name: 1, _id: 0 }).selectedInclusively());\r\n        done();\r\n      });\r\n      it('when using $meta', function(done) {\r\n        assert.strictEqual(false, mquery().select({ name: { $meta: 'textScore' } }).selectedInclusively());\r\n        done();\r\n      });\r\n    });\r\n\r\n    describe('returns true', function() {\r\n      it('when fields have been included', function(done) {\r\n        assert.equal(true, mquery().select('name').selectedInclusively());\r\n        assert.equal(true, mquery().select({ name: 1 }).selectedInclusively());\r\n        done();\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('selectedExclusively', function() {\r\n    describe('returns false', function() {\r\n      it('when no fields have been selected', function(done) {\r\n        assert.equal(false, mquery().selectedExclusively());\r\n        assert.equal(false, mquery().select({}).selectedExclusively());\r\n        done();\r\n      });\r\n      it('when fields have only been included', function(done) {\r\n        assert.equal(false, mquery().select('name').selectedExclusively());\r\n        assert.equal(false, mquery().select({ name: 1 }).selectedExclusively());\r\n        done();\r\n      });\r\n    });\r\n\r\n    describe('returns true', function() {\r\n      it('when any field has been excluded', function(done) {\r\n        assert.equal(true, mquery().select('-name').selectedExclusively());\r\n        assert.equal(true, mquery().select({ name: 0 }).selectedExclusively());\r\n        assert.equal(true, mquery().select('-_id').selectedExclusively());\r\n        assert.strictEqual(true, mquery().select('name bio -_id').selectedExclusively());\r\n        assert.strictEqual(true, mquery().select({ name: 1, _id: 0 }).selectedExclusively());\r\n        done();\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('slice', function() {\r\n    describe('with 0 args', function() {\r\n      it('is chainable', function() {\r\n        const m = mquery();\r\n        assert.equal(m, m.slice());\r\n      });\r\n      it('is a noop', function() {\r\n        const m = mquery().slice();\r\n        assert.deepEqual(m._fields, undefined);\r\n      });\r\n    });\r\n\r\n    describe('with 1 arg', function() {\r\n      it('throws if not called after where()', function() {\r\n        assert.throws(function() {\r\n          mquery().slice(1);\r\n        }, /must be used after where/);\r\n        assert.doesNotThrow(function() {\r\n          mquery().where('a').slice(1);\r\n        });\r\n      });\r\n      it('that is a number', function() {\r\n        const query = mquery();\r\n        query.where('collection').slice(5);\r\n        assert.deepEqual(query._fields, { collection: { $slice: 5 } });\r\n      });\r\n      it('that is an array', function() {\r\n        const query = mquery();\r\n        query.where('collection').slice([5, 10]);\r\n        assert.deepEqual(query._fields, { collection: { $slice: [5, 10] } });\r\n      });\r\n      it('that is an object', function() {\r\n        const query = mquery();\r\n        query.slice({ collection: [5, 10] });\r\n        assert.deepEqual(query._fields, { collection: { $slice: [5, 10] } });\r\n      });\r\n    });\r\n\r\n    describe('with 2 args', function() {\r\n      describe('and first is a number', function() {\r\n        it('throws if not called after where', function() {\r\n          assert.throws(function() {\r\n            mquery().slice(2, 3);\r\n          }, /must be used after where/);\r\n        });\r\n        it('does not throw if used after where', function() {\r\n          const query = mquery();\r\n          query.where('collection').slice(2, 3);\r\n          assert.deepEqual(query._fields, { collection: { $slice: [2, 3] } });\r\n        });\r\n      });\r\n      it('and first is not a number', function() {\r\n        const query = mquery().slice('collection', [-5, 2]);\r\n        assert.deepEqual(query._fields, { collection: { $slice: [-5, 2] } });\r\n      });\r\n    });\r\n\r\n    describe('with 3 args', function() {\r\n      it('works', function() {\r\n        const query = mquery();\r\n        query.slice('collection', 14, 10);\r\n        assert.deepEqual(query._fields, { collection: { $slice: [14, 10] } });\r\n      });\r\n    });\r\n\r\n    noDistinct('slice');\r\n    no('count', 'slice');\r\n  });\r\n\r\n  // options\r\n\r\n  describe('sort', function() {\r\n    describe('with 0 args', function() {\r\n      it('chains', function() {\r\n        const m = mquery();\r\n        assert.equal(m, m.sort());\r\n      });\r\n      it('has no affect', function() {\r\n        const m = mquery();\r\n        assert.equal(m.options.sort, undefined);\r\n      });\r\n    });\r\n\r\n    it('works', function() {\r\n      let query = mquery();\r\n      query.sort('a -c b');\r\n      assert.deepEqual(query.options.sort, { a: 1, b: 1, c: -1 });\r\n\r\n      query = mquery();\r\n      query.sort({ a: 1, c: -1, b: 'asc', e: 'descending', f: 'ascending' });\r\n      assert.deepEqual(query.options.sort, { a: 1, c: -1, b: 1, e: -1, f: 1 });\r\n\r\n      query = mquery();\r\n      query.sort([['a', -1], ['c', 1], ['b', 'desc'], ['e', 'ascending'], ['f', 'descending']]);\r\n      assert.deepEqual(query.options.sort, [['a', -1], ['c', 1], ['b', -1], ['e', 1], ['f', -1]]);\r\n\r\n      query = mquery();\r\n      let e = undefined;\r\n      try {\r\n        query.sort([['a', 1], { b: 5 }]);\r\n      } catch (err) {\r\n        e = err;\r\n      }\r\n      assert.ok(e, 'uh oh. no error was thrown');\r\n      assert.equal(e.message, 'Invalid sort() argument, must be array of arrays');\r\n\r\n      query = mquery();\r\n      e = undefined;\r\n\r\n      try {\r\n        query.sort('a', 1, 'c', -1, 'b', 1);\r\n      } catch (err) {\r\n        e = err;\r\n      }\r\n      assert.ok(e, 'uh oh. no error was thrown');\r\n      assert.equal(e.message, 'Invalid sort() argument. Must be a string, object, or array.');\r\n    });\r\n\r\n    it('handles $meta sort options', function() {\r\n      const query = mquery();\r\n      query.sort({ score: { $meta: 'textScore' } });\r\n      assert.deepEqual(query.options.sort, { score: { $meta: 'textScore' } });\r\n    });\r\n\r\n    it('array syntax', function() {\r\n      const query = mquery();\r\n      query.sort([['field', 1], ['test', -1]]);\r\n      assert.deepEqual(query.options.sort, [['field', 1], ['test', -1]]);\r\n    });\r\n\r\n    it('throws with mixed array/object syntax', function() {\r\n      const query = mquery();\r\n      assert.throws(function() {\r\n        query.sort({ field: 1 }).sort([['test', -1]]);\r\n      }, /Can't mix sort syntaxes/);\r\n      assert.throws(function() {\r\n        query.sort([['field', 1]]).sort({ test: 1 });\r\n      }, /Can't mix sort syntaxes/);\r\n    });\r\n\r\n    it('works with maps', function() {\r\n      if (typeof Map === 'undefined') {\r\n        return this.skip();\r\n      }\r\n      const query = mquery();\r\n      query.sort(new Map().set('field', 1).set('test', -1));\r\n      assert.deepEqual(query.options.sort, new Map().set('field', 1).set('test', -1));\r\n    });\r\n  });\r\n\r\n  function simpleOption(type, options) {\r\n    describe(type, function() {\r\n      it('sets the ' + type + ' option', function() {\r\n        const m = mquery()[type](2);\r\n        const optionName = options.name || type;\r\n        assert.equal(2, m.options[optionName]);\r\n      });\r\n      it('is chainable', function() {\r\n        const m = mquery();\r\n        assert.equal(m[type](3), m);\r\n      });\r\n\r\n      if (!options.distinct) noDistinct(type);\r\n      if (!options.count) no('count', type);\r\n    });\r\n  }\r\n\r\n  const negated = {\r\n    limit: { distinct: false, count: true },\r\n    skip: { distinct: false, count: true },\r\n    maxScan: { distinct: false, count: false },\r\n    batchSize: { distinct: false, count: false },\r\n    maxTime: { distinct: true, count: true, name: 'maxTimeMS' }\r\n  };\r\n  Object.keys(negated).forEach(function(key) {\r\n    simpleOption(key, negated[key]);\r\n  });\r\n\r\n  describe('snapshot', function() {\r\n    it('works', function() {\r\n      let query;\r\n\r\n      query = mquery();\r\n      query.snapshot();\r\n      assert.equal(true, query.options.snapshot);\r\n\r\n      query = mquery();\r\n      query.snapshot(true);\r\n      assert.equal(true, query.options.snapshot);\r\n\r\n      query = mquery();\r\n      query.snapshot(false);\r\n      assert.equal(false, query.options.snapshot);\r\n    });\r\n    noDistinct('snapshot');\r\n    no('count', 'snapshot');\r\n  });\r\n\r\n  describe('hint', function() {\r\n    it('accepts an object', function() {\r\n      const query2 = mquery();\r\n      query2.hint({ a: 1, b: -1 });\r\n      assert.deepEqual(query2.options.hint, { a: 1, b: -1 });\r\n    });\r\n\r\n    it('accepts a string', function() {\r\n      const query2 = mquery();\r\n      query2.hint('a');\r\n      assert.deepEqual(query2.options.hint, 'a');\r\n    });\r\n\r\n    it('rejects everything else', function() {\r\n      assert.throws(function() {\r\n        mquery().hint(['c']);\r\n      }, /Invalid hint./);\r\n      assert.throws(function() {\r\n        mquery().hint(1);\r\n      }, /Invalid hint./);\r\n    });\r\n\r\n    describe('does not have side affects', function() {\r\n      it('on invalid arg', function() {\r\n        const m = mquery();\r\n        try {\r\n          m.hint(1);\r\n        } catch (err) {\r\n          // ignore\r\n        }\r\n        assert.equal(undefined, m.options.hint);\r\n      });\r\n      it('on missing arg', function() {\r\n        const m = mquery().hint();\r\n        assert.equal(undefined, m.options.hint);\r\n      });\r\n    });\r\n\r\n    noDistinct('hint');\r\n  });\r\n\r\n  describe('j', function() {\r\n    it('works', function() {\r\n      const m = mquery().j(true);\r\n      assert.equal(true, m.options.j);\r\n    });\r\n  });\r\n\r\n  describe('slaveOk', function() {\r\n    it('works', function() {\r\n      let query;\r\n\r\n      query = mquery();\r\n      query.slaveOk();\r\n      assert.equal(true, query.options.slaveOk);\r\n\r\n      query = mquery();\r\n      query.slaveOk(true);\r\n      assert.equal(true, query.options.slaveOk);\r\n\r\n      query = mquery();\r\n      query.slaveOk(false);\r\n      assert.equal(false, query.options.slaveOk);\r\n    });\r\n  });\r\n\r\n  describe('read', function() {\r\n    it('sets associated readPreference option', function() {\r\n      const m = mquery();\r\n      m.read('p');\r\n      assert.equal('primary', m.options.readPreference);\r\n    });\r\n    it('is chainable', function() {\r\n      const m = mquery();\r\n      assert.equal(m, m.read('sp'));\r\n    });\r\n  });\r\n\r\n  describe('readConcern', function() {\r\n    it('sets associated readConcern option', function() {\r\n      let m;\r\n\r\n      m = mquery();\r\n      m.readConcern('s');\r\n      assert.deepEqual({ level: 'snapshot' }, m.options.readConcern);\r\n\r\n      m = mquery();\r\n      m.r('local');\r\n      assert.deepEqual({ level: 'local' }, m.options.readConcern);\r\n    });\r\n    it('is chainable', function() {\r\n      const m = mquery();\r\n      assert.equal(m, m.readConcern('lz'));\r\n    });\r\n  });\r\n\r\n  describe('tailable', function() {\r\n    it('works', function() {\r\n      let query;\r\n\r\n      query = mquery();\r\n      query.tailable();\r\n      assert.equal(true, query.options.tailable);\r\n\r\n      query = mquery();\r\n      query.tailable(true);\r\n      assert.equal(true, query.options.tailable);\r\n\r\n      query = mquery();\r\n      query.tailable(false);\r\n      assert.equal(false, query.options.tailable);\r\n    });\r\n    it('is chainable', function() {\r\n      const m = mquery();\r\n      assert.equal(m, m.tailable());\r\n    });\r\n    noDistinct('tailable');\r\n    no('count', 'tailable');\r\n  });\r\n\r\n  describe('writeConcern', function() {\r\n    it('sets associated writeConcern option', function() {\r\n      let m;\r\n      m = mquery();\r\n      m.writeConcern('majority');\r\n      assert.equal('majority', m.options.w);\r\n\r\n      m = mquery();\r\n      m.writeConcern('m'); // m is alias of majority\r\n      assert.equal('majority', m.options.w);\r\n\r\n      m = mquery();\r\n      m.writeConcern(1);\r\n      assert.equal(1, m.options.w);\r\n    });\r\n    it('accepts object', function() {\r\n      let m;\r\n\r\n      m = mquery().writeConcern({ w: 'm', j: true, wtimeout: 1000 });\r\n      assert.equal('m', m.options.w); // check it does not convert m to majority\r\n      assert.equal(true, m.options.j);\r\n      assert.equal(1000, m.options.wtimeout);\r\n\r\n      m = mquery().w('m').w({ j: false, wtimeout: 0 });\r\n      assert.equal('majority', m.options.w);\r\n      assert.strictEqual(false, m.options.j);\r\n      assert.strictEqual(0, m.options.wtimeout);\r\n    });\r\n    it('is chainable', function() {\r\n      const m = mquery();\r\n      assert.equal(m, m.writeConcern('majority'));\r\n    });\r\n  });\r\n\r\n  // query utilities\r\n\r\n  describe('merge', function() {\r\n    describe('with falsy arg', function() {\r\n      it('returns itself', function() {\r\n        const m = mquery();\r\n        assert.equal(m, m.merge());\r\n        assert.equal(m, m.merge(null));\r\n        assert.equal(m, m.merge(0));\r\n      });\r\n    });\r\n    describe('with an argument', function() {\r\n      describe('that is not a query or plain object', function() {\r\n        it('throws', function() {\r\n          assert.throws(function() {\r\n            mquery().merge([]);\r\n          }, /Invalid argument/);\r\n          assert.throws(function() {\r\n            mquery().merge('merge');\r\n          }, /Invalid argument/);\r\n          assert.doesNotThrow(function() {\r\n            mquery().merge({});\r\n          }, /Invalid argument/);\r\n        });\r\n      });\r\n\r\n      describe('that is a query', function() {\r\n        it('merges conditions, field selection, and options', function() {\r\n          const m = mquery({ x: 'hi' }, { select: 'x y', another: true });\r\n          const n = mquery().merge(m);\r\n          assert.deepEqual(n._conditions, m._conditions);\r\n          assert.deepEqual(n._fields, m._fields);\r\n          assert.deepEqual(n.options, m.options);\r\n        });\r\n        it('clones update arguments', function(done) {\r\n          const original = { $set: { iTerm: true } };\r\n          const m = mquery().updateOne(original);\r\n          const n = mquery().merge(m);\r\n          m.updateOne({ $set: { x: 2 } });\r\n          assert.notDeepEqual(m._update, n._update);\r\n          done();\r\n        });\r\n        it('is chainable', function() {\r\n          const m = mquery({ x: 'hi' });\r\n          const n = mquery();\r\n          assert.equal(n, n.merge(m));\r\n        });\r\n      });\r\n\r\n      describe('that is an object', function() {\r\n        it('merges', function() {\r\n          const m = { x: 'hi' };\r\n          const n = mquery().merge(m);\r\n          assert.deepEqual(n._conditions, { x: 'hi' });\r\n        });\r\n        it('clones update arguments', function(done) {\r\n          const original = { $set: { iTerm: true } };\r\n          const m = mquery().updateOne(original);\r\n          const n = mquery().merge(original);\r\n          m.updateOne({ $set: { x: 2 } });\r\n          assert.notDeepEqual(m._update, n._update);\r\n          done();\r\n        });\r\n        it('is chainable', function() {\r\n          const m = { x: 'hi' };\r\n          const n = mquery();\r\n          assert.equal(n, n.merge(m));\r\n        });\r\n      });\r\n    });\r\n  });\r\n\r\n  // queries\r\n\r\n  describe('find', function() {\r\n    describe('with no callback', function() {\r\n      it('does not execute', function() {\r\n        const m = mquery();\r\n        assert.doesNotThrow(function() {\r\n          m.find();\r\n        });\r\n        assert.doesNotThrow(function() {\r\n          m.find({ x: 1 });\r\n        });\r\n      });\r\n    });\r\n\r\n    it('is chainable', function() {\r\n      const m = mquery().find({ x: 1 }).find().find({ y: 2 });\r\n      assert.deepEqual(m._conditions, { x: 1, y: 2 });\r\n    });\r\n\r\n    it('merges other queries', function() {\r\n      const m = mquery({ name: 'mquery' });\r\n      m.tailable();\r\n      m.select('_id');\r\n      const a = mquery().find(m);\r\n      assert.deepEqual(a._conditions, m._conditions);\r\n      assert.deepEqual(a.options, m.options);\r\n      assert.deepEqual(a._fields, m._fields);\r\n    });\r\n\r\n    describe('executes', function() {\r\n      before(function(done) {\r\n        col.insertOne({ name: 'mquery' }, done);\r\n      });\r\n\r\n      after(function(done) {\r\n        col.remove({ name: 'mquery' }, done);\r\n      });\r\n\r\n      it('when criteria is passed with a callback', function(done) {\r\n        mquery(col).find({ name: 'mquery' }, function(err, docs) {\r\n          assert.ifError(err);\r\n          assert.equal(1, docs.length);\r\n          done();\r\n        });\r\n      });\r\n      it('when Query is passed with a callback', function(done) {\r\n        const m = mquery({ name: 'mquery' });\r\n        mquery(col).find(m, function(err, docs) {\r\n          assert.ifError(err);\r\n          assert.equal(1, docs.length);\r\n          done();\r\n        });\r\n      });\r\n      it('when just a callback is passed', function(done) {\r\n        mquery({ name: 'mquery' }).collection(col).find(function(err, docs) {\r\n          assert.ifError(err);\r\n          assert.equal(1, docs.length);\r\n          done();\r\n        });\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('findOne', function() {\r\n    describe('with no callback', function() {\r\n      it('does not execute', function() {\r\n        const m = mquery();\r\n        assert.doesNotThrow(function() {\r\n          m.findOne();\r\n        });\r\n        assert.doesNotThrow(function() {\r\n          m.findOne({ x: 1 });\r\n        });\r\n      });\r\n    });\r\n\r\n    it('is chainable', function() {\r\n      const m = mquery();\r\n      const n = m.findOne({ x: 1 }).findOne().findOne({ y: 2 });\r\n      assert.equal(m, n);\r\n      assert.deepEqual(m._conditions, { x: 1, y: 2 });\r\n      assert.equal('findOne', m.op);\r\n    });\r\n\r\n    it('merges other queries', function() {\r\n      const m = mquery({ name: 'mquery' });\r\n      m.read('nearest');\r\n      m.select('_id');\r\n      const a = mquery().findOne(m);\r\n      assert.deepEqual(a._conditions, m._conditions);\r\n      assert.deepEqual(a.options, m.options);\r\n      assert.deepEqual(a._fields, m._fields);\r\n    });\r\n\r\n    describe('executes', function() {\r\n      before(function(done) {\r\n        col.insertOne({ name: 'mquery findone' }, done);\r\n      });\r\n\r\n      after(function(done) {\r\n        col.remove({ name: 'mquery findone' }, done);\r\n      });\r\n\r\n      it('when criteria is passed with a callback', function(done) {\r\n        mquery(col).findOne({ name: 'mquery findone' }, function(err, doc) {\r\n          assert.ifError(err);\r\n          assert.ok(doc);\r\n          assert.equal('mquery findone', doc.name);\r\n          done();\r\n        });\r\n      });\r\n      it('when Query is passed with a callback', function(done) {\r\n        const m = mquery(col).where({ name: 'mquery findone' });\r\n        mquery(col).findOne(m, function(err, doc) {\r\n          assert.ifError(err);\r\n          assert.ok(doc);\r\n          assert.equal('mquery findone', doc.name);\r\n          done();\r\n        });\r\n      });\r\n      it('when just a callback is passed', function(done) {\r\n        mquery({ name: 'mquery findone' }).collection(col).findOne(function(err, doc) {\r\n          assert.ifError(err);\r\n          assert.ok(doc);\r\n          assert.equal('mquery findone', doc.name);\r\n          done();\r\n        });\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('count', function() {\r\n    describe('with no callback', function() {\r\n      it('does not execute', function() {\r\n        const m = mquery();\r\n        assert.doesNotThrow(function() {\r\n          m.count();\r\n        });\r\n        assert.doesNotThrow(function() {\r\n          m.count({ x: 1 });\r\n        });\r\n      });\r\n    });\r\n\r\n    it('is chainable', function() {\r\n      const m = mquery();\r\n      const n = m.count({ x: 1 }).count().count({ y: 2 });\r\n      assert.equal(m, n);\r\n      assert.deepEqual(m._conditions, { x: 1, y: 2 });\r\n      assert.equal('count', m.op);\r\n    });\r\n\r\n    it('merges other queries', function() {\r\n      const m = mquery({ name: 'mquery' });\r\n      m.read('nearest');\r\n      m.select('_id');\r\n      const a = mquery().count(m);\r\n      assert.deepEqual(a._conditions, m._conditions);\r\n      assert.deepEqual(a.options, m.options);\r\n      assert.deepEqual(a._fields, m._fields);\r\n    });\r\n\r\n    describe('executes', function() {\r\n      before(function(done) {\r\n        col.insertOne({ name: 'mquery count' }, done);\r\n      });\r\n\r\n      after(function(done) {\r\n        col.remove({ name: 'mquery count' }, done);\r\n      });\r\n\r\n      it('when criteria is passed with a callback', function(done) {\r\n        mquery(col).count({ name: 'mquery count' }, function(err, count) {\r\n          assert.ifError(err);\r\n          assert.ok(count);\r\n          assert.ok(1 === count);\r\n          done();\r\n        });\r\n      });\r\n      it('when Query is passed with a callback', function(done) {\r\n        const m = mquery({ name: 'mquery count' });\r\n        mquery(col).count(m, function(err, count) {\r\n          assert.ifError(err);\r\n          assert.ok(count);\r\n          assert.ok(1 === count);\r\n          done();\r\n        });\r\n      });\r\n      it('when just a callback is passed', function(done) {\r\n        mquery({ name: 'mquery count' }).collection(col).count(function(err, count) {\r\n          assert.ifError(err);\r\n          assert.ok(1 === count);\r\n          done();\r\n        });\r\n      });\r\n    });\r\n\r\n    describe('validates its option', function() {\r\n      it('sort', function(done) {\r\n        assert.doesNotThrow(function() {\r\n          mquery().sort('x').count();\r\n        });\r\n        done();\r\n      });\r\n\r\n      it('select', function(done) {\r\n        assert.throws(function() {\r\n          mquery().select('x').count();\r\n        }, /field selection and slice cannot be used with count/);\r\n        done();\r\n      });\r\n\r\n      it('slice', function(done) {\r\n        assert.throws(function() {\r\n          mquery().where('x').slice(-3).count();\r\n        }, /field selection and slice cannot be used with count/);\r\n        done();\r\n      });\r\n\r\n      it('limit', function(done) {\r\n        assert.doesNotThrow(function() {\r\n          mquery().limit(3).count();\r\n        });\r\n        done();\r\n      });\r\n\r\n      it('skip', function(done) {\r\n        assert.doesNotThrow(function() {\r\n          mquery().skip(3).count();\r\n        });\r\n        done();\r\n      });\r\n\r\n      it('batchSize', function(done) {\r\n        assert.throws(function() {\r\n          mquery({}, { batchSize: 3 }).count();\r\n        }, /batchSize cannot be used with count/);\r\n        done();\r\n      });\r\n\r\n      it('maxScan', function(done) {\r\n        assert.throws(function() {\r\n          mquery().maxScan(300).count();\r\n        }, /maxScan cannot be used with count/);\r\n        done();\r\n      });\r\n\r\n      it('snapshot', function(done) {\r\n        assert.throws(function() {\r\n          mquery().snapshot().count();\r\n        }, /snapshot cannot be used with count/);\r\n        done();\r\n      });\r\n\r\n      it('tailable', function(done) {\r\n        assert.throws(function() {\r\n          mquery().tailable().count();\r\n        }, /tailable cannot be used with count/);\r\n        done();\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('distinct', function() {\r\n    describe('with no callback', function() {\r\n      it('does not execute', function() {\r\n        const m = mquery();\r\n        assert.doesNotThrow(function() {\r\n          m.distinct();\r\n        });\r\n        assert.doesNotThrow(function() {\r\n          m.distinct('name');\r\n        });\r\n        assert.doesNotThrow(function() {\r\n          m.distinct({ name: 'mquery distinct' });\r\n        });\r\n        assert.doesNotThrow(function() {\r\n          m.distinct({ name: 'mquery distinct' }, 'name');\r\n        });\r\n      });\r\n    });\r\n\r\n    it('is chainable', function() {\r\n      const m = mquery({ x: 1 }).distinct('name');\r\n      const n = m.distinct({ y: 2 });\r\n      assert.equal(m, n);\r\n      assert.deepEqual(n._conditions, { x: 1, y: 2 });\r\n      assert.equal('name', n._distinct);\r\n      assert.equal('distinct', n.op);\r\n    });\r\n\r\n    it('overwrites field', function() {\r\n      const m = mquery({ name: 'mquery' }).distinct('name');\r\n      m.distinct('rename');\r\n      assert.equal(m._distinct, 'rename');\r\n      m.distinct({ x: 1 }, 'renamed');\r\n      assert.equal(m._distinct, 'renamed');\r\n    });\r\n\r\n    it('merges other queries', function() {\r\n      const m = mquery().distinct({ name: 'mquery' }, 'age');\r\n      m.read('nearest');\r\n      const a = mquery().distinct(m);\r\n      assert.deepEqual(a._conditions, m._conditions);\r\n      assert.deepEqual(a.options, m.options);\r\n      assert.deepEqual(a._fields, m._fields);\r\n      assert.deepEqual(a._distinct, m._distinct);\r\n    });\r\n\r\n    describe('executes', function() {\r\n      before(function(done) {\r\n        col.insertOne({ name: 'mquery distinct', age: 1 }, done);\r\n      });\r\n\r\n      after(function(done) {\r\n        col.remove({ name: 'mquery distinct' }, done);\r\n      });\r\n\r\n      it('when distinct arg is passed with a callback', function(done) {\r\n        mquery(col).distinct('distinct', function(err, doc) {\r\n          assert.ifError(err);\r\n          assert.ok(doc);\r\n          done();\r\n        });\r\n      });\r\n      describe('when criteria is passed with a callback', function() {\r\n        it('if distinct arg was declared', function(done) {\r\n          mquery(col).distinct('age').distinct({ name: 'mquery distinct' }, function(err, doc) {\r\n            assert.ifError(err);\r\n            assert.ok(doc);\r\n            done();\r\n          });\r\n        });\r\n        it('but not if distinct arg was not declared', function() {\r\n          assert.throws(function() {\r\n            mquery(col).distinct({ name: 'mquery distinct' }, function() {});\r\n          }, /No value for `distinct`/);\r\n        });\r\n      });\r\n      describe('when Query is passed with a callback', function() {\r\n        const m = mquery({ name: 'mquery distinct' });\r\n        it('if distinct arg was declared', function(done) {\r\n          mquery(col).distinct('age').distinct(m, function(err, doc) {\r\n            assert.ifError(err);\r\n            assert.ok(doc);\r\n            done();\r\n          });\r\n        });\r\n        it('but not if distinct arg was not declared', function() {\r\n          assert.throws(function() {\r\n            mquery(col).distinct(m, function() {});\r\n          }, /No value for `distinct`/);\r\n        });\r\n      });\r\n      describe('when just a callback is passed', function() {\r\n        it('if distinct arg was declared', function(done) {\r\n          const m = mquery({ name: 'mquery distinct' });\r\n          m.collection(col);\r\n          m.distinct('age');\r\n          m.distinct(function(err, doc) {\r\n            assert.ifError(err);\r\n            assert.ok(doc);\r\n            done();\r\n          });\r\n        });\r\n        it('but not if no distinct arg was declared', function() {\r\n          const m = mquery();\r\n          m.collection(col);\r\n          assert.throws(function() {\r\n            m.distinct(function() {});\r\n          }, /No value for `distinct`/);\r\n        });\r\n      });\r\n    });\r\n\r\n    describe('validates its option', function() {\r\n      it('sort', function(done) {\r\n        assert.throws(function() {\r\n          mquery().sort('x').distinct();\r\n        }, /sort cannot be used with distinct/);\r\n        done();\r\n      });\r\n\r\n      it('select', function(done) {\r\n        assert.throws(function() {\r\n          mquery().select('x').distinct();\r\n        }, /field selection and slice cannot be used with distinct/);\r\n        done();\r\n      });\r\n\r\n      it('slice', function(done) {\r\n        assert.throws(function() {\r\n          mquery().where('x').slice(-3).distinct();\r\n        }, /field selection and slice cannot be used with distinct/);\r\n        done();\r\n      });\r\n\r\n      it('limit', function(done) {\r\n        assert.throws(function() {\r\n          mquery().limit(3).distinct();\r\n        }, /limit cannot be used with distinct/);\r\n        done();\r\n      });\r\n\r\n      it('skip', function(done) {\r\n        assert.throws(function() {\r\n          mquery().skip(3).distinct();\r\n        }, /skip cannot be used with distinct/);\r\n        done();\r\n      });\r\n\r\n      it('batchSize', function(done) {\r\n        assert.throws(function() {\r\n          mquery({}, { batchSize: 3 }).distinct();\r\n        }, /batchSize cannot be used with distinct/);\r\n        done();\r\n      });\r\n\r\n      it('maxScan', function(done) {\r\n        assert.throws(function() {\r\n          mquery().maxScan(300).distinct();\r\n        }, /maxScan cannot be used with distinct/);\r\n        done();\r\n      });\r\n\r\n      it('snapshot', function(done) {\r\n        assert.throws(function() {\r\n          mquery().snapshot().distinct();\r\n        }, /snapshot cannot be used with distinct/);\r\n        done();\r\n      });\r\n\r\n      it('hint', function(done) {\r\n        assert.throws(function() {\r\n          mquery().hint({ x: 1 }).distinct();\r\n        }, /hint cannot be used with distinct/);\r\n        done();\r\n      });\r\n\r\n      it('tailable', function(done) {\r\n        assert.throws(function() {\r\n          mquery().tailable().distinct();\r\n        }, /tailable cannot be used with distinct/);\r\n        done();\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('update', function() {\r\n    describe('with no callback', function() {\r\n      it('does not execute', function() {\r\n        const m = mquery();\r\n        assert.doesNotThrow(function() {\r\n          m.updateOne({ name: 'old' }, { name: 'updated' }, { multi: true });\r\n        });\r\n        assert.doesNotThrow(function() {\r\n          m.updateOne({ name: 'old' }, { name: 'updated' });\r\n        });\r\n        assert.doesNotThrow(function() {\r\n          m.updateOne({ name: 'updated' });\r\n        });\r\n        assert.doesNotThrow(function() {\r\n          m.updateOne();\r\n        });\r\n      });\r\n    });\r\n\r\n    it('is chainable', function() {\r\n      const m = mquery({ x: 1 }).updateOne({ y: 2 });\r\n      const n = m.where({ y: 2 });\r\n      assert.equal(m, n);\r\n      assert.deepEqual(n._conditions, { x: 1, y: 2 });\r\n      assert.deepEqual({ y: 2 }, n._update);\r\n      assert.equal('updateOne', n.op);\r\n    });\r\n\r\n    it('merges update doc arg', function() {\r\n      const a = [1, 2];\r\n      const m = mquery().where({ name: 'mquery' }).updateOne({ x: 'stuff', a: a });\r\n      m.updateOne({ z: 'stuff' });\r\n      assert.deepEqual(m._update, { z: 'stuff', x: 'stuff', a: a });\r\n      assert.deepEqual(m._conditions, { name: 'mquery' });\r\n      assert.ok(!m.options.overwrite);\r\n      m.updateOne({}, { z: 'renamed' }, { overwrite: true });\r\n      assert.ok(m.options.overwrite === true);\r\n      assert.deepEqual(m._conditions, { name: 'mquery' });\r\n      assert.deepEqual(m._update, { z: 'renamed', x: 'stuff', a: a });\r\n      a.push(3);\r\n      assert.notDeepEqual(m._update, { z: 'renamed', x: 'stuff', a: a });\r\n    });\r\n\r\n    describe('executes', function() {\r\n      let id;\r\n      before(function(done) {\r\n        col.insertOne({ name: 'mquery update', age: 1 }, function(err, res) {\r\n          id = res.insertedId;\r\n          done();\r\n        });\r\n      });\r\n\r\n      after(function(done) {\r\n        col.remove({ _id: id }, done);\r\n      });\r\n\r\n      describe('when conds + doc + opts + callback passed', function() {\r\n        it('works', function(done) {\r\n          const m = mquery(col).where({ _id: id });\r\n          m.updateOne({}, { name: 'Sparky' }, {}, function(err, res) {\r\n            assert.ifError(err);\r\n            assert.equal(res.modifiedCount, 1);\r\n            m.findOne(function(err, doc) {\r\n              assert.ifError(err);\r\n              assert.equal(doc.name, 'Sparky');\r\n              done();\r\n            });\r\n          });\r\n        });\r\n      });\r\n\r\n      describe('when conds + doc + callback passed', function() {\r\n        it('works', function(done) {\r\n          const m = mquery(col).updateOne({ _id: id }, { name: 'fairgrounds' }, function(err, num) {\r\n            assert.ifError(err);\r\n            assert.ok(1, num);\r\n            m.findOne(function(err, doc) {\r\n              assert.ifError(err);\r\n              assert.equal(doc.name, 'fairgrounds');\r\n              done();\r\n            });\r\n          });\r\n        });\r\n      });\r\n\r\n      describe('when doc + callback passed', function() {\r\n        it('works', function(done) {\r\n          const m = mquery(col).where({ _id: id }).updateOne({ name: 'changed' }, function(err, num) {\r\n            assert.ifError(err);\r\n            assert.ok(1, num);\r\n            m.findOne(function(err, doc) {\r\n              assert.ifError(err);\r\n              assert.equal(doc.name, 'changed');\r\n              done();\r\n            });\r\n          });\r\n        });\r\n      });\r\n\r\n      describe('when just callback passed', function() {\r\n        it('works', function(done) {\r\n          const m = mquery(col).where({ _id: id });\r\n          m.updateOne({ name: 'Frankenweenie' });\r\n          m.updateOne(function(err, res) {\r\n            assert.ifError(err);\r\n            assert.equal(res.modifiedCount, 1);\r\n            m.findOne(function(err, doc) {\r\n              assert.ifError(err);\r\n              assert.equal(doc.name, 'Frankenweenie');\r\n              done();\r\n            });\r\n          });\r\n        });\r\n      });\r\n\r\n      describe('without a callback', function() {\r\n        it('when forced by exec()', function(done) {\r\n          const m = mquery(col).where({ _id: id });\r\n          m.setOptions({ w: 'majority' });\r\n          m.updateOne({ name: 'forced' });\r\n\r\n          const update = m._collection.update;\r\n          m._collection.updateOne = function(conds, doc, opts) {\r\n            m._collection.update = update;\r\n\r\n            assert.equal(opts.w, 'majority');\r\n            assert.equal('forced', doc.$set.name);\r\n            done();\r\n          };\r\n\r\n          m.exec();\r\n        });\r\n      });\r\n\r\n      describe('except when update doc is empty and missing overwrite flag', function() {\r\n        it('works', function(done) {\r\n          const m = mquery(col).where({ _id: id });\r\n          m.updateOne({}, function(err, num) {\r\n            assert.ifError(err);\r\n            assert.ok(0 === num);\r\n            setTimeout(function() {\r\n              m.findOne(function(err, doc) {\r\n                assert.ifError(err);\r\n                assert.equal(3, mquery.utils.keys(doc).length);\r\n                assert.equal(id, doc._id.toString());\r\n                assert.equal('Frankenweenie', doc.name);\r\n                done();\r\n              });\r\n            }, 300);\r\n          });\r\n        });\r\n      });\r\n\r\n      describe('when boolean (true) - exec()', function() {\r\n        it('works', function(done) {\r\n          const m = mquery(col).where({ _id: id });\r\n          m.updateOne({ name: 'bool' }).updateOne(true);\r\n          setTimeout(function() {\r\n            m.findOne(function(err, doc) {\r\n              assert.ifError(err);\r\n              assert.ok(doc);\r\n              assert.equal('bool', doc.name);\r\n              done();\r\n            });\r\n          }, 300);\r\n        });\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('remove', function() {\r\n    describe('with 0 args', function() {\r\n      const name = 'remove: no args test';\r\n      before(function(done) {\r\n        col.insertOne({ name: name }, done);\r\n      });\r\n      after(function(done) {\r\n        col.remove({ name: name }, done);\r\n      });\r\n\r\n      it('does not execute', function(done) {\r\n        const remove = col.remove;\r\n        col.remove = function() {\r\n          col.remove = remove;\r\n          done(new Error('remove executed!'));\r\n        };\r\n\r\n        mquery(col).where({ name: name }).remove();\r\n        setTimeout(function() {\r\n          col.remove = remove;\r\n          done();\r\n        }, 10);\r\n      });\r\n\r\n      it('chains', function() {\r\n        const m = mquery();\r\n        assert.equal(m, m.remove());\r\n      });\r\n    });\r\n\r\n    describe('with 1 argument', function() {\r\n      const name = 'remove: 1 arg test';\r\n      before(function(done) {\r\n        col.insertOne({ name: name }, done);\r\n      });\r\n      after(function(done) {\r\n        col.remove({ name: name }, done);\r\n      });\r\n\r\n      describe('that is a', function() {\r\n        it('plain object', function() {\r\n          const m = mquery(col).remove({ name: 'Whiskers' });\r\n          m.remove({ color: '#fff' });\r\n          assert.deepEqual({ name: 'Whiskers', color: '#fff' }, m._conditions);\r\n        });\r\n\r\n        it('query', function() {\r\n          const q = mquery({ color: '#fff' });\r\n          const m = mquery(col).remove({ name: 'Whiskers' });\r\n          m.remove(q);\r\n          assert.deepEqual({ name: 'Whiskers', color: '#fff' }, m._conditions);\r\n        });\r\n\r\n        it('function', function(done) {\r\n          mquery(col).where({ name: name }).remove(function(err) {\r\n            assert.ifError(err);\r\n            mquery(col).findOne({ name: name }, function(err, doc) {\r\n              assert.ifError(err);\r\n              assert.equal(null, doc);\r\n              done();\r\n            });\r\n          });\r\n        });\r\n\r\n        it('boolean (true) - execute', function(done) {\r\n          col.insertOne({ name: name }, function(err) {\r\n            assert.ifError(err);\r\n            mquery(col).findOne({ name: name }, function(err, doc) {\r\n              assert.ifError(err);\r\n              assert.ok(doc);\r\n              mquery(col).remove(true);\r\n              setTimeout(function() {\r\n                mquery(col).find(function(err, docs) {\r\n                  assert.ifError(err);\r\n                  assert.ok(docs);\r\n                  assert.equal(0, docs.length);\r\n                  done();\r\n                });\r\n              }, 300);\r\n            });\r\n          });\r\n        });\r\n      });\r\n    });\r\n\r\n    describe('with 2 arguments', function() {\r\n      const name = 'remove: 2 arg test';\r\n      beforeEach(function(done) {\r\n        col.remove({}, function(err) {\r\n          assert.ifError(err);\r\n          col.insertMany([{ name: 'shelly' }, { name: name }], function(err) {\r\n            assert.ifError(err);\r\n            mquery(col).find(function(err, docs) {\r\n              assert.ifError(err);\r\n              assert.equal(2, docs.length);\r\n              done();\r\n            });\r\n          });\r\n        });\r\n      });\r\n\r\n      describe('plain object + callback', function() {\r\n        it('works', function(done) {\r\n          mquery(col).remove({ name: name }, function(err) {\r\n            assert.ifError(err);\r\n            mquery(col).find(function(err, docs) {\r\n              assert.ifError(err);\r\n              assert.ok(docs);\r\n              assert.equal(1, docs.length);\r\n              assert.equal('shelly', docs[0].name);\r\n              done();\r\n            });\r\n          });\r\n        });\r\n      });\r\n\r\n      describe('mquery + callback', function() {\r\n        it('works', function(done) {\r\n          const m = mquery({ name: name });\r\n          mquery(col).remove(m, function(err) {\r\n            assert.ifError(err);\r\n            mquery(col).find(function(err, docs) {\r\n              assert.ifError(err);\r\n              assert.ok(docs);\r\n              assert.equal(1, docs.length);\r\n              assert.equal('shelly', docs[0].name);\r\n              done();\r\n            });\r\n          });\r\n        });\r\n      });\r\n    });\r\n  });\r\n\r\n  function validateFindAndModifyOptions(method) {\r\n    describe('validates its option', function() {\r\n      it('sort', function(done) {\r\n        assert.doesNotThrow(function() {\r\n          mquery().sort('x')[method]();\r\n        });\r\n        done();\r\n      });\r\n\r\n      it('select', function(done) {\r\n        assert.doesNotThrow(function() {\r\n          mquery().select('x')[method]();\r\n        });\r\n        done();\r\n      });\r\n\r\n      it('limit', function(done) {\r\n        assert.throws(function() {\r\n          mquery().limit(3)[method]();\r\n        }, new RegExp('limit cannot be used with ' + method));\r\n        done();\r\n      });\r\n\r\n      it('skip', function(done) {\r\n        assert.throws(function() {\r\n          mquery().skip(3)[method]();\r\n        }, new RegExp('skip cannot be used with ' + method));\r\n        done();\r\n      });\r\n\r\n      it('batchSize', function(done) {\r\n        assert.throws(function() {\r\n          mquery({}, { batchSize: 3 })[method]();\r\n        }, new RegExp('batchSize cannot be used with ' + method));\r\n        done();\r\n      });\r\n\r\n      it('maxScan', function(done) {\r\n        assert.throws(function() {\r\n          mquery().maxScan(300)[method]();\r\n        }, new RegExp('maxScan cannot be used with ' + method));\r\n        done();\r\n      });\r\n\r\n      it('snapshot', function(done) {\r\n        assert.throws(function() {\r\n          mquery().snapshot()[method]();\r\n        }, new RegExp('snapshot cannot be used with ' + method));\r\n        done();\r\n      });\r\n\r\n      it('tailable', function(done) {\r\n        assert.throws(function() {\r\n          mquery().tailable()[method]();\r\n        }, new RegExp('tailable cannot be used with ' + method));\r\n        done();\r\n      });\r\n    });\r\n  }\r\n\r\n  describe('findOneAndUpdate', function() {\r\n    let name = 'findOneAndUpdate + fn';\r\n\r\n    validateFindAndModifyOptions('findOneAndUpdate');\r\n\r\n    describe('with 0 args', function() {\r\n      it('makes no changes', function() {\r\n        const m = mquery();\r\n        const n = m.findOneAndUpdate();\r\n        assert.deepEqual(m, n);\r\n      });\r\n    });\r\n    describe('with 1 arg', function() {\r\n      describe('that is an object', function() {\r\n        it('updates the doc', function() {\r\n          const m = mquery();\r\n          const n = m.findOneAndUpdate({ $set: { name: '1 arg' } });\r\n          assert.deepEqual(n._update, { $set: { name: '1 arg' } });\r\n        });\r\n      });\r\n      describe('that is a query', function() {\r\n        it('updates the doc', function() {\r\n          const m = mquery({ name: name }).updateOne({ x: 1 });\r\n          const n = mquery().findOneAndUpdate(m);\r\n          assert.deepEqual(n._update, { x: 1 });\r\n        });\r\n      });\r\n      it('that is a function', function(done) {\r\n        col.insertOne({ name: name }, function(err) {\r\n          assert.ifError(err);\r\n          const m = mquery({ name: name }).collection(col);\r\n          name = '1 arg';\r\n          const n = m.updateOne({ $set: { name: name } }).setOptions({ returnDocument: 'after' });\r\n          n.findOneAndUpdate(function(err, res) {\r\n            assert.ifError(err);\r\n            assert.ok(res.value);\r\n            assert.equal(res.value.name, name);\r\n            done();\r\n          });\r\n        });\r\n      });\r\n    });\r\n    describe('with 2 args', function() {\r\n      it('conditions + update', function() {\r\n        const m = mquery(col);\r\n        m.findOneAndUpdate({ name: name }, { age: 100 });\r\n        assert.deepEqual({ name: name }, m._conditions);\r\n        assert.deepEqual({ age: 100 }, m._update);\r\n      });\r\n      it('query + update', function() {\r\n        const n = mquery({ name: name });\r\n        const m = mquery(col);\r\n        m.findOneAndUpdate(n, { age: 100 });\r\n        assert.deepEqual({ name: name }, m._conditions);\r\n        assert.deepEqual({ age: 100 }, m._update);\r\n      });\r\n      it('update + callback', function(done) {\r\n        const m = mquery(col).where({ name: name });\r\n        m.findOneAndUpdate({}, { $inc: { age: 10 } }, { returnDocument: 'after' }, function(err, res) {\r\n          assert.ifError(err);\r\n          assert.equal(10, res.value.age);\r\n          done();\r\n        });\r\n      });\r\n    });\r\n    describe('with 3 args', function() {\r\n      it('conditions + update + options', function() {\r\n        const m = mquery();\r\n        const n = m.findOneAndUpdate({ name: name }, { works: true }, { returnDocument: 'before' });\r\n        assert.deepEqual({ name: name }, n._conditions);\r\n        assert.deepEqual({ works: true }, n._update);\r\n        assert.deepEqual({ returnDocument: 'before' }, n.options);\r\n      });\r\n      it('conditions + update + callback', function(done) {\r\n        const m = mquery(col);\r\n        m.findOneAndUpdate({ name: name }, { works: true }, { returnDocument: 'after' }, function(err, res) {\r\n          assert.ifError(err);\r\n          assert.ok(res.value);\r\n          assert.equal(name, res.value.name);\r\n          assert.ok(true === res.value.works);\r\n          done();\r\n        });\r\n      });\r\n    });\r\n    describe('with 4 args', function() {\r\n      it('conditions + update + options + callback', function(done) {\r\n        const m = mquery(col);\r\n        m.findOneAndUpdate({ name: name }, { works: false }, {}, function(err, res) {\r\n          assert.ifError(err);\r\n          assert.ok(res.value);\r\n          assert.equal(name, res.value.name);\r\n          assert.ok(true === res.value.works);\r\n          done();\r\n        });\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('findOneAndRemove', function() {\r\n    let name = 'findOneAndRemove';\r\n\r\n    validateFindAndModifyOptions('findOneAndRemove');\r\n\r\n    describe('with 0 args', function() {\r\n      it('makes no changes', function() {\r\n        const m = mquery();\r\n        const n = m.findOneAndRemove();\r\n        assert.deepEqual(m, n);\r\n      });\r\n    });\r\n    describe('with 1 arg', function() {\r\n      describe('that is an object', function() {\r\n        it('updates the doc', function() {\r\n          const m = mquery();\r\n          const n = m.findOneAndRemove({ name: '1 arg' });\r\n          assert.deepEqual(n._conditions, { name: '1 arg' });\r\n        });\r\n      });\r\n      describe('that is a query', function() {\r\n        it('updates the doc', function() {\r\n          const m = mquery({ name: name });\r\n          const n = m.findOneAndRemove(m);\r\n          assert.deepEqual(n._conditions, { name: name });\r\n        });\r\n      });\r\n      it('that is a function', function(done) {\r\n        col.insertOne({ name: name }, function(err) {\r\n          assert.ifError(err);\r\n          const m = mquery({ name: name }).collection(col);\r\n          m.findOneAndRemove(function(err, res) {\r\n            assert.ifError(err);\r\n            assert.ok(res.value);\r\n            assert.equal(name, res.value.name);\r\n            done();\r\n          });\r\n        });\r\n      });\r\n    });\r\n    describe('with 2 args', function() {\r\n      it('conditions + options', function() {\r\n        const m = mquery(col);\r\n        m.findOneAndRemove({ name: name }, { returnDocument: 'after' });\r\n        assert.deepEqual({ name: name }, m._conditions);\r\n        assert.deepEqual({ returnDocument: 'after' }, m.options);\r\n      });\r\n      it('query + options', function() {\r\n        const n = mquery({ name: name });\r\n        const m = mquery(col);\r\n        m.findOneAndRemove(n, { sort: { x: 1 } });\r\n        assert.deepEqual({ name: name }, m._conditions);\r\n        assert.deepEqual({ sort: { x: 1 } }, m.options);\r\n      });\r\n      it('conditions + callback', function(done) {\r\n        col.insertOne({ name: name }, function(err) {\r\n          assert.ifError(err);\r\n          const m = mquery(col);\r\n          m.findOneAndRemove({ name: name }, function(err, res) {\r\n            assert.ifError(err);\r\n            assert.equal(name, res.value.name);\r\n            done();\r\n          });\r\n        });\r\n      });\r\n      it('query + callback', function(done) {\r\n        col.insertOne({ name: name }, function(err) {\r\n          assert.ifError(err);\r\n          const n = mquery({ name: name });\r\n          const m = mquery(col);\r\n          m.findOneAndRemove(n, function(err, res) {\r\n            assert.ifError(err);\r\n            assert.equal(name, res.value.name);\r\n            done();\r\n          });\r\n        });\r\n      });\r\n    });\r\n    describe('with 3 args', function() {\r\n      it('conditions + options + callback', function(done) {\r\n        name = 'findOneAndRemove + conds + options + cb';\r\n        col.insertMany([{ name: name }, { name: 'a' }], function(err) {\r\n          assert.ifError(err);\r\n          const m = mquery(col);\r\n          m.findOneAndRemove({ name: name }, { sort: { name: 1 } }, function(err, res) {\r\n            assert.ifError(err);\r\n            assert.ok(res.value);\r\n            assert.equal(name, res.value.name);\r\n            done();\r\n          });\r\n        });\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('exec', function() {\r\n    beforeEach(function(done) {\r\n      col.insertMany([{ name: 'exec', age: 1 }, { name: 'exec', age: 2 }], done);\r\n    });\r\n\r\n    afterEach(function(done) {\r\n      mquery(col).remove(done);\r\n    });\r\n\r\n    it('requires an op', function() {\r\n      assert.throws(function() {\r\n        mquery().exec();\r\n      }, /Missing query type/);\r\n    });\r\n\r\n    describe('find', function() {\r\n      it('works', function(done) {\r\n        const m = mquery(col).find({ name: 'exec' });\r\n        m.exec(function(err, docs) {\r\n          assert.ifError(err);\r\n          assert.equal(2, docs.length);\r\n          done();\r\n        });\r\n      });\r\n\r\n      it('works with readPreferences', function(done) {\r\n        const m = mquery(col).find({ name: 'exec' });\r\n        try {\r\n          const ReadPreference = require('mongodb').ReadPreference;\r\n          const rp = new ReadPreference('primary');\r\n          m.read(rp);\r\n        } catch (e) {\r\n          done(e.code === 'MODULE_NOT_FOUND' ? null : e);\r\n          return;\r\n        }\r\n        m.exec(function(err, docs) {\r\n          assert.ifError(err);\r\n          assert.equal(2, docs.length);\r\n          done();\r\n        });\r\n      });\r\n\r\n      it('works with hint', function(done) {\r\n        mquery(col).hint({ _id: 1 }).find({ name: 'exec' }).exec(function(err, docs) {\r\n          assert.ifError(err);\r\n          assert.equal(2, docs.length);\r\n\r\n          mquery(col).hint('_id_').find({ age: 1 }).exec(function(err, docs) {\r\n            assert.ifError(err);\r\n            assert.equal(1, docs.length);\r\n            done();\r\n          });\r\n        });\r\n      });\r\n\r\n      it('works with readConcern', function(done) {\r\n        const m = mquery(col).find({ name: 'exec' });\r\n        m.readConcern('l');\r\n        m.exec(function(err, docs) {\r\n          assert.ifError(err);\r\n          assert.equal(2, docs.length);\r\n          done();\r\n        });\r\n      });\r\n\r\n      it('works with collation', function(done) {\r\n        const m = mquery(col).find({ name: 'EXEC' });\r\n        m.collation({ locale: 'en_US', strength: 1 });\r\n        m.exec(function(err, docs) {\r\n          assert.ifError(err);\r\n          assert.equal(2, docs.length);\r\n          done();\r\n        });\r\n      });\r\n    });\r\n\r\n    it('findOne', function(done) {\r\n      const m = mquery(col).findOne({ age: 2 });\r\n      m.exec(function(err, doc) {\r\n        assert.ifError(err);\r\n        assert.equal(2, doc.age);\r\n        done();\r\n      });\r\n    });\r\n\r\n    it('count', function(done) {\r\n      const m = mquery(col).count({ name: 'exec' });\r\n      m.exec(function(err, count) {\r\n        assert.ifError(err);\r\n        assert.equal(2, count);\r\n        done();\r\n      });\r\n    });\r\n\r\n    it('distinct', function(done) {\r\n      const m = mquery({ name: 'exec' });\r\n      m.collection(col);\r\n      m.distinct('age');\r\n      m.exec(function(err, array) {\r\n        assert.ifError(err);\r\n        assert.ok(Array.isArray(array));\r\n        assert.equal(2, array.length);\r\n        assert(~array.indexOf(1));\r\n        assert(~array.indexOf(2));\r\n        done();\r\n      });\r\n    });\r\n\r\n    describe('update', function() {\r\n      describe('updateMany', function() {\r\n        it('works', function(done) {\r\n          mquery(col).updateMany({ name: 'exec' }, { name: 'test' }).\r\n            exec(function(error) {\r\n              assert.ifError(error);\r\n              mquery(col).count({ name: 'test' }).exec(function(error, res) {\r\n                assert.ifError(error);\r\n                assert.equal(res, 2);\r\n                done();\r\n              });\r\n            });\r\n        });\r\n        it('works with write concern', function(done) {\r\n          mquery(col).updateMany({ name: 'exec' }, { name: 'test' })\r\n            .w(1).j(true).wtimeout(1000)\r\n            .exec(function(error) {\r\n              assert.ifError(error);\r\n              mquery(col).count({ name: 'test' }).exec(function(error, res) {\r\n                assert.ifError(error);\r\n                assert.equal(res, 2);\r\n                done();\r\n              });\r\n            });\r\n        });\r\n      });\r\n\r\n      describe('updateOne', function() {\r\n        it('works', function(done) {\r\n          mquery(col).updateOne({ name: 'exec' }, { name: 'test' }).\r\n            exec(function(error) {\r\n              assert.ifError(error);\r\n              mquery(col).count({ name: 'test' }).exec(function(error, res) {\r\n                assert.ifError(error);\r\n                assert.equal(res, 1);\r\n                done();\r\n              });\r\n            });\r\n        });\r\n      });\r\n\r\n      describe('replaceOne', function() {\r\n        it('works', function(done) {\r\n          mquery(col).replaceOne({ name: 'exec' }, { name: 'test' }).\r\n            exec(function(error) {\r\n              assert.ifError(error);\r\n              mquery(col).findOne({ name: 'test' }).exec(function(error, res) {\r\n                assert.ifError(error);\r\n                assert.equal(res.name, 'test');\r\n                assert.ok(res.age == null);\r\n                done();\r\n              });\r\n            });\r\n        });\r\n      });\r\n    });\r\n\r\n    describe('remove', function() {\r\n      it('with a callback', function(done) {\r\n        const m = mquery(col).where({ age: 2 }).remove();\r\n        m.exec(function(err, res) {\r\n          assert.ifError(err);\r\n          assert.equal(1, res.deletedCount);\r\n          done();\r\n        });\r\n      });\r\n\r\n      it('without a callback', function(done) {\r\n        const m = mquery(col).where({ age: 1 }).remove();\r\n        m.exec();\r\n\r\n        setTimeout(function() {\r\n          mquery(col).where('name', 'exec').count(function(err, num) {\r\n            assert.equal(1, num);\r\n            done();\r\n          });\r\n        }, 200);\r\n      });\r\n    });\r\n\r\n    describe('deleteOne', function() {\r\n      it('with a callback', function(done) {\r\n        const m = mquery(col).where({ age: { $gte: 0 } }).deleteOne();\r\n        m.exec(function(err, res) {\r\n          assert.ifError(err);\r\n          assert.equal(res.deletedCount, 1);\r\n          done();\r\n        });\r\n      });\r\n\r\n      it('with justOne set', function(done) {\r\n        const m = mquery(col).where({ age: { $gte: 0 } }).\r\n          // Should ignore `justOne`\r\n          setOptions({ justOne: false }).\r\n          deleteOne();\r\n        m.exec(function(err, res) {\r\n          assert.ifError(err);\r\n          assert.equal(res.deletedCount, 1);\r\n          done();\r\n        });\r\n      });\r\n    });\r\n\r\n    describe('deleteMany', function() {\r\n      it('with a callback', function(done) {\r\n        const m = mquery(col).where({ age: { $gte: 0 } }).deleteMany();\r\n        m.exec(function(err, res) {\r\n          assert.ifError(err);\r\n          assert.equal(res.deletedCount, 2);\r\n          done();\r\n        });\r\n      });\r\n    });\r\n\r\n    describe('findOneAndUpdate', function() {\r\n      it('with a callback', function(done) {\r\n        const m = mquery(col);\r\n        m.findOneAndUpdate({ name: 'exec', age: 1 }, { $set: { name: 'findOneAndUpdate' } }, { returnDocument: 'after' });\r\n        m.exec(function(err, res) {\r\n          assert.ifError(err);\r\n          assert.equal('findOneAndUpdate', res.value.name);\r\n          done();\r\n        });\r\n      });\r\n    });\r\n\r\n    describe('findOneAndRemove', function() {\r\n      it('with a callback', function(done) {\r\n        const m = mquery(col);\r\n        m.findOneAndRemove({ name: 'exec', age: 2 });\r\n        m.exec(function(err, res) {\r\n          assert.ifError(err);\r\n          assert.equal('exec', res.value.name);\r\n          assert.equal(2, res.value.age);\r\n          mquery(col).count({ name: 'exec' }, function(err, num) {\r\n            assert.ifError(err);\r\n            assert.equal(1, num);\r\n            done();\r\n          });\r\n        });\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('setTraceFunction', function() {\r\n    beforeEach(function(done) {\r\n      col.insertMany([{ name: 'trace', age: 93 }], done);\r\n    });\r\n\r\n    it('calls trace function when executing query', function(done) {\r\n      const m = mquery(col);\r\n\r\n      let resultTraceCalled;\r\n\r\n      m.setTraceFunction(function(method, queryInfo) {\r\n        try {\r\n          assert.equal('findOne', method);\r\n          assert.equal('trace', queryInfo.conditions.name);\r\n        } catch (e) {\r\n          done(e);\r\n        }\r\n\r\n        return function(err, result, millis) {\r\n          try {\r\n            assert.equal(93, result.age);\r\n            assert.ok(typeof millis === 'number');\r\n          } catch (e) {\r\n            done(e);\r\n          }\r\n          resultTraceCalled = true;\r\n        };\r\n      });\r\n\r\n      m.findOne({ name: 'trace' }, function(err, doc) {\r\n        assert.ifError(err);\r\n        assert.equal(resultTraceCalled, true);\r\n        assert.equal(93, doc.age);\r\n        done();\r\n      });\r\n    });\r\n\r\n    it('inherits trace function when calling toConstructor', function(done) {\r\n      function traceFunction() { return function() {}; }\r\n\r\n      const tracedQuery = mquery().setTraceFunction(traceFunction).toConstructor();\r\n\r\n      const query = tracedQuery();\r\n      assert.equal(traceFunction, query._traceFunction);\r\n\r\n      done();\r\n    });\r\n  });\r\n\r\n  describe('thunk', function() {\r\n    it('returns a function', function(done) {\r\n      assert.equal('function', typeof mquery().thunk());\r\n      done();\r\n    });\r\n\r\n    it('passes the fn arg to `exec`', function(done) {\r\n      function cb() {}\r\n      const m = mquery();\r\n\r\n      m.exec = function testing(fn) {\r\n        assert.equal(this, m);\r\n        assert.equal(cb, fn);\r\n        done();\r\n      };\r\n\r\n      m.thunk()(cb);\r\n    });\r\n  });\r\n\r\n  describe('then', function() {\r\n    before(function(done) {\r\n      col.insertMany([{ name: 'then', age: 1 }, { name: 'then', age: 2 }], done);\r\n    });\r\n\r\n    after(function(done) {\r\n      mquery(col).remove({ name: 'then' }).exec(done);\r\n    });\r\n\r\n    it('returns a promise A+ compat object', function(done) {\r\n      const m = mquery(col).find();\r\n      assert.equal('function', typeof m.then);\r\n      done();\r\n    });\r\n\r\n    it('creates a promise that is resolved on success', function(done) {\r\n      const promise = mquery(col).count({ name: 'then' }).then();\r\n      promise.then(function(count) {\r\n        assert.equal(2, count);\r\n        done();\r\n      }, done);\r\n    });\r\n\r\n    it('supports exec() cb being called synchronously #66', function(done) {\r\n      const query = mquery(col).count({ name: 'then' });\r\n      query.exec = function(cb) {\r\n        cb(null, 66);\r\n      };\r\n\r\n      query.then(success, done);\r\n      function success(count) {\r\n        assert.equal(66, count);\r\n        done();\r\n      }\r\n    });\r\n  });\r\n\r\n  describe('stream', function() {\r\n    before(function(done) {\r\n      col.insertMany([{ name: 'stream', age: 1 }, { name: 'stream', age: 2 }], done);\r\n    });\r\n\r\n    after(function(done) {\r\n      mquery(col).remove({ name: 'stream' }).exec(done);\r\n    });\r\n\r\n    describe('throws', function() {\r\n      describe('if used with non-find operations', function() {\r\n        const ops = ['update', 'findOneAndUpdate', 'remove', 'count', 'distinct'];\r\n\r\n        ops.forEach(function(op) {\r\n          assert.throws(function() {\r\n            mquery(col)[op]().stream();\r\n          });\r\n        });\r\n      });\r\n    });\r\n\r\n    it('returns a stream', function(done) {\r\n      const stream = mquery(col).find({ name: 'stream' }).cursor().stream();\r\n      let count = 0;\r\n      let err;\r\n\r\n      stream.on('data', function(doc) {\r\n        assert.equal('stream', doc.name);\r\n        ++count;\r\n      });\r\n\r\n      stream.on('error', function(er) {\r\n        err = er;\r\n      });\r\n\r\n      stream.on('end', function() {\r\n        if (err) return done(err);\r\n        assert.equal(2, count);\r\n        done();\r\n      });\r\n    });\r\n  });\r\n\r\n  function noDistinct(type) {\r\n    it('cannot be used with distinct()', function(done) {\r\n      assert.throws(function() {\r\n        mquery().distinct('name')[type](4);\r\n      }, new RegExp(type + ' cannot be used with distinct'));\r\n      done();\r\n    });\r\n  }\r\n\r\n  function no(method, type) {\r\n    it('cannot be used with ' + method + '()', function(done) {\r\n      assert.throws(function() {\r\n        mquery()[method]()[type](4);\r\n      }, new RegExp(type + ' cannot be used with ' + method));\r\n      done();\r\n    });\r\n  }\r\n\r\n  // query internal\r\n\r\n  describe('_updateForExec', function() {\r\n    it('returns a clone of the update object with same key order #19', function(done) {\r\n      const update = {};\r\n      update.$push = { n: { $each: [{ x: 10 }], $slice: -1, $sort: { x: 1 } } };\r\n\r\n      const q = mquery().updateOne({ x: 1 }, update);\r\n\r\n      // capture original key order\r\n      const order = [];\r\n      let key;\r\n      for (key in q._update.$push.n) {\r\n        order.push(key);\r\n      }\r\n\r\n      // compare output\r\n      const doc = q._updateForExec();\r\n      let i = 0;\r\n      for (key in doc.$push.n) {\r\n        assert.equal(key, order[i]);\r\n        i++;\r\n      }\r\n\r\n      done();\r\n    });\r\n  });\r\n});\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}