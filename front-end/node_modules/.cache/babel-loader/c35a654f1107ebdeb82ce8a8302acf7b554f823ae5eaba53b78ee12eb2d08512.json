{"ast":null,"code":"'use strict';\n\n/*!\r\n * Module dependencies.\r\n */\nconst MongooseError = require('./mongooseError');\nconst util = require('util');\n\n/**\r\n * Casting Error constructor.\r\n *\r\n * @param {String} type\r\n * @param {String} value\r\n * @inherits MongooseError\r\n * @api private\r\n */\n\nclass CastError extends MongooseError {\n  constructor(type, value, path, reason, schemaType) {\n    // If no args, assume we'll `init()` later.\n    if (arguments.length > 0) {\n      const stringValue = getStringValue(value);\n      const valueType = getValueType(value);\n      const messageFormat = getMessageFormat(schemaType);\n      const msg = formatMessage(null, type, stringValue, path, messageFormat, valueType, reason);\n      super(msg);\n      this.init(type, value, path, reason, schemaType);\n    } else {\n      super(formatMessage());\n    }\n  }\n  toJSON() {\n    return {\n      stringValue: this.stringValue,\n      valueType: this.valueType,\n      kind: this.kind,\n      value: this.value,\n      path: this.path,\n      reason: this.reason,\n      name: this.name,\n      message: this.message\n    };\n  }\n  /*!\r\n   * ignore\r\n   */\n  init(type, value, path, reason, schemaType) {\n    this.stringValue = getStringValue(value);\n    this.messageFormat = getMessageFormat(schemaType);\n    this.kind = type;\n    this.value = value;\n    this.path = path;\n    this.reason = reason;\n    this.valueType = getValueType(value);\n  }\n\n  /**\r\n   * ignore\r\n   * @param {Readonly<CastError>} other\r\n   * @api private\r\n   */\n  copy(other) {\n    this.messageFormat = other.messageFormat;\n    this.stringValue = other.stringValue;\n    this.kind = other.kind;\n    this.value = other.value;\n    this.path = other.path;\n    this.reason = other.reason;\n    this.message = other.message;\n    this.valueType = other.valueType;\n  }\n\n  /*!\r\n   * ignore\r\n   */\n  setModel(model) {\n    this.model = model;\n    this.message = formatMessage(model, this.kind, this.stringValue, this.path, this.messageFormat, this.valueType);\n  }\n}\nObject.defineProperty(CastError.prototype, 'name', {\n  value: 'CastError'\n});\nfunction getStringValue(value) {\n  let stringValue = util.inspect(value);\n  stringValue = stringValue.replace(/^'|'$/g, '\"');\n  if (!stringValue.startsWith('\"')) {\n    stringValue = '\"' + stringValue + '\"';\n  }\n  return stringValue;\n}\nfunction getValueType(value) {\n  if (value == null) {\n    return '' + value;\n  }\n  const t = typeof value;\n  if (t !== 'object') {\n    return t;\n  }\n  if (typeof value.constructor !== 'function') {\n    return t;\n  }\n  return value.constructor.name;\n}\nfunction getMessageFormat(schemaType) {\n  const messageFormat = schemaType && schemaType.options && schemaType.options.cast || null;\n  if (typeof messageFormat === 'string') {\n    return messageFormat;\n  }\n}\n\n/*!\r\n * ignore\r\n */\n\nfunction formatMessage(model, kind, stringValue, path, messageFormat, valueType, reason) {\n  if (messageFormat != null) {\n    let ret = messageFormat.replace('{KIND}', kind).replace('{VALUE}', stringValue).replace('{PATH}', path);\n    if (model != null) {\n      ret = ret.replace('{MODEL}', model.modelName);\n    }\n    return ret;\n  } else {\n    const valueTypeMsg = valueType ? ' (type ' + valueType + ')' : '';\n    let ret = 'Cast to ' + kind + ' failed for value ' + stringValue + valueTypeMsg + ' at path \"' + path + '\"';\n    if (model != null) {\n      ret += ' for model \"' + model.modelName + '\"';\n    }\n    if (reason != null && typeof reason.constructor === 'function' && reason.constructor.name !== 'AssertionError' && reason.constructor.name !== 'Error') {\n      ret += ' because of \"' + reason.constructor.name + '\"';\n    }\n    return ret;\n  }\n}\n\n/*!\r\n * exports\r\n */\n\nmodule.exports = CastError;","map":{"version":3,"names":["MongooseError","require","util","CastError","constructor","type","value","path","reason","schemaType","arguments","length","stringValue","getStringValue","valueType","getValueType","messageFormat","getMessageFormat","msg","formatMessage","init","toJSON","kind","name","message","copy","other","setModel","model","Object","defineProperty","prototype","inspect","replace","startsWith","t","options","cast","ret","modelName","valueTypeMsg","module","exports"],"sources":["C:/Users/91930/Desktop/Github projects/Pharmacy Demo/back-end/node_modules/mongoose/lib/error/cast.js"],"sourcesContent":["'use strict';\r\n\r\n/*!\r\n * Module dependencies.\r\n */\r\n\r\nconst MongooseError = require('./mongooseError');\r\nconst util = require('util');\r\n\r\n/**\r\n * Casting Error constructor.\r\n *\r\n * @param {String} type\r\n * @param {String} value\r\n * @inherits MongooseError\r\n * @api private\r\n */\r\n\r\nclass CastError extends MongooseError {\r\n  constructor(type, value, path, reason, schemaType) {\r\n    // If no args, assume we'll `init()` later.\r\n    if (arguments.length > 0) {\r\n      const stringValue = getStringValue(value);\r\n      const valueType = getValueType(value);\r\n      const messageFormat = getMessageFormat(schemaType);\r\n      const msg = formatMessage(null, type, stringValue, path, messageFormat, valueType, reason);\r\n      super(msg);\r\n      this.init(type, value, path, reason, schemaType);\r\n    } else {\r\n      super(formatMessage());\r\n    }\r\n  }\r\n\r\n  toJSON() {\r\n    return {\r\n      stringValue: this.stringValue,\r\n      valueType: this.valueType,\r\n      kind: this.kind,\r\n      value: this.value,\r\n      path: this.path,\r\n      reason: this.reason,\r\n      name: this.name,\r\n      message: this.message\r\n    };\r\n  }\r\n  /*!\r\n   * ignore\r\n   */\r\n  init(type, value, path, reason, schemaType) {\r\n    this.stringValue = getStringValue(value);\r\n    this.messageFormat = getMessageFormat(schemaType);\r\n    this.kind = type;\r\n    this.value = value;\r\n    this.path = path;\r\n    this.reason = reason;\r\n    this.valueType = getValueType(value);\r\n  }\r\n\r\n  /**\r\n   * ignore\r\n   * @param {Readonly<CastError>} other\r\n   * @api private\r\n   */\r\n  copy(other) {\r\n    this.messageFormat = other.messageFormat;\r\n    this.stringValue = other.stringValue;\r\n    this.kind = other.kind;\r\n    this.value = other.value;\r\n    this.path = other.path;\r\n    this.reason = other.reason;\r\n    this.message = other.message;\r\n    this.valueType = other.valueType;\r\n  }\r\n\r\n  /*!\r\n   * ignore\r\n   */\r\n  setModel(model) {\r\n    this.model = model;\r\n    this.message = formatMessage(model, this.kind, this.stringValue, this.path,\r\n      this.messageFormat, this.valueType);\r\n  }\r\n}\r\n\r\nObject.defineProperty(CastError.prototype, 'name', {\r\n  value: 'CastError'\r\n});\r\n\r\nfunction getStringValue(value) {\r\n  let stringValue = util.inspect(value);\r\n  stringValue = stringValue.replace(/^'|'$/g, '\"');\r\n  if (!stringValue.startsWith('\"')) {\r\n    stringValue = '\"' + stringValue + '\"';\r\n  }\r\n  return stringValue;\r\n}\r\n\r\nfunction getValueType(value) {\r\n  if (value == null) {\r\n    return '' + value;\r\n  }\r\n\r\n  const t = typeof value;\r\n  if (t !== 'object') {\r\n    return t;\r\n  }\r\n  if (typeof value.constructor !== 'function') {\r\n    return t;\r\n  }\r\n  return value.constructor.name;\r\n}\r\n\r\nfunction getMessageFormat(schemaType) {\r\n  const messageFormat = schemaType &&\r\n  schemaType.options &&\r\n  schemaType.options.cast || null;\r\n  if (typeof messageFormat === 'string') {\r\n    return messageFormat;\r\n  }\r\n}\r\n\r\n/*!\r\n * ignore\r\n */\r\n\r\nfunction formatMessage(model, kind, stringValue, path, messageFormat, valueType, reason) {\r\n  if (messageFormat != null) {\r\n    let ret = messageFormat.\r\n      replace('{KIND}', kind).\r\n      replace('{VALUE}', stringValue).\r\n      replace('{PATH}', path);\r\n    if (model != null) {\r\n      ret = ret.replace('{MODEL}', model.modelName);\r\n    }\r\n\r\n    return ret;\r\n  } else {\r\n    const valueTypeMsg = valueType ? ' (type ' + valueType + ')' : '';\r\n    let ret = 'Cast to ' + kind + ' failed for value ' +\r\n      stringValue + valueTypeMsg + ' at path \"' + path + '\"';\r\n    if (model != null) {\r\n      ret += ' for model \"' + model.modelName + '\"';\r\n    }\r\n    if (reason != null &&\r\n        typeof reason.constructor === 'function' &&\r\n        reason.constructor.name !== 'AssertionError' &&\r\n        reason.constructor.name !== 'Error') {\r\n      ret += ' because of \"' + reason.constructor.name + '\"';\r\n    }\r\n    return ret;\r\n  }\r\n}\r\n\r\n/*!\r\n * exports\r\n */\r\n\r\nmodule.exports = CastError;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}