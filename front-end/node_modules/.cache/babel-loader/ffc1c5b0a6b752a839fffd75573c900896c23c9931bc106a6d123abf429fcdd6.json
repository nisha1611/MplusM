{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.equals = exports.isVanillaObject = exports.isFunction = exports.isObject = exports.isArray = exports.comparable = exports.typeChecker = void 0;\nconst typeChecker = type => {\n  const typeString = \"[object \" + type + \"]\";\n  return function (value) {\n    return getClassName(value) === typeString;\n  };\n};\nexports.typeChecker = typeChecker;\nconst getClassName = value => Object.prototype.toString.call(value);\nconst comparable = value => {\n  if (value instanceof Date) {\n    return value.getTime();\n  } else if ((0, exports.isArray)(value)) {\n    return value.map(exports.comparable);\n  } else if (value && typeof value.toJSON === \"function\") {\n    return value.toJSON();\n  }\n  return value;\n};\nexports.comparable = comparable;\nexports.isArray = (0, exports.typeChecker)(\"Array\");\nexports.isObject = (0, exports.typeChecker)(\"Object\");\nexports.isFunction = (0, exports.typeChecker)(\"Function\");\nconst isVanillaObject = value => {\n  return value && (value.constructor === Object || value.constructor === Array || value.constructor.toString() === \"function Object() { [native code] }\" || value.constructor.toString() === \"function Array() { [native code] }\") && !value.toJSON;\n};\nexports.isVanillaObject = isVanillaObject;\nconst equals = (a, b) => {\n  if (a == null && a == b) {\n    return true;\n  }\n  if (a === b) {\n    return true;\n  }\n  if (Object.prototype.toString.call(a) !== Object.prototype.toString.call(b)) {\n    return false;\n  }\n  if ((0, exports.isArray)(a)) {\n    if (a.length !== b.length) {\n      return false;\n    }\n    for (let i = 0, {\n        length\n      } = a; i < length; i++) {\n      if (!(0, exports.equals)(a[i], b[i])) return false;\n    }\n    return true;\n  } else if ((0, exports.isObject)(a)) {\n    if (Object.keys(a).length !== Object.keys(b).length) {\n      return false;\n    }\n    for (const key in a) {\n      if (!(0, exports.equals)(a[key], b[key])) return false;\n    }\n    return true;\n  }\n  return false;\n};\nexports.equals = equals;","map":{"version":3,"mappings":";;;;;;AAEO,MAAMA,WAAW,GAAWC,IAAI,IAAI;EACzC,MAAMC,UAAU,GAAG,UAAU,GAAGD,IAAI,GAAG,GAAG;EAC1C,OAAO,UAASE,KAAK;IACnB,OAAOC,YAAY,CAACD,KAAK,CAAC,KAAKD,UAAU;EAC3C,CAAC;AACH,CAAC;AALYG,mBAAW;AAOxB,MAAMD,YAAY,GAAGD,KAAK,IAAIG,MAAM,CAACC,SAAS,CAACC,QAAQ,CAACC,IAAI,CAACN,KAAK,CAAC;AAE5D,MAAMO,UAAU,GAAIP,KAAU,IAAI;EACvC,IAAIA,KAAK,YAAYQ,IAAI,EAAE;IACzB,OAAOR,KAAK,CAACS,OAAO,EAAE;GACvB,MAAM,IAAI,mBAAO,EAACT,KAAK,CAAC,EAAE;IACzB,OAAOA,KAAK,CAACU,GAAG,CAACR,kBAAU,CAAC;GAC7B,MAAM,IAAIF,KAAK,IAAI,OAAOA,KAAK,CAACW,MAAM,KAAK,UAAU,EAAE;IACtD,OAAOX,KAAK,CAACW,MAAM,EAAE;;EAGvB,OAAOX,KAAK;AACd,CAAC;AAVYE,kBAAU;AAYVA,eAAO,GAAG,uBAAW,EAAa,OAAO,CAAC;AAC1CA,gBAAQ,GAAG,uBAAW,EAAS,QAAQ,CAAC;AACxCA,kBAAU,GAAG,uBAAW,EAAW,UAAU,CAAC;AACpD,MAAMU,eAAe,GAAGZ,KAAK,IAAG;EACrC,OACEA,KAAK,KACJA,KAAK,CAACa,WAAW,KAAKV,MAAM,IAC3BH,KAAK,CAACa,WAAW,KAAKC,KAAK,IAC3Bd,KAAK,CAACa,WAAW,CAACR,QAAQ,EAAE,KAAK,qCAAqC,IACtEL,KAAK,CAACa,WAAW,CAACR,QAAQ,EAAE,KAAK,oCAAoC,CAAC,IACxE,CAACL,KAAK,CAACW,MAAM;AAEjB,CAAC;AATYT,uBAAe;AAWrB,MAAMa,MAAM,GAAG,CAACC,CAAC,EAAEC,CAAC,KAAI;EAC7B,IAAID,CAAC,IAAI,IAAI,IAAIA,CAAC,IAAIC,CAAC,EAAE;IACvB,OAAO,IAAI;;EAEb,IAAID,CAAC,KAAKC,CAAC,EAAE;IACX,OAAO,IAAI;;EAGb,IAAId,MAAM,CAACC,SAAS,CAACC,QAAQ,CAACC,IAAI,CAACU,CAAC,CAAC,KAAKb,MAAM,CAACC,SAAS,CAACC,QAAQ,CAACC,IAAI,CAACW,CAAC,CAAC,EAAE;IAC3E,OAAO,KAAK;;EAGd,IAAI,mBAAO,EAACD,CAAC,CAAC,EAAE;IACd,IAAIA,CAAC,CAACE,MAAM,KAAKD,CAAC,CAACC,MAAM,EAAE;MACzB,OAAO,KAAK;;IAEd,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAE;QAAED;MAAM,CAAE,GAAGF,CAAC,EAAEG,CAAC,GAAGD,MAAM,EAAEC,CAAC,EAAE,EAAE;MAC/C,IAAI,CAAC,kBAAM,EAACH,CAAC,CAACG,CAAC,CAAC,EAAEF,CAAC,CAACE,CAAC,CAAC,CAAC,EAAE,OAAO,KAAK;;IAEvC,OAAO,IAAI;GACZ,MAAM,IAAI,oBAAQ,EAACH,CAAC,CAAC,EAAE;IACtB,IAAIb,MAAM,CAACiB,IAAI,CAACJ,CAAC,CAAC,CAACE,MAAM,KAAKf,MAAM,CAACiB,IAAI,CAACH,CAAC,CAAC,CAACC,MAAM,EAAE;MACnD,OAAO,KAAK;;IAEd,KAAK,MAAMG,GAAG,IAAIL,CAAC,EAAE;MACnB,IAAI,CAAC,kBAAM,EAACA,CAAC,CAACK,GAAG,CAAC,EAAEJ,CAAC,CAACI,GAAG,CAAC,CAAC,EAAE,OAAO,KAAK;;IAE3C,OAAO,IAAI;;EAEb,OAAO,KAAK;AACd,CAAC;AA9BYnB,cAAM","names":["typeChecker","type","typeString","value","getClassName","exports","Object","prototype","toString","call","comparable","Date","getTime","map","toJSON","isVanillaObject","constructor","Array","equals","a","b","length","i","keys","key"],"sources":["C:\\Users\\91930\\Desktop\\Github projects\\Pharmacy Demo\\back-end\\node_modules\\sift\\src\\utils.ts"],"sourcesContent":["export type Key = string | number;\r\nexport type Comparator = (a, b) => boolean;\r\nexport const typeChecker = <TType>(type) => {\r\n  const typeString = \"[object \" + type + \"]\";\r\n  return function(value): value is TType {\r\n    return getClassName(value) === typeString;\r\n  };\r\n};\r\n\r\nconst getClassName = value => Object.prototype.toString.call(value);\r\n\r\nexport const comparable = (value: any) => {\r\n  if (value instanceof Date) {\r\n    return value.getTime();\r\n  } else if (isArray(value)) {\r\n    return value.map(comparable);\r\n  } else if (value && typeof value.toJSON === \"function\") {\r\n    return value.toJSON();\r\n  }\r\n\r\n  return value;\r\n};\r\n\r\nexport const isArray = typeChecker<Array<any>>(\"Array\");\r\nexport const isObject = typeChecker<Object>(\"Object\");\r\nexport const isFunction = typeChecker<Function>(\"Function\");\r\nexport const isVanillaObject = value => {\r\n  return (\r\n    value &&\r\n    (value.constructor === Object ||\r\n      value.constructor === Array ||\r\n      value.constructor.toString() === \"function Object() { [native code] }\" ||\r\n      value.constructor.toString() === \"function Array() { [native code] }\") &&\r\n    !value.toJSON\r\n  );\r\n};\r\n\r\nexport const equals = (a, b) => {\r\n  if (a == null && a == b) {\r\n    return true;\r\n  }\r\n  if (a === b) {\r\n    return true;\r\n  }\r\n\r\n  if (Object.prototype.toString.call(a) !== Object.prototype.toString.call(b)) {\r\n    return false;\r\n  }\r\n\r\n  if (isArray(a)) {\r\n    if (a.length !== b.length) {\r\n      return false;\r\n    }\r\n    for (let i = 0, { length } = a; i < length; i++) {\r\n      if (!equals(a[i], b[i])) return false;\r\n    }\r\n    return true;\r\n  } else if (isObject(a)) {\r\n    if (Object.keys(a).length !== Object.keys(b).length) {\r\n      return false;\r\n    }\r\n    for (const key in a) {\r\n      if (!equals(a[key], b[key])) return false;\r\n    }\r\n    return true;\r\n  }\r\n  return false;\r\n};\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}