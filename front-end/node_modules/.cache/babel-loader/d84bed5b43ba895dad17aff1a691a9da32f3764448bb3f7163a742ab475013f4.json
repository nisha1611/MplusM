{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FindOneAndUpdateOperation = exports.FindOneAndReplaceOperation = exports.FindOneAndDeleteOperation = exports.ReturnDocument = void 0;\nconst error_1 = require(\"../error\");\nconst read_preference_1 = require(\"../read_preference\");\nconst sort_1 = require(\"../sort\");\nconst utils_1 = require(\"../utils\");\nconst command_1 = require(\"./command\");\nconst operation_1 = require(\"./operation\");\n/** @public */\nexports.ReturnDocument = Object.freeze({\n  BEFORE: 'before',\n  AFTER: 'after'\n});\nfunction configureFindAndModifyCmdBaseUpdateOpts(cmdBase, options) {\n  cmdBase.new = options.returnDocument === exports.ReturnDocument.AFTER;\n  cmdBase.upsert = options.upsert === true;\n  if (options.bypassDocumentValidation === true) {\n    cmdBase.bypassDocumentValidation = options.bypassDocumentValidation;\n  }\n  return cmdBase;\n}\n/** @internal */\nclass FindAndModifyOperation extends command_1.CommandOperation {\n  constructor(collection, query, options) {\n    super(collection, options);\n    this.options = options !== null && options !== void 0 ? options : {};\n    this.cmdBase = {\n      remove: false,\n      new: false,\n      upsert: false\n    };\n    const sort = (0, sort_1.formatSort)(options.sort);\n    if (sort) {\n      this.cmdBase.sort = sort;\n    }\n    if (options.projection) {\n      this.cmdBase.fields = options.projection;\n    }\n    if (options.maxTimeMS) {\n      this.cmdBase.maxTimeMS = options.maxTimeMS;\n    }\n    // Decorate the findAndModify command with the write Concern\n    if (options.writeConcern) {\n      this.cmdBase.writeConcern = options.writeConcern;\n    }\n    if (options.let) {\n      this.cmdBase.let = options.let;\n    }\n    // we check for undefined specifically here to allow falsy values\n    // eslint-disable-next-line no-restricted-syntax\n    if (options.comment !== undefined) {\n      this.cmdBase.comment = options.comment;\n    }\n    // force primary read preference\n    this.readPreference = read_preference_1.ReadPreference.primary;\n    this.collection = collection;\n    this.query = query;\n  }\n  execute(server, session, callback) {\n    var _a;\n    const coll = this.collection;\n    const query = this.query;\n    const options = {\n      ...this.options,\n      ...this.bsonOptions\n    };\n    // Create findAndModify command object\n    const cmd = {\n      findAndModify: coll.collectionName,\n      query: query,\n      ...this.cmdBase\n    };\n    // Have we specified collation\n    try {\n      (0, utils_1.decorateWithCollation)(cmd, coll, options);\n    } catch (err) {\n      return callback(err);\n    }\n    if (options.hint) {\n      // TODO: once this method becomes a CommandOperation we will have the server\n      // in place to check.\n      const unacknowledgedWrite = ((_a = this.writeConcern) === null || _a === void 0 ? void 0 : _a.w) === 0;\n      if (unacknowledgedWrite || (0, utils_1.maxWireVersion)(server) < 8) {\n        callback(new error_1.MongoCompatibilityError('The current topology does not support a hint on findAndModify commands'));\n        return;\n      }\n      cmd.hint = options.hint;\n    }\n    // Execute the command\n    super.executeCommand(server, session, cmd, (err, result) => {\n      if (err) return callback(err);\n      return callback(undefined, result);\n    });\n  }\n}\n/** @internal */\nclass FindOneAndDeleteOperation extends FindAndModifyOperation {\n  constructor(collection, filter, options) {\n    // Basic validation\n    if (filter == null || typeof filter !== 'object') {\n      throw new error_1.MongoInvalidArgumentError('Argument \"filter\" must be an object');\n    }\n    super(collection, filter, options);\n    this.cmdBase.remove = true;\n  }\n}\nexports.FindOneAndDeleteOperation = FindOneAndDeleteOperation;\n/** @internal */\nclass FindOneAndReplaceOperation extends FindAndModifyOperation {\n  constructor(collection, filter, replacement, options) {\n    if (filter == null || typeof filter !== 'object') {\n      throw new error_1.MongoInvalidArgumentError('Argument \"filter\" must be an object');\n    }\n    if (replacement == null || typeof replacement !== 'object') {\n      throw new error_1.MongoInvalidArgumentError('Argument \"replacement\" must be an object');\n    }\n    if ((0, utils_1.hasAtomicOperators)(replacement)) {\n      throw new error_1.MongoInvalidArgumentError('Replacement document must not contain atomic operators');\n    }\n    super(collection, filter, options);\n    this.cmdBase.update = replacement;\n    configureFindAndModifyCmdBaseUpdateOpts(this.cmdBase, options);\n  }\n}\nexports.FindOneAndReplaceOperation = FindOneAndReplaceOperation;\n/** @internal */\nclass FindOneAndUpdateOperation extends FindAndModifyOperation {\n  constructor(collection, filter, update, options) {\n    if (filter == null || typeof filter !== 'object') {\n      throw new error_1.MongoInvalidArgumentError('Argument \"filter\" must be an object');\n    }\n    if (update == null || typeof update !== 'object') {\n      throw new error_1.MongoInvalidArgumentError('Argument \"update\" must be an object');\n    }\n    if (!(0, utils_1.hasAtomicOperators)(update)) {\n      throw new error_1.MongoInvalidArgumentError('Update document requires atomic operators');\n    }\n    super(collection, filter, options);\n    this.cmdBase.update = update;\n    configureFindAndModifyCmdBaseUpdateOpts(this.cmdBase, options);\n    if (options.arrayFilters) {\n      this.cmdBase.arrayFilters = options.arrayFilters;\n    }\n  }\n}\nexports.FindOneAndUpdateOperation = FindOneAndUpdateOperation;\n(0, operation_1.defineAspects)(FindAndModifyOperation, [operation_1.Aspect.WRITE_OPERATION, operation_1.Aspect.RETRYABLE, operation_1.Aspect.EXPLAINABLE]);","map":{"version":3,"mappings":"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","names":["exports","Object","freeze","BEFORE","AFTER","configureFindAndModifyCmdBaseUpdateOpts","cmdBase","options","new","returnDocument","upsert","bypassDocumentValidation","FindAndModifyOperation","command_1","constructor","collection","query","remove","sort","projection","fields","maxTimeMS","writeConcern","let","comment","undefined","readPreference","read_preference_1","primary","execute","server","session","callback","coll","bsonOptions","cmd","findAndModify","collectionName","err","hint","unacknowledgedWrite","w","error_1","executeCommand","result","FindOneAndDeleteOperation","filter","FindOneAndReplaceOperation","replacement","update","FindOneAndUpdateOperation","arrayFilters","operation_1","WRITE_OPERATION","RETRYABLE","EXPLAINABLE"],"sources":["C:\\Users\\91930\\Desktop\\Github projects\\Pharmacy Demo\\back-end\\node_modules\\mongodb\\src\\operations\\find_and_modify.ts"],"sourcesContent":["import type { Document } from '../bson';\r\nimport type { Collection } from '../collection';\r\nimport { MongoCompatibilityError, MongoInvalidArgumentError } from '../error';\r\nimport { ReadPreference } from '../read_preference';\r\nimport type { Server } from '../sdam/server';\r\nimport type { ClientSession } from '../sessions';\r\nimport { formatSort, Sort, SortForCmd } from '../sort';\r\nimport { Callback, decorateWithCollation, hasAtomicOperators, maxWireVersion } from '../utils';\r\nimport type { WriteConcern, WriteConcernSettings } from '../write_concern';\r\nimport { CommandOperation, CommandOperationOptions } from './command';\r\nimport { Aspect, defineAspects } from './operation';\r\n\r\n/** @public */\r\nexport const ReturnDocument = Object.freeze({\r\n  BEFORE: 'before',\r\n  AFTER: 'after'\r\n} as const);\r\n\r\n/** @public */\r\nexport type ReturnDocument = typeof ReturnDocument[keyof typeof ReturnDocument];\r\n\r\n/** @public */\r\nexport interface FindOneAndDeleteOptions extends CommandOperationOptions {\r\n  /** An optional hint for query optimization. See the {@link https://docs.mongodb.com/manual/reference/command/update/#update-command-hint|update command} reference for more information.*/\r\n  hint?: Document;\r\n  /** Limits the fields to return for all matching documents. */\r\n  projection?: Document;\r\n  /** Determines which document the operation modifies if the query selects multiple documents. */\r\n  sort?: Sort;\r\n  /** Map of parameter names and values that can be accessed using $$var (requires MongoDB 5.0). */\r\n  let?: Document;\r\n}\r\n\r\n/** @public */\r\nexport interface FindOneAndReplaceOptions extends CommandOperationOptions {\r\n  /** Allow driver to bypass schema validation in MongoDB 3.2 or higher. */\r\n  bypassDocumentValidation?: boolean;\r\n  /** An optional hint for query optimization. See the {@link https://docs.mongodb.com/manual/reference/command/update/#update-command-hint|update command} reference for more information.*/\r\n  hint?: Document;\r\n  /** Limits the fields to return for all matching documents. */\r\n  projection?: Document;\r\n  /** When set to 'after', returns the updated document rather than the original. The default is 'before'.  */\r\n  returnDocument?: ReturnDocument;\r\n  /** Determines which document the operation modifies if the query selects multiple documents. */\r\n  sort?: Sort;\r\n  /** Upsert the document if it does not exist. */\r\n  upsert?: boolean;\r\n  /** Map of parameter names and values that can be accessed using $$var (requires MongoDB 5.0). */\r\n  let?: Document;\r\n}\r\n\r\n/** @public */\r\nexport interface FindOneAndUpdateOptions extends CommandOperationOptions {\r\n  /** Optional list of array filters referenced in filtered positional operators */\r\n  arrayFilters?: Document[];\r\n  /** Allow driver to bypass schema validation in MongoDB 3.2 or higher. */\r\n  bypassDocumentValidation?: boolean;\r\n  /** An optional hint for query optimization. See the {@link https://docs.mongodb.com/manual/reference/command/update/#update-command-hint|update command} reference for more information.*/\r\n  hint?: Document;\r\n  /** Limits the fields to return for all matching documents. */\r\n  projection?: Document;\r\n  /** When set to 'after', returns the updated document rather than the original. The default is 'before'.  */\r\n  returnDocument?: ReturnDocument;\r\n  /** Determines which document the operation modifies if the query selects multiple documents. */\r\n  sort?: Sort;\r\n  /** Upsert the document if it does not exist. */\r\n  upsert?: boolean;\r\n  /** Map of parameter names and values that can be accessed using $$var (requires MongoDB 5.0). */\r\n  let?: Document;\r\n}\r\n\r\n/** @internal */\r\ninterface FindAndModifyCmdBase {\r\n  remove: boolean;\r\n  new: boolean;\r\n  upsert: boolean;\r\n  update?: Document;\r\n  sort?: SortForCmd;\r\n  fields?: Document;\r\n  bypassDocumentValidation?: boolean;\r\n  arrayFilters?: Document[];\r\n  maxTimeMS?: number;\r\n  let?: Document;\r\n  writeConcern?: WriteConcern | WriteConcernSettings;\r\n  /**\r\n   * Comment to apply to the operation.\r\n   *\r\n   * In server versions pre-4.4, 'comment' must be string.  A server\r\n   * error will be thrown if any other type is provided.\r\n   *\r\n   * In server versions 4.4 and above, 'comment' can be any valid BSON type.\r\n   */\r\n  comment?: unknown;\r\n}\r\n\r\nfunction configureFindAndModifyCmdBaseUpdateOpts(\r\n  cmdBase: FindAndModifyCmdBase,\r\n  options: FindOneAndReplaceOptions | FindOneAndUpdateOptions\r\n): FindAndModifyCmdBase {\r\n  cmdBase.new = options.returnDocument === ReturnDocument.AFTER;\r\n  cmdBase.upsert = options.upsert === true;\r\n\r\n  if (options.bypassDocumentValidation === true) {\r\n    cmdBase.bypassDocumentValidation = options.bypassDocumentValidation;\r\n  }\r\n  return cmdBase;\r\n}\r\n\r\n/** @internal */\r\nclass FindAndModifyOperation extends CommandOperation<Document> {\r\n  override options: FindOneAndReplaceOptions | FindOneAndUpdateOptions | FindOneAndDeleteOptions;\r\n  cmdBase: FindAndModifyCmdBase;\r\n  collection: Collection;\r\n  query: Document;\r\n  doc?: Document;\r\n\r\n  constructor(\r\n    collection: Collection,\r\n    query: Document,\r\n    options: FindOneAndReplaceOptions | FindOneAndUpdateOptions | FindOneAndDeleteOptions\r\n  ) {\r\n    super(collection, options);\r\n    this.options = options ?? {};\r\n    this.cmdBase = {\r\n      remove: false,\r\n      new: false,\r\n      upsert: false\r\n    };\r\n\r\n    const sort = formatSort(options.sort);\r\n    if (sort) {\r\n      this.cmdBase.sort = sort;\r\n    }\r\n\r\n    if (options.projection) {\r\n      this.cmdBase.fields = options.projection;\r\n    }\r\n\r\n    if (options.maxTimeMS) {\r\n      this.cmdBase.maxTimeMS = options.maxTimeMS;\r\n    }\r\n\r\n    // Decorate the findAndModify command with the write Concern\r\n    if (options.writeConcern) {\r\n      this.cmdBase.writeConcern = options.writeConcern;\r\n    }\r\n\r\n    if (options.let) {\r\n      this.cmdBase.let = options.let;\r\n    }\r\n\r\n    // we check for undefined specifically here to allow falsy values\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    if (options.comment !== undefined) {\r\n      this.cmdBase.comment = options.comment;\r\n    }\r\n\r\n    // force primary read preference\r\n    this.readPreference = ReadPreference.primary;\r\n\r\n    this.collection = collection;\r\n    this.query = query;\r\n  }\r\n\r\n  override execute(\r\n    server: Server,\r\n    session: ClientSession | undefined,\r\n    callback: Callback<Document>\r\n  ): void {\r\n    const coll = this.collection;\r\n    const query = this.query;\r\n    const options = { ...this.options, ...this.bsonOptions };\r\n\r\n    // Create findAndModify command object\r\n    const cmd: Document = {\r\n      findAndModify: coll.collectionName,\r\n      query: query,\r\n      ...this.cmdBase\r\n    };\r\n\r\n    // Have we specified collation\r\n    try {\r\n      decorateWithCollation(cmd, coll, options);\r\n    } catch (err) {\r\n      return callback(err);\r\n    }\r\n\r\n    if (options.hint) {\r\n      // TODO: once this method becomes a CommandOperation we will have the server\r\n      // in place to check.\r\n      const unacknowledgedWrite = this.writeConcern?.w === 0;\r\n      if (unacknowledgedWrite || maxWireVersion(server) < 8) {\r\n        callback(\r\n          new MongoCompatibilityError(\r\n            'The current topology does not support a hint on findAndModify commands'\r\n          )\r\n        );\r\n\r\n        return;\r\n      }\r\n\r\n      cmd.hint = options.hint;\r\n    }\r\n\r\n    // Execute the command\r\n    super.executeCommand(server, session, cmd, (err, result) => {\r\n      if (err) return callback(err);\r\n      return callback(undefined, result);\r\n    });\r\n  }\r\n}\r\n\r\n/** @internal */\r\nexport class FindOneAndDeleteOperation extends FindAndModifyOperation {\r\n  constructor(collection: Collection, filter: Document, options: FindOneAndDeleteOptions) {\r\n    // Basic validation\r\n    if (filter == null || typeof filter !== 'object') {\r\n      throw new MongoInvalidArgumentError('Argument \"filter\" must be an object');\r\n    }\r\n\r\n    super(collection, filter, options);\r\n    this.cmdBase.remove = true;\r\n  }\r\n}\r\n\r\n/** @internal */\r\nexport class FindOneAndReplaceOperation extends FindAndModifyOperation {\r\n  constructor(\r\n    collection: Collection,\r\n    filter: Document,\r\n    replacement: Document,\r\n    options: FindOneAndReplaceOptions\r\n  ) {\r\n    if (filter == null || typeof filter !== 'object') {\r\n      throw new MongoInvalidArgumentError('Argument \"filter\" must be an object');\r\n    }\r\n\r\n    if (replacement == null || typeof replacement !== 'object') {\r\n      throw new MongoInvalidArgumentError('Argument \"replacement\" must be an object');\r\n    }\r\n\r\n    if (hasAtomicOperators(replacement)) {\r\n      throw new MongoInvalidArgumentError('Replacement document must not contain atomic operators');\r\n    }\r\n\r\n    super(collection, filter, options);\r\n    this.cmdBase.update = replacement;\r\n    configureFindAndModifyCmdBaseUpdateOpts(this.cmdBase, options);\r\n  }\r\n}\r\n\r\n/** @internal */\r\nexport class FindOneAndUpdateOperation extends FindAndModifyOperation {\r\n  constructor(\r\n    collection: Collection,\r\n    filter: Document,\r\n    update: Document,\r\n    options: FindOneAndUpdateOptions\r\n  ) {\r\n    if (filter == null || typeof filter !== 'object') {\r\n      throw new MongoInvalidArgumentError('Argument \"filter\" must be an object');\r\n    }\r\n\r\n    if (update == null || typeof update !== 'object') {\r\n      throw new MongoInvalidArgumentError('Argument \"update\" must be an object');\r\n    }\r\n\r\n    if (!hasAtomicOperators(update)) {\r\n      throw new MongoInvalidArgumentError('Update document requires atomic operators');\r\n    }\r\n\r\n    super(collection, filter, options);\r\n    this.cmdBase.update = update;\r\n    configureFindAndModifyCmdBaseUpdateOpts(this.cmdBase, options);\r\n\r\n    if (options.arrayFilters) {\r\n      this.cmdBase.arrayFilters = options.arrayFilters;\r\n    }\r\n  }\r\n}\r\n\r\ndefineAspects(FindAndModifyOperation, [\r\n  Aspect.WRITE_OPERATION,\r\n  Aspect.RETRYABLE,\r\n  Aspect.EXPLAINABLE\r\n]);\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}