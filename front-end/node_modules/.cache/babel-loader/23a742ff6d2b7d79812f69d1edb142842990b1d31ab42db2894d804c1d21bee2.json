{"ast":null,"code":"/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n*/\n\n\"use strict\";\n\nconst createHash = require(\"../util/createHash\");\nconst ArraySerializer = require(\"./ArraySerializer\");\nconst DateObjectSerializer = require(\"./DateObjectSerializer\");\nconst ErrorObjectSerializer = require(\"./ErrorObjectSerializer\");\nconst MapObjectSerializer = require(\"./MapObjectSerializer\");\nconst NullPrototypeObjectSerializer = require(\"./NullPrototypeObjectSerializer\");\nconst PlainObjectSerializer = require(\"./PlainObjectSerializer\");\nconst RegExpObjectSerializer = require(\"./RegExpObjectSerializer\");\nconst SerializerMiddleware = require(\"./SerializerMiddleware\");\nconst SetObjectSerializer = require(\"./SetObjectSerializer\");\n\n/** @typedef {typeof import(\"../util/Hash\")} Hash */\n/** @typedef {import(\"./types\").ComplexSerializableType} ComplexSerializableType */\n/** @typedef {import(\"./types\").PrimitiveSerializableType} PrimitiveSerializableType */\n\n/** @typedef {new (...params: any[]) => any} Constructor */\n\n/*\r\n\r\nFormat:\r\n\r\nFile -> Section*\r\nSection -> ObjectSection | ReferenceSection | EscapeSection | OtherSection\r\n\r\nObjectSection -> ESCAPE (\r\n\tnumber:relativeOffset (number > 0) |\r\n\tstring:request (string|null):export\r\n) Section:value* ESCAPE ESCAPE_END_OBJECT\r\nReferenceSection -> ESCAPE number:relativeOffset (number < 0)\r\nEscapeSection -> ESCAPE ESCAPE_ESCAPE_VALUE (escaped value ESCAPE)\r\nEscapeSection -> ESCAPE ESCAPE_UNDEFINED (escaped value ESCAPE)\r\nOtherSection -> any (except ESCAPE)\r\n\r\nWhy using null as escape value?\r\nMultiple null values can merged by the BinaryMiddleware, which makes it very efficient\r\nTechnically any value can be used.\r\n\r\n*/\n\n/**\r\n * @typedef {Object} ObjectSerializerContext\r\n * @property {function(any): void} write\r\n */\n\n/**\r\n * @typedef {Object} ObjectDeserializerContext\r\n * @property {function(): any} read\r\n */\n\n/**\r\n * @typedef {Object} ObjectSerializer\r\n * @property {function(any, ObjectSerializerContext): void} serialize\r\n * @property {function(ObjectDeserializerContext): any} deserialize\r\n */\n\nconst setSetSize = (set, size) => {\n  let i = 0;\n  for (const item of set) {\n    if (i++ >= size) {\n      set.delete(item);\n    }\n  }\n};\nconst setMapSize = (map, size) => {\n  let i = 0;\n  for (const item of map.keys()) {\n    if (i++ >= size) {\n      map.delete(item);\n    }\n  }\n};\n\n/**\r\n * @param {Buffer} buffer buffer\r\n * @param {string | Hash} hashFunction hash function to use\r\n * @returns {string} hash\r\n */\nconst toHash = (buffer, hashFunction) => {\n  const hash = createHash(hashFunction);\n  hash.update(buffer);\n  return (/** @type {string} */hash.digest(\"latin1\")\n  );\n};\nconst ESCAPE = null;\nconst ESCAPE_ESCAPE_VALUE = null;\nconst ESCAPE_END_OBJECT = true;\nconst ESCAPE_UNDEFINED = false;\nconst CURRENT_VERSION = 2;\nconst serializers = new Map();\nconst serializerInversed = new Map();\nconst loadedRequests = new Set();\nconst NOT_SERIALIZABLE = {};\nconst jsTypes = new Map();\njsTypes.set(Object, new PlainObjectSerializer());\njsTypes.set(Array, new ArraySerializer());\njsTypes.set(null, new NullPrototypeObjectSerializer());\njsTypes.set(Map, new MapObjectSerializer());\njsTypes.set(Set, new SetObjectSerializer());\njsTypes.set(Date, new DateObjectSerializer());\njsTypes.set(RegExp, new RegExpObjectSerializer());\njsTypes.set(Error, new ErrorObjectSerializer(Error));\njsTypes.set(EvalError, new ErrorObjectSerializer(EvalError));\njsTypes.set(RangeError, new ErrorObjectSerializer(RangeError));\njsTypes.set(ReferenceError, new ErrorObjectSerializer(ReferenceError));\njsTypes.set(SyntaxError, new ErrorObjectSerializer(SyntaxError));\njsTypes.set(TypeError, new ErrorObjectSerializer(TypeError));\n\n// If in a sandboxed environment (e. g. jest), this escapes the sandbox and registers\n// real Object and Array types to. These types may occur in the wild too, e. g. when\n// using Structured Clone in postMessage.\nif (exports.constructor !== Object) {\n  const Obj = /** @type {typeof Object} */exports.constructor;\n  const Fn = /** @type {typeof Function} */Obj.constructor;\n  for (const [type, config] of Array.from(jsTypes)) {\n    if (type) {\n      const Type = new Fn(`return ${type.name};`)();\n      jsTypes.set(Type, config);\n    }\n  }\n}\n{\n  let i = 1;\n  for (const [type, serializer] of jsTypes) {\n    serializers.set(type, {\n      request: \"\",\n      name: i++,\n      serializer\n    });\n  }\n}\nfor (const {\n  request,\n  name,\n  serializer\n} of serializers.values()) {\n  serializerInversed.set(`${request}/${name}`, serializer);\n}\n\n/** @type {Map<RegExp, (request: string) => boolean>} */\nconst loaders = new Map();\n\n/**\r\n * @typedef {ComplexSerializableType[]} DeserializedType\r\n * @typedef {PrimitiveSerializableType[]} SerializedType\r\n * @extends {SerializerMiddleware<DeserializedType, SerializedType>}\r\n */\nclass ObjectMiddleware extends SerializerMiddleware {\n  /**\r\n   * @param {function(any): void} extendContext context extensions\r\n   * @param {string | Hash} hashFunction hash function to use\r\n   */\n  constructor(extendContext) {\n    let hashFunction = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"md4\";\n    super();\n    this.extendContext = extendContext;\n    this._hashFunction = hashFunction;\n  }\n  /**\r\n   * @param {RegExp} regExp RegExp for which the request is tested\r\n   * @param {function(string): boolean} loader loader to load the request, returns true when successful\r\n   * @returns {void}\r\n   */\n  static registerLoader(regExp, loader) {\n    loaders.set(regExp, loader);\n  }\n\n  /**\r\n   * @param {Constructor} Constructor the constructor\r\n   * @param {string} request the request which will be required when deserializing\r\n   * @param {string} name the name to make multiple serializer unique when sharing a request\r\n   * @param {ObjectSerializer} serializer the serializer\r\n   * @returns {void}\r\n   */\n  static register(Constructor, request, name, serializer) {\n    const key = request + \"/\" + name;\n    if (serializers.has(Constructor)) {\n      throw new Error(`ObjectMiddleware.register: serializer for ${Constructor.name} is already registered`);\n    }\n    if (serializerInversed.has(key)) {\n      throw new Error(`ObjectMiddleware.register: serializer for ${key} is already registered`);\n    }\n    serializers.set(Constructor, {\n      request,\n      name,\n      serializer\n    });\n    serializerInversed.set(key, serializer);\n  }\n\n  /**\r\n   * @param {Constructor} Constructor the constructor\r\n   * @returns {void}\r\n   */\n  static registerNotSerializable(Constructor) {\n    if (serializers.has(Constructor)) {\n      throw new Error(`ObjectMiddleware.registerNotSerializable: serializer for ${Constructor.name} is already registered`);\n    }\n    serializers.set(Constructor, NOT_SERIALIZABLE);\n  }\n  static getSerializerFor(object) {\n    const proto = Object.getPrototypeOf(object);\n    let c;\n    if (proto === null) {\n      // Object created with Object.create(null)\n      c = null;\n    } else {\n      c = proto.constructor;\n      if (!c) {\n        throw new Error(\"Serialization of objects with prototype without valid constructor property not possible\");\n      }\n    }\n    const config = serializers.get(c);\n    if (!config) throw new Error(`No serializer registered for ${c.name}`);\n    if (config === NOT_SERIALIZABLE) throw NOT_SERIALIZABLE;\n    return config;\n  }\n  static getDeserializerFor(request, name) {\n    const key = request + \"/\" + name;\n    const serializer = serializerInversed.get(key);\n    if (serializer === undefined) {\n      throw new Error(`No deserializer registered for ${key}`);\n    }\n    return serializer;\n  }\n  static _getDeserializerForWithoutError(request, name) {\n    const key = request + \"/\" + name;\n    const serializer = serializerInversed.get(key);\n    return serializer;\n  }\n\n  /**\r\n   * @param {DeserializedType} data data\r\n   * @param {Object} context context object\r\n   * @returns {SerializedType|Promise<SerializedType>} serialized data\r\n   */\n  serialize(data, context) {\n    /** @type {any[]} */\n    let result = [CURRENT_VERSION];\n    let currentPos = 0;\n    let referenceable = new Map();\n    const addReferenceable = item => {\n      referenceable.set(item, currentPos++);\n    };\n    let bufferDedupeMap = new Map();\n    const dedupeBuffer = buf => {\n      const len = buf.length;\n      const entry = bufferDedupeMap.get(len);\n      if (entry === undefined) {\n        bufferDedupeMap.set(len, buf);\n        return buf;\n      }\n      if (Buffer.isBuffer(entry)) {\n        if (len < 32) {\n          if (buf.equals(entry)) {\n            return entry;\n          }\n          bufferDedupeMap.set(len, [entry, buf]);\n          return buf;\n        } else {\n          const hash = toHash(entry, this._hashFunction);\n          const newMap = new Map();\n          newMap.set(hash, entry);\n          bufferDedupeMap.set(len, newMap);\n          const hashBuf = toHash(buf, this._hashFunction);\n          if (hash === hashBuf) {\n            return entry;\n          }\n          return buf;\n        }\n      } else if (Array.isArray(entry)) {\n        if (entry.length < 16) {\n          for (const item of entry) {\n            if (buf.equals(item)) {\n              return item;\n            }\n          }\n          entry.push(buf);\n          return buf;\n        } else {\n          const newMap = new Map();\n          const hash = toHash(buf, this._hashFunction);\n          let found;\n          for (const item of entry) {\n            const itemHash = toHash(item, this._hashFunction);\n            newMap.set(itemHash, item);\n            if (found === undefined && itemHash === hash) found = item;\n          }\n          bufferDedupeMap.set(len, newMap);\n          if (found === undefined) {\n            newMap.set(hash, buf);\n            return buf;\n          } else {\n            return found;\n          }\n        }\n      } else {\n        const hash = toHash(buf, this._hashFunction);\n        const item = entry.get(hash);\n        if (item !== undefined) {\n          return item;\n        }\n        entry.set(hash, buf);\n        return buf;\n      }\n    };\n    let currentPosTypeLookup = 0;\n    let objectTypeLookup = new Map();\n    const cycleStack = new Set();\n    const stackToString = item => {\n      const arr = Array.from(cycleStack);\n      arr.push(item);\n      return arr.map(item => {\n        if (typeof item === \"string\") {\n          if (item.length > 100) {\n            return `String ${JSON.stringify(item.slice(0, 100)).slice(0, -1)}...\"`;\n          }\n          return `String ${JSON.stringify(item)}`;\n        }\n        try {\n          const {\n            request,\n            name\n          } = ObjectMiddleware.getSerializerFor(item);\n          if (request) {\n            return `${request}${name ? `.${name}` : \"\"}`;\n          }\n        } catch (e) {\n          // ignore -> fallback\n        }\n        if (typeof item === \"object\" && item !== null) {\n          if (item.constructor) {\n            if (item.constructor === Object) return `Object { ${Object.keys(item).join(\", \")} }`;\n            if (item.constructor === Map) return `Map { ${item.size} items }`;\n            if (item.constructor === Array) return `Array { ${item.length} items }`;\n            if (item.constructor === Set) return `Set { ${item.size} items }`;\n            if (item.constructor === RegExp) return item.toString();\n            return `${item.constructor.name}`;\n          }\n          return `Object [null prototype] { ${Object.keys(item).join(\", \")} }`;\n        }\n        try {\n          return `${item}`;\n        } catch (e) {\n          return `(${e.message})`;\n        }\n      }).join(\" -> \");\n    };\n    let hasDebugInfoAttached;\n    let ctx = {\n      write(value, key) {\n        try {\n          process(value);\n        } catch (e) {\n          if (e !== NOT_SERIALIZABLE) {\n            if (hasDebugInfoAttached === undefined) hasDebugInfoAttached = new WeakSet();\n            if (!hasDebugInfoAttached.has(e)) {\n              e.message += `\\nwhile serializing ${stackToString(value)}`;\n              hasDebugInfoAttached.add(e);\n            }\n          }\n          throw e;\n        }\n      },\n      setCircularReference(ref) {\n        addReferenceable(ref);\n      },\n      snapshot() {\n        return {\n          length: result.length,\n          cycleStackSize: cycleStack.size,\n          referenceableSize: referenceable.size,\n          currentPos,\n          objectTypeLookupSize: objectTypeLookup.size,\n          currentPosTypeLookup\n        };\n      },\n      rollback(snapshot) {\n        result.length = snapshot.length;\n        setSetSize(cycleStack, snapshot.cycleStackSize);\n        setMapSize(referenceable, snapshot.referenceableSize);\n        currentPos = snapshot.currentPos;\n        setMapSize(objectTypeLookup, snapshot.objectTypeLookupSize);\n        currentPosTypeLookup = snapshot.currentPosTypeLookup;\n      },\n      ...context\n    };\n    this.extendContext(ctx);\n    const process = item => {\n      if (Buffer.isBuffer(item)) {\n        // check if we can emit a reference\n        const ref = referenceable.get(item);\n        if (ref !== undefined) {\n          result.push(ESCAPE, ref - currentPos);\n          return;\n        }\n        const alreadyUsedBuffer = dedupeBuffer(item);\n        if (alreadyUsedBuffer !== item) {\n          const ref = referenceable.get(alreadyUsedBuffer);\n          if (ref !== undefined) {\n            referenceable.set(item, ref);\n            result.push(ESCAPE, ref - currentPos);\n            return;\n          }\n          item = alreadyUsedBuffer;\n        }\n        addReferenceable(item);\n        result.push(item);\n      } else if (item === ESCAPE) {\n        result.push(ESCAPE, ESCAPE_ESCAPE_VALUE);\n      } else if (typeof item === \"object\"\n      // We don't have to check for null as ESCAPE is null and this has been checked before\n      ) {\n        // check if we can emit a reference\n        const ref = referenceable.get(item);\n        if (ref !== undefined) {\n          result.push(ESCAPE, ref - currentPos);\n          return;\n        }\n        if (cycleStack.has(item)) {\n          throw new Error(`This is a circular references. To serialize circular references use 'setCircularReference' somewhere in the circle during serialize and deserialize.`);\n        }\n        const {\n          request,\n          name,\n          serializer\n        } = ObjectMiddleware.getSerializerFor(item);\n        const key = `${request}/${name}`;\n        const lastIndex = objectTypeLookup.get(key);\n        if (lastIndex === undefined) {\n          objectTypeLookup.set(key, currentPosTypeLookup++);\n          result.push(ESCAPE, request, name);\n        } else {\n          result.push(ESCAPE, currentPosTypeLookup - lastIndex);\n        }\n        cycleStack.add(item);\n        try {\n          serializer.serialize(item, ctx);\n        } finally {\n          cycleStack.delete(item);\n        }\n        result.push(ESCAPE, ESCAPE_END_OBJECT);\n        addReferenceable(item);\n      } else if (typeof item === \"string\") {\n        if (item.length > 1) {\n          // short strings are shorter when not emitting a reference (this saves 1 byte per empty string)\n          // check if we can emit a reference\n          const ref = referenceable.get(item);\n          if (ref !== undefined) {\n            result.push(ESCAPE, ref - currentPos);\n            return;\n          }\n          addReferenceable(item);\n        }\n        if (item.length > 102400 && context.logger) {\n          context.logger.warn(`Serializing big strings (${Math.round(item.length / 1024)}kiB) impacts deserialization performance (consider using Buffer instead and decode when needed)`);\n        }\n        result.push(item);\n      } else if (typeof item === \"function\") {\n        if (!SerializerMiddleware.isLazy(item)) throw new Error(\"Unexpected function \" + item);\n        /** @type {SerializedType} */\n        const serializedData = SerializerMiddleware.getLazySerializedValue(item);\n        if (serializedData !== undefined) {\n          if (typeof serializedData === \"function\") {\n            result.push(serializedData);\n          } else {\n            throw new Error(\"Not implemented\");\n          }\n        } else if (SerializerMiddleware.isLazy(item, this)) {\n          throw new Error(\"Not implemented\");\n        } else {\n          const data = SerializerMiddleware.serializeLazy(item, data => this.serialize([data], context));\n          SerializerMiddleware.setLazySerializedValue(item, data);\n          result.push(data);\n        }\n      } else if (item === undefined) {\n        result.push(ESCAPE, ESCAPE_UNDEFINED);\n      } else {\n        result.push(item);\n      }\n    };\n    try {\n      for (const item of data) {\n        process(item);\n      }\n      return result;\n    } catch (e) {\n      if (e === NOT_SERIALIZABLE) return null;\n      throw e;\n    } finally {\n      // Get rid of these references to avoid leaking memory\n      // This happens because the optimized code v8 generates\n      // is optimized for our \"ctx.write\" method so it will reference\n      // it from e. g. Dependency.prototype.serialize -(IC)-> ctx.write\n      data = result = referenceable = bufferDedupeMap = objectTypeLookup = ctx = undefined;\n    }\n  }\n\n  /**\r\n   * @param {SerializedType} data data\r\n   * @param {Object} context context object\r\n   * @returns {DeserializedType|Promise<DeserializedType>} deserialized data\r\n   */\n  deserialize(data, context) {\n    let currentDataPos = 0;\n    const read = () => {\n      if (currentDataPos >= data.length) throw new Error(\"Unexpected end of stream\");\n      return data[currentDataPos++];\n    };\n    if (read() !== CURRENT_VERSION) throw new Error(\"Version mismatch, serializer changed\");\n    let currentPos = 0;\n    let referenceable = [];\n    const addReferenceable = item => {\n      referenceable.push(item);\n      currentPos++;\n    };\n    let currentPosTypeLookup = 0;\n    let objectTypeLookup = [];\n    let result = [];\n    let ctx = {\n      read() {\n        return decodeValue();\n      },\n      setCircularReference(ref) {\n        addReferenceable(ref);\n      },\n      ...context\n    };\n    this.extendContext(ctx);\n    const decodeValue = () => {\n      const item = read();\n      if (item === ESCAPE) {\n        const nextItem = read();\n        if (nextItem === ESCAPE_ESCAPE_VALUE) {\n          return ESCAPE;\n        } else if (nextItem === ESCAPE_UNDEFINED) {\n          return undefined;\n        } else if (nextItem === ESCAPE_END_OBJECT) {\n          throw new Error(`Unexpected end of object at position ${currentDataPos - 1}`);\n        } else {\n          const request = nextItem;\n          let serializer;\n          if (typeof request === \"number\") {\n            if (request < 0) {\n              // relative reference\n              return referenceable[currentPos + request];\n            }\n            serializer = objectTypeLookup[currentPosTypeLookup - request];\n          } else {\n            if (typeof request !== \"string\") {\n              throw new Error(`Unexpected type (${typeof request}) of request ` + `at position ${currentDataPos - 1}`);\n            }\n            const name = read();\n            serializer = ObjectMiddleware._getDeserializerForWithoutError(request, name);\n            if (serializer === undefined) {\n              if (request && !loadedRequests.has(request)) {\n                let loaded = false;\n                for (const [regExp, loader] of loaders) {\n                  if (regExp.test(request)) {\n                    if (loader(request)) {\n                      loaded = true;\n                      break;\n                    }\n                  }\n                }\n                if (!loaded) {\n                  require(request);\n                }\n                loadedRequests.add(request);\n              }\n              serializer = ObjectMiddleware.getDeserializerFor(request, name);\n            }\n            objectTypeLookup.push(serializer);\n            currentPosTypeLookup++;\n          }\n          try {\n            const item = serializer.deserialize(ctx);\n            const end1 = read();\n            if (end1 !== ESCAPE) {\n              throw new Error(\"Expected end of object\");\n            }\n            const end2 = read();\n            if (end2 !== ESCAPE_END_OBJECT) {\n              throw new Error(\"Expected end of object\");\n            }\n            addReferenceable(item);\n            return item;\n          } catch (err) {\n            // As this is only for error handling, we omit creating a Map for\n            // faster access to this information, as this would affect performance\n            // in the good case\n            let serializerEntry;\n            for (const entry of serializers) {\n              if (entry[1].serializer === serializer) {\n                serializerEntry = entry;\n                break;\n              }\n            }\n            const name = !serializerEntry ? \"unknown\" : !serializerEntry[1].request ? serializerEntry[0].name : serializerEntry[1].name ? `${serializerEntry[1].request} ${serializerEntry[1].name}` : serializerEntry[1].request;\n            err.message += `\\n(during deserialization of ${name})`;\n            throw err;\n          }\n        }\n      } else if (typeof item === \"string\") {\n        if (item.length > 1) {\n          addReferenceable(item);\n        }\n        return item;\n      } else if (Buffer.isBuffer(item)) {\n        addReferenceable(item);\n        return item;\n      } else if (typeof item === \"function\") {\n        return SerializerMiddleware.deserializeLazy(item, data => this.deserialize(data, context)[0]);\n      } else {\n        return item;\n      }\n    };\n    try {\n      while (currentDataPos < data.length) {\n        result.push(decodeValue());\n      }\n      return result;\n    } finally {\n      // Get rid of these references to avoid leaking memory\n      // This happens because the optimized code v8 generates\n      // is optimized for our \"ctx.read\" method so it will reference\n      // it from e. g. Dependency.prototype.deserialize -(IC)-> ctx.read\n      result = referenceable = data = objectTypeLookup = ctx = undefined;\n    }\n  }\n}\nmodule.exports = ObjectMiddleware;\nmodule.exports.NOT_SERIALIZABLE = NOT_SERIALIZABLE;","map":{"version":3,"names":["createHash","require","ArraySerializer","DateObjectSerializer","ErrorObjectSerializer","MapObjectSerializer","NullPrototypeObjectSerializer","PlainObjectSerializer","RegExpObjectSerializer","SerializerMiddleware","SetObjectSerializer","setSetSize","set","size","i","item","delete","setMapSize","map","keys","toHash","buffer","hashFunction","hash","update","digest","ESCAPE","ESCAPE_ESCAPE_VALUE","ESCAPE_END_OBJECT","ESCAPE_UNDEFINED","CURRENT_VERSION","serializers","Map","serializerInversed","loadedRequests","Set","NOT_SERIALIZABLE","jsTypes","Object","Array","Date","RegExp","Error","EvalError","RangeError","ReferenceError","SyntaxError","TypeError","exports","constructor","Obj","Fn","type","config","from","Type","name","serializer","request","values","loaders","ObjectMiddleware","extendContext","_hashFunction","registerLoader","regExp","loader","register","Constructor","key","has","registerNotSerializable","getSerializerFor","object","proto","getPrototypeOf","c","get","getDeserializerFor","undefined","_getDeserializerForWithoutError","serialize","data","context","result","currentPos","referenceable","addReferenceable","bufferDedupeMap","dedupeBuffer","buf","len","length","entry","Buffer","isBuffer","equals","newMap","hashBuf","isArray","push","found","itemHash","currentPosTypeLookup","objectTypeLookup","cycleStack","stackToString","arr","JSON","stringify","slice","e","join","toString","message","hasDebugInfoAttached","ctx","write","value","process","WeakSet","add","setCircularReference","ref","snapshot","cycleStackSize","referenceableSize","objectTypeLookupSize","rollback","alreadyUsedBuffer","lastIndex","logger","warn","Math","round","isLazy","serializedData","getLazySerializedValue","serializeLazy","setLazySerializedValue","deserialize","currentDataPos","read","decodeValue","nextItem","loaded","test","end1","end2","err","serializerEntry","deserializeLazy","module"],"sources":["C:/Users/91930/Desktop/Github projects/Pharmacy Demo/front-end/node_modules/webpack/lib/serialization/ObjectMiddleware.js"],"sourcesContent":["/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n*/\r\n\r\n\"use strict\";\r\n\r\nconst createHash = require(\"../util/createHash\");\r\nconst ArraySerializer = require(\"./ArraySerializer\");\r\nconst DateObjectSerializer = require(\"./DateObjectSerializer\");\r\nconst ErrorObjectSerializer = require(\"./ErrorObjectSerializer\");\r\nconst MapObjectSerializer = require(\"./MapObjectSerializer\");\r\nconst NullPrototypeObjectSerializer = require(\"./NullPrototypeObjectSerializer\");\r\nconst PlainObjectSerializer = require(\"./PlainObjectSerializer\");\r\nconst RegExpObjectSerializer = require(\"./RegExpObjectSerializer\");\r\nconst SerializerMiddleware = require(\"./SerializerMiddleware\");\r\nconst SetObjectSerializer = require(\"./SetObjectSerializer\");\r\n\r\n/** @typedef {typeof import(\"../util/Hash\")} Hash */\r\n/** @typedef {import(\"./types\").ComplexSerializableType} ComplexSerializableType */\r\n/** @typedef {import(\"./types\").PrimitiveSerializableType} PrimitiveSerializableType */\r\n\r\n/** @typedef {new (...params: any[]) => any} Constructor */\r\n\r\n/*\r\n\r\nFormat:\r\n\r\nFile -> Section*\r\nSection -> ObjectSection | ReferenceSection | EscapeSection | OtherSection\r\n\r\nObjectSection -> ESCAPE (\r\n\tnumber:relativeOffset (number > 0) |\r\n\tstring:request (string|null):export\r\n) Section:value* ESCAPE ESCAPE_END_OBJECT\r\nReferenceSection -> ESCAPE number:relativeOffset (number < 0)\r\nEscapeSection -> ESCAPE ESCAPE_ESCAPE_VALUE (escaped value ESCAPE)\r\nEscapeSection -> ESCAPE ESCAPE_UNDEFINED (escaped value ESCAPE)\r\nOtherSection -> any (except ESCAPE)\r\n\r\nWhy using null as escape value?\r\nMultiple null values can merged by the BinaryMiddleware, which makes it very efficient\r\nTechnically any value can be used.\r\n\r\n*/\r\n\r\n/**\r\n * @typedef {Object} ObjectSerializerContext\r\n * @property {function(any): void} write\r\n */\r\n\r\n/**\r\n * @typedef {Object} ObjectDeserializerContext\r\n * @property {function(): any} read\r\n */\r\n\r\n/**\r\n * @typedef {Object} ObjectSerializer\r\n * @property {function(any, ObjectSerializerContext): void} serialize\r\n * @property {function(ObjectDeserializerContext): any} deserialize\r\n */\r\n\r\nconst setSetSize = (set, size) => {\r\n\tlet i = 0;\r\n\tfor (const item of set) {\r\n\t\tif (i++ >= size) {\r\n\t\t\tset.delete(item);\r\n\t\t}\r\n\t}\r\n};\r\n\r\nconst setMapSize = (map, size) => {\r\n\tlet i = 0;\r\n\tfor (const item of map.keys()) {\r\n\t\tif (i++ >= size) {\r\n\t\t\tmap.delete(item);\r\n\t\t}\r\n\t}\r\n};\r\n\r\n/**\r\n * @param {Buffer} buffer buffer\r\n * @param {string | Hash} hashFunction hash function to use\r\n * @returns {string} hash\r\n */\r\nconst toHash = (buffer, hashFunction) => {\r\n\tconst hash = createHash(hashFunction);\r\n\thash.update(buffer);\r\n\treturn /** @type {string} */ (hash.digest(\"latin1\"));\r\n};\r\n\r\nconst ESCAPE = null;\r\nconst ESCAPE_ESCAPE_VALUE = null;\r\nconst ESCAPE_END_OBJECT = true;\r\nconst ESCAPE_UNDEFINED = false;\r\n\r\nconst CURRENT_VERSION = 2;\r\n\r\nconst serializers = new Map();\r\nconst serializerInversed = new Map();\r\n\r\nconst loadedRequests = new Set();\r\n\r\nconst NOT_SERIALIZABLE = {};\r\n\r\nconst jsTypes = new Map();\r\njsTypes.set(Object, new PlainObjectSerializer());\r\njsTypes.set(Array, new ArraySerializer());\r\njsTypes.set(null, new NullPrototypeObjectSerializer());\r\njsTypes.set(Map, new MapObjectSerializer());\r\njsTypes.set(Set, new SetObjectSerializer());\r\njsTypes.set(Date, new DateObjectSerializer());\r\njsTypes.set(RegExp, new RegExpObjectSerializer());\r\njsTypes.set(Error, new ErrorObjectSerializer(Error));\r\njsTypes.set(EvalError, new ErrorObjectSerializer(EvalError));\r\njsTypes.set(RangeError, new ErrorObjectSerializer(RangeError));\r\njsTypes.set(ReferenceError, new ErrorObjectSerializer(ReferenceError));\r\njsTypes.set(SyntaxError, new ErrorObjectSerializer(SyntaxError));\r\njsTypes.set(TypeError, new ErrorObjectSerializer(TypeError));\r\n\r\n// If in a sandboxed environment (e. g. jest), this escapes the sandbox and registers\r\n// real Object and Array types to. These types may occur in the wild too, e. g. when\r\n// using Structured Clone in postMessage.\r\nif (exports.constructor !== Object) {\r\n\tconst Obj = /** @type {typeof Object} */ (exports.constructor);\r\n\tconst Fn = /** @type {typeof Function} */ (Obj.constructor);\r\n\tfor (const [type, config] of Array.from(jsTypes)) {\r\n\t\tif (type) {\r\n\t\t\tconst Type = new Fn(`return ${type.name};`)();\r\n\t\t\tjsTypes.set(Type, config);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n{\r\n\tlet i = 1;\r\n\tfor (const [type, serializer] of jsTypes) {\r\n\t\tserializers.set(type, {\r\n\t\t\trequest: \"\",\r\n\t\t\tname: i++,\r\n\t\t\tserializer\r\n\t\t});\r\n\t}\r\n}\r\n\r\nfor (const { request, name, serializer } of serializers.values()) {\r\n\tserializerInversed.set(`${request}/${name}`, serializer);\r\n}\r\n\r\n/** @type {Map<RegExp, (request: string) => boolean>} */\r\nconst loaders = new Map();\r\n\r\n/**\r\n * @typedef {ComplexSerializableType[]} DeserializedType\r\n * @typedef {PrimitiveSerializableType[]} SerializedType\r\n * @extends {SerializerMiddleware<DeserializedType, SerializedType>}\r\n */\r\nclass ObjectMiddleware extends SerializerMiddleware {\r\n\t/**\r\n\t * @param {function(any): void} extendContext context extensions\r\n\t * @param {string | Hash} hashFunction hash function to use\r\n\t */\r\n\tconstructor(extendContext, hashFunction = \"md4\") {\r\n\t\tsuper();\r\n\t\tthis.extendContext = extendContext;\r\n\t\tthis._hashFunction = hashFunction;\r\n\t}\r\n\t/**\r\n\t * @param {RegExp} regExp RegExp for which the request is tested\r\n\t * @param {function(string): boolean} loader loader to load the request, returns true when successful\r\n\t * @returns {void}\r\n\t */\r\n\tstatic registerLoader(regExp, loader) {\r\n\t\tloaders.set(regExp, loader);\r\n\t}\r\n\r\n\t/**\r\n\t * @param {Constructor} Constructor the constructor\r\n\t * @param {string} request the request which will be required when deserializing\r\n\t * @param {string} name the name to make multiple serializer unique when sharing a request\r\n\t * @param {ObjectSerializer} serializer the serializer\r\n\t * @returns {void}\r\n\t */\r\n\tstatic register(Constructor, request, name, serializer) {\r\n\t\tconst key = request + \"/\" + name;\r\n\r\n\t\tif (serializers.has(Constructor)) {\r\n\t\t\tthrow new Error(\r\n\t\t\t\t`ObjectMiddleware.register: serializer for ${Constructor.name} is already registered`\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\tif (serializerInversed.has(key)) {\r\n\t\t\tthrow new Error(\r\n\t\t\t\t`ObjectMiddleware.register: serializer for ${key} is already registered`\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\tserializers.set(Constructor, {\r\n\t\t\trequest,\r\n\t\t\tname,\r\n\t\t\tserializer\r\n\t\t});\r\n\r\n\t\tserializerInversed.set(key, serializer);\r\n\t}\r\n\r\n\t/**\r\n\t * @param {Constructor} Constructor the constructor\r\n\t * @returns {void}\r\n\t */\r\n\tstatic registerNotSerializable(Constructor) {\r\n\t\tif (serializers.has(Constructor)) {\r\n\t\t\tthrow new Error(\r\n\t\t\t\t`ObjectMiddleware.registerNotSerializable: serializer for ${Constructor.name} is already registered`\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\tserializers.set(Constructor, NOT_SERIALIZABLE);\r\n\t}\r\n\r\n\tstatic getSerializerFor(object) {\r\n\t\tconst proto = Object.getPrototypeOf(object);\r\n\t\tlet c;\r\n\t\tif (proto === null) {\r\n\t\t\t// Object created with Object.create(null)\r\n\t\t\tc = null;\r\n\t\t} else {\r\n\t\t\tc = proto.constructor;\r\n\t\t\tif (!c) {\r\n\t\t\t\tthrow new Error(\r\n\t\t\t\t\t\"Serialization of objects with prototype without valid constructor property not possible\"\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t}\r\n\t\tconst config = serializers.get(c);\r\n\r\n\t\tif (!config) throw new Error(`No serializer registered for ${c.name}`);\r\n\t\tif (config === NOT_SERIALIZABLE) throw NOT_SERIALIZABLE;\r\n\r\n\t\treturn config;\r\n\t}\r\n\r\n\tstatic getDeserializerFor(request, name) {\r\n\t\tconst key = request + \"/\" + name;\r\n\t\tconst serializer = serializerInversed.get(key);\r\n\r\n\t\tif (serializer === undefined) {\r\n\t\t\tthrow new Error(`No deserializer registered for ${key}`);\r\n\t\t}\r\n\r\n\t\treturn serializer;\r\n\t}\r\n\r\n\tstatic _getDeserializerForWithoutError(request, name) {\r\n\t\tconst key = request + \"/\" + name;\r\n\t\tconst serializer = serializerInversed.get(key);\r\n\t\treturn serializer;\r\n\t}\r\n\r\n\t/**\r\n\t * @param {DeserializedType} data data\r\n\t * @param {Object} context context object\r\n\t * @returns {SerializedType|Promise<SerializedType>} serialized data\r\n\t */\r\n\tserialize(data, context) {\r\n\t\t/** @type {any[]} */\r\n\t\tlet result = [CURRENT_VERSION];\r\n\t\tlet currentPos = 0;\r\n\t\tlet referenceable = new Map();\r\n\t\tconst addReferenceable = item => {\r\n\t\t\treferenceable.set(item, currentPos++);\r\n\t\t};\r\n\t\tlet bufferDedupeMap = new Map();\r\n\t\tconst dedupeBuffer = buf => {\r\n\t\t\tconst len = buf.length;\r\n\t\t\tconst entry = bufferDedupeMap.get(len);\r\n\t\t\tif (entry === undefined) {\r\n\t\t\t\tbufferDedupeMap.set(len, buf);\r\n\t\t\t\treturn buf;\r\n\t\t\t}\r\n\t\t\tif (Buffer.isBuffer(entry)) {\r\n\t\t\t\tif (len < 32) {\r\n\t\t\t\t\tif (buf.equals(entry)) {\r\n\t\t\t\t\t\treturn entry;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbufferDedupeMap.set(len, [entry, buf]);\r\n\t\t\t\t\treturn buf;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tconst hash = toHash(entry, this._hashFunction);\r\n\t\t\t\t\tconst newMap = new Map();\r\n\t\t\t\t\tnewMap.set(hash, entry);\r\n\t\t\t\t\tbufferDedupeMap.set(len, newMap);\r\n\t\t\t\t\tconst hashBuf = toHash(buf, this._hashFunction);\r\n\t\t\t\t\tif (hash === hashBuf) {\r\n\t\t\t\t\t\treturn entry;\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn buf;\r\n\t\t\t\t}\r\n\t\t\t} else if (Array.isArray(entry)) {\r\n\t\t\t\tif (entry.length < 16) {\r\n\t\t\t\t\tfor (const item of entry) {\r\n\t\t\t\t\t\tif (buf.equals(item)) {\r\n\t\t\t\t\t\t\treturn item;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tentry.push(buf);\r\n\t\t\t\t\treturn buf;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tconst newMap = new Map();\r\n\t\t\t\t\tconst hash = toHash(buf, this._hashFunction);\r\n\t\t\t\t\tlet found;\r\n\t\t\t\t\tfor (const item of entry) {\r\n\t\t\t\t\t\tconst itemHash = toHash(item, this._hashFunction);\r\n\t\t\t\t\t\tnewMap.set(itemHash, item);\r\n\t\t\t\t\t\tif (found === undefined && itemHash === hash) found = item;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbufferDedupeMap.set(len, newMap);\r\n\t\t\t\t\tif (found === undefined) {\r\n\t\t\t\t\t\tnewMap.set(hash, buf);\r\n\t\t\t\t\t\treturn buf;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\treturn found;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tconst hash = toHash(buf, this._hashFunction);\r\n\t\t\t\tconst item = entry.get(hash);\r\n\t\t\t\tif (item !== undefined) {\r\n\t\t\t\t\treturn item;\r\n\t\t\t\t}\r\n\t\t\t\tentry.set(hash, buf);\r\n\t\t\t\treturn buf;\r\n\t\t\t}\r\n\t\t};\r\n\t\tlet currentPosTypeLookup = 0;\r\n\t\tlet objectTypeLookup = new Map();\r\n\t\tconst cycleStack = new Set();\r\n\t\tconst stackToString = item => {\r\n\t\t\tconst arr = Array.from(cycleStack);\r\n\t\t\tarr.push(item);\r\n\t\t\treturn arr\r\n\t\t\t\t.map(item => {\r\n\t\t\t\t\tif (typeof item === \"string\") {\r\n\t\t\t\t\t\tif (item.length > 100) {\r\n\t\t\t\t\t\t\treturn `String ${JSON.stringify(item.slice(0, 100)).slice(\r\n\t\t\t\t\t\t\t\t0,\r\n\t\t\t\t\t\t\t\t-1\r\n\t\t\t\t\t\t\t)}...\"`;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn `String ${JSON.stringify(item)}`;\r\n\t\t\t\t\t}\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tconst { request, name } = ObjectMiddleware.getSerializerFor(item);\r\n\t\t\t\t\t\tif (request) {\r\n\t\t\t\t\t\t\treturn `${request}${name ? `.${name}` : \"\"}`;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} catch (e) {\r\n\t\t\t\t\t\t// ignore -> fallback\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (typeof item === \"object\" && item !== null) {\r\n\t\t\t\t\t\tif (item.constructor) {\r\n\t\t\t\t\t\t\tif (item.constructor === Object)\r\n\t\t\t\t\t\t\t\treturn `Object { ${Object.keys(item).join(\", \")} }`;\r\n\t\t\t\t\t\t\tif (item.constructor === Map) return `Map { ${item.size} items }`;\r\n\t\t\t\t\t\t\tif (item.constructor === Array)\r\n\t\t\t\t\t\t\t\treturn `Array { ${item.length} items }`;\r\n\t\t\t\t\t\t\tif (item.constructor === Set) return `Set { ${item.size} items }`;\r\n\t\t\t\t\t\t\tif (item.constructor === RegExp) return item.toString();\r\n\t\t\t\t\t\t\treturn `${item.constructor.name}`;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn `Object [null prototype] { ${Object.keys(item).join(\r\n\t\t\t\t\t\t\t\", \"\r\n\t\t\t\t\t\t)} }`;\r\n\t\t\t\t\t}\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\treturn `${item}`;\r\n\t\t\t\t\t} catch (e) {\r\n\t\t\t\t\t\treturn `(${e.message})`;\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t\t.join(\" -> \");\r\n\t\t};\r\n\t\tlet hasDebugInfoAttached;\r\n\t\tlet ctx = {\r\n\t\t\twrite(value, key) {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tprocess(value);\r\n\t\t\t\t} catch (e) {\r\n\t\t\t\t\tif (e !== NOT_SERIALIZABLE) {\r\n\t\t\t\t\t\tif (hasDebugInfoAttached === undefined)\r\n\t\t\t\t\t\t\thasDebugInfoAttached = new WeakSet();\r\n\t\t\t\t\t\tif (!hasDebugInfoAttached.has(e)) {\r\n\t\t\t\t\t\t\te.message += `\\nwhile serializing ${stackToString(value)}`;\r\n\t\t\t\t\t\t\thasDebugInfoAttached.add(e);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthrow e;\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tsetCircularReference(ref) {\r\n\t\t\t\taddReferenceable(ref);\r\n\t\t\t},\r\n\t\t\tsnapshot() {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tlength: result.length,\r\n\t\t\t\t\tcycleStackSize: cycleStack.size,\r\n\t\t\t\t\treferenceableSize: referenceable.size,\r\n\t\t\t\t\tcurrentPos,\r\n\t\t\t\t\tobjectTypeLookupSize: objectTypeLookup.size,\r\n\t\t\t\t\tcurrentPosTypeLookup\r\n\t\t\t\t};\r\n\t\t\t},\r\n\t\t\trollback(snapshot) {\r\n\t\t\t\tresult.length = snapshot.length;\r\n\t\t\t\tsetSetSize(cycleStack, snapshot.cycleStackSize);\r\n\t\t\t\tsetMapSize(referenceable, snapshot.referenceableSize);\r\n\t\t\t\tcurrentPos = snapshot.currentPos;\r\n\t\t\t\tsetMapSize(objectTypeLookup, snapshot.objectTypeLookupSize);\r\n\t\t\t\tcurrentPosTypeLookup = snapshot.currentPosTypeLookup;\r\n\t\t\t},\r\n\t\t\t...context\r\n\t\t};\r\n\t\tthis.extendContext(ctx);\r\n\t\tconst process = item => {\r\n\t\t\tif (Buffer.isBuffer(item)) {\r\n\t\t\t\t// check if we can emit a reference\r\n\t\t\t\tconst ref = referenceable.get(item);\r\n\t\t\t\tif (ref !== undefined) {\r\n\t\t\t\t\tresult.push(ESCAPE, ref - currentPos);\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tconst alreadyUsedBuffer = dedupeBuffer(item);\r\n\t\t\t\tif (alreadyUsedBuffer !== item) {\r\n\t\t\t\t\tconst ref = referenceable.get(alreadyUsedBuffer);\r\n\t\t\t\t\tif (ref !== undefined) {\r\n\t\t\t\t\t\treferenceable.set(item, ref);\r\n\t\t\t\t\t\tresult.push(ESCAPE, ref - currentPos);\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t\titem = alreadyUsedBuffer;\r\n\t\t\t\t}\r\n\t\t\t\taddReferenceable(item);\r\n\r\n\t\t\t\tresult.push(item);\r\n\t\t\t} else if (item === ESCAPE) {\r\n\t\t\t\tresult.push(ESCAPE, ESCAPE_ESCAPE_VALUE);\r\n\t\t\t} else if (\r\n\t\t\t\ttypeof item === \"object\"\r\n\t\t\t\t// We don't have to check for null as ESCAPE is null and this has been checked before\r\n\t\t\t) {\r\n\t\t\t\t// check if we can emit a reference\r\n\t\t\t\tconst ref = referenceable.get(item);\r\n\t\t\t\tif (ref !== undefined) {\r\n\t\t\t\t\tresult.push(ESCAPE, ref - currentPos);\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (cycleStack.has(item)) {\r\n\t\t\t\t\tthrow new Error(\r\n\t\t\t\t\t\t`This is a circular references. To serialize circular references use 'setCircularReference' somewhere in the circle during serialize and deserialize.`\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst { request, name, serializer } =\r\n\t\t\t\t\tObjectMiddleware.getSerializerFor(item);\r\n\t\t\t\tconst key = `${request}/${name}`;\r\n\t\t\t\tconst lastIndex = objectTypeLookup.get(key);\r\n\r\n\t\t\t\tif (lastIndex === undefined) {\r\n\t\t\t\t\tobjectTypeLookup.set(key, currentPosTypeLookup++);\r\n\r\n\t\t\t\t\tresult.push(ESCAPE, request, name);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tresult.push(ESCAPE, currentPosTypeLookup - lastIndex);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tcycleStack.add(item);\r\n\r\n\t\t\t\ttry {\r\n\t\t\t\t\tserializer.serialize(item, ctx);\r\n\t\t\t\t} finally {\r\n\t\t\t\t\tcycleStack.delete(item);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tresult.push(ESCAPE, ESCAPE_END_OBJECT);\r\n\r\n\t\t\t\taddReferenceable(item);\r\n\t\t\t} else if (typeof item === \"string\") {\r\n\t\t\t\tif (item.length > 1) {\r\n\t\t\t\t\t// short strings are shorter when not emitting a reference (this saves 1 byte per empty string)\r\n\t\t\t\t\t// check if we can emit a reference\r\n\t\t\t\t\tconst ref = referenceable.get(item);\r\n\t\t\t\t\tif (ref !== undefined) {\r\n\t\t\t\t\t\tresult.push(ESCAPE, ref - currentPos);\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t\taddReferenceable(item);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (item.length > 102400 && context.logger) {\r\n\t\t\t\t\tcontext.logger.warn(\r\n\t\t\t\t\t\t`Serializing big strings (${Math.round(\r\n\t\t\t\t\t\t\titem.length / 1024\r\n\t\t\t\t\t\t)}kiB) impacts deserialization performance (consider using Buffer instead and decode when needed)`\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tresult.push(item);\r\n\t\t\t} else if (typeof item === \"function\") {\r\n\t\t\t\tif (!SerializerMiddleware.isLazy(item))\r\n\t\t\t\t\tthrow new Error(\"Unexpected function \" + item);\r\n\t\t\t\t/** @type {SerializedType} */\r\n\t\t\t\tconst serializedData =\r\n\t\t\t\t\tSerializerMiddleware.getLazySerializedValue(item);\r\n\t\t\t\tif (serializedData !== undefined) {\r\n\t\t\t\t\tif (typeof serializedData === \"function\") {\r\n\t\t\t\t\t\tresult.push(serializedData);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthrow new Error(\"Not implemented\");\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (SerializerMiddleware.isLazy(item, this)) {\r\n\t\t\t\t\tthrow new Error(\"Not implemented\");\r\n\t\t\t\t} else {\r\n\t\t\t\t\tconst data = SerializerMiddleware.serializeLazy(item, data =>\r\n\t\t\t\t\t\tthis.serialize([data], context)\r\n\t\t\t\t\t);\r\n\t\t\t\t\tSerializerMiddleware.setLazySerializedValue(item, data);\r\n\t\t\t\t\tresult.push(data);\r\n\t\t\t\t}\r\n\t\t\t} else if (item === undefined) {\r\n\t\t\t\tresult.push(ESCAPE, ESCAPE_UNDEFINED);\r\n\t\t\t} else {\r\n\t\t\t\tresult.push(item);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\ttry {\r\n\t\t\tfor (const item of data) {\r\n\t\t\t\tprocess(item);\r\n\t\t\t}\r\n\t\t\treturn result;\r\n\t\t} catch (e) {\r\n\t\t\tif (e === NOT_SERIALIZABLE) return null;\r\n\r\n\t\t\tthrow e;\r\n\t\t} finally {\r\n\t\t\t// Get rid of these references to avoid leaking memory\r\n\t\t\t// This happens because the optimized code v8 generates\r\n\t\t\t// is optimized for our \"ctx.write\" method so it will reference\r\n\t\t\t// it from e. g. Dependency.prototype.serialize -(IC)-> ctx.write\r\n\t\t\tdata =\r\n\t\t\t\tresult =\r\n\t\t\t\treferenceable =\r\n\t\t\t\tbufferDedupeMap =\r\n\t\t\t\tobjectTypeLookup =\r\n\t\t\t\tctx =\r\n\t\t\t\t\tundefined;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @param {SerializedType} data data\r\n\t * @param {Object} context context object\r\n\t * @returns {DeserializedType|Promise<DeserializedType>} deserialized data\r\n\t */\r\n\tdeserialize(data, context) {\r\n\t\tlet currentDataPos = 0;\r\n\t\tconst read = () => {\r\n\t\t\tif (currentDataPos >= data.length)\r\n\t\t\t\tthrow new Error(\"Unexpected end of stream\");\r\n\r\n\t\t\treturn data[currentDataPos++];\r\n\t\t};\r\n\r\n\t\tif (read() !== CURRENT_VERSION)\r\n\t\t\tthrow new Error(\"Version mismatch, serializer changed\");\r\n\r\n\t\tlet currentPos = 0;\r\n\t\tlet referenceable = [];\r\n\t\tconst addReferenceable = item => {\r\n\t\t\treferenceable.push(item);\r\n\t\t\tcurrentPos++;\r\n\t\t};\r\n\t\tlet currentPosTypeLookup = 0;\r\n\t\tlet objectTypeLookup = [];\r\n\t\tlet result = [];\r\n\t\tlet ctx = {\r\n\t\t\tread() {\r\n\t\t\t\treturn decodeValue();\r\n\t\t\t},\r\n\t\t\tsetCircularReference(ref) {\r\n\t\t\t\taddReferenceable(ref);\r\n\t\t\t},\r\n\t\t\t...context\r\n\t\t};\r\n\t\tthis.extendContext(ctx);\r\n\t\tconst decodeValue = () => {\r\n\t\t\tconst item = read();\r\n\r\n\t\t\tif (item === ESCAPE) {\r\n\t\t\t\tconst nextItem = read();\r\n\r\n\t\t\t\tif (nextItem === ESCAPE_ESCAPE_VALUE) {\r\n\t\t\t\t\treturn ESCAPE;\r\n\t\t\t\t} else if (nextItem === ESCAPE_UNDEFINED) {\r\n\t\t\t\t\treturn undefined;\r\n\t\t\t\t} else if (nextItem === ESCAPE_END_OBJECT) {\r\n\t\t\t\t\tthrow new Error(\r\n\t\t\t\t\t\t`Unexpected end of object at position ${currentDataPos - 1}`\r\n\t\t\t\t\t);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tconst request = nextItem;\r\n\t\t\t\t\tlet serializer;\r\n\r\n\t\t\t\t\tif (typeof request === \"number\") {\r\n\t\t\t\t\t\tif (request < 0) {\r\n\t\t\t\t\t\t\t// relative reference\r\n\t\t\t\t\t\t\treturn referenceable[currentPos + request];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tserializer = objectTypeLookup[currentPosTypeLookup - request];\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tif (typeof request !== \"string\") {\r\n\t\t\t\t\t\t\tthrow new Error(\r\n\t\t\t\t\t\t\t\t`Unexpected type (${typeof request}) of request ` +\r\n\t\t\t\t\t\t\t\t\t`at position ${currentDataPos - 1}`\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tconst name = read();\r\n\r\n\t\t\t\t\t\tserializer = ObjectMiddleware._getDeserializerForWithoutError(\r\n\t\t\t\t\t\t\trequest,\r\n\t\t\t\t\t\t\tname\r\n\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\tif (serializer === undefined) {\r\n\t\t\t\t\t\t\tif (request && !loadedRequests.has(request)) {\r\n\t\t\t\t\t\t\t\tlet loaded = false;\r\n\t\t\t\t\t\t\t\tfor (const [regExp, loader] of loaders) {\r\n\t\t\t\t\t\t\t\t\tif (regExp.test(request)) {\r\n\t\t\t\t\t\t\t\t\t\tif (loader(request)) {\r\n\t\t\t\t\t\t\t\t\t\t\tloaded = true;\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tif (!loaded) {\r\n\t\t\t\t\t\t\t\t\trequire(request);\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tloadedRequests.add(request);\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tserializer = ObjectMiddleware.getDeserializerFor(request, name);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tobjectTypeLookup.push(serializer);\r\n\t\t\t\t\t\tcurrentPosTypeLookup++;\r\n\t\t\t\t\t}\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tconst item = serializer.deserialize(ctx);\r\n\t\t\t\t\t\tconst end1 = read();\r\n\r\n\t\t\t\t\t\tif (end1 !== ESCAPE) {\r\n\t\t\t\t\t\t\tthrow new Error(\"Expected end of object\");\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tconst end2 = read();\r\n\r\n\t\t\t\t\t\tif (end2 !== ESCAPE_END_OBJECT) {\r\n\t\t\t\t\t\t\tthrow new Error(\"Expected end of object\");\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\taddReferenceable(item);\r\n\r\n\t\t\t\t\t\treturn item;\r\n\t\t\t\t\t} catch (err) {\r\n\t\t\t\t\t\t// As this is only for error handling, we omit creating a Map for\r\n\t\t\t\t\t\t// faster access to this information, as this would affect performance\r\n\t\t\t\t\t\t// in the good case\r\n\t\t\t\t\t\tlet serializerEntry;\r\n\t\t\t\t\t\tfor (const entry of serializers) {\r\n\t\t\t\t\t\t\tif (entry[1].serializer === serializer) {\r\n\t\t\t\t\t\t\t\tserializerEntry = entry;\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tconst name = !serializerEntry\r\n\t\t\t\t\t\t\t? \"unknown\"\r\n\t\t\t\t\t\t\t: !serializerEntry[1].request\r\n\t\t\t\t\t\t\t? serializerEntry[0].name\r\n\t\t\t\t\t\t\t: serializerEntry[1].name\r\n\t\t\t\t\t\t\t? `${serializerEntry[1].request} ${serializerEntry[1].name}`\r\n\t\t\t\t\t\t\t: serializerEntry[1].request;\r\n\t\t\t\t\t\terr.message += `\\n(during deserialization of ${name})`;\r\n\t\t\t\t\t\tthrow err;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} else if (typeof item === \"string\") {\r\n\t\t\t\tif (item.length > 1) {\r\n\t\t\t\t\taddReferenceable(item);\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn item;\r\n\t\t\t} else if (Buffer.isBuffer(item)) {\r\n\t\t\t\taddReferenceable(item);\r\n\r\n\t\t\t\treturn item;\r\n\t\t\t} else if (typeof item === \"function\") {\r\n\t\t\t\treturn SerializerMiddleware.deserializeLazy(\r\n\t\t\t\t\titem,\r\n\t\t\t\t\tdata => this.deserialize(data, context)[0]\r\n\t\t\t\t);\r\n\t\t\t} else {\r\n\t\t\t\treturn item;\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\ttry {\r\n\t\t\twhile (currentDataPos < data.length) {\r\n\t\t\t\tresult.push(decodeValue());\r\n\t\t\t}\r\n\t\t\treturn result;\r\n\t\t} finally {\r\n\t\t\t// Get rid of these references to avoid leaking memory\r\n\t\t\t// This happens because the optimized code v8 generates\r\n\t\t\t// is optimized for our \"ctx.read\" method so it will reference\r\n\t\t\t// it from e. g. Dependency.prototype.deserialize -(IC)-> ctx.read\r\n\t\t\tresult = referenceable = data = objectTypeLookup = ctx = undefined;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nmodule.exports = ObjectMiddleware;\r\nmodule.exports.NOT_SERIALIZABLE = NOT_SERIALIZABLE;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}