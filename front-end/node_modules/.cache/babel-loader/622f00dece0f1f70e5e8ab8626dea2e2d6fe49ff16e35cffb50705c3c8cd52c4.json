{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MongoCredentials = void 0;\nconst error_1 = require(\"../../error\");\nconst utils_1 = require(\"../../utils\");\nconst gssapi_1 = require(\"./gssapi\");\nconst providers_1 = require(\"./providers\");\n// https://github.com/mongodb/specifications/blob/master/source/auth/auth.rst\nfunction getDefaultAuthMechanism(hello) {\n  if (hello) {\n    // If hello contains saslSupportedMechs, use scram-sha-256\n    // if it is available, else scram-sha-1\n    if (Array.isArray(hello.saslSupportedMechs)) {\n      return hello.saslSupportedMechs.includes(providers_1.AuthMechanism.MONGODB_SCRAM_SHA256) ? providers_1.AuthMechanism.MONGODB_SCRAM_SHA256 : providers_1.AuthMechanism.MONGODB_SCRAM_SHA1;\n    }\n    // Fallback to legacy selection method. If wire version >= 3, use scram-sha-1\n    if (hello.maxWireVersion >= 3) {\n      return providers_1.AuthMechanism.MONGODB_SCRAM_SHA1;\n    }\n  }\n  // Default for wireprotocol < 3\n  return providers_1.AuthMechanism.MONGODB_CR;\n}\n/**\r\n * A representation of the credentials used by MongoDB\r\n * @public\r\n */\nclass MongoCredentials {\n  constructor(options) {\n    this.username = options.username;\n    this.password = options.password;\n    this.source = options.source;\n    if (!this.source && options.db) {\n      this.source = options.db;\n    }\n    this.mechanism = options.mechanism || providers_1.AuthMechanism.MONGODB_DEFAULT;\n    this.mechanismProperties = options.mechanismProperties || {};\n    if (this.mechanism.match(/MONGODB-AWS/i)) {\n      if (!this.username && process.env.AWS_ACCESS_KEY_ID) {\n        this.username = process.env.AWS_ACCESS_KEY_ID;\n      }\n      if (!this.password && process.env.AWS_SECRET_ACCESS_KEY) {\n        this.password = process.env.AWS_SECRET_ACCESS_KEY;\n      }\n      if (this.mechanismProperties.AWS_SESSION_TOKEN == null && process.env.AWS_SESSION_TOKEN != null) {\n        this.mechanismProperties = {\n          ...this.mechanismProperties,\n          AWS_SESSION_TOKEN: process.env.AWS_SESSION_TOKEN\n        };\n      }\n    }\n    if ('gssapiCanonicalizeHostName' in this.mechanismProperties) {\n      (0, utils_1.emitWarningOnce)('gssapiCanonicalizeHostName is deprecated. Please use CANONICALIZE_HOST_NAME instead.');\n      this.mechanismProperties.CANONICALIZE_HOST_NAME = this.mechanismProperties.gssapiCanonicalizeHostName;\n    }\n    Object.freeze(this.mechanismProperties);\n    Object.freeze(this);\n  }\n  /** Determines if two MongoCredentials objects are equivalent */\n  equals(other) {\n    return this.mechanism === other.mechanism && this.username === other.username && this.password === other.password && this.source === other.source;\n  }\n  /**\r\n   * If the authentication mechanism is set to \"default\", resolves the authMechanism\r\n   * based on the server version and server supported sasl mechanisms.\r\n   *\r\n   * @param hello - A hello response from the server\r\n   */\n  resolveAuthMechanism(hello) {\n    // If the mechanism is not \"default\", then it does not need to be resolved\n    if (this.mechanism.match(/DEFAULT/i)) {\n      return new MongoCredentials({\n        username: this.username,\n        password: this.password,\n        source: this.source,\n        mechanism: getDefaultAuthMechanism(hello),\n        mechanismProperties: this.mechanismProperties\n      });\n    }\n    return this;\n  }\n  validate() {\n    var _a;\n    if ((this.mechanism === providers_1.AuthMechanism.MONGODB_GSSAPI || this.mechanism === providers_1.AuthMechanism.MONGODB_CR || this.mechanism === providers_1.AuthMechanism.MONGODB_PLAIN || this.mechanism === providers_1.AuthMechanism.MONGODB_SCRAM_SHA1 || this.mechanism === providers_1.AuthMechanism.MONGODB_SCRAM_SHA256) && !this.username) {\n      throw new error_1.MongoMissingCredentialsError(`Username required for mechanism '${this.mechanism}'`);\n    }\n    if (providers_1.AUTH_MECHS_AUTH_SRC_EXTERNAL.has(this.mechanism)) {\n      if (this.source != null && this.source !== '$external') {\n        // TODO(NODE-3485): Replace this with a MongoAuthValidationError\n        throw new error_1.MongoAPIError(`Invalid source '${this.source}' for mechanism '${this.mechanism}' specified.`);\n      }\n    }\n    if (this.mechanism === providers_1.AuthMechanism.MONGODB_PLAIN && this.source == null) {\n      // TODO(NODE-3485): Replace this with a MongoAuthValidationError\n      throw new error_1.MongoAPIError('PLAIN Authentication Mechanism needs an auth source');\n    }\n    if (this.mechanism === providers_1.AuthMechanism.MONGODB_X509 && this.password != null) {\n      if (this.password === '') {\n        Reflect.set(this, 'password', undefined);\n        return;\n      }\n      // TODO(NODE-3485): Replace this with a MongoAuthValidationError\n      throw new error_1.MongoAPIError(`Password not allowed for mechanism MONGODB-X509`);\n    }\n    const canonicalization = (_a = this.mechanismProperties.CANONICALIZE_HOST_NAME) !== null && _a !== void 0 ? _a : false;\n    if (!Object.values(gssapi_1.GSSAPICanonicalizationValue).includes(canonicalization)) {\n      throw new error_1.MongoAPIError(`Invalid CANONICALIZE_HOST_NAME value: ${canonicalization}`);\n    }\n  }\n  static merge(creds, options) {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;\n    return new MongoCredentials({\n      username: (_b = (_a = options.username) !== null && _a !== void 0 ? _a : creds === null || creds === void 0 ? void 0 : creds.username) !== null && _b !== void 0 ? _b : '',\n      password: (_d = (_c = options.password) !== null && _c !== void 0 ? _c : creds === null || creds === void 0 ? void 0 : creds.password) !== null && _d !== void 0 ? _d : '',\n      mechanism: (_f = (_e = options.mechanism) !== null && _e !== void 0 ? _e : creds === null || creds === void 0 ? void 0 : creds.mechanism) !== null && _f !== void 0 ? _f : providers_1.AuthMechanism.MONGODB_DEFAULT,\n      mechanismProperties: (_h = (_g = options.mechanismProperties) !== null && _g !== void 0 ? _g : creds === null || creds === void 0 ? void 0 : creds.mechanismProperties) !== null && _h !== void 0 ? _h : {},\n      source: (_l = (_k = (_j = options.source) !== null && _j !== void 0 ? _j : options.db) !== null && _k !== void 0 ? _k : creds === null || creds === void 0 ? void 0 : creds.source) !== null && _l !== void 0 ? _l : 'admin'\n    });\n  }\n}\nexports.MongoCredentials = MongoCredentials;","map":{"version":3,"mappings":"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","names":["getDefaultAuthMechanism","hello","Array","isArray","saslSupportedMechs","includes","providers_1","MONGODB_SCRAM_SHA256","MONGODB_SCRAM_SHA1","maxWireVersion","MONGODB_CR","MongoCredentials","constructor","options","username","password","source","db","mechanism","MONGODB_DEFAULT","mechanismProperties","match","process","env","AWS_ACCESS_KEY_ID","AWS_SECRET_ACCESS_KEY","AWS_SESSION_TOKEN","CANONICALIZE_HOST_NAME","gssapiCanonicalizeHostName","Object","freeze","equals","other","resolveAuthMechanism","validate","MONGODB_GSSAPI","MONGODB_PLAIN","error_1","has","MONGODB_X509","Reflect","set","undefined","canonicalization","values","gssapi_1","merge","creds","exports"],"sources":["C:\\Users\\91930\\Desktop\\Github projects\\Pharmacy Demo\\back-end\\node_modules\\mongoose\\node_modules\\mongodb\\src\\cmap\\auth\\mongo_credentials.ts"],"sourcesContent":["// Resolves the default auth mechanism according to\r\nimport type { Document } from '../../bson';\r\nimport { MongoAPIError, MongoMissingCredentialsError } from '../../error';\r\nimport { emitWarningOnce } from '../../utils';\r\nimport { GSSAPICanonicalizationValue } from './gssapi';\r\nimport { AUTH_MECHS_AUTH_SRC_EXTERNAL, AuthMechanism } from './providers';\r\n\r\n// https://github.com/mongodb/specifications/blob/master/source/auth/auth.rst\r\nfunction getDefaultAuthMechanism(hello?: Document): AuthMechanism {\r\n  if (hello) {\r\n    // If hello contains saslSupportedMechs, use scram-sha-256\r\n    // if it is available, else scram-sha-1\r\n    if (Array.isArray(hello.saslSupportedMechs)) {\r\n      return hello.saslSupportedMechs.includes(AuthMechanism.MONGODB_SCRAM_SHA256)\r\n        ? AuthMechanism.MONGODB_SCRAM_SHA256\r\n        : AuthMechanism.MONGODB_SCRAM_SHA1;\r\n    }\r\n\r\n    // Fallback to legacy selection method. If wire version >= 3, use scram-sha-1\r\n    if (hello.maxWireVersion >= 3) {\r\n      return AuthMechanism.MONGODB_SCRAM_SHA1;\r\n    }\r\n  }\r\n\r\n  // Default for wireprotocol < 3\r\n  return AuthMechanism.MONGODB_CR;\r\n}\r\n\r\n/** @public */\r\nexport interface AuthMechanismProperties extends Document {\r\n  SERVICE_HOST?: string;\r\n  SERVICE_NAME?: string;\r\n  SERVICE_REALM?: string;\r\n  CANONICALIZE_HOST_NAME?: GSSAPICanonicalizationValue;\r\n  AWS_SESSION_TOKEN?: string;\r\n}\r\n\r\n/** @public */\r\nexport interface MongoCredentialsOptions {\r\n  username: string;\r\n  password: string;\r\n  source: string;\r\n  db?: string;\r\n  mechanism?: AuthMechanism;\r\n  mechanismProperties: AuthMechanismProperties;\r\n}\r\n\r\n/**\r\n * A representation of the credentials used by MongoDB\r\n * @public\r\n */\r\nexport class MongoCredentials {\r\n  /** The username used for authentication */\r\n  readonly username: string;\r\n  /** The password used for authentication */\r\n  readonly password: string;\r\n  /** The database that the user should authenticate against */\r\n  readonly source: string;\r\n  /** The method used to authenticate */\r\n  readonly mechanism: AuthMechanism;\r\n  /** Special properties used by some types of auth mechanisms */\r\n  readonly mechanismProperties: AuthMechanismProperties;\r\n\r\n  constructor(options: MongoCredentialsOptions) {\r\n    this.username = options.username;\r\n    this.password = options.password;\r\n    this.source = options.source;\r\n    if (!this.source && options.db) {\r\n      this.source = options.db;\r\n    }\r\n    this.mechanism = options.mechanism || AuthMechanism.MONGODB_DEFAULT;\r\n    this.mechanismProperties = options.mechanismProperties || {};\r\n\r\n    if (this.mechanism.match(/MONGODB-AWS/i)) {\r\n      if (!this.username && process.env.AWS_ACCESS_KEY_ID) {\r\n        this.username = process.env.AWS_ACCESS_KEY_ID;\r\n      }\r\n\r\n      if (!this.password && process.env.AWS_SECRET_ACCESS_KEY) {\r\n        this.password = process.env.AWS_SECRET_ACCESS_KEY;\r\n      }\r\n\r\n      if (\r\n        this.mechanismProperties.AWS_SESSION_TOKEN == null &&\r\n        process.env.AWS_SESSION_TOKEN != null\r\n      ) {\r\n        this.mechanismProperties = {\r\n          ...this.mechanismProperties,\r\n          AWS_SESSION_TOKEN: process.env.AWS_SESSION_TOKEN\r\n        };\r\n      }\r\n    }\r\n\r\n    if ('gssapiCanonicalizeHostName' in this.mechanismProperties) {\r\n      emitWarningOnce(\r\n        'gssapiCanonicalizeHostName is deprecated. Please use CANONICALIZE_HOST_NAME instead.'\r\n      );\r\n      this.mechanismProperties.CANONICALIZE_HOST_NAME =\r\n        this.mechanismProperties.gssapiCanonicalizeHostName;\r\n    }\r\n\r\n    Object.freeze(this.mechanismProperties);\r\n    Object.freeze(this);\r\n  }\r\n\r\n  /** Determines if two MongoCredentials objects are equivalent */\r\n  equals(other: MongoCredentials): boolean {\r\n    return (\r\n      this.mechanism === other.mechanism &&\r\n      this.username === other.username &&\r\n      this.password === other.password &&\r\n      this.source === other.source\r\n    );\r\n  }\r\n\r\n  /**\r\n   * If the authentication mechanism is set to \"default\", resolves the authMechanism\r\n   * based on the server version and server supported sasl mechanisms.\r\n   *\r\n   * @param hello - A hello response from the server\r\n   */\r\n  resolveAuthMechanism(hello?: Document): MongoCredentials {\r\n    // If the mechanism is not \"default\", then it does not need to be resolved\r\n    if (this.mechanism.match(/DEFAULT/i)) {\r\n      return new MongoCredentials({\r\n        username: this.username,\r\n        password: this.password,\r\n        source: this.source,\r\n        mechanism: getDefaultAuthMechanism(hello),\r\n        mechanismProperties: this.mechanismProperties\r\n      });\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  validate(): void {\r\n    if (\r\n      (this.mechanism === AuthMechanism.MONGODB_GSSAPI ||\r\n        this.mechanism === AuthMechanism.MONGODB_CR ||\r\n        this.mechanism === AuthMechanism.MONGODB_PLAIN ||\r\n        this.mechanism === AuthMechanism.MONGODB_SCRAM_SHA1 ||\r\n        this.mechanism === AuthMechanism.MONGODB_SCRAM_SHA256) &&\r\n      !this.username\r\n    ) {\r\n      throw new MongoMissingCredentialsError(`Username required for mechanism '${this.mechanism}'`);\r\n    }\r\n\r\n    if (AUTH_MECHS_AUTH_SRC_EXTERNAL.has(this.mechanism)) {\r\n      if (this.source != null && this.source !== '$external') {\r\n        // TODO(NODE-3485): Replace this with a MongoAuthValidationError\r\n        throw new MongoAPIError(\r\n          `Invalid source '${this.source}' for mechanism '${this.mechanism}' specified.`\r\n        );\r\n      }\r\n    }\r\n\r\n    if (this.mechanism === AuthMechanism.MONGODB_PLAIN && this.source == null) {\r\n      // TODO(NODE-3485): Replace this with a MongoAuthValidationError\r\n      throw new MongoAPIError('PLAIN Authentication Mechanism needs an auth source');\r\n    }\r\n\r\n    if (this.mechanism === AuthMechanism.MONGODB_X509 && this.password != null) {\r\n      if (this.password === '') {\r\n        Reflect.set(this, 'password', undefined);\r\n        return;\r\n      }\r\n      // TODO(NODE-3485): Replace this with a MongoAuthValidationError\r\n      throw new MongoAPIError(`Password not allowed for mechanism MONGODB-X509`);\r\n    }\r\n\r\n    const canonicalization = this.mechanismProperties.CANONICALIZE_HOST_NAME ?? false;\r\n    if (!Object.values(GSSAPICanonicalizationValue).includes(canonicalization)) {\r\n      throw new MongoAPIError(`Invalid CANONICALIZE_HOST_NAME value: ${canonicalization}`);\r\n    }\r\n  }\r\n\r\n  static merge(\r\n    creds: MongoCredentials | undefined,\r\n    options: Partial<MongoCredentialsOptions>\r\n  ): MongoCredentials {\r\n    return new MongoCredentials({\r\n      username: options.username ?? creds?.username ?? '',\r\n      password: options.password ?? creds?.password ?? '',\r\n      mechanism: options.mechanism ?? creds?.mechanism ?? AuthMechanism.MONGODB_DEFAULT,\r\n      mechanismProperties: options.mechanismProperties ?? creds?.mechanismProperties ?? {},\r\n      source: options.source ?? options.db ?? creds?.source ?? 'admin'\r\n    });\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}