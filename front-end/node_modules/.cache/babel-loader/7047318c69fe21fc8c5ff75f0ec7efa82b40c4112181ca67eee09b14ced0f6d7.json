{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.fromSso = void 0;\nconst property_provider_1 = require(\"@aws-sdk/property-provider\");\nconst shared_ini_file_loader_1 = require(\"@aws-sdk/shared-ini-file-loader\");\nconst constants_1 = require(\"./constants\");\nconst getNewSsoOidcToken_1 = require(\"./getNewSsoOidcToken\");\nconst validateTokenExpiry_1 = require(\"./validateTokenExpiry\");\nconst validateTokenKey_1 = require(\"./validateTokenKey\");\nconst writeSSOTokenToFile_1 = require(\"./writeSSOTokenToFile\");\nconst lastRefreshAttemptTime = new Date(0);\nconst fromSso = function () {\n  let init = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return async () => {\n    const profiles = await (0, shared_ini_file_loader_1.parseKnownFiles)(init);\n    const profileName = (0, shared_ini_file_loader_1.getProfileName)(init);\n    const profile = profiles[profileName];\n    if (!profile) {\n      throw new property_provider_1.TokenProviderError(`Profile '${profileName}' could not be found in shared credentials file.`, false);\n    } else if (!profile[\"sso_session\"]) {\n      throw new property_provider_1.TokenProviderError(`Profile '${profileName}' is missing required property 'sso_session'.`);\n    }\n    const ssoSessionName = profile[\"sso_session\"];\n    const ssoSessions = await (0, shared_ini_file_loader_1.loadSsoSessionData)(init);\n    const ssoSession = ssoSessions[ssoSessionName];\n    if (!ssoSession) {\n      throw new property_provider_1.TokenProviderError(`Sso session '${ssoSessionName}' could not be found in shared credentials file.`, false);\n    }\n    for (const ssoSessionRequiredKey of [\"sso_start_url\", \"sso_region\"]) {\n      if (!ssoSession[ssoSessionRequiredKey]) {\n        throw new property_provider_1.TokenProviderError(`Sso session '${ssoSessionName}' is missing required property '${ssoSessionRequiredKey}'.`, false);\n      }\n    }\n    const ssoStartUrl = ssoSession[\"sso_start_url\"];\n    const ssoRegion = ssoSession[\"sso_region\"];\n    let ssoToken;\n    try {\n      ssoToken = await (0, shared_ini_file_loader_1.getSSOTokenFromFile)(ssoSessionName);\n    } catch (e) {\n      throw new property_provider_1.TokenProviderError(`The SSO session token associated with profile=${profileName} was not found or is invalid. ${constants_1.REFRESH_MESSAGE}`, false);\n    }\n    (0, validateTokenKey_1.validateTokenKey)(\"accessToken\", ssoToken.accessToken);\n    (0, validateTokenKey_1.validateTokenKey)(\"expiresAt\", ssoToken.expiresAt);\n    const {\n      accessToken,\n      expiresAt\n    } = ssoToken;\n    const existingToken = {\n      token: accessToken,\n      expiration: new Date(expiresAt)\n    };\n    if (existingToken.expiration.getTime() - Date.now() > constants_1.EXPIRE_WINDOW_MS) {\n      return existingToken;\n    }\n    if (Date.now() - lastRefreshAttemptTime.getTime() < 30 * 1000) {\n      (0, validateTokenExpiry_1.validateTokenExpiry)(existingToken);\n      return existingToken;\n    }\n    (0, validateTokenKey_1.validateTokenKey)(\"clientId\", ssoToken.clientId, true);\n    (0, validateTokenKey_1.validateTokenKey)(\"clientSecret\", ssoToken.clientSecret, true);\n    (0, validateTokenKey_1.validateTokenKey)(\"refreshToken\", ssoToken.refreshToken, true);\n    try {\n      lastRefreshAttemptTime.setTime(Date.now());\n      const newSsoOidcToken = await (0, getNewSsoOidcToken_1.getNewSsoOidcToken)(ssoToken, ssoRegion);\n      (0, validateTokenKey_1.validateTokenKey)(\"accessToken\", newSsoOidcToken.accessToken);\n      (0, validateTokenKey_1.validateTokenKey)(\"expiresIn\", newSsoOidcToken.expiresIn);\n      const newTokenExpiration = new Date(Date.now() + newSsoOidcToken.expiresIn * 1000);\n      try {\n        await (0, writeSSOTokenToFile_1.writeSSOTokenToFile)(ssoSessionName, {\n          ...ssoToken,\n          accessToken: newSsoOidcToken.accessToken,\n          expiresAt: newTokenExpiration.toISOString(),\n          refreshToken: newSsoOidcToken.refreshToken\n        });\n      } catch (error) {}\n      return {\n        token: newSsoOidcToken.accessToken,\n        expiration: newTokenExpiration\n      };\n    } catch (error) {\n      (0, validateTokenExpiry_1.validateTokenExpiry)(existingToken);\n      return existingToken;\n    }\n  };\n};\nexports.fromSso = fromSso;","map":{"version":3,"names":["Object","defineProperty","exports","value","fromSso","property_provider_1","require","shared_ini_file_loader_1","constants_1","getNewSsoOidcToken_1","validateTokenExpiry_1","validateTokenKey_1","writeSSOTokenToFile_1","lastRefreshAttemptTime","Date","init","profiles","parseKnownFiles","profileName","getProfileName","profile","TokenProviderError","ssoSessionName","ssoSessions","loadSsoSessionData","ssoSession","ssoSessionRequiredKey","ssoStartUrl","ssoRegion","ssoToken","getSSOTokenFromFile","e","REFRESH_MESSAGE","validateTokenKey","accessToken","expiresAt","existingToken","token","expiration","getTime","now","EXPIRE_WINDOW_MS","validateTokenExpiry","clientId","clientSecret","refreshToken","setTime","newSsoOidcToken","getNewSsoOidcToken","expiresIn","newTokenExpiration","writeSSOTokenToFile","toISOString","error"],"sources":["C:/Users/91930/Desktop/Github projects/Pharmacy Demo/back-end/node_modules/@aws-sdk/token-providers/dist-cjs/fromSso.js"],"sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.fromSso = void 0;\r\nconst property_provider_1 = require(\"@aws-sdk/property-provider\");\r\nconst shared_ini_file_loader_1 = require(\"@aws-sdk/shared-ini-file-loader\");\r\nconst constants_1 = require(\"./constants\");\r\nconst getNewSsoOidcToken_1 = require(\"./getNewSsoOidcToken\");\r\nconst validateTokenExpiry_1 = require(\"./validateTokenExpiry\");\r\nconst validateTokenKey_1 = require(\"./validateTokenKey\");\r\nconst writeSSOTokenToFile_1 = require(\"./writeSSOTokenToFile\");\r\nconst lastRefreshAttemptTime = new Date(0);\r\nconst fromSso = (init = {}) => async () => {\r\n    const profiles = await (0, shared_ini_file_loader_1.parseKnownFiles)(init);\r\n    const profileName = (0, shared_ini_file_loader_1.getProfileName)(init);\r\n    const profile = profiles[profileName];\r\n    if (!profile) {\r\n        throw new property_provider_1.TokenProviderError(`Profile '${profileName}' could not be found in shared credentials file.`, false);\r\n    }\r\n    else if (!profile[\"sso_session\"]) {\r\n        throw new property_provider_1.TokenProviderError(`Profile '${profileName}' is missing required property 'sso_session'.`);\r\n    }\r\n    const ssoSessionName = profile[\"sso_session\"];\r\n    const ssoSessions = await (0, shared_ini_file_loader_1.loadSsoSessionData)(init);\r\n    const ssoSession = ssoSessions[ssoSessionName];\r\n    if (!ssoSession) {\r\n        throw new property_provider_1.TokenProviderError(`Sso session '${ssoSessionName}' could not be found in shared credentials file.`, false);\r\n    }\r\n    for (const ssoSessionRequiredKey of [\"sso_start_url\", \"sso_region\"]) {\r\n        if (!ssoSession[ssoSessionRequiredKey]) {\r\n            throw new property_provider_1.TokenProviderError(`Sso session '${ssoSessionName}' is missing required property '${ssoSessionRequiredKey}'.`, false);\r\n        }\r\n    }\r\n    const ssoStartUrl = ssoSession[\"sso_start_url\"];\r\n    const ssoRegion = ssoSession[\"sso_region\"];\r\n    let ssoToken;\r\n    try {\r\n        ssoToken = await (0, shared_ini_file_loader_1.getSSOTokenFromFile)(ssoSessionName);\r\n    }\r\n    catch (e) {\r\n        throw new property_provider_1.TokenProviderError(`The SSO session token associated with profile=${profileName} was not found or is invalid. ${constants_1.REFRESH_MESSAGE}`, false);\r\n    }\r\n    (0, validateTokenKey_1.validateTokenKey)(\"accessToken\", ssoToken.accessToken);\r\n    (0, validateTokenKey_1.validateTokenKey)(\"expiresAt\", ssoToken.expiresAt);\r\n    const { accessToken, expiresAt } = ssoToken;\r\n    const existingToken = { token: accessToken, expiration: new Date(expiresAt) };\r\n    if (existingToken.expiration.getTime() - Date.now() > constants_1.EXPIRE_WINDOW_MS) {\r\n        return existingToken;\r\n    }\r\n    if (Date.now() - lastRefreshAttemptTime.getTime() < 30 * 1000) {\r\n        (0, validateTokenExpiry_1.validateTokenExpiry)(existingToken);\r\n        return existingToken;\r\n    }\r\n    (0, validateTokenKey_1.validateTokenKey)(\"clientId\", ssoToken.clientId, true);\r\n    (0, validateTokenKey_1.validateTokenKey)(\"clientSecret\", ssoToken.clientSecret, true);\r\n    (0, validateTokenKey_1.validateTokenKey)(\"refreshToken\", ssoToken.refreshToken, true);\r\n    try {\r\n        lastRefreshAttemptTime.setTime(Date.now());\r\n        const newSsoOidcToken = await (0, getNewSsoOidcToken_1.getNewSsoOidcToken)(ssoToken, ssoRegion);\r\n        (0, validateTokenKey_1.validateTokenKey)(\"accessToken\", newSsoOidcToken.accessToken);\r\n        (0, validateTokenKey_1.validateTokenKey)(\"expiresIn\", newSsoOidcToken.expiresIn);\r\n        const newTokenExpiration = new Date(Date.now() + newSsoOidcToken.expiresIn * 1000);\r\n        try {\r\n            await (0, writeSSOTokenToFile_1.writeSSOTokenToFile)(ssoSessionName, {\r\n                ...ssoToken,\r\n                accessToken: newSsoOidcToken.accessToken,\r\n                expiresAt: newTokenExpiration.toISOString(),\r\n                refreshToken: newSsoOidcToken.refreshToken,\r\n            });\r\n        }\r\n        catch (error) {\r\n        }\r\n        return {\r\n            token: newSsoOidcToken.accessToken,\r\n            expiration: newTokenExpiration,\r\n        };\r\n    }\r\n    catch (error) {\r\n        (0, validateTokenExpiry_1.validateTokenExpiry)(existingToken);\r\n        return existingToken;\r\n    }\r\n};\r\nexports.fromSso = fromSso;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}