{"ast":null,"code":"'use strict';\n\nconst saslprep = require('..');\nconst chr = String.fromCodePoint;\ntest('should work with liatin letters', () => {\n  const str = 'user';\n  expect(saslprep(str)).toEqual(str);\n});\ntest('should work be case preserved', () => {\n  const str = 'USER';\n  expect(saslprep(str)).toEqual(str);\n});\ntest('should work with high code points (> U+FFFF)', () => {\n  const str = '\\uD83D\\uDE00';\n  expect(saslprep(str, {\n    allowUnassigned: true\n  })).toEqual(str);\n});\ntest('should remove `mapped to nothing` characters', () => {\n  expect(saslprep('I\\u00ADX')).toEqual('IX');\n});\ntest('should replace `Non-ASCII space characters` with space', () => {\n  expect(saslprep('a\\u00A0b')).toEqual('a\\u0020b');\n});\ntest('should normalize as NFKC', () => {\n  expect(saslprep('\\u00AA')).toEqual('a');\n  expect(saslprep('\\u2168')).toEqual('IX');\n});\ntest('should throws when prohibited characters', () => {\n  // C.2.1 ASCII control characters\n  expect(() => saslprep('a\\u007Fb')).toThrow();\n\n  // C.2.2 Non-ASCII control characters\n  expect(() => saslprep('a\\u06DDb')).toThrow();\n\n  // C.3 Private use\n  expect(() => saslprep('a\\uE000b')).toThrow();\n\n  // C.4 Non-character code points\n  expect(() => saslprep(`a${chr(0x1fffe)}b`)).toThrow();\n\n  // C.5 Surrogate codes\n  expect(() => saslprep('a\\uD800b')).toThrow();\n\n  // C.6 Inappropriate for plain text\n  expect(() => saslprep('a\\uFFF9b')).toThrow();\n\n  // C.7 Inappropriate for canonical representation\n  expect(() => saslprep('a\\u2FF0b')).toThrow();\n\n  // C.8 Change display properties or are deprecated\n  expect(() => saslprep('a\\u200Eb')).toThrow();\n\n  // C.9 Tagging characters\n  expect(() => saslprep(`a${chr(0xe0001)}b`)).toThrow();\n});\ntest('should not containt RandALCat and LCat bidi', () => {\n  expect(() => saslprep('a\\u06DD\\u00AAb')).toThrow();\n});\ntest('RandALCat should be first and last', () => {\n  expect(() => saslprep('\\u0627\\u0031\\u0628')).not.toThrow();\n  expect(() => saslprep('\\u0627\\u0031')).toThrow();\n});\ntest('should handle unassigned code points', () => {\n  expect(() => saslprep('a\\u0487')).toThrow();\n  expect(() => saslprep('a\\u0487', {\n    allowUnassigned: true\n  })).not.toThrow();\n});","map":{"version":3,"names":["saslprep","require","chr","String","fromCodePoint","test","str","expect","toEqual","allowUnassigned","toThrow","not"],"sources":["C:/Users/91930/Desktop/Github projects/Pharmacy Demo/back-end/node_modules/saslprep/test/index.js"],"sourcesContent":["'use strict';\r\n\r\nconst saslprep = require('..');\r\n\r\nconst chr = String.fromCodePoint;\r\n\r\ntest('should work with liatin letters', () => {\r\n  const str = 'user';\r\n  expect(saslprep(str)).toEqual(str);\r\n});\r\n\r\ntest('should work be case preserved', () => {\r\n  const str = 'USER';\r\n  expect(saslprep(str)).toEqual(str);\r\n});\r\n\r\ntest('should work with high code points (> U+FFFF)', () => {\r\n  const str = '\\uD83D\\uDE00';\r\n  expect(saslprep(str, { allowUnassigned: true })).toEqual(str);\r\n});\r\n\r\ntest('should remove `mapped to nothing` characters', () => {\r\n  expect(saslprep('I\\u00ADX')).toEqual('IX');\r\n});\r\n\r\ntest('should replace `Non-ASCII space characters` with space', () => {\r\n  expect(saslprep('a\\u00A0b')).toEqual('a\\u0020b');\r\n});\r\n\r\ntest('should normalize as NFKC', () => {\r\n  expect(saslprep('\\u00AA')).toEqual('a');\r\n  expect(saslprep('\\u2168')).toEqual('IX');\r\n});\r\n\r\ntest('should throws when prohibited characters', () => {\r\n  // C.2.1 ASCII control characters\r\n  expect(() => saslprep('a\\u007Fb')).toThrow();\r\n\r\n  // C.2.2 Non-ASCII control characters\r\n  expect(() => saslprep('a\\u06DDb')).toThrow();\r\n\r\n  // C.3 Private use\r\n  expect(() => saslprep('a\\uE000b')).toThrow();\r\n\r\n  // C.4 Non-character code points\r\n  expect(() => saslprep(`a${chr(0x1fffe)}b`)).toThrow();\r\n\r\n  // C.5 Surrogate codes\r\n  expect(() => saslprep('a\\uD800b')).toThrow();\r\n\r\n  // C.6 Inappropriate for plain text\r\n  expect(() => saslprep('a\\uFFF9b')).toThrow();\r\n\r\n  // C.7 Inappropriate for canonical representation\r\n  expect(() => saslprep('a\\u2FF0b')).toThrow();\r\n\r\n  // C.8 Change display properties or are deprecated\r\n  expect(() => saslprep('a\\u200Eb')).toThrow();\r\n\r\n  // C.9 Tagging characters\r\n  expect(() => saslprep(`a${chr(0xe0001)}b`)).toThrow();\r\n});\r\n\r\ntest('should not containt RandALCat and LCat bidi', () => {\r\n  expect(() => saslprep('a\\u06DD\\u00AAb')).toThrow();\r\n});\r\n\r\ntest('RandALCat should be first and last', () => {\r\n  expect(() => saslprep('\\u0627\\u0031\\u0628')).not.toThrow();\r\n  expect(() => saslprep('\\u0627\\u0031')).toThrow();\r\n});\r\n\r\ntest('should handle unassigned code points', () => {\r\n  expect(() => saslprep('a\\u0487')).toThrow();\r\n  expect(() => saslprep('a\\u0487', { allowUnassigned: true })).not.toThrow();\r\n});\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}