{"ast":null,"code":"import { getEndpointPlugin } from \"@aws-sdk/middleware-endpoint\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { getAwsAuthPlugin } from \"@aws-sdk/middleware-signing\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\nimport { GetSessionTokenRequestFilterSensitiveLog, GetSessionTokenResponseFilterSensitiveLog } from \"../models/models_0\";\nimport { deserializeAws_queryGetSessionTokenCommand, serializeAws_queryGetSessionTokenCommand } from \"../protocols/Aws_query\";\nexport class GetSessionTokenCommand extends $Command {\n  constructor(input) {\n    super();\n    this.input = input;\n  }\n  static getEndpointParameterInstructions() {\n    return {\n      UseGlobalEndpoint: {\n        type: \"builtInParams\",\n        name: \"useGlobalEndpoint\"\n      },\n      UseFIPS: {\n        type: \"builtInParams\",\n        name: \"useFipsEndpoint\"\n      },\n      Endpoint: {\n        type: \"builtInParams\",\n        name: \"endpoint\"\n      },\n      Region: {\n        type: \"builtInParams\",\n        name: \"region\"\n      },\n      UseDualStack: {\n        type: \"builtInParams\",\n        name: \"useDualstackEndpoint\"\n      }\n    };\n  }\n  resolveMiddleware(clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    this.middlewareStack.use(getEndpointPlugin(configuration, GetSessionTokenCommand.getEndpointParameterInstructions()));\n    this.middlewareStack.use(getAwsAuthPlugin(configuration));\n    const stack = clientStack.concat(this.middlewareStack);\n    const {\n      logger\n    } = configuration;\n    const clientName = \"STSClient\";\n    const commandName = \"GetSessionTokenCommand\";\n    const handlerExecutionContext = {\n      logger,\n      clientName,\n      commandName,\n      inputFilterSensitiveLog: GetSessionTokenRequestFilterSensitiveLog,\n      outputFilterSensitiveLog: GetSessionTokenResponseFilterSensitiveLog\n    };\n    const {\n      requestHandler\n    } = configuration;\n    return stack.resolve(request => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n  }\n  serialize(input, context) {\n    return serializeAws_queryGetSessionTokenCommand(input, context);\n  }\n  deserialize(output, context) {\n    return deserializeAws_queryGetSessionTokenCommand(output, context);\n  }\n}","map":{"version":3,"names":["getEndpointPlugin","getSerdePlugin","getAwsAuthPlugin","Command","$Command","GetSessionTokenRequestFilterSensitiveLog","GetSessionTokenResponseFilterSensitiveLog","deserializeAws_queryGetSessionTokenCommand","serializeAws_queryGetSessionTokenCommand","GetSessionTokenCommand","constructor","input","getEndpointParameterInstructions","UseGlobalEndpoint","type","name","UseFIPS","Endpoint","Region","UseDualStack","resolveMiddleware","clientStack","configuration","options","middlewareStack","use","serialize","deserialize","stack","concat","logger","clientName","commandName","handlerExecutionContext","inputFilterSensitiveLog","outputFilterSensitiveLog","requestHandler","resolve","request","handle","context","output"],"sources":["C:/Users/91930/Desktop/Github projects/Pharmacy Demo/back-end/node_modules/@aws-sdk/client-sts/dist-es/commands/GetSessionTokenCommand.js"],"sourcesContent":["import { getEndpointPlugin } from \"@aws-sdk/middleware-endpoint\";\r\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\r\nimport { getAwsAuthPlugin } from \"@aws-sdk/middleware-signing\";\r\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\r\nimport { GetSessionTokenRequestFilterSensitiveLog, GetSessionTokenResponseFilterSensitiveLog, } from \"../models/models_0\";\r\nimport { deserializeAws_queryGetSessionTokenCommand, serializeAws_queryGetSessionTokenCommand, } from \"../protocols/Aws_query\";\r\nexport class GetSessionTokenCommand extends $Command {\r\n    constructor(input) {\r\n        super();\r\n        this.input = input;\r\n    }\r\n    static getEndpointParameterInstructions() {\r\n        return {\r\n            UseGlobalEndpoint: { type: \"builtInParams\", name: \"useGlobalEndpoint\" },\r\n            UseFIPS: { type: \"builtInParams\", name: \"useFipsEndpoint\" },\r\n            Endpoint: { type: \"builtInParams\", name: \"endpoint\" },\r\n            Region: { type: \"builtInParams\", name: \"region\" },\r\n            UseDualStack: { type: \"builtInParams\", name: \"useDualstackEndpoint\" },\r\n        };\r\n    }\r\n    resolveMiddleware(clientStack, configuration, options) {\r\n        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\r\n        this.middlewareStack.use(getEndpointPlugin(configuration, GetSessionTokenCommand.getEndpointParameterInstructions()));\r\n        this.middlewareStack.use(getAwsAuthPlugin(configuration));\r\n        const stack = clientStack.concat(this.middlewareStack);\r\n        const { logger } = configuration;\r\n        const clientName = \"STSClient\";\r\n        const commandName = \"GetSessionTokenCommand\";\r\n        const handlerExecutionContext = {\r\n            logger,\r\n            clientName,\r\n            commandName,\r\n            inputFilterSensitiveLog: GetSessionTokenRequestFilterSensitiveLog,\r\n            outputFilterSensitiveLog: GetSessionTokenResponseFilterSensitiveLog,\r\n        };\r\n        const { requestHandler } = configuration;\r\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\r\n    }\r\n    serialize(input, context) {\r\n        return serializeAws_queryGetSessionTokenCommand(input, context);\r\n    }\r\n    deserialize(output, context) {\r\n        return deserializeAws_queryGetSessionTokenCommand(output, context);\r\n    }\r\n}\r\n"],"mappings":"AAAA,SAASA,iBAAiB,QAAQ,8BAA8B;AAChE,SAASC,cAAc,QAAQ,2BAA2B;AAC1D,SAASC,gBAAgB,QAAQ,6BAA6B;AAC9D,SAASC,OAAO,IAAIC,QAAQ,QAAQ,wBAAwB;AAC5D,SAASC,wCAAwC,EAAEC,yCAAyC,QAAS,oBAAoB;AACzH,SAASC,0CAA0C,EAAEC,wCAAwC,QAAS,wBAAwB;AAC9H,OAAO,MAAMC,sBAAsB,SAASL,QAAQ,CAAC;EACjDM,WAAW,CAACC,KAAK,EAAE;IACf,KAAK,EAAE;IACP,IAAI,CAACA,KAAK,GAAGA,KAAK;EACtB;EACA,OAAOC,gCAAgC,GAAG;IACtC,OAAO;MACHC,iBAAiB,EAAE;QAAEC,IAAI,EAAE,eAAe;QAAEC,IAAI,EAAE;MAAoB,CAAC;MACvEC,OAAO,EAAE;QAAEF,IAAI,EAAE,eAAe;QAAEC,IAAI,EAAE;MAAkB,CAAC;MAC3DE,QAAQ,EAAE;QAAEH,IAAI,EAAE,eAAe;QAAEC,IAAI,EAAE;MAAW,CAAC;MACrDG,MAAM,EAAE;QAAEJ,IAAI,EAAE,eAAe;QAAEC,IAAI,EAAE;MAAS,CAAC;MACjDI,YAAY,EAAE;QAAEL,IAAI,EAAE,eAAe;QAAEC,IAAI,EAAE;MAAuB;IACxE,CAAC;EACL;EACAK,iBAAiB,CAACC,WAAW,EAAEC,aAAa,EAAEC,OAAO,EAAE;IACnD,IAAI,CAACC,eAAe,CAACC,GAAG,CAACxB,cAAc,CAACqB,aAAa,EAAE,IAAI,CAACI,SAAS,EAAE,IAAI,CAACC,WAAW,CAAC,CAAC;IACzF,IAAI,CAACH,eAAe,CAACC,GAAG,CAACzB,iBAAiB,CAACsB,aAAa,EAAEb,sBAAsB,CAACG,gCAAgC,EAAE,CAAC,CAAC;IACrH,IAAI,CAACY,eAAe,CAACC,GAAG,CAACvB,gBAAgB,CAACoB,aAAa,CAAC,CAAC;IACzD,MAAMM,KAAK,GAAGP,WAAW,CAACQ,MAAM,CAAC,IAAI,CAACL,eAAe,CAAC;IACtD,MAAM;MAAEM;IAAO,CAAC,GAAGR,aAAa;IAChC,MAAMS,UAAU,GAAG,WAAW;IAC9B,MAAMC,WAAW,GAAG,wBAAwB;IAC5C,MAAMC,uBAAuB,GAAG;MAC5BH,MAAM;MACNC,UAAU;MACVC,WAAW;MACXE,uBAAuB,EAAE7B,wCAAwC;MACjE8B,wBAAwB,EAAE7B;IAC9B,CAAC;IACD,MAAM;MAAE8B;IAAe,CAAC,GAAGd,aAAa;IACxC,OAAOM,KAAK,CAACS,OAAO,CAAEC,OAAO,IAAKF,cAAc,CAACG,MAAM,CAACD,OAAO,CAACA,OAAO,EAAEf,OAAO,IAAI,CAAC,CAAC,CAAC,EAAEU,uBAAuB,CAAC;EACrH;EACAP,SAAS,CAACf,KAAK,EAAE6B,OAAO,EAAE;IACtB,OAAOhC,wCAAwC,CAACG,KAAK,EAAE6B,OAAO,CAAC;EACnE;EACAb,WAAW,CAACc,MAAM,EAAED,OAAO,EAAE;IACzB,OAAOjC,0CAA0C,CAACkC,MAAM,EAAED,OAAO,CAAC;EACtE;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}