{"ast":null,"code":"import Utils from './utils.js';\nimport { ENGINE_MAP } from './constants.js';\n\n/*\r\n * More specific goes first\r\n */\nexport default [/* EdgeHTML */\n{\n  test(parser) {\n    return parser.getBrowserName(true) === 'microsoft edge';\n  },\n  describe(ua) {\n    const isBlinkBased = /\\sedg\\//i.test(ua);\n\n    // return blink if it's blink-based one\n    if (isBlinkBased) {\n      return {\n        name: ENGINE_MAP.Blink\n      };\n    }\n\n    // otherwise match the version and return EdgeHTML\n    const version = Utils.getFirstMatch(/edge\\/(\\d+(\\.?_?\\d+)+)/i, ua);\n    return {\n      name: ENGINE_MAP.EdgeHTML,\n      version\n    };\n  }\n}, /* Trident */\n{\n  test: [/trident/i],\n  describe(ua) {\n    const engine = {\n      name: ENGINE_MAP.Trident\n    };\n    const version = Utils.getFirstMatch(/trident\\/(\\d+(\\.?_?\\d+)+)/i, ua);\n    if (version) {\n      engine.version = version;\n    }\n    return engine;\n  }\n}, /* Presto */\n{\n  test(parser) {\n    return parser.test(/presto/i);\n  },\n  describe(ua) {\n    const engine = {\n      name: ENGINE_MAP.Presto\n    };\n    const version = Utils.getFirstMatch(/presto\\/(\\d+(\\.?_?\\d+)+)/i, ua);\n    if (version) {\n      engine.version = version;\n    }\n    return engine;\n  }\n}, /* Gecko */\n{\n  test(parser) {\n    const isGecko = parser.test(/gecko/i);\n    const likeGecko = parser.test(/like gecko/i);\n    return isGecko && !likeGecko;\n  },\n  describe(ua) {\n    const engine = {\n      name: ENGINE_MAP.Gecko\n    };\n    const version = Utils.getFirstMatch(/gecko\\/(\\d+(\\.?_?\\d+)+)/i, ua);\n    if (version) {\n      engine.version = version;\n    }\n    return engine;\n  }\n}, /* Blink */\n{\n  test: [/(apple)?webkit\\/537\\.36/i],\n  describe() {\n    return {\n      name: ENGINE_MAP.Blink\n    };\n  }\n}, /* WebKit */\n{\n  test: [/(apple)?webkit/i],\n  describe(ua) {\n    const engine = {\n      name: ENGINE_MAP.WebKit\n    };\n    const version = Utils.getFirstMatch(/webkit\\/(\\d+(\\.?_?\\d+)+)/i, ua);\n    if (version) {\n      engine.version = version;\n    }\n    return engine;\n  }\n}];","map":{"version":3,"names":["Utils","ENGINE_MAP","test","parser","getBrowserName","describe","ua","isBlinkBased","name","Blink","version","getFirstMatch","EdgeHTML","engine","Trident","Presto","isGecko","likeGecko","Gecko","WebKit"],"sources":["C:/Users/91930/Desktop/Github projects/Pharmacy Demo/back-end/node_modules/bowser/src/parser-engines.js"],"sourcesContent":["import Utils from './utils.js';\r\nimport { ENGINE_MAP } from './constants.js';\r\n\r\n/*\r\n * More specific goes first\r\n */\r\nexport default [\r\n  /* EdgeHTML */\r\n  {\r\n    test(parser) {\r\n      return parser.getBrowserName(true) === 'microsoft edge';\r\n    },\r\n    describe(ua) {\r\n      const isBlinkBased = /\\sedg\\//i.test(ua);\r\n\r\n      // return blink if it's blink-based one\r\n      if (isBlinkBased) {\r\n        return {\r\n          name: ENGINE_MAP.Blink,\r\n        };\r\n      }\r\n\r\n      // otherwise match the version and return EdgeHTML\r\n      const version = Utils.getFirstMatch(/edge\\/(\\d+(\\.?_?\\d+)+)/i, ua);\r\n\r\n      return {\r\n        name: ENGINE_MAP.EdgeHTML,\r\n        version,\r\n      };\r\n    },\r\n  },\r\n\r\n  /* Trident */\r\n  {\r\n    test: [/trident/i],\r\n    describe(ua) {\r\n      const engine = {\r\n        name: ENGINE_MAP.Trident,\r\n      };\r\n\r\n      const version = Utils.getFirstMatch(/trident\\/(\\d+(\\.?_?\\d+)+)/i, ua);\r\n\r\n      if (version) {\r\n        engine.version = version;\r\n      }\r\n\r\n      return engine;\r\n    },\r\n  },\r\n\r\n  /* Presto */\r\n  {\r\n    test(parser) {\r\n      return parser.test(/presto/i);\r\n    },\r\n    describe(ua) {\r\n      const engine = {\r\n        name: ENGINE_MAP.Presto,\r\n      };\r\n\r\n      const version = Utils.getFirstMatch(/presto\\/(\\d+(\\.?_?\\d+)+)/i, ua);\r\n\r\n      if (version) {\r\n        engine.version = version;\r\n      }\r\n\r\n      return engine;\r\n    },\r\n  },\r\n\r\n  /* Gecko */\r\n  {\r\n    test(parser) {\r\n      const isGecko = parser.test(/gecko/i);\r\n      const likeGecko = parser.test(/like gecko/i);\r\n      return isGecko && !likeGecko;\r\n    },\r\n    describe(ua) {\r\n      const engine = {\r\n        name: ENGINE_MAP.Gecko,\r\n      };\r\n\r\n      const version = Utils.getFirstMatch(/gecko\\/(\\d+(\\.?_?\\d+)+)/i, ua);\r\n\r\n      if (version) {\r\n        engine.version = version;\r\n      }\r\n\r\n      return engine;\r\n    },\r\n  },\r\n\r\n  /* Blink */\r\n  {\r\n    test: [/(apple)?webkit\\/537\\.36/i],\r\n    describe() {\r\n      return {\r\n        name: ENGINE_MAP.Blink,\r\n      };\r\n    },\r\n  },\r\n\r\n  /* WebKit */\r\n  {\r\n    test: [/(apple)?webkit/i],\r\n    describe(ua) {\r\n      const engine = {\r\n        name: ENGINE_MAP.WebKit,\r\n      };\r\n\r\n      const version = Utils.getFirstMatch(/webkit\\/(\\d+(\\.?_?\\d+)+)/i, ua);\r\n\r\n      if (version) {\r\n        engine.version = version;\r\n      }\r\n\r\n      return engine;\r\n    },\r\n  },\r\n];\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,YAAY;AAC9B,SAASC,UAAU,QAAQ,gBAAgB;;AAE3C;AACA;AACA;AACA,eAAe,CACb;AACA;EACEC,IAAI,CAACC,MAAM,EAAE;IACX,OAAOA,MAAM,CAACC,cAAc,CAAC,IAAI,CAAC,KAAK,gBAAgB;EACzD,CAAC;EACDC,QAAQ,CAACC,EAAE,EAAE;IACX,MAAMC,YAAY,GAAG,UAAU,CAACL,IAAI,CAACI,EAAE,CAAC;;IAExC;IACA,IAAIC,YAAY,EAAE;MAChB,OAAO;QACLC,IAAI,EAAEP,UAAU,CAACQ;MACnB,CAAC;IACH;;IAEA;IACA,MAAMC,OAAO,GAAGV,KAAK,CAACW,aAAa,CAAC,yBAAyB,EAAEL,EAAE,CAAC;IAElE,OAAO;MACLE,IAAI,EAAEP,UAAU,CAACW,QAAQ;MACzBF;IACF,CAAC;EACH;AACF,CAAC,EAED;AACA;EACER,IAAI,EAAE,CAAC,UAAU,CAAC;EAClBG,QAAQ,CAACC,EAAE,EAAE;IACX,MAAMO,MAAM,GAAG;MACbL,IAAI,EAAEP,UAAU,CAACa;IACnB,CAAC;IAED,MAAMJ,OAAO,GAAGV,KAAK,CAACW,aAAa,CAAC,4BAA4B,EAAEL,EAAE,CAAC;IAErE,IAAII,OAAO,EAAE;MACXG,MAAM,CAACH,OAAO,GAAGA,OAAO;IAC1B;IAEA,OAAOG,MAAM;EACf;AACF,CAAC,EAED;AACA;EACEX,IAAI,CAACC,MAAM,EAAE;IACX,OAAOA,MAAM,CAACD,IAAI,CAAC,SAAS,CAAC;EAC/B,CAAC;EACDG,QAAQ,CAACC,EAAE,EAAE;IACX,MAAMO,MAAM,GAAG;MACbL,IAAI,EAAEP,UAAU,CAACc;IACnB,CAAC;IAED,MAAML,OAAO,GAAGV,KAAK,CAACW,aAAa,CAAC,2BAA2B,EAAEL,EAAE,CAAC;IAEpE,IAAII,OAAO,EAAE;MACXG,MAAM,CAACH,OAAO,GAAGA,OAAO;IAC1B;IAEA,OAAOG,MAAM;EACf;AACF,CAAC,EAED;AACA;EACEX,IAAI,CAACC,MAAM,EAAE;IACX,MAAMa,OAAO,GAAGb,MAAM,CAACD,IAAI,CAAC,QAAQ,CAAC;IACrC,MAAMe,SAAS,GAAGd,MAAM,CAACD,IAAI,CAAC,aAAa,CAAC;IAC5C,OAAOc,OAAO,IAAI,CAACC,SAAS;EAC9B,CAAC;EACDZ,QAAQ,CAACC,EAAE,EAAE;IACX,MAAMO,MAAM,GAAG;MACbL,IAAI,EAAEP,UAAU,CAACiB;IACnB,CAAC;IAED,MAAMR,OAAO,GAAGV,KAAK,CAACW,aAAa,CAAC,0BAA0B,EAAEL,EAAE,CAAC;IAEnE,IAAII,OAAO,EAAE;MACXG,MAAM,CAACH,OAAO,GAAGA,OAAO;IAC1B;IAEA,OAAOG,MAAM;EACf;AACF,CAAC,EAED;AACA;EACEX,IAAI,EAAE,CAAC,0BAA0B,CAAC;EAClCG,QAAQ,GAAG;IACT,OAAO;MACLG,IAAI,EAAEP,UAAU,CAACQ;IACnB,CAAC;EACH;AACF,CAAC,EAED;AACA;EACEP,IAAI,EAAE,CAAC,iBAAiB,CAAC;EACzBG,QAAQ,CAACC,EAAE,EAAE;IACX,MAAMO,MAAM,GAAG;MACbL,IAAI,EAAEP,UAAU,CAACkB;IACnB,CAAC;IAED,MAAMT,OAAO,GAAGV,KAAK,CAACW,aAAa,CAAC,2BAA2B,EAAEL,EAAE,CAAC;IAEpE,IAAII,OAAO,EAAE;MACXG,MAAM,CAACH,OAAO,GAAGA,OAAO;IAC1B;IAEA,OAAOG,MAAM;EACf;AACF,CAAC,CACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}