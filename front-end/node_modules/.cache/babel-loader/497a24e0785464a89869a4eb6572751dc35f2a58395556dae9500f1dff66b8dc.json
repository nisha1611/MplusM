{"ast":null,"code":"'use strict';\n\n/*!\r\n * Module requirements.\r\n */\nconst MongooseError = require('../error/index');\nconst SchemaNumberOptions = require('../options/SchemaNumberOptions');\nconst SchemaType = require('../schematype');\nconst castNumber = require('../cast/number');\nconst handleBitwiseOperator = require('./operators/bitwise');\nconst utils = require('../utils');\nconst CastError = SchemaType.CastError;\n\n/**\r\n * Number SchemaType constructor.\r\n *\r\n * @param {String} key\r\n * @param {Object} options\r\n * @inherits SchemaType\r\n * @api public\r\n */\n\nfunction SchemaNumber(key, options) {\n  SchemaType.call(this, key, options, 'Number');\n}\n\n/**\r\n * Attaches a getter for all Number instances.\r\n *\r\n * #### Example:\r\n *\r\n *     // Make all numbers round down\r\n *     mongoose.Number.get(function(v) { return Math.floor(v); });\r\n *\r\n *     const Model = mongoose.model('Test', new Schema({ test: Number }));\r\n *     new Model({ test: 3.14 }).test; // 3\r\n *\r\n * @param {Function} getter\r\n * @return {this}\r\n * @function get\r\n * @static\r\n * @api public\r\n */\n\nSchemaNumber.get = SchemaType.get;\n\n/**\r\n * Sets a default option for all Number instances.\r\n *\r\n * #### Example:\r\n *\r\n *     // Make all numbers have option `min` equal to 0.\r\n *     mongoose.Schema.Number.set('min', 0);\r\n *\r\n *     const Order = mongoose.model('Order', new Schema({ amount: Number }));\r\n *     new Order({ amount: -10 }).validateSync().errors.amount.message; // Path `amount` must be larger than 0.\r\n *\r\n * @param {String} option The option you'd like to set the value for\r\n * @param {Any} value value for option\r\n * @return {undefined}\r\n * @function set\r\n * @static\r\n * @api public\r\n */\n\nSchemaNumber.set = SchemaType.set;\n\n/*!\r\n * ignore\r\n */\n\nSchemaNumber._cast = castNumber;\n\n/**\r\n * Get/set the function used to cast arbitrary values to numbers.\r\n *\r\n * #### Example:\r\n *\r\n *     // Make Mongoose cast empty strings '' to 0 for paths declared as numbers\r\n *     const original = mongoose.Number.cast();\r\n *     mongoose.Number.cast(v => {\r\n *       if (v === '') { return 0; }\r\n *       return original(v);\r\n *     });\r\n *\r\n *     // Or disable casting entirely\r\n *     mongoose.Number.cast(false);\r\n *\r\n * @param {Function} caster\r\n * @return {Function}\r\n * @function get\r\n * @static\r\n * @api public\r\n */\n\nSchemaNumber.cast = function cast(caster) {\n  if (arguments.length === 0) {\n    return this._cast;\n  }\n  if (caster === false) {\n    caster = this._defaultCaster;\n  }\n  this._cast = caster;\n  return this._cast;\n};\n\n/*!\r\n * ignore\r\n */\n\nSchemaNumber._defaultCaster = v => {\n  if (typeof v !== 'number') {\n    throw new Error();\n  }\n  return v;\n};\n\n/**\r\n * This schema type's name, to defend against minifiers that mangle\r\n * function names.\r\n *\r\n * @api public\r\n */\nSchemaNumber.schemaName = 'Number';\nSchemaNumber.defaultOptions = {};\n\n/*!\r\n * Inherits from SchemaType.\r\n */\nSchemaNumber.prototype = Object.create(SchemaType.prototype);\nSchemaNumber.prototype.constructor = SchemaNumber;\nSchemaNumber.prototype.OptionsConstructor = SchemaNumberOptions;\n\n/*!\r\n * ignore\r\n */\n\nSchemaNumber._checkRequired = v => typeof v === 'number' || v instanceof Number;\n\n/**\r\n * Override the function the required validator uses to check whether a string\r\n * passes the `required` check.\r\n *\r\n * @param {Function} fn\r\n * @return {Function}\r\n * @function checkRequired\r\n * @static\r\n * @api public\r\n */\n\nSchemaNumber.checkRequired = SchemaType.checkRequired;\n\n/**\r\n * Check if the given value satisfies a required validator.\r\n *\r\n * @param {Any} value\r\n * @param {Document} doc\r\n * @return {Boolean}\r\n * @api public\r\n */\n\nSchemaNumber.prototype.checkRequired = function checkRequired(value, doc) {\n  if (typeof value === 'object' && SchemaType._isRef(this, value, doc, true)) {\n    return value != null;\n  }\n\n  // `require('util').inherits()` does **not** copy static properties, and\n  // plugins like mongoose-float use `inherits()` for pre-ES6.\n  const _checkRequired = typeof this.constructor.checkRequired === 'function' ? this.constructor.checkRequired() : SchemaNumber.checkRequired();\n  return _checkRequired(value);\n};\n\n/**\r\n * Sets a minimum number validator.\r\n *\r\n * #### Example:\r\n *\r\n *     const s = new Schema({ n: { type: Number, min: 10 })\r\n *     const M = db.model('M', s)\r\n *     const m = new M({ n: 9 })\r\n *     m.save(function (err) {\r\n *       console.error(err) // validator error\r\n *       m.n = 10;\r\n *       m.save() // success\r\n *     })\r\n *\r\n *     // custom error messages\r\n *     // We can also use the special {MIN} token which will be replaced with the invalid value\r\n *     const min = [10, 'The value of path `{PATH}` ({VALUE}) is beneath the limit ({MIN}).'];\r\n *     const schema = new Schema({ n: { type: Number, min: min })\r\n *     const M = mongoose.model('Measurement', schema);\r\n *     const s= new M({ n: 4 });\r\n *     s.validate(function (err) {\r\n *       console.log(String(err)) // ValidationError: The value of path `n` (4) is beneath the limit (10).\r\n *     })\r\n *\r\n * @param {Number} value minimum number\r\n * @param {String} [message] optional custom error message\r\n * @return {SchemaType} this\r\n * @see Customized Error Messages #error_messages_MongooseError-messages\r\n * @api public\r\n */\n\nSchemaNumber.prototype.min = function (value, message) {\n  if (this.minValidator) {\n    this.validators = this.validators.filter(function (v) {\n      return v.validator !== this.minValidator;\n    }, this);\n  }\n  if (value !== null && value !== undefined) {\n    let msg = message || MongooseError.messages.Number.min;\n    msg = msg.replace(/{MIN}/, value);\n    this.validators.push({\n      validator: this.minValidator = function (v) {\n        return v == null || v >= value;\n      },\n      message: msg,\n      type: 'min',\n      min: value\n    });\n  }\n  return this;\n};\n\n/**\r\n * Sets a maximum number validator.\r\n *\r\n * #### Example:\r\n *\r\n *     const s = new Schema({ n: { type: Number, max: 10 })\r\n *     const M = db.model('M', s)\r\n *     const m = new M({ n: 11 })\r\n *     m.save(function (err) {\r\n *       console.error(err) // validator error\r\n *       m.n = 10;\r\n *       m.save() // success\r\n *     })\r\n *\r\n *     // custom error messages\r\n *     // We can also use the special {MAX} token which will be replaced with the invalid value\r\n *     const max = [10, 'The value of path `{PATH}` ({VALUE}) exceeds the limit ({MAX}).'];\r\n *     const schema = new Schema({ n: { type: Number, max: max })\r\n *     const M = mongoose.model('Measurement', schema);\r\n *     const s= new M({ n: 4 });\r\n *     s.validate(function (err) {\r\n *       console.log(String(err)) // ValidationError: The value of path `n` (4) exceeds the limit (10).\r\n *     })\r\n *\r\n * @param {Number} maximum number\r\n * @param {String} [message] optional custom error message\r\n * @return {SchemaType} this\r\n * @see Customized Error Messages #error_messages_MongooseError-messages\r\n * @api public\r\n */\n\nSchemaNumber.prototype.max = function (value, message) {\n  if (this.maxValidator) {\n    this.validators = this.validators.filter(function (v) {\n      return v.validator !== this.maxValidator;\n    }, this);\n  }\n  if (value !== null && value !== undefined) {\n    let msg = message || MongooseError.messages.Number.max;\n    msg = msg.replace(/{MAX}/, value);\n    this.validators.push({\n      validator: this.maxValidator = function (v) {\n        return v == null || v <= value;\n      },\n      message: msg,\n      type: 'max',\n      max: value\n    });\n  }\n  return this;\n};\n\n/**\r\n * Sets a enum validator\r\n *\r\n * #### Example:\r\n *\r\n *     const s = new Schema({ n: { type: Number, enum: [1, 2, 3] });\r\n *     const M = db.model('M', s);\r\n *\r\n *     const m = new M({ n: 4 });\r\n *     await m.save(); // throws validation error\r\n *\r\n *     m.n = 3;\r\n *     await m.save(); // succeeds\r\n *\r\n * @param {Array} values allowed values\r\n * @param {String} [message] optional custom error message\r\n * @return {SchemaType} this\r\n * @see Customized Error Messages #error_messages_MongooseError-messages\r\n * @api public\r\n */\n\nSchemaNumber.prototype.enum = function (values, message) {\n  if (this.enumValidator) {\n    this.validators = this.validators.filter(function (v) {\n      return v.validator !== this.enumValidator;\n    }, this);\n  }\n  if (!Array.isArray(values)) {\n    const isObjectSyntax = utils.isPOJO(values) && values.values != null;\n    if (isObjectSyntax) {\n      message = values.message;\n      values = values.values;\n    } else if (typeof values === 'number') {\n      values = Array.prototype.slice.call(arguments);\n      message = null;\n    }\n    if (utils.isPOJO(values)) {\n      values = Object.values(values);\n    }\n    message = message || MongooseError.messages.Number.enum;\n  }\n  message = message == null ? MongooseError.messages.Number.enum : message;\n  this.enumValidator = v => v == null || values.indexOf(v) !== -1;\n  this.validators.push({\n    validator: this.enumValidator,\n    message: message,\n    type: 'enum',\n    enumValues: values\n  });\n  return this;\n};\n\n/**\r\n * Casts to number\r\n *\r\n * @param {Object} value value to cast\r\n * @param {Document} doc document that triggers the casting\r\n * @param {Boolean} init\r\n * @api private\r\n */\n\nSchemaNumber.prototype.cast = function (value, doc, init) {\n  if (typeof value !== 'number' && SchemaType._isRef(this, value, doc, init)) {\n    if (value == null || utils.isNonBuiltinObject(value)) {\n      return this._castRef(value, doc, init);\n    }\n  }\n  const val = value && typeof value._id !== 'undefined' ? value._id :\n  // documents\n  value;\n  let castNumber;\n  if (typeof this._castFunction === 'function') {\n    castNumber = this._castFunction;\n  } else if (typeof this.constructor.cast === 'function') {\n    castNumber = this.constructor.cast();\n  } else {\n    castNumber = SchemaNumber.cast();\n  }\n  try {\n    return castNumber(val);\n  } catch (err) {\n    throw new CastError('Number', val, this.path, err, this);\n  }\n};\n\n/*!\r\n * ignore\r\n */\n\nfunction handleSingle(val) {\n  return this.cast(val);\n}\nfunction handleArray(val) {\n  const _this = this;\n  if (!Array.isArray(val)) {\n    return [this.cast(val)];\n  }\n  return val.map(function (m) {\n    return _this.cast(m);\n  });\n}\nSchemaNumber.prototype.$conditionalHandlers = utils.options(SchemaType.prototype.$conditionalHandlers, {\n  $bitsAllClear: handleBitwiseOperator,\n  $bitsAnyClear: handleBitwiseOperator,\n  $bitsAllSet: handleBitwiseOperator,\n  $bitsAnySet: handleBitwiseOperator,\n  $gt: handleSingle,\n  $gte: handleSingle,\n  $lt: handleSingle,\n  $lte: handleSingle,\n  $mod: handleArray\n});\n\n/**\r\n * Casts contents for queries.\r\n *\r\n * @param {String} $conditional\r\n * @param {any} [value]\r\n * @api private\r\n */\n\nSchemaNumber.prototype.castForQuery = function ($conditional, val) {\n  let handler;\n  if (arguments.length === 2) {\n    handler = this.$conditionalHandlers[$conditional];\n    if (!handler) {\n      throw new CastError('number', val, this.path, null, this);\n    }\n    return handler.call(this, val);\n  }\n  val = this._castForQuery($conditional);\n  return val;\n};\n\n/*!\r\n * Module exports.\r\n */\n\nmodule.exports = SchemaNumber;","map":{"version":3,"names":["MongooseError","require","SchemaNumberOptions","SchemaType","castNumber","handleBitwiseOperator","utils","CastError","SchemaNumber","key","options","call","get","set","_cast","cast","caster","arguments","length","_defaultCaster","v","Error","schemaName","defaultOptions","prototype","Object","create","constructor","OptionsConstructor","_checkRequired","Number","checkRequired","value","doc","_isRef","min","message","minValidator","validators","filter","validator","undefined","msg","messages","replace","push","type","max","maxValidator","enum","values","enumValidator","Array","isArray","isObjectSyntax","isPOJO","slice","indexOf","enumValues","init","isNonBuiltinObject","_castRef","val","_id","_castFunction","err","path","handleSingle","handleArray","_this","map","m","$conditionalHandlers","$bitsAllClear","$bitsAnyClear","$bitsAllSet","$bitsAnySet","$gt","$gte","$lt","$lte","$mod","castForQuery","$conditional","handler","_castForQuery","module","exports"],"sources":["C:/Users/91930/Desktop/Github projects/Pharmacy Demo/back-end/node_modules/mongoose/lib/schema/number.js"],"sourcesContent":["'use strict';\r\n\r\n/*!\r\n * Module requirements.\r\n */\r\n\r\nconst MongooseError = require('../error/index');\r\nconst SchemaNumberOptions = require('../options/SchemaNumberOptions');\r\nconst SchemaType = require('../schematype');\r\nconst castNumber = require('../cast/number');\r\nconst handleBitwiseOperator = require('./operators/bitwise');\r\nconst utils = require('../utils');\r\n\r\nconst CastError = SchemaType.CastError;\r\n\r\n/**\r\n * Number SchemaType constructor.\r\n *\r\n * @param {String} key\r\n * @param {Object} options\r\n * @inherits SchemaType\r\n * @api public\r\n */\r\n\r\nfunction SchemaNumber(key, options) {\r\n  SchemaType.call(this, key, options, 'Number');\r\n}\r\n\r\n/**\r\n * Attaches a getter for all Number instances.\r\n *\r\n * #### Example:\r\n *\r\n *     // Make all numbers round down\r\n *     mongoose.Number.get(function(v) { return Math.floor(v); });\r\n *\r\n *     const Model = mongoose.model('Test', new Schema({ test: Number }));\r\n *     new Model({ test: 3.14 }).test; // 3\r\n *\r\n * @param {Function} getter\r\n * @return {this}\r\n * @function get\r\n * @static\r\n * @api public\r\n */\r\n\r\nSchemaNumber.get = SchemaType.get;\r\n\r\n/**\r\n * Sets a default option for all Number instances.\r\n *\r\n * #### Example:\r\n *\r\n *     // Make all numbers have option `min` equal to 0.\r\n *     mongoose.Schema.Number.set('min', 0);\r\n *\r\n *     const Order = mongoose.model('Order', new Schema({ amount: Number }));\r\n *     new Order({ amount: -10 }).validateSync().errors.amount.message; // Path `amount` must be larger than 0.\r\n *\r\n * @param {String} option The option you'd like to set the value for\r\n * @param {Any} value value for option\r\n * @return {undefined}\r\n * @function set\r\n * @static\r\n * @api public\r\n */\r\n\r\nSchemaNumber.set = SchemaType.set;\r\n\r\n/*!\r\n * ignore\r\n */\r\n\r\nSchemaNumber._cast = castNumber;\r\n\r\n/**\r\n * Get/set the function used to cast arbitrary values to numbers.\r\n *\r\n * #### Example:\r\n *\r\n *     // Make Mongoose cast empty strings '' to 0 for paths declared as numbers\r\n *     const original = mongoose.Number.cast();\r\n *     mongoose.Number.cast(v => {\r\n *       if (v === '') { return 0; }\r\n *       return original(v);\r\n *     });\r\n *\r\n *     // Or disable casting entirely\r\n *     mongoose.Number.cast(false);\r\n *\r\n * @param {Function} caster\r\n * @return {Function}\r\n * @function get\r\n * @static\r\n * @api public\r\n */\r\n\r\nSchemaNumber.cast = function cast(caster) {\r\n  if (arguments.length === 0) {\r\n    return this._cast;\r\n  }\r\n  if (caster === false) {\r\n    caster = this._defaultCaster;\r\n  }\r\n  this._cast = caster;\r\n\r\n  return this._cast;\r\n};\r\n\r\n/*!\r\n * ignore\r\n */\r\n\r\nSchemaNumber._defaultCaster = v => {\r\n  if (typeof v !== 'number') {\r\n    throw new Error();\r\n  }\r\n  return v;\r\n};\r\n\r\n/**\r\n * This schema type's name, to defend against minifiers that mangle\r\n * function names.\r\n *\r\n * @api public\r\n */\r\nSchemaNumber.schemaName = 'Number';\r\n\r\nSchemaNumber.defaultOptions = {};\r\n\r\n/*!\r\n * Inherits from SchemaType.\r\n */\r\nSchemaNumber.prototype = Object.create(SchemaType.prototype);\r\nSchemaNumber.prototype.constructor = SchemaNumber;\r\nSchemaNumber.prototype.OptionsConstructor = SchemaNumberOptions;\r\n\r\n/*!\r\n * ignore\r\n */\r\n\r\nSchemaNumber._checkRequired = v => typeof v === 'number' || v instanceof Number;\r\n\r\n/**\r\n * Override the function the required validator uses to check whether a string\r\n * passes the `required` check.\r\n *\r\n * @param {Function} fn\r\n * @return {Function}\r\n * @function checkRequired\r\n * @static\r\n * @api public\r\n */\r\n\r\nSchemaNumber.checkRequired = SchemaType.checkRequired;\r\n\r\n/**\r\n * Check if the given value satisfies a required validator.\r\n *\r\n * @param {Any} value\r\n * @param {Document} doc\r\n * @return {Boolean}\r\n * @api public\r\n */\r\n\r\nSchemaNumber.prototype.checkRequired = function checkRequired(value, doc) {\r\n  if (typeof value === 'object' && SchemaType._isRef(this, value, doc, true)) {\r\n    return value != null;\r\n  }\r\n\r\n  // `require('util').inherits()` does **not** copy static properties, and\r\n  // plugins like mongoose-float use `inherits()` for pre-ES6.\r\n  const _checkRequired = typeof this.constructor.checkRequired === 'function' ?\r\n    this.constructor.checkRequired() :\r\n    SchemaNumber.checkRequired();\r\n\r\n  return _checkRequired(value);\r\n};\r\n\r\n/**\r\n * Sets a minimum number validator.\r\n *\r\n * #### Example:\r\n *\r\n *     const s = new Schema({ n: { type: Number, min: 10 })\r\n *     const M = db.model('M', s)\r\n *     const m = new M({ n: 9 })\r\n *     m.save(function (err) {\r\n *       console.error(err) // validator error\r\n *       m.n = 10;\r\n *       m.save() // success\r\n *     })\r\n *\r\n *     // custom error messages\r\n *     // We can also use the special {MIN} token which will be replaced with the invalid value\r\n *     const min = [10, 'The value of path `{PATH}` ({VALUE}) is beneath the limit ({MIN}).'];\r\n *     const schema = new Schema({ n: { type: Number, min: min })\r\n *     const M = mongoose.model('Measurement', schema);\r\n *     const s= new M({ n: 4 });\r\n *     s.validate(function (err) {\r\n *       console.log(String(err)) // ValidationError: The value of path `n` (4) is beneath the limit (10).\r\n *     })\r\n *\r\n * @param {Number} value minimum number\r\n * @param {String} [message] optional custom error message\r\n * @return {SchemaType} this\r\n * @see Customized Error Messages #error_messages_MongooseError-messages\r\n * @api public\r\n */\r\n\r\nSchemaNumber.prototype.min = function(value, message) {\r\n  if (this.minValidator) {\r\n    this.validators = this.validators.filter(function(v) {\r\n      return v.validator !== this.minValidator;\r\n    }, this);\r\n  }\r\n\r\n  if (value !== null && value !== undefined) {\r\n    let msg = message || MongooseError.messages.Number.min;\r\n    msg = msg.replace(/{MIN}/, value);\r\n    this.validators.push({\r\n      validator: this.minValidator = function(v) {\r\n        return v == null || v >= value;\r\n      },\r\n      message: msg,\r\n      type: 'min',\r\n      min: value\r\n    });\r\n  }\r\n\r\n  return this;\r\n};\r\n\r\n/**\r\n * Sets a maximum number validator.\r\n *\r\n * #### Example:\r\n *\r\n *     const s = new Schema({ n: { type: Number, max: 10 })\r\n *     const M = db.model('M', s)\r\n *     const m = new M({ n: 11 })\r\n *     m.save(function (err) {\r\n *       console.error(err) // validator error\r\n *       m.n = 10;\r\n *       m.save() // success\r\n *     })\r\n *\r\n *     // custom error messages\r\n *     // We can also use the special {MAX} token which will be replaced with the invalid value\r\n *     const max = [10, 'The value of path `{PATH}` ({VALUE}) exceeds the limit ({MAX}).'];\r\n *     const schema = new Schema({ n: { type: Number, max: max })\r\n *     const M = mongoose.model('Measurement', schema);\r\n *     const s= new M({ n: 4 });\r\n *     s.validate(function (err) {\r\n *       console.log(String(err)) // ValidationError: The value of path `n` (4) exceeds the limit (10).\r\n *     })\r\n *\r\n * @param {Number} maximum number\r\n * @param {String} [message] optional custom error message\r\n * @return {SchemaType} this\r\n * @see Customized Error Messages #error_messages_MongooseError-messages\r\n * @api public\r\n */\r\n\r\nSchemaNumber.prototype.max = function(value, message) {\r\n  if (this.maxValidator) {\r\n    this.validators = this.validators.filter(function(v) {\r\n      return v.validator !== this.maxValidator;\r\n    }, this);\r\n  }\r\n\r\n  if (value !== null && value !== undefined) {\r\n    let msg = message || MongooseError.messages.Number.max;\r\n    msg = msg.replace(/{MAX}/, value);\r\n    this.validators.push({\r\n      validator: this.maxValidator = function(v) {\r\n        return v == null || v <= value;\r\n      },\r\n      message: msg,\r\n      type: 'max',\r\n      max: value\r\n    });\r\n  }\r\n\r\n  return this;\r\n};\r\n\r\n/**\r\n * Sets a enum validator\r\n *\r\n * #### Example:\r\n *\r\n *     const s = new Schema({ n: { type: Number, enum: [1, 2, 3] });\r\n *     const M = db.model('M', s);\r\n *\r\n *     const m = new M({ n: 4 });\r\n *     await m.save(); // throws validation error\r\n *\r\n *     m.n = 3;\r\n *     await m.save(); // succeeds\r\n *\r\n * @param {Array} values allowed values\r\n * @param {String} [message] optional custom error message\r\n * @return {SchemaType} this\r\n * @see Customized Error Messages #error_messages_MongooseError-messages\r\n * @api public\r\n */\r\n\r\nSchemaNumber.prototype.enum = function(values, message) {\r\n  if (this.enumValidator) {\r\n    this.validators = this.validators.filter(function(v) {\r\n      return v.validator !== this.enumValidator;\r\n    }, this);\r\n  }\r\n\r\n\r\n  if (!Array.isArray(values)) {\r\n    const isObjectSyntax = utils.isPOJO(values) && values.values != null;\r\n    if (isObjectSyntax) {\r\n      message = values.message;\r\n      values = values.values;\r\n    } else if (typeof values === 'number') {\r\n      values = Array.prototype.slice.call(arguments);\r\n      message = null;\r\n    }\r\n\r\n    if (utils.isPOJO(values)) {\r\n      values = Object.values(values);\r\n    }\r\n    message = message || MongooseError.messages.Number.enum;\r\n  }\r\n\r\n  message = message == null ? MongooseError.messages.Number.enum : message;\r\n\r\n  this.enumValidator = v => v == null || values.indexOf(v) !== -1;\r\n  this.validators.push({\r\n    validator: this.enumValidator,\r\n    message: message,\r\n    type: 'enum',\r\n    enumValues: values\r\n  });\r\n\r\n  return this;\r\n};\r\n\r\n/**\r\n * Casts to number\r\n *\r\n * @param {Object} value value to cast\r\n * @param {Document} doc document that triggers the casting\r\n * @param {Boolean} init\r\n * @api private\r\n */\r\n\r\nSchemaNumber.prototype.cast = function(value, doc, init) {\r\n  if (typeof value !== 'number' && SchemaType._isRef(this, value, doc, init)) {\r\n    if (value == null || utils.isNonBuiltinObject(value)) {\r\n      return this._castRef(value, doc, init);\r\n    }\r\n  }\r\n\r\n  const val = value && typeof value._id !== 'undefined' ?\r\n    value._id : // documents\r\n    value;\r\n\r\n  let castNumber;\r\n  if (typeof this._castFunction === 'function') {\r\n    castNumber = this._castFunction;\r\n  } else if (typeof this.constructor.cast === 'function') {\r\n    castNumber = this.constructor.cast();\r\n  } else {\r\n    castNumber = SchemaNumber.cast();\r\n  }\r\n\r\n  try {\r\n    return castNumber(val);\r\n  } catch (err) {\r\n    throw new CastError('Number', val, this.path, err, this);\r\n  }\r\n};\r\n\r\n/*!\r\n * ignore\r\n */\r\n\r\nfunction handleSingle(val) {\r\n  return this.cast(val);\r\n}\r\n\r\nfunction handleArray(val) {\r\n  const _this = this;\r\n  if (!Array.isArray(val)) {\r\n    return [this.cast(val)];\r\n  }\r\n  return val.map(function(m) {\r\n    return _this.cast(m);\r\n  });\r\n}\r\n\r\nSchemaNumber.prototype.$conditionalHandlers =\r\n    utils.options(SchemaType.prototype.$conditionalHandlers, {\r\n      $bitsAllClear: handleBitwiseOperator,\r\n      $bitsAnyClear: handleBitwiseOperator,\r\n      $bitsAllSet: handleBitwiseOperator,\r\n      $bitsAnySet: handleBitwiseOperator,\r\n      $gt: handleSingle,\r\n      $gte: handleSingle,\r\n      $lt: handleSingle,\r\n      $lte: handleSingle,\r\n      $mod: handleArray\r\n    });\r\n\r\n/**\r\n * Casts contents for queries.\r\n *\r\n * @param {String} $conditional\r\n * @param {any} [value]\r\n * @api private\r\n */\r\n\r\nSchemaNumber.prototype.castForQuery = function($conditional, val) {\r\n  let handler;\r\n  if (arguments.length === 2) {\r\n    handler = this.$conditionalHandlers[$conditional];\r\n    if (!handler) {\r\n      throw new CastError('number', val, this.path, null, this);\r\n    }\r\n    return handler.call(this, val);\r\n  }\r\n  val = this._castForQuery($conditional);\r\n  return val;\r\n};\r\n\r\n/*!\r\n * Module exports.\r\n */\r\n\r\nmodule.exports = SchemaNumber;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}