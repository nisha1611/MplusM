{"ast":null,"code":"/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Tobias Koppers @sokra\r\n*/\n\n\"use strict\";\n\nconst {\n  ConcatSource\n} = require(\"webpack-sources\");\nconst AbstractLibraryPlugin = require(\"./AbstractLibraryPlugin\");\n\n/** @typedef {import(\"webpack-sources\").Source} Source */\n/** @typedef {import(\"../../declarations/WebpackOptions\").LibraryOptions} LibraryOptions */\n/** @typedef {import(\"../../declarations/WebpackOptions\").LibraryType} LibraryType */\n/** @typedef {import(\"../Chunk\")} Chunk */\n/** @typedef {import(\"../Compilation\").ChunkHashContext} ChunkHashContext */\n/** @typedef {import(\"../Compiler\")} Compiler */\n/** @typedef {import(\"../javascript/JavascriptModulesPlugin\").RenderContext} RenderContext */\n/** @typedef {import(\"../util/Hash\")} Hash */\n/** @template T @typedef {import(\"./AbstractLibraryPlugin\").LibraryContext<T>} LibraryContext<T> */\n\n/**\r\n * @typedef {Object} JsonpLibraryPluginOptions\r\n * @property {LibraryType} type\r\n */\n\n/**\r\n * @typedef {Object} JsonpLibraryPluginParsed\r\n * @property {string} name\r\n */\n\n/**\r\n * @typedef {JsonpLibraryPluginParsed} T\r\n * @extends {AbstractLibraryPlugin<JsonpLibraryPluginParsed>}\r\n */\nclass JsonpLibraryPlugin extends AbstractLibraryPlugin {\n  /**\r\n   * @param {JsonpLibraryPluginOptions} options the plugin options\r\n   */\n  constructor(options) {\n    super({\n      pluginName: \"JsonpLibraryPlugin\",\n      type: options.type\n    });\n  }\n\n  /**\r\n   * @param {LibraryOptions} library normalized library option\r\n   * @returns {T | false} preprocess as needed by overriding\r\n   */\n  parseOptions(library) {\n    const {\n      name\n    } = library;\n    if (typeof name !== \"string\") {\n      throw new Error(`Jsonp library name must be a simple string. ${AbstractLibraryPlugin.COMMON_LIBRARY_NAME_MESSAGE}`);\n    }\n    return {\n      name: /** @type {string} */name\n    };\n  }\n\n  /**\r\n   * @param {Source} source source\r\n   * @param {RenderContext} renderContext render context\r\n   * @param {LibraryContext<T>} libraryContext context\r\n   * @returns {Source} source with library export\r\n   */\n  render(source, _ref, _ref2) {\n    let {\n      chunk\n    } = _ref;\n    let {\n      options,\n      compilation\n    } = _ref2;\n    const name = compilation.getPath(options.name, {\n      chunk\n    });\n    return new ConcatSource(`${name}(`, source, \")\");\n  }\n\n  /**\r\n   * @param {Chunk} chunk the chunk\r\n   * @param {Hash} hash hash\r\n   * @param {ChunkHashContext} chunkHashContext chunk hash context\r\n   * @param {LibraryContext<T>} libraryContext context\r\n   * @returns {void}\r\n   */\n  chunkHash(chunk, hash, chunkHashContext, _ref3) {\n    let {\n      options,\n      compilation\n    } = _ref3;\n    hash.update(\"JsonpLibraryPlugin\");\n    hash.update(compilation.getPath(options.name, {\n      chunk\n    }));\n  }\n}\nmodule.exports = JsonpLibraryPlugin;","map":{"version":3,"names":["ConcatSource","require","AbstractLibraryPlugin","JsonpLibraryPlugin","constructor","options","pluginName","type","parseOptions","library","name","Error","COMMON_LIBRARY_NAME_MESSAGE","render","source","chunk","compilation","getPath","chunkHash","hash","chunkHashContext","update","module","exports"],"sources":["C:/Users/91930/Desktop/Github projects/Pharmacy Demo/front-end/node_modules/webpack/lib/library/JsonpLibraryPlugin.js"],"sourcesContent":["/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Tobias Koppers @sokra\r\n*/\r\n\r\n\"use strict\";\r\n\r\nconst { ConcatSource } = require(\"webpack-sources\");\r\nconst AbstractLibraryPlugin = require(\"./AbstractLibraryPlugin\");\r\n\r\n/** @typedef {import(\"webpack-sources\").Source} Source */\r\n/** @typedef {import(\"../../declarations/WebpackOptions\").LibraryOptions} LibraryOptions */\r\n/** @typedef {import(\"../../declarations/WebpackOptions\").LibraryType} LibraryType */\r\n/** @typedef {import(\"../Chunk\")} Chunk */\r\n/** @typedef {import(\"../Compilation\").ChunkHashContext} ChunkHashContext */\r\n/** @typedef {import(\"../Compiler\")} Compiler */\r\n/** @typedef {import(\"../javascript/JavascriptModulesPlugin\").RenderContext} RenderContext */\r\n/** @typedef {import(\"../util/Hash\")} Hash */\r\n/** @template T @typedef {import(\"./AbstractLibraryPlugin\").LibraryContext<T>} LibraryContext<T> */\r\n\r\n/**\r\n * @typedef {Object} JsonpLibraryPluginOptions\r\n * @property {LibraryType} type\r\n */\r\n\r\n/**\r\n * @typedef {Object} JsonpLibraryPluginParsed\r\n * @property {string} name\r\n */\r\n\r\n/**\r\n * @typedef {JsonpLibraryPluginParsed} T\r\n * @extends {AbstractLibraryPlugin<JsonpLibraryPluginParsed>}\r\n */\r\nclass JsonpLibraryPlugin extends AbstractLibraryPlugin {\r\n\t/**\r\n\t * @param {JsonpLibraryPluginOptions} options the plugin options\r\n\t */\r\n\tconstructor(options) {\r\n\t\tsuper({\r\n\t\t\tpluginName: \"JsonpLibraryPlugin\",\r\n\t\t\ttype: options.type\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * @param {LibraryOptions} library normalized library option\r\n\t * @returns {T | false} preprocess as needed by overriding\r\n\t */\r\n\tparseOptions(library) {\r\n\t\tconst { name } = library;\r\n\t\tif (typeof name !== \"string\") {\r\n\t\t\tthrow new Error(\r\n\t\t\t\t`Jsonp library name must be a simple string. ${AbstractLibraryPlugin.COMMON_LIBRARY_NAME_MESSAGE}`\r\n\t\t\t);\r\n\t\t}\r\n\t\treturn {\r\n\t\t\tname: /** @type {string} */ (name)\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * @param {Source} source source\r\n\t * @param {RenderContext} renderContext render context\r\n\t * @param {LibraryContext<T>} libraryContext context\r\n\t * @returns {Source} source with library export\r\n\t */\r\n\trender(source, { chunk }, { options, compilation }) {\r\n\t\tconst name = compilation.getPath(options.name, {\r\n\t\t\tchunk\r\n\t\t});\r\n\t\treturn new ConcatSource(`${name}(`, source, \")\");\r\n\t}\r\n\r\n\t/**\r\n\t * @param {Chunk} chunk the chunk\r\n\t * @param {Hash} hash hash\r\n\t * @param {ChunkHashContext} chunkHashContext chunk hash context\r\n\t * @param {LibraryContext<T>} libraryContext context\r\n\t * @returns {void}\r\n\t */\r\n\tchunkHash(chunk, hash, chunkHashContext, { options, compilation }) {\r\n\t\thash.update(\"JsonpLibraryPlugin\");\r\n\t\thash.update(compilation.getPath(options.name, { chunk }));\r\n\t}\r\n}\r\n\r\nmodule.exports = JsonpLibraryPlugin;\r\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ,MAAM;EAAEA;AAAa,CAAC,GAAGC,OAAO,CAAC,iBAAiB,CAAC;AACnD,MAAMC,qBAAqB,GAAGD,OAAO,CAAC,yBAAyB,CAAC;;AAEhE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAME,kBAAkB,SAASD,qBAAqB,CAAC;EACtD;AACD;AACA;EACCE,WAAW,CAACC,OAAO,EAAE;IACpB,KAAK,CAAC;MACLC,UAAU,EAAE,oBAAoB;MAChCC,IAAI,EAAEF,OAAO,CAACE;IACf,CAAC,CAAC;EACH;;EAEA;AACD;AACA;AACA;EACCC,YAAY,CAACC,OAAO,EAAE;IACrB,MAAM;MAAEC;IAAK,CAAC,GAAGD,OAAO;IACxB,IAAI,OAAOC,IAAI,KAAK,QAAQ,EAAE;MAC7B,MAAM,IAAIC,KAAK,CACb,+CAA8CT,qBAAqB,CAACU,2BAA4B,EAAC,CAClG;IACF;IACA,OAAO;MACNF,IAAI,EAAE,qBAAuBA;IAC9B,CAAC;EACF;;EAEA;AACD;AACA;AACA;AACA;AACA;EACCG,MAAM,CAACC,MAAM,eAAuC;IAAA,IAArC;MAAEC;IAAM,CAAC;IAAA,IAAE;MAAEV,OAAO;MAAEW;IAAY,CAAC;IACjD,MAAMN,IAAI,GAAGM,WAAW,CAACC,OAAO,CAACZ,OAAO,CAACK,IAAI,EAAE;MAC9CK;IACD,CAAC,CAAC;IACF,OAAO,IAAIf,YAAY,CAAE,GAAEU,IAAK,GAAE,EAAEI,MAAM,EAAE,GAAG,CAAC;EACjD;;EAEA;AACD;AACA;AACA;AACA;AACA;AACA;EACCI,SAAS,CAACH,KAAK,EAAEI,IAAI,EAAEC,gBAAgB,SAA4B;IAAA,IAA1B;MAAEf,OAAO;MAAEW;IAAY,CAAC;IAChEG,IAAI,CAACE,MAAM,CAAC,oBAAoB,CAAC;IACjCF,IAAI,CAACE,MAAM,CAACL,WAAW,CAACC,OAAO,CAACZ,OAAO,CAACK,IAAI,EAAE;MAAEK;IAAM,CAAC,CAAC,CAAC;EAC1D;AACD;AAEAO,MAAM,CAACC,OAAO,GAAGpB,kBAAkB"},"metadata":{},"sourceType":"script","externalDependencies":[]}