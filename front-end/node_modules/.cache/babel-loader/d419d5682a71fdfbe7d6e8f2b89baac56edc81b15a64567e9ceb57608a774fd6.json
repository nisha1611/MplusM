{"ast":null,"code":"import { CredentialsProviderError } from \"@aws-sdk/property-provider\";\nimport { isAssumeRoleProfile, resolveAssumeRoleCredentials } from \"./resolveAssumeRoleCredentials\";\nimport { isProcessProfile, resolveProcessCredentials } from \"./resolveProcessCredentials\";\nimport { isSsoProfile, resolveSsoCredentials } from \"./resolveSsoCredentials\";\nimport { isStaticCredsProfile, resolveStaticCredentials } from \"./resolveStaticCredentials\";\nimport { isWebIdentityProfile, resolveWebIdentityCredentials } from \"./resolveWebIdentityCredentials\";\nexport const resolveProfileData = async function (profileName, profiles, options) {\n  let visitedProfiles = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  const data = profiles[profileName];\n  if (Object.keys(visitedProfiles).length > 0 && isStaticCredsProfile(data)) {\n    return resolveStaticCredentials(data);\n  }\n  if (isAssumeRoleProfile(data)) {\n    return resolveAssumeRoleCredentials(profileName, profiles, options, visitedProfiles);\n  }\n  if (isStaticCredsProfile(data)) {\n    return resolveStaticCredentials(data);\n  }\n  if (isWebIdentityProfile(data)) {\n    return resolveWebIdentityCredentials(data, options);\n  }\n  if (isProcessProfile(data)) {\n    return resolveProcessCredentials(options, profileName);\n  }\n  if (isSsoProfile(data)) {\n    return resolveSsoCredentials(data);\n  }\n  throw new CredentialsProviderError(`Profile ${profileName} could not be found or parsed in shared credentials file.`);\n};","map":{"version":3,"names":["CredentialsProviderError","isAssumeRoleProfile","resolveAssumeRoleCredentials","isProcessProfile","resolveProcessCredentials","isSsoProfile","resolveSsoCredentials","isStaticCredsProfile","resolveStaticCredentials","isWebIdentityProfile","resolveWebIdentityCredentials","resolveProfileData","profileName","profiles","options","visitedProfiles","data","Object","keys","length"],"sources":["C:/Users/91930/Desktop/Github projects/Pharmacy Demo/back-end/node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveProfileData.js"],"sourcesContent":["import { CredentialsProviderError } from \"@aws-sdk/property-provider\";\r\nimport { isAssumeRoleProfile, resolveAssumeRoleCredentials } from \"./resolveAssumeRoleCredentials\";\r\nimport { isProcessProfile, resolveProcessCredentials } from \"./resolveProcessCredentials\";\r\nimport { isSsoProfile, resolveSsoCredentials } from \"./resolveSsoCredentials\";\r\nimport { isStaticCredsProfile, resolveStaticCredentials } from \"./resolveStaticCredentials\";\r\nimport { isWebIdentityProfile, resolveWebIdentityCredentials } from \"./resolveWebIdentityCredentials\";\r\nexport const resolveProfileData = async (profileName, profiles, options, visitedProfiles = {}) => {\r\n    const data = profiles[profileName];\r\n    if (Object.keys(visitedProfiles).length > 0 && isStaticCredsProfile(data)) {\r\n        return resolveStaticCredentials(data);\r\n    }\r\n    if (isAssumeRoleProfile(data)) {\r\n        return resolveAssumeRoleCredentials(profileName, profiles, options, visitedProfiles);\r\n    }\r\n    if (isStaticCredsProfile(data)) {\r\n        return resolveStaticCredentials(data);\r\n    }\r\n    if (isWebIdentityProfile(data)) {\r\n        return resolveWebIdentityCredentials(data, options);\r\n    }\r\n    if (isProcessProfile(data)) {\r\n        return resolveProcessCredentials(options, profileName);\r\n    }\r\n    if (isSsoProfile(data)) {\r\n        return resolveSsoCredentials(data);\r\n    }\r\n    throw new CredentialsProviderError(`Profile ${profileName} could not be found or parsed in shared credentials file.`);\r\n};\r\n"],"mappings":"AAAA,SAASA,wBAAwB,QAAQ,4BAA4B;AACrE,SAASC,mBAAmB,EAAEC,4BAA4B,QAAQ,gCAAgC;AAClG,SAASC,gBAAgB,EAAEC,yBAAyB,QAAQ,6BAA6B;AACzF,SAASC,YAAY,EAAEC,qBAAqB,QAAQ,yBAAyB;AAC7E,SAASC,oBAAoB,EAAEC,wBAAwB,QAAQ,4BAA4B;AAC3F,SAASC,oBAAoB,EAAEC,6BAA6B,QAAQ,iCAAiC;AACrG,OAAO,MAAMC,kBAAkB,GAAG,gBAAOC,WAAW,EAAEC,QAAQ,EAAEC,OAAO,EAA2B;EAAA,IAAzBC,eAAe,uEAAG,CAAC,CAAC;EACzF,MAAMC,IAAI,GAAGH,QAAQ,CAACD,WAAW,CAAC;EAClC,IAAIK,MAAM,CAACC,IAAI,CAACH,eAAe,CAAC,CAACI,MAAM,GAAG,CAAC,IAAIZ,oBAAoB,CAACS,IAAI,CAAC,EAAE;IACvE,OAAOR,wBAAwB,CAACQ,IAAI,CAAC;EACzC;EACA,IAAIf,mBAAmB,CAACe,IAAI,CAAC,EAAE;IAC3B,OAAOd,4BAA4B,CAACU,WAAW,EAAEC,QAAQ,EAAEC,OAAO,EAAEC,eAAe,CAAC;EACxF;EACA,IAAIR,oBAAoB,CAACS,IAAI,CAAC,EAAE;IAC5B,OAAOR,wBAAwB,CAACQ,IAAI,CAAC;EACzC;EACA,IAAIP,oBAAoB,CAACO,IAAI,CAAC,EAAE;IAC5B,OAAON,6BAA6B,CAACM,IAAI,EAAEF,OAAO,CAAC;EACvD;EACA,IAAIX,gBAAgB,CAACa,IAAI,CAAC,EAAE;IACxB,OAAOZ,yBAAyB,CAACU,OAAO,EAAEF,WAAW,CAAC;EAC1D;EACA,IAAIP,YAAY,CAACW,IAAI,CAAC,EAAE;IACpB,OAAOV,qBAAqB,CAACU,IAAI,CAAC;EACtC;EACA,MAAM,IAAIhB,wBAAwB,CAAE,WAAUY,WAAY,2DAA0D,CAAC;AACzH,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}