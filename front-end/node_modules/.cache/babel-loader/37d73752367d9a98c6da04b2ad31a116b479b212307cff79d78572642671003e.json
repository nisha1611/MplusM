{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.fromWebToken = void 0;\nconst property_provider_1 = require(\"@aws-sdk/property-provider\");\nconst fromWebToken = init => () => {\n  const {\n    roleArn,\n    roleSessionName,\n    webIdentityToken,\n    providerId,\n    policyArns,\n    policy,\n    durationSeconds,\n    roleAssumerWithWebIdentity\n  } = init;\n  if (!roleAssumerWithWebIdentity) {\n    throw new property_provider_1.CredentialsProviderError(`Role Arn '${roleArn}' needs to be assumed with web identity,` + ` but no role assumption callback was provided.`, false);\n  }\n  return roleAssumerWithWebIdentity({\n    RoleArn: roleArn,\n    RoleSessionName: roleSessionName !== null && roleSessionName !== void 0 ? roleSessionName : `aws-sdk-js-session-${Date.now()}`,\n    WebIdentityToken: webIdentityToken,\n    ProviderId: providerId,\n    PolicyArns: policyArns,\n    Policy: policy,\n    DurationSeconds: durationSeconds\n  });\n};\nexports.fromWebToken = fromWebToken;","map":{"version":3,"names":["Object","defineProperty","exports","value","fromWebToken","property_provider_1","require","init","roleArn","roleSessionName","webIdentityToken","providerId","policyArns","policy","durationSeconds","roleAssumerWithWebIdentity","CredentialsProviderError","RoleArn","RoleSessionName","Date","now","WebIdentityToken","ProviderId","PolicyArns","Policy","DurationSeconds"],"sources":["C:/Users/91930/Desktop/Github projects/Pharmacy Demo/back-end/node_modules/@aws-sdk/credential-provider-web-identity/dist-cjs/fromWebToken.js"],"sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.fromWebToken = void 0;\r\nconst property_provider_1 = require(\"@aws-sdk/property-provider\");\r\nconst fromWebToken = (init) => () => {\r\n    const { roleArn, roleSessionName, webIdentityToken, providerId, policyArns, policy, durationSeconds, roleAssumerWithWebIdentity, } = init;\r\n    if (!roleAssumerWithWebIdentity) {\r\n        throw new property_provider_1.CredentialsProviderError(`Role Arn '${roleArn}' needs to be assumed with web identity,` +\r\n            ` but no role assumption callback was provided.`, false);\r\n    }\r\n    return roleAssumerWithWebIdentity({\r\n        RoleArn: roleArn,\r\n        RoleSessionName: roleSessionName !== null && roleSessionName !== void 0 ? roleSessionName : `aws-sdk-js-session-${Date.now()}`,\r\n        WebIdentityToken: webIdentityToken,\r\n        ProviderId: providerId,\r\n        PolicyArns: policyArns,\r\n        Policy: policy,\r\n        DurationSeconds: durationSeconds,\r\n    });\r\n};\r\nexports.fromWebToken = fromWebToken;\r\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,YAAY,GAAG,KAAK,CAAC;AAC7B,MAAMC,mBAAmB,GAAGC,OAAO,CAAC,4BAA4B,CAAC;AACjE,MAAMF,YAAY,GAAIG,IAAI,IAAK,MAAM;EACjC,MAAM;IAAEC,OAAO;IAAEC,eAAe;IAAEC,gBAAgB;IAAEC,UAAU;IAAEC,UAAU;IAAEC,MAAM;IAAEC,eAAe;IAAEC;EAA4B,CAAC,GAAGR,IAAI;EACzI,IAAI,CAACQ,0BAA0B,EAAE;IAC7B,MAAM,IAAIV,mBAAmB,CAACW,wBAAwB,CAAE,aAAYR,OAAQ,0CAAyC,GAChH,gDAA+C,EAAE,KAAK,CAAC;EAChE;EACA,OAAOO,0BAA0B,CAAC;IAC9BE,OAAO,EAAET,OAAO;IAChBU,eAAe,EAAET,eAAe,KAAK,IAAI,IAAIA,eAAe,KAAK,KAAK,CAAC,GAAGA,eAAe,GAAI,sBAAqBU,IAAI,CAACC,GAAG,EAAG,EAAC;IAC9HC,gBAAgB,EAAEX,gBAAgB;IAClCY,UAAU,EAAEX,UAAU;IACtBY,UAAU,EAAEX,UAAU;IACtBY,MAAM,EAAEX,MAAM;IACdY,eAAe,EAAEX;EACrB,CAAC,CAAC;AACN,CAAC;AACDZ,OAAO,CAACE,YAAY,GAAGA,YAAY"},"metadata":{},"sourceType":"script","externalDependencies":[]}