{"ast":null,"code":"\"use strict\";\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n// We have an ES6 Map available, return the native instance\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Map = void 0;\nvar global_1 = require(\"./utils/global\");\n/** @public */\nvar bsonMap;\nexports.Map = bsonMap;\nvar bsonGlobal = (0, global_1.getGlobal)();\nif (bsonGlobal.Map) {\n  exports.Map = bsonMap = bsonGlobal.Map;\n} else {\n  // We will return a polyfill\n  exports.Map = bsonMap = /** @class */function () {\n    function Map(array) {\n      if (array === void 0) {\n        array = [];\n      }\n      this._keys = [];\n      this._values = {};\n      for (var i = 0; i < array.length; i++) {\n        if (array[i] == null) continue; // skip null and undefined\n        var entry = array[i];\n        var key = entry[0];\n        var value = entry[1];\n        // Add the key to the list of keys in order\n        this._keys.push(key);\n        // Add the key and value to the values dictionary with a point\n        // to the location in the ordered keys list\n        this._values[key] = {\n          v: value,\n          i: this._keys.length - 1\n        };\n      }\n    }\n    Map.prototype.clear = function () {\n      this._keys = [];\n      this._values = {};\n    };\n    Map.prototype.delete = function (key) {\n      var value = this._values[key];\n      if (value == null) return false;\n      // Delete entry\n      delete this._values[key];\n      // Remove the key from the ordered keys list\n      this._keys.splice(value.i, 1);\n      return true;\n    };\n    Map.prototype.entries = function () {\n      var _this = this;\n      var index = 0;\n      return {\n        next: function () {\n          var key = _this._keys[index++];\n          return {\n            value: key !== undefined ? [key, _this._values[key].v] : undefined,\n            done: key !== undefined ? false : true\n          };\n        }\n      };\n    };\n    Map.prototype.forEach = function (callback, self) {\n      self = self || this;\n      for (var i = 0; i < this._keys.length; i++) {\n        var key = this._keys[i];\n        // Call the forEach callback\n        callback.call(self, this._values[key].v, key, self);\n      }\n    };\n    Map.prototype.get = function (key) {\n      return this._values[key] ? this._values[key].v : undefined;\n    };\n    Map.prototype.has = function (key) {\n      return this._values[key] != null;\n    };\n    Map.prototype.keys = function () {\n      var _this = this;\n      var index = 0;\n      return {\n        next: function () {\n          var key = _this._keys[index++];\n          return {\n            value: key !== undefined ? key : undefined,\n            done: key !== undefined ? false : true\n          };\n        }\n      };\n    };\n    Map.prototype.set = function (key, value) {\n      if (this._values[key]) {\n        this._values[key].v = value;\n        return this;\n      }\n      // Add the key to the list of keys in order\n      this._keys.push(key);\n      // Add the key and value to the values dictionary with a point\n      // to the location in the ordered keys list\n      this._values[key] = {\n        v: value,\n        i: this._keys.length - 1\n      };\n      return this;\n    };\n    Map.prototype.values = function () {\n      var _this = this;\n      var index = 0;\n      return {\n        next: function () {\n          var key = _this._keys[index++];\n          return {\n            value: key !== undefined ? _this._values[key].v : undefined,\n            done: key !== undefined ? false : true\n          };\n        }\n      };\n    };\n    Object.defineProperty(Map.prototype, \"size\", {\n      get: function () {\n        return this._keys.length;\n      },\n      enumerable: false,\n      configurable: true\n    });\n    return Map;\n  }();\n}","map":{"version":3,"mappings":"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","names":["bsonMap","exports","bsonGlobal","Map","array","_keys","_values","i","length","entry","key","value","push","v","splice","index","next","_this","undefined","done","callback","self","call","Object"],"sources":["C:\\Users\\91930\\Desktop\\Github projects\\Pharmacy Demo\\back-end\\node_modules\\bson\\src\\map.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\r\n// We have an ES6 Map available, return the native instance\r\n\r\nimport { getGlobal } from './utils/global';\r\n\r\n/** @public */\r\nlet bsonMap: MapConstructor;\r\n\r\nconst bsonGlobal = getGlobal<{ Map?: MapConstructor }>();\r\nif (bsonGlobal.Map) {\r\n  bsonMap = bsonGlobal.Map;\r\n} else {\r\n  // We will return a polyfill\r\n  bsonMap = class Map {\r\n    private _keys: string[];\r\n    private _values: Record<string, any>;\r\n    constructor(array: [string, any][] = []) {\r\n      this._keys = [];\r\n      this._values = {};\r\n\r\n      for (let i = 0; i < array.length; i++) {\r\n        if (array[i] == null) continue; // skip null and undefined\r\n        const entry = array[i];\r\n        const key = entry[0];\r\n        const value = entry[1];\r\n        // Add the key to the list of keys in order\r\n        this._keys.push(key);\r\n        // Add the key and value to the values dictionary with a point\r\n        // to the location in the ordered keys list\r\n        this._values[key] = { v: value, i: this._keys.length - 1 };\r\n      }\r\n    }\r\n    clear() {\r\n      this._keys = [];\r\n      this._values = {};\r\n    }\r\n    delete(key: string) {\r\n      const value = this._values[key];\r\n      if (value == null) return false;\r\n      // Delete entry\r\n      delete this._values[key];\r\n      // Remove the key from the ordered keys list\r\n      this._keys.splice(value.i, 1);\r\n      return true;\r\n    }\r\n    entries() {\r\n      let index = 0;\r\n\r\n      return {\r\n        next: () => {\r\n          const key = this._keys[index++];\r\n          return {\r\n            value: key !== undefined ? [key, this._values[key].v] : undefined,\r\n            done: key !== undefined ? false : true\r\n          };\r\n        }\r\n      };\r\n    }\r\n    forEach(callback: (this: this, value: any, key: string, self: this) => void, self?: this) {\r\n      self = self || this;\r\n\r\n      for (let i = 0; i < this._keys.length; i++) {\r\n        const key = this._keys[i];\r\n        // Call the forEach callback\r\n        callback.call(self, this._values[key].v, key, self);\r\n      }\r\n    }\r\n    get(key: string) {\r\n      return this._values[key] ? this._values[key].v : undefined;\r\n    }\r\n    has(key: string) {\r\n      return this._values[key] != null;\r\n    }\r\n    keys() {\r\n      let index = 0;\r\n\r\n      return {\r\n        next: () => {\r\n          const key = this._keys[index++];\r\n          return {\r\n            value: key !== undefined ? key : undefined,\r\n            done: key !== undefined ? false : true\r\n          };\r\n        }\r\n      };\r\n    }\r\n    set(key: string, value: any) {\r\n      if (this._values[key]) {\r\n        this._values[key].v = value;\r\n        return this;\r\n      }\r\n\r\n      // Add the key to the list of keys in order\r\n      this._keys.push(key);\r\n      // Add the key and value to the values dictionary with a point\r\n      // to the location in the ordered keys list\r\n      this._values[key] = { v: value, i: this._keys.length - 1 };\r\n      return this;\r\n    }\r\n    values() {\r\n      let index = 0;\r\n\r\n      return {\r\n        next: () => {\r\n          const key = this._keys[index++];\r\n          return {\r\n            value: key !== undefined ? this._values[key].v : undefined,\r\n            done: key !== undefined ? false : true\r\n          };\r\n        }\r\n      };\r\n    }\r\n    get size() {\r\n      return this._keys.length;\r\n    }\r\n  } as unknown as MapConstructor;\r\n}\r\n\r\nexport { bsonMap as Map };\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}