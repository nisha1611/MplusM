{"ast":null,"code":"/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Tobias Koppers @sokra\r\n*/\n\n\"use strict\";\n\nconst NormalModule = require(\"../NormalModule\");\n\n/** @typedef {import(\"../Compiler\")} Compiler */\n\n// data URL scheme: \"data:text/javascript;charset=utf-8;base64,some-string\"\n// http://www.ietf.org/rfc/rfc2397.txt\nconst URIRegEx = /^data:([^;,]+)?((?:;[^;,]+)*?)(?:;(base64))?,(.*)$/i;\nconst decodeDataURI = uri => {\n  const match = URIRegEx.exec(uri);\n  if (!match) return null;\n  const isBase64 = match[3];\n  const body = match[4];\n  return isBase64 ? Buffer.from(body, \"base64\") : Buffer.from(decodeURIComponent(body), \"ascii\");\n};\nclass DataUriPlugin {\n  /**\r\n   * Apply the plugin\r\n   * @param {Compiler} compiler the compiler instance\r\n   * @returns {void}\r\n   */\n  apply(compiler) {\n    compiler.hooks.compilation.tap(\"DataUriPlugin\", (compilation, _ref) => {\n      let {\n        normalModuleFactory\n      } = _ref;\n      normalModuleFactory.hooks.resolveForScheme.for(\"data\").tap(\"DataUriPlugin\", resourceData => {\n        const match = URIRegEx.exec(resourceData.resource);\n        if (match) {\n          resourceData.data.mimetype = match[1] || \"\";\n          resourceData.data.parameters = match[2] || \"\";\n          resourceData.data.encoding = match[3] || false;\n          resourceData.data.encodedContent = match[4] || \"\";\n        }\n      });\n      NormalModule.getCompilationHooks(compilation).readResourceForScheme.for(\"data\").tap(\"DataUriPlugin\", resource => decodeDataURI(resource));\n    });\n  }\n}\nmodule.exports = DataUriPlugin;","map":{"version":3,"names":["NormalModule","require","URIRegEx","decodeDataURI","uri","match","exec","isBase64","body","Buffer","from","decodeURIComponent","DataUriPlugin","apply","compiler","hooks","compilation","tap","normalModuleFactory","resolveForScheme","for","resourceData","resource","data","mimetype","parameters","encoding","encodedContent","getCompilationHooks","readResourceForScheme","module","exports"],"sources":["C:/Users/91930/Desktop/Github projects/Pharmacy Demo/front-end/node_modules/webpack/lib/schemes/DataUriPlugin.js"],"sourcesContent":["/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Tobias Koppers @sokra\r\n*/\r\n\r\n\"use strict\";\r\n\r\nconst NormalModule = require(\"../NormalModule\");\r\n\r\n/** @typedef {import(\"../Compiler\")} Compiler */\r\n\r\n// data URL scheme: \"data:text/javascript;charset=utf-8;base64,some-string\"\r\n// http://www.ietf.org/rfc/rfc2397.txt\r\nconst URIRegEx = /^data:([^;,]+)?((?:;[^;,]+)*?)(?:;(base64))?,(.*)$/i;\r\n\r\nconst decodeDataURI = uri => {\r\n\tconst match = URIRegEx.exec(uri);\r\n\tif (!match) return null;\r\n\r\n\tconst isBase64 = match[3];\r\n\tconst body = match[4];\r\n\treturn isBase64\r\n\t\t? Buffer.from(body, \"base64\")\r\n\t\t: Buffer.from(decodeURIComponent(body), \"ascii\");\r\n};\r\n\r\nclass DataUriPlugin {\r\n\t/**\r\n\t * Apply the plugin\r\n\t * @param {Compiler} compiler the compiler instance\r\n\t * @returns {void}\r\n\t */\r\n\tapply(compiler) {\r\n\t\tcompiler.hooks.compilation.tap(\r\n\t\t\t\"DataUriPlugin\",\r\n\t\t\t(compilation, { normalModuleFactory }) => {\r\n\t\t\t\tnormalModuleFactory.hooks.resolveForScheme\r\n\t\t\t\t\t.for(\"data\")\r\n\t\t\t\t\t.tap(\"DataUriPlugin\", resourceData => {\r\n\t\t\t\t\t\tconst match = URIRegEx.exec(resourceData.resource);\r\n\t\t\t\t\t\tif (match) {\r\n\t\t\t\t\t\t\tresourceData.data.mimetype = match[1] || \"\";\r\n\t\t\t\t\t\t\tresourceData.data.parameters = match[2] || \"\";\r\n\t\t\t\t\t\t\tresourceData.data.encoding = match[3] || false;\r\n\t\t\t\t\t\t\tresourceData.data.encodedContent = match[4] || \"\";\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\tNormalModule.getCompilationHooks(compilation)\r\n\t\t\t\t\t.readResourceForScheme.for(\"data\")\r\n\t\t\t\t\t.tap(\"DataUriPlugin\", resource => decodeDataURI(resource));\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n}\r\n\r\nmodule.exports = DataUriPlugin;\r\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ,MAAMA,YAAY,GAAGC,OAAO,CAAC,iBAAiB,CAAC;;AAE/C;;AAEA;AACA;AACA,MAAMC,QAAQ,GAAG,qDAAqD;AAEtE,MAAMC,aAAa,GAAGC,GAAG,IAAI;EAC5B,MAAMC,KAAK,GAAGH,QAAQ,CAACI,IAAI,CAACF,GAAG,CAAC;EAChC,IAAI,CAACC,KAAK,EAAE,OAAO,IAAI;EAEvB,MAAME,QAAQ,GAAGF,KAAK,CAAC,CAAC,CAAC;EACzB,MAAMG,IAAI,GAAGH,KAAK,CAAC,CAAC,CAAC;EACrB,OAAOE,QAAQ,GACZE,MAAM,CAACC,IAAI,CAACF,IAAI,EAAE,QAAQ,CAAC,GAC3BC,MAAM,CAACC,IAAI,CAACC,kBAAkB,CAACH,IAAI,CAAC,EAAE,OAAO,CAAC;AAClD,CAAC;AAED,MAAMI,aAAa,CAAC;EACnB;AACD;AACA;AACA;AACA;EACCC,KAAK,CAACC,QAAQ,EAAE;IACfA,QAAQ,CAACC,KAAK,CAACC,WAAW,CAACC,GAAG,CAC7B,eAAe,EACf,CAACD,WAAW,WAA8B;MAAA,IAA5B;QAAEE;MAAoB,CAAC;MACpCA,mBAAmB,CAACH,KAAK,CAACI,gBAAgB,CACxCC,GAAG,CAAC,MAAM,CAAC,CACXH,GAAG,CAAC,eAAe,EAAEI,YAAY,IAAI;QACrC,MAAMhB,KAAK,GAAGH,QAAQ,CAACI,IAAI,CAACe,YAAY,CAACC,QAAQ,CAAC;QAClD,IAAIjB,KAAK,EAAE;UACVgB,YAAY,CAACE,IAAI,CAACC,QAAQ,GAAGnB,KAAK,CAAC,CAAC,CAAC,IAAI,EAAE;UAC3CgB,YAAY,CAACE,IAAI,CAACE,UAAU,GAAGpB,KAAK,CAAC,CAAC,CAAC,IAAI,EAAE;UAC7CgB,YAAY,CAACE,IAAI,CAACG,QAAQ,GAAGrB,KAAK,CAAC,CAAC,CAAC,IAAI,KAAK;UAC9CgB,YAAY,CAACE,IAAI,CAACI,cAAc,GAAGtB,KAAK,CAAC,CAAC,CAAC,IAAI,EAAE;QAClD;MACD,CAAC,CAAC;MACHL,YAAY,CAAC4B,mBAAmB,CAACZ,WAAW,CAAC,CAC3Ca,qBAAqB,CAACT,GAAG,CAAC,MAAM,CAAC,CACjCH,GAAG,CAAC,eAAe,EAAEK,QAAQ,IAAInB,aAAa,CAACmB,QAAQ,CAAC,CAAC;IAC5D,CAAC,CACD;EACF;AACD;AAEAQ,MAAM,CAACC,OAAO,GAAGnB,aAAa"},"metadata":{},"sourceType":"script","externalDependencies":[]}