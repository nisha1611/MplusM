{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.resolveSSOCredentials = void 0;\nconst client_sso_1 = require(\"@aws-sdk/client-sso\");\nconst property_provider_1 = require(\"@aws-sdk/property-provider\");\nconst shared_ini_file_loader_1 = require(\"@aws-sdk/shared-ini-file-loader\");\nconst token_providers_1 = require(\"@aws-sdk/token-providers\");\nconst EXPIRE_WINDOW_MS = 15 * 60 * 1000;\nconst SHOULD_FAIL_CREDENTIAL_CHAIN = false;\nconst resolveSSOCredentials = async _ref => {\n  let {\n    ssoStartUrl,\n    ssoSession,\n    ssoAccountId,\n    ssoRegion,\n    ssoRoleName,\n    ssoClient,\n    profile\n  } = _ref;\n  let token;\n  const refreshMessage = `To refresh this SSO session run aws sso login with the corresponding profile.`;\n  if (ssoSession) {\n    try {\n      const _token = await (0, token_providers_1.fromSso)({\n        profile\n      })();\n      token = {\n        accessToken: _token.token,\n        expiresAt: new Date(_token.expiration).toISOString()\n      };\n    } catch (e) {\n      throw new property_provider_1.CredentialsProviderError(e.message, SHOULD_FAIL_CREDENTIAL_CHAIN);\n    }\n  } else {\n    try {\n      token = await (0, shared_ini_file_loader_1.getSSOTokenFromFile)(ssoStartUrl);\n    } catch (e) {\n      throw new property_provider_1.CredentialsProviderError(`The SSO session associated with this profile is invalid. ${refreshMessage}`, SHOULD_FAIL_CREDENTIAL_CHAIN);\n    }\n  }\n  if (new Date(token.expiresAt).getTime() - Date.now() <= EXPIRE_WINDOW_MS) {\n    throw new property_provider_1.CredentialsProviderError(`The SSO session associated with this profile has expired. ${refreshMessage}`, SHOULD_FAIL_CREDENTIAL_CHAIN);\n  }\n  const {\n    accessToken\n  } = token;\n  const sso = ssoClient || new client_sso_1.SSOClient({\n    region: ssoRegion\n  });\n  let ssoResp;\n  try {\n    ssoResp = await sso.send(new client_sso_1.GetRoleCredentialsCommand({\n      accountId: ssoAccountId,\n      roleName: ssoRoleName,\n      accessToken\n    }));\n  } catch (e) {\n    throw property_provider_1.CredentialsProviderError.from(e, SHOULD_FAIL_CREDENTIAL_CHAIN);\n  }\n  const {\n    roleCredentials: {\n      accessKeyId,\n      secretAccessKey,\n      sessionToken,\n      expiration\n    } = {}\n  } = ssoResp;\n  if (!accessKeyId || !secretAccessKey || !sessionToken || !expiration) {\n    throw new property_provider_1.CredentialsProviderError(\"SSO returns an invalid temporary credential.\", SHOULD_FAIL_CREDENTIAL_CHAIN);\n  }\n  return {\n    accessKeyId,\n    secretAccessKey,\n    sessionToken,\n    expiration: new Date(expiration)\n  };\n};\nexports.resolveSSOCredentials = resolveSSOCredentials;","map":{"version":3,"names":["Object","defineProperty","exports","value","resolveSSOCredentials","client_sso_1","require","property_provider_1","shared_ini_file_loader_1","token_providers_1","EXPIRE_WINDOW_MS","SHOULD_FAIL_CREDENTIAL_CHAIN","ssoStartUrl","ssoSession","ssoAccountId","ssoRegion","ssoRoleName","ssoClient","profile","token","refreshMessage","_token","fromSso","accessToken","expiresAt","Date","expiration","toISOString","e","CredentialsProviderError","message","getSSOTokenFromFile","getTime","now","sso","SSOClient","region","ssoResp","send","GetRoleCredentialsCommand","accountId","roleName","from","roleCredentials","accessKeyId","secretAccessKey","sessionToken"],"sources":["C:/Users/91930/Desktop/Github projects/Pharmacy Demo/back-end/node_modules/@aws-sdk/credential-provider-sso/dist-cjs/resolveSSOCredentials.js"],"sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.resolveSSOCredentials = void 0;\r\nconst client_sso_1 = require(\"@aws-sdk/client-sso\");\r\nconst property_provider_1 = require(\"@aws-sdk/property-provider\");\r\nconst shared_ini_file_loader_1 = require(\"@aws-sdk/shared-ini-file-loader\");\r\nconst token_providers_1 = require(\"@aws-sdk/token-providers\");\r\nconst EXPIRE_WINDOW_MS = 15 * 60 * 1000;\r\nconst SHOULD_FAIL_CREDENTIAL_CHAIN = false;\r\nconst resolveSSOCredentials = async ({ ssoStartUrl, ssoSession, ssoAccountId, ssoRegion, ssoRoleName, ssoClient, profile, }) => {\r\n    let token;\r\n    const refreshMessage = `To refresh this SSO session run aws sso login with the corresponding profile.`;\r\n    if (ssoSession) {\r\n        try {\r\n            const _token = await (0, token_providers_1.fromSso)({ profile })();\r\n            token = {\r\n                accessToken: _token.token,\r\n                expiresAt: new Date(_token.expiration).toISOString(),\r\n            };\r\n        }\r\n        catch (e) {\r\n            throw new property_provider_1.CredentialsProviderError(e.message, SHOULD_FAIL_CREDENTIAL_CHAIN);\r\n        }\r\n    }\r\n    else {\r\n        try {\r\n            token = await (0, shared_ini_file_loader_1.getSSOTokenFromFile)(ssoStartUrl);\r\n        }\r\n        catch (e) {\r\n            throw new property_provider_1.CredentialsProviderError(`The SSO session associated with this profile is invalid. ${refreshMessage}`, SHOULD_FAIL_CREDENTIAL_CHAIN);\r\n        }\r\n    }\r\n    if (new Date(token.expiresAt).getTime() - Date.now() <= EXPIRE_WINDOW_MS) {\r\n        throw new property_provider_1.CredentialsProviderError(`The SSO session associated with this profile has expired. ${refreshMessage}`, SHOULD_FAIL_CREDENTIAL_CHAIN);\r\n    }\r\n    const { accessToken } = token;\r\n    const sso = ssoClient || new client_sso_1.SSOClient({ region: ssoRegion });\r\n    let ssoResp;\r\n    try {\r\n        ssoResp = await sso.send(new client_sso_1.GetRoleCredentialsCommand({\r\n            accountId: ssoAccountId,\r\n            roleName: ssoRoleName,\r\n            accessToken,\r\n        }));\r\n    }\r\n    catch (e) {\r\n        throw property_provider_1.CredentialsProviderError.from(e, SHOULD_FAIL_CREDENTIAL_CHAIN);\r\n    }\r\n    const { roleCredentials: { accessKeyId, secretAccessKey, sessionToken, expiration } = {} } = ssoResp;\r\n    if (!accessKeyId || !secretAccessKey || !sessionToken || !expiration) {\r\n        throw new property_provider_1.CredentialsProviderError(\"SSO returns an invalid temporary credential.\", SHOULD_FAIL_CREDENTIAL_CHAIN);\r\n    }\r\n    return { accessKeyId, secretAccessKey, sessionToken, expiration: new Date(expiration) };\r\n};\r\nexports.resolveSSOCredentials = resolveSSOCredentials;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}