{"ast":null,"code":"export const createConfigValueProvider = (configKey, canonicalEndpointParamKey, config) => {\n  const configProvider = async () => {\n    const configValue = config[configKey] ?? config[canonicalEndpointParamKey];\n    if (typeof configValue === \"function\") {\n      return configValue();\n    }\n    return configValue;\n  };\n  if (configKey === \"endpoint\" || canonicalEndpointParamKey === \"endpoint\") {\n    return async () => {\n      const endpoint = await configProvider();\n      if (endpoint && typeof endpoint === \"object\") {\n        if (\"url\" in endpoint) {\n          return endpoint.url.href;\n        }\n        if (\"hostname\" in endpoint) {\n          const {\n            protocol,\n            hostname,\n            port,\n            path\n          } = endpoint;\n          return `${protocol}//${hostname}${port ? \":\" + port : \"\"}${path}`;\n        }\n      }\n      return endpoint;\n    };\n  }\n  return configProvider;\n};","map":{"version":3,"names":["createConfigValueProvider","configKey","canonicalEndpointParamKey","config","configProvider","configValue","endpoint","url","href","protocol","hostname","port","path"],"sources":["C:/Users/91930/Desktop/Github projects/Pharmacy Demo/back-end/node_modules/@aws-sdk/middleware-endpoint/dist-es/adaptors/createConfigValueProvider.js"],"sourcesContent":["export const createConfigValueProvider = (configKey, canonicalEndpointParamKey, config) => {\r\n    const configProvider = async () => {\r\n        const configValue = config[configKey] ?? config[canonicalEndpointParamKey];\r\n        if (typeof configValue === \"function\") {\r\n            return configValue();\r\n        }\r\n        return configValue;\r\n    };\r\n    if (configKey === \"endpoint\" || canonicalEndpointParamKey === \"endpoint\") {\r\n        return async () => {\r\n            const endpoint = await configProvider();\r\n            if (endpoint && typeof endpoint === \"object\") {\r\n                if (\"url\" in endpoint) {\r\n                    return endpoint.url.href;\r\n                }\r\n                if (\"hostname\" in endpoint) {\r\n                    const { protocol, hostname, port, path } = endpoint;\r\n                    return `${protocol}//${hostname}${port ? \":\" + port : \"\"}${path}`;\r\n                }\r\n            }\r\n            return endpoint;\r\n        };\r\n    }\r\n    return configProvider;\r\n};\r\n"],"mappings":"AAAA,OAAO,MAAMA,yBAAyB,GAAG,CAACC,SAAS,EAAEC,yBAAyB,EAAEC,MAAM,KAAK;EACvF,MAAMC,cAAc,GAAG,YAAY;IAC/B,MAAMC,WAAW,GAAGF,MAAM,CAACF,SAAS,CAAC,IAAIE,MAAM,CAACD,yBAAyB,CAAC;IAC1E,IAAI,OAAOG,WAAW,KAAK,UAAU,EAAE;MACnC,OAAOA,WAAW,EAAE;IACxB;IACA,OAAOA,WAAW;EACtB,CAAC;EACD,IAAIJ,SAAS,KAAK,UAAU,IAAIC,yBAAyB,KAAK,UAAU,EAAE;IACtE,OAAO,YAAY;MACf,MAAMI,QAAQ,GAAG,MAAMF,cAAc,EAAE;MACvC,IAAIE,QAAQ,IAAI,OAAOA,QAAQ,KAAK,QAAQ,EAAE;QAC1C,IAAI,KAAK,IAAIA,QAAQ,EAAE;UACnB,OAAOA,QAAQ,CAACC,GAAG,CAACC,IAAI;QAC5B;QACA,IAAI,UAAU,IAAIF,QAAQ,EAAE;UACxB,MAAM;YAAEG,QAAQ;YAAEC,QAAQ;YAAEC,IAAI;YAAEC;UAAK,CAAC,GAAGN,QAAQ;UACnD,OAAQ,GAAEG,QAAS,KAAIC,QAAS,GAAEC,IAAI,GAAG,GAAG,GAAGA,IAAI,GAAG,EAAG,GAAEC,IAAK,EAAC;QACrE;MACJ;MACA,OAAON,QAAQ;IACnB,CAAC;EACL;EACA,OAAOF,cAAc;AACzB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}