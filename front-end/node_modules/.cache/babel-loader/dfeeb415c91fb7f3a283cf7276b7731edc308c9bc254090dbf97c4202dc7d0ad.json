{"ast":null,"code":"/**\r\n * Browsers' descriptors\r\n *\r\n * The idea of descriptors is simple. You should know about them two simple things:\r\n * 1. Every descriptor has a method or property called `test` and a `describe` method.\r\n * 2. Order of descriptors is important.\r\n *\r\n * More details:\r\n * 1. Method or property `test` serves as a way to detect whether the UA string\r\n * matches some certain browser or not. The `describe` method helps to make a result\r\n * object with params that show some browser-specific things: name, version, etc.\r\n * 2. Order of descriptors is important because a Parser goes through them one by one\r\n * in course. For example, if you insert Chrome's descriptor as the first one,\r\n * more then a half of browsers will be described as Chrome, because they will pass\r\n * the Chrome descriptor's test.\r\n *\r\n * Descriptor's `test` could be a property with an array of RegExps, where every RegExp\r\n * will be applied to a UA string to test it whether it matches or not.\r\n * If a descriptor has two or more regexps in the `test` array it tests them one by one\r\n * with a logical sum operation. Parser stops if it has found any RegExp that matches the UA.\r\n *\r\n * Or `test` could be a method. In that case it gets a Parser instance and should\r\n * return true/false to get the Parser know if this browser descriptor matches the UA or not.\r\n */\n\nimport Utils from './utils.js';\nconst commonVersionIdentifier = /version\\/(\\d+(\\.?_?\\d+)+)/i;\nconst browsersList = [/* Googlebot */\n{\n  test: [/googlebot/i],\n  describe(ua) {\n    const browser = {\n      name: 'Googlebot'\n    };\n    const version = Utils.getFirstMatch(/googlebot\\/(\\d+(\\.\\d+))/i, ua) || Utils.getFirstMatch(commonVersionIdentifier, ua);\n    if (version) {\n      browser.version = version;\n    }\n    return browser;\n  }\n}, /* Opera < 13.0 */\n{\n  test: [/opera/i],\n  describe(ua) {\n    const browser = {\n      name: 'Opera'\n    };\n    const version = Utils.getFirstMatch(commonVersionIdentifier, ua) || Utils.getFirstMatch(/(?:opera)[\\s/](\\d+(\\.?_?\\d+)+)/i, ua);\n    if (version) {\n      browser.version = version;\n    }\n    return browser;\n  }\n}, /* Opera > 13.0 */\n{\n  test: [/opr\\/|opios/i],\n  describe(ua) {\n    const browser = {\n      name: 'Opera'\n    };\n    const version = Utils.getFirstMatch(/(?:opr|opios)[\\s/](\\S+)/i, ua) || Utils.getFirstMatch(commonVersionIdentifier, ua);\n    if (version) {\n      browser.version = version;\n    }\n    return browser;\n  }\n}, {\n  test: [/SamsungBrowser/i],\n  describe(ua) {\n    const browser = {\n      name: 'Samsung Internet for Android'\n    };\n    const version = Utils.getFirstMatch(commonVersionIdentifier, ua) || Utils.getFirstMatch(/(?:SamsungBrowser)[\\s/](\\d+(\\.?_?\\d+)+)/i, ua);\n    if (version) {\n      browser.version = version;\n    }\n    return browser;\n  }\n}, {\n  test: [/Whale/i],\n  describe(ua) {\n    const browser = {\n      name: 'NAVER Whale Browser'\n    };\n    const version = Utils.getFirstMatch(commonVersionIdentifier, ua) || Utils.getFirstMatch(/(?:whale)[\\s/](\\d+(?:\\.\\d+)+)/i, ua);\n    if (version) {\n      browser.version = version;\n    }\n    return browser;\n  }\n}, {\n  test: [/MZBrowser/i],\n  describe(ua) {\n    const browser = {\n      name: 'MZ Browser'\n    };\n    const version = Utils.getFirstMatch(/(?:MZBrowser)[\\s/](\\d+(?:\\.\\d+)+)/i, ua) || Utils.getFirstMatch(commonVersionIdentifier, ua);\n    if (version) {\n      browser.version = version;\n    }\n    return browser;\n  }\n}, {\n  test: [/focus/i],\n  describe(ua) {\n    const browser = {\n      name: 'Focus'\n    };\n    const version = Utils.getFirstMatch(/(?:focus)[\\s/](\\d+(?:\\.\\d+)+)/i, ua) || Utils.getFirstMatch(commonVersionIdentifier, ua);\n    if (version) {\n      browser.version = version;\n    }\n    return browser;\n  }\n}, {\n  test: [/swing/i],\n  describe(ua) {\n    const browser = {\n      name: 'Swing'\n    };\n    const version = Utils.getFirstMatch(/(?:swing)[\\s/](\\d+(?:\\.\\d+)+)/i, ua) || Utils.getFirstMatch(commonVersionIdentifier, ua);\n    if (version) {\n      browser.version = version;\n    }\n    return browser;\n  }\n}, {\n  test: [/coast/i],\n  describe(ua) {\n    const browser = {\n      name: 'Opera Coast'\n    };\n    const version = Utils.getFirstMatch(commonVersionIdentifier, ua) || Utils.getFirstMatch(/(?:coast)[\\s/](\\d+(\\.?_?\\d+)+)/i, ua);\n    if (version) {\n      browser.version = version;\n    }\n    return browser;\n  }\n}, {\n  test: [/opt\\/\\d+(?:.?_?\\d+)+/i],\n  describe(ua) {\n    const browser = {\n      name: 'Opera Touch'\n    };\n    const version = Utils.getFirstMatch(/(?:opt)[\\s/](\\d+(\\.?_?\\d+)+)/i, ua) || Utils.getFirstMatch(commonVersionIdentifier, ua);\n    if (version) {\n      browser.version = version;\n    }\n    return browser;\n  }\n}, {\n  test: [/yabrowser/i],\n  describe(ua) {\n    const browser = {\n      name: 'Yandex Browser'\n    };\n    const version = Utils.getFirstMatch(/(?:yabrowser)[\\s/](\\d+(\\.?_?\\d+)+)/i, ua) || Utils.getFirstMatch(commonVersionIdentifier, ua);\n    if (version) {\n      browser.version = version;\n    }\n    return browser;\n  }\n}, {\n  test: [/ucbrowser/i],\n  describe(ua) {\n    const browser = {\n      name: 'UC Browser'\n    };\n    const version = Utils.getFirstMatch(commonVersionIdentifier, ua) || Utils.getFirstMatch(/(?:ucbrowser)[\\s/](\\d+(\\.?_?\\d+)+)/i, ua);\n    if (version) {\n      browser.version = version;\n    }\n    return browser;\n  }\n}, {\n  test: [/Maxthon|mxios/i],\n  describe(ua) {\n    const browser = {\n      name: 'Maxthon'\n    };\n    const version = Utils.getFirstMatch(commonVersionIdentifier, ua) || Utils.getFirstMatch(/(?:Maxthon|mxios)[\\s/](\\d+(\\.?_?\\d+)+)/i, ua);\n    if (version) {\n      browser.version = version;\n    }\n    return browser;\n  }\n}, {\n  test: [/epiphany/i],\n  describe(ua) {\n    const browser = {\n      name: 'Epiphany'\n    };\n    const version = Utils.getFirstMatch(commonVersionIdentifier, ua) || Utils.getFirstMatch(/(?:epiphany)[\\s/](\\d+(\\.?_?\\d+)+)/i, ua);\n    if (version) {\n      browser.version = version;\n    }\n    return browser;\n  }\n}, {\n  test: [/puffin/i],\n  describe(ua) {\n    const browser = {\n      name: 'Puffin'\n    };\n    const version = Utils.getFirstMatch(commonVersionIdentifier, ua) || Utils.getFirstMatch(/(?:puffin)[\\s/](\\d+(\\.?_?\\d+)+)/i, ua);\n    if (version) {\n      browser.version = version;\n    }\n    return browser;\n  }\n}, {\n  test: [/sleipnir/i],\n  describe(ua) {\n    const browser = {\n      name: 'Sleipnir'\n    };\n    const version = Utils.getFirstMatch(commonVersionIdentifier, ua) || Utils.getFirstMatch(/(?:sleipnir)[\\s/](\\d+(\\.?_?\\d+)+)/i, ua);\n    if (version) {\n      browser.version = version;\n    }\n    return browser;\n  }\n}, {\n  test: [/k-meleon/i],\n  describe(ua) {\n    const browser = {\n      name: 'K-Meleon'\n    };\n    const version = Utils.getFirstMatch(commonVersionIdentifier, ua) || Utils.getFirstMatch(/(?:k-meleon)[\\s/](\\d+(\\.?_?\\d+)+)/i, ua);\n    if (version) {\n      browser.version = version;\n    }\n    return browser;\n  }\n}, {\n  test: [/micromessenger/i],\n  describe(ua) {\n    const browser = {\n      name: 'WeChat'\n    };\n    const version = Utils.getFirstMatch(/(?:micromessenger)[\\s/](\\d+(\\.?_?\\d+)+)/i, ua) || Utils.getFirstMatch(commonVersionIdentifier, ua);\n    if (version) {\n      browser.version = version;\n    }\n    return browser;\n  }\n}, {\n  test: [/qqbrowser/i],\n  describe(ua) {\n    const browser = {\n      name: /qqbrowserlite/i.test(ua) ? 'QQ Browser Lite' : 'QQ Browser'\n    };\n    const version = Utils.getFirstMatch(/(?:qqbrowserlite|qqbrowser)[/](\\d+(\\.?_?\\d+)+)/i, ua) || Utils.getFirstMatch(commonVersionIdentifier, ua);\n    if (version) {\n      browser.version = version;\n    }\n    return browser;\n  }\n}, {\n  test: [/msie|trident/i],\n  describe(ua) {\n    const browser = {\n      name: 'Internet Explorer'\n    };\n    const version = Utils.getFirstMatch(/(?:msie |rv:)(\\d+(\\.?_?\\d+)+)/i, ua);\n    if (version) {\n      browser.version = version;\n    }\n    return browser;\n  }\n}, {\n  test: [/\\sedg\\//i],\n  describe(ua) {\n    const browser = {\n      name: 'Microsoft Edge'\n    };\n    const version = Utils.getFirstMatch(/\\sedg\\/(\\d+(\\.?_?\\d+)+)/i, ua);\n    if (version) {\n      browser.version = version;\n    }\n    return browser;\n  }\n}, {\n  test: [/edg([ea]|ios)/i],\n  describe(ua) {\n    const browser = {\n      name: 'Microsoft Edge'\n    };\n    const version = Utils.getSecondMatch(/edg([ea]|ios)\\/(\\d+(\\.?_?\\d+)+)/i, ua);\n    if (version) {\n      browser.version = version;\n    }\n    return browser;\n  }\n}, {\n  test: [/vivaldi/i],\n  describe(ua) {\n    const browser = {\n      name: 'Vivaldi'\n    };\n    const version = Utils.getFirstMatch(/vivaldi\\/(\\d+(\\.?_?\\d+)+)/i, ua);\n    if (version) {\n      browser.version = version;\n    }\n    return browser;\n  }\n}, {\n  test: [/seamonkey/i],\n  describe(ua) {\n    const browser = {\n      name: 'SeaMonkey'\n    };\n    const version = Utils.getFirstMatch(/seamonkey\\/(\\d+(\\.?_?\\d+)+)/i, ua);\n    if (version) {\n      browser.version = version;\n    }\n    return browser;\n  }\n}, {\n  test: [/sailfish/i],\n  describe(ua) {\n    const browser = {\n      name: 'Sailfish'\n    };\n    const version = Utils.getFirstMatch(/sailfish\\s?browser\\/(\\d+(\\.\\d+)?)/i, ua);\n    if (version) {\n      browser.version = version;\n    }\n    return browser;\n  }\n}, {\n  test: [/silk/i],\n  describe(ua) {\n    const browser = {\n      name: 'Amazon Silk'\n    };\n    const version = Utils.getFirstMatch(/silk\\/(\\d+(\\.?_?\\d+)+)/i, ua);\n    if (version) {\n      browser.version = version;\n    }\n    return browser;\n  }\n}, {\n  test: [/phantom/i],\n  describe(ua) {\n    const browser = {\n      name: 'PhantomJS'\n    };\n    const version = Utils.getFirstMatch(/phantomjs\\/(\\d+(\\.?_?\\d+)+)/i, ua);\n    if (version) {\n      browser.version = version;\n    }\n    return browser;\n  }\n}, {\n  test: [/slimerjs/i],\n  describe(ua) {\n    const browser = {\n      name: 'SlimerJS'\n    };\n    const version = Utils.getFirstMatch(/slimerjs\\/(\\d+(\\.?_?\\d+)+)/i, ua);\n    if (version) {\n      browser.version = version;\n    }\n    return browser;\n  }\n}, {\n  test: [/blackberry|\\bbb\\d+/i, /rim\\stablet/i],\n  describe(ua) {\n    const browser = {\n      name: 'BlackBerry'\n    };\n    const version = Utils.getFirstMatch(commonVersionIdentifier, ua) || Utils.getFirstMatch(/blackberry[\\d]+\\/(\\d+(\\.?_?\\d+)+)/i, ua);\n    if (version) {\n      browser.version = version;\n    }\n    return browser;\n  }\n}, {\n  test: [/(web|hpw)[o0]s/i],\n  describe(ua) {\n    const browser = {\n      name: 'WebOS Browser'\n    };\n    const version = Utils.getFirstMatch(commonVersionIdentifier, ua) || Utils.getFirstMatch(/w(?:eb)?[o0]sbrowser\\/(\\d+(\\.?_?\\d+)+)/i, ua);\n    if (version) {\n      browser.version = version;\n    }\n    return browser;\n  }\n}, {\n  test: [/bada/i],\n  describe(ua) {\n    const browser = {\n      name: 'Bada'\n    };\n    const version = Utils.getFirstMatch(/dolfin\\/(\\d+(\\.?_?\\d+)+)/i, ua);\n    if (version) {\n      browser.version = version;\n    }\n    return browser;\n  }\n}, {\n  test: [/tizen/i],\n  describe(ua) {\n    const browser = {\n      name: 'Tizen'\n    };\n    const version = Utils.getFirstMatch(/(?:tizen\\s?)?browser\\/(\\d+(\\.?_?\\d+)+)/i, ua) || Utils.getFirstMatch(commonVersionIdentifier, ua);\n    if (version) {\n      browser.version = version;\n    }\n    return browser;\n  }\n}, {\n  test: [/qupzilla/i],\n  describe(ua) {\n    const browser = {\n      name: 'QupZilla'\n    };\n    const version = Utils.getFirstMatch(/(?:qupzilla)[\\s/](\\d+(\\.?_?\\d+)+)/i, ua) || Utils.getFirstMatch(commonVersionIdentifier, ua);\n    if (version) {\n      browser.version = version;\n    }\n    return browser;\n  }\n}, {\n  test: [/firefox|iceweasel|fxios/i],\n  describe(ua) {\n    const browser = {\n      name: 'Firefox'\n    };\n    const version = Utils.getFirstMatch(/(?:firefox|iceweasel|fxios)[\\s/](\\d+(\\.?_?\\d+)+)/i, ua);\n    if (version) {\n      browser.version = version;\n    }\n    return browser;\n  }\n}, {\n  test: [/electron/i],\n  describe(ua) {\n    const browser = {\n      name: 'Electron'\n    };\n    const version = Utils.getFirstMatch(/(?:electron)\\/(\\d+(\\.?_?\\d+)+)/i, ua);\n    if (version) {\n      browser.version = version;\n    }\n    return browser;\n  }\n}, {\n  test: [/MiuiBrowser/i],\n  describe(ua) {\n    const browser = {\n      name: 'Miui'\n    };\n    const version = Utils.getFirstMatch(/(?:MiuiBrowser)[\\s/](\\d+(\\.?_?\\d+)+)/i, ua);\n    if (version) {\n      browser.version = version;\n    }\n    return browser;\n  }\n}, {\n  test: [/chromium/i],\n  describe(ua) {\n    const browser = {\n      name: 'Chromium'\n    };\n    const version = Utils.getFirstMatch(/(?:chromium)[\\s/](\\d+(\\.?_?\\d+)+)/i, ua) || Utils.getFirstMatch(commonVersionIdentifier, ua);\n    if (version) {\n      browser.version = version;\n    }\n    return browser;\n  }\n}, {\n  test: [/chrome|crios|crmo/i],\n  describe(ua) {\n    const browser = {\n      name: 'Chrome'\n    };\n    const version = Utils.getFirstMatch(/(?:chrome|crios|crmo)\\/(\\d+(\\.?_?\\d+)+)/i, ua);\n    if (version) {\n      browser.version = version;\n    }\n    return browser;\n  }\n}, {\n  test: [/GSA/i],\n  describe(ua) {\n    const browser = {\n      name: 'Google Search'\n    };\n    const version = Utils.getFirstMatch(/(?:GSA)\\/(\\d+(\\.?_?\\d+)+)/i, ua);\n    if (version) {\n      browser.version = version;\n    }\n    return browser;\n  }\n}, /* Android Browser */\n{\n  test(parser) {\n    const notLikeAndroid = !parser.test(/like android/i);\n    const butAndroid = parser.test(/android/i);\n    return notLikeAndroid && butAndroid;\n  },\n  describe(ua) {\n    const browser = {\n      name: 'Android Browser'\n    };\n    const version = Utils.getFirstMatch(commonVersionIdentifier, ua);\n    if (version) {\n      browser.version = version;\n    }\n    return browser;\n  }\n}, /* PlayStation 4 */\n{\n  test: [/playstation 4/i],\n  describe(ua) {\n    const browser = {\n      name: 'PlayStation 4'\n    };\n    const version = Utils.getFirstMatch(commonVersionIdentifier, ua);\n    if (version) {\n      browser.version = version;\n    }\n    return browser;\n  }\n}, /* Safari */\n{\n  test: [/safari|applewebkit/i],\n  describe(ua) {\n    const browser = {\n      name: 'Safari'\n    };\n    const version = Utils.getFirstMatch(commonVersionIdentifier, ua);\n    if (version) {\n      browser.version = version;\n    }\n    return browser;\n  }\n}, /* Something else */\n{\n  test: [/.*/i],\n  describe(ua) {\n    /* Here we try to make sure that there are explicit details about the device\r\n     * in order to decide what regexp exactly we want to apply\r\n     * (as there is a specific decision based on that conclusion)\r\n     */\n    const regexpWithoutDeviceSpec = /^(.*)\\/(.*) /;\n    const regexpWithDeviceSpec = /^(.*)\\/(.*)[ \\t]\\((.*)/;\n    const hasDeviceSpec = ua.search('\\\\(') !== -1;\n    const regexp = hasDeviceSpec ? regexpWithDeviceSpec : regexpWithoutDeviceSpec;\n    return {\n      name: Utils.getFirstMatch(regexp, ua),\n      version: Utils.getSecondMatch(regexp, ua)\n    };\n  }\n}];\nexport default browsersList;","map":{"version":3,"names":["Utils","commonVersionIdentifier","browsersList","test","describe","ua","browser","name","version","getFirstMatch","getSecondMatch","parser","notLikeAndroid","butAndroid","regexpWithoutDeviceSpec","regexpWithDeviceSpec","hasDeviceSpec","search","regexp"],"sources":["C:/Users/91930/Desktop/Github projects/Pharmacy Demo/back-end/node_modules/bowser/src/parser-browsers.js"],"sourcesContent":["/**\r\n * Browsers' descriptors\r\n *\r\n * The idea of descriptors is simple. You should know about them two simple things:\r\n * 1. Every descriptor has a method or property called `test` and a `describe` method.\r\n * 2. Order of descriptors is important.\r\n *\r\n * More details:\r\n * 1. Method or property `test` serves as a way to detect whether the UA string\r\n * matches some certain browser or not. The `describe` method helps to make a result\r\n * object with params that show some browser-specific things: name, version, etc.\r\n * 2. Order of descriptors is important because a Parser goes through them one by one\r\n * in course. For example, if you insert Chrome's descriptor as the first one,\r\n * more then a half of browsers will be described as Chrome, because they will pass\r\n * the Chrome descriptor's test.\r\n *\r\n * Descriptor's `test` could be a property with an array of RegExps, where every RegExp\r\n * will be applied to a UA string to test it whether it matches or not.\r\n * If a descriptor has two or more regexps in the `test` array it tests them one by one\r\n * with a logical sum operation. Parser stops if it has found any RegExp that matches the UA.\r\n *\r\n * Or `test` could be a method. In that case it gets a Parser instance and should\r\n * return true/false to get the Parser know if this browser descriptor matches the UA or not.\r\n */\r\n\r\nimport Utils from './utils.js';\r\n\r\nconst commonVersionIdentifier = /version\\/(\\d+(\\.?_?\\d+)+)/i;\r\n\r\nconst browsersList = [\r\n  /* Googlebot */\r\n  {\r\n    test: [/googlebot/i],\r\n    describe(ua) {\r\n      const browser = {\r\n        name: 'Googlebot',\r\n      };\r\n      const version = Utils.getFirstMatch(/googlebot\\/(\\d+(\\.\\d+))/i, ua) || Utils.getFirstMatch(commonVersionIdentifier, ua);\r\n\r\n      if (version) {\r\n        browser.version = version;\r\n      }\r\n\r\n      return browser;\r\n    },\r\n  },\r\n\r\n  /* Opera < 13.0 */\r\n  {\r\n    test: [/opera/i],\r\n    describe(ua) {\r\n      const browser = {\r\n        name: 'Opera',\r\n      };\r\n      const version = Utils.getFirstMatch(commonVersionIdentifier, ua) || Utils.getFirstMatch(/(?:opera)[\\s/](\\d+(\\.?_?\\d+)+)/i, ua);\r\n\r\n      if (version) {\r\n        browser.version = version;\r\n      }\r\n\r\n      return browser;\r\n    },\r\n  },\r\n\r\n  /* Opera > 13.0 */\r\n  {\r\n    test: [/opr\\/|opios/i],\r\n    describe(ua) {\r\n      const browser = {\r\n        name: 'Opera',\r\n      };\r\n      const version = Utils.getFirstMatch(/(?:opr|opios)[\\s/](\\S+)/i, ua) || Utils.getFirstMatch(commonVersionIdentifier, ua);\r\n\r\n      if (version) {\r\n        browser.version = version;\r\n      }\r\n\r\n      return browser;\r\n    },\r\n  },\r\n  {\r\n    test: [/SamsungBrowser/i],\r\n    describe(ua) {\r\n      const browser = {\r\n        name: 'Samsung Internet for Android',\r\n      };\r\n      const version = Utils.getFirstMatch(commonVersionIdentifier, ua) || Utils.getFirstMatch(/(?:SamsungBrowser)[\\s/](\\d+(\\.?_?\\d+)+)/i, ua);\r\n\r\n      if (version) {\r\n        browser.version = version;\r\n      }\r\n\r\n      return browser;\r\n    },\r\n  },\r\n  {\r\n    test: [/Whale/i],\r\n    describe(ua) {\r\n      const browser = {\r\n        name: 'NAVER Whale Browser',\r\n      };\r\n      const version = Utils.getFirstMatch(commonVersionIdentifier, ua) || Utils.getFirstMatch(/(?:whale)[\\s/](\\d+(?:\\.\\d+)+)/i, ua);\r\n\r\n      if (version) {\r\n        browser.version = version;\r\n      }\r\n\r\n      return browser;\r\n    },\r\n  },\r\n  {\r\n    test: [/MZBrowser/i],\r\n    describe(ua) {\r\n      const browser = {\r\n        name: 'MZ Browser',\r\n      };\r\n      const version = Utils.getFirstMatch(/(?:MZBrowser)[\\s/](\\d+(?:\\.\\d+)+)/i, ua) || Utils.getFirstMatch(commonVersionIdentifier, ua);\r\n\r\n      if (version) {\r\n        browser.version = version;\r\n      }\r\n\r\n      return browser;\r\n    },\r\n  },\r\n  {\r\n    test: [/focus/i],\r\n    describe(ua) {\r\n      const browser = {\r\n        name: 'Focus',\r\n      };\r\n      const version = Utils.getFirstMatch(/(?:focus)[\\s/](\\d+(?:\\.\\d+)+)/i, ua) || Utils.getFirstMatch(commonVersionIdentifier, ua);\r\n\r\n      if (version) {\r\n        browser.version = version;\r\n      }\r\n\r\n      return browser;\r\n    },\r\n  },\r\n  {\r\n    test: [/swing/i],\r\n    describe(ua) {\r\n      const browser = {\r\n        name: 'Swing',\r\n      };\r\n      const version = Utils.getFirstMatch(/(?:swing)[\\s/](\\d+(?:\\.\\d+)+)/i, ua) || Utils.getFirstMatch(commonVersionIdentifier, ua);\r\n\r\n      if (version) {\r\n        browser.version = version;\r\n      }\r\n\r\n      return browser;\r\n    },\r\n  },\r\n  {\r\n    test: [/coast/i],\r\n    describe(ua) {\r\n      const browser = {\r\n        name: 'Opera Coast',\r\n      };\r\n      const version = Utils.getFirstMatch(commonVersionIdentifier, ua) || Utils.getFirstMatch(/(?:coast)[\\s/](\\d+(\\.?_?\\d+)+)/i, ua);\r\n\r\n      if (version) {\r\n        browser.version = version;\r\n      }\r\n\r\n      return browser;\r\n    },\r\n  },\r\n  {\r\n    test: [/opt\\/\\d+(?:.?_?\\d+)+/i],\r\n    describe(ua) {\r\n      const browser = {\r\n        name: 'Opera Touch',\r\n      };\r\n      const version = Utils.getFirstMatch(/(?:opt)[\\s/](\\d+(\\.?_?\\d+)+)/i, ua) || Utils.getFirstMatch(commonVersionIdentifier, ua);\r\n\r\n      if (version) {\r\n        browser.version = version;\r\n      }\r\n\r\n      return browser;\r\n    },\r\n  },\r\n  {\r\n    test: [/yabrowser/i],\r\n    describe(ua) {\r\n      const browser = {\r\n        name: 'Yandex Browser',\r\n      };\r\n      const version = Utils.getFirstMatch(/(?:yabrowser)[\\s/](\\d+(\\.?_?\\d+)+)/i, ua) || Utils.getFirstMatch(commonVersionIdentifier, ua);\r\n\r\n      if (version) {\r\n        browser.version = version;\r\n      }\r\n\r\n      return browser;\r\n    },\r\n  },\r\n  {\r\n    test: [/ucbrowser/i],\r\n    describe(ua) {\r\n      const browser = {\r\n        name: 'UC Browser',\r\n      };\r\n      const version = Utils.getFirstMatch(commonVersionIdentifier, ua) || Utils.getFirstMatch(/(?:ucbrowser)[\\s/](\\d+(\\.?_?\\d+)+)/i, ua);\r\n\r\n      if (version) {\r\n        browser.version = version;\r\n      }\r\n\r\n      return browser;\r\n    },\r\n  },\r\n  {\r\n    test: [/Maxthon|mxios/i],\r\n    describe(ua) {\r\n      const browser = {\r\n        name: 'Maxthon',\r\n      };\r\n      const version = Utils.getFirstMatch(commonVersionIdentifier, ua) || Utils.getFirstMatch(/(?:Maxthon|mxios)[\\s/](\\d+(\\.?_?\\d+)+)/i, ua);\r\n\r\n      if (version) {\r\n        browser.version = version;\r\n      }\r\n\r\n      return browser;\r\n    },\r\n  },\r\n  {\r\n    test: [/epiphany/i],\r\n    describe(ua) {\r\n      const browser = {\r\n        name: 'Epiphany',\r\n      };\r\n      const version = Utils.getFirstMatch(commonVersionIdentifier, ua) || Utils.getFirstMatch(/(?:epiphany)[\\s/](\\d+(\\.?_?\\d+)+)/i, ua);\r\n\r\n      if (version) {\r\n        browser.version = version;\r\n      }\r\n\r\n      return browser;\r\n    },\r\n  },\r\n  {\r\n    test: [/puffin/i],\r\n    describe(ua) {\r\n      const browser = {\r\n        name: 'Puffin',\r\n      };\r\n      const version = Utils.getFirstMatch(commonVersionIdentifier, ua) || Utils.getFirstMatch(/(?:puffin)[\\s/](\\d+(\\.?_?\\d+)+)/i, ua);\r\n\r\n      if (version) {\r\n        browser.version = version;\r\n      }\r\n\r\n      return browser;\r\n    },\r\n  },\r\n  {\r\n    test: [/sleipnir/i],\r\n    describe(ua) {\r\n      const browser = {\r\n        name: 'Sleipnir',\r\n      };\r\n      const version = Utils.getFirstMatch(commonVersionIdentifier, ua) || Utils.getFirstMatch(/(?:sleipnir)[\\s/](\\d+(\\.?_?\\d+)+)/i, ua);\r\n\r\n      if (version) {\r\n        browser.version = version;\r\n      }\r\n\r\n      return browser;\r\n    },\r\n  },\r\n  {\r\n    test: [/k-meleon/i],\r\n    describe(ua) {\r\n      const browser = {\r\n        name: 'K-Meleon',\r\n      };\r\n      const version = Utils.getFirstMatch(commonVersionIdentifier, ua) || Utils.getFirstMatch(/(?:k-meleon)[\\s/](\\d+(\\.?_?\\d+)+)/i, ua);\r\n\r\n      if (version) {\r\n        browser.version = version;\r\n      }\r\n\r\n      return browser;\r\n    },\r\n  },\r\n  {\r\n    test: [/micromessenger/i],\r\n    describe(ua) {\r\n      const browser = {\r\n        name: 'WeChat',\r\n      };\r\n      const version = Utils.getFirstMatch(/(?:micromessenger)[\\s/](\\d+(\\.?_?\\d+)+)/i, ua) || Utils.getFirstMatch(commonVersionIdentifier, ua);\r\n\r\n      if (version) {\r\n        browser.version = version;\r\n      }\r\n\r\n      return browser;\r\n    },\r\n  },\r\n  {\r\n    test: [/qqbrowser/i],\r\n    describe(ua) {\r\n      const browser = {\r\n        name: (/qqbrowserlite/i).test(ua) ? 'QQ Browser Lite' : 'QQ Browser',\r\n      };\r\n      const version = Utils.getFirstMatch(/(?:qqbrowserlite|qqbrowser)[/](\\d+(\\.?_?\\d+)+)/i, ua) || Utils.getFirstMatch(commonVersionIdentifier, ua);\r\n\r\n      if (version) {\r\n        browser.version = version;\r\n      }\r\n\r\n      return browser;\r\n    },\r\n  },\r\n  {\r\n    test: [/msie|trident/i],\r\n    describe(ua) {\r\n      const browser = {\r\n        name: 'Internet Explorer',\r\n      };\r\n      const version = Utils.getFirstMatch(/(?:msie |rv:)(\\d+(\\.?_?\\d+)+)/i, ua);\r\n\r\n      if (version) {\r\n        browser.version = version;\r\n      }\r\n\r\n      return browser;\r\n    },\r\n  },\r\n  {\r\n    test: [/\\sedg\\//i],\r\n    describe(ua) {\r\n      const browser = {\r\n        name: 'Microsoft Edge',\r\n      };\r\n\r\n      const version = Utils.getFirstMatch(/\\sedg\\/(\\d+(\\.?_?\\d+)+)/i, ua);\r\n\r\n      if (version) {\r\n        browser.version = version;\r\n      }\r\n\r\n      return browser;\r\n    },\r\n  },\r\n  {\r\n    test: [/edg([ea]|ios)/i],\r\n    describe(ua) {\r\n      const browser = {\r\n        name: 'Microsoft Edge',\r\n      };\r\n\r\n      const version = Utils.getSecondMatch(/edg([ea]|ios)\\/(\\d+(\\.?_?\\d+)+)/i, ua);\r\n\r\n      if (version) {\r\n        browser.version = version;\r\n      }\r\n\r\n      return browser;\r\n    },\r\n  },\r\n  {\r\n    test: [/vivaldi/i],\r\n    describe(ua) {\r\n      const browser = {\r\n        name: 'Vivaldi',\r\n      };\r\n      const version = Utils.getFirstMatch(/vivaldi\\/(\\d+(\\.?_?\\d+)+)/i, ua);\r\n\r\n      if (version) {\r\n        browser.version = version;\r\n      }\r\n\r\n      return browser;\r\n    },\r\n  },\r\n  {\r\n    test: [/seamonkey/i],\r\n    describe(ua) {\r\n      const browser = {\r\n        name: 'SeaMonkey',\r\n      };\r\n      const version = Utils.getFirstMatch(/seamonkey\\/(\\d+(\\.?_?\\d+)+)/i, ua);\r\n\r\n      if (version) {\r\n        browser.version = version;\r\n      }\r\n\r\n      return browser;\r\n    },\r\n  },\r\n  {\r\n    test: [/sailfish/i],\r\n    describe(ua) {\r\n      const browser = {\r\n        name: 'Sailfish',\r\n      };\r\n\r\n      const version = Utils.getFirstMatch(/sailfish\\s?browser\\/(\\d+(\\.\\d+)?)/i, ua);\r\n\r\n      if (version) {\r\n        browser.version = version;\r\n      }\r\n\r\n      return browser;\r\n    },\r\n  },\r\n  {\r\n    test: [/silk/i],\r\n    describe(ua) {\r\n      const browser = {\r\n        name: 'Amazon Silk',\r\n      };\r\n      const version = Utils.getFirstMatch(/silk\\/(\\d+(\\.?_?\\d+)+)/i, ua);\r\n\r\n      if (version) {\r\n        browser.version = version;\r\n      }\r\n\r\n      return browser;\r\n    },\r\n  },\r\n  {\r\n    test: [/phantom/i],\r\n    describe(ua) {\r\n      const browser = {\r\n        name: 'PhantomJS',\r\n      };\r\n      const version = Utils.getFirstMatch(/phantomjs\\/(\\d+(\\.?_?\\d+)+)/i, ua);\r\n\r\n      if (version) {\r\n        browser.version = version;\r\n      }\r\n\r\n      return browser;\r\n    },\r\n  },\r\n  {\r\n    test: [/slimerjs/i],\r\n    describe(ua) {\r\n      const browser = {\r\n        name: 'SlimerJS',\r\n      };\r\n      const version = Utils.getFirstMatch(/slimerjs\\/(\\d+(\\.?_?\\d+)+)/i, ua);\r\n\r\n      if (version) {\r\n        browser.version = version;\r\n      }\r\n\r\n      return browser;\r\n    },\r\n  },\r\n  {\r\n    test: [/blackberry|\\bbb\\d+/i, /rim\\stablet/i],\r\n    describe(ua) {\r\n      const browser = {\r\n        name: 'BlackBerry',\r\n      };\r\n      const version = Utils.getFirstMatch(commonVersionIdentifier, ua) || Utils.getFirstMatch(/blackberry[\\d]+\\/(\\d+(\\.?_?\\d+)+)/i, ua);\r\n\r\n      if (version) {\r\n        browser.version = version;\r\n      }\r\n\r\n      return browser;\r\n    },\r\n  },\r\n  {\r\n    test: [/(web|hpw)[o0]s/i],\r\n    describe(ua) {\r\n      const browser = {\r\n        name: 'WebOS Browser',\r\n      };\r\n      const version = Utils.getFirstMatch(commonVersionIdentifier, ua) || Utils.getFirstMatch(/w(?:eb)?[o0]sbrowser\\/(\\d+(\\.?_?\\d+)+)/i, ua);\r\n\r\n      if (version) {\r\n        browser.version = version;\r\n      }\r\n\r\n      return browser;\r\n    },\r\n  },\r\n  {\r\n    test: [/bada/i],\r\n    describe(ua) {\r\n      const browser = {\r\n        name: 'Bada',\r\n      };\r\n      const version = Utils.getFirstMatch(/dolfin\\/(\\d+(\\.?_?\\d+)+)/i, ua);\r\n\r\n      if (version) {\r\n        browser.version = version;\r\n      }\r\n\r\n      return browser;\r\n    },\r\n  },\r\n  {\r\n    test: [/tizen/i],\r\n    describe(ua) {\r\n      const browser = {\r\n        name: 'Tizen',\r\n      };\r\n      const version = Utils.getFirstMatch(/(?:tizen\\s?)?browser\\/(\\d+(\\.?_?\\d+)+)/i, ua) || Utils.getFirstMatch(commonVersionIdentifier, ua);\r\n\r\n      if (version) {\r\n        browser.version = version;\r\n      }\r\n\r\n      return browser;\r\n    },\r\n  },\r\n  {\r\n    test: [/qupzilla/i],\r\n    describe(ua) {\r\n      const browser = {\r\n        name: 'QupZilla',\r\n      };\r\n      const version = Utils.getFirstMatch(/(?:qupzilla)[\\s/](\\d+(\\.?_?\\d+)+)/i, ua) || Utils.getFirstMatch(commonVersionIdentifier, ua);\r\n\r\n      if (version) {\r\n        browser.version = version;\r\n      }\r\n\r\n      return browser;\r\n    },\r\n  },\r\n  {\r\n    test: [/firefox|iceweasel|fxios/i],\r\n    describe(ua) {\r\n      const browser = {\r\n        name: 'Firefox',\r\n      };\r\n      const version = Utils.getFirstMatch(/(?:firefox|iceweasel|fxios)[\\s/](\\d+(\\.?_?\\d+)+)/i, ua);\r\n\r\n      if (version) {\r\n        browser.version = version;\r\n      }\r\n\r\n      return browser;\r\n    },\r\n  },\r\n  {\r\n    test: [/electron/i],\r\n    describe(ua) {\r\n      const browser = {\r\n        name: 'Electron',\r\n      };\r\n      const version = Utils.getFirstMatch(/(?:electron)\\/(\\d+(\\.?_?\\d+)+)/i, ua);\r\n\r\n      if (version) {\r\n        browser.version = version;\r\n      }\r\n\r\n      return browser;\r\n    },\r\n  },\r\n  {\r\n    test: [/MiuiBrowser/i],\r\n    describe(ua) {\r\n      const browser = {\r\n        name: 'Miui',\r\n      };\r\n      const version = Utils.getFirstMatch(/(?:MiuiBrowser)[\\s/](\\d+(\\.?_?\\d+)+)/i, ua);\r\n\r\n      if (version) {\r\n        browser.version = version;\r\n      }\r\n\r\n      return browser;\r\n    },\r\n  },\r\n  {\r\n    test: [/chromium/i],\r\n    describe(ua) {\r\n      const browser = {\r\n        name: 'Chromium',\r\n      };\r\n      const version = Utils.getFirstMatch(/(?:chromium)[\\s/](\\d+(\\.?_?\\d+)+)/i, ua) || Utils.getFirstMatch(commonVersionIdentifier, ua);\r\n\r\n      if (version) {\r\n        browser.version = version;\r\n      }\r\n\r\n      return browser;\r\n    },\r\n  },\r\n  {\r\n    test: [/chrome|crios|crmo/i],\r\n    describe(ua) {\r\n      const browser = {\r\n        name: 'Chrome',\r\n      };\r\n      const version = Utils.getFirstMatch(/(?:chrome|crios|crmo)\\/(\\d+(\\.?_?\\d+)+)/i, ua);\r\n\r\n      if (version) {\r\n        browser.version = version;\r\n      }\r\n\r\n      return browser;\r\n    },\r\n  },\r\n  {\r\n    test: [/GSA/i],\r\n    describe(ua) {\r\n      const browser = {\r\n        name: 'Google Search',\r\n      };\r\n      const version = Utils.getFirstMatch(/(?:GSA)\\/(\\d+(\\.?_?\\d+)+)/i, ua);\r\n\r\n      if (version) {\r\n        browser.version = version;\r\n      }\r\n\r\n      return browser;\r\n    },\r\n  },\r\n\r\n  /* Android Browser */\r\n  {\r\n    test(parser) {\r\n      const notLikeAndroid = !parser.test(/like android/i);\r\n      const butAndroid = parser.test(/android/i);\r\n      return notLikeAndroid && butAndroid;\r\n    },\r\n    describe(ua) {\r\n      const browser = {\r\n        name: 'Android Browser',\r\n      };\r\n      const version = Utils.getFirstMatch(commonVersionIdentifier, ua);\r\n\r\n      if (version) {\r\n        browser.version = version;\r\n      }\r\n\r\n      return browser;\r\n    },\r\n  },\r\n\r\n  /* PlayStation 4 */\r\n  {\r\n    test: [/playstation 4/i],\r\n    describe(ua) {\r\n      const browser = {\r\n        name: 'PlayStation 4',\r\n      };\r\n      const version = Utils.getFirstMatch(commonVersionIdentifier, ua);\r\n\r\n      if (version) {\r\n        browser.version = version;\r\n      }\r\n\r\n      return browser;\r\n    },\r\n  },\r\n\r\n  /* Safari */\r\n  {\r\n    test: [/safari|applewebkit/i],\r\n    describe(ua) {\r\n      const browser = {\r\n        name: 'Safari',\r\n      };\r\n      const version = Utils.getFirstMatch(commonVersionIdentifier, ua);\r\n\r\n      if (version) {\r\n        browser.version = version;\r\n      }\r\n\r\n      return browser;\r\n    },\r\n  },\r\n\r\n  /* Something else */\r\n  {\r\n    test: [/.*/i],\r\n    describe(ua) {\r\n      /* Here we try to make sure that there are explicit details about the device\r\n       * in order to decide what regexp exactly we want to apply\r\n       * (as there is a specific decision based on that conclusion)\r\n       */\r\n      const regexpWithoutDeviceSpec = /^(.*)\\/(.*) /;\r\n      const regexpWithDeviceSpec = /^(.*)\\/(.*)[ \\t]\\((.*)/;\r\n      const hasDeviceSpec = ua.search('\\\\(') !== -1;\r\n      const regexp = hasDeviceSpec ? regexpWithDeviceSpec : regexpWithoutDeviceSpec;\r\n      return {\r\n        name: Utils.getFirstMatch(regexp, ua),\r\n        version: Utils.getSecondMatch(regexp, ua),\r\n      };\r\n    },\r\n  },\r\n];\r\n\r\nexport default browsersList;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}