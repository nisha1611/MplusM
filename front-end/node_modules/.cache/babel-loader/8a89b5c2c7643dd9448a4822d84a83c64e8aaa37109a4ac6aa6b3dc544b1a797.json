{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ensureBuffer = void 0;\nvar buffer_1 = require(\"buffer\");\nvar error_1 = require(\"./error\");\nvar utils_1 = require(\"./parser/utils\");\n/**\r\n * Makes sure that, if a Uint8Array is passed in, it is wrapped in a Buffer.\r\n *\r\n * @param potentialBuffer - The potential buffer\r\n * @returns Buffer the input if potentialBuffer is a buffer, or a buffer that\r\n * wraps a passed in Uint8Array\r\n * @throws BSONTypeError If anything other than a Buffer or Uint8Array is passed in\r\n */\nfunction ensureBuffer(potentialBuffer) {\n  if (ArrayBuffer.isView(potentialBuffer)) {\n    return buffer_1.Buffer.from(potentialBuffer.buffer, potentialBuffer.byteOffset, potentialBuffer.byteLength);\n  }\n  if ((0, utils_1.isAnyArrayBuffer)(potentialBuffer)) {\n    return buffer_1.Buffer.from(potentialBuffer);\n  }\n  throw new error_1.BSONTypeError('Must use either Buffer or TypedArray');\n}\nexports.ensureBuffer = ensureBuffer;","map":{"version":3,"mappings":";;;;;;AAAA;AACA;AACA;AAEA;;;;;;;;AAQA,SAAgBA,YAAY,CAACC,eAAuD;EAClF,IAAIC,WAAW,CAACC,MAAM,CAACF,eAAe,CAAC,EAAE;IACvC,OAAOG,eAAM,CAACC,IAAI,CAChBJ,eAAe,CAACK,MAAM,EACtBL,eAAe,CAACM,UAAU,EAC1BN,eAAe,CAACO,UAAU,CAC3B;;EAGH,IAAI,4BAAgB,EAACP,eAAe,CAAC,EAAE;IACrC,OAAOG,eAAM,CAACC,IAAI,CAACJ,eAAe,CAAC;;EAGrC,MAAM,IAAIQ,qBAAa,CAAC,sCAAsC,CAAC;AACjE;AAdAC","names":["ensureBuffer","potentialBuffer","ArrayBuffer","isView","buffer_1","from","buffer","byteOffset","byteLength","error_1","exports"],"sources":["C:\\Users\\91930\\Desktop\\Github projects\\Pharmacy Demo\\back-end\\node_modules\\bson\\src\\ensure_buffer.ts"],"sourcesContent":["import { Buffer } from 'buffer';\r\nimport { BSONTypeError } from './error';\r\nimport { isAnyArrayBuffer } from './parser/utils';\r\n\r\n/**\r\n * Makes sure that, if a Uint8Array is passed in, it is wrapped in a Buffer.\r\n *\r\n * @param potentialBuffer - The potential buffer\r\n * @returns Buffer the input if potentialBuffer is a buffer, or a buffer that\r\n * wraps a passed in Uint8Array\r\n * @throws BSONTypeError If anything other than a Buffer or Uint8Array is passed in\r\n */\r\nexport function ensureBuffer(potentialBuffer: Buffer | ArrayBufferView | ArrayBuffer): Buffer {\r\n  if (ArrayBuffer.isView(potentialBuffer)) {\r\n    return Buffer.from(\r\n      potentialBuffer.buffer,\r\n      potentialBuffer.byteOffset,\r\n      potentialBuffer.byteLength\r\n    );\r\n  }\r\n\r\n  if (isAnyArrayBuffer(potentialBuffer)) {\r\n    return Buffer.from(potentialBuffer);\r\n  }\r\n\r\n  throw new BSONTypeError('Must use either Buffer or TypedArray');\r\n}\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}