{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.hasSessionSupport = exports.CryptoConnection = exports.Connection = void 0;\nconst timers_1 = require(\"timers\");\nconst constants_1 = require(\"../constants\");\nconst error_1 = require(\"../error\");\nconst mongo_types_1 = require(\"../mongo_types\");\nconst sessions_1 = require(\"../sessions\");\nconst utils_1 = require(\"../utils\");\nconst command_monitoring_events_1 = require(\"./command_monitoring_events\");\nconst commands_1 = require(\"./commands\");\nconst message_stream_1 = require(\"./message_stream\");\nconst stream_description_1 = require(\"./stream_description\");\nconst shared_1 = require(\"./wire_protocol/shared\");\n/** @internal */\nconst kStream = Symbol('stream');\n/** @internal */\nconst kQueue = Symbol('queue');\n/** @internal */\nconst kMessageStream = Symbol('messageStream');\n/** @internal */\nconst kGeneration = Symbol('generation');\n/** @internal */\nconst kLastUseTime = Symbol('lastUseTime');\n/** @internal */\nconst kClusterTime = Symbol('clusterTime');\n/** @internal */\nconst kDescription = Symbol('description');\n/** @internal */\nconst kHello = Symbol('hello');\n/** @internal */\nconst kAutoEncrypter = Symbol('autoEncrypter');\n/** @internal */\nconst kDelayedTimeoutId = Symbol('delayedTimeoutId');\nconst INVALID_QUEUE_SIZE = 'Connection internal queue contains more than 1 operation description';\n/** @internal */\nclass Connection extends mongo_types_1.TypedEventEmitter {\n  constructor(stream, options) {\n    var _a, _b;\n    super();\n    this.id = options.id;\n    this.address = streamIdentifier(stream, options);\n    this.socketTimeoutMS = (_a = options.socketTimeoutMS) !== null && _a !== void 0 ? _a : 0;\n    this.monitorCommands = options.monitorCommands;\n    this.serverApi = options.serverApi;\n    this.closed = false;\n    this.destroyed = false;\n    this[kHello] = null;\n    this[kClusterTime] = null;\n    this[kDescription] = new stream_description_1.StreamDescription(this.address, options);\n    this[kGeneration] = options.generation;\n    this[kLastUseTime] = (0, utils_1.now)();\n    // setup parser stream and message handling\n    this[kQueue] = new Map();\n    this[kMessageStream] = new message_stream_1.MessageStream({\n      ...options,\n      maxBsonMessageSize: (_b = this.hello) === null || _b === void 0 ? void 0 : _b.maxBsonMessageSize\n    });\n    this[kStream] = stream;\n    this[kDelayedTimeoutId] = null;\n    this[kMessageStream].on('message', message => this.onMessage(message));\n    this[kMessageStream].on('error', error => this.onError(error));\n    this[kStream].on('close', () => this.onClose());\n    this[kStream].on('timeout', () => this.onTimeout());\n    this[kStream].on('error', () => {\n      /* ignore errors, listen to `close` instead */\n    });\n    // hook the message stream up to the passed in stream\n    this[kStream].pipe(this[kMessageStream]);\n    this[kMessageStream].pipe(this[kStream]);\n  }\n  get description() {\n    return this[kDescription];\n  }\n  get hello() {\n    return this[kHello];\n  }\n  // the `connect` method stores the result of the handshake hello on the connection\n  set hello(response) {\n    this[kDescription].receiveResponse(response);\n    this[kDescription] = Object.freeze(this[kDescription]);\n    // TODO: remove this, and only use the `StreamDescription` in the future\n    this[kHello] = response;\n  }\n  // Set the whether the message stream is for a monitoring connection.\n  set isMonitoringConnection(value) {\n    this[kMessageStream].isMonitoringConnection = value;\n  }\n  get isMonitoringConnection() {\n    return this[kMessageStream].isMonitoringConnection;\n  }\n  get serviceId() {\n    var _a;\n    return (_a = this.hello) === null || _a === void 0 ? void 0 : _a.serviceId;\n  }\n  get loadBalanced() {\n    return this.description.loadBalanced;\n  }\n  get generation() {\n    return this[kGeneration] || 0;\n  }\n  set generation(generation) {\n    this[kGeneration] = generation;\n  }\n  get idleTime() {\n    return (0, utils_1.calculateDurationInMs)(this[kLastUseTime]);\n  }\n  get clusterTime() {\n    return this[kClusterTime];\n  }\n  get stream() {\n    return this[kStream];\n  }\n  markAvailable() {\n    this[kLastUseTime] = (0, utils_1.now)();\n  }\n  onError(error) {\n    if (this.closed) {\n      return;\n    }\n    this[kStream].destroy(error);\n    this.closed = true;\n    for (const op of this[kQueue].values()) {\n      op.cb(error);\n    }\n    this[kQueue].clear();\n    this.emit(Connection.CLOSE);\n  }\n  onClose() {\n    if (this.closed) {\n      return;\n    }\n    this.closed = true;\n    const message = `connection ${this.id} to ${this.address} closed`;\n    for (const op of this[kQueue].values()) {\n      op.cb(new error_1.MongoNetworkError(message));\n    }\n    this[kQueue].clear();\n    this.emit(Connection.CLOSE);\n  }\n  onTimeout() {\n    if (this.closed) {\n      return;\n    }\n    this[kDelayedTimeoutId] = (0, timers_1.setTimeout)(() => {\n      this[kStream].destroy();\n      this.closed = true;\n      const message = `connection ${this.id} to ${this.address} timed out`;\n      const beforeHandshake = this.hello == null;\n      for (const op of this[kQueue].values()) {\n        op.cb(new error_1.MongoNetworkTimeoutError(message, {\n          beforeHandshake\n        }));\n      }\n      this[kQueue].clear();\n      this.emit(Connection.CLOSE);\n    }, 1).unref(); // No need for this timer to hold the event loop open\n  }\n\n  onMessage(message) {\n    const delayedTimeoutId = this[kDelayedTimeoutId];\n    if (delayedTimeoutId != null) {\n      (0, timers_1.clearTimeout)(delayedTimeoutId);\n      this[kDelayedTimeoutId] = null;\n    }\n    // always emit the message, in case we are streaming\n    this.emit('message', message);\n    let operationDescription = this[kQueue].get(message.responseTo);\n    if (!operationDescription && this.isMonitoringConnection) {\n      // This is how we recover when the initial hello's requestId is not\n      // the responseTo when hello responses have been skipped:\n      // First check if the map is of invalid size\n      if (this[kQueue].size > 1) {\n        this.onError(new error_1.MongoRuntimeError(INVALID_QUEUE_SIZE));\n      } else {\n        // Get the first orphaned operation description.\n        const entry = this[kQueue].entries().next();\n        if (entry.value != null) {\n          const [requestId, orphaned] = entry.value;\n          // If the orphaned operation description exists then set it.\n          operationDescription = orphaned;\n          // Remove the entry with the bad request id from the queue.\n          this[kQueue].delete(requestId);\n        }\n      }\n    }\n    if (!operationDescription) {\n      return;\n    }\n    const callback = operationDescription.cb;\n    // SERVER-45775: For exhaust responses we should be able to use the same requestId to\n    // track response, however the server currently synthetically produces remote requests\n    // making the `responseTo` change on each response\n    this[kQueue].delete(message.responseTo);\n    if ('moreToCome' in message && message.moreToCome) {\n      // If the operation description check above does find an orphaned\n      // description and sets the operationDescription then this line will put one\n      // back in the queue with the correct requestId and will resolve not being able\n      // to find the next one via the responseTo of the next streaming hello.\n      this[kQueue].set(message.requestId, operationDescription);\n    } else if (operationDescription.socketTimeoutOverride) {\n      this[kStream].setTimeout(this.socketTimeoutMS);\n    }\n    try {\n      // Pass in the entire description because it has BSON parsing options\n      message.parse(operationDescription);\n    } catch (err) {\n      // If this error is generated by our own code, it will already have the correct class applied\n      // if it is not, then it is coming from a catastrophic data parse failure or the BSON library\n      // in either case, it should not be wrapped\n      callback(err);\n      return;\n    }\n    if (message.documents[0]) {\n      const document = message.documents[0];\n      const session = operationDescription.session;\n      if (session) {\n        (0, sessions_1.updateSessionFromResponse)(session, document);\n      }\n      if (document.$clusterTime) {\n        this[kClusterTime] = document.$clusterTime;\n        this.emit(Connection.CLUSTER_TIME_RECEIVED, document.$clusterTime);\n      }\n      if (operationDescription.command) {\n        if (document.writeConcernError) {\n          callback(new error_1.MongoWriteConcernError(document.writeConcernError, document));\n          return;\n        }\n        if (document.ok === 0 || document.$err || document.errmsg || document.code) {\n          callback(new error_1.MongoServerError(document));\n          return;\n        }\n      } else {\n        // Pre 3.2 support\n        if (document.ok === 0 || document.$err || document.errmsg) {\n          callback(new error_1.MongoServerError(document));\n          return;\n        }\n      }\n    }\n    callback(undefined, message.documents[0]);\n  }\n  destroy(options, callback) {\n    if (typeof options === 'function') {\n      callback = options;\n      options = {\n        force: false\n      };\n    }\n    this.removeAllListeners(Connection.PINNED);\n    this.removeAllListeners(Connection.UNPINNED);\n    options = Object.assign({\n      force: false\n    }, options);\n    if (this[kStream] == null || this.destroyed) {\n      this.destroyed = true;\n      if (typeof callback === 'function') {\n        callback();\n      }\n      return;\n    }\n    if (options.force) {\n      this[kStream].destroy();\n      this.destroyed = true;\n      if (typeof callback === 'function') {\n        callback();\n      }\n      return;\n    }\n    this[kStream].end(() => {\n      this.destroyed = true;\n      if (typeof callback === 'function') {\n        callback();\n      }\n    });\n  }\n  command(ns, cmd, options, callback) {\n    const readPreference = (0, shared_1.getReadPreference)(cmd, options);\n    const shouldUseOpMsg = supportsOpMsg(this);\n    const session = options === null || options === void 0 ? void 0 : options.session;\n    let clusterTime = this.clusterTime;\n    let finalCmd = Object.assign({}, cmd);\n    if (this.serverApi) {\n      const {\n        version,\n        strict,\n        deprecationErrors\n      } = this.serverApi;\n      finalCmd.apiVersion = version;\n      if (strict != null) finalCmd.apiStrict = strict;\n      if (deprecationErrors != null) finalCmd.apiDeprecationErrors = deprecationErrors;\n    }\n    if (hasSessionSupport(this) && session) {\n      if (session.clusterTime && clusterTime && session.clusterTime.clusterTime.greaterThan(clusterTime.clusterTime)) {\n        clusterTime = session.clusterTime;\n      }\n      const err = (0, sessions_1.applySession)(session, finalCmd, options);\n      if (err) {\n        return callback(err);\n      }\n    }\n    // if we have a known cluster time, gossip it\n    if (clusterTime) {\n      finalCmd.$clusterTime = clusterTime;\n    }\n    if ((0, shared_1.isSharded)(this) && !shouldUseOpMsg && readPreference && readPreference.mode !== 'primary') {\n      finalCmd = {\n        $query: finalCmd,\n        $readPreference: readPreference.toJSON()\n      };\n    }\n    const commandOptions = Object.assign({\n      command: true,\n      numberToSkip: 0,\n      numberToReturn: -1,\n      checkKeys: false,\n      // This value is not overridable\n      secondaryOk: readPreference.secondaryOk()\n    }, options);\n    const cmdNs = `${ns.db}.$cmd`;\n    const message = shouldUseOpMsg ? new commands_1.Msg(cmdNs, finalCmd, commandOptions) : new commands_1.Query(cmdNs, finalCmd, commandOptions);\n    try {\n      write(this, message, commandOptions, callback);\n    } catch (err) {\n      callback(err);\n    }\n  }\n}\nexports.Connection = Connection;\n/** @event */\nConnection.COMMAND_STARTED = constants_1.COMMAND_STARTED;\n/** @event */\nConnection.COMMAND_SUCCEEDED = constants_1.COMMAND_SUCCEEDED;\n/** @event */\nConnection.COMMAND_FAILED = constants_1.COMMAND_FAILED;\n/** @event */\nConnection.CLUSTER_TIME_RECEIVED = constants_1.CLUSTER_TIME_RECEIVED;\n/** @event */\nConnection.CLOSE = constants_1.CLOSE;\n/** @event */\nConnection.MESSAGE = constants_1.MESSAGE;\n/** @event */\nConnection.PINNED = constants_1.PINNED;\n/** @event */\nConnection.UNPINNED = constants_1.UNPINNED;\n/** @internal */\nclass CryptoConnection extends Connection {\n  constructor(stream, options) {\n    super(stream, options);\n    this[kAutoEncrypter] = options.autoEncrypter;\n  }\n  /** @internal @override */\n  command(ns, cmd, options, callback) {\n    const autoEncrypter = this[kAutoEncrypter];\n    if (!autoEncrypter) {\n      return callback(new error_1.MongoMissingDependencyError('No AutoEncrypter available for encryption'));\n    }\n    const serverWireVersion = (0, utils_1.maxWireVersion)(this);\n    if (serverWireVersion === 0) {\n      // This means the initial handshake hasn't happened yet\n      return super.command(ns, cmd, options, callback);\n    }\n    if (serverWireVersion < 8) {\n      callback(new error_1.MongoCompatibilityError('Auto-encryption requires a minimum MongoDB version of 4.2'));\n      return;\n    }\n    // Save sort or indexKeys based on the command being run\n    // the encrypt API serializes our JS objects to BSON to pass to the native code layer\n    // and then deserializes the encrypted result, the protocol level components\n    // of the command (ex. sort) are then converted to JS objects potentially losing\n    // import key order information. These fields are never encrypted so we can save the values\n    // from before the encryption and replace them after encryption has been performed\n    const sort = cmd.find || cmd.findAndModify ? cmd.sort : null;\n    const indexKeys = cmd.createIndexes ? cmd.indexes.map(index => index.key) : null;\n    autoEncrypter.encrypt(ns.toString(), cmd, options, (err, encrypted) => {\n      if (err || encrypted == null) {\n        callback(err, null);\n        return;\n      }\n      // Replace the saved values\n      if (sort != null && (cmd.find || cmd.findAndModify)) {\n        encrypted.sort = sort;\n      }\n      if (indexKeys != null && cmd.createIndexes) {\n        for (const [offset, index] of indexKeys.entries()) {\n          encrypted.indexes[offset].key = index;\n        }\n      }\n      super.command(ns, encrypted, options, (err, response) => {\n        if (err || response == null) {\n          callback(err, response);\n          return;\n        }\n        autoEncrypter.decrypt(response, options, callback);\n      });\n    });\n  }\n}\nexports.CryptoConnection = CryptoConnection;\n/** @internal */\nfunction hasSessionSupport(conn) {\n  const description = conn.description;\n  return description.logicalSessionTimeoutMinutes != null || !!description.loadBalanced;\n}\nexports.hasSessionSupport = hasSessionSupport;\nfunction supportsOpMsg(conn) {\n  const description = conn.description;\n  if (description == null) {\n    return false;\n  }\n  return (0, utils_1.maxWireVersion)(conn) >= 6 && !description.__nodejs_mock_server__;\n}\nfunction streamIdentifier(stream, options) {\n  if (options.proxyHost) {\n    // If proxy options are specified, the properties of `stream` itself\n    // will not accurately reflect what endpoint this is connected to.\n    return options.hostAddress.toString();\n  }\n  const {\n    remoteAddress,\n    remotePort\n  } = stream;\n  if (typeof remoteAddress === 'string' && typeof remotePort === 'number') {\n    return utils_1.HostAddress.fromHostPort(remoteAddress, remotePort).toString();\n  }\n  return (0, utils_1.uuidV4)().toString('hex');\n}\nfunction write(conn, command, options, callback) {\n  options = options !== null && options !== void 0 ? options : {};\n  const operationDescription = {\n    requestId: command.requestId,\n    cb: callback,\n    session: options.session,\n    noResponse: typeof options.noResponse === 'boolean' ? options.noResponse : false,\n    documentsReturnedIn: options.documentsReturnedIn,\n    command: !!options.command,\n    // for BSON parsing\n    promoteLongs: typeof options.promoteLongs === 'boolean' ? options.promoteLongs : true,\n    promoteValues: typeof options.promoteValues === 'boolean' ? options.promoteValues : true,\n    promoteBuffers: typeof options.promoteBuffers === 'boolean' ? options.promoteBuffers : false,\n    bsonRegExp: typeof options.bsonRegExp === 'boolean' ? options.bsonRegExp : false,\n    enableUtf8Validation: typeof options.enableUtf8Validation === 'boolean' ? options.enableUtf8Validation : true,\n    raw: typeof options.raw === 'boolean' ? options.raw : false,\n    started: 0\n  };\n  if (conn[kDescription] && conn[kDescription].compressor) {\n    operationDescription.agreedCompressor = conn[kDescription].compressor;\n    if (conn[kDescription].zlibCompressionLevel) {\n      operationDescription.zlibCompressionLevel = conn[kDescription].zlibCompressionLevel;\n    }\n  }\n  if (typeof options.socketTimeoutMS === 'number') {\n    operationDescription.socketTimeoutOverride = true;\n    conn[kStream].setTimeout(options.socketTimeoutMS);\n  }\n  // if command monitoring is enabled we need to modify the callback here\n  if (conn.monitorCommands) {\n    conn.emit(Connection.COMMAND_STARTED, new command_monitoring_events_1.CommandStartedEvent(conn, command));\n    operationDescription.started = (0, utils_1.now)();\n    operationDescription.cb = (err, reply) => {\n      if (err) {\n        conn.emit(Connection.COMMAND_FAILED, new command_monitoring_events_1.CommandFailedEvent(conn, command, err, operationDescription.started));\n      } else {\n        if (reply && (reply.ok === 0 || reply.$err)) {\n          conn.emit(Connection.COMMAND_FAILED, new command_monitoring_events_1.CommandFailedEvent(conn, command, reply, operationDescription.started));\n        } else {\n          conn.emit(Connection.COMMAND_SUCCEEDED, new command_monitoring_events_1.CommandSucceededEvent(conn, command, reply, operationDescription.started));\n        }\n      }\n      if (typeof callback === 'function') {\n        callback(err, reply);\n      }\n    };\n  }\n  if (!operationDescription.noResponse) {\n    conn[kQueue].set(operationDescription.requestId, operationDescription);\n  }\n  try {\n    conn[kMessageStream].writeCommand(command, operationDescription);\n  } catch (e) {\n    if (!operationDescription.noResponse) {\n      conn[kQueue].delete(operationDescription.requestId);\n      operationDescription.cb(e);\n      return;\n    }\n  }\n  if (operationDescription.noResponse) {\n    operationDescription.cb();\n  }\n}","map":{"version":3,"mappings":"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","names":["kStream","Symbol","kQueue","kMessageStream","kGeneration","kLastUseTime","kClusterTime","kDescription","kHello","kAutoEncrypter","kDelayedTimeoutId","INVALID_QUEUE_SIZE","Connection","mongo_types_1","constructor","stream","options","id","address","streamIdentifier","socketTimeoutMS","monitorCommands","serverApi","closed","destroyed","stream_description_1","generation","Map","message_stream_1","maxBsonMessageSize","hello","on","message","onMessage","error","onError","onClose","onTimeout","pipe","description","response","receiveResponse","Object","freeze","isMonitoringConnection","value","serviceId","loadBalanced","idleTime","clusterTime","markAvailable","destroy","op","values","cb","clear","emit","CLOSE","error_1","beforeHandshake","unref","delayedTimeoutId","operationDescription","get","responseTo","size","entry","entries","next","requestId","orphaned","delete","callback","moreToCome","set","socketTimeoutOverride","setTimeout","parse","err","documents","document","session","$clusterTime","CLUSTER_TIME_RECEIVED","command","writeConcernError","ok","$err","errmsg","code","undefined","force","removeAllListeners","PINNED","UNPINNED","assign","end","ns","cmd","readPreference","shouldUseOpMsg","supportsOpMsg","finalCmd","version","strict","deprecationErrors","apiVersion","apiStrict","apiDeprecationErrors","hasSessionSupport","greaterThan","mode","$query","$readPreference","toJSON","commandOptions","numberToSkip","numberToReturn","checkKeys","secondaryOk","cmdNs","db","commands_1","write","exports","constants_1","CryptoConnection","autoEncrypter","serverWireVersion","sort","find","findAndModify","indexKeys","createIndexes","indexes","map","index","key","encrypt","toString","encrypted","offset","decrypt","conn","logicalSessionTimeoutMinutes","__nodejs_mock_server__","proxyHost","hostAddress","remoteAddress","remotePort","utils_1","fromHostPort","noResponse","documentsReturnedIn","promoteLongs","promoteValues","promoteBuffers","bsonRegExp","enableUtf8Validation","raw","started","compressor","agreedCompressor","zlibCompressionLevel","COMMAND_STARTED","command_monitoring_events_1","reply","COMMAND_FAILED","COMMAND_SUCCEEDED","writeCommand","e"],"sources":["C:\\Users\\91930\\Desktop\\Github projects\\Pharmacy Demo\\back-end\\node_modules\\mongoose\\node_modules\\mongodb\\src\\cmap\\connection.ts"],"sourcesContent":["import { clearTimeout, setTimeout } from 'timers';\r\n\r\nimport type { BSONSerializeOptions, Document, ObjectId } from '../bson';\r\nimport {\r\n  CLOSE,\r\n  CLUSTER_TIME_RECEIVED,\r\n  COMMAND_FAILED,\r\n  COMMAND_STARTED,\r\n  COMMAND_SUCCEEDED,\r\n  MESSAGE,\r\n  PINNED,\r\n  UNPINNED\r\n} from '../constants';\r\nimport type { AutoEncrypter } from '../deps';\r\nimport {\r\n  MongoCompatibilityError,\r\n  MongoMissingDependencyError,\r\n  MongoNetworkError,\r\n  MongoNetworkTimeoutError,\r\n  MongoRuntimeError,\r\n  MongoServerError,\r\n  MongoWriteConcernError\r\n} from '../error';\r\nimport type { ServerApi, SupportedNodeConnectionOptions } from '../mongo_client';\r\nimport { CancellationToken, TypedEventEmitter } from '../mongo_types';\r\nimport type { ReadPreferenceLike } from '../read_preference';\r\nimport { applySession, ClientSession, updateSessionFromResponse } from '../sessions';\r\nimport {\r\n  calculateDurationInMs,\r\n  Callback,\r\n  ClientMetadata,\r\n  HostAddress,\r\n  maxWireVersion,\r\n  MongoDBNamespace,\r\n  now,\r\n  uuidV4\r\n} from '../utils';\r\nimport type { WriteConcern } from '../write_concern';\r\nimport type { MongoCredentials } from './auth/mongo_credentials';\r\nimport {\r\n  CommandFailedEvent,\r\n  CommandStartedEvent,\r\n  CommandSucceededEvent\r\n} from './command_monitoring_events';\r\nimport { BinMsg, Msg, Query, Response, WriteProtocolMessageType } from './commands';\r\nimport type { Stream } from './connect';\r\nimport { MessageStream, OperationDescription } from './message_stream';\r\nimport { StreamDescription, StreamDescriptionOptions } from './stream_description';\r\nimport { getReadPreference, isSharded } from './wire_protocol/shared';\r\n\r\n/** @internal */\r\nconst kStream = Symbol('stream');\r\n/** @internal */\r\nconst kQueue = Symbol('queue');\r\n/** @internal */\r\nconst kMessageStream = Symbol('messageStream');\r\n/** @internal */\r\nconst kGeneration = Symbol('generation');\r\n/** @internal */\r\nconst kLastUseTime = Symbol('lastUseTime');\r\n/** @internal */\r\nconst kClusterTime = Symbol('clusterTime');\r\n/** @internal */\r\nconst kDescription = Symbol('description');\r\n/** @internal */\r\nconst kHello = Symbol('hello');\r\n/** @internal */\r\nconst kAutoEncrypter = Symbol('autoEncrypter');\r\n/** @internal */\r\nconst kDelayedTimeoutId = Symbol('delayedTimeoutId');\r\n\r\nconst INVALID_QUEUE_SIZE = 'Connection internal queue contains more than 1 operation description';\r\n\r\n/** @internal */\r\nexport interface CommandOptions extends BSONSerializeOptions {\r\n  command?: boolean;\r\n  secondaryOk?: boolean;\r\n  /** Specify read preference if command supports it */\r\n  readPreference?: ReadPreferenceLike;\r\n  monitoring?: boolean;\r\n  socketTimeoutMS?: number;\r\n  /** Session to use for the operation */\r\n  session?: ClientSession;\r\n  documentsReturnedIn?: string;\r\n  noResponse?: boolean;\r\n  omitReadPreference?: boolean;\r\n\r\n  // TODO(NODE-2802): Currently the CommandOptions take a property willRetryWrite which is a hint\r\n  // from executeOperation that the txnNum should be applied to this command.\r\n  // Applying a session to a command should happen as part of command construction,\r\n  // most likely in the CommandOperation#executeCommand method, where we have access to\r\n  // the details we need to determine if a txnNum should also be applied.\r\n  willRetryWrite?: boolean;\r\n\r\n  writeConcern?: WriteConcern;\r\n}\r\n\r\n/** @internal */\r\nexport interface GetMoreOptions extends CommandOptions {\r\n  batchSize?: number;\r\n  maxTimeMS?: number;\r\n  maxAwaitTimeMS?: number;\r\n  /**\r\n   * Comment to apply to the operation.\r\n   *\r\n   * In server versions pre-4.4, 'comment' must be string.  A server\r\n   * error will be thrown if any other type is provided.\r\n   *\r\n   * In server versions 4.4 and above, 'comment' can be any valid BSON type.\r\n   */\r\n  comment?: unknown;\r\n}\r\n\r\n/** @public */\r\nexport interface ProxyOptions {\r\n  proxyHost?: string;\r\n  proxyPort?: number;\r\n  proxyUsername?: string;\r\n  proxyPassword?: string;\r\n}\r\n\r\n/** @public */\r\nexport interface ConnectionOptions\r\n  extends SupportedNodeConnectionOptions,\r\n    StreamDescriptionOptions,\r\n    ProxyOptions {\r\n  // Internal creation info\r\n  id: number | '<monitor>';\r\n  generation: number;\r\n  hostAddress: HostAddress;\r\n  // Settings\r\n  autoEncrypter?: AutoEncrypter;\r\n  serverApi?: ServerApi;\r\n  monitorCommands: boolean;\r\n  /** @internal */\r\n  connectionType?: typeof Connection;\r\n  credentials?: MongoCredentials;\r\n  connectTimeoutMS?: number;\r\n  tls: boolean;\r\n  keepAlive?: boolean;\r\n  keepAliveInitialDelay?: number;\r\n  noDelay?: boolean;\r\n  socketTimeoutMS?: number;\r\n  cancellationToken?: CancellationToken;\r\n\r\n  metadata: ClientMetadata;\r\n}\r\n\r\n/** @public */\r\nexport interface DestroyOptions {\r\n  /** Force the destruction. */\r\n  force?: boolean;\r\n}\r\n\r\n/** @public */\r\nexport type ConnectionEvents = {\r\n  commandStarted(event: CommandStartedEvent): void;\r\n  commandSucceeded(event: CommandSucceededEvent): void;\r\n  commandFailed(event: CommandFailedEvent): void;\r\n  clusterTimeReceived(clusterTime: Document): void;\r\n  close(): void;\r\n  message(message: any): void;\r\n  pinned(pinType: string): void;\r\n  unpinned(pinType: string): void;\r\n};\r\n\r\n/** @internal */\r\nexport class Connection extends TypedEventEmitter<ConnectionEvents> {\r\n  id: number | '<monitor>';\r\n  address: string;\r\n  socketTimeoutMS: number;\r\n  monitorCommands: boolean;\r\n  closed: boolean;\r\n  destroyed: boolean;\r\n  lastHelloMS?: number;\r\n  serverApi?: ServerApi;\r\n  helloOk?: boolean;\r\n\r\n  /**@internal */\r\n  [kDelayedTimeoutId]: NodeJS.Timeout | null;\r\n  /** @internal */\r\n  [kDescription]: StreamDescription;\r\n  /** @internal */\r\n  [kGeneration]: number;\r\n  /** @internal */\r\n  [kLastUseTime]: number;\r\n  /** @internal */\r\n  [kQueue]: Map<number, OperationDescription>;\r\n  /** @internal */\r\n  [kMessageStream]: MessageStream;\r\n  /** @internal */\r\n  [kStream]: Stream;\r\n  /** @internal */\r\n  [kHello]: Document | null;\r\n  /** @internal */\r\n  [kClusterTime]: Document | null;\r\n\r\n  /** @event */\r\n  static readonly COMMAND_STARTED = COMMAND_STARTED;\r\n  /** @event */\r\n  static readonly COMMAND_SUCCEEDED = COMMAND_SUCCEEDED;\r\n  /** @event */\r\n  static readonly COMMAND_FAILED = COMMAND_FAILED;\r\n  /** @event */\r\n  static readonly CLUSTER_TIME_RECEIVED = CLUSTER_TIME_RECEIVED;\r\n  /** @event */\r\n  static readonly CLOSE = CLOSE;\r\n  /** @event */\r\n  static readonly MESSAGE = MESSAGE;\r\n  /** @event */\r\n  static readonly PINNED = PINNED;\r\n  /** @event */\r\n  static readonly UNPINNED = UNPINNED;\r\n\r\n  constructor(stream: Stream, options: ConnectionOptions) {\r\n    super();\r\n    this.id = options.id;\r\n    this.address = streamIdentifier(stream, options);\r\n    this.socketTimeoutMS = options.socketTimeoutMS ?? 0;\r\n    this.monitorCommands = options.monitorCommands;\r\n    this.serverApi = options.serverApi;\r\n    this.closed = false;\r\n    this.destroyed = false;\r\n    this[kHello] = null;\r\n    this[kClusterTime] = null;\r\n\r\n    this[kDescription] = new StreamDescription(this.address, options);\r\n    this[kGeneration] = options.generation;\r\n    this[kLastUseTime] = now();\r\n\r\n    // setup parser stream and message handling\r\n    this[kQueue] = new Map();\r\n    this[kMessageStream] = new MessageStream({\r\n      ...options,\r\n      maxBsonMessageSize: this.hello?.maxBsonMessageSize\r\n    });\r\n    this[kStream] = stream;\r\n\r\n    this[kDelayedTimeoutId] = null;\r\n\r\n    this[kMessageStream].on('message', message => this.onMessage(message));\r\n    this[kMessageStream].on('error', error => this.onError(error));\r\n    this[kStream].on('close', () => this.onClose());\r\n    this[kStream].on('timeout', () => this.onTimeout());\r\n    this[kStream].on('error', () => {\r\n      /* ignore errors, listen to `close` instead */\r\n    });\r\n\r\n    // hook the message stream up to the passed in stream\r\n    this[kStream].pipe(this[kMessageStream]);\r\n    this[kMessageStream].pipe(this[kStream]);\r\n  }\r\n\r\n  get description(): StreamDescription {\r\n    return this[kDescription];\r\n  }\r\n\r\n  get hello(): Document | null {\r\n    return this[kHello];\r\n  }\r\n\r\n  // the `connect` method stores the result of the handshake hello on the connection\r\n  set hello(response: Document | null) {\r\n    this[kDescription].receiveResponse(response);\r\n    this[kDescription] = Object.freeze(this[kDescription]);\r\n\r\n    // TODO: remove this, and only use the `StreamDescription` in the future\r\n    this[kHello] = response;\r\n  }\r\n\r\n  // Set the whether the message stream is for a monitoring connection.\r\n  set isMonitoringConnection(value: boolean) {\r\n    this[kMessageStream].isMonitoringConnection = value;\r\n  }\r\n\r\n  get isMonitoringConnection(): boolean {\r\n    return this[kMessageStream].isMonitoringConnection;\r\n  }\r\n\r\n  get serviceId(): ObjectId | undefined {\r\n    return this.hello?.serviceId;\r\n  }\r\n\r\n  get loadBalanced(): boolean {\r\n    return this.description.loadBalanced;\r\n  }\r\n\r\n  get generation(): number {\r\n    return this[kGeneration] || 0;\r\n  }\r\n\r\n  set generation(generation: number) {\r\n    this[kGeneration] = generation;\r\n  }\r\n\r\n  get idleTime(): number {\r\n    return calculateDurationInMs(this[kLastUseTime]);\r\n  }\r\n\r\n  get clusterTime(): Document | null {\r\n    return this[kClusterTime];\r\n  }\r\n\r\n  get stream(): Stream {\r\n    return this[kStream];\r\n  }\r\n\r\n  markAvailable(): void {\r\n    this[kLastUseTime] = now();\r\n  }\r\n\r\n  onError(error: Error) {\r\n    if (this.closed) {\r\n      return;\r\n    }\r\n\r\n    this[kStream].destroy(error);\r\n\r\n    this.closed = true;\r\n\r\n    for (const op of this[kQueue].values()) {\r\n      op.cb(error);\r\n    }\r\n\r\n    this[kQueue].clear();\r\n    this.emit(Connection.CLOSE);\r\n  }\r\n\r\n  onClose() {\r\n    if (this.closed) {\r\n      return;\r\n    }\r\n\r\n    this.closed = true;\r\n\r\n    const message = `connection ${this.id} to ${this.address} closed`;\r\n    for (const op of this[kQueue].values()) {\r\n      op.cb(new MongoNetworkError(message));\r\n    }\r\n\r\n    this[kQueue].clear();\r\n    this.emit(Connection.CLOSE);\r\n  }\r\n\r\n  onTimeout() {\r\n    if (this.closed) {\r\n      return;\r\n    }\r\n\r\n    this[kDelayedTimeoutId] = setTimeout(() => {\r\n      this[kStream].destroy();\r\n\r\n      this.closed = true;\r\n\r\n      const message = `connection ${this.id} to ${this.address} timed out`;\r\n      const beforeHandshake = this.hello == null;\r\n      for (const op of this[kQueue].values()) {\r\n        op.cb(new MongoNetworkTimeoutError(message, { beforeHandshake }));\r\n      }\r\n\r\n      this[kQueue].clear();\r\n      this.emit(Connection.CLOSE);\r\n    }, 1).unref(); // No need for this timer to hold the event loop open\r\n  }\r\n\r\n  onMessage(message: BinMsg | Response) {\r\n    const delayedTimeoutId = this[kDelayedTimeoutId];\r\n    if (delayedTimeoutId != null) {\r\n      clearTimeout(delayedTimeoutId);\r\n      this[kDelayedTimeoutId] = null;\r\n    }\r\n\r\n    // always emit the message, in case we are streaming\r\n    this.emit('message', message);\r\n    let operationDescription = this[kQueue].get(message.responseTo);\r\n\r\n    if (!operationDescription && this.isMonitoringConnection) {\r\n      // This is how we recover when the initial hello's requestId is not\r\n      // the responseTo when hello responses have been skipped:\r\n\r\n      // First check if the map is of invalid size\r\n      if (this[kQueue].size > 1) {\r\n        this.onError(new MongoRuntimeError(INVALID_QUEUE_SIZE));\r\n      } else {\r\n        // Get the first orphaned operation description.\r\n        const entry = this[kQueue].entries().next();\r\n        if (entry.value != null) {\r\n          const [requestId, orphaned]: [number, OperationDescription] = entry.value;\r\n          // If the orphaned operation description exists then set it.\r\n          operationDescription = orphaned;\r\n          // Remove the entry with the bad request id from the queue.\r\n          this[kQueue].delete(requestId);\r\n        }\r\n      }\r\n    }\r\n\r\n    if (!operationDescription) {\r\n      return;\r\n    }\r\n\r\n    const callback = operationDescription.cb;\r\n\r\n    // SERVER-45775: For exhaust responses we should be able to use the same requestId to\r\n    // track response, however the server currently synthetically produces remote requests\r\n    // making the `responseTo` change on each response\r\n    this[kQueue].delete(message.responseTo);\r\n    if ('moreToCome' in message && message.moreToCome) {\r\n      // If the operation description check above does find an orphaned\r\n      // description and sets the operationDescription then this line will put one\r\n      // back in the queue with the correct requestId and will resolve not being able\r\n      // to find the next one via the responseTo of the next streaming hello.\r\n      this[kQueue].set(message.requestId, operationDescription);\r\n    } else if (operationDescription.socketTimeoutOverride) {\r\n      this[kStream].setTimeout(this.socketTimeoutMS);\r\n    }\r\n\r\n    try {\r\n      // Pass in the entire description because it has BSON parsing options\r\n      message.parse(operationDescription);\r\n    } catch (err) {\r\n      // If this error is generated by our own code, it will already have the correct class applied\r\n      // if it is not, then it is coming from a catastrophic data parse failure or the BSON library\r\n      // in either case, it should not be wrapped\r\n      callback(err);\r\n      return;\r\n    }\r\n\r\n    if (message.documents[0]) {\r\n      const document: Document = message.documents[0];\r\n      const session = operationDescription.session;\r\n      if (session) {\r\n        updateSessionFromResponse(session, document);\r\n      }\r\n\r\n      if (document.$clusterTime) {\r\n        this[kClusterTime] = document.$clusterTime;\r\n        this.emit(Connection.CLUSTER_TIME_RECEIVED, document.$clusterTime);\r\n      }\r\n\r\n      if (operationDescription.command) {\r\n        if (document.writeConcernError) {\r\n          callback(new MongoWriteConcernError(document.writeConcernError, document));\r\n          return;\r\n        }\r\n\r\n        if (document.ok === 0 || document.$err || document.errmsg || document.code) {\r\n          callback(new MongoServerError(document));\r\n          return;\r\n        }\r\n      } else {\r\n        // Pre 3.2 support\r\n        if (document.ok === 0 || document.$err || document.errmsg) {\r\n          callback(new MongoServerError(document));\r\n          return;\r\n        }\r\n      }\r\n    }\r\n\r\n    callback(undefined, message.documents[0]);\r\n  }\r\n\r\n  destroy(options?: DestroyOptions, callback?: Callback): void {\r\n    if (typeof options === 'function') {\r\n      callback = options;\r\n      options = { force: false };\r\n    }\r\n\r\n    this.removeAllListeners(Connection.PINNED);\r\n    this.removeAllListeners(Connection.UNPINNED);\r\n\r\n    options = Object.assign({ force: false }, options);\r\n    if (this[kStream] == null || this.destroyed) {\r\n      this.destroyed = true;\r\n      if (typeof callback === 'function') {\r\n        callback();\r\n      }\r\n\r\n      return;\r\n    }\r\n\r\n    if (options.force) {\r\n      this[kStream].destroy();\r\n      this.destroyed = true;\r\n      if (typeof callback === 'function') {\r\n        callback();\r\n      }\r\n\r\n      return;\r\n    }\r\n\r\n    this[kStream].end(() => {\r\n      this.destroyed = true;\r\n      if (typeof callback === 'function') {\r\n        callback();\r\n      }\r\n    });\r\n  }\r\n\r\n  command(\r\n    ns: MongoDBNamespace,\r\n    cmd: Document,\r\n    options: CommandOptions | undefined,\r\n    callback: Callback\r\n  ): void {\r\n    const readPreference = getReadPreference(cmd, options);\r\n    const shouldUseOpMsg = supportsOpMsg(this);\r\n    const session = options?.session;\r\n\r\n    let clusterTime = this.clusterTime;\r\n    let finalCmd = Object.assign({}, cmd);\r\n\r\n    if (this.serverApi) {\r\n      const { version, strict, deprecationErrors } = this.serverApi;\r\n      finalCmd.apiVersion = version;\r\n      if (strict != null) finalCmd.apiStrict = strict;\r\n      if (deprecationErrors != null) finalCmd.apiDeprecationErrors = deprecationErrors;\r\n    }\r\n\r\n    if (hasSessionSupport(this) && session) {\r\n      if (\r\n        session.clusterTime &&\r\n        clusterTime &&\r\n        session.clusterTime.clusterTime.greaterThan(clusterTime.clusterTime)\r\n      ) {\r\n        clusterTime = session.clusterTime;\r\n      }\r\n\r\n      const err = applySession(session, finalCmd, options);\r\n      if (err) {\r\n        return callback(err);\r\n      }\r\n    }\r\n\r\n    // if we have a known cluster time, gossip it\r\n    if (clusterTime) {\r\n      finalCmd.$clusterTime = clusterTime;\r\n    }\r\n\r\n    if (isSharded(this) && !shouldUseOpMsg && readPreference && readPreference.mode !== 'primary') {\r\n      finalCmd = {\r\n        $query: finalCmd,\r\n        $readPreference: readPreference.toJSON()\r\n      };\r\n    }\r\n\r\n    const commandOptions: Document = Object.assign(\r\n      {\r\n        command: true,\r\n        numberToSkip: 0,\r\n        numberToReturn: -1,\r\n        checkKeys: false,\r\n        // This value is not overridable\r\n        secondaryOk: readPreference.secondaryOk()\r\n      },\r\n      options\r\n    );\r\n\r\n    const cmdNs = `${ns.db}.$cmd`;\r\n    const message = shouldUseOpMsg\r\n      ? new Msg(cmdNs, finalCmd, commandOptions)\r\n      : new Query(cmdNs, finalCmd, commandOptions);\r\n\r\n    try {\r\n      write(this, message, commandOptions, callback);\r\n    } catch (err) {\r\n      callback(err);\r\n    }\r\n  }\r\n}\r\n\r\n/** @internal */\r\nexport class CryptoConnection extends Connection {\r\n  /** @internal */\r\n  [kAutoEncrypter]?: AutoEncrypter;\r\n\r\n  constructor(stream: Stream, options: ConnectionOptions) {\r\n    super(stream, options);\r\n    this[kAutoEncrypter] = options.autoEncrypter;\r\n  }\r\n\r\n  /** @internal @override */\r\n  override command(\r\n    ns: MongoDBNamespace,\r\n    cmd: Document,\r\n    options: CommandOptions,\r\n    callback: Callback\r\n  ): void {\r\n    const autoEncrypter = this[kAutoEncrypter];\r\n    if (!autoEncrypter) {\r\n      return callback(new MongoMissingDependencyError('No AutoEncrypter available for encryption'));\r\n    }\r\n\r\n    const serverWireVersion = maxWireVersion(this);\r\n    if (serverWireVersion === 0) {\r\n      // This means the initial handshake hasn't happened yet\r\n      return super.command(ns, cmd, options, callback);\r\n    }\r\n\r\n    if (serverWireVersion < 8) {\r\n      callback(\r\n        new MongoCompatibilityError('Auto-encryption requires a minimum MongoDB version of 4.2')\r\n      );\r\n      return;\r\n    }\r\n\r\n    // Save sort or indexKeys based on the command being run\r\n    // the encrypt API serializes our JS objects to BSON to pass to the native code layer\r\n    // and then deserializes the encrypted result, the protocol level components\r\n    // of the command (ex. sort) are then converted to JS objects potentially losing\r\n    // import key order information. These fields are never encrypted so we can save the values\r\n    // from before the encryption and replace them after encryption has been performed\r\n    const sort: Map<string, number> | null = cmd.find || cmd.findAndModify ? cmd.sort : null;\r\n    const indexKeys: Map<string, number>[] | null = cmd.createIndexes\r\n      ? cmd.indexes.map((index: { key: Map<string, number> }) => index.key)\r\n      : null;\r\n\r\n    autoEncrypter.encrypt(ns.toString(), cmd, options, (err, encrypted) => {\r\n      if (err || encrypted == null) {\r\n        callback(err, null);\r\n        return;\r\n      }\r\n\r\n      // Replace the saved values\r\n      if (sort != null && (cmd.find || cmd.findAndModify)) {\r\n        encrypted.sort = sort;\r\n      }\r\n      if (indexKeys != null && cmd.createIndexes) {\r\n        for (const [offset, index] of indexKeys.entries()) {\r\n          encrypted.indexes[offset].key = index;\r\n        }\r\n      }\r\n\r\n      super.command(ns, encrypted, options, (err, response) => {\r\n        if (err || response == null) {\r\n          callback(err, response);\r\n          return;\r\n        }\r\n\r\n        autoEncrypter.decrypt(response, options, callback);\r\n      });\r\n    });\r\n  }\r\n}\r\n\r\n/** @internal */\r\nexport function hasSessionSupport(conn: Connection): boolean {\r\n  const description = conn.description;\r\n  return description.logicalSessionTimeoutMinutes != null || !!description.loadBalanced;\r\n}\r\n\r\nfunction supportsOpMsg(conn: Connection) {\r\n  const description = conn.description;\r\n  if (description == null) {\r\n    return false;\r\n  }\r\n\r\n  return maxWireVersion(conn) >= 6 && !description.__nodejs_mock_server__;\r\n}\r\n\r\nfunction streamIdentifier(stream: Stream, options: ConnectionOptions): string {\r\n  if (options.proxyHost) {\r\n    // If proxy options are specified, the properties of `stream` itself\r\n    // will not accurately reflect what endpoint this is connected to.\r\n    return options.hostAddress.toString();\r\n  }\r\n\r\n  const { remoteAddress, remotePort } = stream;\r\n  if (typeof remoteAddress === 'string' && typeof remotePort === 'number') {\r\n    return HostAddress.fromHostPort(remoteAddress, remotePort).toString();\r\n  }\r\n\r\n  return uuidV4().toString('hex');\r\n}\r\n\r\nfunction write(\r\n  conn: Connection,\r\n  command: WriteProtocolMessageType,\r\n  options: CommandOptions,\r\n  callback: Callback\r\n) {\r\n  options = options ?? {};\r\n  const operationDescription: OperationDescription = {\r\n    requestId: command.requestId,\r\n    cb: callback,\r\n    session: options.session,\r\n    noResponse: typeof options.noResponse === 'boolean' ? options.noResponse : false,\r\n    documentsReturnedIn: options.documentsReturnedIn,\r\n    command: !!options.command,\r\n\r\n    // for BSON parsing\r\n    promoteLongs: typeof options.promoteLongs === 'boolean' ? options.promoteLongs : true,\r\n    promoteValues: typeof options.promoteValues === 'boolean' ? options.promoteValues : true,\r\n    promoteBuffers: typeof options.promoteBuffers === 'boolean' ? options.promoteBuffers : false,\r\n    bsonRegExp: typeof options.bsonRegExp === 'boolean' ? options.bsonRegExp : false,\r\n    enableUtf8Validation:\r\n      typeof options.enableUtf8Validation === 'boolean' ? options.enableUtf8Validation : true,\r\n    raw: typeof options.raw === 'boolean' ? options.raw : false,\r\n    started: 0\r\n  };\r\n\r\n  if (conn[kDescription] && conn[kDescription].compressor) {\r\n    operationDescription.agreedCompressor = conn[kDescription].compressor;\r\n\r\n    if (conn[kDescription].zlibCompressionLevel) {\r\n      operationDescription.zlibCompressionLevel = conn[kDescription].zlibCompressionLevel;\r\n    }\r\n  }\r\n\r\n  if (typeof options.socketTimeoutMS === 'number') {\r\n    operationDescription.socketTimeoutOverride = true;\r\n    conn[kStream].setTimeout(options.socketTimeoutMS);\r\n  }\r\n\r\n  // if command monitoring is enabled we need to modify the callback here\r\n  if (conn.monitorCommands) {\r\n    conn.emit(Connection.COMMAND_STARTED, new CommandStartedEvent(conn, command));\r\n\r\n    operationDescription.started = now();\r\n    operationDescription.cb = (err, reply) => {\r\n      if (err) {\r\n        conn.emit(\r\n          Connection.COMMAND_FAILED,\r\n          new CommandFailedEvent(conn, command, err, operationDescription.started)\r\n        );\r\n      } else {\r\n        if (reply && (reply.ok === 0 || reply.$err)) {\r\n          conn.emit(\r\n            Connection.COMMAND_FAILED,\r\n            new CommandFailedEvent(conn, command, reply, operationDescription.started)\r\n          );\r\n        } else {\r\n          conn.emit(\r\n            Connection.COMMAND_SUCCEEDED,\r\n            new CommandSucceededEvent(conn, command, reply, operationDescription.started)\r\n          );\r\n        }\r\n      }\r\n\r\n      if (typeof callback === 'function') {\r\n        callback(err, reply);\r\n      }\r\n    };\r\n  }\r\n\r\n  if (!operationDescription.noResponse) {\r\n    conn[kQueue].set(operationDescription.requestId, operationDescription);\r\n  }\r\n\r\n  try {\r\n    conn[kMessageStream].writeCommand(command, operationDescription);\r\n  } catch (e) {\r\n    if (!operationDescription.noResponse) {\r\n      conn[kQueue].delete(operationDescription.requestId);\r\n      operationDescription.cb(e);\r\n      return;\r\n    }\r\n  }\r\n\r\n  if (operationDescription.noResponse) {\r\n    operationDescription.cb();\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}