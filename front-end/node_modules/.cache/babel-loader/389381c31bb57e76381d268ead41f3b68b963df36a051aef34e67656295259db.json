{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.decorateDefaultCredentialProvider = exports.getDefaultRoleAssumerWithWebIdentity = exports.getDefaultRoleAssumer = void 0;\nconst AssumeRoleCommand_1 = require(\"./commands/AssumeRoleCommand\");\nconst AssumeRoleWithWebIdentityCommand_1 = require(\"./commands/AssumeRoleWithWebIdentityCommand\");\nconst ASSUME_ROLE_DEFAULT_REGION = \"us-east-1\";\nconst decorateDefaultRegion = region => {\n  if (typeof region !== \"function\") {\n    return region === undefined ? ASSUME_ROLE_DEFAULT_REGION : region;\n  }\n  return async () => {\n    try {\n      return await region();\n    } catch (e) {\n      return ASSUME_ROLE_DEFAULT_REGION;\n    }\n  };\n};\nconst getDefaultRoleAssumer = (stsOptions, stsClientCtor) => {\n  let stsClient;\n  let closureSourceCreds;\n  return async (sourceCreds, params) => {\n    closureSourceCreds = sourceCreds;\n    if (!stsClient) {\n      const {\n        logger,\n        region,\n        requestHandler\n      } = stsOptions;\n      stsClient = new stsClientCtor({\n        logger,\n        credentialDefaultProvider: () => async () => closureSourceCreds,\n        region: decorateDefaultRegion(region || stsOptions.region),\n        ...(requestHandler ? {\n          requestHandler\n        } : {})\n      });\n    }\n    const {\n      Credentials\n    } = await stsClient.send(new AssumeRoleCommand_1.AssumeRoleCommand(params));\n    if (!Credentials || !Credentials.AccessKeyId || !Credentials.SecretAccessKey) {\n      throw new Error(`Invalid response from STS.assumeRole call with role ${params.RoleArn}`);\n    }\n    return {\n      accessKeyId: Credentials.AccessKeyId,\n      secretAccessKey: Credentials.SecretAccessKey,\n      sessionToken: Credentials.SessionToken,\n      expiration: Credentials.Expiration\n    };\n  };\n};\nexports.getDefaultRoleAssumer = getDefaultRoleAssumer;\nconst getDefaultRoleAssumerWithWebIdentity = (stsOptions, stsClientCtor) => {\n  let stsClient;\n  return async params => {\n    if (!stsClient) {\n      const {\n        logger,\n        region,\n        requestHandler\n      } = stsOptions;\n      stsClient = new stsClientCtor({\n        logger,\n        region: decorateDefaultRegion(region || stsOptions.region),\n        ...(requestHandler ? {\n          requestHandler\n        } : {})\n      });\n    }\n    const {\n      Credentials\n    } = await stsClient.send(new AssumeRoleWithWebIdentityCommand_1.AssumeRoleWithWebIdentityCommand(params));\n    if (!Credentials || !Credentials.AccessKeyId || !Credentials.SecretAccessKey) {\n      throw new Error(`Invalid response from STS.assumeRoleWithWebIdentity call with role ${params.RoleArn}`);\n    }\n    return {\n      accessKeyId: Credentials.AccessKeyId,\n      secretAccessKey: Credentials.SecretAccessKey,\n      sessionToken: Credentials.SessionToken,\n      expiration: Credentials.Expiration\n    };\n  };\n};\nexports.getDefaultRoleAssumerWithWebIdentity = getDefaultRoleAssumerWithWebIdentity;\nconst decorateDefaultCredentialProvider = provider => input => provider({\n  roleAssumer: (0, exports.getDefaultRoleAssumer)(input, input.stsClientCtor),\n  roleAssumerWithWebIdentity: (0, exports.getDefaultRoleAssumerWithWebIdentity)(input, input.stsClientCtor),\n  ...input\n});\nexports.decorateDefaultCredentialProvider = decorateDefaultCredentialProvider;","map":{"version":3,"names":["Object","defineProperty","exports","value","decorateDefaultCredentialProvider","getDefaultRoleAssumerWithWebIdentity","getDefaultRoleAssumer","AssumeRoleCommand_1","require","AssumeRoleWithWebIdentityCommand_1","ASSUME_ROLE_DEFAULT_REGION","decorateDefaultRegion","region","undefined","e","stsOptions","stsClientCtor","stsClient","closureSourceCreds","sourceCreds","params","logger","requestHandler","credentialDefaultProvider","Credentials","send","AssumeRoleCommand","AccessKeyId","SecretAccessKey","Error","RoleArn","accessKeyId","secretAccessKey","sessionToken","SessionToken","expiration","Expiration","AssumeRoleWithWebIdentityCommand","provider","input","roleAssumer","roleAssumerWithWebIdentity"],"sources":["C:/Users/91930/Desktop/Github projects/Pharmacy Demo/back-end/node_modules/@aws-sdk/client-sts/dist-cjs/defaultStsRoleAssumers.js"],"sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.decorateDefaultCredentialProvider = exports.getDefaultRoleAssumerWithWebIdentity = exports.getDefaultRoleAssumer = void 0;\r\nconst AssumeRoleCommand_1 = require(\"./commands/AssumeRoleCommand\");\r\nconst AssumeRoleWithWebIdentityCommand_1 = require(\"./commands/AssumeRoleWithWebIdentityCommand\");\r\nconst ASSUME_ROLE_DEFAULT_REGION = \"us-east-1\";\r\nconst decorateDefaultRegion = (region) => {\r\n    if (typeof region !== \"function\") {\r\n        return region === undefined ? ASSUME_ROLE_DEFAULT_REGION : region;\r\n    }\r\n    return async () => {\r\n        try {\r\n            return await region();\r\n        }\r\n        catch (e) {\r\n            return ASSUME_ROLE_DEFAULT_REGION;\r\n        }\r\n    };\r\n};\r\nconst getDefaultRoleAssumer = (stsOptions, stsClientCtor) => {\r\n    let stsClient;\r\n    let closureSourceCreds;\r\n    return async (sourceCreds, params) => {\r\n        closureSourceCreds = sourceCreds;\r\n        if (!stsClient) {\r\n            const { logger, region, requestHandler } = stsOptions;\r\n            stsClient = new stsClientCtor({\r\n                logger,\r\n                credentialDefaultProvider: () => async () => closureSourceCreds,\r\n                region: decorateDefaultRegion(region || stsOptions.region),\r\n                ...(requestHandler ? { requestHandler } : {}),\r\n            });\r\n        }\r\n        const { Credentials } = await stsClient.send(new AssumeRoleCommand_1.AssumeRoleCommand(params));\r\n        if (!Credentials || !Credentials.AccessKeyId || !Credentials.SecretAccessKey) {\r\n            throw new Error(`Invalid response from STS.assumeRole call with role ${params.RoleArn}`);\r\n        }\r\n        return {\r\n            accessKeyId: Credentials.AccessKeyId,\r\n            secretAccessKey: Credentials.SecretAccessKey,\r\n            sessionToken: Credentials.SessionToken,\r\n            expiration: Credentials.Expiration,\r\n        };\r\n    };\r\n};\r\nexports.getDefaultRoleAssumer = getDefaultRoleAssumer;\r\nconst getDefaultRoleAssumerWithWebIdentity = (stsOptions, stsClientCtor) => {\r\n    let stsClient;\r\n    return async (params) => {\r\n        if (!stsClient) {\r\n            const { logger, region, requestHandler } = stsOptions;\r\n            stsClient = new stsClientCtor({\r\n                logger,\r\n                region: decorateDefaultRegion(region || stsOptions.region),\r\n                ...(requestHandler ? { requestHandler } : {}),\r\n            });\r\n        }\r\n        const { Credentials } = await stsClient.send(new AssumeRoleWithWebIdentityCommand_1.AssumeRoleWithWebIdentityCommand(params));\r\n        if (!Credentials || !Credentials.AccessKeyId || !Credentials.SecretAccessKey) {\r\n            throw new Error(`Invalid response from STS.assumeRoleWithWebIdentity call with role ${params.RoleArn}`);\r\n        }\r\n        return {\r\n            accessKeyId: Credentials.AccessKeyId,\r\n            secretAccessKey: Credentials.SecretAccessKey,\r\n            sessionToken: Credentials.SessionToken,\r\n            expiration: Credentials.Expiration,\r\n        };\r\n    };\r\n};\r\nexports.getDefaultRoleAssumerWithWebIdentity = getDefaultRoleAssumerWithWebIdentity;\r\nconst decorateDefaultCredentialProvider = (provider) => (input) => provider({\r\n    roleAssumer: (0, exports.getDefaultRoleAssumer)(input, input.stsClientCtor),\r\n    roleAssumerWithWebIdentity: (0, exports.getDefaultRoleAssumerWithWebIdentity)(input, input.stsClientCtor),\r\n    ...input,\r\n});\r\nexports.decorateDefaultCredentialProvider = decorateDefaultCredentialProvider;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}