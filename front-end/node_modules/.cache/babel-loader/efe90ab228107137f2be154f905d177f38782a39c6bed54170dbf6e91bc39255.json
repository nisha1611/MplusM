{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isArnBucketName = exports.isDnsCompatibleBucketName = exports.S3_HOSTNAME_PATTERN = exports.DOT_PATTERN = exports.resolveParamsForS3 = void 0;\nconst resolveParamsForS3 = async endpointParams => {\n  const bucket = (endpointParams === null || endpointParams === void 0 ? void 0 : endpointParams.Bucket) || \"\";\n  if (typeof endpointParams.Bucket === \"string\") {\n    endpointParams.Bucket = bucket.replace(/#/g, encodeURIComponent(\"#\")).replace(/\\?/g, encodeURIComponent(\"?\"));\n  }\n  if ((0, exports.isArnBucketName)(bucket)) {\n    if (endpointParams.ForcePathStyle === true) {\n      throw new Error(\"Path-style addressing cannot be used with ARN buckets\");\n    }\n  } else if (!(0, exports.isDnsCompatibleBucketName)(bucket) || bucket.indexOf(\".\") !== -1 && !String(endpointParams.Endpoint).startsWith(\"http:\") || bucket.toLowerCase() !== bucket || bucket.length < 3) {\n    endpointParams.ForcePathStyle = true;\n  }\n  if (endpointParams.DisableMultiRegionAccessPoints) {\n    endpointParams.disableMultiRegionAccessPoints = true;\n    endpointParams.DisableMRAP = true;\n  }\n  return endpointParams;\n};\nexports.resolveParamsForS3 = resolveParamsForS3;\nconst DOMAIN_PATTERN = /^[a-z0-9][a-z0-9\\.\\-]{1,61}[a-z0-9]$/;\nconst IP_ADDRESS_PATTERN = /(\\d+\\.){3}\\d+/;\nconst DOTS_PATTERN = /\\.\\./;\nexports.DOT_PATTERN = /\\./;\nexports.S3_HOSTNAME_PATTERN = /^(.+\\.)?s3(-fips)?(\\.dualstack)?[.-]([a-z0-9-]+)\\./;\nconst isDnsCompatibleBucketName = bucketName => DOMAIN_PATTERN.test(bucketName) && !IP_ADDRESS_PATTERN.test(bucketName) && !DOTS_PATTERN.test(bucketName);\nexports.isDnsCompatibleBucketName = isDnsCompatibleBucketName;\nconst isArnBucketName = bucketName => {\n  const [arn, partition, service, region, account, typeOrId] = bucketName.split(\":\");\n  const isArn = arn === \"arn\" && bucketName.split(\":\").length >= 6;\n  const isValidArn = [arn, partition, service, account, typeOrId].filter(Boolean).length === 5;\n  if (isArn && !isValidArn) {\n    throw new Error(`Invalid ARN: ${bucketName} was an invalid ARN.`);\n  }\n  return arn === \"arn\" && !!partition && !!service && !!account && !!typeOrId;\n};\nexports.isArnBucketName = isArnBucketName;","map":{"version":3,"names":["Object","defineProperty","exports","value","isArnBucketName","isDnsCompatibleBucketName","S3_HOSTNAME_PATTERN","DOT_PATTERN","resolveParamsForS3","endpointParams","bucket","Bucket","replace","encodeURIComponent","ForcePathStyle","Error","indexOf","String","Endpoint","startsWith","toLowerCase","length","DisableMultiRegionAccessPoints","disableMultiRegionAccessPoints","DisableMRAP","DOMAIN_PATTERN","IP_ADDRESS_PATTERN","DOTS_PATTERN","bucketName","test","arn","partition","service","region","account","typeOrId","split","isArn","isValidArn","filter","Boolean"],"sources":["C:/Users/91930/Desktop/Github projects/Pharmacy Demo/back-end/node_modules/@aws-sdk/middleware-endpoint/dist-cjs/service-customizations/s3.js"],"sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.isArnBucketName = exports.isDnsCompatibleBucketName = exports.S3_HOSTNAME_PATTERN = exports.DOT_PATTERN = exports.resolveParamsForS3 = void 0;\r\nconst resolveParamsForS3 = async (endpointParams) => {\r\n    const bucket = (endpointParams === null || endpointParams === void 0 ? void 0 : endpointParams.Bucket) || \"\";\r\n    if (typeof endpointParams.Bucket === \"string\") {\r\n        endpointParams.Bucket = bucket.replace(/#/g, encodeURIComponent(\"#\")).replace(/\\?/g, encodeURIComponent(\"?\"));\r\n    }\r\n    if ((0, exports.isArnBucketName)(bucket)) {\r\n        if (endpointParams.ForcePathStyle === true) {\r\n            throw new Error(\"Path-style addressing cannot be used with ARN buckets\");\r\n        }\r\n    }\r\n    else if (!(0, exports.isDnsCompatibleBucketName)(bucket) ||\r\n        (bucket.indexOf(\".\") !== -1 && !String(endpointParams.Endpoint).startsWith(\"http:\")) ||\r\n        bucket.toLowerCase() !== bucket ||\r\n        bucket.length < 3) {\r\n        endpointParams.ForcePathStyle = true;\r\n    }\r\n    if (endpointParams.DisableMultiRegionAccessPoints) {\r\n        endpointParams.disableMultiRegionAccessPoints = true;\r\n        endpointParams.DisableMRAP = true;\r\n    }\r\n    return endpointParams;\r\n};\r\nexports.resolveParamsForS3 = resolveParamsForS3;\r\nconst DOMAIN_PATTERN = /^[a-z0-9][a-z0-9\\.\\-]{1,61}[a-z0-9]$/;\r\nconst IP_ADDRESS_PATTERN = /(\\d+\\.){3}\\d+/;\r\nconst DOTS_PATTERN = /\\.\\./;\r\nexports.DOT_PATTERN = /\\./;\r\nexports.S3_HOSTNAME_PATTERN = /^(.+\\.)?s3(-fips)?(\\.dualstack)?[.-]([a-z0-9-]+)\\./;\r\nconst isDnsCompatibleBucketName = (bucketName) => DOMAIN_PATTERN.test(bucketName) && !IP_ADDRESS_PATTERN.test(bucketName) && !DOTS_PATTERN.test(bucketName);\r\nexports.isDnsCompatibleBucketName = isDnsCompatibleBucketName;\r\nconst isArnBucketName = (bucketName) => {\r\n    const [arn, partition, service, region, account, typeOrId] = bucketName.split(\":\");\r\n    const isArn = arn === \"arn\" && bucketName.split(\":\").length >= 6;\r\n    const isValidArn = [arn, partition, service, account, typeOrId].filter(Boolean).length === 5;\r\n    if (isArn && !isValidArn) {\r\n        throw new Error(`Invalid ARN: ${bucketName} was an invalid ARN.`);\r\n    }\r\n    return arn === \"arn\" && !!partition && !!service && !!account && !!typeOrId;\r\n};\r\nexports.isArnBucketName = isArnBucketName;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}