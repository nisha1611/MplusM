{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Db = void 0;\nconst admin_1 = require(\"./admin\");\nconst bson_1 = require(\"./bson\");\nconst change_stream_1 = require(\"./change_stream\");\nconst collection_1 = require(\"./collection\");\nconst CONSTANTS = require(\"./constants\");\nconst aggregation_cursor_1 = require(\"./cursor/aggregation_cursor\");\nconst list_collections_cursor_1 = require(\"./cursor/list_collections_cursor\");\nconst error_1 = require(\"./error\");\nconst logger_1 = require(\"./logger\");\nconst add_user_1 = require(\"./operations/add_user\");\nconst collections_1 = require(\"./operations/collections\");\nconst create_collection_1 = require(\"./operations/create_collection\");\nconst drop_1 = require(\"./operations/drop\");\nconst execute_operation_1 = require(\"./operations/execute_operation\");\nconst indexes_1 = require(\"./operations/indexes\");\nconst profiling_level_1 = require(\"./operations/profiling_level\");\nconst remove_user_1 = require(\"./operations/remove_user\");\nconst rename_1 = require(\"./operations/rename\");\nconst run_command_1 = require(\"./operations/run_command\");\nconst set_profiling_level_1 = require(\"./operations/set_profiling_level\");\nconst stats_1 = require(\"./operations/stats\");\nconst read_concern_1 = require(\"./read_concern\");\nconst read_preference_1 = require(\"./read_preference\");\nconst utils_1 = require(\"./utils\");\nconst write_concern_1 = require(\"./write_concern\");\n// Allowed parameters\nconst DB_OPTIONS_ALLOW_LIST = ['writeConcern', 'readPreference', 'readPreferenceTags', 'native_parser', 'forceServerObjectId', 'pkFactory', 'serializeFunctions', 'raw', 'authSource', 'ignoreUndefined', 'readConcern', 'retryMiliSeconds', 'numberOfRetries', 'loggerLevel', 'logger', 'promoteBuffers', 'promoteLongs', 'bsonRegExp', 'enableUtf8Validation', 'promoteValues', 'compression', 'retryWrites'];\n/**\r\n * The **Db** class is a class that represents a MongoDB Database.\r\n * @public\r\n *\r\n * @example\r\n * ```ts\r\n * import { MongoClient } from 'mongodb';\r\n *\r\n * interface Pet {\r\n *   name: string;\r\n *   kind: 'dog' | 'cat' | 'fish';\r\n * }\r\n *\r\n * const client = new MongoClient('mongodb://localhost:27017');\r\n * const db = client.db();\r\n *\r\n * // Create a collection that validates our union\r\n * await db.createCollection<Pet>('pets', {\r\n *   validator: { $expr: { $in: ['$kind', ['dog', 'cat', 'fish']] } }\r\n * })\r\n * ```\r\n */\nclass Db {\n  /**\r\n   * Creates a new Db instance\r\n   *\r\n   * @param client - The MongoClient for the database.\r\n   * @param databaseName - The name of the database this instance represents.\r\n   * @param options - Optional settings for Db construction\r\n   */\n  constructor(client, databaseName, options) {\n    var _a;\n    options = options !== null && options !== void 0 ? options : {};\n    // Filter the options\n    options = (0, utils_1.filterOptions)(options, DB_OPTIONS_ALLOW_LIST);\n    // Ensure we have a valid db name\n    validateDatabaseName(databaseName);\n    // Internal state of the db object\n    this.s = {\n      // Client\n      client,\n      // Options\n      options,\n      // Logger instance\n      logger: new logger_1.Logger('Db', options),\n      // Unpack read preference\n      readPreference: read_preference_1.ReadPreference.fromOptions(options),\n      // Merge bson options\n      bsonOptions: (0, bson_1.resolveBSONOptions)(options, client),\n      // Set up the primary key factory or fallback to ObjectId\n      pkFactory: (_a = options === null || options === void 0 ? void 0 : options.pkFactory) !== null && _a !== void 0 ? _a : utils_1.DEFAULT_PK_FACTORY,\n      // ReadConcern\n      readConcern: read_concern_1.ReadConcern.fromOptions(options),\n      writeConcern: write_concern_1.WriteConcern.fromOptions(options),\n      // Namespace\n      namespace: new utils_1.MongoDBNamespace(databaseName)\n    };\n  }\n  get databaseName() {\n    return this.s.namespace.db;\n  }\n  // Options\n  get options() {\n    return this.s.options;\n  }\n  /**\r\n   * slaveOk specified\r\n   * @deprecated Use secondaryOk instead\r\n   */\n  get slaveOk() {\n    return this.secondaryOk;\n  }\n  /**\r\n   * Check if a secondary can be used (because the read preference is *not* set to primary)\r\n   */\n  get secondaryOk() {\n    var _a;\n    return ((_a = this.s.readPreference) === null || _a === void 0 ? void 0 : _a.preference) !== 'primary' || false;\n  }\n  get readConcern() {\n    return this.s.readConcern;\n  }\n  /**\r\n   * The current readPreference of the Db. If not explicitly defined for\r\n   * this Db, will be inherited from the parent MongoClient\r\n   */\n  get readPreference() {\n    if (this.s.readPreference == null) {\n      return this.s.client.readPreference;\n    }\n    return this.s.readPreference;\n  }\n  get bsonOptions() {\n    return this.s.bsonOptions;\n  }\n  // get the write Concern\n  get writeConcern() {\n    return this.s.writeConcern;\n  }\n  get namespace() {\n    return this.s.namespace.toString();\n  }\n  createCollection(name, options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    return (0, execute_operation_1.executeOperation)(this.s.client, new create_collection_1.CreateCollectionOperation(this, name, (0, utils_1.resolveOptions)(this, options)), callback);\n  }\n  command(command, options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    // Intentionally, we do not inherit options from parent for this operation.\n    return (0, execute_operation_1.executeOperation)(this.s.client, new run_command_1.RunCommandOperation(this, command, options !== null && options !== void 0 ? options : {}), callback);\n  }\n  /**\r\n   * Execute an aggregation framework pipeline against the database, needs MongoDB \\>= 3.6\r\n   *\r\n   * @param pipeline - An array of aggregation stages to be executed\r\n   * @param options - Optional settings for the command\r\n   */\n  aggregate() {\n    let pipeline = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    let options = arguments.length > 1 ? arguments[1] : undefined;\n    if (arguments.length > 2) {\n      throw new error_1.MongoInvalidArgumentError('Method \"db.aggregate()\" accepts at most two arguments');\n    }\n    if (typeof pipeline === 'function') {\n      throw new error_1.MongoInvalidArgumentError('Argument \"pipeline\" must not be function');\n    }\n    if (typeof options === 'function') {\n      throw new error_1.MongoInvalidArgumentError('Argument \"options\" must not be function');\n    }\n    return new aggregation_cursor_1.AggregationCursor(this.s.client, this.s.namespace, pipeline, (0, utils_1.resolveOptions)(this, options));\n  }\n  /** Return the Admin db instance */\n  admin() {\n    return new admin_1.Admin(this);\n  }\n  /**\r\n   * Returns a reference to a MongoDB Collection. If it does not exist it will be created implicitly.\r\n   *\r\n   * @param name - the collection name we wish to access.\r\n   * @returns return the new Collection instance\r\n   */\n  collection(name) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    if (typeof options === 'function') {\n      throw new error_1.MongoInvalidArgumentError('The callback form of this helper has been removed.');\n    }\n    const finalOptions = (0, utils_1.resolveOptions)(this, options);\n    return new collection_1.Collection(this, name, finalOptions);\n  }\n  stats(options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    return (0, execute_operation_1.executeOperation)(this.s.client, new stats_1.DbStatsOperation(this, (0, utils_1.resolveOptions)(this, options)), callback);\n  }\n  listCollections() {\n    let filter = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return new list_collections_cursor_1.ListCollectionsCursor(this, filter, (0, utils_1.resolveOptions)(this, options));\n  }\n  renameCollection(fromCollection, toCollection, options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    // Intentionally, we do not inherit options from parent for this operation.\n    options = {\n      ...options,\n      readPreference: read_preference_1.ReadPreference.PRIMARY\n    };\n    // Add return new collection\n    options.new_collection = true;\n    return (0, execute_operation_1.executeOperation)(this.s.client, new rename_1.RenameOperation(this.collection(fromCollection), toCollection, options), callback);\n  }\n  dropCollection(name, options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    return (0, execute_operation_1.executeOperation)(this.s.client, new drop_1.DropCollectionOperation(this, name, (0, utils_1.resolveOptions)(this, options)), callback);\n  }\n  dropDatabase(options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    return (0, execute_operation_1.executeOperation)(this.s.client, new drop_1.DropDatabaseOperation(this, (0, utils_1.resolveOptions)(this, options)), callback);\n  }\n  collections(options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    return (0, execute_operation_1.executeOperation)(this.s.client, new collections_1.CollectionsOperation(this, (0, utils_1.resolveOptions)(this, options)), callback);\n  }\n  createIndex(name, indexSpec, options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    return (0, execute_operation_1.executeOperation)(this.s.client, new indexes_1.CreateIndexOperation(this, name, indexSpec, (0, utils_1.resolveOptions)(this, options)), callback);\n  }\n  addUser(username, password, options, callback) {\n    if (typeof password === 'function') {\n      callback = password, password = undefined, options = {};\n    } else if (typeof password !== 'string') {\n      if (typeof options === 'function') {\n        callback = options, options = password, password = undefined;\n      } else {\n        options = password, callback = undefined, password = undefined;\n      }\n    } else {\n      if (typeof options === 'function') callback = options, options = {};\n    }\n    return (0, execute_operation_1.executeOperation)(this.s.client, new add_user_1.AddUserOperation(this, username, password, (0, utils_1.resolveOptions)(this, options)), callback);\n  }\n  removeUser(username, options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    return (0, execute_operation_1.executeOperation)(this.s.client, new remove_user_1.RemoveUserOperation(this, username, (0, utils_1.resolveOptions)(this, options)), callback);\n  }\n  setProfilingLevel(level, options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    return (0, execute_operation_1.executeOperation)(this.s.client, new set_profiling_level_1.SetProfilingLevelOperation(this, level, (0, utils_1.resolveOptions)(this, options)), callback);\n  }\n  profilingLevel(options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    return (0, execute_operation_1.executeOperation)(this.s.client, new profiling_level_1.ProfilingLevelOperation(this, (0, utils_1.resolveOptions)(this, options)), callback);\n  }\n  indexInformation(name, options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    return (0, execute_operation_1.executeOperation)(this.s.client, new indexes_1.IndexInformationOperation(this, name, (0, utils_1.resolveOptions)(this, options)), callback);\n  }\n  /**\r\n   * Unref all sockets\r\n   * @deprecated This function is deprecated and will be removed in the next major version.\r\n   */\n  unref() {\n    (0, utils_1.getTopology)(this).unref();\n  }\n  /**\r\n   * Create a new Change Stream, watching for new changes (insertions, updates,\r\n   * replacements, deletions, and invalidations) in this database. Will ignore all\r\n   * changes to system collections.\r\n   *\r\n   * @remarks\r\n   * watch() accepts two generic arguments for distinct use cases:\r\n   * - The first is to provide the schema that may be defined for all the collections within this database\r\n   * - The second is to override the shape of the change stream document entirely, if it is not provided the type will default to ChangeStreamDocument of the first argument\r\n   *\r\n   * @param pipeline - An array of {@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline/|aggregation pipeline stages} through which to pass change stream documents. This allows for filtering (using $match) and manipulating the change stream documents.\r\n   * @param options - Optional settings for the command\r\n   * @typeParam TSchema - Type of the data being detected by the change stream\r\n   * @typeParam TChange - Type of the whole change stream document emitted\r\n   */\n  watch() {\n    let pipeline = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    // Allow optionally not specifying a pipeline\n    if (!Array.isArray(pipeline)) {\n      options = pipeline;\n      pipeline = [];\n    }\n    return new change_stream_1.ChangeStream(this, pipeline, (0, utils_1.resolveOptions)(this, options));\n  }\n  /** Return the db logger */\n  getLogger() {\n    return this.s.logger;\n  }\n  get logger() {\n    return this.s.logger;\n  }\n}\nexports.Db = Db;\nDb.SYSTEM_NAMESPACE_COLLECTION = CONSTANTS.SYSTEM_NAMESPACE_COLLECTION;\nDb.SYSTEM_INDEX_COLLECTION = CONSTANTS.SYSTEM_INDEX_COLLECTION;\nDb.SYSTEM_PROFILE_COLLECTION = CONSTANTS.SYSTEM_PROFILE_COLLECTION;\nDb.SYSTEM_USER_COLLECTION = CONSTANTS.SYSTEM_USER_COLLECTION;\nDb.SYSTEM_COMMAND_COLLECTION = CONSTANTS.SYSTEM_COMMAND_COLLECTION;\nDb.SYSTEM_JS_COLLECTION = CONSTANTS.SYSTEM_JS_COLLECTION;\n// TODO(NODE-3484): Refactor into MongoDBNamespace\n// Validate the database name\nfunction validateDatabaseName(databaseName) {\n  if (typeof databaseName !== 'string') throw new error_1.MongoInvalidArgumentError('Database name must be a string');\n  if (databaseName.length === 0) throw new error_1.MongoInvalidArgumentError('Database name cannot be the empty string');\n  if (databaseName === '$external') return;\n  const invalidChars = [' ', '.', '$', '/', '\\\\'];\n  for (let i = 0; i < invalidChars.length; i++) {\n    if (databaseName.indexOf(invalidChars[i]) !== -1) throw new error_1.MongoAPIError(`database names cannot contain the character '${invalidChars[i]}'`);\n  }\n}","map":{"version":3,"mappings":"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","names":["DB_OPTIONS_ALLOW_LIST","Db","constructor","client","databaseName","options","validateDatabaseName","s","logger","logger_1","readPreference","read_preference_1","fromOptions","bsonOptions","pkFactory","utils_1","readConcern","read_concern_1","writeConcern","write_concern_1","namespace","db","slaveOk","secondaryOk","preference","toString","createCollection","name","callback","create_collection_1","command","run_command_1","aggregate","pipeline","arguments","length","error_1","aggregation_cursor_1","admin","admin_1","collection","finalOptions","collection_1","stats","stats_1","listCollections","filter","list_collections_cursor_1","renameCollection","fromCollection","toCollection","PRIMARY","new_collection","rename_1","dropCollection","drop_1","dropDatabase","collections","collections_1","createIndex","indexSpec","indexes_1","addUser","username","password","undefined","add_user_1","removeUser","remove_user_1","setProfilingLevel","level","set_profiling_level_1","profilingLevel","profiling_level_1","indexInformation","unref","watch","Array","isArray","change_stream_1","getLogger","exports","CONSTANTS","SYSTEM_NAMESPACE_COLLECTION","SYSTEM_INDEX_COLLECTION","SYSTEM_PROFILE_COLLECTION","SYSTEM_USER_COLLECTION","SYSTEM_COMMAND_COLLECTION","SYSTEM_JS_COLLECTION","invalidChars","i","indexOf"],"sources":["C:\\Users\\91930\\Desktop\\Github projects\\Pharmacy Demo\\back-end\\node_modules\\mongoose\\node_modules\\mongodb\\src\\db.ts"],"sourcesContent":["import { Admin } from './admin';\r\nimport { BSONSerializeOptions, Document, resolveBSONOptions } from './bson';\r\nimport { ChangeStream, ChangeStreamDocument, ChangeStreamOptions } from './change_stream';\r\nimport { Collection, CollectionOptions } from './collection';\r\nimport * as CONSTANTS from './constants';\r\nimport { AggregationCursor } from './cursor/aggregation_cursor';\r\nimport { ListCollectionsCursor } from './cursor/list_collections_cursor';\r\nimport { MongoAPIError, MongoInvalidArgumentError } from './error';\r\nimport { Logger, LoggerOptions } from './logger';\r\nimport type { MongoClient, PkFactory } from './mongo_client';\r\nimport type { TODO_NODE_3286 } from './mongo_types';\r\nimport { AddUserOperation, AddUserOptions } from './operations/add_user';\r\nimport type { AggregateOptions } from './operations/aggregate';\r\nimport { CollectionsOperation } from './operations/collections';\r\nimport type { IndexInformationOptions } from './operations/common_functions';\r\nimport { CreateCollectionOperation, CreateCollectionOptions } from './operations/create_collection';\r\nimport {\r\n  DropCollectionOperation,\r\n  DropCollectionOptions,\r\n  DropDatabaseOperation,\r\n  DropDatabaseOptions\r\n} from './operations/drop';\r\nimport { executeOperation } from './operations/execute_operation';\r\nimport {\r\n  CreateIndexesOptions,\r\n  CreateIndexOperation,\r\n  IndexInformationOperation,\r\n  IndexSpecification\r\n} from './operations/indexes';\r\nimport type { CollectionInfo, ListCollectionsOptions } from './operations/list_collections';\r\nimport { ProfilingLevelOperation, ProfilingLevelOptions } from './operations/profiling_level';\r\nimport { RemoveUserOperation, RemoveUserOptions } from './operations/remove_user';\r\nimport { RenameOperation, RenameOptions } from './operations/rename';\r\nimport { RunCommandOperation, RunCommandOptions } from './operations/run_command';\r\nimport {\r\n  ProfilingLevel,\r\n  SetProfilingLevelOperation,\r\n  SetProfilingLevelOptions\r\n} from './operations/set_profiling_level';\r\nimport { DbStatsOperation, DbStatsOptions } from './operations/stats';\r\nimport { ReadConcern } from './read_concern';\r\nimport { ReadPreference, ReadPreferenceLike } from './read_preference';\r\nimport {\r\n  Callback,\r\n  DEFAULT_PK_FACTORY,\r\n  filterOptions,\r\n  getTopology,\r\n  MongoDBNamespace,\r\n  resolveOptions\r\n} from './utils';\r\nimport { WriteConcern, WriteConcernOptions } from './write_concern';\r\n\r\n// Allowed parameters\r\nconst DB_OPTIONS_ALLOW_LIST = [\r\n  'writeConcern',\r\n  'readPreference',\r\n  'readPreferenceTags',\r\n  'native_parser',\r\n  'forceServerObjectId',\r\n  'pkFactory',\r\n  'serializeFunctions',\r\n  'raw',\r\n  'authSource',\r\n  'ignoreUndefined',\r\n  'readConcern',\r\n  'retryMiliSeconds',\r\n  'numberOfRetries',\r\n  'loggerLevel',\r\n  'logger',\r\n  'promoteBuffers',\r\n  'promoteLongs',\r\n  'bsonRegExp',\r\n  'enableUtf8Validation',\r\n  'promoteValues',\r\n  'compression',\r\n  'retryWrites'\r\n];\r\n\r\n/** @internal */\r\nexport interface DbPrivate {\r\n  client: MongoClient;\r\n  options?: DbOptions;\r\n  logger: Logger;\r\n  readPreference?: ReadPreference;\r\n  pkFactory: PkFactory;\r\n  readConcern?: ReadConcern;\r\n  bsonOptions: BSONSerializeOptions;\r\n  writeConcern?: WriteConcern;\r\n  namespace: MongoDBNamespace;\r\n}\r\n\r\n/** @public */\r\nexport interface DbOptions extends BSONSerializeOptions, WriteConcernOptions, LoggerOptions {\r\n  /** If the database authentication is dependent on another databaseName. */\r\n  authSource?: string;\r\n  /** Force server to assign _id values instead of driver. */\r\n  forceServerObjectId?: boolean;\r\n  /** The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST). */\r\n  readPreference?: ReadPreferenceLike;\r\n  /** A primary key factory object for generation of custom _id keys. */\r\n  pkFactory?: PkFactory;\r\n  /** Specify a read concern for the collection. (only MongoDB 3.2 or higher supported) */\r\n  readConcern?: ReadConcern;\r\n  /** Should retry failed writes */\r\n  retryWrites?: boolean;\r\n}\r\n\r\n/**\r\n * The **Db** class is a class that represents a MongoDB Database.\r\n * @public\r\n *\r\n * @example\r\n * ```ts\r\n * import { MongoClient } from 'mongodb';\r\n *\r\n * interface Pet {\r\n *   name: string;\r\n *   kind: 'dog' | 'cat' | 'fish';\r\n * }\r\n *\r\n * const client = new MongoClient('mongodb://localhost:27017');\r\n * const db = client.db();\r\n *\r\n * // Create a collection that validates our union\r\n * await db.createCollection<Pet>('pets', {\r\n *   validator: { $expr: { $in: ['$kind', ['dog', 'cat', 'fish']] } }\r\n * })\r\n * ```\r\n */\r\nexport class Db {\r\n  /** @internal */\r\n  s: DbPrivate;\r\n\r\n  public static SYSTEM_NAMESPACE_COLLECTION = CONSTANTS.SYSTEM_NAMESPACE_COLLECTION;\r\n  public static SYSTEM_INDEX_COLLECTION = CONSTANTS.SYSTEM_INDEX_COLLECTION;\r\n  public static SYSTEM_PROFILE_COLLECTION = CONSTANTS.SYSTEM_PROFILE_COLLECTION;\r\n  public static SYSTEM_USER_COLLECTION = CONSTANTS.SYSTEM_USER_COLLECTION;\r\n  public static SYSTEM_COMMAND_COLLECTION = CONSTANTS.SYSTEM_COMMAND_COLLECTION;\r\n  public static SYSTEM_JS_COLLECTION = CONSTANTS.SYSTEM_JS_COLLECTION;\r\n\r\n  /**\r\n   * Creates a new Db instance\r\n   *\r\n   * @param client - The MongoClient for the database.\r\n   * @param databaseName - The name of the database this instance represents.\r\n   * @param options - Optional settings for Db construction\r\n   */\r\n  constructor(client: MongoClient, databaseName: string, options?: DbOptions) {\r\n    options = options ?? {};\r\n\r\n    // Filter the options\r\n    options = filterOptions(options, DB_OPTIONS_ALLOW_LIST);\r\n\r\n    // Ensure we have a valid db name\r\n    validateDatabaseName(databaseName);\r\n\r\n    // Internal state of the db object\r\n    this.s = {\r\n      // Client\r\n      client,\r\n      // Options\r\n      options,\r\n      // Logger instance\r\n      logger: new Logger('Db', options),\r\n      // Unpack read preference\r\n      readPreference: ReadPreference.fromOptions(options),\r\n      // Merge bson options\r\n      bsonOptions: resolveBSONOptions(options, client),\r\n      // Set up the primary key factory or fallback to ObjectId\r\n      pkFactory: options?.pkFactory ?? DEFAULT_PK_FACTORY,\r\n      // ReadConcern\r\n      readConcern: ReadConcern.fromOptions(options),\r\n      writeConcern: WriteConcern.fromOptions(options),\r\n      // Namespace\r\n      namespace: new MongoDBNamespace(databaseName)\r\n    };\r\n  }\r\n\r\n  get databaseName(): string {\r\n    return this.s.namespace.db;\r\n  }\r\n\r\n  // Options\r\n  get options(): DbOptions | undefined {\r\n    return this.s.options;\r\n  }\r\n\r\n  /**\r\n   * slaveOk specified\r\n   * @deprecated Use secondaryOk instead\r\n   */\r\n  get slaveOk(): boolean {\r\n    return this.secondaryOk;\r\n  }\r\n\r\n  /**\r\n   * Check if a secondary can be used (because the read preference is *not* set to primary)\r\n   */\r\n  get secondaryOk(): boolean {\r\n    return this.s.readPreference?.preference !== 'primary' || false;\r\n  }\r\n\r\n  get readConcern(): ReadConcern | undefined {\r\n    return this.s.readConcern;\r\n  }\r\n\r\n  /**\r\n   * The current readPreference of the Db. If not explicitly defined for\r\n   * this Db, will be inherited from the parent MongoClient\r\n   */\r\n  get readPreference(): ReadPreference {\r\n    if (this.s.readPreference == null) {\r\n      return this.s.client.readPreference;\r\n    }\r\n\r\n    return this.s.readPreference;\r\n  }\r\n\r\n  get bsonOptions(): BSONSerializeOptions {\r\n    return this.s.bsonOptions;\r\n  }\r\n\r\n  // get the write Concern\r\n  get writeConcern(): WriteConcern | undefined {\r\n    return this.s.writeConcern;\r\n  }\r\n\r\n  get namespace(): string {\r\n    return this.s.namespace.toString();\r\n  }\r\n\r\n  /**\r\n   * Create a new collection on a server with the specified options. Use this to create capped collections.\r\n   * More information about command options available at https://docs.mongodb.com/manual/reference/command/create/\r\n   *\r\n   * @param name - The name of the collection to create\r\n   * @param options - Optional settings for the command\r\n   * @param callback - An optional callback, a Promise will be returned if none is provided\r\n   */\r\n  createCollection<TSchema extends Document = Document>(\r\n    name: string,\r\n    options?: CreateCollectionOptions\r\n  ): Promise<Collection<TSchema>>;\r\n  /** @deprecated Callbacks are deprecated and will be removed in the next major version. See [mongodb-legacy](https://github.com/mongodb-js/nodejs-mongodb-legacy) for migration assistance */\r\n  createCollection<TSchema extends Document = Document>(\r\n    name: string,\r\n    callback: Callback<Collection<TSchema>>\r\n  ): void;\r\n  /** @deprecated Callbacks are deprecated and will be removed in the next major version. See [mongodb-legacy](https://github.com/mongodb-js/nodejs-mongodb-legacy) for migration assistance */\r\n  createCollection<TSchema extends Document = Document>(\r\n    name: string,\r\n    options: CreateCollectionOptions | undefined,\r\n    callback: Callback<Collection<TSchema>>\r\n  ): void;\r\n  createCollection<TSchema extends Document = Document>(\r\n    name: string,\r\n    options?: CreateCollectionOptions | Callback<Collection>,\r\n    callback?: Callback<Collection>\r\n  ): Promise<Collection<TSchema>> | void {\r\n    if (typeof options === 'function') (callback = options), (options = {});\r\n\r\n    return executeOperation(\r\n      this.s.client,\r\n      new CreateCollectionOperation(this, name, resolveOptions(this, options)) as TODO_NODE_3286,\r\n      callback\r\n    ) as TODO_NODE_3286;\r\n  }\r\n\r\n  /**\r\n   * Execute a command\r\n   *\r\n   * @remarks\r\n   * This command does not inherit options from the MongoClient.\r\n   *\r\n   * @param command - The command to run\r\n   * @param options - Optional settings for the command\r\n   * @param callback - An optional callback, a Promise will be returned if none is provided\r\n   */\r\n  command(command: Document): Promise<Document>;\r\n  command(command: Document, options: RunCommandOptions): Promise<Document>;\r\n  /** @deprecated Callbacks are deprecated and will be removed in the next major version. See [mongodb-legacy](https://github.com/mongodb-js/nodejs-mongodb-legacy) for migration assistance */\r\n  command(command: Document, callback: Callback<Document>): void;\r\n  /** @deprecated Callbacks are deprecated and will be removed in the next major version. See [mongodb-legacy](https://github.com/mongodb-js/nodejs-mongodb-legacy) for migration assistance */\r\n  command(command: Document, options: RunCommandOptions, callback: Callback<Document>): void;\r\n  command(\r\n    command: Document,\r\n    options?: RunCommandOptions | Callback<Document>,\r\n    callback?: Callback<Document>\r\n  ): Promise<Document> | void {\r\n    if (typeof options === 'function') (callback = options), (options = {});\r\n\r\n    // Intentionally, we do not inherit options from parent for this operation.\r\n    return executeOperation(\r\n      this.s.client,\r\n      new RunCommandOperation(this, command, options ?? {}),\r\n      callback\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Execute an aggregation framework pipeline against the database, needs MongoDB \\>= 3.6\r\n   *\r\n   * @param pipeline - An array of aggregation stages to be executed\r\n   * @param options - Optional settings for the command\r\n   */\r\n  aggregate<T extends Document = Document>(\r\n    pipeline: Document[] = [],\r\n    options?: AggregateOptions\r\n  ): AggregationCursor<T> {\r\n    if (arguments.length > 2) {\r\n      throw new MongoInvalidArgumentError('Method \"db.aggregate()\" accepts at most two arguments');\r\n    }\r\n    if (typeof pipeline === 'function') {\r\n      throw new MongoInvalidArgumentError('Argument \"pipeline\" must not be function');\r\n    }\r\n    if (typeof options === 'function') {\r\n      throw new MongoInvalidArgumentError('Argument \"options\" must not be function');\r\n    }\r\n\r\n    return new AggregationCursor(\r\n      this.s.client,\r\n      this.s.namespace,\r\n      pipeline,\r\n      resolveOptions(this, options)\r\n    );\r\n  }\r\n\r\n  /** Return the Admin db instance */\r\n  admin(): Admin {\r\n    return new Admin(this);\r\n  }\r\n\r\n  /**\r\n   * Returns a reference to a MongoDB Collection. If it does not exist it will be created implicitly.\r\n   *\r\n   * @param name - the collection name we wish to access.\r\n   * @returns return the new Collection instance\r\n   */\r\n  collection<TSchema extends Document = Document>(\r\n    name: string,\r\n    options: CollectionOptions = {}\r\n  ): Collection<TSchema> {\r\n    if (typeof options === 'function') {\r\n      throw new MongoInvalidArgumentError('The callback form of this helper has been removed.');\r\n    }\r\n    const finalOptions = resolveOptions(this, options);\r\n    return new Collection<TSchema>(this, name, finalOptions);\r\n  }\r\n\r\n  /**\r\n   * Get all the db statistics.\r\n   *\r\n   * @param options - Optional settings for the command\r\n   * @param callback - An optional callback, a Promise will be returned if none is provided\r\n   */\r\n  stats(): Promise<Document>;\r\n  stats(options: DbStatsOptions): Promise<Document>;\r\n  /** @deprecated Callbacks are deprecated and will be removed in the next major version. See [mongodb-legacy](https://github.com/mongodb-js/nodejs-mongodb-legacy) for migration assistance */\r\n  stats(callback: Callback<Document>): void;\r\n  /** @deprecated Callbacks are deprecated and will be removed in the next major version. See [mongodb-legacy](https://github.com/mongodb-js/nodejs-mongodb-legacy) for migration assistance */\r\n  stats(options: DbStatsOptions, callback: Callback<Document>): void;\r\n  stats(\r\n    options?: DbStatsOptions | Callback<Document>,\r\n    callback?: Callback<Document>\r\n  ): Promise<Document> | void {\r\n    if (typeof options === 'function') (callback = options), (options = {});\r\n    return executeOperation(\r\n      this.s.client,\r\n      new DbStatsOperation(this, resolveOptions(this, options)),\r\n      callback\r\n    );\r\n  }\r\n\r\n  /**\r\n   * List all collections of this database with optional filter\r\n   *\r\n   * @param filter - Query to filter collections by\r\n   * @param options - Optional settings for the command\r\n   */\r\n  listCollections(\r\n    filter: Document,\r\n    options: Exclude<ListCollectionsOptions, 'nameOnly'> & { nameOnly: true }\r\n  ): ListCollectionsCursor<Pick<CollectionInfo, 'name' | 'type'>>;\r\n  listCollections(\r\n    filter: Document,\r\n    options: Exclude<ListCollectionsOptions, 'nameOnly'> & { nameOnly: false }\r\n  ): ListCollectionsCursor<CollectionInfo>;\r\n  listCollections<\r\n    T extends Pick<CollectionInfo, 'name' | 'type'> | CollectionInfo =\r\n      | Pick<CollectionInfo, 'name' | 'type'>\r\n      | CollectionInfo\r\n  >(filter?: Document, options?: ListCollectionsOptions): ListCollectionsCursor<T>;\r\n  listCollections<\r\n    T extends Pick<CollectionInfo, 'name' | 'type'> | CollectionInfo =\r\n      | Pick<CollectionInfo, 'name' | 'type'>\r\n      | CollectionInfo\r\n  >(filter: Document = {}, options: ListCollectionsOptions = {}): ListCollectionsCursor<T> {\r\n    return new ListCollectionsCursor<T>(this, filter, resolveOptions(this, options));\r\n  }\r\n\r\n  /**\r\n   * Rename a collection.\r\n   *\r\n   * @remarks\r\n   * This operation does not inherit options from the MongoClient.\r\n   *\r\n   * @param fromCollection - Name of current collection to rename\r\n   * @param toCollection - New name of of the collection\r\n   * @param options - Optional settings for the command\r\n   * @param callback - An optional callback, a Promise will be returned if none is provided\r\n   */\r\n  renameCollection<TSchema extends Document = Document>(\r\n    fromCollection: string,\r\n    toCollection: string\r\n  ): Promise<Collection<TSchema>>;\r\n  renameCollection<TSchema extends Document = Document>(\r\n    fromCollection: string,\r\n    toCollection: string,\r\n    options: RenameOptions\r\n  ): Promise<Collection<TSchema>>;\r\n  /** @deprecated Callbacks are deprecated and will be removed in the next major version. See [mongodb-legacy](https://github.com/mongodb-js/nodejs-mongodb-legacy) for migration assistance */\r\n  renameCollection<TSchema extends Document = Document>(\r\n    fromCollection: string,\r\n    toCollection: string,\r\n    callback: Callback<Collection<TSchema>>\r\n  ): void;\r\n  /** @deprecated Callbacks are deprecated and will be removed in the next major version. See [mongodb-legacy](https://github.com/mongodb-js/nodejs-mongodb-legacy) for migration assistance */\r\n  renameCollection<TSchema extends Document = Document>(\r\n    fromCollection: string,\r\n    toCollection: string,\r\n    options: RenameOptions,\r\n    callback: Callback<Collection<TSchema>>\r\n  ): void;\r\n  renameCollection<TSchema extends Document = Document>(\r\n    fromCollection: string,\r\n    toCollection: string,\r\n    options?: RenameOptions | Callback<Collection<TSchema>>,\r\n    callback?: Callback<Collection<TSchema>>\r\n  ): Promise<Collection<TSchema>> | void {\r\n    if (typeof options === 'function') (callback = options), (options = {});\r\n\r\n    // Intentionally, we do not inherit options from parent for this operation.\r\n    options = { ...options, readPreference: ReadPreference.PRIMARY };\r\n\r\n    // Add return new collection\r\n    options.new_collection = true;\r\n\r\n    return executeOperation(\r\n      this.s.client,\r\n      new RenameOperation(\r\n        this.collection<TSchema>(fromCollection) as TODO_NODE_3286,\r\n        toCollection,\r\n        options\r\n      ) as TODO_NODE_3286,\r\n      callback\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Drop a collection from the database, removing it permanently. New accesses will create a new collection.\r\n   *\r\n   * @param name - Name of collection to drop\r\n   * @param options - Optional settings for the command\r\n   * @param callback - An optional callback, a Promise will be returned if none is provided\r\n   */\r\n  dropCollection(name: string): Promise<boolean>;\r\n  dropCollection(name: string, options: DropCollectionOptions): Promise<boolean>;\r\n  /** @deprecated Callbacks are deprecated and will be removed in the next major version. See [mongodb-legacy](https://github.com/mongodb-js/nodejs-mongodb-legacy) for migration assistance */\r\n  dropCollection(name: string, callback: Callback<boolean>): void;\r\n  /** @deprecated Callbacks are deprecated and will be removed in the next major version. See [mongodb-legacy](https://github.com/mongodb-js/nodejs-mongodb-legacy) for migration assistance */\r\n  dropCollection(name: string, options: DropCollectionOptions, callback: Callback<boolean>): void;\r\n  dropCollection(\r\n    name: string,\r\n    options?: DropCollectionOptions | Callback<boolean>,\r\n    callback?: Callback<boolean>\r\n  ): Promise<boolean> | void {\r\n    if (typeof options === 'function') (callback = options), (options = {});\r\n\r\n    return executeOperation(\r\n      this.s.client,\r\n      new DropCollectionOperation(this, name, resolveOptions(this, options)),\r\n      callback\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Drop a database, removing it permanently from the server.\r\n   *\r\n   * @param options - Optional settings for the command\r\n   * @param callback - An optional callback, a Promise will be returned if none is provided\r\n   */\r\n  dropDatabase(): Promise<boolean>;\r\n  dropDatabase(options: DropDatabaseOptions): Promise<boolean>;\r\n  /** @deprecated Callbacks are deprecated and will be removed in the next major version. See [mongodb-legacy](https://github.com/mongodb-js/nodejs-mongodb-legacy) for migration assistance */\r\n  dropDatabase(callback: Callback<boolean>): void;\r\n  /** @deprecated Callbacks are deprecated and will be removed in the next major version. See [mongodb-legacy](https://github.com/mongodb-js/nodejs-mongodb-legacy) for migration assistance */\r\n  dropDatabase(options: DropDatabaseOptions, callback: Callback<boolean>): void;\r\n  dropDatabase(\r\n    options?: DropDatabaseOptions | Callback<boolean>,\r\n    callback?: Callback<boolean>\r\n  ): Promise<boolean> | void {\r\n    if (typeof options === 'function') (callback = options), (options = {});\r\n\r\n    return executeOperation(\r\n      this.s.client,\r\n      new DropDatabaseOperation(this, resolveOptions(this, options)),\r\n      callback\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Fetch all collections for the current db.\r\n   *\r\n   * @param options - Optional settings for the command\r\n   * @param callback - An optional callback, a Promise will be returned if none is provided\r\n   */\r\n  collections(): Promise<Collection[]>;\r\n  collections(options: ListCollectionsOptions): Promise<Collection[]>;\r\n  /** @deprecated Callbacks are deprecated and will be removed in the next major version. See [mongodb-legacy](https://github.com/mongodb-js/nodejs-mongodb-legacy) for migration assistance */\r\n  collections(callback: Callback<Collection[]>): void;\r\n  /** @deprecated Callbacks are deprecated and will be removed in the next major version. See [mongodb-legacy](https://github.com/mongodb-js/nodejs-mongodb-legacy) for migration assistance */\r\n  collections(options: ListCollectionsOptions, callback: Callback<Collection[]>): void;\r\n  collections(\r\n    options?: ListCollectionsOptions | Callback<Collection[]>,\r\n    callback?: Callback<Collection[]>\r\n  ): Promise<Collection[]> | void {\r\n    if (typeof options === 'function') (callback = options), (options = {});\r\n\r\n    return executeOperation(\r\n      this.s.client,\r\n      new CollectionsOperation(this, resolveOptions(this, options)),\r\n      callback\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Creates an index on the db and collection.\r\n   *\r\n   * @param name - Name of the collection to create the index on.\r\n   * @param indexSpec - Specify the field to index, or an index specification\r\n   * @param options - Optional settings for the command\r\n   * @param callback - An optional callback, a Promise will be returned if none is provided\r\n   */\r\n  createIndex(name: string, indexSpec: IndexSpecification): Promise<string>;\r\n  createIndex(\r\n    name: string,\r\n    indexSpec: IndexSpecification,\r\n    options: CreateIndexesOptions\r\n  ): Promise<string>;\r\n  /** @deprecated Callbacks are deprecated and will be removed in the next major version. See [mongodb-legacy](https://github.com/mongodb-js/nodejs-mongodb-legacy) for migration assistance */\r\n  createIndex(name: string, indexSpec: IndexSpecification, callback: Callback<string>): void;\r\n  /** @deprecated Callbacks are deprecated and will be removed in the next major version. See [mongodb-legacy](https://github.com/mongodb-js/nodejs-mongodb-legacy) for migration assistance */\r\n  createIndex(\r\n    name: string,\r\n    indexSpec: IndexSpecification,\r\n    options: CreateIndexesOptions,\r\n    callback: Callback<string>\r\n  ): void;\r\n  createIndex(\r\n    name: string,\r\n    indexSpec: IndexSpecification,\r\n    options?: CreateIndexesOptions | Callback<string>,\r\n    callback?: Callback<string>\r\n  ): Promise<string> | void {\r\n    if (typeof options === 'function') (callback = options), (options = {});\r\n\r\n    return executeOperation(\r\n      this.s.client,\r\n      new CreateIndexOperation(this, name, indexSpec, resolveOptions(this, options)),\r\n      callback\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Add a user to the database\r\n   *\r\n   * @param username - The username for the new user\r\n   * @param password - An optional password for the new user\r\n   * @param options - Optional settings for the command\r\n   * @param callback - An optional callback, a Promise will be returned if none is provided\r\n   */\r\n  addUser(username: string): Promise<Document>;\r\n  addUser(username: string, password: string): Promise<Document>;\r\n  addUser(username: string, options: AddUserOptions): Promise<Document>;\r\n  addUser(username: string, password: string, options: AddUserOptions): Promise<Document>;\r\n  /** @deprecated Callbacks are deprecated and will be removed in the next major version. See [mongodb-legacy](https://github.com/mongodb-js/nodejs-mongodb-legacy) for migration assistance */\r\n  addUser(username: string, callback: Callback<Document>): void;\r\n  /** @deprecated Callbacks are deprecated and will be removed in the next major version. See [mongodb-legacy](https://github.com/mongodb-js/nodejs-mongodb-legacy) for migration assistance */\r\n  addUser(username: string, password: string, callback: Callback<Document>): void;\r\n  /** @deprecated Callbacks are deprecated and will be removed in the next major version. See [mongodb-legacy](https://github.com/mongodb-js/nodejs-mongodb-legacy) for migration assistance */\r\n  addUser(username: string, options: AddUserOptions, callback: Callback<Document>): void;\r\n  /** @deprecated Callbacks are deprecated and will be removed in the next major version. See [mongodb-legacy](https://github.com/mongodb-js/nodejs-mongodb-legacy) for migration assistance */\r\n  addUser(\r\n    username: string,\r\n    password: string,\r\n    options: AddUserOptions,\r\n    callback: Callback<Document>\r\n  ): void;\r\n  addUser(\r\n    username: string,\r\n    password?: string | AddUserOptions | Callback<Document>,\r\n    options?: AddUserOptions | Callback<Document>,\r\n    callback?: Callback<Document>\r\n  ): Promise<Document> | void {\r\n    if (typeof password === 'function') {\r\n      (callback = password), (password = undefined), (options = {});\r\n    } else if (typeof password !== 'string') {\r\n      if (typeof options === 'function') {\r\n        (callback = options), (options = password), (password = undefined);\r\n      } else {\r\n        (options = password), (callback = undefined), (password = undefined);\r\n      }\r\n    } else {\r\n      if (typeof options === 'function') (callback = options), (options = {});\r\n    }\r\n\r\n    return executeOperation(\r\n      this.s.client,\r\n      new AddUserOperation(this, username, password, resolveOptions(this, options)),\r\n      callback\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Remove a user from a database\r\n   *\r\n   * @param username - The username to remove\r\n   * @param options - Optional settings for the command\r\n   * @param callback - An optional callback, a Promise will be returned if none is provided\r\n   */\r\n  removeUser(username: string): Promise<boolean>;\r\n  removeUser(username: string, options: RemoveUserOptions): Promise<boolean>;\r\n  /** @deprecated Callbacks are deprecated and will be removed in the next major version. See [mongodb-legacy](https://github.com/mongodb-js/nodejs-mongodb-legacy) for migration assistance */\r\n  removeUser(username: string, callback: Callback<boolean>): void;\r\n  /** @deprecated Callbacks are deprecated and will be removed in the next major version. See [mongodb-legacy](https://github.com/mongodb-js/nodejs-mongodb-legacy) for migration assistance */\r\n  removeUser(username: string, options: RemoveUserOptions, callback: Callback<boolean>): void;\r\n  removeUser(\r\n    username: string,\r\n    options?: RemoveUserOptions | Callback<boolean>,\r\n    callback?: Callback<boolean>\r\n  ): Promise<boolean> | void {\r\n    if (typeof options === 'function') (callback = options), (options = {});\r\n\r\n    return executeOperation(\r\n      this.s.client,\r\n      new RemoveUserOperation(this, username, resolveOptions(this, options)),\r\n      callback\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Set the current profiling level of MongoDB\r\n   *\r\n   * @param level - The new profiling level (off, slow_only, all).\r\n   * @param options - Optional settings for the command\r\n   * @param callback - An optional callback, a Promise will be returned if none is provided\r\n   */\r\n  setProfilingLevel(level: ProfilingLevel): Promise<ProfilingLevel>;\r\n  setProfilingLevel(\r\n    level: ProfilingLevel,\r\n    options: SetProfilingLevelOptions\r\n  ): Promise<ProfilingLevel>;\r\n  /** @deprecated Callbacks are deprecated and will be removed in the next major version. See [mongodb-legacy](https://github.com/mongodb-js/nodejs-mongodb-legacy) for migration assistance */\r\n  setProfilingLevel(level: ProfilingLevel, callback: Callback<ProfilingLevel>): void;\r\n  /** @deprecated Callbacks are deprecated and will be removed in the next major version. See [mongodb-legacy](https://github.com/mongodb-js/nodejs-mongodb-legacy) for migration assistance */\r\n  setProfilingLevel(\r\n    level: ProfilingLevel,\r\n    options: SetProfilingLevelOptions,\r\n    callback: Callback<ProfilingLevel>\r\n  ): void;\r\n  setProfilingLevel(\r\n    level: ProfilingLevel,\r\n    options?: SetProfilingLevelOptions | Callback<ProfilingLevel>,\r\n    callback?: Callback<ProfilingLevel>\r\n  ): Promise<ProfilingLevel> | void {\r\n    if (typeof options === 'function') (callback = options), (options = {});\r\n\r\n    return executeOperation(\r\n      this.s.client,\r\n      new SetProfilingLevelOperation(this, level, resolveOptions(this, options)),\r\n      callback\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Retrieve the current profiling Level for MongoDB\r\n   *\r\n   * @param options - Optional settings for the command\r\n   * @param callback - An optional callback, a Promise will be returned if none is provided\r\n   */\r\n  profilingLevel(): Promise<string>;\r\n  profilingLevel(options: ProfilingLevelOptions): Promise<string>;\r\n  /** @deprecated Callbacks are deprecated and will be removed in the next major version. See [mongodb-legacy](https://github.com/mongodb-js/nodejs-mongodb-legacy) for migration assistance */\r\n  profilingLevel(callback: Callback<string>): void;\r\n  /** @deprecated Callbacks are deprecated and will be removed in the next major version. See [mongodb-legacy](https://github.com/mongodb-js/nodejs-mongodb-legacy) for migration assistance */\r\n  profilingLevel(options: ProfilingLevelOptions, callback: Callback<string>): void;\r\n  profilingLevel(\r\n    options?: ProfilingLevelOptions | Callback<string>,\r\n    callback?: Callback<string>\r\n  ): Promise<string> | void {\r\n    if (typeof options === 'function') (callback = options), (options = {});\r\n\r\n    return executeOperation(\r\n      this.s.client,\r\n      new ProfilingLevelOperation(this, resolveOptions(this, options)),\r\n      callback\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Retrieves this collections index info.\r\n   *\r\n   * @param name - The name of the collection.\r\n   * @param options - Optional settings for the command\r\n   * @param callback - An optional callback, a Promise will be returned if none is provided\r\n   */\r\n  indexInformation(name: string): Promise<Document>;\r\n  indexInformation(name: string, options: IndexInformationOptions): Promise<Document>;\r\n  /** @deprecated Callbacks are deprecated and will be removed in the next major version. See [mongodb-legacy](https://github.com/mongodb-js/nodejs-mongodb-legacy) for migration assistance */\r\n  indexInformation(name: string, callback: Callback<Document>): void;\r\n  /** @deprecated Callbacks are deprecated and will be removed in the next major version. See [mongodb-legacy](https://github.com/mongodb-js/nodejs-mongodb-legacy) for migration assistance */\r\n  indexInformation(\r\n    name: string,\r\n    options: IndexInformationOptions,\r\n    callback: Callback<Document>\r\n  ): void;\r\n  indexInformation(\r\n    name: string,\r\n    options?: IndexInformationOptions | Callback<Document>,\r\n    callback?: Callback<Document>\r\n  ): Promise<Document> | void {\r\n    if (typeof options === 'function') (callback = options), (options = {});\r\n\r\n    return executeOperation(\r\n      this.s.client,\r\n      new IndexInformationOperation(this, name, resolveOptions(this, options)),\r\n      callback\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Unref all sockets\r\n   * @deprecated This function is deprecated and will be removed in the next major version.\r\n   */\r\n  unref(): void {\r\n    getTopology(this).unref();\r\n  }\r\n\r\n  /**\r\n   * Create a new Change Stream, watching for new changes (insertions, updates,\r\n   * replacements, deletions, and invalidations) in this database. Will ignore all\r\n   * changes to system collections.\r\n   *\r\n   * @remarks\r\n   * watch() accepts two generic arguments for distinct use cases:\r\n   * - The first is to provide the schema that may be defined for all the collections within this database\r\n   * - The second is to override the shape of the change stream document entirely, if it is not provided the type will default to ChangeStreamDocument of the first argument\r\n   *\r\n   * @param pipeline - An array of {@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline/|aggregation pipeline stages} through which to pass change stream documents. This allows for filtering (using $match) and manipulating the change stream documents.\r\n   * @param options - Optional settings for the command\r\n   * @typeParam TSchema - Type of the data being detected by the change stream\r\n   * @typeParam TChange - Type of the whole change stream document emitted\r\n   */\r\n  watch<\r\n    TSchema extends Document = Document,\r\n    TChange extends Document = ChangeStreamDocument<TSchema>\r\n  >(pipeline: Document[] = [], options: ChangeStreamOptions = {}): ChangeStream<TSchema, TChange> {\r\n    // Allow optionally not specifying a pipeline\r\n    if (!Array.isArray(pipeline)) {\r\n      options = pipeline;\r\n      pipeline = [];\r\n    }\r\n\r\n    return new ChangeStream<TSchema, TChange>(this, pipeline, resolveOptions(this, options));\r\n  }\r\n\r\n  /** Return the db logger */\r\n  getLogger(): Logger {\r\n    return this.s.logger;\r\n  }\r\n\r\n  get logger(): Logger {\r\n    return this.s.logger;\r\n  }\r\n}\r\n\r\n// TODO(NODE-3484): Refactor into MongoDBNamespace\r\n// Validate the database name\r\nfunction validateDatabaseName(databaseName: string) {\r\n  if (typeof databaseName !== 'string')\r\n    throw new MongoInvalidArgumentError('Database name must be a string');\r\n  if (databaseName.length === 0)\r\n    throw new MongoInvalidArgumentError('Database name cannot be the empty string');\r\n  if (databaseName === '$external') return;\r\n\r\n  const invalidChars = [' ', '.', '$', '/', '\\\\'];\r\n  for (let i = 0; i < invalidChars.length; i++) {\r\n    if (databaseName.indexOf(invalidChars[i]) !== -1)\r\n      throw new MongoAPIError(`database names cannot contain the character '${invalidChars[i]}'`);\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}