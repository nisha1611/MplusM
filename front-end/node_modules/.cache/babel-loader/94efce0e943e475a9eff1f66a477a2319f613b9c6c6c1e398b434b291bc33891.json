{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DbStatsOperation = exports.CollStatsOperation = void 0;\nconst command_1 = require(\"./command\");\nconst operation_1 = require(\"./operation\");\n/**\r\n * Get all the collection statistics.\r\n * @internal\r\n */\nclass CollStatsOperation extends command_1.CommandOperation {\n  /**\r\n   * Construct a Stats operation.\r\n   *\r\n   * @param collection - Collection instance\r\n   * @param options - Optional settings. See Collection.prototype.stats for a list of options.\r\n   */\n  constructor(collection, options) {\n    super(collection, options);\n    this.options = options !== null && options !== void 0 ? options : {};\n    this.collectionName = collection.collectionName;\n  }\n  execute(server, session, callback) {\n    const command = {\n      collStats: this.collectionName\n    };\n    if (this.options.scale != null) {\n      command.scale = this.options.scale;\n    }\n    super.executeCommand(server, session, command, callback);\n  }\n}\nexports.CollStatsOperation = CollStatsOperation;\n/** @internal */\nclass DbStatsOperation extends command_1.CommandOperation {\n  constructor(db, options) {\n    super(db, options);\n    this.options = options;\n  }\n  execute(server, session, callback) {\n    const command = {\n      dbStats: true\n    };\n    if (this.options.scale != null) {\n      command.scale = this.options.scale;\n    }\n    super.executeCommand(server, session, command, callback);\n  }\n}\nexports.DbStatsOperation = DbStatsOperation;\n(0, operation_1.defineAspects)(CollStatsOperation, [operation_1.Aspect.READ_OPERATION]);\n(0, operation_1.defineAspects)(DbStatsOperation, [operation_1.Aspect.READ_OPERATION]);","map":{"version":3,"mappings":";;;;;;AAMA;AACA;AAQA;;;;AAIA,MAAaA,kBAAmB,SAAQC,0BAA0B;EAIhE;;;;;;EAMAC,YAAYC,UAAsB,EAAEC,OAA0B;IAC5D,KAAK,CAACD,UAAU,EAAEC,OAAO,CAAC;IAC1B,IAAI,CAACA,OAAO,GAAGA,OAAO,aAAPA,OAAO,cAAPA,OAAO,GAAI,EAAE;IAC5B,IAAI,CAACC,cAAc,GAAGF,UAAU,CAACE,cAAc;EACjD;EAESC,OAAO,CACdC,MAAc,EACdC,OAAkC,EAClCC,QAA6B;IAE7B,MAAMC,OAAO,GAAa;MAAEC,SAAS,EAAE,IAAI,CAACN;IAAc,CAAE;IAC5D,IAAI,IAAI,CAACD,OAAO,CAACQ,KAAK,IAAI,IAAI,EAAE;MAC9BF,OAAO,CAACE,KAAK,GAAG,IAAI,CAACR,OAAO,CAACQ,KAAK;;IAGpC,KAAK,CAACC,cAAc,CAACN,MAAM,EAAEC,OAAO,EAAEE,OAAO,EAAED,QAAQ,CAAC;EAC1D;;AA3BFK;AAoCA;AACA,MAAaC,gBAAiB,SAAQd,0BAA0B;EAG9DC,YAAYc,EAAM,EAAEZ,OAAuB;IACzC,KAAK,CAACY,EAAE,EAAEZ,OAAO,CAAC;IAClB,IAAI,CAACA,OAAO,GAAGA,OAAO;EACxB;EAESE,OAAO,CACdC,MAAc,EACdC,OAAkC,EAClCC,QAA4B;IAE5B,MAAMC,OAAO,GAAa;MAAEO,OAAO,EAAE;IAAI,CAAE;IAC3C,IAAI,IAAI,CAACb,OAAO,CAACQ,KAAK,IAAI,IAAI,EAAE;MAC9BF,OAAO,CAACE,KAAK,GAAG,IAAI,CAACR,OAAO,CAACQ,KAAK;;IAGpC,KAAK,CAACC,cAAc,CAACN,MAAM,EAAEC,OAAO,EAAEE,OAAO,EAAED,QAAQ,CAAC;EAC1D;;AAnBFK;AAqNA,6BAAa,EAACd,kBAAkB,EAAE,CAACkB,kBAAM,CAACC,cAAc,CAAC,CAAC;AAC1D,6BAAa,EAACJ,gBAAgB,EAAE,CAACG,kBAAM,CAACC,cAAc,CAAC,CAAC","names":["CollStatsOperation","command_1","constructor","collection","options","collectionName","execute","server","session","callback","command","collStats","scale","executeCommand","exports","DbStatsOperation","db","dbStats","operation_1","READ_OPERATION"],"sources":["C:\\Users\\91930\\Desktop\\Github projects\\Pharmacy Demo\\back-end\\node_modules\\mongoose\\node_modules\\mongodb\\src\\operations\\stats.ts"],"sourcesContent":["import type { Document } from '../bson';\r\nimport type { Collection } from '../collection';\r\nimport type { Db } from '../db';\r\nimport type { Server } from '../sdam/server';\r\nimport type { ClientSession } from '../sessions';\r\nimport type { Callback } from '../utils';\r\nimport { CommandOperation, CommandOperationOptions } from './command';\r\nimport { Aspect, defineAspects } from './operation';\r\n\r\n/** @public */\r\nexport interface CollStatsOptions extends CommandOperationOptions {\r\n  /** Divide the returned sizes by scale value. */\r\n  scale?: number;\r\n}\r\n\r\n/**\r\n * Get all the collection statistics.\r\n * @internal\r\n */\r\nexport class CollStatsOperation extends CommandOperation<Document> {\r\n  override options: CollStatsOptions;\r\n  collectionName: string;\r\n\r\n  /**\r\n   * Construct a Stats operation.\r\n   *\r\n   * @param collection - Collection instance\r\n   * @param options - Optional settings. See Collection.prototype.stats for a list of options.\r\n   */\r\n  constructor(collection: Collection, options?: CollStatsOptions) {\r\n    super(collection, options);\r\n    this.options = options ?? {};\r\n    this.collectionName = collection.collectionName;\r\n  }\r\n\r\n  override execute(\r\n    server: Server,\r\n    session: ClientSession | undefined,\r\n    callback: Callback<CollStats>\r\n  ): void {\r\n    const command: Document = { collStats: this.collectionName };\r\n    if (this.options.scale != null) {\r\n      command.scale = this.options.scale;\r\n    }\r\n\r\n    super.executeCommand(server, session, command, callback);\r\n  }\r\n}\r\n\r\n/** @public */\r\nexport interface DbStatsOptions extends CommandOperationOptions {\r\n  /** Divide the returned sizes by scale value. */\r\n  scale?: number;\r\n}\r\n\r\n/** @internal */\r\nexport class DbStatsOperation extends CommandOperation<Document> {\r\n  override options: DbStatsOptions;\r\n\r\n  constructor(db: Db, options: DbStatsOptions) {\r\n    super(db, options);\r\n    this.options = options;\r\n  }\r\n\r\n  override execute(\r\n    server: Server,\r\n    session: ClientSession | undefined,\r\n    callback: Callback<Document>\r\n  ): void {\r\n    const command: Document = { dbStats: true };\r\n    if (this.options.scale != null) {\r\n      command.scale = this.options.scale;\r\n    }\r\n\r\n    super.executeCommand(server, session, command, callback);\r\n  }\r\n}\r\n\r\n/**\r\n * @public\r\n * @see https://docs.mongodb.org/manual/reference/command/collStats/\r\n */\r\nexport interface CollStats extends Document {\r\n  /** Namespace */\r\n  ns: string;\r\n  /** Number of documents */\r\n  count: number;\r\n  /** Collection size in bytes */\r\n  size: number;\r\n  /** Average object size in bytes */\r\n  avgObjSize: number;\r\n  /** (Pre)allocated space for the collection in bytes */\r\n  storageSize: number;\r\n  /** Number of extents (contiguously allocated chunks of datafile space) */\r\n  numExtents: number;\r\n  /** Number of indexes */\r\n  nindexes: number;\r\n  /** Size of the most recently created extent in bytes */\r\n  lastExtentSize: number;\r\n  /** Padding can speed up updates if documents grow */\r\n  paddingFactor: number;\r\n  /** A number that indicates the user-set flags on the collection. userFlags only appears when using the mmapv1 storage engine */\r\n  userFlags?: number;\r\n  /** Total index size in bytes */\r\n  totalIndexSize: number;\r\n  /** Size of specific indexes in bytes */\r\n  indexSizes: {\r\n    _id_: number;\r\n    [index: string]: number;\r\n  };\r\n  /** `true` if the collection is capped */\r\n  capped: boolean;\r\n  /** The maximum number of documents that may be present in a capped collection */\r\n  max: number;\r\n  /** The maximum size of a capped collection */\r\n  maxSize: number;\r\n  /** This document contains data reported directly by the WiredTiger engine and other data for internal diagnostic use */\r\n  wiredTiger?: WiredTigerData;\r\n  /** The fields in this document are the names of the indexes, while the values themselves are documents that contain statistics for the index provided by the storage engine */\r\n  indexDetails?: any;\r\n  ok: number;\r\n\r\n  /** The amount of storage available for reuse. The scale argument affects this value. */\r\n  freeStorageSize?: number;\r\n  /** An array that contains the names of the indexes that are currently being built on the collection */\r\n  indexBuilds?: number;\r\n  /** The sum of the storageSize and totalIndexSize. The scale argument affects this value */\r\n  totalSize: number;\r\n  /** The scale value used by the command. */\r\n  scaleFactor: number;\r\n}\r\n\r\n/** @public */\r\nexport interface WiredTigerData extends Document {\r\n  LSM: {\r\n    'bloom filter false positives': number;\r\n    'bloom filter hits': number;\r\n    'bloom filter misses': number;\r\n    'bloom filter pages evicted from cache': number;\r\n    'bloom filter pages read into cache': number;\r\n    'bloom filters in the LSM tree': number;\r\n    'chunks in the LSM tree': number;\r\n    'highest merge generation in the LSM tree': number;\r\n    'queries that could have benefited from a Bloom filter that did not exist': number;\r\n    'sleep for LSM checkpoint throttle': number;\r\n    'sleep for LSM merge throttle': number;\r\n    'total size of bloom filters': number;\r\n  } & Document;\r\n  'block-manager': {\r\n    'allocations requiring file extension': number;\r\n    'blocks allocated': number;\r\n    'blocks freed': number;\r\n    'checkpoint size': number;\r\n    'file allocation unit size': number;\r\n    'file bytes available for reuse': number;\r\n    'file magic number': number;\r\n    'file major version number': number;\r\n    'file size in bytes': number;\r\n    'minor version number': number;\r\n  };\r\n  btree: {\r\n    'btree checkpoint generation': number;\r\n    'column-store fixed-size leaf pages': number;\r\n    'column-store internal pages': number;\r\n    'column-store variable-size RLE encoded values': number;\r\n    'column-store variable-size deleted values': number;\r\n    'column-store variable-size leaf pages': number;\r\n    'fixed-record size': number;\r\n    'maximum internal page key size': number;\r\n    'maximum internal page size': number;\r\n    'maximum leaf page key size': number;\r\n    'maximum leaf page size': number;\r\n    'maximum leaf page value size': number;\r\n    'maximum tree depth': number;\r\n    'number of key/value pairs': number;\r\n    'overflow pages': number;\r\n    'pages rewritten by compaction': number;\r\n    'row-store internal pages': number;\r\n    'row-store leaf pages': number;\r\n  } & Document;\r\n  cache: {\r\n    'bytes currently in the cache': number;\r\n    'bytes read into cache': number;\r\n    'bytes written from cache': number;\r\n    'checkpoint blocked page eviction': number;\r\n    'data source pages selected for eviction unable to be evicted': number;\r\n    'hazard pointer blocked page eviction': number;\r\n    'in-memory page passed criteria to be split': number;\r\n    'in-memory page splits': number;\r\n    'internal pages evicted': number;\r\n    'internal pages split during eviction': number;\r\n    'leaf pages split during eviction': number;\r\n    'modified pages evicted': number;\r\n    'overflow pages read into cache': number;\r\n    'overflow values cached in memory': number;\r\n    'page split during eviction deepened the tree': number;\r\n    'page written requiring lookaside records': number;\r\n    'pages read into cache': number;\r\n    'pages read into cache requiring lookaside entries': number;\r\n    'pages requested from the cache': number;\r\n    'pages written from cache': number;\r\n    'pages written requiring in-memory restoration': number;\r\n    'tracked dirty bytes in the cache': number;\r\n    'unmodified pages evicted': number;\r\n  } & Document;\r\n  cache_walk: {\r\n    'Average difference between current eviction generation when the page was last considered': number;\r\n    'Average on-disk page image size seen': number;\r\n    'Clean pages currently in cache': number;\r\n    'Current eviction generation': number;\r\n    'Dirty pages currently in cache': number;\r\n    'Entries in the root page': number;\r\n    'Internal pages currently in cache': number;\r\n    'Leaf pages currently in cache': number;\r\n    'Maximum difference between current eviction generation when the page was last considered': number;\r\n    'Maximum page size seen': number;\r\n    'Minimum on-disk page image size seen': number;\r\n    'On-disk page image sizes smaller than a single allocation unit': number;\r\n    'Pages created in memory and never written': number;\r\n    'Pages currently queued for eviction': number;\r\n    'Pages that could not be queued for eviction': number;\r\n    'Refs skipped during cache traversal': number;\r\n    'Size of the root page': number;\r\n    'Total number of pages currently in cache': number;\r\n  } & Document;\r\n  compression: {\r\n    'compressed pages read': number;\r\n    'compressed pages written': number;\r\n    'page written failed to compress': number;\r\n    'page written was too small to compress': number;\r\n    'raw compression call failed, additional data available': number;\r\n    'raw compression call failed, no additional data available': number;\r\n    'raw compression call succeeded': number;\r\n  } & Document;\r\n  cursor: {\r\n    'bulk-loaded cursor-insert calls': number;\r\n    'create calls': number;\r\n    'cursor-insert key and value bytes inserted': number;\r\n    'cursor-remove key bytes removed': number;\r\n    'cursor-update value bytes updated': number;\r\n    'insert calls': number;\r\n    'next calls': number;\r\n    'prev calls': number;\r\n    'remove calls': number;\r\n    'reset calls': number;\r\n    'restarted searches': number;\r\n    'search calls': number;\r\n    'search near calls': number;\r\n    'truncate calls': number;\r\n    'update calls': number;\r\n  };\r\n  reconciliation: {\r\n    'dictionary matches': number;\r\n    'fast-path pages deleted': number;\r\n    'internal page key bytes discarded using suffix compression': number;\r\n    'internal page multi-block writes': number;\r\n    'internal-page overflow keys': number;\r\n    'leaf page key bytes discarded using prefix compression': number;\r\n    'leaf page multi-block writes': number;\r\n    'leaf-page overflow keys': number;\r\n    'maximum blocks required for a page': number;\r\n    'overflow values written': number;\r\n    'page checksum matches': number;\r\n    'page reconciliation calls': number;\r\n    'page reconciliation calls for eviction': number;\r\n    'pages deleted': number;\r\n  } & Document;\r\n}\r\n\r\ndefineAspects(CollStatsOperation, [Aspect.READ_OPERATION]);\r\ndefineAspects(DbStatsOperation, [Aspect.READ_OPERATION]);\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}