{"ast":null,"code":"/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Tobias Koppers @sokra\r\n*/\n\n\"use strict\";\n\nconst RuntimeGlobals = require(\"../RuntimeGlobals\");\nconst ChunkPrefetchFunctionRuntimeModule = require(\"./ChunkPrefetchFunctionRuntimeModule\");\nconst ChunkPrefetchStartupRuntimeModule = require(\"./ChunkPrefetchStartupRuntimeModule\");\nconst ChunkPrefetchTriggerRuntimeModule = require(\"./ChunkPrefetchTriggerRuntimeModule\");\nconst ChunkPreloadTriggerRuntimeModule = require(\"./ChunkPreloadTriggerRuntimeModule\");\n\n/** @typedef {import(\"../Compiler\")} Compiler */\n\nclass ChunkPrefetchPreloadPlugin {\n  /**\r\n   * @param {Compiler} compiler the compiler\r\n   * @returns {void}\r\n   */\n  apply(compiler) {\n    compiler.hooks.compilation.tap(\"ChunkPrefetchPreloadPlugin\", compilation => {\n      compilation.hooks.additionalChunkRuntimeRequirements.tap(\"ChunkPrefetchPreloadPlugin\", (chunk, set, _ref) => {\n        let {\n          chunkGraph\n        } = _ref;\n        if (chunkGraph.getNumberOfEntryModules(chunk) === 0) return;\n        const startupChildChunks = chunk.getChildrenOfTypeInOrder(chunkGraph, \"prefetchOrder\");\n        if (startupChildChunks) {\n          set.add(RuntimeGlobals.prefetchChunk);\n          set.add(RuntimeGlobals.onChunksLoaded);\n          compilation.addRuntimeModule(chunk, new ChunkPrefetchStartupRuntimeModule(startupChildChunks));\n        }\n      });\n      compilation.hooks.additionalTreeRuntimeRequirements.tap(\"ChunkPrefetchPreloadPlugin\", (chunk, set, _ref2) => {\n        let {\n          chunkGraph\n        } = _ref2;\n        const chunkMap = chunk.getChildIdsByOrdersMap(chunkGraph, false);\n        if (chunkMap.prefetch) {\n          set.add(RuntimeGlobals.prefetchChunk);\n          compilation.addRuntimeModule(chunk, new ChunkPrefetchTriggerRuntimeModule(chunkMap.prefetch));\n        }\n        if (chunkMap.preload) {\n          set.add(RuntimeGlobals.preloadChunk);\n          compilation.addRuntimeModule(chunk, new ChunkPreloadTriggerRuntimeModule(chunkMap.preload));\n        }\n      });\n      compilation.hooks.runtimeRequirementInTree.for(RuntimeGlobals.prefetchChunk).tap(\"ChunkPrefetchPreloadPlugin\", (chunk, set) => {\n        compilation.addRuntimeModule(chunk, new ChunkPrefetchFunctionRuntimeModule(\"prefetch\", RuntimeGlobals.prefetchChunk, RuntimeGlobals.prefetchChunkHandlers));\n        set.add(RuntimeGlobals.prefetchChunkHandlers);\n      });\n      compilation.hooks.runtimeRequirementInTree.for(RuntimeGlobals.preloadChunk).tap(\"ChunkPrefetchPreloadPlugin\", (chunk, set) => {\n        compilation.addRuntimeModule(chunk, new ChunkPrefetchFunctionRuntimeModule(\"preload\", RuntimeGlobals.preloadChunk, RuntimeGlobals.preloadChunkHandlers));\n        set.add(RuntimeGlobals.preloadChunkHandlers);\n      });\n    });\n  }\n}\nmodule.exports = ChunkPrefetchPreloadPlugin;","map":{"version":3,"names":["RuntimeGlobals","require","ChunkPrefetchFunctionRuntimeModule","ChunkPrefetchStartupRuntimeModule","ChunkPrefetchTriggerRuntimeModule","ChunkPreloadTriggerRuntimeModule","ChunkPrefetchPreloadPlugin","apply","compiler","hooks","compilation","tap","additionalChunkRuntimeRequirements","chunk","set","chunkGraph","getNumberOfEntryModules","startupChildChunks","getChildrenOfTypeInOrder","add","prefetchChunk","onChunksLoaded","addRuntimeModule","additionalTreeRuntimeRequirements","chunkMap","getChildIdsByOrdersMap","prefetch","preload","preloadChunk","runtimeRequirementInTree","for","prefetchChunkHandlers","preloadChunkHandlers","module","exports"],"sources":["C:/Users/91930/Desktop/Github projects/Pharmacy Demo/front-end/node_modules/webpack/lib/prefetch/ChunkPrefetchPreloadPlugin.js"],"sourcesContent":["/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Tobias Koppers @sokra\r\n*/\r\n\r\n\"use strict\";\r\n\r\nconst RuntimeGlobals = require(\"../RuntimeGlobals\");\r\nconst ChunkPrefetchFunctionRuntimeModule = require(\"./ChunkPrefetchFunctionRuntimeModule\");\r\nconst ChunkPrefetchStartupRuntimeModule = require(\"./ChunkPrefetchStartupRuntimeModule\");\r\nconst ChunkPrefetchTriggerRuntimeModule = require(\"./ChunkPrefetchTriggerRuntimeModule\");\r\nconst ChunkPreloadTriggerRuntimeModule = require(\"./ChunkPreloadTriggerRuntimeModule\");\r\n\r\n/** @typedef {import(\"../Compiler\")} Compiler */\r\n\r\nclass ChunkPrefetchPreloadPlugin {\r\n\t/**\r\n\t * @param {Compiler} compiler the compiler\r\n\t * @returns {void}\r\n\t */\r\n\tapply(compiler) {\r\n\t\tcompiler.hooks.compilation.tap(\r\n\t\t\t\"ChunkPrefetchPreloadPlugin\",\r\n\t\t\tcompilation => {\r\n\t\t\t\tcompilation.hooks.additionalChunkRuntimeRequirements.tap(\r\n\t\t\t\t\t\"ChunkPrefetchPreloadPlugin\",\r\n\t\t\t\t\t(chunk, set, { chunkGraph }) => {\r\n\t\t\t\t\t\tif (chunkGraph.getNumberOfEntryModules(chunk) === 0) return;\r\n\t\t\t\t\t\tconst startupChildChunks = chunk.getChildrenOfTypeInOrder(\r\n\t\t\t\t\t\t\tchunkGraph,\r\n\t\t\t\t\t\t\t\"prefetchOrder\"\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t\tif (startupChildChunks) {\r\n\t\t\t\t\t\t\tset.add(RuntimeGlobals.prefetchChunk);\r\n\t\t\t\t\t\t\tset.add(RuntimeGlobals.onChunksLoaded);\r\n\t\t\t\t\t\t\tcompilation.addRuntimeModule(\r\n\t\t\t\t\t\t\t\tchunk,\r\n\t\t\t\t\t\t\t\tnew ChunkPrefetchStartupRuntimeModule(startupChildChunks)\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t\tcompilation.hooks.additionalTreeRuntimeRequirements.tap(\r\n\t\t\t\t\t\"ChunkPrefetchPreloadPlugin\",\r\n\t\t\t\t\t(chunk, set, { chunkGraph }) => {\r\n\t\t\t\t\t\tconst chunkMap = chunk.getChildIdsByOrdersMap(chunkGraph, false);\r\n\r\n\t\t\t\t\t\tif (chunkMap.prefetch) {\r\n\t\t\t\t\t\t\tset.add(RuntimeGlobals.prefetchChunk);\r\n\t\t\t\t\t\t\tcompilation.addRuntimeModule(\r\n\t\t\t\t\t\t\t\tchunk,\r\n\t\t\t\t\t\t\t\tnew ChunkPrefetchTriggerRuntimeModule(chunkMap.prefetch)\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (chunkMap.preload) {\r\n\t\t\t\t\t\t\tset.add(RuntimeGlobals.preloadChunk);\r\n\t\t\t\t\t\t\tcompilation.addRuntimeModule(\r\n\t\t\t\t\t\t\t\tchunk,\r\n\t\t\t\t\t\t\t\tnew ChunkPreloadTriggerRuntimeModule(chunkMap.preload)\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t\tcompilation.hooks.runtimeRequirementInTree\r\n\t\t\t\t\t.for(RuntimeGlobals.prefetchChunk)\r\n\t\t\t\t\t.tap(\"ChunkPrefetchPreloadPlugin\", (chunk, set) => {\r\n\t\t\t\t\t\tcompilation.addRuntimeModule(\r\n\t\t\t\t\t\t\tchunk,\r\n\t\t\t\t\t\t\tnew ChunkPrefetchFunctionRuntimeModule(\r\n\t\t\t\t\t\t\t\t\"prefetch\",\r\n\t\t\t\t\t\t\t\tRuntimeGlobals.prefetchChunk,\r\n\t\t\t\t\t\t\t\tRuntimeGlobals.prefetchChunkHandlers\r\n\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t\tset.add(RuntimeGlobals.prefetchChunkHandlers);\r\n\t\t\t\t\t});\r\n\t\t\t\tcompilation.hooks.runtimeRequirementInTree\r\n\t\t\t\t\t.for(RuntimeGlobals.preloadChunk)\r\n\t\t\t\t\t.tap(\"ChunkPrefetchPreloadPlugin\", (chunk, set) => {\r\n\t\t\t\t\t\tcompilation.addRuntimeModule(\r\n\t\t\t\t\t\t\tchunk,\r\n\t\t\t\t\t\t\tnew ChunkPrefetchFunctionRuntimeModule(\r\n\t\t\t\t\t\t\t\t\"preload\",\r\n\t\t\t\t\t\t\t\tRuntimeGlobals.preloadChunk,\r\n\t\t\t\t\t\t\t\tRuntimeGlobals.preloadChunkHandlers\r\n\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t\tset.add(RuntimeGlobals.preloadChunkHandlers);\r\n\t\t\t\t\t});\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n}\r\n\r\nmodule.exports = ChunkPrefetchPreloadPlugin;\r\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ,MAAMA,cAAc,GAAGC,OAAO,CAAC,mBAAmB,CAAC;AACnD,MAAMC,kCAAkC,GAAGD,OAAO,CAAC,sCAAsC,CAAC;AAC1F,MAAME,iCAAiC,GAAGF,OAAO,CAAC,qCAAqC,CAAC;AACxF,MAAMG,iCAAiC,GAAGH,OAAO,CAAC,qCAAqC,CAAC;AACxF,MAAMI,gCAAgC,GAAGJ,OAAO,CAAC,oCAAoC,CAAC;;AAEtF;;AAEA,MAAMK,0BAA0B,CAAC;EAChC;AACD;AACA;AACA;EACCC,KAAK,CAACC,QAAQ,EAAE;IACfA,QAAQ,CAACC,KAAK,CAACC,WAAW,CAACC,GAAG,CAC7B,4BAA4B,EAC5BD,WAAW,IAAI;MACdA,WAAW,CAACD,KAAK,CAACG,kCAAkC,CAACD,GAAG,CACvD,4BAA4B,EAC5B,CAACE,KAAK,EAAEC,GAAG,WAAqB;QAAA,IAAnB;UAAEC;QAAW,CAAC;QAC1B,IAAIA,UAAU,CAACC,uBAAuB,CAACH,KAAK,CAAC,KAAK,CAAC,EAAE;QACrD,MAAMI,kBAAkB,GAAGJ,KAAK,CAACK,wBAAwB,CACxDH,UAAU,EACV,eAAe,CACf;QACD,IAAIE,kBAAkB,EAAE;UACvBH,GAAG,CAACK,GAAG,CAACnB,cAAc,CAACoB,aAAa,CAAC;UACrCN,GAAG,CAACK,GAAG,CAACnB,cAAc,CAACqB,cAAc,CAAC;UACtCX,WAAW,CAACY,gBAAgB,CAC3BT,KAAK,EACL,IAAIV,iCAAiC,CAACc,kBAAkB,CAAC,CACzD;QACF;MACD,CAAC,CACD;MACDP,WAAW,CAACD,KAAK,CAACc,iCAAiC,CAACZ,GAAG,CACtD,4BAA4B,EAC5B,CAACE,KAAK,EAAEC,GAAG,YAAqB;QAAA,IAAnB;UAAEC;QAAW,CAAC;QAC1B,MAAMS,QAAQ,GAAGX,KAAK,CAACY,sBAAsB,CAACV,UAAU,EAAE,KAAK,CAAC;QAEhE,IAAIS,QAAQ,CAACE,QAAQ,EAAE;UACtBZ,GAAG,CAACK,GAAG,CAACnB,cAAc,CAACoB,aAAa,CAAC;UACrCV,WAAW,CAACY,gBAAgB,CAC3BT,KAAK,EACL,IAAIT,iCAAiC,CAACoB,QAAQ,CAACE,QAAQ,CAAC,CACxD;QACF;QACA,IAAIF,QAAQ,CAACG,OAAO,EAAE;UACrBb,GAAG,CAACK,GAAG,CAACnB,cAAc,CAAC4B,YAAY,CAAC;UACpClB,WAAW,CAACY,gBAAgB,CAC3BT,KAAK,EACL,IAAIR,gCAAgC,CAACmB,QAAQ,CAACG,OAAO,CAAC,CACtD;QACF;MACD,CAAC,CACD;MACDjB,WAAW,CAACD,KAAK,CAACoB,wBAAwB,CACxCC,GAAG,CAAC9B,cAAc,CAACoB,aAAa,CAAC,CACjCT,GAAG,CAAC,4BAA4B,EAAE,CAACE,KAAK,EAAEC,GAAG,KAAK;QAClDJ,WAAW,CAACY,gBAAgB,CAC3BT,KAAK,EACL,IAAIX,kCAAkC,CACrC,UAAU,EACVF,cAAc,CAACoB,aAAa,EAC5BpB,cAAc,CAAC+B,qBAAqB,CACpC,CACD;QACDjB,GAAG,CAACK,GAAG,CAACnB,cAAc,CAAC+B,qBAAqB,CAAC;MAC9C,CAAC,CAAC;MACHrB,WAAW,CAACD,KAAK,CAACoB,wBAAwB,CACxCC,GAAG,CAAC9B,cAAc,CAAC4B,YAAY,CAAC,CAChCjB,GAAG,CAAC,4BAA4B,EAAE,CAACE,KAAK,EAAEC,GAAG,KAAK;QAClDJ,WAAW,CAACY,gBAAgB,CAC3BT,KAAK,EACL,IAAIX,kCAAkC,CACrC,SAAS,EACTF,cAAc,CAAC4B,YAAY,EAC3B5B,cAAc,CAACgC,oBAAoB,CACnC,CACD;QACDlB,GAAG,CAACK,GAAG,CAACnB,cAAc,CAACgC,oBAAoB,CAAC;MAC7C,CAAC,CAAC;IACJ,CAAC,CACD;EACF;AACD;AAEAC,MAAM,CAACC,OAAO,GAAG5B,0BAA0B"},"metadata":{},"sourceType":"script","externalDependencies":[]}