{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CountOperation = void 0;\nconst command_1 = require(\"./command\");\nconst operation_1 = require(\"./operation\");\n/** @internal */\nclass CountOperation extends command_1.CommandOperation {\n  constructor(namespace, filter, options) {\n    super({\n      s: {\n        namespace: namespace\n      }\n    }, options);\n    this.options = options;\n    this.collectionName = namespace.collection;\n    this.query = filter;\n  }\n  execute(server, session, callback) {\n    const options = this.options;\n    const cmd = {\n      count: this.collectionName,\n      query: this.query\n    };\n    if (typeof options.limit === 'number') {\n      cmd.limit = options.limit;\n    }\n    if (typeof options.skip === 'number') {\n      cmd.skip = options.skip;\n    }\n    if (options.hint != null) {\n      cmd.hint = options.hint;\n    }\n    if (typeof options.maxTimeMS === 'number') {\n      cmd.maxTimeMS = options.maxTimeMS;\n    }\n    super.executeCommand(server, session, cmd, (err, result) => {\n      callback(err, result ? result.n : 0);\n    });\n  }\n}\nexports.CountOperation = CountOperation;\n(0, operation_1.defineAspects)(CountOperation, [operation_1.Aspect.READ_OPERATION, operation_1.Aspect.RETRYABLE]);","map":{"version":3,"mappings":";;;;;;AAKA;AACA;AAcA;AACA,MAAaA,cAAe,SAAQC,0BAAwB;EAK1DC,YAAYC,SAA2B,EAAEC,MAAgB,EAAEC,OAAqB;IAC9E,KAAK,CAAC;MAAEC,CAAC,EAAE;QAAEH,SAAS,EAAEA;MAAS;IAAE,CAA2B,EAAEE,OAAO,CAAC;IAExE,IAAI,CAACA,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACE,cAAc,GAAGJ,SAAS,CAACK,UAAU;IAC1C,IAAI,CAACC,KAAK,GAAGL,MAAM;EACrB;EAESM,OAAO,CACdC,MAAc,EACdC,OAAkC,EAClCC,QAA0B;IAE1B,MAAMR,OAAO,GAAG,IAAI,CAACA,OAAO;IAC5B,MAAMS,GAAG,GAAa;MACpBC,KAAK,EAAE,IAAI,CAACR,cAAc;MAC1BE,KAAK,EAAE,IAAI,CAACA;KACb;IAED,IAAI,OAAOJ,OAAO,CAACW,KAAK,KAAK,QAAQ,EAAE;MACrCF,GAAG,CAACE,KAAK,GAAGX,OAAO,CAACW,KAAK;;IAG3B,IAAI,OAAOX,OAAO,CAACY,IAAI,KAAK,QAAQ,EAAE;MACpCH,GAAG,CAACG,IAAI,GAAGZ,OAAO,CAACY,IAAI;;IAGzB,IAAIZ,OAAO,CAACa,IAAI,IAAI,IAAI,EAAE;MACxBJ,GAAG,CAACI,IAAI,GAAGb,OAAO,CAACa,IAAI;;IAGzB,IAAI,OAAOb,OAAO,CAACc,SAAS,KAAK,QAAQ,EAAE;MACzCL,GAAG,CAACK,SAAS,GAAGd,OAAO,CAACc,SAAS;;IAGnC,KAAK,CAACC,cAAc,CAACT,MAAM,EAAEC,OAAO,EAAEE,GAAG,EAAE,CAACO,GAAG,EAAEC,MAAM,KAAI;MACzDT,QAAQ,CAACQ,GAAG,EAAEC,MAAM,GAAGA,MAAM,CAACC,CAAC,GAAG,CAAC,CAAC;IACtC,CAAC,CAAC;EACJ;;AA3CFC;AA8CA,6BAAa,EAACxB,cAAc,EAAE,CAACyB,kBAAM,CAACC,cAAc,EAAED,kBAAM,CAACE,SAAS,CAAC,CAAC","names":["CountOperation","command_1","constructor","namespace","filter","options","s","collectionName","collection","query","execute","server","session","callback","cmd","count","limit","skip","hint","maxTimeMS","executeCommand","err","result","n","exports","operation_1","READ_OPERATION","RETRYABLE"],"sources":["C:\\Users\\91930\\Desktop\\Github projects\\Pharmacy Demo\\back-end\\node_modules\\mongodb\\src\\operations\\count.ts"],"sourcesContent":["import type { Document } from '../bson';\r\nimport type { Collection } from '../collection';\r\nimport type { Server } from '../sdam/server';\r\nimport type { ClientSession } from '../sessions';\r\nimport type { Callback, MongoDBNamespace } from '../utils';\r\nimport { CommandOperation, CommandOperationOptions } from './command';\r\nimport { Aspect, defineAspects } from './operation';\r\n\r\n/** @public */\r\nexport interface CountOptions extends CommandOperationOptions {\r\n  /** The number of documents to skip. */\r\n  skip?: number;\r\n  /** The maximum amounts to count before aborting. */\r\n  limit?: number;\r\n  /** Number of milliseconds to wait before aborting the query. */\r\n  maxTimeMS?: number;\r\n  /** An index name hint for the query. */\r\n  hint?: string | Document;\r\n}\r\n\r\n/** @internal */\r\nexport class CountOperation extends CommandOperation<number> {\r\n  override options: CountOptions;\r\n  collectionName?: string;\r\n  query: Document;\r\n\r\n  constructor(namespace: MongoDBNamespace, filter: Document, options: CountOptions) {\r\n    super({ s: { namespace: namespace } } as unknown as Collection, options);\r\n\r\n    this.options = options;\r\n    this.collectionName = namespace.collection;\r\n    this.query = filter;\r\n  }\r\n\r\n  override execute(\r\n    server: Server,\r\n    session: ClientSession | undefined,\r\n    callback: Callback<number>\r\n  ): void {\r\n    const options = this.options;\r\n    const cmd: Document = {\r\n      count: this.collectionName,\r\n      query: this.query\r\n    };\r\n\r\n    if (typeof options.limit === 'number') {\r\n      cmd.limit = options.limit;\r\n    }\r\n\r\n    if (typeof options.skip === 'number') {\r\n      cmd.skip = options.skip;\r\n    }\r\n\r\n    if (options.hint != null) {\r\n      cmd.hint = options.hint;\r\n    }\r\n\r\n    if (typeof options.maxTimeMS === 'number') {\r\n      cmd.maxTimeMS = options.maxTimeMS;\r\n    }\r\n\r\n    super.executeCommand(server, session, cmd, (err, result) => {\r\n      callback(err, result ? result.n : 0);\r\n    });\r\n  }\r\n}\r\n\r\ndefineAspects(CountOperation, [Aspect.READ_OPERATION, Aspect.RETRYABLE]);\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}