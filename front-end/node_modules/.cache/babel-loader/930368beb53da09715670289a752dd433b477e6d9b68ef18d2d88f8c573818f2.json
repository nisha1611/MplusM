{"ast":null,"code":"/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Ivan Kopeykin @vankop\r\n*/\n\n\"use strict\";\n\nconst {\n  pathToFileURL\n} = require(\"url\");\nconst BasicEvaluatedExpression = require(\"../javascript/BasicEvaluatedExpression\");\nconst {\n  approve\n} = require(\"../javascript/JavascriptParserHelpers\");\nconst InnerGraph = require(\"../optimize/InnerGraph\");\nconst URLDependency = require(\"./URLDependency\");\n\n/** @typedef {import(\"estree\").NewExpression} NewExpressionNode */\n/** @typedef {import(\"../Compiler\")} Compiler */\n/** @typedef {import(\"../NormalModule\")} NormalModule */\n/** @typedef {import(\"../javascript/JavascriptParser\")} JavascriptParser */\n\nclass URLPlugin {\n  /**\r\n   * @param {Compiler} compiler compiler\r\n   */\n  apply(compiler) {\n    compiler.hooks.compilation.tap(\"URLPlugin\", (compilation, _ref) => {\n      let {\n        normalModuleFactory\n      } = _ref;\n      compilation.dependencyFactories.set(URLDependency, normalModuleFactory);\n      compilation.dependencyTemplates.set(URLDependency, new URLDependency.Template());\n\n      /**\r\n       * @param {NormalModule} module module\r\n       * @returns {URL} file url\r\n       */\n      const getUrl = module => {\n        return pathToFileURL(module.resource);\n      };\n      /**\r\n       * @param {JavascriptParser} parser parser\r\n       * @param {object} parserOptions options\r\n       */\n      const parserCallback = (parser, parserOptions) => {\n        if (parserOptions.url === false) return;\n        const relative = parserOptions.url === \"relative\";\n\n        /**\r\n         * @param {NewExpressionNode} expr expression\r\n         * @returns {undefined | string} request\r\n         */\n        const getUrlRequest = expr => {\n          if (expr.arguments.length !== 2) return;\n          const [arg1, arg2] = expr.arguments;\n          if (arg2.type !== \"MemberExpression\" || arg1.type === \"SpreadElement\") return;\n          const chain = parser.extractMemberExpressionChain(arg2);\n          if (chain.members.length !== 1 || chain.object.type !== \"MetaProperty\" || chain.object.meta.name !== \"import\" || chain.object.property.name !== \"meta\" || chain.members[0] !== \"url\") return;\n          const request = parser.evaluateExpression(arg1).asString();\n          return request;\n        };\n        parser.hooks.canRename.for(\"URL\").tap(\"URLPlugin\", approve);\n        parser.hooks.evaluateNewExpression.for(\"URL\").tap(\"URLPlugin\", expr => {\n          const request = getUrlRequest(expr);\n          if (!request) return;\n          const url = new URL(request, getUrl(parser.state.module));\n          return new BasicEvaluatedExpression().setString(url.toString()).setRange(expr.range);\n        });\n        parser.hooks.new.for(\"URL\").tap(\"URLPlugin\", _expr => {\n          const expr = /** @type {NewExpressionNode} */_expr;\n          const request = getUrlRequest(expr);\n          if (!request) return;\n          const [arg1, arg2] = expr.arguments;\n          const dep = new URLDependency(request, [arg1.range[0], arg2.range[1]], expr.range, relative);\n          dep.loc = expr.loc;\n          parser.state.current.addDependency(dep);\n          InnerGraph.onUsage(parser.state, e => dep.usedByExports = e);\n          return true;\n        });\n        parser.hooks.isPure.for(\"NewExpression\").tap(\"URLPlugin\", _expr => {\n          const expr = /** @type {NewExpressionNode} */_expr;\n          const {\n            callee\n          } = expr;\n          if (callee.type !== \"Identifier\") return;\n          const calleeInfo = parser.getFreeInfoFromVariable(callee.name);\n          if (!calleeInfo || calleeInfo.name !== \"URL\") return;\n          const request = getUrlRequest(expr);\n          if (request) return true;\n        });\n      };\n      normalModuleFactory.hooks.parser.for(\"javascript/auto\").tap(\"URLPlugin\", parserCallback);\n      normalModuleFactory.hooks.parser.for(\"javascript/esm\").tap(\"URLPlugin\", parserCallback);\n    });\n  }\n}\nmodule.exports = URLPlugin;","map":{"version":3,"names":["pathToFileURL","require","BasicEvaluatedExpression","approve","InnerGraph","URLDependency","URLPlugin","apply","compiler","hooks","compilation","tap","normalModuleFactory","dependencyFactories","set","dependencyTemplates","Template","getUrl","module","resource","parserCallback","parser","parserOptions","url","relative","getUrlRequest","expr","arguments","length","arg1","arg2","type","chain","extractMemberExpressionChain","members","object","meta","name","property","request","evaluateExpression","asString","canRename","for","evaluateNewExpression","URL","state","setString","toString","setRange","range","new","_expr","dep","loc","current","addDependency","onUsage","e","usedByExports","isPure","callee","calleeInfo","getFreeInfoFromVariable","exports"],"sources":["C:/Users/91930/Desktop/Github projects/Pharmacy Demo/front-end/node_modules/webpack/lib/dependencies/URLPlugin.js"],"sourcesContent":["/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Ivan Kopeykin @vankop\r\n*/\r\n\r\n\"use strict\";\r\n\r\nconst { pathToFileURL } = require(\"url\");\r\nconst BasicEvaluatedExpression = require(\"../javascript/BasicEvaluatedExpression\");\r\nconst { approve } = require(\"../javascript/JavascriptParserHelpers\");\r\nconst InnerGraph = require(\"../optimize/InnerGraph\");\r\nconst URLDependency = require(\"./URLDependency\");\r\n\r\n/** @typedef {import(\"estree\").NewExpression} NewExpressionNode */\r\n/** @typedef {import(\"../Compiler\")} Compiler */\r\n/** @typedef {import(\"../NormalModule\")} NormalModule */\r\n/** @typedef {import(\"../javascript/JavascriptParser\")} JavascriptParser */\r\n\r\nclass URLPlugin {\r\n\t/**\r\n\t * @param {Compiler} compiler compiler\r\n\t */\r\n\tapply(compiler) {\r\n\t\tcompiler.hooks.compilation.tap(\r\n\t\t\t\"URLPlugin\",\r\n\t\t\t(compilation, { normalModuleFactory }) => {\r\n\t\t\t\tcompilation.dependencyFactories.set(URLDependency, normalModuleFactory);\r\n\t\t\t\tcompilation.dependencyTemplates.set(\r\n\t\t\t\t\tURLDependency,\r\n\t\t\t\t\tnew URLDependency.Template()\r\n\t\t\t\t);\r\n\r\n\t\t\t\t/**\r\n\t\t\t\t * @param {NormalModule} module module\r\n\t\t\t\t * @returns {URL} file url\r\n\t\t\t\t */\r\n\t\t\t\tconst getUrl = module => {\r\n\t\t\t\t\treturn pathToFileURL(module.resource);\r\n\t\t\t\t};\r\n\t\t\t\t/**\r\n\t\t\t\t * @param {JavascriptParser} parser parser\r\n\t\t\t\t * @param {object} parserOptions options\r\n\t\t\t\t */\r\n\t\t\t\tconst parserCallback = (parser, parserOptions) => {\r\n\t\t\t\t\tif (parserOptions.url === false) return;\r\n\t\t\t\t\tconst relative = parserOptions.url === \"relative\";\r\n\r\n\t\t\t\t\t/**\r\n\t\t\t\t\t * @param {NewExpressionNode} expr expression\r\n\t\t\t\t\t * @returns {undefined | string} request\r\n\t\t\t\t\t */\r\n\t\t\t\t\tconst getUrlRequest = expr => {\r\n\t\t\t\t\t\tif (expr.arguments.length !== 2) return;\r\n\r\n\t\t\t\t\t\tconst [arg1, arg2] = expr.arguments;\r\n\r\n\t\t\t\t\t\tif (\r\n\t\t\t\t\t\t\targ2.type !== \"MemberExpression\" ||\r\n\t\t\t\t\t\t\targ1.type === \"SpreadElement\"\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\treturn;\r\n\r\n\t\t\t\t\t\tconst chain = parser.extractMemberExpressionChain(arg2);\r\n\r\n\t\t\t\t\t\tif (\r\n\t\t\t\t\t\t\tchain.members.length !== 1 ||\r\n\t\t\t\t\t\t\tchain.object.type !== \"MetaProperty\" ||\r\n\t\t\t\t\t\t\tchain.object.meta.name !== \"import\" ||\r\n\t\t\t\t\t\t\tchain.object.property.name !== \"meta\" ||\r\n\t\t\t\t\t\t\tchain.members[0] !== \"url\"\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\treturn;\r\n\r\n\t\t\t\t\t\tconst request = parser.evaluateExpression(arg1).asString();\r\n\r\n\t\t\t\t\t\treturn request;\r\n\t\t\t\t\t};\r\n\r\n\t\t\t\t\tparser.hooks.canRename.for(\"URL\").tap(\"URLPlugin\", approve);\r\n\t\t\t\t\tparser.hooks.evaluateNewExpression\r\n\t\t\t\t\t\t.for(\"URL\")\r\n\t\t\t\t\t\t.tap(\"URLPlugin\", expr => {\r\n\t\t\t\t\t\t\tconst request = getUrlRequest(expr);\r\n\t\t\t\t\t\t\tif (!request) return;\r\n\t\t\t\t\t\t\tconst url = new URL(request, getUrl(parser.state.module));\r\n\r\n\t\t\t\t\t\t\treturn new BasicEvaluatedExpression()\r\n\t\t\t\t\t\t\t\t.setString(url.toString())\r\n\t\t\t\t\t\t\t\t.setRange(expr.range);\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\tparser.hooks.new.for(\"URL\").tap(\"URLPlugin\", _expr => {\r\n\t\t\t\t\t\tconst expr = /** @type {NewExpressionNode} */ (_expr);\r\n\r\n\t\t\t\t\t\tconst request = getUrlRequest(expr);\r\n\r\n\t\t\t\t\t\tif (!request) return;\r\n\r\n\t\t\t\t\t\tconst [arg1, arg2] = expr.arguments;\r\n\t\t\t\t\t\tconst dep = new URLDependency(\r\n\t\t\t\t\t\t\trequest,\r\n\t\t\t\t\t\t\t[arg1.range[0], arg2.range[1]],\r\n\t\t\t\t\t\t\texpr.range,\r\n\t\t\t\t\t\t\trelative\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t\tdep.loc = expr.loc;\r\n\t\t\t\t\t\tparser.state.current.addDependency(dep);\r\n\t\t\t\t\t\tInnerGraph.onUsage(parser.state, e => (dep.usedByExports = e));\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t});\r\n\t\t\t\t\tparser.hooks.isPure.for(\"NewExpression\").tap(\"URLPlugin\", _expr => {\r\n\t\t\t\t\t\tconst expr = /** @type {NewExpressionNode} */ (_expr);\r\n\t\t\t\t\t\tconst { callee } = expr;\r\n\t\t\t\t\t\tif (callee.type !== \"Identifier\") return;\r\n\t\t\t\t\t\tconst calleeInfo = parser.getFreeInfoFromVariable(callee.name);\r\n\t\t\t\t\t\tif (!calleeInfo || calleeInfo.name !== \"URL\") return;\r\n\r\n\t\t\t\t\t\tconst request = getUrlRequest(expr);\r\n\r\n\t\t\t\t\t\tif (request) return true;\r\n\t\t\t\t\t});\r\n\t\t\t\t};\r\n\r\n\t\t\t\tnormalModuleFactory.hooks.parser\r\n\t\t\t\t\t.for(\"javascript/auto\")\r\n\t\t\t\t\t.tap(\"URLPlugin\", parserCallback);\r\n\r\n\t\t\t\tnormalModuleFactory.hooks.parser\r\n\t\t\t\t\t.for(\"javascript/esm\")\r\n\t\t\t\t\t.tap(\"URLPlugin\", parserCallback);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n}\r\n\r\nmodule.exports = URLPlugin;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}