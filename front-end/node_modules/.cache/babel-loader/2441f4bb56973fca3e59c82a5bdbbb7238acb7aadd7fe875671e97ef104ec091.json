{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.fromSSO = void 0;\nconst property_provider_1 = require(\"@aws-sdk/property-provider\");\nconst shared_ini_file_loader_1 = require(\"@aws-sdk/shared-ini-file-loader\");\nconst isSsoProfile_1 = require(\"./isSsoProfile\");\nconst resolveSSOCredentials_1 = require(\"./resolveSSOCredentials\");\nconst validateSsoProfile_1 = require(\"./validateSsoProfile\");\nconst fromSSO = function () {\n  let init = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return async () => {\n    const {\n      ssoStartUrl,\n      ssoAccountId,\n      ssoRegion,\n      ssoRoleName,\n      ssoClient,\n      ssoSession\n    } = init;\n    const profileName = (0, shared_ini_file_loader_1.getProfileName)(init);\n    if (!ssoStartUrl && !ssoAccountId && !ssoRegion && !ssoRoleName && !ssoSession) {\n      const profiles = await (0, shared_ini_file_loader_1.parseKnownFiles)(init);\n      const profile = profiles[profileName];\n      if (!profile) {\n        throw new property_provider_1.CredentialsProviderError(`Profile ${profileName} was not found.`);\n      }\n      if (!(0, isSsoProfile_1.isSsoProfile)(profile)) {\n        throw new property_provider_1.CredentialsProviderError(`Profile ${profileName} is not configured with SSO credentials.`);\n      }\n      if (profile === null || profile === void 0 ? void 0 : profile.sso_session) {\n        const ssoSessions = await (0, shared_ini_file_loader_1.loadSsoSessionData)(init);\n        const session = ssoSessions[profile.sso_session];\n        const conflictMsg = ` configurations in profile ${profileName} and sso-session ${profile.sso_session}`;\n        if (ssoRegion && ssoRegion !== session.sso_region) {\n          throw new property_provider_1.CredentialsProviderError(`Conflicting SSO region` + conflictMsg, false);\n        }\n        if (ssoStartUrl && ssoStartUrl !== session.sso_start_url) {\n          throw new property_provider_1.CredentialsProviderError(`Conflicting SSO start_url` + conflictMsg, false);\n        }\n        profile.sso_region = session.sso_region;\n        profile.sso_start_url = session.sso_start_url;\n      }\n      const {\n        sso_start_url,\n        sso_account_id,\n        sso_region,\n        sso_role_name,\n        sso_session\n      } = (0, validateSsoProfile_1.validateSsoProfile)(profile);\n      return (0, resolveSSOCredentials_1.resolveSSOCredentials)({\n        ssoStartUrl: sso_start_url,\n        ssoSession: sso_session,\n        ssoAccountId: sso_account_id,\n        ssoRegion: sso_region,\n        ssoRoleName: sso_role_name,\n        ssoClient: ssoClient,\n        profile: profileName\n      });\n    } else if (!ssoStartUrl || !ssoAccountId || !ssoRegion || !ssoRoleName) {\n      throw new property_provider_1.CredentialsProviderError(\"Incomplete configuration. The fromSSO() argument hash must include \" + '\"ssoStartUrl\", \"ssoAccountId\", \"ssoRegion\", \"ssoRoleName\"');\n    } else {\n      return (0, resolveSSOCredentials_1.resolveSSOCredentials)({\n        ssoStartUrl,\n        ssoSession,\n        ssoAccountId,\n        ssoRegion,\n        ssoRoleName,\n        ssoClient,\n        profile: profileName\n      });\n    }\n  };\n};\nexports.fromSSO = fromSSO;","map":{"version":3,"names":["Object","defineProperty","exports","value","fromSSO","property_provider_1","require","shared_ini_file_loader_1","isSsoProfile_1","resolveSSOCredentials_1","validateSsoProfile_1","init","ssoStartUrl","ssoAccountId","ssoRegion","ssoRoleName","ssoClient","ssoSession","profileName","getProfileName","profiles","parseKnownFiles","profile","CredentialsProviderError","isSsoProfile","sso_session","ssoSessions","loadSsoSessionData","session","conflictMsg","sso_region","sso_start_url","sso_account_id","sso_role_name","validateSsoProfile","resolveSSOCredentials"],"sources":["C:/Users/91930/Desktop/Github projects/Pharmacy Demo/back-end/node_modules/@aws-sdk/credential-provider-sso/dist-cjs/fromSSO.js"],"sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.fromSSO = void 0;\r\nconst property_provider_1 = require(\"@aws-sdk/property-provider\");\r\nconst shared_ini_file_loader_1 = require(\"@aws-sdk/shared-ini-file-loader\");\r\nconst isSsoProfile_1 = require(\"./isSsoProfile\");\r\nconst resolveSSOCredentials_1 = require(\"./resolveSSOCredentials\");\r\nconst validateSsoProfile_1 = require(\"./validateSsoProfile\");\r\nconst fromSSO = (init = {}) => async () => {\r\n    const { ssoStartUrl, ssoAccountId, ssoRegion, ssoRoleName, ssoClient, ssoSession } = init;\r\n    const profileName = (0, shared_ini_file_loader_1.getProfileName)(init);\r\n    if (!ssoStartUrl && !ssoAccountId && !ssoRegion && !ssoRoleName && !ssoSession) {\r\n        const profiles = await (0, shared_ini_file_loader_1.parseKnownFiles)(init);\r\n        const profile = profiles[profileName];\r\n        if (!profile) {\r\n            throw new property_provider_1.CredentialsProviderError(`Profile ${profileName} was not found.`);\r\n        }\r\n        if (!(0, isSsoProfile_1.isSsoProfile)(profile)) {\r\n            throw new property_provider_1.CredentialsProviderError(`Profile ${profileName} is not configured with SSO credentials.`);\r\n        }\r\n        if (profile === null || profile === void 0 ? void 0 : profile.sso_session) {\r\n            const ssoSessions = await (0, shared_ini_file_loader_1.loadSsoSessionData)(init);\r\n            const session = ssoSessions[profile.sso_session];\r\n            const conflictMsg = ` configurations in profile ${profileName} and sso-session ${profile.sso_session}`;\r\n            if (ssoRegion && ssoRegion !== session.sso_region) {\r\n                throw new property_provider_1.CredentialsProviderError(`Conflicting SSO region` + conflictMsg, false);\r\n            }\r\n            if (ssoStartUrl && ssoStartUrl !== session.sso_start_url) {\r\n                throw new property_provider_1.CredentialsProviderError(`Conflicting SSO start_url` + conflictMsg, false);\r\n            }\r\n            profile.sso_region = session.sso_region;\r\n            profile.sso_start_url = session.sso_start_url;\r\n        }\r\n        const { sso_start_url, sso_account_id, sso_region, sso_role_name, sso_session } = (0, validateSsoProfile_1.validateSsoProfile)(profile);\r\n        return (0, resolveSSOCredentials_1.resolveSSOCredentials)({\r\n            ssoStartUrl: sso_start_url,\r\n            ssoSession: sso_session,\r\n            ssoAccountId: sso_account_id,\r\n            ssoRegion: sso_region,\r\n            ssoRoleName: sso_role_name,\r\n            ssoClient: ssoClient,\r\n            profile: profileName,\r\n        });\r\n    }\r\n    else if (!ssoStartUrl || !ssoAccountId || !ssoRegion || !ssoRoleName) {\r\n        throw new property_provider_1.CredentialsProviderError(\"Incomplete configuration. The fromSSO() argument hash must include \" +\r\n            '\"ssoStartUrl\", \"ssoAccountId\", \"ssoRegion\", \"ssoRoleName\"');\r\n    }\r\n    else {\r\n        return (0, resolveSSOCredentials_1.resolveSSOCredentials)({\r\n            ssoStartUrl,\r\n            ssoSession,\r\n            ssoAccountId,\r\n            ssoRegion,\r\n            ssoRoleName,\r\n            ssoClient,\r\n            profile: profileName,\r\n        });\r\n    }\r\n};\r\nexports.fromSSO = fromSSO;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}