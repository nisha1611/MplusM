{"ast":null,"code":"'use strict';\n\nmodule.exports = function applyPlugins(schema, plugins, options, cacheKey) {\n  if (schema[cacheKey]) {\n    return;\n  }\n  schema[cacheKey] = true;\n  if (!options || !options.skipTopLevel) {\n    let pluginTags = null;\n    for (const plugin of plugins) {\n      const tags = plugin[1] == null ? null : plugin[1].tags;\n      if (!Array.isArray(tags)) {\n        schema.plugin(plugin[0], plugin[1]);\n        continue;\n      }\n      pluginTags = pluginTags || new Set(schema.options.pluginTags || []);\n      if (!tags.find(tag => pluginTags.has(tag))) {\n        continue;\n      }\n      schema.plugin(plugin[0], plugin[1]);\n    }\n  }\n  options = Object.assign({}, options);\n  delete options.skipTopLevel;\n  if (options.applyPluginsToChildSchemas !== false) {\n    for (const path of Object.keys(schema.paths)) {\n      const type = schema.paths[path];\n      if (type.schema != null) {\n        applyPlugins(type.schema, plugins, options, cacheKey);\n\n        // Recompile schema because plugins may have changed it, see gh-7572\n        type.caster.prototype.$__setSchema(type.schema);\n      }\n    }\n  }\n  const discriminators = schema.discriminators;\n  if (discriminators == null) {\n    return;\n  }\n  const applyPluginsToDiscriminators = options.applyPluginsToDiscriminators;\n  const keys = Object.keys(discriminators);\n  for (const discriminatorKey of keys) {\n    const discriminatorSchema = discriminators[discriminatorKey];\n    applyPlugins(discriminatorSchema, plugins, {\n      skipTopLevel: !applyPluginsToDiscriminators\n    }, cacheKey);\n  }\n};","map":{"version":3,"names":["module","exports","applyPlugins","schema","plugins","options","cacheKey","skipTopLevel","pluginTags","plugin","tags","Array","isArray","Set","find","tag","has","Object","assign","applyPluginsToChildSchemas","path","keys","paths","type","caster","prototype","$__setSchema","discriminators","applyPluginsToDiscriminators","discriminatorKey","discriminatorSchema"],"sources":["C:/Users/91930/Desktop/Github projects/Pharmacy Demo/back-end/node_modules/mongoose/lib/helpers/schema/applyPlugins.js"],"sourcesContent":["'use strict';\r\n\r\nmodule.exports = function applyPlugins(schema, plugins, options, cacheKey) {\r\n  if (schema[cacheKey]) {\r\n    return;\r\n  }\r\n  schema[cacheKey] = true;\r\n\r\n  if (!options || !options.skipTopLevel) {\r\n    let pluginTags = null;\r\n    for (const plugin of plugins) {\r\n      const tags = plugin[1] == null ? null : plugin[1].tags;\r\n      if (!Array.isArray(tags)) {\r\n        schema.plugin(plugin[0], plugin[1]);\r\n        continue;\r\n      }\r\n\r\n      pluginTags = pluginTags || new Set(schema.options.pluginTags || []);\r\n      if (!tags.find(tag => pluginTags.has(tag))) {\r\n        continue;\r\n      }\r\n      schema.plugin(plugin[0], plugin[1]);\r\n    }\r\n  }\r\n\r\n  options = Object.assign({}, options);\r\n  delete options.skipTopLevel;\r\n\r\n  if (options.applyPluginsToChildSchemas !== false) {\r\n    for (const path of Object.keys(schema.paths)) {\r\n      const type = schema.paths[path];\r\n      if (type.schema != null) {\r\n        applyPlugins(type.schema, plugins, options, cacheKey);\r\n\r\n        // Recompile schema because plugins may have changed it, see gh-7572\r\n        type.caster.prototype.$__setSchema(type.schema);\r\n      }\r\n    }\r\n  }\r\n\r\n  const discriminators = schema.discriminators;\r\n  if (discriminators == null) {\r\n    return;\r\n  }\r\n\r\n  const applyPluginsToDiscriminators = options.applyPluginsToDiscriminators;\r\n\r\n  const keys = Object.keys(discriminators);\r\n  for (const discriminatorKey of keys) {\r\n    const discriminatorSchema = discriminators[discriminatorKey];\r\n\r\n    applyPlugins(discriminatorSchema, plugins,\r\n      { skipTopLevel: !applyPluginsToDiscriminators }, cacheKey);\r\n  }\r\n};\r\n"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,OAAO,GAAG,SAASC,YAAY,CAACC,MAAM,EAAEC,OAAO,EAAEC,OAAO,EAAEC,QAAQ,EAAE;EACzE,IAAIH,MAAM,CAACG,QAAQ,CAAC,EAAE;IACpB;EACF;EACAH,MAAM,CAACG,QAAQ,CAAC,GAAG,IAAI;EAEvB,IAAI,CAACD,OAAO,IAAI,CAACA,OAAO,CAACE,YAAY,EAAE;IACrC,IAAIC,UAAU,GAAG,IAAI;IACrB,KAAK,MAAMC,MAAM,IAAIL,OAAO,EAAE;MAC5B,MAAMM,IAAI,GAAGD,MAAM,CAAC,CAAC,CAAC,IAAI,IAAI,GAAG,IAAI,GAAGA,MAAM,CAAC,CAAC,CAAC,CAACC,IAAI;MACtD,IAAI,CAACC,KAAK,CAACC,OAAO,CAACF,IAAI,CAAC,EAAE;QACxBP,MAAM,CAACM,MAAM,CAACA,MAAM,CAAC,CAAC,CAAC,EAAEA,MAAM,CAAC,CAAC,CAAC,CAAC;QACnC;MACF;MAEAD,UAAU,GAAGA,UAAU,IAAI,IAAIK,GAAG,CAACV,MAAM,CAACE,OAAO,CAACG,UAAU,IAAI,EAAE,CAAC;MACnE,IAAI,CAACE,IAAI,CAACI,IAAI,CAACC,GAAG,IAAIP,UAAU,CAACQ,GAAG,CAACD,GAAG,CAAC,CAAC,EAAE;QAC1C;MACF;MACAZ,MAAM,CAACM,MAAM,CAACA,MAAM,CAAC,CAAC,CAAC,EAAEA,MAAM,CAAC,CAAC,CAAC,CAAC;IACrC;EACF;EAEAJ,OAAO,GAAGY,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEb,OAAO,CAAC;EACpC,OAAOA,OAAO,CAACE,YAAY;EAE3B,IAAIF,OAAO,CAACc,0BAA0B,KAAK,KAAK,EAAE;IAChD,KAAK,MAAMC,IAAI,IAAIH,MAAM,CAACI,IAAI,CAAClB,MAAM,CAACmB,KAAK,CAAC,EAAE;MAC5C,MAAMC,IAAI,GAAGpB,MAAM,CAACmB,KAAK,CAACF,IAAI,CAAC;MAC/B,IAAIG,IAAI,CAACpB,MAAM,IAAI,IAAI,EAAE;QACvBD,YAAY,CAACqB,IAAI,CAACpB,MAAM,EAAEC,OAAO,EAAEC,OAAO,EAAEC,QAAQ,CAAC;;QAErD;QACAiB,IAAI,CAACC,MAAM,CAACC,SAAS,CAACC,YAAY,CAACH,IAAI,CAACpB,MAAM,CAAC;MACjD;IACF;EACF;EAEA,MAAMwB,cAAc,GAAGxB,MAAM,CAACwB,cAAc;EAC5C,IAAIA,cAAc,IAAI,IAAI,EAAE;IAC1B;EACF;EAEA,MAAMC,4BAA4B,GAAGvB,OAAO,CAACuB,4BAA4B;EAEzE,MAAMP,IAAI,GAAGJ,MAAM,CAACI,IAAI,CAACM,cAAc,CAAC;EACxC,KAAK,MAAME,gBAAgB,IAAIR,IAAI,EAAE;IACnC,MAAMS,mBAAmB,GAAGH,cAAc,CAACE,gBAAgB,CAAC;IAE5D3B,YAAY,CAAC4B,mBAAmB,EAAE1B,OAAO,EACvC;MAAEG,YAAY,EAAE,CAACqB;IAA6B,CAAC,EAAEtB,QAAQ,CAAC;EAC9D;AACF,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}