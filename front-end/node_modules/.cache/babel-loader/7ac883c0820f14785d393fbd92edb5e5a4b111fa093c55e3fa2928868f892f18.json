{"ast":null,"code":"/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Tobias Koppers @sokra\r\n*/\n\n\"use strict\";\n\nconst {\n  ConcatSource,\n  PrefixSource\n} = require(\"webpack-sources\");\n\n/** @typedef {import(\"webpack-sources\").Source} Source */\n/** @typedef {import(\"../declarations/WebpackOptions\").Output} OutputOptions */\n/** @typedef {import(\"./Chunk\")} Chunk */\n/** @typedef {import(\"./ChunkGraph\")} ChunkGraph */\n/** @typedef {import(\"./CodeGenerationResults\")} CodeGenerationResults */\n/** @typedef {import(\"./Compilation\").AssetInfo} AssetInfo */\n/** @typedef {import(\"./Compilation\").PathData} PathData */\n/** @typedef {import(\"./DependencyTemplates\")} DependencyTemplates */\n/** @typedef {import(\"./Module\")} Module */\n/** @typedef {import(\"./ModuleGraph\")} ModuleGraph */\n/** @typedef {import(\"./ModuleTemplate\")} ModuleTemplate */\n/** @typedef {import(\"./RuntimeModule\")} RuntimeModule */\n/** @typedef {import(\"./RuntimeTemplate\")} RuntimeTemplate */\n/** @typedef {import(\"./javascript/JavascriptModulesPlugin\").ChunkRenderContext} ChunkRenderContext */\n/** @typedef {import(\"./javascript/JavascriptModulesPlugin\").RenderContext} RenderContext */\n\nconst START_LOWERCASE_ALPHABET_CODE = \"a\".charCodeAt(0);\nconst START_UPPERCASE_ALPHABET_CODE = \"A\".charCodeAt(0);\nconst DELTA_A_TO_Z = \"z\".charCodeAt(0) - START_LOWERCASE_ALPHABET_CODE + 1;\nconst NUMBER_OF_IDENTIFIER_START_CHARS = DELTA_A_TO_Z * 2 + 2; // a-z A-Z _ $\nconst NUMBER_OF_IDENTIFIER_CONTINUATION_CHARS = NUMBER_OF_IDENTIFIER_START_CHARS + 10; // a-z A-Z _ $ 0-9\nconst FUNCTION_CONTENT_REGEX = /^function\\s?\\(\\)\\s?\\{\\r?\\n?|\\r?\\n?\\}$/g;\nconst INDENT_MULTILINE_REGEX = /^\\t/gm;\nconst LINE_SEPARATOR_REGEX = /\\r?\\n/g;\nconst IDENTIFIER_NAME_REPLACE_REGEX = /^([^a-zA-Z$_])/;\nconst IDENTIFIER_ALPHA_NUMERIC_NAME_REPLACE_REGEX = /[^a-zA-Z0-9$]+/g;\nconst COMMENT_END_REGEX = /\\*\\//g;\nconst PATH_NAME_NORMALIZE_REPLACE_REGEX = /[^a-zA-Z0-9_!§$()=\\-^°]+/g;\nconst MATCH_PADDED_HYPHENS_REPLACE_REGEX = /^-|-$/g;\n\n/**\r\n * @typedef {Object} RenderManifestOptions\r\n * @property {Chunk} chunk the chunk used to render\r\n * @property {string} hash\r\n * @property {string} fullHash\r\n * @property {OutputOptions} outputOptions\r\n * @property {CodeGenerationResults} codeGenerationResults\r\n * @property {{javascript: ModuleTemplate}} moduleTemplates\r\n * @property {DependencyTemplates} dependencyTemplates\r\n * @property {RuntimeTemplate} runtimeTemplate\r\n * @property {ModuleGraph} moduleGraph\r\n * @property {ChunkGraph} chunkGraph\r\n */\n\n/** @typedef {RenderManifestEntryTemplated | RenderManifestEntryStatic} RenderManifestEntry */\n\n/**\r\n * @typedef {Object} RenderManifestEntryTemplated\r\n * @property {function(): Source} render\r\n * @property {string | function(PathData, AssetInfo=): string} filenameTemplate\r\n * @property {PathData=} pathOptions\r\n * @property {AssetInfo=} info\r\n * @property {string} identifier\r\n * @property {string=} hash\r\n * @property {boolean=} auxiliary\r\n */\n\n/**\r\n * @typedef {Object} RenderManifestEntryStatic\r\n * @property {function(): Source} render\r\n * @property {string} filename\r\n * @property {AssetInfo} info\r\n * @property {string} identifier\r\n * @property {string=} hash\r\n * @property {boolean=} auxiliary\r\n */\n\n/**\r\n * @typedef {Object} HasId\r\n * @property {number | string} id\r\n */\n\n/**\r\n * @typedef {function(Module, number): boolean} ModuleFilterPredicate\r\n */\n\nclass Template {\n  /**\r\n   *\r\n   * @param {Function} fn a runtime function (.runtime.js) \"template\"\r\n   * @returns {string} the updated and normalized function string\r\n   */\n  static getFunctionContent(fn) {\n    return fn.toString().replace(FUNCTION_CONTENT_REGEX, \"\").replace(INDENT_MULTILINE_REGEX, \"\").replace(LINE_SEPARATOR_REGEX, \"\\n\");\n  }\n\n  /**\r\n   * @param {string} str the string converted to identifier\r\n   * @returns {string} created identifier\r\n   */\n  static toIdentifier(str) {\n    if (typeof str !== \"string\") return \"\";\n    return str.replace(IDENTIFIER_NAME_REPLACE_REGEX, \"_$1\").replace(IDENTIFIER_ALPHA_NUMERIC_NAME_REPLACE_REGEX, \"_\");\n  }\n  /**\r\n   *\r\n   * @param {string} str string to be converted to commented in bundle code\r\n   * @returns {string} returns a commented version of string\r\n   */\n  static toComment(str) {\n    if (!str) return \"\";\n    return `/*! ${str.replace(COMMENT_END_REGEX, \"* /\")} */`;\n  }\n\n  /**\r\n   *\r\n   * @param {string} str string to be converted to \"normal comment\"\r\n   * @returns {string} returns a commented version of string\r\n   */\n  static toNormalComment(str) {\n    if (!str) return \"\";\n    return `/* ${str.replace(COMMENT_END_REGEX, \"* /\")} */`;\n  }\n\n  /**\r\n   * @param {string} str string path to be normalized\r\n   * @returns {string} normalized bundle-safe path\r\n   */\n  static toPath(str) {\n    if (typeof str !== \"string\") return \"\";\n    return str.replace(PATH_NAME_NORMALIZE_REPLACE_REGEX, \"-\").replace(MATCH_PADDED_HYPHENS_REPLACE_REGEX, \"\");\n  }\n\n  // map number to a single character a-z, A-Z or multiple characters if number is too big\n  /**\r\n   * @param {number} n number to convert to ident\r\n   * @returns {string} returns single character ident\r\n   */\n  static numberToIdentifier(n) {\n    if (n >= NUMBER_OF_IDENTIFIER_START_CHARS) {\n      // use multiple letters\n      return Template.numberToIdentifier(n % NUMBER_OF_IDENTIFIER_START_CHARS) + Template.numberToIdentifierContinuation(Math.floor(n / NUMBER_OF_IDENTIFIER_START_CHARS));\n    }\n\n    // lower case\n    if (n < DELTA_A_TO_Z) {\n      return String.fromCharCode(START_LOWERCASE_ALPHABET_CODE + n);\n    }\n    n -= DELTA_A_TO_Z;\n\n    // upper case\n    if (n < DELTA_A_TO_Z) {\n      return String.fromCharCode(START_UPPERCASE_ALPHABET_CODE + n);\n    }\n    if (n === DELTA_A_TO_Z) return \"_\";\n    return \"$\";\n  }\n\n  /**\r\n   * @param {number} n number to convert to ident\r\n   * @returns {string} returns single character ident\r\n   */\n  static numberToIdentifierContinuation(n) {\n    if (n >= NUMBER_OF_IDENTIFIER_CONTINUATION_CHARS) {\n      // use multiple letters\n      return Template.numberToIdentifierContinuation(n % NUMBER_OF_IDENTIFIER_CONTINUATION_CHARS) + Template.numberToIdentifierContinuation(Math.floor(n / NUMBER_OF_IDENTIFIER_CONTINUATION_CHARS));\n    }\n\n    // lower case\n    if (n < DELTA_A_TO_Z) {\n      return String.fromCharCode(START_LOWERCASE_ALPHABET_CODE + n);\n    }\n    n -= DELTA_A_TO_Z;\n\n    // upper case\n    if (n < DELTA_A_TO_Z) {\n      return String.fromCharCode(START_UPPERCASE_ALPHABET_CODE + n);\n    }\n    n -= DELTA_A_TO_Z;\n\n    // numbers\n    if (n < 10) {\n      return `${n}`;\n    }\n    if (n === 10) return \"_\";\n    return \"$\";\n  }\n\n  /**\r\n   *\r\n   * @param {string | string[]} s string to convert to identity\r\n   * @returns {string} converted identity\r\n   */\n  static indent(s) {\n    if (Array.isArray(s)) {\n      return s.map(Template.indent).join(\"\\n\");\n    } else {\n      const str = s.trimEnd();\n      if (!str) return \"\";\n      const ind = str[0] === \"\\n\" ? \"\" : \"\\t\";\n      return ind + str.replace(/\\n([^\\n])/g, \"\\n\\t$1\");\n    }\n  }\n\n  /**\r\n   *\r\n   * @param {string|string[]} s string to create prefix for\r\n   * @param {string} prefix prefix to compose\r\n   * @returns {string} returns new prefix string\r\n   */\n  static prefix(s, prefix) {\n    const str = Template.asString(s).trim();\n    if (!str) return \"\";\n    const ind = str[0] === \"\\n\" ? \"\" : prefix;\n    return ind + str.replace(/\\n([^\\n])/g, \"\\n\" + prefix + \"$1\");\n  }\n\n  /**\r\n   *\r\n   * @param {string|string[]} str string or string collection\r\n   * @returns {string} returns a single string from array\r\n   */\n  static asString(str) {\n    if (Array.isArray(str)) {\n      return str.join(\"\\n\");\n    }\n    return str;\n  }\n\n  /**\r\n   * @typedef {Object} WithId\r\n   * @property {string|number} id\r\n   */\n\n  /**\r\n   * @param {WithId[]} modules a collection of modules to get array bounds for\r\n   * @returns {[number, number] | false} returns the upper and lower array bounds\r\n   * or false if not every module has a number based id\r\n   */\n  static getModulesArrayBounds(modules) {\n    let maxId = -Infinity;\n    let minId = Infinity;\n    for (const module of modules) {\n      const moduleId = module.id;\n      if (typeof moduleId !== \"number\") return false;\n      if (maxId < moduleId) maxId = moduleId;\n      if (minId > moduleId) minId = moduleId;\n    }\n    if (minId < 16 + (\"\" + minId).length) {\n      // add minId x ',' instead of 'Array(minId).concat(…)'\n      minId = 0;\n    }\n    // start with -1 because the first module needs no comma\n    let objectOverhead = -1;\n    for (const module of modules) {\n      // module id + colon + comma\n      objectOverhead += `${module.id}`.length + 2;\n    }\n    // number of commas, or when starting non-zero the length of Array(minId).concat()\n    const arrayOverhead = minId === 0 ? maxId : 16 + `${minId}`.length + maxId;\n    return arrayOverhead < objectOverhead ? [minId, maxId] : false;\n  }\n\n  /**\r\n   * @param {ChunkRenderContext} renderContext render context\r\n   * @param {Module[]} modules modules to render (should be ordered by identifier)\r\n   * @param {function(Module): Source} renderModule function to render a module\r\n   * @param {string=} prefix applying prefix strings\r\n   * @returns {Source} rendered chunk modules in a Source object\r\n   */\n  static renderChunkModules(renderContext, modules, renderModule) {\n    let prefix = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : \"\";\n    const {\n      chunkGraph\n    } = renderContext;\n    var source = new ConcatSource();\n    if (modules.length === 0) {\n      return null;\n    }\n    /** @type {{id: string|number, source: Source|string}[]} */\n    const allModules = modules.map(module => {\n      return {\n        id: chunkGraph.getModuleId(module),\n        source: renderModule(module) || \"false\"\n      };\n    });\n    const bounds = Template.getModulesArrayBounds(allModules);\n    if (bounds) {\n      // Render a spare array\n      const minId = bounds[0];\n      const maxId = bounds[1];\n      if (minId !== 0) {\n        source.add(`Array(${minId}).concat(`);\n      }\n      source.add(\"[\\n\");\n      /** @type {Map<string|number, {id: string|number, source: Source|string}>} */\n      const modules = new Map();\n      for (const module of allModules) {\n        modules.set(module.id, module);\n      }\n      for (let idx = minId; idx <= maxId; idx++) {\n        const module = modules.get(idx);\n        if (idx !== minId) {\n          source.add(\",\\n\");\n        }\n        source.add(`/* ${idx} */`);\n        if (module) {\n          source.add(\"\\n\");\n          source.add(module.source);\n        }\n      }\n      source.add(\"\\n\" + prefix + \"]\");\n      if (minId !== 0) {\n        source.add(\")\");\n      }\n    } else {\n      // Render an object\n      source.add(\"{\\n\");\n      for (let i = 0; i < allModules.length; i++) {\n        const module = allModules[i];\n        if (i !== 0) {\n          source.add(\",\\n\");\n        }\n        source.add(`\\n/***/ ${JSON.stringify(module.id)}:\\n`);\n        source.add(module.source);\n      }\n      source.add(`\\n\\n${prefix}}`);\n    }\n    return source;\n  }\n\n  /**\r\n   * @param {RuntimeModule[]} runtimeModules array of runtime modules in order\r\n   * @param {RenderContext & { codeGenerationResults?: CodeGenerationResults }} renderContext render context\r\n   * @returns {Source} rendered runtime modules in a Source object\r\n   */\n  static renderRuntimeModules(runtimeModules, renderContext) {\n    const source = new ConcatSource();\n    for (const module of runtimeModules) {\n      const codeGenerationResults = renderContext.codeGenerationResults;\n      let runtimeSource;\n      if (codeGenerationResults) {\n        runtimeSource = codeGenerationResults.getSource(module, renderContext.chunk.runtime, \"runtime\");\n      } else {\n        const codeGenResult = module.codeGeneration({\n          chunkGraph: renderContext.chunkGraph,\n          dependencyTemplates: renderContext.dependencyTemplates,\n          moduleGraph: renderContext.moduleGraph,\n          runtimeTemplate: renderContext.runtimeTemplate,\n          runtime: renderContext.chunk.runtime,\n          codeGenerationResults\n        });\n        if (!codeGenResult) continue;\n        runtimeSource = codeGenResult.sources.get(\"runtime\");\n      }\n      if (runtimeSource) {\n        source.add(Template.toNormalComment(module.identifier()) + \"\\n\");\n        if (!module.shouldIsolate()) {\n          source.add(runtimeSource);\n          source.add(\"\\n\\n\");\n        } else if (renderContext.runtimeTemplate.supportsArrowFunction()) {\n          source.add(\"(() => {\\n\");\n          source.add(new PrefixSource(\"\\t\", runtimeSource));\n          source.add(\"\\n})();\\n\\n\");\n        } else {\n          source.add(\"!function() {\\n\");\n          source.add(new PrefixSource(\"\\t\", runtimeSource));\n          source.add(\"\\n}();\\n\\n\");\n        }\n      }\n    }\n    return source;\n  }\n\n  /**\r\n   * @param {RuntimeModule[]} runtimeModules array of runtime modules in order\r\n   * @param {RenderContext} renderContext render context\r\n   * @returns {Source} rendered chunk runtime modules in a Source object\r\n   */\n  static renderChunkRuntimeModules(runtimeModules, renderContext) {\n    return new PrefixSource(\"/******/ \", new ConcatSource(\"function(__webpack_require__) { // webpackRuntimeModules\\n\", this.renderRuntimeModules(runtimeModules, renderContext), \"}\\n\"));\n  }\n}\nmodule.exports = Template;\nmodule.exports.NUMBER_OF_IDENTIFIER_START_CHARS = NUMBER_OF_IDENTIFIER_START_CHARS;\nmodule.exports.NUMBER_OF_IDENTIFIER_CONTINUATION_CHARS = NUMBER_OF_IDENTIFIER_CONTINUATION_CHARS;","map":{"version":3,"names":["ConcatSource","PrefixSource","require","START_LOWERCASE_ALPHABET_CODE","charCodeAt","START_UPPERCASE_ALPHABET_CODE","DELTA_A_TO_Z","NUMBER_OF_IDENTIFIER_START_CHARS","NUMBER_OF_IDENTIFIER_CONTINUATION_CHARS","FUNCTION_CONTENT_REGEX","INDENT_MULTILINE_REGEX","LINE_SEPARATOR_REGEX","IDENTIFIER_NAME_REPLACE_REGEX","IDENTIFIER_ALPHA_NUMERIC_NAME_REPLACE_REGEX","COMMENT_END_REGEX","PATH_NAME_NORMALIZE_REPLACE_REGEX","MATCH_PADDED_HYPHENS_REPLACE_REGEX","Template","getFunctionContent","fn","toString","replace","toIdentifier","str","toComment","toNormalComment","toPath","numberToIdentifier","n","numberToIdentifierContinuation","Math","floor","String","fromCharCode","indent","s","Array","isArray","map","join","trimEnd","ind","prefix","asString","trim","getModulesArrayBounds","modules","maxId","Infinity","minId","module","moduleId","id","length","objectOverhead","arrayOverhead","renderChunkModules","renderContext","renderModule","chunkGraph","source","allModules","getModuleId","bounds","add","Map","set","idx","get","i","JSON","stringify","renderRuntimeModules","runtimeModules","codeGenerationResults","runtimeSource","getSource","chunk","runtime","codeGenResult","codeGeneration","dependencyTemplates","moduleGraph","runtimeTemplate","sources","identifier","shouldIsolate","supportsArrowFunction","renderChunkRuntimeModules","exports"],"sources":["C:/Users/91930/Desktop/Github projects/Pharmacy Demo/front-end/node_modules/webpack/lib/Template.js"],"sourcesContent":["/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Tobias Koppers @sokra\r\n*/\r\n\r\n\"use strict\";\r\n\r\nconst { ConcatSource, PrefixSource } = require(\"webpack-sources\");\r\n\r\n/** @typedef {import(\"webpack-sources\").Source} Source */\r\n/** @typedef {import(\"../declarations/WebpackOptions\").Output} OutputOptions */\r\n/** @typedef {import(\"./Chunk\")} Chunk */\r\n/** @typedef {import(\"./ChunkGraph\")} ChunkGraph */\r\n/** @typedef {import(\"./CodeGenerationResults\")} CodeGenerationResults */\r\n/** @typedef {import(\"./Compilation\").AssetInfo} AssetInfo */\r\n/** @typedef {import(\"./Compilation\").PathData} PathData */\r\n/** @typedef {import(\"./DependencyTemplates\")} DependencyTemplates */\r\n/** @typedef {import(\"./Module\")} Module */\r\n/** @typedef {import(\"./ModuleGraph\")} ModuleGraph */\r\n/** @typedef {import(\"./ModuleTemplate\")} ModuleTemplate */\r\n/** @typedef {import(\"./RuntimeModule\")} RuntimeModule */\r\n/** @typedef {import(\"./RuntimeTemplate\")} RuntimeTemplate */\r\n/** @typedef {import(\"./javascript/JavascriptModulesPlugin\").ChunkRenderContext} ChunkRenderContext */\r\n/** @typedef {import(\"./javascript/JavascriptModulesPlugin\").RenderContext} RenderContext */\r\n\r\nconst START_LOWERCASE_ALPHABET_CODE = \"a\".charCodeAt(0);\r\nconst START_UPPERCASE_ALPHABET_CODE = \"A\".charCodeAt(0);\r\nconst DELTA_A_TO_Z = \"z\".charCodeAt(0) - START_LOWERCASE_ALPHABET_CODE + 1;\r\nconst NUMBER_OF_IDENTIFIER_START_CHARS = DELTA_A_TO_Z * 2 + 2; // a-z A-Z _ $\r\nconst NUMBER_OF_IDENTIFIER_CONTINUATION_CHARS =\r\n\tNUMBER_OF_IDENTIFIER_START_CHARS + 10; // a-z A-Z _ $ 0-9\r\nconst FUNCTION_CONTENT_REGEX = /^function\\s?\\(\\)\\s?\\{\\r?\\n?|\\r?\\n?\\}$/g;\r\nconst INDENT_MULTILINE_REGEX = /^\\t/gm;\r\nconst LINE_SEPARATOR_REGEX = /\\r?\\n/g;\r\nconst IDENTIFIER_NAME_REPLACE_REGEX = /^([^a-zA-Z$_])/;\r\nconst IDENTIFIER_ALPHA_NUMERIC_NAME_REPLACE_REGEX = /[^a-zA-Z0-9$]+/g;\r\nconst COMMENT_END_REGEX = /\\*\\//g;\r\nconst PATH_NAME_NORMALIZE_REPLACE_REGEX = /[^a-zA-Z0-9_!§$()=\\-^°]+/g;\r\nconst MATCH_PADDED_HYPHENS_REPLACE_REGEX = /^-|-$/g;\r\n\r\n/**\r\n * @typedef {Object} RenderManifestOptions\r\n * @property {Chunk} chunk the chunk used to render\r\n * @property {string} hash\r\n * @property {string} fullHash\r\n * @property {OutputOptions} outputOptions\r\n * @property {CodeGenerationResults} codeGenerationResults\r\n * @property {{javascript: ModuleTemplate}} moduleTemplates\r\n * @property {DependencyTemplates} dependencyTemplates\r\n * @property {RuntimeTemplate} runtimeTemplate\r\n * @property {ModuleGraph} moduleGraph\r\n * @property {ChunkGraph} chunkGraph\r\n */\r\n\r\n/** @typedef {RenderManifestEntryTemplated | RenderManifestEntryStatic} RenderManifestEntry */\r\n\r\n/**\r\n * @typedef {Object} RenderManifestEntryTemplated\r\n * @property {function(): Source} render\r\n * @property {string | function(PathData, AssetInfo=): string} filenameTemplate\r\n * @property {PathData=} pathOptions\r\n * @property {AssetInfo=} info\r\n * @property {string} identifier\r\n * @property {string=} hash\r\n * @property {boolean=} auxiliary\r\n */\r\n\r\n/**\r\n * @typedef {Object} RenderManifestEntryStatic\r\n * @property {function(): Source} render\r\n * @property {string} filename\r\n * @property {AssetInfo} info\r\n * @property {string} identifier\r\n * @property {string=} hash\r\n * @property {boolean=} auxiliary\r\n */\r\n\r\n/**\r\n * @typedef {Object} HasId\r\n * @property {number | string} id\r\n */\r\n\r\n/**\r\n * @typedef {function(Module, number): boolean} ModuleFilterPredicate\r\n */\r\n\r\nclass Template {\r\n\t/**\r\n\t *\r\n\t * @param {Function} fn a runtime function (.runtime.js) \"template\"\r\n\t * @returns {string} the updated and normalized function string\r\n\t */\r\n\tstatic getFunctionContent(fn) {\r\n\t\treturn fn\r\n\t\t\t.toString()\r\n\t\t\t.replace(FUNCTION_CONTENT_REGEX, \"\")\r\n\t\t\t.replace(INDENT_MULTILINE_REGEX, \"\")\r\n\t\t\t.replace(LINE_SEPARATOR_REGEX, \"\\n\");\r\n\t}\r\n\r\n\t/**\r\n\t * @param {string} str the string converted to identifier\r\n\t * @returns {string} created identifier\r\n\t */\r\n\tstatic toIdentifier(str) {\r\n\t\tif (typeof str !== \"string\") return \"\";\r\n\t\treturn str\r\n\t\t\t.replace(IDENTIFIER_NAME_REPLACE_REGEX, \"_$1\")\r\n\t\t\t.replace(IDENTIFIER_ALPHA_NUMERIC_NAME_REPLACE_REGEX, \"_\");\r\n\t}\r\n\t/**\r\n\t *\r\n\t * @param {string} str string to be converted to commented in bundle code\r\n\t * @returns {string} returns a commented version of string\r\n\t */\r\n\tstatic toComment(str) {\r\n\t\tif (!str) return \"\";\r\n\t\treturn `/*! ${str.replace(COMMENT_END_REGEX, \"* /\")} */`;\r\n\t}\r\n\r\n\t/**\r\n\t *\r\n\t * @param {string} str string to be converted to \"normal comment\"\r\n\t * @returns {string} returns a commented version of string\r\n\t */\r\n\tstatic toNormalComment(str) {\r\n\t\tif (!str) return \"\";\r\n\t\treturn `/* ${str.replace(COMMENT_END_REGEX, \"* /\")} */`;\r\n\t}\r\n\r\n\t/**\r\n\t * @param {string} str string path to be normalized\r\n\t * @returns {string} normalized bundle-safe path\r\n\t */\r\n\tstatic toPath(str) {\r\n\t\tif (typeof str !== \"string\") return \"\";\r\n\t\treturn str\r\n\t\t\t.replace(PATH_NAME_NORMALIZE_REPLACE_REGEX, \"-\")\r\n\t\t\t.replace(MATCH_PADDED_HYPHENS_REPLACE_REGEX, \"\");\r\n\t}\r\n\r\n\t// map number to a single character a-z, A-Z or multiple characters if number is too big\r\n\t/**\r\n\t * @param {number} n number to convert to ident\r\n\t * @returns {string} returns single character ident\r\n\t */\r\n\tstatic numberToIdentifier(n) {\r\n\t\tif (n >= NUMBER_OF_IDENTIFIER_START_CHARS) {\r\n\t\t\t// use multiple letters\r\n\t\t\treturn (\r\n\t\t\t\tTemplate.numberToIdentifier(n % NUMBER_OF_IDENTIFIER_START_CHARS) +\r\n\t\t\t\tTemplate.numberToIdentifierContinuation(\r\n\t\t\t\t\tMath.floor(n / NUMBER_OF_IDENTIFIER_START_CHARS)\r\n\t\t\t\t)\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\t// lower case\r\n\t\tif (n < DELTA_A_TO_Z) {\r\n\t\t\treturn String.fromCharCode(START_LOWERCASE_ALPHABET_CODE + n);\r\n\t\t}\r\n\t\tn -= DELTA_A_TO_Z;\r\n\r\n\t\t// upper case\r\n\t\tif (n < DELTA_A_TO_Z) {\r\n\t\t\treturn String.fromCharCode(START_UPPERCASE_ALPHABET_CODE + n);\r\n\t\t}\r\n\r\n\t\tif (n === DELTA_A_TO_Z) return \"_\";\r\n\t\treturn \"$\";\r\n\t}\r\n\r\n\t/**\r\n\t * @param {number} n number to convert to ident\r\n\t * @returns {string} returns single character ident\r\n\t */\r\n\tstatic numberToIdentifierContinuation(n) {\r\n\t\tif (n >= NUMBER_OF_IDENTIFIER_CONTINUATION_CHARS) {\r\n\t\t\t// use multiple letters\r\n\t\t\treturn (\r\n\t\t\t\tTemplate.numberToIdentifierContinuation(\r\n\t\t\t\t\tn % NUMBER_OF_IDENTIFIER_CONTINUATION_CHARS\r\n\t\t\t\t) +\r\n\t\t\t\tTemplate.numberToIdentifierContinuation(\r\n\t\t\t\t\tMath.floor(n / NUMBER_OF_IDENTIFIER_CONTINUATION_CHARS)\r\n\t\t\t\t)\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\t// lower case\r\n\t\tif (n < DELTA_A_TO_Z) {\r\n\t\t\treturn String.fromCharCode(START_LOWERCASE_ALPHABET_CODE + n);\r\n\t\t}\r\n\t\tn -= DELTA_A_TO_Z;\r\n\r\n\t\t// upper case\r\n\t\tif (n < DELTA_A_TO_Z) {\r\n\t\t\treturn String.fromCharCode(START_UPPERCASE_ALPHABET_CODE + n);\r\n\t\t}\r\n\t\tn -= DELTA_A_TO_Z;\r\n\r\n\t\t// numbers\r\n\t\tif (n < 10) {\r\n\t\t\treturn `${n}`;\r\n\t\t}\r\n\r\n\t\tif (n === 10) return \"_\";\r\n\t\treturn \"$\";\r\n\t}\r\n\r\n\t/**\r\n\t *\r\n\t * @param {string | string[]} s string to convert to identity\r\n\t * @returns {string} converted identity\r\n\t */\r\n\tstatic indent(s) {\r\n\t\tif (Array.isArray(s)) {\r\n\t\t\treturn s.map(Template.indent).join(\"\\n\");\r\n\t\t} else {\r\n\t\t\tconst str = s.trimEnd();\r\n\t\t\tif (!str) return \"\";\r\n\t\t\tconst ind = str[0] === \"\\n\" ? \"\" : \"\\t\";\r\n\t\t\treturn ind + str.replace(/\\n([^\\n])/g, \"\\n\\t$1\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t *\r\n\t * @param {string|string[]} s string to create prefix for\r\n\t * @param {string} prefix prefix to compose\r\n\t * @returns {string} returns new prefix string\r\n\t */\r\n\tstatic prefix(s, prefix) {\r\n\t\tconst str = Template.asString(s).trim();\r\n\t\tif (!str) return \"\";\r\n\t\tconst ind = str[0] === \"\\n\" ? \"\" : prefix;\r\n\t\treturn ind + str.replace(/\\n([^\\n])/g, \"\\n\" + prefix + \"$1\");\r\n\t}\r\n\r\n\t/**\r\n\t *\r\n\t * @param {string|string[]} str string or string collection\r\n\t * @returns {string} returns a single string from array\r\n\t */\r\n\tstatic asString(str) {\r\n\t\tif (Array.isArray(str)) {\r\n\t\t\treturn str.join(\"\\n\");\r\n\t\t}\r\n\t\treturn str;\r\n\t}\r\n\r\n\t/**\r\n\t * @typedef {Object} WithId\r\n\t * @property {string|number} id\r\n\t */\r\n\r\n\t/**\r\n\t * @param {WithId[]} modules a collection of modules to get array bounds for\r\n\t * @returns {[number, number] | false} returns the upper and lower array bounds\r\n\t * or false if not every module has a number based id\r\n\t */\r\n\tstatic getModulesArrayBounds(modules) {\r\n\t\tlet maxId = -Infinity;\r\n\t\tlet minId = Infinity;\r\n\t\tfor (const module of modules) {\r\n\t\t\tconst moduleId = module.id;\r\n\t\t\tif (typeof moduleId !== \"number\") return false;\r\n\t\t\tif (maxId < moduleId) maxId = moduleId;\r\n\t\t\tif (minId > moduleId) minId = moduleId;\r\n\t\t}\r\n\t\tif (minId < 16 + (\"\" + minId).length) {\r\n\t\t\t// add minId x ',' instead of 'Array(minId).concat(…)'\r\n\t\t\tminId = 0;\r\n\t\t}\r\n\t\t// start with -1 because the first module needs no comma\r\n\t\tlet objectOverhead = -1;\r\n\t\tfor (const module of modules) {\r\n\t\t\t// module id + colon + comma\r\n\t\t\tobjectOverhead += `${module.id}`.length + 2;\r\n\t\t}\r\n\t\t// number of commas, or when starting non-zero the length of Array(minId).concat()\r\n\t\tconst arrayOverhead = minId === 0 ? maxId : 16 + `${minId}`.length + maxId;\r\n\t\treturn arrayOverhead < objectOverhead ? [minId, maxId] : false;\r\n\t}\r\n\r\n\t/**\r\n\t * @param {ChunkRenderContext} renderContext render context\r\n\t * @param {Module[]} modules modules to render (should be ordered by identifier)\r\n\t * @param {function(Module): Source} renderModule function to render a module\r\n\t * @param {string=} prefix applying prefix strings\r\n\t * @returns {Source} rendered chunk modules in a Source object\r\n\t */\r\n\tstatic renderChunkModules(renderContext, modules, renderModule, prefix = \"\") {\r\n\t\tconst { chunkGraph } = renderContext;\r\n\t\tvar source = new ConcatSource();\r\n\t\tif (modules.length === 0) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\t/** @type {{id: string|number, source: Source|string}[]} */\r\n\t\tconst allModules = modules.map(module => {\r\n\t\t\treturn {\r\n\t\t\t\tid: chunkGraph.getModuleId(module),\r\n\t\t\t\tsource: renderModule(module) || \"false\"\r\n\t\t\t};\r\n\t\t});\r\n\t\tconst bounds = Template.getModulesArrayBounds(allModules);\r\n\t\tif (bounds) {\r\n\t\t\t// Render a spare array\r\n\t\t\tconst minId = bounds[0];\r\n\t\t\tconst maxId = bounds[1];\r\n\t\t\tif (minId !== 0) {\r\n\t\t\t\tsource.add(`Array(${minId}).concat(`);\r\n\t\t\t}\r\n\t\t\tsource.add(\"[\\n\");\r\n\t\t\t/** @type {Map<string|number, {id: string|number, source: Source|string}>} */\r\n\t\t\tconst modules = new Map();\r\n\t\t\tfor (const module of allModules) {\r\n\t\t\t\tmodules.set(module.id, module);\r\n\t\t\t}\r\n\t\t\tfor (let idx = minId; idx <= maxId; idx++) {\r\n\t\t\t\tconst module = modules.get(idx);\r\n\t\t\t\tif (idx !== minId) {\r\n\t\t\t\t\tsource.add(\",\\n\");\r\n\t\t\t\t}\r\n\t\t\t\tsource.add(`/* ${idx} */`);\r\n\t\t\t\tif (module) {\r\n\t\t\t\t\tsource.add(\"\\n\");\r\n\t\t\t\t\tsource.add(module.source);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tsource.add(\"\\n\" + prefix + \"]\");\r\n\t\t\tif (minId !== 0) {\r\n\t\t\t\tsource.add(\")\");\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\t// Render an object\r\n\t\t\tsource.add(\"{\\n\");\r\n\t\t\tfor (let i = 0; i < allModules.length; i++) {\r\n\t\t\t\tconst module = allModules[i];\r\n\t\t\t\tif (i !== 0) {\r\n\t\t\t\t\tsource.add(\",\\n\");\r\n\t\t\t\t}\r\n\t\t\t\tsource.add(`\\n/***/ ${JSON.stringify(module.id)}:\\n`);\r\n\t\t\t\tsource.add(module.source);\r\n\t\t\t}\r\n\t\t\tsource.add(`\\n\\n${prefix}}`);\r\n\t\t}\r\n\t\treturn source;\r\n\t}\r\n\r\n\t/**\r\n\t * @param {RuntimeModule[]} runtimeModules array of runtime modules in order\r\n\t * @param {RenderContext & { codeGenerationResults?: CodeGenerationResults }} renderContext render context\r\n\t * @returns {Source} rendered runtime modules in a Source object\r\n\t */\r\n\tstatic renderRuntimeModules(runtimeModules, renderContext) {\r\n\t\tconst source = new ConcatSource();\r\n\t\tfor (const module of runtimeModules) {\r\n\t\t\tconst codeGenerationResults = renderContext.codeGenerationResults;\r\n\t\t\tlet runtimeSource;\r\n\t\t\tif (codeGenerationResults) {\r\n\t\t\t\truntimeSource = codeGenerationResults.getSource(\r\n\t\t\t\t\tmodule,\r\n\t\t\t\t\trenderContext.chunk.runtime,\r\n\t\t\t\t\t\"runtime\"\r\n\t\t\t\t);\r\n\t\t\t} else {\r\n\t\t\t\tconst codeGenResult = module.codeGeneration({\r\n\t\t\t\t\tchunkGraph: renderContext.chunkGraph,\r\n\t\t\t\t\tdependencyTemplates: renderContext.dependencyTemplates,\r\n\t\t\t\t\tmoduleGraph: renderContext.moduleGraph,\r\n\t\t\t\t\truntimeTemplate: renderContext.runtimeTemplate,\r\n\t\t\t\t\truntime: renderContext.chunk.runtime,\r\n\t\t\t\t\tcodeGenerationResults\r\n\t\t\t\t});\r\n\t\t\t\tif (!codeGenResult) continue;\r\n\t\t\t\truntimeSource = codeGenResult.sources.get(\"runtime\");\r\n\t\t\t}\r\n\t\t\tif (runtimeSource) {\r\n\t\t\t\tsource.add(Template.toNormalComment(module.identifier()) + \"\\n\");\r\n\t\t\t\tif (!module.shouldIsolate()) {\r\n\t\t\t\t\tsource.add(runtimeSource);\r\n\t\t\t\t\tsource.add(\"\\n\\n\");\r\n\t\t\t\t} else if (renderContext.runtimeTemplate.supportsArrowFunction()) {\r\n\t\t\t\t\tsource.add(\"(() => {\\n\");\r\n\t\t\t\t\tsource.add(new PrefixSource(\"\\t\", runtimeSource));\r\n\t\t\t\t\tsource.add(\"\\n})();\\n\\n\");\r\n\t\t\t\t} else {\r\n\t\t\t\t\tsource.add(\"!function() {\\n\");\r\n\t\t\t\t\tsource.add(new PrefixSource(\"\\t\", runtimeSource));\r\n\t\t\t\t\tsource.add(\"\\n}();\\n\\n\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn source;\r\n\t}\r\n\r\n\t/**\r\n\t * @param {RuntimeModule[]} runtimeModules array of runtime modules in order\r\n\t * @param {RenderContext} renderContext render context\r\n\t * @returns {Source} rendered chunk runtime modules in a Source object\r\n\t */\r\n\tstatic renderChunkRuntimeModules(runtimeModules, renderContext) {\r\n\t\treturn new PrefixSource(\r\n\t\t\t\"/******/ \",\r\n\t\t\tnew ConcatSource(\r\n\t\t\t\t\"function(__webpack_require__) { // webpackRuntimeModules\\n\",\r\n\t\t\t\tthis.renderRuntimeModules(runtimeModules, renderContext),\r\n\t\t\t\t\"}\\n\"\r\n\t\t\t)\r\n\t\t);\r\n\t}\r\n}\r\n\r\nmodule.exports = Template;\r\nmodule.exports.NUMBER_OF_IDENTIFIER_START_CHARS =\r\n\tNUMBER_OF_IDENTIFIER_START_CHARS;\r\nmodule.exports.NUMBER_OF_IDENTIFIER_CONTINUATION_CHARS =\r\n\tNUMBER_OF_IDENTIFIER_CONTINUATION_CHARS;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}