{"ast":null,"code":"import { TokenProviderError } from \"@aws-sdk/property-provider\";\nimport { getProfileName, getSSOTokenFromFile, loadSsoSessionData, parseKnownFiles } from \"@aws-sdk/shared-ini-file-loader\";\nimport { EXPIRE_WINDOW_MS, REFRESH_MESSAGE } from \"./constants\";\nimport { getNewSsoOidcToken } from \"./getNewSsoOidcToken\";\nimport { validateTokenExpiry } from \"./validateTokenExpiry\";\nimport { validateTokenKey } from \"./validateTokenKey\";\nimport { writeSSOTokenToFile } from \"./writeSSOTokenToFile\";\nconst lastRefreshAttemptTime = new Date(0);\nexport const fromSso = function () {\n  let init = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return async () => {\n    const profiles = await parseKnownFiles(init);\n    const profileName = getProfileName(init);\n    const profile = profiles[profileName];\n    if (!profile) {\n      throw new TokenProviderError(`Profile '${profileName}' could not be found in shared credentials file.`, false);\n    } else if (!profile[\"sso_session\"]) {\n      throw new TokenProviderError(`Profile '${profileName}' is missing required property 'sso_session'.`);\n    }\n    const ssoSessionName = profile[\"sso_session\"];\n    const ssoSessions = await loadSsoSessionData(init);\n    const ssoSession = ssoSessions[ssoSessionName];\n    if (!ssoSession) {\n      throw new TokenProviderError(`Sso session '${ssoSessionName}' could not be found in shared credentials file.`, false);\n    }\n    for (const ssoSessionRequiredKey of [\"sso_start_url\", \"sso_region\"]) {\n      if (!ssoSession[ssoSessionRequiredKey]) {\n        throw new TokenProviderError(`Sso session '${ssoSessionName}' is missing required property '${ssoSessionRequiredKey}'.`, false);\n      }\n    }\n    const ssoStartUrl = ssoSession[\"sso_start_url\"];\n    const ssoRegion = ssoSession[\"sso_region\"];\n    let ssoToken;\n    try {\n      ssoToken = await getSSOTokenFromFile(ssoSessionName);\n    } catch (e) {\n      throw new TokenProviderError(`The SSO session token associated with profile=${profileName} was not found or is invalid. ${REFRESH_MESSAGE}`, false);\n    }\n    validateTokenKey(\"accessToken\", ssoToken.accessToken);\n    validateTokenKey(\"expiresAt\", ssoToken.expiresAt);\n    const {\n      accessToken,\n      expiresAt\n    } = ssoToken;\n    const existingToken = {\n      token: accessToken,\n      expiration: new Date(expiresAt)\n    };\n    if (existingToken.expiration.getTime() - Date.now() > EXPIRE_WINDOW_MS) {\n      return existingToken;\n    }\n    if (Date.now() - lastRefreshAttemptTime.getTime() < 30 * 1000) {\n      validateTokenExpiry(existingToken);\n      return existingToken;\n    }\n    validateTokenKey(\"clientId\", ssoToken.clientId, true);\n    validateTokenKey(\"clientSecret\", ssoToken.clientSecret, true);\n    validateTokenKey(\"refreshToken\", ssoToken.refreshToken, true);\n    try {\n      lastRefreshAttemptTime.setTime(Date.now());\n      const newSsoOidcToken = await getNewSsoOidcToken(ssoToken, ssoRegion);\n      validateTokenKey(\"accessToken\", newSsoOidcToken.accessToken);\n      validateTokenKey(\"expiresIn\", newSsoOidcToken.expiresIn);\n      const newTokenExpiration = new Date(Date.now() + newSsoOidcToken.expiresIn * 1000);\n      try {\n        await writeSSOTokenToFile(ssoSessionName, {\n          ...ssoToken,\n          accessToken: newSsoOidcToken.accessToken,\n          expiresAt: newTokenExpiration.toISOString(),\n          refreshToken: newSsoOidcToken.refreshToken\n        });\n      } catch (error) {}\n      return {\n        token: newSsoOidcToken.accessToken,\n        expiration: newTokenExpiration\n      };\n    } catch (error) {\n      validateTokenExpiry(existingToken);\n      return existingToken;\n    }\n  };\n};","map":{"version":3,"names":["TokenProviderError","getProfileName","getSSOTokenFromFile","loadSsoSessionData","parseKnownFiles","EXPIRE_WINDOW_MS","REFRESH_MESSAGE","getNewSsoOidcToken","validateTokenExpiry","validateTokenKey","writeSSOTokenToFile","lastRefreshAttemptTime","Date","fromSso","init","profiles","profileName","profile","ssoSessionName","ssoSessions","ssoSession","ssoSessionRequiredKey","ssoStartUrl","ssoRegion","ssoToken","e","accessToken","expiresAt","existingToken","token","expiration","getTime","now","clientId","clientSecret","refreshToken","setTime","newSsoOidcToken","expiresIn","newTokenExpiration","toISOString","error"],"sources":["C:/Users/91930/Desktop/Github projects/Pharmacy Demo/back-end/node_modules/@aws-sdk/token-providers/dist-es/fromSso.js"],"sourcesContent":["import { TokenProviderError } from \"@aws-sdk/property-provider\";\r\nimport { getProfileName, getSSOTokenFromFile, loadSsoSessionData, parseKnownFiles, } from \"@aws-sdk/shared-ini-file-loader\";\r\nimport { EXPIRE_WINDOW_MS, REFRESH_MESSAGE } from \"./constants\";\r\nimport { getNewSsoOidcToken } from \"./getNewSsoOidcToken\";\r\nimport { validateTokenExpiry } from \"./validateTokenExpiry\";\r\nimport { validateTokenKey } from \"./validateTokenKey\";\r\nimport { writeSSOTokenToFile } from \"./writeSSOTokenToFile\";\r\nconst lastRefreshAttemptTime = new Date(0);\r\nexport const fromSso = (init = {}) => async () => {\r\n    const profiles = await parseKnownFiles(init);\r\n    const profileName = getProfileName(init);\r\n    const profile = profiles[profileName];\r\n    if (!profile) {\r\n        throw new TokenProviderError(`Profile '${profileName}' could not be found in shared credentials file.`, false);\r\n    }\r\n    else if (!profile[\"sso_session\"]) {\r\n        throw new TokenProviderError(`Profile '${profileName}' is missing required property 'sso_session'.`);\r\n    }\r\n    const ssoSessionName = profile[\"sso_session\"];\r\n    const ssoSessions = await loadSsoSessionData(init);\r\n    const ssoSession = ssoSessions[ssoSessionName];\r\n    if (!ssoSession) {\r\n        throw new TokenProviderError(`Sso session '${ssoSessionName}' could not be found in shared credentials file.`, false);\r\n    }\r\n    for (const ssoSessionRequiredKey of [\"sso_start_url\", \"sso_region\"]) {\r\n        if (!ssoSession[ssoSessionRequiredKey]) {\r\n            throw new TokenProviderError(`Sso session '${ssoSessionName}' is missing required property '${ssoSessionRequiredKey}'.`, false);\r\n        }\r\n    }\r\n    const ssoStartUrl = ssoSession[\"sso_start_url\"];\r\n    const ssoRegion = ssoSession[\"sso_region\"];\r\n    let ssoToken;\r\n    try {\r\n        ssoToken = await getSSOTokenFromFile(ssoSessionName);\r\n    }\r\n    catch (e) {\r\n        throw new TokenProviderError(`The SSO session token associated with profile=${profileName} was not found or is invalid. ${REFRESH_MESSAGE}`, false);\r\n    }\r\n    validateTokenKey(\"accessToken\", ssoToken.accessToken);\r\n    validateTokenKey(\"expiresAt\", ssoToken.expiresAt);\r\n    const { accessToken, expiresAt } = ssoToken;\r\n    const existingToken = { token: accessToken, expiration: new Date(expiresAt) };\r\n    if (existingToken.expiration.getTime() - Date.now() > EXPIRE_WINDOW_MS) {\r\n        return existingToken;\r\n    }\r\n    if (Date.now() - lastRefreshAttemptTime.getTime() < 30 * 1000) {\r\n        validateTokenExpiry(existingToken);\r\n        return existingToken;\r\n    }\r\n    validateTokenKey(\"clientId\", ssoToken.clientId, true);\r\n    validateTokenKey(\"clientSecret\", ssoToken.clientSecret, true);\r\n    validateTokenKey(\"refreshToken\", ssoToken.refreshToken, true);\r\n    try {\r\n        lastRefreshAttemptTime.setTime(Date.now());\r\n        const newSsoOidcToken = await getNewSsoOidcToken(ssoToken, ssoRegion);\r\n        validateTokenKey(\"accessToken\", newSsoOidcToken.accessToken);\r\n        validateTokenKey(\"expiresIn\", newSsoOidcToken.expiresIn);\r\n        const newTokenExpiration = new Date(Date.now() + newSsoOidcToken.expiresIn * 1000);\r\n        try {\r\n            await writeSSOTokenToFile(ssoSessionName, {\r\n                ...ssoToken,\r\n                accessToken: newSsoOidcToken.accessToken,\r\n                expiresAt: newTokenExpiration.toISOString(),\r\n                refreshToken: newSsoOidcToken.refreshToken,\r\n            });\r\n        }\r\n        catch (error) {\r\n        }\r\n        return {\r\n            token: newSsoOidcToken.accessToken,\r\n            expiration: newTokenExpiration,\r\n        };\r\n    }\r\n    catch (error) {\r\n        validateTokenExpiry(existingToken);\r\n        return existingToken;\r\n    }\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}