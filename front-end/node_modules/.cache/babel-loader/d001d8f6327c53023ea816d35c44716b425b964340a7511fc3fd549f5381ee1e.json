{"ast":null,"code":"/*!\r\n * Module dependencies.\r\n */\n\n'use strict';\n\nconst SchemaType = require('../schematype');\nconst CastError = SchemaType.CastError;\nconst castDecimal128 = require('../cast/decimal128');\nconst utils = require('../utils');\nconst isBsonType = require('../helpers/isBsonType');\n\n/**\r\n * Decimal128 SchemaType constructor.\r\n *\r\n * @param {String} key\r\n * @param {Object} options\r\n * @inherits SchemaType\r\n * @api public\r\n */\n\nfunction Decimal128(key, options) {\n  SchemaType.call(this, key, options, 'Decimal128');\n}\n\n/**\r\n * This schema type's name, to defend against minifiers that mangle\r\n * function names.\r\n *\r\n * @api public\r\n */\nDecimal128.schemaName = 'Decimal128';\nDecimal128.defaultOptions = {};\n\n/*!\r\n * Inherits from SchemaType.\r\n */\nDecimal128.prototype = Object.create(SchemaType.prototype);\nDecimal128.prototype.constructor = Decimal128;\n\n/*!\r\n * ignore\r\n */\n\nDecimal128._cast = castDecimal128;\n\n/**\r\n * Sets a default option for all Decimal128 instances.\r\n *\r\n * #### Example:\r\n *\r\n *     // Make all decimal 128s have `required` of true by default.\r\n *     mongoose.Schema.Decimal128.set('required', true);\r\n *\r\n *     const User = mongoose.model('User', new Schema({ test: mongoose.Decimal128 }));\r\n *     new User({ }).validateSync().errors.test.message; // Path `test` is required.\r\n *\r\n * @param {String} option The option you'd like to set the value for\r\n * @param {Any} value value for option\r\n * @return {undefined}\r\n * @function set\r\n * @static\r\n * @api public\r\n */\n\nDecimal128.set = SchemaType.set;\n\n/**\r\n * Get/set the function used to cast arbitrary values to decimals.\r\n *\r\n * #### Example:\r\n *\r\n *     // Make Mongoose only refuse to cast numbers as decimal128\r\n *     const original = mongoose.Schema.Types.Decimal128.cast();\r\n *     mongoose.Decimal128.cast(v => {\r\n *       assert.ok(typeof v !== 'number');\r\n *       return original(v);\r\n *     });\r\n *\r\n *     // Or disable casting entirely\r\n *     mongoose.Decimal128.cast(false);\r\n *\r\n * @param {Function} [caster]\r\n * @return {Function}\r\n * @function get\r\n * @static\r\n * @api public\r\n */\n\nDecimal128.cast = function cast(caster) {\n  if (arguments.length === 0) {\n    return this._cast;\n  }\n  if (caster === false) {\n    caster = this._defaultCaster;\n  }\n  this._cast = caster;\n  return this._cast;\n};\n\n/*!\r\n * ignore\r\n */\n\nDecimal128._defaultCaster = v => {\n  if (v != null && !isBsonType(v, 'Decimal128')) {\n    throw new Error();\n  }\n  return v;\n};\n\n/*!\r\n * ignore\r\n */\n\nDecimal128._checkRequired = v => isBsonType(v, 'Decimal128');\n\n/**\r\n * Override the function the required validator uses to check whether a string\r\n * passes the `required` check.\r\n *\r\n * @param {Function} fn\r\n * @return {Function}\r\n * @function checkRequired\r\n * @static\r\n * @api public\r\n */\n\nDecimal128.checkRequired = SchemaType.checkRequired;\n\n/**\r\n * Check if the given value satisfies a required validator.\r\n *\r\n * @param {Any} value\r\n * @param {Document} doc\r\n * @return {Boolean}\r\n * @api public\r\n */\n\nDecimal128.prototype.checkRequired = function checkRequired(value, doc) {\n  if (SchemaType._isRef(this, value, doc, true)) {\n    return !!value;\n  }\n\n  // `require('util').inherits()` does **not** copy static properties, and\n  // plugins like mongoose-float use `inherits()` for pre-ES6.\n  const _checkRequired = typeof this.constructor.checkRequired === 'function' ? this.constructor.checkRequired() : Decimal128.checkRequired();\n  return _checkRequired(value);\n};\n\n/**\r\n * Casts to Decimal128\r\n *\r\n * @param {Object} value\r\n * @param {Object} doc\r\n * @param {Boolean} init whether this is an initialization cast\r\n * @api private\r\n */\n\nDecimal128.prototype.cast = function (value, doc, init) {\n  if (SchemaType._isRef(this, value, doc, init)) {\n    if (isBsonType(value, 'Decimal128')) {\n      return value;\n    }\n    return this._castRef(value, doc, init);\n  }\n  let castDecimal128;\n  if (typeof this._castFunction === 'function') {\n    castDecimal128 = this._castFunction;\n  } else if (typeof this.constructor.cast === 'function') {\n    castDecimal128 = this.constructor.cast();\n  } else {\n    castDecimal128 = Decimal128.cast();\n  }\n  try {\n    return castDecimal128(value);\n  } catch (error) {\n    throw new CastError('Decimal128', value, this.path, error, this);\n  }\n};\n\n/*!\r\n * ignore\r\n */\n\nfunction handleSingle(val) {\n  return this.cast(val);\n}\nDecimal128.prototype.$conditionalHandlers = utils.options(SchemaType.prototype.$conditionalHandlers, {\n  $gt: handleSingle,\n  $gte: handleSingle,\n  $lt: handleSingle,\n  $lte: handleSingle\n});\n\n/*!\r\n * Module exports.\r\n */\n\nmodule.exports = Decimal128;","map":{"version":3,"names":["SchemaType","require","CastError","castDecimal128","utils","isBsonType","Decimal128","key","options","call","schemaName","defaultOptions","prototype","Object","create","constructor","_cast","set","cast","caster","arguments","length","_defaultCaster","v","Error","_checkRequired","checkRequired","value","doc","_isRef","init","_castRef","_castFunction","error","path","handleSingle","val","$conditionalHandlers","$gt","$gte","$lt","$lte","module","exports"],"sources":["C:/Users/91930/Desktop/Github projects/Pharmacy Demo/back-end/node_modules/mongoose/lib/schema/decimal128.js"],"sourcesContent":["/*!\r\n * Module dependencies.\r\n */\r\n\r\n'use strict';\r\n\r\nconst SchemaType = require('../schematype');\r\nconst CastError = SchemaType.CastError;\r\nconst castDecimal128 = require('../cast/decimal128');\r\nconst utils = require('../utils');\r\nconst isBsonType = require('../helpers/isBsonType');\r\n\r\n/**\r\n * Decimal128 SchemaType constructor.\r\n *\r\n * @param {String} key\r\n * @param {Object} options\r\n * @inherits SchemaType\r\n * @api public\r\n */\r\n\r\nfunction Decimal128(key, options) {\r\n  SchemaType.call(this, key, options, 'Decimal128');\r\n}\r\n\r\n/**\r\n * This schema type's name, to defend against minifiers that mangle\r\n * function names.\r\n *\r\n * @api public\r\n */\r\nDecimal128.schemaName = 'Decimal128';\r\n\r\nDecimal128.defaultOptions = {};\r\n\r\n/*!\r\n * Inherits from SchemaType.\r\n */\r\nDecimal128.prototype = Object.create(SchemaType.prototype);\r\nDecimal128.prototype.constructor = Decimal128;\r\n\r\n/*!\r\n * ignore\r\n */\r\n\r\nDecimal128._cast = castDecimal128;\r\n\r\n/**\r\n * Sets a default option for all Decimal128 instances.\r\n *\r\n * #### Example:\r\n *\r\n *     // Make all decimal 128s have `required` of true by default.\r\n *     mongoose.Schema.Decimal128.set('required', true);\r\n *\r\n *     const User = mongoose.model('User', new Schema({ test: mongoose.Decimal128 }));\r\n *     new User({ }).validateSync().errors.test.message; // Path `test` is required.\r\n *\r\n * @param {String} option The option you'd like to set the value for\r\n * @param {Any} value value for option\r\n * @return {undefined}\r\n * @function set\r\n * @static\r\n * @api public\r\n */\r\n\r\nDecimal128.set = SchemaType.set;\r\n\r\n/**\r\n * Get/set the function used to cast arbitrary values to decimals.\r\n *\r\n * #### Example:\r\n *\r\n *     // Make Mongoose only refuse to cast numbers as decimal128\r\n *     const original = mongoose.Schema.Types.Decimal128.cast();\r\n *     mongoose.Decimal128.cast(v => {\r\n *       assert.ok(typeof v !== 'number');\r\n *       return original(v);\r\n *     });\r\n *\r\n *     // Or disable casting entirely\r\n *     mongoose.Decimal128.cast(false);\r\n *\r\n * @param {Function} [caster]\r\n * @return {Function}\r\n * @function get\r\n * @static\r\n * @api public\r\n */\r\n\r\nDecimal128.cast = function cast(caster) {\r\n  if (arguments.length === 0) {\r\n    return this._cast;\r\n  }\r\n  if (caster === false) {\r\n    caster = this._defaultCaster;\r\n  }\r\n  this._cast = caster;\r\n\r\n  return this._cast;\r\n};\r\n\r\n/*!\r\n * ignore\r\n */\r\n\r\nDecimal128._defaultCaster = v => {\r\n  if (v != null && !isBsonType(v, 'Decimal128')) {\r\n    throw new Error();\r\n  }\r\n  return v;\r\n};\r\n\r\n/*!\r\n * ignore\r\n */\r\n\r\nDecimal128._checkRequired = v => isBsonType(v, 'Decimal128');\r\n\r\n/**\r\n * Override the function the required validator uses to check whether a string\r\n * passes the `required` check.\r\n *\r\n * @param {Function} fn\r\n * @return {Function}\r\n * @function checkRequired\r\n * @static\r\n * @api public\r\n */\r\n\r\nDecimal128.checkRequired = SchemaType.checkRequired;\r\n\r\n/**\r\n * Check if the given value satisfies a required validator.\r\n *\r\n * @param {Any} value\r\n * @param {Document} doc\r\n * @return {Boolean}\r\n * @api public\r\n */\r\n\r\nDecimal128.prototype.checkRequired = function checkRequired(value, doc) {\r\n  if (SchemaType._isRef(this, value, doc, true)) {\r\n    return !!value;\r\n  }\r\n\r\n  // `require('util').inherits()` does **not** copy static properties, and\r\n  // plugins like mongoose-float use `inherits()` for pre-ES6.\r\n  const _checkRequired = typeof this.constructor.checkRequired === 'function' ?\r\n    this.constructor.checkRequired() :\r\n    Decimal128.checkRequired();\r\n\r\n  return _checkRequired(value);\r\n};\r\n\r\n/**\r\n * Casts to Decimal128\r\n *\r\n * @param {Object} value\r\n * @param {Object} doc\r\n * @param {Boolean} init whether this is an initialization cast\r\n * @api private\r\n */\r\n\r\nDecimal128.prototype.cast = function(value, doc, init) {\r\n  if (SchemaType._isRef(this, value, doc, init)) {\r\n    if (isBsonType(value, 'Decimal128')) {\r\n      return value;\r\n    }\r\n\r\n    return this._castRef(value, doc, init);\r\n  }\r\n\r\n  let castDecimal128;\r\n  if (typeof this._castFunction === 'function') {\r\n    castDecimal128 = this._castFunction;\r\n  } else if (typeof this.constructor.cast === 'function') {\r\n    castDecimal128 = this.constructor.cast();\r\n  } else {\r\n    castDecimal128 = Decimal128.cast();\r\n  }\r\n\r\n  try {\r\n    return castDecimal128(value);\r\n  } catch (error) {\r\n    throw new CastError('Decimal128', value, this.path, error, this);\r\n  }\r\n};\r\n\r\n/*!\r\n * ignore\r\n */\r\n\r\nfunction handleSingle(val) {\r\n  return this.cast(val);\r\n}\r\n\r\nDecimal128.prototype.$conditionalHandlers =\r\n    utils.options(SchemaType.prototype.$conditionalHandlers, {\r\n      $gt: handleSingle,\r\n      $gte: handleSingle,\r\n      $lt: handleSingle,\r\n      $lte: handleSingle\r\n    });\r\n\r\n/*!\r\n * Module exports.\r\n */\r\n\r\nmodule.exports = Decimal128;\r\n"],"mappings":"AAAA;AACA;AACA;;AAEA,YAAY;;AAEZ,MAAMA,UAAU,GAAGC,OAAO,CAAC,eAAe,CAAC;AAC3C,MAAMC,SAAS,GAAGF,UAAU,CAACE,SAAS;AACtC,MAAMC,cAAc,GAAGF,OAAO,CAAC,oBAAoB,CAAC;AACpD,MAAMG,KAAK,GAAGH,OAAO,CAAC,UAAU,CAAC;AACjC,MAAMI,UAAU,GAAGJ,OAAO,CAAC,uBAAuB,CAAC;;AAEnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASK,UAAU,CAACC,GAAG,EAAEC,OAAO,EAAE;EAChCR,UAAU,CAACS,IAAI,CAAC,IAAI,EAAEF,GAAG,EAAEC,OAAO,EAAE,YAAY,CAAC;AACnD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACAF,UAAU,CAACI,UAAU,GAAG,YAAY;AAEpCJ,UAAU,CAACK,cAAc,GAAG,CAAC,CAAC;;AAE9B;AACA;AACA;AACAL,UAAU,CAACM,SAAS,GAAGC,MAAM,CAACC,MAAM,CAACd,UAAU,CAACY,SAAS,CAAC;AAC1DN,UAAU,CAACM,SAAS,CAACG,WAAW,GAAGT,UAAU;;AAE7C;AACA;AACA;;AAEAA,UAAU,CAACU,KAAK,GAAGb,cAAc;;AAEjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAG,UAAU,CAACW,GAAG,GAAGjB,UAAU,CAACiB,GAAG;;AAE/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAX,UAAU,CAACY,IAAI,GAAG,SAASA,IAAI,CAACC,MAAM,EAAE;EACtC,IAAIC,SAAS,CAACC,MAAM,KAAK,CAAC,EAAE;IAC1B,OAAO,IAAI,CAACL,KAAK;EACnB;EACA,IAAIG,MAAM,KAAK,KAAK,EAAE;IACpBA,MAAM,GAAG,IAAI,CAACG,cAAc;EAC9B;EACA,IAAI,CAACN,KAAK,GAAGG,MAAM;EAEnB,OAAO,IAAI,CAACH,KAAK;AACnB,CAAC;;AAED;AACA;AACA;;AAEAV,UAAU,CAACgB,cAAc,GAAGC,CAAC,IAAI;EAC/B,IAAIA,CAAC,IAAI,IAAI,IAAI,CAAClB,UAAU,CAACkB,CAAC,EAAE,YAAY,CAAC,EAAE;IAC7C,MAAM,IAAIC,KAAK,EAAE;EACnB;EACA,OAAOD,CAAC;AACV,CAAC;;AAED;AACA;AACA;;AAEAjB,UAAU,CAACmB,cAAc,GAAGF,CAAC,IAAIlB,UAAU,CAACkB,CAAC,EAAE,YAAY,CAAC;;AAE5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAjB,UAAU,CAACoB,aAAa,GAAG1B,UAAU,CAAC0B,aAAa;;AAEnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEApB,UAAU,CAACM,SAAS,CAACc,aAAa,GAAG,SAASA,aAAa,CAACC,KAAK,EAAEC,GAAG,EAAE;EACtE,IAAI5B,UAAU,CAAC6B,MAAM,CAAC,IAAI,EAAEF,KAAK,EAAEC,GAAG,EAAE,IAAI,CAAC,EAAE;IAC7C,OAAO,CAAC,CAACD,KAAK;EAChB;;EAEA;EACA;EACA,MAAMF,cAAc,GAAG,OAAO,IAAI,CAACV,WAAW,CAACW,aAAa,KAAK,UAAU,GACzE,IAAI,CAACX,WAAW,CAACW,aAAa,EAAE,GAChCpB,UAAU,CAACoB,aAAa,EAAE;EAE5B,OAAOD,cAAc,CAACE,KAAK,CAAC;AAC9B,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEArB,UAAU,CAACM,SAAS,CAACM,IAAI,GAAG,UAASS,KAAK,EAAEC,GAAG,EAAEE,IAAI,EAAE;EACrD,IAAI9B,UAAU,CAAC6B,MAAM,CAAC,IAAI,EAAEF,KAAK,EAAEC,GAAG,EAAEE,IAAI,CAAC,EAAE;IAC7C,IAAIzB,UAAU,CAACsB,KAAK,EAAE,YAAY,CAAC,EAAE;MACnC,OAAOA,KAAK;IACd;IAEA,OAAO,IAAI,CAACI,QAAQ,CAACJ,KAAK,EAAEC,GAAG,EAAEE,IAAI,CAAC;EACxC;EAEA,IAAI3B,cAAc;EAClB,IAAI,OAAO,IAAI,CAAC6B,aAAa,KAAK,UAAU,EAAE;IAC5C7B,cAAc,GAAG,IAAI,CAAC6B,aAAa;EACrC,CAAC,MAAM,IAAI,OAAO,IAAI,CAACjB,WAAW,CAACG,IAAI,KAAK,UAAU,EAAE;IACtDf,cAAc,GAAG,IAAI,CAACY,WAAW,CAACG,IAAI,EAAE;EAC1C,CAAC,MAAM;IACLf,cAAc,GAAGG,UAAU,CAACY,IAAI,EAAE;EACpC;EAEA,IAAI;IACF,OAAOf,cAAc,CAACwB,KAAK,CAAC;EAC9B,CAAC,CAAC,OAAOM,KAAK,EAAE;IACd,MAAM,IAAI/B,SAAS,CAAC,YAAY,EAAEyB,KAAK,EAAE,IAAI,CAACO,IAAI,EAAED,KAAK,EAAE,IAAI,CAAC;EAClE;AACF,CAAC;;AAED;AACA;AACA;;AAEA,SAASE,YAAY,CAACC,GAAG,EAAE;EACzB,OAAO,IAAI,CAAClB,IAAI,CAACkB,GAAG,CAAC;AACvB;AAEA9B,UAAU,CAACM,SAAS,CAACyB,oBAAoB,GACrCjC,KAAK,CAACI,OAAO,CAACR,UAAU,CAACY,SAAS,CAACyB,oBAAoB,EAAE;EACvDC,GAAG,EAAEH,YAAY;EACjBI,IAAI,EAAEJ,YAAY;EAClBK,GAAG,EAAEL,YAAY;EACjBM,IAAI,EAAEN;AACR,CAAC,CAAC;;AAEN;AACA;AACA;;AAEAO,MAAM,CAACC,OAAO,GAAGrC,UAAU"},"metadata":{},"sourceType":"script","externalDependencies":[]}