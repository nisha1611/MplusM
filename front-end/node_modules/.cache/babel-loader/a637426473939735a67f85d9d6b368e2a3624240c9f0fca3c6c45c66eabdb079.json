{"ast":null,"code":"/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n*/\n\n\"use strict\";\n\nconst RuntimeGlobals = require(\"../RuntimeGlobals\");\nconst RuntimeModule = require(\"../RuntimeModule\");\nconst Template = require(\"../Template\");\nclass EnsureChunkRuntimeModule extends RuntimeModule {\n  constructor(runtimeRequirements) {\n    super(\"ensure chunk\");\n    this.runtimeRequirements = runtimeRequirements;\n  }\n\n  /**\r\n   * @returns {string} runtime code\r\n   */\n  generate() {\n    const {\n      runtimeTemplate\n    } = this.compilation;\n    // Check if there are non initial chunks which need to be imported using require-ensure\n    if (this.runtimeRequirements.has(RuntimeGlobals.ensureChunkHandlers)) {\n      const handlers = RuntimeGlobals.ensureChunkHandlers;\n      return Template.asString([`${handlers} = {};`, \"// This file contains only the entry chunk.\", \"// The chunk loading function for additional chunks\", `${RuntimeGlobals.ensureChunk} = ${runtimeTemplate.basicFunction(\"chunkId\", [`return Promise.all(Object.keys(${handlers}).reduce(${runtimeTemplate.basicFunction(\"promises, key\", [`${handlers}[key](chunkId, promises);`, \"return promises;\"])}, []));`])};`]);\n    } else {\n      // There ensureChunk is used somewhere in the tree, so we need an empty requireEnsure\n      // function. This can happen with multiple entrypoints.\n      return Template.asString([\"// The chunk loading function for additional chunks\", \"// Since all referenced chunks are already included\", \"// in this file, this function is empty here.\", `${RuntimeGlobals.ensureChunk} = ${runtimeTemplate.returningFunction(\"Promise.resolve()\")};`]);\n    }\n  }\n}\nmodule.exports = EnsureChunkRuntimeModule;","map":{"version":3,"names":["RuntimeGlobals","require","RuntimeModule","Template","EnsureChunkRuntimeModule","constructor","runtimeRequirements","generate","runtimeTemplate","compilation","has","ensureChunkHandlers","handlers","asString","ensureChunk","basicFunction","returningFunction","module","exports"],"sources":["C:/Users/91930/Desktop/Github projects/Pharmacy Demo/front-end/node_modules/webpack/lib/runtime/EnsureChunkRuntimeModule.js"],"sourcesContent":["/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n*/\r\n\r\n\"use strict\";\r\n\r\nconst RuntimeGlobals = require(\"../RuntimeGlobals\");\r\nconst RuntimeModule = require(\"../RuntimeModule\");\r\nconst Template = require(\"../Template\");\r\n\r\nclass EnsureChunkRuntimeModule extends RuntimeModule {\r\n\tconstructor(runtimeRequirements) {\r\n\t\tsuper(\"ensure chunk\");\r\n\t\tthis.runtimeRequirements = runtimeRequirements;\r\n\t}\r\n\r\n\t/**\r\n\t * @returns {string} runtime code\r\n\t */\r\n\tgenerate() {\r\n\t\tconst { runtimeTemplate } = this.compilation;\r\n\t\t// Check if there are non initial chunks which need to be imported using require-ensure\r\n\t\tif (this.runtimeRequirements.has(RuntimeGlobals.ensureChunkHandlers)) {\r\n\t\t\tconst handlers = RuntimeGlobals.ensureChunkHandlers;\r\n\t\t\treturn Template.asString([\r\n\t\t\t\t`${handlers} = {};`,\r\n\t\t\t\t\"// This file contains only the entry chunk.\",\r\n\t\t\t\t\"// The chunk loading function for additional chunks\",\r\n\t\t\t\t`${RuntimeGlobals.ensureChunk} = ${runtimeTemplate.basicFunction(\r\n\t\t\t\t\t\"chunkId\",\r\n\t\t\t\t\t[\r\n\t\t\t\t\t\t`return Promise.all(Object.keys(${handlers}).reduce(${runtimeTemplate.basicFunction(\r\n\t\t\t\t\t\t\t\"promises, key\",\r\n\t\t\t\t\t\t\t[`${handlers}[key](chunkId, promises);`, \"return promises;\"]\r\n\t\t\t\t\t\t)}, []));`\r\n\t\t\t\t\t]\r\n\t\t\t\t)};`\r\n\t\t\t]);\r\n\t\t} else {\r\n\t\t\t// There ensureChunk is used somewhere in the tree, so we need an empty requireEnsure\r\n\t\t\t// function. This can happen with multiple entrypoints.\r\n\t\t\treturn Template.asString([\r\n\t\t\t\t\"// The chunk loading function for additional chunks\",\r\n\t\t\t\t\"// Since all referenced chunks are already included\",\r\n\t\t\t\t\"// in this file, this function is empty here.\",\r\n\t\t\t\t`${RuntimeGlobals.ensureChunk} = ${runtimeTemplate.returningFunction(\r\n\t\t\t\t\t\"Promise.resolve()\"\r\n\t\t\t\t)};`\r\n\t\t\t]);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nmodule.exports = EnsureChunkRuntimeModule;\r\n"],"mappings":"AAAA;AACA;AACA;;AAEA,YAAY;;AAEZ,MAAMA,cAAc,GAAGC,OAAO,CAAC,mBAAmB,CAAC;AACnD,MAAMC,aAAa,GAAGD,OAAO,CAAC,kBAAkB,CAAC;AACjD,MAAME,QAAQ,GAAGF,OAAO,CAAC,aAAa,CAAC;AAEvC,MAAMG,wBAAwB,SAASF,aAAa,CAAC;EACpDG,WAAW,CAACC,mBAAmB,EAAE;IAChC,KAAK,CAAC,cAAc,CAAC;IACrB,IAAI,CAACA,mBAAmB,GAAGA,mBAAmB;EAC/C;;EAEA;AACD;AACA;EACCC,QAAQ,GAAG;IACV,MAAM;MAAEC;IAAgB,CAAC,GAAG,IAAI,CAACC,WAAW;IAC5C;IACA,IAAI,IAAI,CAACH,mBAAmB,CAACI,GAAG,CAACV,cAAc,CAACW,mBAAmB,CAAC,EAAE;MACrE,MAAMC,QAAQ,GAAGZ,cAAc,CAACW,mBAAmB;MACnD,OAAOR,QAAQ,CAACU,QAAQ,CAAC,CACvB,GAAED,QAAS,QAAO,EACnB,6CAA6C,EAC7C,qDAAqD,EACpD,GAAEZ,cAAc,CAACc,WAAY,MAAKN,eAAe,CAACO,aAAa,CAC/D,SAAS,EACT,CACE,kCAAiCH,QAAS,YAAWJ,eAAe,CAACO,aAAa,CAClF,eAAe,EACf,CAAE,GAAEH,QAAS,2BAA0B,EAAE,kBAAkB,CAAC,CAC3D,SAAQ,CACV,CACA,GAAE,CACJ,CAAC;IACH,CAAC,MAAM;MACN;MACA;MACA,OAAOT,QAAQ,CAACU,QAAQ,CAAC,CACxB,qDAAqD,EACrD,qDAAqD,EACrD,+CAA+C,EAC9C,GAAEb,cAAc,CAACc,WAAY,MAAKN,eAAe,CAACQ,iBAAiB,CACnE,mBAAmB,CAClB,GAAE,CACJ,CAAC;IACH;EACD;AACD;AAEAC,MAAM,CAACC,OAAO,GAAGd,wBAAwB"},"metadata":{},"sourceType":"script","externalDependencies":[]}