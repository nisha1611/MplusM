{"ast":null,"code":"/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n*/\n\n\"use strict\";\n\nconst RuntimeGlobals = require(\"../RuntimeGlobals\");\nconst RuntimeModule = require(\"../RuntimeModule\");\nconst Template = require(\"../Template\");\nclass GlobalRuntimeModule extends RuntimeModule {\n  constructor() {\n    super(\"global\");\n  }\n\n  /**\r\n   * @returns {string} runtime code\r\n   */\n  generate() {\n    return Template.asString([`${RuntimeGlobals.global} = (function() {`, Template.indent([\"if (typeof globalThis === 'object') return globalThis;\", \"try {\", Template.indent(\n    // This works in non-strict mode\n    // or\n    // This works if eval is allowed (see CSP)\n    \"return this || new Function('return this')();\"), \"} catch (e) {\", Template.indent(\n    // This works if the window reference is available\n    \"if (typeof window === 'object') return window;\"), \"}\"\n    // It can still be `undefined`, but nothing to do about it...\n    // We return `undefined`, instead of nothing here, so it's\n    // easier to handle this case:\n    //   if (!global) { … }\n    ]), \"})();\"]);\n  }\n}\nmodule.exports = GlobalRuntimeModule;","map":{"version":3,"names":["RuntimeGlobals","require","RuntimeModule","Template","GlobalRuntimeModule","constructor","generate","asString","global","indent","module","exports"],"sources":["C:/Users/91930/Desktop/Github projects/Pharmacy Demo/front-end/node_modules/webpack/lib/runtime/GlobalRuntimeModule.js"],"sourcesContent":["/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n*/\r\n\r\n\"use strict\";\r\n\r\nconst RuntimeGlobals = require(\"../RuntimeGlobals\");\r\nconst RuntimeModule = require(\"../RuntimeModule\");\r\nconst Template = require(\"../Template\");\r\n\r\nclass GlobalRuntimeModule extends RuntimeModule {\r\n\tconstructor() {\r\n\t\tsuper(\"global\");\r\n\t}\r\n\r\n\t/**\r\n\t * @returns {string} runtime code\r\n\t */\r\n\tgenerate() {\r\n\t\treturn Template.asString([\r\n\t\t\t`${RuntimeGlobals.global} = (function() {`,\r\n\t\t\tTemplate.indent([\r\n\t\t\t\t\"if (typeof globalThis === 'object') return globalThis;\",\r\n\t\t\t\t\"try {\",\r\n\t\t\t\tTemplate.indent(\r\n\t\t\t\t\t// This works in non-strict mode\r\n\t\t\t\t\t// or\r\n\t\t\t\t\t// This works if eval is allowed (see CSP)\r\n\t\t\t\t\t\"return this || new Function('return this')();\"\r\n\t\t\t\t),\r\n\t\t\t\t\"} catch (e) {\",\r\n\t\t\t\tTemplate.indent(\r\n\t\t\t\t\t// This works if the window reference is available\r\n\t\t\t\t\t\"if (typeof window === 'object') return window;\"\r\n\t\t\t\t),\r\n\t\t\t\t\"}\"\r\n\t\t\t\t// It can still be `undefined`, but nothing to do about it...\r\n\t\t\t\t// We return `undefined`, instead of nothing here, so it's\r\n\t\t\t\t// easier to handle this case:\r\n\t\t\t\t//   if (!global) { … }\r\n\t\t\t]),\r\n\t\t\t\"})();\"\r\n\t\t]);\r\n\t}\r\n}\r\n\r\nmodule.exports = GlobalRuntimeModule;\r\n"],"mappings":"AAAA;AACA;AACA;;AAEA,YAAY;;AAEZ,MAAMA,cAAc,GAAGC,OAAO,CAAC,mBAAmB,CAAC;AACnD,MAAMC,aAAa,GAAGD,OAAO,CAAC,kBAAkB,CAAC;AACjD,MAAME,QAAQ,GAAGF,OAAO,CAAC,aAAa,CAAC;AAEvC,MAAMG,mBAAmB,SAASF,aAAa,CAAC;EAC/CG,WAAW,GAAG;IACb,KAAK,CAAC,QAAQ,CAAC;EAChB;;EAEA;AACD;AACA;EACCC,QAAQ,GAAG;IACV,OAAOH,QAAQ,CAACI,QAAQ,CAAC,CACvB,GAAEP,cAAc,CAACQ,MAAO,kBAAiB,EAC1CL,QAAQ,CAACM,MAAM,CAAC,CACf,wDAAwD,EACxD,OAAO,EACPN,QAAQ,CAACM,MAAM;IACd;IACA;IACA;IACA,+CAA+C,CAC/C,EACD,eAAe,EACfN,QAAQ,CAACM,MAAM;IACd;IACA,gDAAgD,CAChD,EACD;IACA;IACA;IACA;IACA;IAAA,CACA,CAAC,EACF,OAAO,CACP,CAAC;EACH;AACD;AAEAC,MAAM,CAACC,OAAO,GAAGP,mBAAmB"},"metadata":{},"sourceType":"script","externalDependencies":[]}