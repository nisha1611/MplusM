{"ast":null,"code":"/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Tobias Koppers @sokra\r\n*/\n\n\"use strict\";\n\nconst parseJson = require(\"json-parse-even-better-errors\");\nconst Parser = require(\"../Parser\");\nconst JsonExportsDependency = require(\"../dependencies/JsonExportsDependency\");\nconst JsonData = require(\"./JsonData\");\n\n/** @typedef {import(\"../../declarations/plugins/JsonModulesPluginParser\").JsonModulesPluginParserOptions} JsonModulesPluginParserOptions */\n/** @typedef {import(\"../Parser\").ParserState} ParserState */\n/** @typedef {import(\"../Parser\").PreparsedAst} PreparsedAst */\n\nclass JsonParser extends Parser {\n  /**\r\n   * @param {JsonModulesPluginParserOptions} options parser options\r\n   */\n  constructor(options) {\n    super();\n    this.options = options || {};\n  }\n\n  /**\r\n   * @param {string | Buffer | PreparsedAst} source the source to parse\r\n   * @param {ParserState} state the parser state\r\n   * @returns {ParserState} the parser state\r\n   */\n  parse(source, state) {\n    if (Buffer.isBuffer(source)) {\n      source = source.toString(\"utf-8\");\n    }\n\n    /** @type {JsonModulesPluginParserOptions[\"parse\"]} */\n    const parseFn = typeof this.options.parse === \"function\" ? this.options.parse : parseJson;\n    const data = typeof source === \"object\" ? source : parseFn(source[0] === \"\\ufeff\" ? source.slice(1) : source);\n    const jsonData = new JsonData(data);\n    state.module.buildInfo.jsonData = jsonData;\n    state.module.buildInfo.strict = true;\n    state.module.buildMeta.exportsType = \"default\";\n    state.module.buildMeta.defaultObject = typeof data === \"object\" ? \"redirect-warn\" : false;\n    state.module.addDependency(new JsonExportsDependency(jsonData));\n    return state;\n  }\n}\nmodule.exports = JsonParser;","map":{"version":3,"names":["parseJson","require","Parser","JsonExportsDependency","JsonData","JsonParser","constructor","options","parse","source","state","Buffer","isBuffer","toString","parseFn","data","slice","jsonData","module","buildInfo","strict","buildMeta","exportsType","defaultObject","addDependency","exports"],"sources":["C:/Users/91930/Desktop/Github projects/Pharmacy Demo/front-end/node_modules/webpack/lib/json/JsonParser.js"],"sourcesContent":["/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Tobias Koppers @sokra\r\n*/\r\n\r\n\"use strict\";\r\n\r\nconst parseJson = require(\"json-parse-even-better-errors\");\r\nconst Parser = require(\"../Parser\");\r\nconst JsonExportsDependency = require(\"../dependencies/JsonExportsDependency\");\r\nconst JsonData = require(\"./JsonData\");\r\n\r\n/** @typedef {import(\"../../declarations/plugins/JsonModulesPluginParser\").JsonModulesPluginParserOptions} JsonModulesPluginParserOptions */\r\n/** @typedef {import(\"../Parser\").ParserState} ParserState */\r\n/** @typedef {import(\"../Parser\").PreparsedAst} PreparsedAst */\r\n\r\nclass JsonParser extends Parser {\r\n\t/**\r\n\t * @param {JsonModulesPluginParserOptions} options parser options\r\n\t */\r\n\tconstructor(options) {\r\n\t\tsuper();\r\n\t\tthis.options = options || {};\r\n\t}\r\n\r\n\t/**\r\n\t * @param {string | Buffer | PreparsedAst} source the source to parse\r\n\t * @param {ParserState} state the parser state\r\n\t * @returns {ParserState} the parser state\r\n\t */\r\n\tparse(source, state) {\r\n\t\tif (Buffer.isBuffer(source)) {\r\n\t\t\tsource = source.toString(\"utf-8\");\r\n\t\t}\r\n\r\n\t\t/** @type {JsonModulesPluginParserOptions[\"parse\"]} */\r\n\t\tconst parseFn =\r\n\t\t\ttypeof this.options.parse === \"function\" ? this.options.parse : parseJson;\r\n\r\n\t\tconst data =\r\n\t\t\ttypeof source === \"object\"\r\n\t\t\t\t? source\r\n\t\t\t\t: parseFn(source[0] === \"\\ufeff\" ? source.slice(1) : source);\r\n\t\tconst jsonData = new JsonData(data);\r\n\t\tstate.module.buildInfo.jsonData = jsonData;\r\n\t\tstate.module.buildInfo.strict = true;\r\n\t\tstate.module.buildMeta.exportsType = \"default\";\r\n\t\tstate.module.buildMeta.defaultObject =\r\n\t\t\ttypeof data === \"object\" ? \"redirect-warn\" : false;\r\n\t\tstate.module.addDependency(new JsonExportsDependency(jsonData));\r\n\t\treturn state;\r\n\t}\r\n}\r\n\r\nmodule.exports = JsonParser;\r\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ,MAAMA,SAAS,GAAGC,OAAO,CAAC,+BAA+B,CAAC;AAC1D,MAAMC,MAAM,GAAGD,OAAO,CAAC,WAAW,CAAC;AACnC,MAAME,qBAAqB,GAAGF,OAAO,CAAC,uCAAuC,CAAC;AAC9E,MAAMG,QAAQ,GAAGH,OAAO,CAAC,YAAY,CAAC;;AAEtC;AACA;AACA;;AAEA,MAAMI,UAAU,SAASH,MAAM,CAAC;EAC/B;AACD;AACA;EACCI,WAAW,CAACC,OAAO,EAAE;IACpB,KAAK,EAAE;IACP,IAAI,CAACA,OAAO,GAAGA,OAAO,IAAI,CAAC,CAAC;EAC7B;;EAEA;AACD;AACA;AACA;AACA;EACCC,KAAK,CAACC,MAAM,EAAEC,KAAK,EAAE;IACpB,IAAIC,MAAM,CAACC,QAAQ,CAACH,MAAM,CAAC,EAAE;MAC5BA,MAAM,GAAGA,MAAM,CAACI,QAAQ,CAAC,OAAO,CAAC;IAClC;;IAEA;IACA,MAAMC,OAAO,GACZ,OAAO,IAAI,CAACP,OAAO,CAACC,KAAK,KAAK,UAAU,GAAG,IAAI,CAACD,OAAO,CAACC,KAAK,GAAGR,SAAS;IAE1E,MAAMe,IAAI,GACT,OAAON,MAAM,KAAK,QAAQ,GACvBA,MAAM,GACNK,OAAO,CAACL,MAAM,CAAC,CAAC,CAAC,KAAK,QAAQ,GAAGA,MAAM,CAACO,KAAK,CAAC,CAAC,CAAC,GAAGP,MAAM,CAAC;IAC9D,MAAMQ,QAAQ,GAAG,IAAIb,QAAQ,CAACW,IAAI,CAAC;IACnCL,KAAK,CAACQ,MAAM,CAACC,SAAS,CAACF,QAAQ,GAAGA,QAAQ;IAC1CP,KAAK,CAACQ,MAAM,CAACC,SAAS,CAACC,MAAM,GAAG,IAAI;IACpCV,KAAK,CAACQ,MAAM,CAACG,SAAS,CAACC,WAAW,GAAG,SAAS;IAC9CZ,KAAK,CAACQ,MAAM,CAACG,SAAS,CAACE,aAAa,GACnC,OAAOR,IAAI,KAAK,QAAQ,GAAG,eAAe,GAAG,KAAK;IACnDL,KAAK,CAACQ,MAAM,CAACM,aAAa,CAAC,IAAIrB,qBAAqB,CAACc,QAAQ,CAAC,CAAC;IAC/D,OAAOP,KAAK;EACb;AACD;AAEAQ,MAAM,CAACO,OAAO,GAAGpB,UAAU"},"metadata":{},"sourceType":"script","externalDependencies":[]}