{"ast":null,"code":"/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Tobias Koppers @sokra\r\n*/\n\n\"use strict\";\n\nconst RuntimeGlobals = require(\"../RuntimeGlobals\");\nconst Template = require(\"../Template\");\nconst WasmChunkLoadingRuntimeModule = require(\"../wasm-sync/WasmChunkLoadingRuntimeModule\");\n\n/** @typedef {import(\"../Compiler\")} Compiler */\n\n// TODO webpack 6 remove\n\nclass ReadFileCompileWasmPlugin {\n  constructor(options) {\n    this.options = options || {};\n  }\n\n  /**\r\n   * Apply the plugin\r\n   * @param {Compiler} compiler the compiler instance\r\n   * @returns {void}\r\n   */\n  apply(compiler) {\n    compiler.hooks.thisCompilation.tap(\"ReadFileCompileWasmPlugin\", compilation => {\n      const globalWasmLoading = compilation.outputOptions.wasmLoading;\n      const isEnabledForChunk = chunk => {\n        const options = chunk.getEntryOptions();\n        const wasmLoading = options && options.wasmLoading !== undefined ? options.wasmLoading : globalWasmLoading;\n        return wasmLoading === \"async-node\";\n      };\n      const generateLoadBinaryCode = path => Template.asString([\"new Promise(function (resolve, reject) {\", Template.indent([\"var { readFile } = require('fs');\", \"var { join } = require('path');\", \"\", \"try {\", Template.indent([`readFile(join(__dirname, ${path}), function(err, buffer){`, Template.indent([\"if (err) return reject(err);\", \"\", \"// Fake fetch response\", \"resolve({\", Template.indent([\"arrayBuffer() { return buffer; }\"]), \"});\"]), \"});\"]), \"} catch (err) { reject(err); }\"]), \"})\"]);\n      compilation.hooks.runtimeRequirementInTree.for(RuntimeGlobals.ensureChunkHandlers).tap(\"ReadFileCompileWasmPlugin\", (chunk, set) => {\n        if (!isEnabledForChunk(chunk)) return;\n        const chunkGraph = compilation.chunkGraph;\n        if (!chunkGraph.hasModuleInGraph(chunk, m => m.type === \"webassembly/sync\")) {\n          return;\n        }\n        set.add(RuntimeGlobals.moduleCache);\n        compilation.addRuntimeModule(chunk, new WasmChunkLoadingRuntimeModule({\n          generateLoadBinaryCode,\n          supportsStreaming: false,\n          mangleImports: this.options.mangleImports,\n          runtimeRequirements: set\n        }));\n      });\n    });\n  }\n}\nmodule.exports = ReadFileCompileWasmPlugin;","map":{"version":3,"names":["RuntimeGlobals","require","Template","WasmChunkLoadingRuntimeModule","ReadFileCompileWasmPlugin","constructor","options","apply","compiler","hooks","thisCompilation","tap","compilation","globalWasmLoading","outputOptions","wasmLoading","isEnabledForChunk","chunk","getEntryOptions","undefined","generateLoadBinaryCode","path","asString","indent","runtimeRequirementInTree","for","ensureChunkHandlers","set","chunkGraph","hasModuleInGraph","m","type","add","moduleCache","addRuntimeModule","supportsStreaming","mangleImports","runtimeRequirements","module","exports"],"sources":["C:/Users/91930/Desktop/Github projects/Pharmacy Demo/front-end/node_modules/webpack/lib/node/ReadFileCompileWasmPlugin.js"],"sourcesContent":["/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Tobias Koppers @sokra\r\n*/\r\n\r\n\"use strict\";\r\n\r\nconst RuntimeGlobals = require(\"../RuntimeGlobals\");\r\nconst Template = require(\"../Template\");\r\nconst WasmChunkLoadingRuntimeModule = require(\"../wasm-sync/WasmChunkLoadingRuntimeModule\");\r\n\r\n/** @typedef {import(\"../Compiler\")} Compiler */\r\n\r\n// TODO webpack 6 remove\r\n\r\nclass ReadFileCompileWasmPlugin {\r\n\tconstructor(options) {\r\n\t\tthis.options = options || {};\r\n\t}\r\n\r\n\t/**\r\n\t * Apply the plugin\r\n\t * @param {Compiler} compiler the compiler instance\r\n\t * @returns {void}\r\n\t */\r\n\tapply(compiler) {\r\n\t\tcompiler.hooks.thisCompilation.tap(\r\n\t\t\t\"ReadFileCompileWasmPlugin\",\r\n\t\t\tcompilation => {\r\n\t\t\t\tconst globalWasmLoading = compilation.outputOptions.wasmLoading;\r\n\t\t\t\tconst isEnabledForChunk = chunk => {\r\n\t\t\t\t\tconst options = chunk.getEntryOptions();\r\n\t\t\t\t\tconst wasmLoading =\r\n\t\t\t\t\t\toptions && options.wasmLoading !== undefined\r\n\t\t\t\t\t\t\t? options.wasmLoading\r\n\t\t\t\t\t\t\t: globalWasmLoading;\r\n\t\t\t\t\treturn wasmLoading === \"async-node\";\r\n\t\t\t\t};\r\n\t\t\t\tconst generateLoadBinaryCode = path =>\r\n\t\t\t\t\tTemplate.asString([\r\n\t\t\t\t\t\t\"new Promise(function (resolve, reject) {\",\r\n\t\t\t\t\t\tTemplate.indent([\r\n\t\t\t\t\t\t\t\"var { readFile } = require('fs');\",\r\n\t\t\t\t\t\t\t\"var { join } = require('path');\",\r\n\t\t\t\t\t\t\t\"\",\r\n\t\t\t\t\t\t\t\"try {\",\r\n\t\t\t\t\t\t\tTemplate.indent([\r\n\t\t\t\t\t\t\t\t`readFile(join(__dirname, ${path}), function(err, buffer){`,\r\n\t\t\t\t\t\t\t\tTemplate.indent([\r\n\t\t\t\t\t\t\t\t\t\"if (err) return reject(err);\",\r\n\t\t\t\t\t\t\t\t\t\"\",\r\n\t\t\t\t\t\t\t\t\t\"// Fake fetch response\",\r\n\t\t\t\t\t\t\t\t\t\"resolve({\",\r\n\t\t\t\t\t\t\t\t\tTemplate.indent([\"arrayBuffer() { return buffer; }\"]),\r\n\t\t\t\t\t\t\t\t\t\"});\"\r\n\t\t\t\t\t\t\t\t]),\r\n\t\t\t\t\t\t\t\t\"});\"\r\n\t\t\t\t\t\t\t]),\r\n\t\t\t\t\t\t\t\"} catch (err) { reject(err); }\"\r\n\t\t\t\t\t\t]),\r\n\t\t\t\t\t\t\"})\"\r\n\t\t\t\t\t]);\r\n\r\n\t\t\t\tcompilation.hooks.runtimeRequirementInTree\r\n\t\t\t\t\t.for(RuntimeGlobals.ensureChunkHandlers)\r\n\t\t\t\t\t.tap(\"ReadFileCompileWasmPlugin\", (chunk, set) => {\r\n\t\t\t\t\t\tif (!isEnabledForChunk(chunk)) return;\r\n\t\t\t\t\t\tconst chunkGraph = compilation.chunkGraph;\r\n\t\t\t\t\t\tif (\r\n\t\t\t\t\t\t\t!chunkGraph.hasModuleInGraph(\r\n\t\t\t\t\t\t\t\tchunk,\r\n\t\t\t\t\t\t\t\tm => m.type === \"webassembly/sync\"\r\n\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t) {\r\n\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tset.add(RuntimeGlobals.moduleCache);\r\n\t\t\t\t\t\tcompilation.addRuntimeModule(\r\n\t\t\t\t\t\t\tchunk,\r\n\t\t\t\t\t\t\tnew WasmChunkLoadingRuntimeModule({\r\n\t\t\t\t\t\t\t\tgenerateLoadBinaryCode,\r\n\t\t\t\t\t\t\t\tsupportsStreaming: false,\r\n\t\t\t\t\t\t\t\tmangleImports: this.options.mangleImports,\r\n\t\t\t\t\t\t\t\truntimeRequirements: set\r\n\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t});\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n}\r\n\r\nmodule.exports = ReadFileCompileWasmPlugin;\r\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ,MAAMA,cAAc,GAAGC,OAAO,CAAC,mBAAmB,CAAC;AACnD,MAAMC,QAAQ,GAAGD,OAAO,CAAC,aAAa,CAAC;AACvC,MAAME,6BAA6B,GAAGF,OAAO,CAAC,4CAA4C,CAAC;;AAE3F;;AAEA;;AAEA,MAAMG,yBAAyB,CAAC;EAC/BC,WAAW,CAACC,OAAO,EAAE;IACpB,IAAI,CAACA,OAAO,GAAGA,OAAO,IAAI,CAAC,CAAC;EAC7B;;EAEA;AACD;AACA;AACA;AACA;EACCC,KAAK,CAACC,QAAQ,EAAE;IACfA,QAAQ,CAACC,KAAK,CAACC,eAAe,CAACC,GAAG,CACjC,2BAA2B,EAC3BC,WAAW,IAAI;MACd,MAAMC,iBAAiB,GAAGD,WAAW,CAACE,aAAa,CAACC,WAAW;MAC/D,MAAMC,iBAAiB,GAAGC,KAAK,IAAI;QAClC,MAAMX,OAAO,GAAGW,KAAK,CAACC,eAAe,EAAE;QACvC,MAAMH,WAAW,GAChBT,OAAO,IAAIA,OAAO,CAACS,WAAW,KAAKI,SAAS,GACzCb,OAAO,CAACS,WAAW,GACnBF,iBAAiB;QACrB,OAAOE,WAAW,KAAK,YAAY;MACpC,CAAC;MACD,MAAMK,sBAAsB,GAAGC,IAAI,IAClCnB,QAAQ,CAACoB,QAAQ,CAAC,CACjB,0CAA0C,EAC1CpB,QAAQ,CAACqB,MAAM,CAAC,CACf,mCAAmC,EACnC,iCAAiC,EACjC,EAAE,EACF,OAAO,EACPrB,QAAQ,CAACqB,MAAM,CAAC,CACd,4BAA2BF,IAAK,2BAA0B,EAC3DnB,QAAQ,CAACqB,MAAM,CAAC,CACf,8BAA8B,EAC9B,EAAE,EACF,wBAAwB,EACxB,WAAW,EACXrB,QAAQ,CAACqB,MAAM,CAAC,CAAC,kCAAkC,CAAC,CAAC,EACrD,KAAK,CACL,CAAC,EACF,KAAK,CACL,CAAC,EACF,gCAAgC,CAChC,CAAC,EACF,IAAI,CACJ,CAAC;MAEHX,WAAW,CAACH,KAAK,CAACe,wBAAwB,CACxCC,GAAG,CAACzB,cAAc,CAAC0B,mBAAmB,CAAC,CACvCf,GAAG,CAAC,2BAA2B,EAAE,CAACM,KAAK,EAAEU,GAAG,KAAK;QACjD,IAAI,CAACX,iBAAiB,CAACC,KAAK,CAAC,EAAE;QAC/B,MAAMW,UAAU,GAAGhB,WAAW,CAACgB,UAAU;QACzC,IACC,CAACA,UAAU,CAACC,gBAAgB,CAC3BZ,KAAK,EACLa,CAAC,IAAIA,CAAC,CAACC,IAAI,KAAK,kBAAkB,CAClC,EACA;UACD;QACD;QACAJ,GAAG,CAACK,GAAG,CAAChC,cAAc,CAACiC,WAAW,CAAC;QACnCrB,WAAW,CAACsB,gBAAgB,CAC3BjB,KAAK,EACL,IAAId,6BAA6B,CAAC;UACjCiB,sBAAsB;UACtBe,iBAAiB,EAAE,KAAK;UACxBC,aAAa,EAAE,IAAI,CAAC9B,OAAO,CAAC8B,aAAa;UACzCC,mBAAmB,EAAEV;QACtB,CAAC,CAAC,CACF;MACF,CAAC,CAAC;IACJ,CAAC,CACD;EACF;AACD;AAEAW,MAAM,CAACC,OAAO,GAAGnC,yBAAyB"},"metadata":{},"sourceType":"script","externalDependencies":[]}