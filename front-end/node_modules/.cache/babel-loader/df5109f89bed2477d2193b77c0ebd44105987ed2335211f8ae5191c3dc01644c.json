{"ast":null,"code":"import { CredentialsProviderError } from \"@aws-sdk/property-provider\";\nimport { parse } from \"url\";\nimport { httpRequest } from \"./remoteProvider/httpRequest\";\nimport { fromImdsCredentials, isImdsCredentials } from \"./remoteProvider/ImdsCredentials\";\nimport { providerConfigFromInit } from \"./remoteProvider/RemoteProviderInit\";\nimport { retry } from \"./remoteProvider/retry\";\nexport const ENV_CMDS_FULL_URI = \"AWS_CONTAINER_CREDENTIALS_FULL_URI\";\nexport const ENV_CMDS_RELATIVE_URI = \"AWS_CONTAINER_CREDENTIALS_RELATIVE_URI\";\nexport const ENV_CMDS_AUTH_TOKEN = \"AWS_CONTAINER_AUTHORIZATION_TOKEN\";\nexport const fromContainerMetadata = function () {\n  let init = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const {\n    timeout,\n    maxRetries\n  } = providerConfigFromInit(init);\n  return () => retry(async () => {\n    const requestOptions = await getCmdsUri();\n    const credsResponse = JSON.parse(await requestFromEcsImds(timeout, requestOptions));\n    if (!isImdsCredentials(credsResponse)) {\n      throw new CredentialsProviderError(\"Invalid response received from instance metadata service.\");\n    }\n    return fromImdsCredentials(credsResponse);\n  }, maxRetries);\n};\nconst requestFromEcsImds = async (timeout, options) => {\n  if (process.env[ENV_CMDS_AUTH_TOKEN]) {\n    options.headers = {\n      ...options.headers,\n      Authorization: process.env[ENV_CMDS_AUTH_TOKEN]\n    };\n  }\n  const buffer = await httpRequest({\n    ...options,\n    timeout\n  });\n  return buffer.toString();\n};\nconst CMDS_IP = \"169.254.170.2\";\nconst GREENGRASS_HOSTS = {\n  localhost: true,\n  \"127.0.0.1\": true\n};\nconst GREENGRASS_PROTOCOLS = {\n  \"http:\": true,\n  \"https:\": true\n};\nconst getCmdsUri = async () => {\n  if (process.env[ENV_CMDS_RELATIVE_URI]) {\n    return {\n      hostname: CMDS_IP,\n      path: process.env[ENV_CMDS_RELATIVE_URI]\n    };\n  }\n  if (process.env[ENV_CMDS_FULL_URI]) {\n    const parsed = parse(process.env[ENV_CMDS_FULL_URI]);\n    if (!parsed.hostname || !(parsed.hostname in GREENGRASS_HOSTS)) {\n      throw new CredentialsProviderError(`${parsed.hostname} is not a valid container metadata service hostname`, false);\n    }\n    if (!parsed.protocol || !(parsed.protocol in GREENGRASS_PROTOCOLS)) {\n      throw new CredentialsProviderError(`${parsed.protocol} is not a valid container metadata service protocol`, false);\n    }\n    return {\n      ...parsed,\n      port: parsed.port ? parseInt(parsed.port, 10) : undefined\n    };\n  }\n  throw new CredentialsProviderError(\"The container metadata credential provider cannot be used unless\" + ` the ${ENV_CMDS_RELATIVE_URI} or ${ENV_CMDS_FULL_URI} environment` + \" variable is set\", false);\n};","map":{"version":3,"names":["CredentialsProviderError","parse","httpRequest","fromImdsCredentials","isImdsCredentials","providerConfigFromInit","retry","ENV_CMDS_FULL_URI","ENV_CMDS_RELATIVE_URI","ENV_CMDS_AUTH_TOKEN","fromContainerMetadata","init","timeout","maxRetries","requestOptions","getCmdsUri","credsResponse","JSON","requestFromEcsImds","options","process","env","headers","Authorization","buffer","toString","CMDS_IP","GREENGRASS_HOSTS","localhost","GREENGRASS_PROTOCOLS","hostname","path","parsed","protocol","port","parseInt","undefined"],"sources":["C:/Users/91930/Desktop/Github projects/Pharmacy Demo/back-end/node_modules/@aws-sdk/credential-provider-imds/dist-es/fromContainerMetadata.js"],"sourcesContent":["import { CredentialsProviderError } from \"@aws-sdk/property-provider\";\r\nimport { parse } from \"url\";\r\nimport { httpRequest } from \"./remoteProvider/httpRequest\";\r\nimport { fromImdsCredentials, isImdsCredentials } from \"./remoteProvider/ImdsCredentials\";\r\nimport { providerConfigFromInit } from \"./remoteProvider/RemoteProviderInit\";\r\nimport { retry } from \"./remoteProvider/retry\";\r\nexport const ENV_CMDS_FULL_URI = \"AWS_CONTAINER_CREDENTIALS_FULL_URI\";\r\nexport const ENV_CMDS_RELATIVE_URI = \"AWS_CONTAINER_CREDENTIALS_RELATIVE_URI\";\r\nexport const ENV_CMDS_AUTH_TOKEN = \"AWS_CONTAINER_AUTHORIZATION_TOKEN\";\r\nexport const fromContainerMetadata = (init = {}) => {\r\n    const { timeout, maxRetries } = providerConfigFromInit(init);\r\n    return () => retry(async () => {\r\n        const requestOptions = await getCmdsUri();\r\n        const credsResponse = JSON.parse(await requestFromEcsImds(timeout, requestOptions));\r\n        if (!isImdsCredentials(credsResponse)) {\r\n            throw new CredentialsProviderError(\"Invalid response received from instance metadata service.\");\r\n        }\r\n        return fromImdsCredentials(credsResponse);\r\n    }, maxRetries);\r\n};\r\nconst requestFromEcsImds = async (timeout, options) => {\r\n    if (process.env[ENV_CMDS_AUTH_TOKEN]) {\r\n        options.headers = {\r\n            ...options.headers,\r\n            Authorization: process.env[ENV_CMDS_AUTH_TOKEN],\r\n        };\r\n    }\r\n    const buffer = await httpRequest({\r\n        ...options,\r\n        timeout,\r\n    });\r\n    return buffer.toString();\r\n};\r\nconst CMDS_IP = \"169.254.170.2\";\r\nconst GREENGRASS_HOSTS = {\r\n    localhost: true,\r\n    \"127.0.0.1\": true,\r\n};\r\nconst GREENGRASS_PROTOCOLS = {\r\n    \"http:\": true,\r\n    \"https:\": true,\r\n};\r\nconst getCmdsUri = async () => {\r\n    if (process.env[ENV_CMDS_RELATIVE_URI]) {\r\n        return {\r\n            hostname: CMDS_IP,\r\n            path: process.env[ENV_CMDS_RELATIVE_URI],\r\n        };\r\n    }\r\n    if (process.env[ENV_CMDS_FULL_URI]) {\r\n        const parsed = parse(process.env[ENV_CMDS_FULL_URI]);\r\n        if (!parsed.hostname || !(parsed.hostname in GREENGRASS_HOSTS)) {\r\n            throw new CredentialsProviderError(`${parsed.hostname} is not a valid container metadata service hostname`, false);\r\n        }\r\n        if (!parsed.protocol || !(parsed.protocol in GREENGRASS_PROTOCOLS)) {\r\n            throw new CredentialsProviderError(`${parsed.protocol} is not a valid container metadata service protocol`, false);\r\n        }\r\n        return {\r\n            ...parsed,\r\n            port: parsed.port ? parseInt(parsed.port, 10) : undefined,\r\n        };\r\n    }\r\n    throw new CredentialsProviderError(\"The container metadata credential provider cannot be used unless\" +\r\n        ` the ${ENV_CMDS_RELATIVE_URI} or ${ENV_CMDS_FULL_URI} environment` +\r\n        \" variable is set\", false);\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}