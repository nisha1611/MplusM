{"ast":null,"code":"'use strict';\n\nconst Document = require('../../../document');\nconst ArraySubdocument = require('../../ArraySubdocument');\nconst MongooseError = require('../../../error/mongooseError');\nconst cleanModifiedSubpaths = require('../../../helpers/document/cleanModifiedSubpaths');\nconst internalToObjectOptions = require('../../../options').internalToObjectOptions;\nconst mpath = require('mpath');\nconst utils = require('../../../utils');\nconst isBsonType = require('../../../helpers/isBsonType');\nconst arrayAtomicsSymbol = require('../../../helpers/symbols').arrayAtomicsSymbol;\nconst arrayParentSymbol = require('../../../helpers/symbols').arrayParentSymbol;\nconst arrayPathSymbol = require('../../../helpers/symbols').arrayPathSymbol;\nconst arraySchemaSymbol = require('../../../helpers/symbols').arraySchemaSymbol;\nconst populateModelSymbol = require('../../../helpers/symbols').populateModelSymbol;\nconst slicedSymbol = Symbol('mongoose#Array#sliced');\nconst _basePush = Array.prototype.push;\n\n/*!\r\n * ignore\r\n */\n\nconst methods = {\n  /**\r\n   * Depopulates stored atomic operation values as necessary for direct insertion to MongoDB.\r\n   *\r\n   * If no atomics exist, we return all array values after conversion.\r\n   *\r\n   * @return {Array}\r\n   * @method $__getAtomics\r\n   * @memberOf MongooseArray\r\n   * @instance\r\n   * @api private\r\n   */\n\n  $__getAtomics() {\n    const ret = [];\n    const keys = Object.keys(this[arrayAtomicsSymbol] || {});\n    let i = keys.length;\n    const opts = Object.assign({}, internalToObjectOptions, {\n      _isNested: true\n    });\n    if (i === 0) {\n      ret[0] = ['$set', this.toObject(opts)];\n      return ret;\n    }\n    while (i--) {\n      const op = keys[i];\n      let val = this[arrayAtomicsSymbol][op];\n\n      // the atomic values which are arrays are not MongooseArrays. we\n      // need to convert their elements as if they were MongooseArrays\n      // to handle populated arrays versus DocumentArrays properly.\n      if (utils.isMongooseObject(val)) {\n        val = val.toObject(opts);\n      } else if (Array.isArray(val)) {\n        val = this.toObject.call(val, opts);\n      } else if (val != null && Array.isArray(val.$each)) {\n        val.$each = this.toObject.call(val.$each, opts);\n      } else if (val != null && typeof val.valueOf === 'function') {\n        val = val.valueOf();\n      }\n      if (op === '$addToSet') {\n        val = {\n          $each: val\n        };\n      }\n      ret.push([op, val]);\n    }\n    return ret;\n  },\n  /*!\r\n   * ignore\r\n   */\n\n  $atomics() {\n    return this[arrayAtomicsSymbol];\n  },\n  /*!\r\n   * ignore\r\n   */\n\n  $parent() {\n    return this[arrayParentSymbol];\n  },\n  /*!\r\n   * ignore\r\n   */\n\n  $path() {\n    return this[arrayPathSymbol];\n  },\n  /**\r\n   * Atomically shifts the array at most one time per document `save()`.\r\n   *\r\n   * #### Note:\r\n   *\r\n   * _Calling this multiple times on an array before saving sends the same command as calling it once._\r\n   * _This update is implemented using the MongoDB [$pop](https://www.mongodb.org/display/DOCS/Updating/#Updating-%24pop) method which enforces this restriction._\r\n   *\r\n   *      doc.array = [1,2,3];\r\n   *\r\n   *      const shifted = doc.array.$shift();\r\n   *      console.log(shifted); // 1\r\n   *      console.log(doc.array); // [2,3]\r\n   *\r\n   *      // no affect\r\n   *      shifted = doc.array.$shift();\r\n   *      console.log(doc.array); // [2,3]\r\n   *\r\n   *      doc.save(function (err) {\r\n   *        if (err) return handleError(err);\r\n   *\r\n   *        // we saved, now $shift works again\r\n   *        shifted = doc.array.$shift();\r\n   *        console.log(shifted ); // 2\r\n   *        console.log(doc.array); // [3]\r\n   *      })\r\n   *\r\n   * @api public\r\n   * @memberOf MongooseArray\r\n   * @instance\r\n   * @method $shift\r\n   * @see mongodb https://www.mongodb.org/display/DOCS/Updating/#Updating-%24pop\r\n   */\n\n  $shift() {\n    this._registerAtomic('$pop', -1);\n    this._markModified();\n\n    // only allow shifting once\n    if (this._shifted) {\n      return;\n    }\n    this._shifted = true;\n    return [].shift.call(this);\n  },\n  /**\r\n   * Pops the array atomically at most one time per document `save()`.\r\n   *\r\n   * #### NOTE:\r\n   *\r\n   * _Calling this multiple times on an array before saving sends the same command as calling it once._\r\n   * _This update is implemented using the MongoDB [$pop](https://www.mongodb.org/display/DOCS/Updating/#Updating-%24pop) method which enforces this restriction._\r\n   *\r\n   *      doc.array = [1,2,3];\r\n   *\r\n   *      const popped = doc.array.$pop();\r\n   *      console.log(popped); // 3\r\n   *      console.log(doc.array); // [1,2]\r\n   *\r\n   *      // no affect\r\n   *      popped = doc.array.$pop();\r\n   *      console.log(doc.array); // [1,2]\r\n   *\r\n   *      doc.save(function (err) {\r\n   *        if (err) return handleError(err);\r\n   *\r\n   *        // we saved, now $pop works again\r\n   *        popped = doc.array.$pop();\r\n   *        console.log(popped); // 2\r\n   *        console.log(doc.array); // [1]\r\n   *      })\r\n   *\r\n   * @api public\r\n   * @method $pop\r\n   * @memberOf MongooseArray\r\n   * @instance\r\n   * @see mongodb https://www.mongodb.org/display/DOCS/Updating/#Updating-%24pop\r\n   * @method $pop\r\n   * @memberOf MongooseArray\r\n   */\n\n  $pop() {\n    this._registerAtomic('$pop', 1);\n    this._markModified();\n\n    // only allow popping once\n    if (this._popped) {\n      return;\n    }\n    this._popped = true;\n    return [].pop.call(this);\n  },\n  /*!\r\n   * ignore\r\n   */\n\n  $schema() {\n    return this[arraySchemaSymbol];\n  },\n  /**\r\n   * Casts a member based on this arrays schema.\r\n   *\r\n   * @param {any} value\r\n   * @return value the casted value\r\n   * @method _cast\r\n   * @api private\r\n   * @memberOf MongooseArray\r\n   */\n\n  _cast(value) {\n    let populated = false;\n    let Model;\n    const parent = this[arrayParentSymbol];\n    if (parent) {\n      populated = parent.$populated(this[arrayPathSymbol], true);\n    }\n    if (populated && value !== null && value !== undefined) {\n      // cast to the populated Models schema\n      Model = populated.options[populateModelSymbol];\n\n      // only objects are permitted so we can safely assume that\n      // non-objects are to be interpreted as _id\n      if (Buffer.isBuffer(value) || isBsonType(value, 'ObjectID') || !utils.isObject(value)) {\n        value = {\n          _id: value\n        };\n      }\n\n      // gh-2399\n      // we should cast model only when it's not a discriminator\n      const isDisc = value.schema && value.schema.discriminatorMapping && value.schema.discriminatorMapping.key !== undefined;\n      if (!isDisc) {\n        value = new Model(value);\n      }\n      return this[arraySchemaSymbol].caster.applySetters(value, parent, true);\n    }\n    return this[arraySchemaSymbol].caster.applySetters(value, parent, false);\n  },\n  /**\r\n   * Internal helper for .map()\r\n   *\r\n   * @api private\r\n   * @return {Number}\r\n   * @method _mapCast\r\n   * @memberOf MongooseArray\r\n   */\n\n  _mapCast(val, index) {\n    return this._cast(val, this.length + index);\n  },\n  /**\r\n   * Marks this array as modified.\r\n   *\r\n   * If it bubbles up from an embedded document change, then it takes the following arguments (otherwise, takes 0 arguments)\r\n   *\r\n   * @param {ArraySubdocument} subdoc the embedded doc that invoked this method on the Array\r\n   * @param {String} embeddedPath the path which changed in the subdoc\r\n   * @method _markModified\r\n   * @api private\r\n   * @memberOf MongooseArray\r\n   */\n\n  _markModified(elem) {\n    const parent = this[arrayParentSymbol];\n    let dirtyPath;\n    if (parent) {\n      dirtyPath = this[arrayPathSymbol];\n      if (arguments.length) {\n        dirtyPath = dirtyPath + '.' + elem;\n      }\n      if (dirtyPath != null && dirtyPath.endsWith('.$')) {\n        return this;\n      }\n      parent.markModified(dirtyPath, arguments.length !== 0 ? elem : parent);\n    }\n    return this;\n  },\n  /**\r\n   * Register an atomic operation with the parent.\r\n   *\r\n   * @param {Array} op operation\r\n   * @param {any} val\r\n   * @method _registerAtomic\r\n   * @api private\r\n   * @memberOf MongooseArray\r\n   */\n\n  _registerAtomic(op, val) {\n    if (this[slicedSymbol]) {\n      return;\n    }\n    if (op === '$set') {\n      // $set takes precedence over all other ops.\n      // mark entire array modified.\n      this[arrayAtomicsSymbol] = {\n        $set: val\n      };\n      cleanModifiedSubpaths(this[arrayParentSymbol], this[arrayPathSymbol]);\n      this._markModified();\n      return this;\n    }\n    const atomics = this[arrayAtomicsSymbol];\n\n    // reset pop/shift after save\n    if (op === '$pop' && !('$pop' in atomics)) {\n      const _this = this;\n      this[arrayParentSymbol].once('save', function () {\n        _this._popped = _this._shifted = null;\n      });\n    }\n\n    // check for impossible $atomic combos (Mongo denies more than one\n    // $atomic op on a single path\n    if (atomics.$set || Object.keys(atomics).length && !(op in atomics)) {\n      // a different op was previously registered.\n      // save the entire thing.\n      this[arrayAtomicsSymbol] = {\n        $set: this\n      };\n      return this;\n    }\n    let selector;\n    if (op === '$pullAll' || op === '$addToSet') {\n      atomics[op] || (atomics[op] = []);\n      atomics[op] = atomics[op].concat(val);\n    } else if (op === '$pullDocs') {\n      const pullOp = atomics['$pull'] || (atomics['$pull'] = {});\n      if (val[0] instanceof ArraySubdocument) {\n        selector = pullOp['$or'] || (pullOp['$or'] = []);\n        Array.prototype.push.apply(selector, val.map(v => {\n          return v.toObject({\n            transform: (doc, ret) => {\n              if (v == null || v.$__ == null) {\n                return ret;\n              }\n              Object.keys(v.$__.activePaths.getStatePaths('default')).forEach(path => {\n                mpath.unset(path, ret);\n                _minimizePath(ret, path);\n              });\n              return ret;\n            },\n            virtuals: false\n          });\n        }));\n      } else {\n        selector = pullOp['_id'] || (pullOp['_id'] = {\n          $in: []\n        });\n        selector['$in'] = selector['$in'].concat(val);\n      }\n    } else if (op === '$push') {\n      atomics.$push = atomics.$push || {\n        $each: []\n      };\n      if (val != null && utils.hasUserDefinedProperty(val, '$each')) {\n        atomics.$push = val;\n      } else {\n        atomics.$push.$each = atomics.$push.$each.concat(val);\n      }\n    } else {\n      atomics[op] = val;\n    }\n    return this;\n  },\n  /**\r\n   * Adds values to the array if not already present.\r\n   *\r\n   * #### Example:\r\n   *\r\n   *     console.log(doc.array) // [2,3,4]\r\n   *     const added = doc.array.addToSet(4,5);\r\n   *     console.log(doc.array) // [2,3,4,5]\r\n   *     console.log(added)     // [5]\r\n   *\r\n   * @param {...any} [args]\r\n   * @return {Array} the values that were added\r\n   * @memberOf MongooseArray\r\n   * @api public\r\n   * @method addToSet\r\n   */\n\n  addToSet() {\n    _checkManualPopulation(this, arguments);\n    let values = [].map.call(arguments, this._mapCast, this);\n    values = this[arraySchemaSymbol].applySetters(values, this[arrayParentSymbol]);\n    const added = [];\n    let type = '';\n    if (values[0] instanceof ArraySubdocument) {\n      type = 'doc';\n    } else if (values[0] instanceof Date) {\n      type = 'date';\n    }\n    const rawValues = utils.isMongooseArray(values) ? values.__array : this;\n    const rawArray = utils.isMongooseArray(this) ? this.__array : this;\n    rawValues.forEach(function (v) {\n      let found;\n      const val = +v;\n      switch (type) {\n        case 'doc':\n          found = this.some(function (doc) {\n            return doc.equals(v);\n          });\n          break;\n        case 'date':\n          found = this.some(function (d) {\n            return +d === val;\n          });\n          break;\n        default:\n          found = ~this.indexOf(v);\n      }\n      if (!found) {\n        this._markModified();\n        rawArray.push(v);\n        this._registerAtomic('$addToSet', v);\n        [].push.call(added, v);\n      }\n    }, this);\n    return added;\n  },\n  /**\r\n   * Returns the number of pending atomic operations to send to the db for this array.\r\n   *\r\n   * @api private\r\n   * @return {Number}\r\n   * @method hasAtomics\r\n   * @memberOf MongooseArray\r\n   */\n\n  hasAtomics() {\n    if (!utils.isPOJO(this[arrayAtomicsSymbol])) {\n      return 0;\n    }\n    return Object.keys(this[arrayAtomicsSymbol]).length;\n  },\n  /**\r\n   * Return whether or not the `obj` is included in the array.\r\n   *\r\n   * @param {Object} obj the item to check\r\n   * @param {Number} fromIndex\r\n   * @return {Boolean}\r\n   * @api public\r\n   * @method includes\r\n   * @memberOf MongooseArray\r\n   */\n\n  includes(obj, fromIndex) {\n    const ret = this.indexOf(obj, fromIndex);\n    return ret !== -1;\n  },\n  /**\r\n   * Return the index of `obj` or `-1` if not found.\r\n   *\r\n   * @param {Object} obj the item to look for\r\n   * @param {Number} fromIndex\r\n   * @return {Number}\r\n   * @api public\r\n   * @method indexOf\r\n   * @memberOf MongooseArray\r\n   */\n\n  indexOf(obj, fromIndex) {\n    if (isBsonType(obj, 'ObjectID')) {\n      obj = obj.toString();\n    }\n    fromIndex = fromIndex == null ? 0 : fromIndex;\n    const len = this.length;\n    for (let i = fromIndex; i < len; ++i) {\n      if (obj == this[i]) {\n        return i;\n      }\n    }\n    return -1;\n  },\n  /**\r\n   * Helper for console.log\r\n   *\r\n   * @api public\r\n   * @method inspect\r\n   * @memberOf MongooseArray\r\n   */\n\n  inspect() {\n    return JSON.stringify(this);\n  },\n  /**\r\n   * Pushes items to the array non-atomically.\r\n   *\r\n   * #### Note:\r\n   *\r\n   * _marks the entire array as modified, which if saved, will store it as a `$set` operation, potentially overwritting any changes that happen between when you retrieved the object and when you save it._\r\n   *\r\n   * @param {...any} [args]\r\n   * @api public\r\n   * @method nonAtomicPush\r\n   * @memberOf MongooseArray\r\n   */\n\n  nonAtomicPush() {\n    const values = [].map.call(arguments, this._mapCast, this);\n    this._markModified();\n    const ret = [].push.apply(this, values);\n    this._registerAtomic('$set', this);\n    return ret;\n  },\n  /**\r\n   * Wraps [`Array#pop`](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/pop) with proper change tracking.\r\n   *\r\n   * #### Note:\r\n   *\r\n   * _marks the entire array as modified which will pass the entire thing to $set potentially overwriting any changes that happen between when you retrieved the object and when you save it._\r\n   *\r\n   * @see MongooseArray#$pop #types_array_MongooseArray-%24pop\r\n   * @api public\r\n   * @method pop\r\n   * @memberOf MongooseArray\r\n   */\n\n  pop() {\n    this._markModified();\n    const ret = [].pop.call(this);\n    this._registerAtomic('$set', this);\n    return ret;\n  },\n  /**\r\n   * Pulls items from the array atomically. Equality is determined by casting\r\n   * the provided value to an embedded document and comparing using\r\n   * [the `Document.equals()` function.](/docs/api/document.html#document_Document-equals)\r\n   *\r\n   * #### Example:\r\n   *\r\n   *     doc.array.pull(ObjectId)\r\n   *     doc.array.pull({ _id: 'someId' })\r\n   *     doc.array.pull(36)\r\n   *     doc.array.pull('tag 1', 'tag 2')\r\n   *\r\n   * To remove a document from a subdocument array we may pass an object with a matching `_id`.\r\n   *\r\n   *     doc.subdocs.push({ _id: 4815162342 })\r\n   *     doc.subdocs.pull({ _id: 4815162342 }) // removed\r\n   *\r\n   * Or we may passing the _id directly and let mongoose take care of it.\r\n   *\r\n   *     doc.subdocs.push({ _id: 4815162342 })\r\n   *     doc.subdocs.pull(4815162342); // works\r\n   *\r\n   * The first pull call will result in a atomic operation on the database, if pull is called repeatedly without saving the document, a $set operation is used on the complete array instead, overwriting possible changes that happened on the database in the meantime.\r\n   *\r\n   * @param {...any} [args]\r\n   * @see mongodb https://www.mongodb.org/display/DOCS/Updating/#Updating-%24pull\r\n   * @api public\r\n   * @method pull\r\n   * @memberOf MongooseArray\r\n   */\n\n  pull() {\n    const values = [].map.call(arguments, this._cast, this);\n    const cur = this[arrayParentSymbol].get(this[arrayPathSymbol]);\n    let i = cur.length;\n    let mem;\n    this._markModified();\n    while (i--) {\n      mem = cur[i];\n      if (mem instanceof Document) {\n        const some = values.some(function (v) {\n          return mem.equals(v);\n        });\n        if (some) {\n          [].splice.call(cur, i, 1);\n        }\n      } else if (~cur.indexOf.call(values, mem)) {\n        [].splice.call(cur, i, 1);\n      }\n    }\n    if (values[0] instanceof ArraySubdocument) {\n      this._registerAtomic('$pullDocs', values.map(function (v) {\n        const _id = v.$__getValue('_id');\n        if (_id === undefined || v.$isDefault('_id')) {\n          return v;\n        }\n        return _id;\n      }));\n    } else {\n      this._registerAtomic('$pullAll', values);\n    }\n\n    // Might have modified child paths and then pulled, like\n    // `doc.children[1].name = 'test';` followed by\n    // `doc.children.remove(doc.children[0]);`. In this case we fall back\n    // to a `$set` on the whole array. See #3511\n    if (cleanModifiedSubpaths(this[arrayParentSymbol], this[arrayPathSymbol]) > 0) {\n      this._registerAtomic('$set', this);\n    }\n    return this;\n  },\n  /**\r\n   * Wraps [`Array#push`](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/push) with proper change tracking.\r\n   *\r\n   * #### Example:\r\n   *\r\n   *     const schema = Schema({ nums: [Number] });\r\n   *     const Model = mongoose.model('Test', schema);\r\n   *\r\n   *     const doc = await Model.create({ nums: [3, 4] });\r\n   *     doc.nums.push(5); // Add 5 to the end of the array\r\n   *     await doc.save();\r\n   *\r\n   *     // You can also pass an object with `$each` as the\r\n   *     // first parameter to use MongoDB's `$position`\r\n   *     doc.nums.push({\r\n   *       $each: [1, 2],\r\n   *       $position: 0\r\n   *     });\r\n   *     doc.nums; // [1, 2, 3, 4, 5]\r\n   *\r\n   * @param {...Object} [args]\r\n   * @api public\r\n   * @method push\r\n   * @memberOf MongooseArray\r\n   */\n\n  push() {\n    let values = arguments;\n    let atomic = values;\n    const isOverwrite = values[0] != null && utils.hasUserDefinedProperty(values[0], '$each');\n    const arr = utils.isMongooseArray(this) ? this.__array : this;\n    if (isOverwrite) {\n      atomic = values[0];\n      values = values[0].$each;\n    }\n    if (this[arraySchemaSymbol] == null) {\n      return _basePush.apply(this, values);\n    }\n    _checkManualPopulation(this, values);\n    const parent = this[arrayParentSymbol];\n    values = [].map.call(values, this._mapCast, this);\n    values = this[arraySchemaSymbol].applySetters(values, parent, undefined, undefined, {\n      skipDocumentArrayCast: true\n    });\n    let ret;\n    const atomics = this[arrayAtomicsSymbol];\n    this._markModified();\n    if (isOverwrite) {\n      atomic.$each = values;\n      if ((atomics.$push && atomics.$push.$each && atomics.$push.$each.length || 0) !== 0 && atomics.$push.$position != atomic.$position) {\n        throw new MongooseError('Cannot call `Array#push()` multiple times ' + 'with different `$position`');\n      }\n      if (atomic.$position != null) {\n        [].splice.apply(arr, [atomic.$position, 0].concat(values));\n        ret = this.length;\n      } else {\n        ret = [].push.apply(arr, values);\n      }\n    } else {\n      if ((atomics.$push && atomics.$push.$each && atomics.$push.$each.length || 0) !== 0 && atomics.$push.$position != null) {\n        throw new MongooseError('Cannot call `Array#push()` multiple times ' + 'with different `$position`');\n      }\n      atomic = values;\n      ret = [].push.apply(arr, values);\n    }\n    this._registerAtomic('$push', atomic);\n    return ret;\n  },\n  /**\r\n   * Alias of [pull](#mongoosearray_MongooseArray-pull)\r\n   *\r\n   * @see MongooseArray#pull #types_array_MongooseArray-pull\r\n   * @see mongodb https://www.mongodb.org/display/DOCS/Updating/#Updating-%24pull\r\n   * @api public\r\n   * @memberOf MongooseArray\r\n   * @instance\r\n   * @method remove\r\n   */\n\n  remove() {\n    return this.pull.apply(this, arguments);\n  },\n  /**\r\n   * Sets the casted `val` at index `i` and marks the array modified.\r\n   *\r\n   * #### Example:\r\n   *\r\n   *     // given documents based on the following\r\n   *     const Doc = mongoose.model('Doc', new Schema({ array: [Number] }));\r\n   *\r\n   *     const doc = new Doc({ array: [2,3,4] })\r\n   *\r\n   *     console.log(doc.array) // [2,3,4]\r\n   *\r\n   *     doc.array.set(1,\"5\");\r\n   *     console.log(doc.array); // [2,5,4] // properly cast to number\r\n   *     doc.save() // the change is saved\r\n   *\r\n   *     // VS not using array#set\r\n   *     doc.array[1] = \"5\";\r\n   *     console.log(doc.array); // [2,\"5\",4] // no casting\r\n   *     doc.save() // change is not saved\r\n   *\r\n   * @return {Array} this\r\n   * @api public\r\n   * @method set\r\n   * @memberOf MongooseArray\r\n   */\n\n  set(i, val, skipModified) {\n    const arr = this.__array;\n    if (skipModified) {\n      arr[i] = val;\n      return this;\n    }\n    const value = methods._cast.call(this, val, i);\n    methods._markModified.call(this, i);\n    arr[i] = value;\n    return this;\n  },\n  /**\r\n   * Wraps [`Array#shift`](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/unshift) with proper change tracking.\r\n   *\r\n   * #### Example:\r\n   *\r\n   *     doc.array = [2,3];\r\n   *     const res = doc.array.shift();\r\n   *     console.log(res) // 2\r\n   *     console.log(doc.array) // [3]\r\n   *\r\n   * #### Note:\r\n   *\r\n   * _marks the entire array as modified, which if saved, will store it as a `$set` operation, potentially overwritting any changes that happen between when you retrieved the object and when you save it._\r\n   *\r\n   * @api public\r\n   * @method shift\r\n   * @memberOf MongooseArray\r\n   */\n\n  shift() {\n    const arr = utils.isMongooseArray(this) ? this.__array : this;\n    this._markModified();\n    const ret = [].shift.call(arr);\n    this._registerAtomic('$set', this);\n    return ret;\n  },\n  /**\r\n   * Wraps [`Array#sort`](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/sort) with proper change tracking.\r\n   *\r\n   * #### Note:\r\n   *\r\n   * _marks the entire array as modified, which if saved, will store it as a `$set` operation, potentially overwritting any changes that happen between when you retrieved the object and when you save it._\r\n   *\r\n   * @api public\r\n   * @method sort\r\n   * @memberOf MongooseArray\r\n   * @see https://masteringjs.io/tutorials/fundamentals/array-sort\r\n   */\n\n  sort() {\n    const arr = utils.isMongooseArray(this) ? this.__array : this;\n    const ret = [].sort.apply(arr, arguments);\n    this._registerAtomic('$set', this);\n    return ret;\n  },\n  /**\r\n   * Wraps [`Array#splice`](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/splice) with proper change tracking and casting.\r\n   *\r\n   * #### Note:\r\n   *\r\n   * _marks the entire array as modified, which if saved, will store it as a `$set` operation, potentially overwritting any changes that happen between when you retrieved the object and when you save it._\r\n   *\r\n   * @api public\r\n   * @method splice\r\n   * @memberOf MongooseArray\r\n   * @see https://masteringjs.io/tutorials/fundamentals/array-splice\r\n   */\n\n  splice() {\n    let ret;\n    const arr = utils.isMongooseArray(this) ? this.__array : this;\n    this._markModified();\n    _checkManualPopulation(this, Array.prototype.slice.call(arguments, 2));\n    if (arguments.length) {\n      let vals;\n      if (this[arraySchemaSymbol] == null) {\n        vals = arguments;\n      } else {\n        vals = [];\n        for (let i = 0; i < arguments.length; ++i) {\n          vals[i] = i < 2 ? arguments[i] : this._cast(arguments[i], arguments[0] + (i - 2));\n        }\n      }\n      ret = [].splice.apply(arr, vals);\n      this._registerAtomic('$set', this);\n    }\n    return ret;\n  },\n  /*!\r\n   * ignore\r\n   */\n\n  toBSON() {\n    return this.toObject(internalToObjectOptions);\n  },\n  /**\r\n   * Returns a native js Array.\r\n   *\r\n   * @param {Object} options\r\n   * @return {Array}\r\n   * @api public\r\n   * @method toObject\r\n   * @memberOf MongooseArray\r\n   */\n\n  toObject(options) {\n    const arr = utils.isMongooseArray(this) ? this.__array : this;\n    if (options && options.depopulate) {\n      options = utils.clone(options);\n      options._isNested = true;\n      // Ensure return value is a vanilla array, because in Node.js 6+ `map()`\n      // is smart enough to use the inherited array's constructor.\n      return [].concat(arr).map(function (doc) {\n        return doc instanceof Document ? doc.toObject(options) : doc;\n      });\n    }\n    return [].concat(arr);\n  },\n  $toObject() {\n    return this.constructor.prototype.toObject.apply(this, arguments);\n  },\n  /**\r\n   * Wraps [`Array#unshift`](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/unshift) with proper change tracking.\r\n   *\r\n   * #### Note:\r\n   *\r\n   * _marks the entire array as modified, which if saved, will store it as a `$set` operation, potentially overwriting any changes that happen between when you retrieved the object and when you save it._\r\n   *\r\n   * @api public\r\n   * @method unshift\r\n   * @memberOf MongooseArray\r\n   */\n\n  unshift() {\n    _checkManualPopulation(this, arguments);\n    let values;\n    if (this[arraySchemaSymbol] == null) {\n      values = arguments;\n    } else {\n      values = [].map.call(arguments, this._cast, this);\n      values = this[arraySchemaSymbol].applySetters(values, this[arrayParentSymbol]);\n    }\n    const arr = utils.isMongooseArray(this) ? this.__array : this;\n    this._markModified();\n    [].unshift.apply(arr, values);\n    this._registerAtomic('$set', this);\n    return this.length;\n  }\n};\n\n/*!\r\n * ignore\r\n */\n\nfunction _isAllSubdocs(docs, ref) {\n  if (!ref) {\n    return false;\n  }\n  for (const arg of docs) {\n    if (arg == null) {\n      return false;\n    }\n    const model = arg.constructor;\n    if (!(arg instanceof Document) || model.modelName !== ref && model.baseModelName !== ref) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/*!\r\n * Minimize _just_ empty objects along the path chain specified\r\n * by `parts`, ignoring all other paths. Useful in cases where\r\n * you want to minimize after unsetting a path.\r\n *\r\n * #### Example:\r\n *\r\n *     const obj = { foo: { bar: { baz: {} } }, a: {} };\r\n *     _minimizePath(obj, 'foo.bar.baz');\r\n *     obj; // { a: {} }\r\n */\n\nfunction _minimizePath(obj, parts, i) {\n  if (typeof parts === 'string') {\n    if (parts.indexOf('.') === -1) {\n      return;\n    }\n    parts = mpath.stringToParts(parts);\n  }\n  i = i || 0;\n  if (i >= parts.length) {\n    return;\n  }\n  if (obj == null || typeof obj !== 'object') {\n    return;\n  }\n  _minimizePath(obj[parts[0]], parts, i + 1);\n  if (obj[parts[0]] != null && typeof obj[parts[0]] === 'object' && Object.keys(obj[parts[0]]).length === 0) {\n    delete obj[parts[0]];\n  }\n}\n\n/*!\r\n * ignore\r\n */\n\nfunction _checkManualPopulation(arr, docs) {\n  const ref = arr == null ? null : arr[arraySchemaSymbol] && arr[arraySchemaSymbol].caster && arr[arraySchemaSymbol].caster.options && arr[arraySchemaSymbol].caster.options.ref || null;\n  if (arr.length === 0 && docs.length !== 0) {\n    if (_isAllSubdocs(docs, ref)) {\n      arr[arrayParentSymbol].$populated(arr[arrayPathSymbol], [], {\n        [populateModelSymbol]: docs[0].constructor\n      });\n    }\n  }\n}\nconst returnVanillaArrayMethods = ['filter', 'flat', 'flatMap', 'map', 'slice'];\nfor (const method of returnVanillaArrayMethods) {\n  if (Array.prototype[method] == null) {\n    continue;\n  }\n  methods[method] = function () {\n    const _arr = utils.isMongooseArray(this) ? this.__array : this;\n    const arr = [].concat(_arr);\n    return arr[method].apply(arr, arguments);\n  };\n}\nmodule.exports = methods;","map":{"version":3,"names":["Document","require","ArraySubdocument","MongooseError","cleanModifiedSubpaths","internalToObjectOptions","mpath","utils","isBsonType","arrayAtomicsSymbol","arrayParentSymbol","arrayPathSymbol","arraySchemaSymbol","populateModelSymbol","slicedSymbol","Symbol","_basePush","Array","prototype","push","methods","$__getAtomics","ret","keys","Object","i","length","opts","assign","_isNested","toObject","op","val","isMongooseObject","isArray","call","$each","valueOf","$atomics","$parent","$path","$shift","_registerAtomic","_markModified","_shifted","shift","$pop","_popped","pop","$schema","_cast","value","populated","Model","parent","$populated","undefined","options","Buffer","isBuffer","isObject","_id","isDisc","schema","discriminatorMapping","key","caster","applySetters","_mapCast","index","elem","dirtyPath","arguments","endsWith","markModified","$set","atomics","_this","once","selector","concat","pullOp","apply","map","v","transform","doc","$__","activePaths","getStatePaths","forEach","path","unset","_minimizePath","virtuals","$in","$push","hasUserDefinedProperty","addToSet","_checkManualPopulation","values","added","type","Date","rawValues","isMongooseArray","__array","rawArray","found","some","equals","d","indexOf","hasAtomics","isPOJO","includes","obj","fromIndex","toString","len","inspect","JSON","stringify","nonAtomicPush","pull","cur","get","mem","splice","$__getValue","$isDefault","atomic","isOverwrite","arr","skipDocumentArrayCast","$position","remove","set","skipModified","sort","slice","vals","toBSON","depopulate","clone","$toObject","constructor","unshift","_isAllSubdocs","docs","ref","arg","model","modelName","baseModelName","parts","stringToParts","returnVanillaArrayMethods","method","_arr","module","exports"],"sources":["C:/Users/91930/Desktop/Github projects/Pharmacy Demo/back-end/node_modules/mongoose/lib/types/array/methods/index.js"],"sourcesContent":["'use strict';\r\n\r\nconst Document = require('../../../document');\r\nconst ArraySubdocument = require('../../ArraySubdocument');\r\nconst MongooseError = require('../../../error/mongooseError');\r\nconst cleanModifiedSubpaths = require('../../../helpers/document/cleanModifiedSubpaths');\r\nconst internalToObjectOptions = require('../../../options').internalToObjectOptions;\r\nconst mpath = require('mpath');\r\nconst utils = require('../../../utils');\r\nconst isBsonType = require('../../../helpers/isBsonType');\r\n\r\nconst arrayAtomicsSymbol = require('../../../helpers/symbols').arrayAtomicsSymbol;\r\nconst arrayParentSymbol = require('../../../helpers/symbols').arrayParentSymbol;\r\nconst arrayPathSymbol = require('../../../helpers/symbols').arrayPathSymbol;\r\nconst arraySchemaSymbol = require('../../../helpers/symbols').arraySchemaSymbol;\r\nconst populateModelSymbol = require('../../../helpers/symbols').populateModelSymbol;\r\nconst slicedSymbol = Symbol('mongoose#Array#sliced');\r\n\r\nconst _basePush = Array.prototype.push;\r\n\r\n/*!\r\n * ignore\r\n */\r\n\r\nconst methods = {\r\n  /**\r\n   * Depopulates stored atomic operation values as necessary for direct insertion to MongoDB.\r\n   *\r\n   * If no atomics exist, we return all array values after conversion.\r\n   *\r\n   * @return {Array}\r\n   * @method $__getAtomics\r\n   * @memberOf MongooseArray\r\n   * @instance\r\n   * @api private\r\n   */\r\n\r\n  $__getAtomics() {\r\n    const ret = [];\r\n    const keys = Object.keys(this[arrayAtomicsSymbol] || {});\r\n    let i = keys.length;\r\n\r\n    const opts = Object.assign({}, internalToObjectOptions, { _isNested: true });\r\n\r\n    if (i === 0) {\r\n      ret[0] = ['$set', this.toObject(opts)];\r\n      return ret;\r\n    }\r\n\r\n    while (i--) {\r\n      const op = keys[i];\r\n      let val = this[arrayAtomicsSymbol][op];\r\n\r\n      // the atomic values which are arrays are not MongooseArrays. we\r\n      // need to convert their elements as if they were MongooseArrays\r\n      // to handle populated arrays versus DocumentArrays properly.\r\n      if (utils.isMongooseObject(val)) {\r\n        val = val.toObject(opts);\r\n      } else if (Array.isArray(val)) {\r\n        val = this.toObject.call(val, opts);\r\n      } else if (val != null && Array.isArray(val.$each)) {\r\n        val.$each = this.toObject.call(val.$each, opts);\r\n      } else if (val != null && typeof val.valueOf === 'function') {\r\n        val = val.valueOf();\r\n      }\r\n\r\n      if (op === '$addToSet') {\r\n        val = { $each: val };\r\n      }\r\n\r\n      ret.push([op, val]);\r\n    }\r\n\r\n    return ret;\r\n  },\r\n\r\n  /*!\r\n   * ignore\r\n   */\r\n\r\n  $atomics() {\r\n    return this[arrayAtomicsSymbol];\r\n  },\r\n\r\n  /*!\r\n   * ignore\r\n   */\r\n\r\n  $parent() {\r\n    return this[arrayParentSymbol];\r\n  },\r\n\r\n  /*!\r\n   * ignore\r\n   */\r\n\r\n  $path() {\r\n    return this[arrayPathSymbol];\r\n  },\r\n\r\n  /**\r\n   * Atomically shifts the array at most one time per document `save()`.\r\n   *\r\n   * #### Note:\r\n   *\r\n   * _Calling this multiple times on an array before saving sends the same command as calling it once._\r\n   * _This update is implemented using the MongoDB [$pop](https://www.mongodb.org/display/DOCS/Updating/#Updating-%24pop) method which enforces this restriction._\r\n   *\r\n   *      doc.array = [1,2,3];\r\n   *\r\n   *      const shifted = doc.array.$shift();\r\n   *      console.log(shifted); // 1\r\n   *      console.log(doc.array); // [2,3]\r\n   *\r\n   *      // no affect\r\n   *      shifted = doc.array.$shift();\r\n   *      console.log(doc.array); // [2,3]\r\n   *\r\n   *      doc.save(function (err) {\r\n   *        if (err) return handleError(err);\r\n   *\r\n   *        // we saved, now $shift works again\r\n   *        shifted = doc.array.$shift();\r\n   *        console.log(shifted ); // 2\r\n   *        console.log(doc.array); // [3]\r\n   *      })\r\n   *\r\n   * @api public\r\n   * @memberOf MongooseArray\r\n   * @instance\r\n   * @method $shift\r\n   * @see mongodb https://www.mongodb.org/display/DOCS/Updating/#Updating-%24pop\r\n   */\r\n\r\n  $shift() {\r\n    this._registerAtomic('$pop', -1);\r\n    this._markModified();\r\n\r\n    // only allow shifting once\r\n    if (this._shifted) {\r\n      return;\r\n    }\r\n    this._shifted = true;\r\n\r\n    return [].shift.call(this);\r\n  },\r\n\r\n  /**\r\n   * Pops the array atomically at most one time per document `save()`.\r\n   *\r\n   * #### NOTE:\r\n   *\r\n   * _Calling this multiple times on an array before saving sends the same command as calling it once._\r\n   * _This update is implemented using the MongoDB [$pop](https://www.mongodb.org/display/DOCS/Updating/#Updating-%24pop) method which enforces this restriction._\r\n   *\r\n   *      doc.array = [1,2,3];\r\n   *\r\n   *      const popped = doc.array.$pop();\r\n   *      console.log(popped); // 3\r\n   *      console.log(doc.array); // [1,2]\r\n   *\r\n   *      // no affect\r\n   *      popped = doc.array.$pop();\r\n   *      console.log(doc.array); // [1,2]\r\n   *\r\n   *      doc.save(function (err) {\r\n   *        if (err) return handleError(err);\r\n   *\r\n   *        // we saved, now $pop works again\r\n   *        popped = doc.array.$pop();\r\n   *        console.log(popped); // 2\r\n   *        console.log(doc.array); // [1]\r\n   *      })\r\n   *\r\n   * @api public\r\n   * @method $pop\r\n   * @memberOf MongooseArray\r\n   * @instance\r\n   * @see mongodb https://www.mongodb.org/display/DOCS/Updating/#Updating-%24pop\r\n   * @method $pop\r\n   * @memberOf MongooseArray\r\n   */\r\n\r\n  $pop() {\r\n    this._registerAtomic('$pop', 1);\r\n    this._markModified();\r\n\r\n    // only allow popping once\r\n    if (this._popped) {\r\n      return;\r\n    }\r\n    this._popped = true;\r\n\r\n    return [].pop.call(this);\r\n  },\r\n\r\n  /*!\r\n   * ignore\r\n   */\r\n\r\n  $schema() {\r\n    return this[arraySchemaSymbol];\r\n  },\r\n\r\n  /**\r\n   * Casts a member based on this arrays schema.\r\n   *\r\n   * @param {any} value\r\n   * @return value the casted value\r\n   * @method _cast\r\n   * @api private\r\n   * @memberOf MongooseArray\r\n   */\r\n\r\n  _cast(value) {\r\n    let populated = false;\r\n    let Model;\r\n\r\n    const parent = this[arrayParentSymbol];\r\n    if (parent) {\r\n      populated = parent.$populated(this[arrayPathSymbol], true);\r\n    }\r\n\r\n    if (populated && value !== null && value !== undefined) {\r\n      // cast to the populated Models schema\r\n      Model = populated.options[populateModelSymbol];\r\n\r\n      // only objects are permitted so we can safely assume that\r\n      // non-objects are to be interpreted as _id\r\n      if (Buffer.isBuffer(value) ||\r\n          isBsonType(value, 'ObjectID') || !utils.isObject(value)) {\r\n        value = { _id: value };\r\n      }\r\n\r\n      // gh-2399\r\n      // we should cast model only when it's not a discriminator\r\n      const isDisc = value.schema && value.schema.discriminatorMapping &&\r\n          value.schema.discriminatorMapping.key !== undefined;\r\n      if (!isDisc) {\r\n        value = new Model(value);\r\n      }\r\n      return this[arraySchemaSymbol].caster.applySetters(value, parent, true);\r\n    }\r\n\r\n    return this[arraySchemaSymbol].caster.applySetters(value, parent, false);\r\n  },\r\n\r\n  /**\r\n   * Internal helper for .map()\r\n   *\r\n   * @api private\r\n   * @return {Number}\r\n   * @method _mapCast\r\n   * @memberOf MongooseArray\r\n   */\r\n\r\n  _mapCast(val, index) {\r\n    return this._cast(val, this.length + index);\r\n  },\r\n\r\n  /**\r\n   * Marks this array as modified.\r\n   *\r\n   * If it bubbles up from an embedded document change, then it takes the following arguments (otherwise, takes 0 arguments)\r\n   *\r\n   * @param {ArraySubdocument} subdoc the embedded doc that invoked this method on the Array\r\n   * @param {String} embeddedPath the path which changed in the subdoc\r\n   * @method _markModified\r\n   * @api private\r\n   * @memberOf MongooseArray\r\n   */\r\n\r\n  _markModified(elem) {\r\n    const parent = this[arrayParentSymbol];\r\n    let dirtyPath;\r\n\r\n    if (parent) {\r\n      dirtyPath = this[arrayPathSymbol];\r\n\r\n      if (arguments.length) {\r\n        dirtyPath = dirtyPath + '.' + elem;\r\n      }\r\n\r\n      if (dirtyPath != null && dirtyPath.endsWith('.$')) {\r\n        return this;\r\n      }\r\n\r\n      parent.markModified(dirtyPath, arguments.length !== 0 ? elem : parent);\r\n    }\r\n\r\n    return this;\r\n  },\r\n\r\n  /**\r\n   * Register an atomic operation with the parent.\r\n   *\r\n   * @param {Array} op operation\r\n   * @param {any} val\r\n   * @method _registerAtomic\r\n   * @api private\r\n   * @memberOf MongooseArray\r\n   */\r\n\r\n  _registerAtomic(op, val) {\r\n    if (this[slicedSymbol]) {\r\n      return;\r\n    }\r\n    if (op === '$set') {\r\n      // $set takes precedence over all other ops.\r\n      // mark entire array modified.\r\n      this[arrayAtomicsSymbol] = { $set: val };\r\n      cleanModifiedSubpaths(this[arrayParentSymbol], this[arrayPathSymbol]);\r\n      this._markModified();\r\n      return this;\r\n    }\r\n\r\n    const atomics = this[arrayAtomicsSymbol];\r\n\r\n    // reset pop/shift after save\r\n    if (op === '$pop' && !('$pop' in atomics)) {\r\n      const _this = this;\r\n      this[arrayParentSymbol].once('save', function() {\r\n        _this._popped = _this._shifted = null;\r\n      });\r\n    }\r\n\r\n    // check for impossible $atomic combos (Mongo denies more than one\r\n    // $atomic op on a single path\r\n    if (atomics.$set || Object.keys(atomics).length && !(op in atomics)) {\r\n      // a different op was previously registered.\r\n      // save the entire thing.\r\n      this[arrayAtomicsSymbol] = { $set: this };\r\n      return this;\r\n    }\r\n\r\n    let selector;\r\n\r\n    if (op === '$pullAll' || op === '$addToSet') {\r\n      atomics[op] || (atomics[op] = []);\r\n      atomics[op] = atomics[op].concat(val);\r\n    } else if (op === '$pullDocs') {\r\n      const pullOp = atomics['$pull'] || (atomics['$pull'] = {});\r\n      if (val[0] instanceof ArraySubdocument) {\r\n        selector = pullOp['$or'] || (pullOp['$or'] = []);\r\n        Array.prototype.push.apply(selector, val.map(v => {\r\n          return v.toObject({\r\n            transform: (doc, ret) => {\r\n              if (v == null || v.$__ == null) {\r\n                return ret;\r\n              }\r\n\r\n              Object.keys(v.$__.activePaths.getStatePaths('default')).forEach(path => {\r\n                mpath.unset(path, ret);\r\n\r\n                _minimizePath(ret, path);\r\n              });\r\n\r\n              return ret;\r\n            },\r\n            virtuals: false\r\n          });\r\n        }));\r\n      } else {\r\n        selector = pullOp['_id'] || (pullOp['_id'] = { $in: [] });\r\n        selector['$in'] = selector['$in'].concat(val);\r\n      }\r\n    } else if (op === '$push') {\r\n      atomics.$push = atomics.$push || { $each: [] };\r\n      if (val != null && utils.hasUserDefinedProperty(val, '$each')) {\r\n        atomics.$push = val;\r\n      } else {\r\n        atomics.$push.$each = atomics.$push.$each.concat(val);\r\n      }\r\n    } else {\r\n      atomics[op] = val;\r\n    }\r\n\r\n    return this;\r\n  },\r\n\r\n  /**\r\n   * Adds values to the array if not already present.\r\n   *\r\n   * #### Example:\r\n   *\r\n   *     console.log(doc.array) // [2,3,4]\r\n   *     const added = doc.array.addToSet(4,5);\r\n   *     console.log(doc.array) // [2,3,4,5]\r\n   *     console.log(added)     // [5]\r\n   *\r\n   * @param {...any} [args]\r\n   * @return {Array} the values that were added\r\n   * @memberOf MongooseArray\r\n   * @api public\r\n   * @method addToSet\r\n   */\r\n\r\n  addToSet() {\r\n    _checkManualPopulation(this, arguments);\r\n\r\n    let values = [].map.call(arguments, this._mapCast, this);\r\n    values = this[arraySchemaSymbol].applySetters(values, this[arrayParentSymbol]);\r\n    const added = [];\r\n    let type = '';\r\n    if (values[0] instanceof ArraySubdocument) {\r\n      type = 'doc';\r\n    } else if (values[0] instanceof Date) {\r\n      type = 'date';\r\n    }\r\n\r\n    const rawValues = utils.isMongooseArray(values) ? values.__array : this;\r\n    const rawArray = utils.isMongooseArray(this) ? this.__array : this;\r\n\r\n    rawValues.forEach(function(v) {\r\n      let found;\r\n      const val = +v;\r\n      switch (type) {\r\n        case 'doc':\r\n          found = this.some(function(doc) {\r\n            return doc.equals(v);\r\n          });\r\n          break;\r\n        case 'date':\r\n          found = this.some(function(d) {\r\n            return +d === val;\r\n          });\r\n          break;\r\n        default:\r\n          found = ~this.indexOf(v);\r\n      }\r\n\r\n      if (!found) {\r\n        this._markModified();\r\n        rawArray.push(v);\r\n        this._registerAtomic('$addToSet', v);\r\n        [].push.call(added, v);\r\n      }\r\n    }, this);\r\n\r\n    return added;\r\n  },\r\n\r\n  /**\r\n   * Returns the number of pending atomic operations to send to the db for this array.\r\n   *\r\n   * @api private\r\n   * @return {Number}\r\n   * @method hasAtomics\r\n   * @memberOf MongooseArray\r\n   */\r\n\r\n  hasAtomics() {\r\n    if (!utils.isPOJO(this[arrayAtomicsSymbol])) {\r\n      return 0;\r\n    }\r\n\r\n    return Object.keys(this[arrayAtomicsSymbol]).length;\r\n  },\r\n\r\n  /**\r\n   * Return whether or not the `obj` is included in the array.\r\n   *\r\n   * @param {Object} obj the item to check\r\n   * @param {Number} fromIndex\r\n   * @return {Boolean}\r\n   * @api public\r\n   * @method includes\r\n   * @memberOf MongooseArray\r\n   */\r\n\r\n  includes(obj, fromIndex) {\r\n    const ret = this.indexOf(obj, fromIndex);\r\n    return ret !== -1;\r\n  },\r\n\r\n  /**\r\n   * Return the index of `obj` or `-1` if not found.\r\n   *\r\n   * @param {Object} obj the item to look for\r\n   * @param {Number} fromIndex\r\n   * @return {Number}\r\n   * @api public\r\n   * @method indexOf\r\n   * @memberOf MongooseArray\r\n   */\r\n\r\n  indexOf(obj, fromIndex) {\r\n    if (isBsonType(obj, 'ObjectID')) {\r\n      obj = obj.toString();\r\n    }\r\n\r\n    fromIndex = fromIndex == null ? 0 : fromIndex;\r\n    const len = this.length;\r\n    for (let i = fromIndex; i < len; ++i) {\r\n      if (obj == this[i]) {\r\n        return i;\r\n      }\r\n    }\r\n    return -1;\r\n  },\r\n\r\n  /**\r\n   * Helper for console.log\r\n   *\r\n   * @api public\r\n   * @method inspect\r\n   * @memberOf MongooseArray\r\n   */\r\n\r\n  inspect() {\r\n    return JSON.stringify(this);\r\n  },\r\n\r\n  /**\r\n   * Pushes items to the array non-atomically.\r\n   *\r\n   * #### Note:\r\n   *\r\n   * _marks the entire array as modified, which if saved, will store it as a `$set` operation, potentially overwritting any changes that happen between when you retrieved the object and when you save it._\r\n   *\r\n   * @param {...any} [args]\r\n   * @api public\r\n   * @method nonAtomicPush\r\n   * @memberOf MongooseArray\r\n   */\r\n\r\n  nonAtomicPush() {\r\n    const values = [].map.call(arguments, this._mapCast, this);\r\n    this._markModified();\r\n    const ret = [].push.apply(this, values);\r\n    this._registerAtomic('$set', this);\r\n    return ret;\r\n  },\r\n\r\n  /**\r\n   * Wraps [`Array#pop`](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/pop) with proper change tracking.\r\n   *\r\n   * #### Note:\r\n   *\r\n   * _marks the entire array as modified which will pass the entire thing to $set potentially overwriting any changes that happen between when you retrieved the object and when you save it._\r\n   *\r\n   * @see MongooseArray#$pop #types_array_MongooseArray-%24pop\r\n   * @api public\r\n   * @method pop\r\n   * @memberOf MongooseArray\r\n   */\r\n\r\n  pop() {\r\n    this._markModified();\r\n    const ret = [].pop.call(this);\r\n    this._registerAtomic('$set', this);\r\n    return ret;\r\n  },\r\n\r\n  /**\r\n   * Pulls items from the array atomically. Equality is determined by casting\r\n   * the provided value to an embedded document and comparing using\r\n   * [the `Document.equals()` function.](/docs/api/document.html#document_Document-equals)\r\n   *\r\n   * #### Example:\r\n   *\r\n   *     doc.array.pull(ObjectId)\r\n   *     doc.array.pull({ _id: 'someId' })\r\n   *     doc.array.pull(36)\r\n   *     doc.array.pull('tag 1', 'tag 2')\r\n   *\r\n   * To remove a document from a subdocument array we may pass an object with a matching `_id`.\r\n   *\r\n   *     doc.subdocs.push({ _id: 4815162342 })\r\n   *     doc.subdocs.pull({ _id: 4815162342 }) // removed\r\n   *\r\n   * Or we may passing the _id directly and let mongoose take care of it.\r\n   *\r\n   *     doc.subdocs.push({ _id: 4815162342 })\r\n   *     doc.subdocs.pull(4815162342); // works\r\n   *\r\n   * The first pull call will result in a atomic operation on the database, if pull is called repeatedly without saving the document, a $set operation is used on the complete array instead, overwriting possible changes that happened on the database in the meantime.\r\n   *\r\n   * @param {...any} [args]\r\n   * @see mongodb https://www.mongodb.org/display/DOCS/Updating/#Updating-%24pull\r\n   * @api public\r\n   * @method pull\r\n   * @memberOf MongooseArray\r\n   */\r\n\r\n  pull() {\r\n    const values = [].map.call(arguments, this._cast, this);\r\n    const cur = this[arrayParentSymbol].get(this[arrayPathSymbol]);\r\n    let i = cur.length;\r\n    let mem;\r\n    this._markModified();\r\n\r\n    while (i--) {\r\n      mem = cur[i];\r\n      if (mem instanceof Document) {\r\n        const some = values.some(function(v) {\r\n          return mem.equals(v);\r\n        });\r\n        if (some) {\r\n          [].splice.call(cur, i, 1);\r\n        }\r\n      } else if (~cur.indexOf.call(values, mem)) {\r\n        [].splice.call(cur, i, 1);\r\n      }\r\n    }\r\n\r\n    if (values[0] instanceof ArraySubdocument) {\r\n      this._registerAtomic('$pullDocs', values.map(function(v) {\r\n        const _id = v.$__getValue('_id');\r\n        if (_id === undefined || v.$isDefault('_id')) {\r\n          return v;\r\n        }\r\n        return _id;\r\n      }));\r\n    } else {\r\n      this._registerAtomic('$pullAll', values);\r\n    }\r\n\r\n\r\n    // Might have modified child paths and then pulled, like\r\n    // `doc.children[1].name = 'test';` followed by\r\n    // `doc.children.remove(doc.children[0]);`. In this case we fall back\r\n    // to a `$set` on the whole array. See #3511\r\n    if (cleanModifiedSubpaths(this[arrayParentSymbol], this[arrayPathSymbol]) > 0) {\r\n      this._registerAtomic('$set', this);\r\n    }\r\n\r\n    return this;\r\n  },\r\n\r\n  /**\r\n   * Wraps [`Array#push`](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/push) with proper change tracking.\r\n   *\r\n   * #### Example:\r\n   *\r\n   *     const schema = Schema({ nums: [Number] });\r\n   *     const Model = mongoose.model('Test', schema);\r\n   *\r\n   *     const doc = await Model.create({ nums: [3, 4] });\r\n   *     doc.nums.push(5); // Add 5 to the end of the array\r\n   *     await doc.save();\r\n   *\r\n   *     // You can also pass an object with `$each` as the\r\n   *     // first parameter to use MongoDB's `$position`\r\n   *     doc.nums.push({\r\n   *       $each: [1, 2],\r\n   *       $position: 0\r\n   *     });\r\n   *     doc.nums; // [1, 2, 3, 4, 5]\r\n   *\r\n   * @param {...Object} [args]\r\n   * @api public\r\n   * @method push\r\n   * @memberOf MongooseArray\r\n   */\r\n\r\n  push() {\r\n    let values = arguments;\r\n    let atomic = values;\r\n    const isOverwrite = values[0] != null &&\r\n      utils.hasUserDefinedProperty(values[0], '$each');\r\n    const arr = utils.isMongooseArray(this) ? this.__array : this;\r\n    if (isOverwrite) {\r\n      atomic = values[0];\r\n      values = values[0].$each;\r\n    }\r\n\r\n    if (this[arraySchemaSymbol] == null) {\r\n      return _basePush.apply(this, values);\r\n    }\r\n\r\n    _checkManualPopulation(this, values);\r\n\r\n    const parent = this[arrayParentSymbol];\r\n    values = [].map.call(values, this._mapCast, this);\r\n    values = this[arraySchemaSymbol].applySetters(values, parent, undefined,\r\n      undefined, { skipDocumentArrayCast: true });\r\n    let ret;\r\n    const atomics = this[arrayAtomicsSymbol];\r\n    this._markModified();\r\n    if (isOverwrite) {\r\n      atomic.$each = values;\r\n\r\n      if ((atomics.$push && atomics.$push.$each && atomics.$push.$each.length || 0) !== 0 &&\r\n          atomics.$push.$position != atomic.$position) {\r\n        throw new MongooseError('Cannot call `Array#push()` multiple times ' +\r\n          'with different `$position`');\r\n      }\r\n\r\n      if (atomic.$position != null) {\r\n        [].splice.apply(arr, [atomic.$position, 0].concat(values));\r\n        ret = this.length;\r\n      } else {\r\n        ret = [].push.apply(arr, values);\r\n      }\r\n    } else {\r\n      if ((atomics.$push && atomics.$push.$each && atomics.$push.$each.length || 0) !== 0 &&\r\n          atomics.$push.$position != null) {\r\n        throw new MongooseError('Cannot call `Array#push()` multiple times ' +\r\n          'with different `$position`');\r\n      }\r\n      atomic = values;\r\n      ret = [].push.apply(arr, values);\r\n    }\r\n\r\n    this._registerAtomic('$push', atomic);\r\n    return ret;\r\n  },\r\n\r\n  /**\r\n   * Alias of [pull](#mongoosearray_MongooseArray-pull)\r\n   *\r\n   * @see MongooseArray#pull #types_array_MongooseArray-pull\r\n   * @see mongodb https://www.mongodb.org/display/DOCS/Updating/#Updating-%24pull\r\n   * @api public\r\n   * @memberOf MongooseArray\r\n   * @instance\r\n   * @method remove\r\n   */\r\n\r\n  remove() {\r\n    return this.pull.apply(this, arguments);\r\n  },\r\n\r\n  /**\r\n   * Sets the casted `val` at index `i` and marks the array modified.\r\n   *\r\n   * #### Example:\r\n   *\r\n   *     // given documents based on the following\r\n   *     const Doc = mongoose.model('Doc', new Schema({ array: [Number] }));\r\n   *\r\n   *     const doc = new Doc({ array: [2,3,4] })\r\n   *\r\n   *     console.log(doc.array) // [2,3,4]\r\n   *\r\n   *     doc.array.set(1,\"5\");\r\n   *     console.log(doc.array); // [2,5,4] // properly cast to number\r\n   *     doc.save() // the change is saved\r\n   *\r\n   *     // VS not using array#set\r\n   *     doc.array[1] = \"5\";\r\n   *     console.log(doc.array); // [2,\"5\",4] // no casting\r\n   *     doc.save() // change is not saved\r\n   *\r\n   * @return {Array} this\r\n   * @api public\r\n   * @method set\r\n   * @memberOf MongooseArray\r\n   */\r\n\r\n  set(i, val, skipModified) {\r\n    const arr = this.__array;\r\n    if (skipModified) {\r\n      arr[i] = val;\r\n      return this;\r\n    }\r\n    const value = methods._cast.call(this, val, i);\r\n    methods._markModified.call(this, i);\r\n    arr[i] = value;\r\n    return this;\r\n  },\r\n\r\n  /**\r\n   * Wraps [`Array#shift`](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/unshift) with proper change tracking.\r\n   *\r\n   * #### Example:\r\n   *\r\n   *     doc.array = [2,3];\r\n   *     const res = doc.array.shift();\r\n   *     console.log(res) // 2\r\n   *     console.log(doc.array) // [3]\r\n   *\r\n   * #### Note:\r\n   *\r\n   * _marks the entire array as modified, which if saved, will store it as a `$set` operation, potentially overwritting any changes that happen between when you retrieved the object and when you save it._\r\n   *\r\n   * @api public\r\n   * @method shift\r\n   * @memberOf MongooseArray\r\n   */\r\n\r\n  shift() {\r\n    const arr = utils.isMongooseArray(this) ? this.__array : this;\r\n    this._markModified();\r\n    const ret = [].shift.call(arr);\r\n    this._registerAtomic('$set', this);\r\n    return ret;\r\n  },\r\n\r\n  /**\r\n   * Wraps [`Array#sort`](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/sort) with proper change tracking.\r\n   *\r\n   * #### Note:\r\n   *\r\n   * _marks the entire array as modified, which if saved, will store it as a `$set` operation, potentially overwritting any changes that happen between when you retrieved the object and when you save it._\r\n   *\r\n   * @api public\r\n   * @method sort\r\n   * @memberOf MongooseArray\r\n   * @see https://masteringjs.io/tutorials/fundamentals/array-sort\r\n   */\r\n\r\n  sort() {\r\n    const arr = utils.isMongooseArray(this) ? this.__array : this;\r\n    const ret = [].sort.apply(arr, arguments);\r\n    this._registerAtomic('$set', this);\r\n    return ret;\r\n  },\r\n\r\n  /**\r\n   * Wraps [`Array#splice`](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/splice) with proper change tracking and casting.\r\n   *\r\n   * #### Note:\r\n   *\r\n   * _marks the entire array as modified, which if saved, will store it as a `$set` operation, potentially overwritting any changes that happen between when you retrieved the object and when you save it._\r\n   *\r\n   * @api public\r\n   * @method splice\r\n   * @memberOf MongooseArray\r\n   * @see https://masteringjs.io/tutorials/fundamentals/array-splice\r\n   */\r\n\r\n  splice() {\r\n    let ret;\r\n    const arr = utils.isMongooseArray(this) ? this.__array : this;\r\n\r\n    this._markModified();\r\n    _checkManualPopulation(this, Array.prototype.slice.call(arguments, 2));\r\n\r\n    if (arguments.length) {\r\n      let vals;\r\n      if (this[arraySchemaSymbol] == null) {\r\n        vals = arguments;\r\n      } else {\r\n        vals = [];\r\n        for (let i = 0; i < arguments.length; ++i) {\r\n          vals[i] = i < 2 ?\r\n            arguments[i] :\r\n            this._cast(arguments[i], arguments[0] + (i - 2));\r\n        }\r\n      }\r\n\r\n      ret = [].splice.apply(arr, vals);\r\n      this._registerAtomic('$set', this);\r\n    }\r\n\r\n    return ret;\r\n  },\r\n\r\n  /*!\r\n   * ignore\r\n   */\r\n\r\n  toBSON() {\r\n    return this.toObject(internalToObjectOptions);\r\n  },\r\n\r\n  /**\r\n   * Returns a native js Array.\r\n   *\r\n   * @param {Object} options\r\n   * @return {Array}\r\n   * @api public\r\n   * @method toObject\r\n   * @memberOf MongooseArray\r\n   */\r\n\r\n  toObject(options) {\r\n    const arr = utils.isMongooseArray(this) ? this.__array : this;\r\n    if (options && options.depopulate) {\r\n      options = utils.clone(options);\r\n      options._isNested = true;\r\n      // Ensure return value is a vanilla array, because in Node.js 6+ `map()`\r\n      // is smart enough to use the inherited array's constructor.\r\n      return [].concat(arr).map(function(doc) {\r\n        return doc instanceof Document\r\n          ? doc.toObject(options)\r\n          : doc;\r\n      });\r\n    }\r\n\r\n    return [].concat(arr);\r\n  },\r\n\r\n  $toObject() {\r\n    return this.constructor.prototype.toObject.apply(this, arguments);\r\n  },\r\n  /**\r\n   * Wraps [`Array#unshift`](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/unshift) with proper change tracking.\r\n   *\r\n   * #### Note:\r\n   *\r\n   * _marks the entire array as modified, which if saved, will store it as a `$set` operation, potentially overwriting any changes that happen between when you retrieved the object and when you save it._\r\n   *\r\n   * @api public\r\n   * @method unshift\r\n   * @memberOf MongooseArray\r\n   */\r\n\r\n  unshift() {\r\n    _checkManualPopulation(this, arguments);\r\n\r\n    let values;\r\n    if (this[arraySchemaSymbol] == null) {\r\n      values = arguments;\r\n    } else {\r\n      values = [].map.call(arguments, this._cast, this);\r\n      values = this[arraySchemaSymbol].applySetters(values, this[arrayParentSymbol]);\r\n    }\r\n\r\n    const arr = utils.isMongooseArray(this) ? this.__array : this;\r\n    this._markModified();\r\n    [].unshift.apply(arr, values);\r\n    this._registerAtomic('$set', this);\r\n    return this.length;\r\n  }\r\n};\r\n\r\n/*!\r\n * ignore\r\n */\r\n\r\nfunction _isAllSubdocs(docs, ref) {\r\n  if (!ref) {\r\n    return false;\r\n  }\r\n\r\n  for (const arg of docs) {\r\n    if (arg == null) {\r\n      return false;\r\n    }\r\n    const model = arg.constructor;\r\n    if (!(arg instanceof Document) ||\r\n      (model.modelName !== ref && model.baseModelName !== ref)) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\n/*!\r\n * Minimize _just_ empty objects along the path chain specified\r\n * by `parts`, ignoring all other paths. Useful in cases where\r\n * you want to minimize after unsetting a path.\r\n *\r\n * #### Example:\r\n *\r\n *     const obj = { foo: { bar: { baz: {} } }, a: {} };\r\n *     _minimizePath(obj, 'foo.bar.baz');\r\n *     obj; // { a: {} }\r\n */\r\n\r\nfunction _minimizePath(obj, parts, i) {\r\n  if (typeof parts === 'string') {\r\n    if (parts.indexOf('.') === -1) {\r\n      return;\r\n    }\r\n\r\n    parts = mpath.stringToParts(parts);\r\n  }\r\n  i = i || 0;\r\n  if (i >= parts.length) {\r\n    return;\r\n  }\r\n  if (obj == null || typeof obj !== 'object') {\r\n    return;\r\n  }\r\n\r\n  _minimizePath(obj[parts[0]], parts, i + 1);\r\n  if (obj[parts[0]] != null && typeof obj[parts[0]] === 'object' && Object.keys(obj[parts[0]]).length === 0) {\r\n    delete obj[parts[0]];\r\n  }\r\n}\r\n\r\n/*!\r\n * ignore\r\n */\r\n\r\nfunction _checkManualPopulation(arr, docs) {\r\n  const ref = arr == null ?\r\n    null :\r\n    arr[arraySchemaSymbol] && arr[arraySchemaSymbol].caster && arr[arraySchemaSymbol].caster.options && arr[arraySchemaSymbol].caster.options.ref || null;\r\n  if (arr.length === 0 &&\r\n      docs.length !== 0) {\r\n    if (_isAllSubdocs(docs, ref)) {\r\n      arr[arrayParentSymbol].$populated(arr[arrayPathSymbol], [], {\r\n        [populateModelSymbol]: docs[0].constructor\r\n      });\r\n    }\r\n  }\r\n}\r\n\r\nconst returnVanillaArrayMethods = [\r\n  'filter',\r\n  'flat',\r\n  'flatMap',\r\n  'map',\r\n  'slice'\r\n];\r\nfor (const method of returnVanillaArrayMethods) {\r\n  if (Array.prototype[method] == null) {\r\n    continue;\r\n  }\r\n\r\n  methods[method] = function() {\r\n    const _arr = utils.isMongooseArray(this) ? this.__array : this;\r\n    const arr = [].concat(_arr);\r\n\r\n    return arr[method].apply(arr, arguments);\r\n  };\r\n}\r\n\r\nmodule.exports = methods;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}