{"ast":null,"code":"import { HttpRequest as __HttpRequest } from \"@aws-sdk/protocol-http\";\nimport { decorateServiceException as __decorateServiceException, expectLong as __expectLong, expectNonNull as __expectNonNull, expectObject as __expectObject, expectString as __expectString, map as __map, throwDefaultError } from \"@aws-sdk/smithy-client\";\nimport { InvalidRequestException, ResourceNotFoundException, TooManyRequestsException, UnauthorizedException } from \"../models/models_0\";\nimport { SSOServiceException as __BaseException } from \"../models/SSOServiceException\";\nexport const serializeAws_restJson1GetRoleCredentialsCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"x-amz-sso_bearer_token\": input.accessToken\n  });\n  const resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/federation/credentials\";\n  const query = map({\n    role_name: [, __expectNonNull(input.roleName, `roleName`)],\n    account_id: [, __expectNonNull(input.accountId, `accountId`)]\n  });\n  let body;\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const serializeAws_restJson1ListAccountRolesCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"x-amz-sso_bearer_token\": input.accessToken\n  });\n  const resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/assignment/roles\";\n  const query = map({\n    next_token: [, input.nextToken],\n    max_result: [() => input.maxResults !== void 0, () => input.maxResults.toString()],\n    account_id: [, __expectNonNull(input.accountId, `accountId`)]\n  });\n  let body;\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const serializeAws_restJson1ListAccountsCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"x-amz-sso_bearer_token\": input.accessToken\n  });\n  const resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/assignment/accounts\";\n  const query = map({\n    next_token: [, input.nextToken],\n    max_result: [() => input.maxResults !== void 0, () => input.maxResults.toString()]\n  });\n  let body;\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexport const serializeAws_restJson1LogoutCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"x-amz-sso_bearer_token\": input.accessToken\n  });\n  const resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/logout\";\n  let body;\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"POST\",\n    headers,\n    path: resolvedPath,\n    body\n  });\n};\nexport const deserializeAws_restJson1GetRoleCredentialsCommand = async (output, context) => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restJson1GetRoleCredentialsCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output)\n  });\n  const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), \"body\");\n  if (data.roleCredentials != null) {\n    contents.roleCredentials = deserializeAws_restJson1RoleCredentials(data.roleCredentials, context);\n  }\n  return contents;\n};\nconst deserializeAws_restJson1GetRoleCredentialsCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    case \"InvalidRequestException\":\n    case \"com.amazonaws.sso#InvalidRequestException\":\n      throw await deserializeAws_restJson1InvalidRequestExceptionResponse(parsedOutput, context);\n    case \"ResourceNotFoundException\":\n    case \"com.amazonaws.sso#ResourceNotFoundException\":\n      throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);\n    case \"TooManyRequestsException\":\n    case \"com.amazonaws.sso#TooManyRequestsException\":\n      throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);\n    case \"UnauthorizedException\":\n    case \"com.amazonaws.sso#UnauthorizedException\":\n      throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);\n    default:\n      const parsedBody = parsedOutput.body;\n      throwDefaultError({\n        output,\n        parsedBody,\n        exceptionCtor: __BaseException,\n        errorCode\n      });\n  }\n};\nexport const deserializeAws_restJson1ListAccountRolesCommand = async (output, context) => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restJson1ListAccountRolesCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output)\n  });\n  const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), \"body\");\n  if (data.nextToken != null) {\n    contents.nextToken = __expectString(data.nextToken);\n  }\n  if (data.roleList != null) {\n    contents.roleList = deserializeAws_restJson1RoleListType(data.roleList, context);\n  }\n  return contents;\n};\nconst deserializeAws_restJson1ListAccountRolesCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    case \"InvalidRequestException\":\n    case \"com.amazonaws.sso#InvalidRequestException\":\n      throw await deserializeAws_restJson1InvalidRequestExceptionResponse(parsedOutput, context);\n    case \"ResourceNotFoundException\":\n    case \"com.amazonaws.sso#ResourceNotFoundException\":\n      throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);\n    case \"TooManyRequestsException\":\n    case \"com.amazonaws.sso#TooManyRequestsException\":\n      throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);\n    case \"UnauthorizedException\":\n    case \"com.amazonaws.sso#UnauthorizedException\":\n      throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);\n    default:\n      const parsedBody = parsedOutput.body;\n      throwDefaultError({\n        output,\n        parsedBody,\n        exceptionCtor: __BaseException,\n        errorCode\n      });\n  }\n};\nexport const deserializeAws_restJson1ListAccountsCommand = async (output, context) => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restJson1ListAccountsCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output)\n  });\n  const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), \"body\");\n  if (data.accountList != null) {\n    contents.accountList = deserializeAws_restJson1AccountListType(data.accountList, context);\n  }\n  if (data.nextToken != null) {\n    contents.nextToken = __expectString(data.nextToken);\n  }\n  return contents;\n};\nconst deserializeAws_restJson1ListAccountsCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    case \"InvalidRequestException\":\n    case \"com.amazonaws.sso#InvalidRequestException\":\n      throw await deserializeAws_restJson1InvalidRequestExceptionResponse(parsedOutput, context);\n    case \"ResourceNotFoundException\":\n    case \"com.amazonaws.sso#ResourceNotFoundException\":\n      throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);\n    case \"TooManyRequestsException\":\n    case \"com.amazonaws.sso#TooManyRequestsException\":\n      throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);\n    case \"UnauthorizedException\":\n    case \"com.amazonaws.sso#UnauthorizedException\":\n      throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);\n    default:\n      const parsedBody = parsedOutput.body;\n      throwDefaultError({\n        output,\n        parsedBody,\n        exceptionCtor: __BaseException,\n        errorCode\n      });\n  }\n};\nexport const deserializeAws_restJson1LogoutCommand = async (output, context) => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restJson1LogoutCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output)\n  });\n  await collectBody(output.body, context);\n  return contents;\n};\nconst deserializeAws_restJson1LogoutCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    case \"InvalidRequestException\":\n    case \"com.amazonaws.sso#InvalidRequestException\":\n      throw await deserializeAws_restJson1InvalidRequestExceptionResponse(parsedOutput, context);\n    case \"TooManyRequestsException\":\n    case \"com.amazonaws.sso#TooManyRequestsException\":\n      throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);\n    case \"UnauthorizedException\":\n    case \"com.amazonaws.sso#UnauthorizedException\":\n      throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);\n    default:\n      const parsedBody = parsedOutput.body;\n      throwDefaultError({\n        output,\n        parsedBody,\n        exceptionCtor: __BaseException,\n        errorCode\n      });\n  }\n};\nconst map = __map;\nconst deserializeAws_restJson1InvalidRequestExceptionResponse = async (parsedOutput, context) => {\n  const contents = map({});\n  const data = parsedOutput.body;\n  if (data.message != null) {\n    contents.message = __expectString(data.message);\n  }\n  const exception = new InvalidRequestException({\n    $metadata: deserializeMetadata(parsedOutput),\n    ...contents\n  });\n  return __decorateServiceException(exception, parsedOutput.body);\n};\nconst deserializeAws_restJson1ResourceNotFoundExceptionResponse = async (parsedOutput, context) => {\n  const contents = map({});\n  const data = parsedOutput.body;\n  if (data.message != null) {\n    contents.message = __expectString(data.message);\n  }\n  const exception = new ResourceNotFoundException({\n    $metadata: deserializeMetadata(parsedOutput),\n    ...contents\n  });\n  return __decorateServiceException(exception, parsedOutput.body);\n};\nconst deserializeAws_restJson1TooManyRequestsExceptionResponse = async (parsedOutput, context) => {\n  const contents = map({});\n  const data = parsedOutput.body;\n  if (data.message != null) {\n    contents.message = __expectString(data.message);\n  }\n  const exception = new TooManyRequestsException({\n    $metadata: deserializeMetadata(parsedOutput),\n    ...contents\n  });\n  return __decorateServiceException(exception, parsedOutput.body);\n};\nconst deserializeAws_restJson1UnauthorizedExceptionResponse = async (parsedOutput, context) => {\n  const contents = map({});\n  const data = parsedOutput.body;\n  if (data.message != null) {\n    contents.message = __expectString(data.message);\n  }\n  const exception = new UnauthorizedException({\n    $metadata: deserializeMetadata(parsedOutput),\n    ...contents\n  });\n  return __decorateServiceException(exception, parsedOutput.body);\n};\nconst deserializeAws_restJson1AccountInfo = (output, context) => {\n  return {\n    accountId: __expectString(output.accountId),\n    accountName: __expectString(output.accountName),\n    emailAddress: __expectString(output.emailAddress)\n  };\n};\nconst deserializeAws_restJson1AccountListType = (output, context) => {\n  const retVal = (output || []).filter(e => e != null).map(entry => {\n    if (entry === null) {\n      return null;\n    }\n    return deserializeAws_restJson1AccountInfo(entry, context);\n  });\n  return retVal;\n};\nconst deserializeAws_restJson1RoleCredentials = (output, context) => {\n  return {\n    accessKeyId: __expectString(output.accessKeyId),\n    expiration: __expectLong(output.expiration),\n    secretAccessKey: __expectString(output.secretAccessKey),\n    sessionToken: __expectString(output.sessionToken)\n  };\n};\nconst deserializeAws_restJson1RoleInfo = (output, context) => {\n  return {\n    accountId: __expectString(output.accountId),\n    roleName: __expectString(output.roleName)\n  };\n};\nconst deserializeAws_restJson1RoleListType = (output, context) => {\n  const retVal = (output || []).filter(e => e != null).map(entry => {\n    if (entry === null) {\n      return null;\n    }\n    return deserializeAws_restJson1RoleInfo(entry, context);\n  });\n  return retVal;\n};\nconst deserializeMetadata = output => ({\n  httpStatusCode: output.statusCode,\n  requestId: output.headers[\"x-amzn-requestid\"] ?? output.headers[\"x-amzn-request-id\"] ?? output.headers[\"x-amz-request-id\"],\n  extendedRequestId: output.headers[\"x-amz-id-2\"],\n  cfId: output.headers[\"x-amz-cf-id\"]\n});\nconst collectBody = function () {\n  let streamBody = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Uint8Array();\n  let context = arguments.length > 1 ? arguments[1] : undefined;\n  if (streamBody instanceof Uint8Array) {\n    return Promise.resolve(streamBody);\n  }\n  return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());\n};\nconst collectBodyString = (streamBody, context) => collectBody(streamBody, context).then(body => context.utf8Encoder(body));\nconst isSerializableHeaderValue = value => value !== undefined && value !== null && value !== \"\" && (!Object.getOwnPropertyNames(value).includes(\"length\") || value.length != 0) && (!Object.getOwnPropertyNames(value).includes(\"size\") || value.size != 0);\nconst parseBody = (streamBody, context) => collectBodyString(streamBody, context).then(encoded => {\n  if (encoded.length) {\n    return JSON.parse(encoded);\n  }\n  return {};\n});\nconst parseErrorBody = async (errorBody, context) => {\n  const value = await parseBody(errorBody, context);\n  value.message = value.message ?? value.Message;\n  return value;\n};\nconst loadRestJsonErrorCode = (output, data) => {\n  const findKey = (object, key) => Object.keys(object).find(k => k.toLowerCase() === key.toLowerCase());\n  const sanitizeErrorCode = rawValue => {\n    let cleanValue = rawValue;\n    if (typeof cleanValue === \"number\") {\n      cleanValue = cleanValue.toString();\n    }\n    if (cleanValue.indexOf(\",\") >= 0) {\n      cleanValue = cleanValue.split(\",\")[0];\n    }\n    if (cleanValue.indexOf(\":\") >= 0) {\n      cleanValue = cleanValue.split(\":\")[0];\n    }\n    if (cleanValue.indexOf(\"#\") >= 0) {\n      cleanValue = cleanValue.split(\"#\")[1];\n    }\n    return cleanValue;\n  };\n  const headerKey = findKey(output.headers, \"x-amzn-errortype\");\n  if (headerKey !== undefined) {\n    return sanitizeErrorCode(output.headers[headerKey]);\n  }\n  if (data.code !== undefined) {\n    return sanitizeErrorCode(data.code);\n  }\n  if (data[\"__type\"] !== undefined) {\n    return sanitizeErrorCode(data[\"__type\"]);\n  }\n};","map":{"version":3,"names":["HttpRequest","__HttpRequest","decorateServiceException","__decorateServiceException","expectLong","__expectLong","expectNonNull","__expectNonNull","expectObject","__expectObject","expectString","__expectString","map","__map","throwDefaultError","InvalidRequestException","ResourceNotFoundException","TooManyRequestsException","UnauthorizedException","SSOServiceException","__BaseException","serializeAws_restJson1GetRoleCredentialsCommand","input","context","hostname","protocol","port","path","basePath","endpoint","headers","isSerializableHeaderValue","accessToken","resolvedPath","endsWith","slice","query","role_name","roleName","account_id","accountId","body","method","serializeAws_restJson1ListAccountRolesCommand","next_token","nextToken","max_result","maxResults","toString","serializeAws_restJson1ListAccountsCommand","serializeAws_restJson1LogoutCommand","deserializeAws_restJson1GetRoleCredentialsCommand","output","statusCode","deserializeAws_restJson1GetRoleCredentialsCommandError","contents","$metadata","deserializeMetadata","data","parseBody","roleCredentials","deserializeAws_restJson1RoleCredentials","parsedOutput","parseErrorBody","errorCode","loadRestJsonErrorCode","deserializeAws_restJson1InvalidRequestExceptionResponse","deserializeAws_restJson1ResourceNotFoundExceptionResponse","deserializeAws_restJson1TooManyRequestsExceptionResponse","deserializeAws_restJson1UnauthorizedExceptionResponse","parsedBody","exceptionCtor","deserializeAws_restJson1ListAccountRolesCommand","deserializeAws_restJson1ListAccountRolesCommandError","roleList","deserializeAws_restJson1RoleListType","deserializeAws_restJson1ListAccountsCommand","deserializeAws_restJson1ListAccountsCommandError","accountList","deserializeAws_restJson1AccountListType","deserializeAws_restJson1LogoutCommand","deserializeAws_restJson1LogoutCommandError","collectBody","message","exception","deserializeAws_restJson1AccountInfo","accountName","emailAddress","retVal","filter","e","entry","accessKeyId","expiration","secretAccessKey","sessionToken","deserializeAws_restJson1RoleInfo","httpStatusCode","requestId","extendedRequestId","cfId","streamBody","Uint8Array","Promise","resolve","streamCollector","collectBodyString","then","utf8Encoder","value","undefined","Object","getOwnPropertyNames","includes","length","size","encoded","JSON","parse","errorBody","Message","findKey","object","key","keys","find","k","toLowerCase","sanitizeErrorCode","rawValue","cleanValue","indexOf","split","headerKey","code"],"sources":["C:/Users/91930/Desktop/Github projects/Pharmacy Demo/back-end/node_modules/@aws-sdk/client-sso/dist-es/protocols/Aws_restJson1.js"],"sourcesContent":["import { HttpRequest as __HttpRequest } from \"@aws-sdk/protocol-http\";\r\nimport { decorateServiceException as __decorateServiceException, expectLong as __expectLong, expectNonNull as __expectNonNull, expectObject as __expectObject, expectString as __expectString, map as __map, throwDefaultError, } from \"@aws-sdk/smithy-client\";\r\nimport { InvalidRequestException, ResourceNotFoundException, TooManyRequestsException, UnauthorizedException, } from \"../models/models_0\";\r\nimport { SSOServiceException as __BaseException } from \"../models/SSOServiceException\";\r\nexport const serializeAws_restJson1GetRoleCredentialsCommand = async (input, context) => {\r\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\r\n    const headers = map({}, isSerializableHeaderValue, {\r\n        \"x-amz-sso_bearer_token\": input.accessToken,\r\n    });\r\n    const resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/federation/credentials\";\r\n    const query = map({\r\n        role_name: [, __expectNonNull(input.roleName, `roleName`)],\r\n        account_id: [, __expectNonNull(input.accountId, `accountId`)],\r\n    });\r\n    let body;\r\n    return new __HttpRequest({\r\n        protocol,\r\n        hostname,\r\n        port,\r\n        method: \"GET\",\r\n        headers,\r\n        path: resolvedPath,\r\n        query,\r\n        body,\r\n    });\r\n};\r\nexport const serializeAws_restJson1ListAccountRolesCommand = async (input, context) => {\r\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\r\n    const headers = map({}, isSerializableHeaderValue, {\r\n        \"x-amz-sso_bearer_token\": input.accessToken,\r\n    });\r\n    const resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/assignment/roles\";\r\n    const query = map({\r\n        next_token: [, input.nextToken],\r\n        max_result: [() => input.maxResults !== void 0, () => input.maxResults.toString()],\r\n        account_id: [, __expectNonNull(input.accountId, `accountId`)],\r\n    });\r\n    let body;\r\n    return new __HttpRequest({\r\n        protocol,\r\n        hostname,\r\n        port,\r\n        method: \"GET\",\r\n        headers,\r\n        path: resolvedPath,\r\n        query,\r\n        body,\r\n    });\r\n};\r\nexport const serializeAws_restJson1ListAccountsCommand = async (input, context) => {\r\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\r\n    const headers = map({}, isSerializableHeaderValue, {\r\n        \"x-amz-sso_bearer_token\": input.accessToken,\r\n    });\r\n    const resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/assignment/accounts\";\r\n    const query = map({\r\n        next_token: [, input.nextToken],\r\n        max_result: [() => input.maxResults !== void 0, () => input.maxResults.toString()],\r\n    });\r\n    let body;\r\n    return new __HttpRequest({\r\n        protocol,\r\n        hostname,\r\n        port,\r\n        method: \"GET\",\r\n        headers,\r\n        path: resolvedPath,\r\n        query,\r\n        body,\r\n    });\r\n};\r\nexport const serializeAws_restJson1LogoutCommand = async (input, context) => {\r\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\r\n    const headers = map({}, isSerializableHeaderValue, {\r\n        \"x-amz-sso_bearer_token\": input.accessToken,\r\n    });\r\n    const resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/logout\";\r\n    let body;\r\n    return new __HttpRequest({\r\n        protocol,\r\n        hostname,\r\n        port,\r\n        method: \"POST\",\r\n        headers,\r\n        path: resolvedPath,\r\n        body,\r\n    });\r\n};\r\nexport const deserializeAws_restJson1GetRoleCredentialsCommand = async (output, context) => {\r\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\r\n        return deserializeAws_restJson1GetRoleCredentialsCommandError(output, context);\r\n    }\r\n    const contents = map({\r\n        $metadata: deserializeMetadata(output),\r\n    });\r\n    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), \"body\");\r\n    if (data.roleCredentials != null) {\r\n        contents.roleCredentials = deserializeAws_restJson1RoleCredentials(data.roleCredentials, context);\r\n    }\r\n    return contents;\r\n};\r\nconst deserializeAws_restJson1GetRoleCredentialsCommandError = async (output, context) => {\r\n    const parsedOutput = {\r\n        ...output,\r\n        body: await parseErrorBody(output.body, context),\r\n    };\r\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\r\n    switch (errorCode) {\r\n        case \"InvalidRequestException\":\r\n        case \"com.amazonaws.sso#InvalidRequestException\":\r\n            throw await deserializeAws_restJson1InvalidRequestExceptionResponse(parsedOutput, context);\r\n        case \"ResourceNotFoundException\":\r\n        case \"com.amazonaws.sso#ResourceNotFoundException\":\r\n            throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);\r\n        case \"TooManyRequestsException\":\r\n        case \"com.amazonaws.sso#TooManyRequestsException\":\r\n            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);\r\n        case \"UnauthorizedException\":\r\n        case \"com.amazonaws.sso#UnauthorizedException\":\r\n            throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);\r\n        default:\r\n            const parsedBody = parsedOutput.body;\r\n            throwDefaultError({\r\n                output,\r\n                parsedBody,\r\n                exceptionCtor: __BaseException,\r\n                errorCode,\r\n            });\r\n    }\r\n};\r\nexport const deserializeAws_restJson1ListAccountRolesCommand = async (output, context) => {\r\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\r\n        return deserializeAws_restJson1ListAccountRolesCommandError(output, context);\r\n    }\r\n    const contents = map({\r\n        $metadata: deserializeMetadata(output),\r\n    });\r\n    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), \"body\");\r\n    if (data.nextToken != null) {\r\n        contents.nextToken = __expectString(data.nextToken);\r\n    }\r\n    if (data.roleList != null) {\r\n        contents.roleList = deserializeAws_restJson1RoleListType(data.roleList, context);\r\n    }\r\n    return contents;\r\n};\r\nconst deserializeAws_restJson1ListAccountRolesCommandError = async (output, context) => {\r\n    const parsedOutput = {\r\n        ...output,\r\n        body: await parseErrorBody(output.body, context),\r\n    };\r\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\r\n    switch (errorCode) {\r\n        case \"InvalidRequestException\":\r\n        case \"com.amazonaws.sso#InvalidRequestException\":\r\n            throw await deserializeAws_restJson1InvalidRequestExceptionResponse(parsedOutput, context);\r\n        case \"ResourceNotFoundException\":\r\n        case \"com.amazonaws.sso#ResourceNotFoundException\":\r\n            throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);\r\n        case \"TooManyRequestsException\":\r\n        case \"com.amazonaws.sso#TooManyRequestsException\":\r\n            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);\r\n        case \"UnauthorizedException\":\r\n        case \"com.amazonaws.sso#UnauthorizedException\":\r\n            throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);\r\n        default:\r\n            const parsedBody = parsedOutput.body;\r\n            throwDefaultError({\r\n                output,\r\n                parsedBody,\r\n                exceptionCtor: __BaseException,\r\n                errorCode,\r\n            });\r\n    }\r\n};\r\nexport const deserializeAws_restJson1ListAccountsCommand = async (output, context) => {\r\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\r\n        return deserializeAws_restJson1ListAccountsCommandError(output, context);\r\n    }\r\n    const contents = map({\r\n        $metadata: deserializeMetadata(output),\r\n    });\r\n    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), \"body\");\r\n    if (data.accountList != null) {\r\n        contents.accountList = deserializeAws_restJson1AccountListType(data.accountList, context);\r\n    }\r\n    if (data.nextToken != null) {\r\n        contents.nextToken = __expectString(data.nextToken);\r\n    }\r\n    return contents;\r\n};\r\nconst deserializeAws_restJson1ListAccountsCommandError = async (output, context) => {\r\n    const parsedOutput = {\r\n        ...output,\r\n        body: await parseErrorBody(output.body, context),\r\n    };\r\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\r\n    switch (errorCode) {\r\n        case \"InvalidRequestException\":\r\n        case \"com.amazonaws.sso#InvalidRequestException\":\r\n            throw await deserializeAws_restJson1InvalidRequestExceptionResponse(parsedOutput, context);\r\n        case \"ResourceNotFoundException\":\r\n        case \"com.amazonaws.sso#ResourceNotFoundException\":\r\n            throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);\r\n        case \"TooManyRequestsException\":\r\n        case \"com.amazonaws.sso#TooManyRequestsException\":\r\n            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);\r\n        case \"UnauthorizedException\":\r\n        case \"com.amazonaws.sso#UnauthorizedException\":\r\n            throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);\r\n        default:\r\n            const parsedBody = parsedOutput.body;\r\n            throwDefaultError({\r\n                output,\r\n                parsedBody,\r\n                exceptionCtor: __BaseException,\r\n                errorCode,\r\n            });\r\n    }\r\n};\r\nexport const deserializeAws_restJson1LogoutCommand = async (output, context) => {\r\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\r\n        return deserializeAws_restJson1LogoutCommandError(output, context);\r\n    }\r\n    const contents = map({\r\n        $metadata: deserializeMetadata(output),\r\n    });\r\n    await collectBody(output.body, context);\r\n    return contents;\r\n};\r\nconst deserializeAws_restJson1LogoutCommandError = async (output, context) => {\r\n    const parsedOutput = {\r\n        ...output,\r\n        body: await parseErrorBody(output.body, context),\r\n    };\r\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\r\n    switch (errorCode) {\r\n        case \"InvalidRequestException\":\r\n        case \"com.amazonaws.sso#InvalidRequestException\":\r\n            throw await deserializeAws_restJson1InvalidRequestExceptionResponse(parsedOutput, context);\r\n        case \"TooManyRequestsException\":\r\n        case \"com.amazonaws.sso#TooManyRequestsException\":\r\n            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);\r\n        case \"UnauthorizedException\":\r\n        case \"com.amazonaws.sso#UnauthorizedException\":\r\n            throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);\r\n        default:\r\n            const parsedBody = parsedOutput.body;\r\n            throwDefaultError({\r\n                output,\r\n                parsedBody,\r\n                exceptionCtor: __BaseException,\r\n                errorCode,\r\n            });\r\n    }\r\n};\r\nconst map = __map;\r\nconst deserializeAws_restJson1InvalidRequestExceptionResponse = async (parsedOutput, context) => {\r\n    const contents = map({});\r\n    const data = parsedOutput.body;\r\n    if (data.message != null) {\r\n        contents.message = __expectString(data.message);\r\n    }\r\n    const exception = new InvalidRequestException({\r\n        $metadata: deserializeMetadata(parsedOutput),\r\n        ...contents,\r\n    });\r\n    return __decorateServiceException(exception, parsedOutput.body);\r\n};\r\nconst deserializeAws_restJson1ResourceNotFoundExceptionResponse = async (parsedOutput, context) => {\r\n    const contents = map({});\r\n    const data = parsedOutput.body;\r\n    if (data.message != null) {\r\n        contents.message = __expectString(data.message);\r\n    }\r\n    const exception = new ResourceNotFoundException({\r\n        $metadata: deserializeMetadata(parsedOutput),\r\n        ...contents,\r\n    });\r\n    return __decorateServiceException(exception, parsedOutput.body);\r\n};\r\nconst deserializeAws_restJson1TooManyRequestsExceptionResponse = async (parsedOutput, context) => {\r\n    const contents = map({});\r\n    const data = parsedOutput.body;\r\n    if (data.message != null) {\r\n        contents.message = __expectString(data.message);\r\n    }\r\n    const exception = new TooManyRequestsException({\r\n        $metadata: deserializeMetadata(parsedOutput),\r\n        ...contents,\r\n    });\r\n    return __decorateServiceException(exception, parsedOutput.body);\r\n};\r\nconst deserializeAws_restJson1UnauthorizedExceptionResponse = async (parsedOutput, context) => {\r\n    const contents = map({});\r\n    const data = parsedOutput.body;\r\n    if (data.message != null) {\r\n        contents.message = __expectString(data.message);\r\n    }\r\n    const exception = new UnauthorizedException({\r\n        $metadata: deserializeMetadata(parsedOutput),\r\n        ...contents,\r\n    });\r\n    return __decorateServiceException(exception, parsedOutput.body);\r\n};\r\nconst deserializeAws_restJson1AccountInfo = (output, context) => {\r\n    return {\r\n        accountId: __expectString(output.accountId),\r\n        accountName: __expectString(output.accountName),\r\n        emailAddress: __expectString(output.emailAddress),\r\n    };\r\n};\r\nconst deserializeAws_restJson1AccountListType = (output, context) => {\r\n    const retVal = (output || [])\r\n        .filter((e) => e != null)\r\n        .map((entry) => {\r\n        if (entry === null) {\r\n            return null;\r\n        }\r\n        return deserializeAws_restJson1AccountInfo(entry, context);\r\n    });\r\n    return retVal;\r\n};\r\nconst deserializeAws_restJson1RoleCredentials = (output, context) => {\r\n    return {\r\n        accessKeyId: __expectString(output.accessKeyId),\r\n        expiration: __expectLong(output.expiration),\r\n        secretAccessKey: __expectString(output.secretAccessKey),\r\n        sessionToken: __expectString(output.sessionToken),\r\n    };\r\n};\r\nconst deserializeAws_restJson1RoleInfo = (output, context) => {\r\n    return {\r\n        accountId: __expectString(output.accountId),\r\n        roleName: __expectString(output.roleName),\r\n    };\r\n};\r\nconst deserializeAws_restJson1RoleListType = (output, context) => {\r\n    const retVal = (output || [])\r\n        .filter((e) => e != null)\r\n        .map((entry) => {\r\n        if (entry === null) {\r\n            return null;\r\n        }\r\n        return deserializeAws_restJson1RoleInfo(entry, context);\r\n    });\r\n    return retVal;\r\n};\r\nconst deserializeMetadata = (output) => ({\r\n    httpStatusCode: output.statusCode,\r\n    requestId: output.headers[\"x-amzn-requestid\"] ?? output.headers[\"x-amzn-request-id\"] ?? output.headers[\"x-amz-request-id\"],\r\n    extendedRequestId: output.headers[\"x-amz-id-2\"],\r\n    cfId: output.headers[\"x-amz-cf-id\"],\r\n});\r\nconst collectBody = (streamBody = new Uint8Array(), context) => {\r\n    if (streamBody instanceof Uint8Array) {\r\n        return Promise.resolve(streamBody);\r\n    }\r\n    return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());\r\n};\r\nconst collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));\r\nconst isSerializableHeaderValue = (value) => value !== undefined &&\r\n    value !== null &&\r\n    value !== \"\" &&\r\n    (!Object.getOwnPropertyNames(value).includes(\"length\") || value.length != 0) &&\r\n    (!Object.getOwnPropertyNames(value).includes(\"size\") || value.size != 0);\r\nconst parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {\r\n    if (encoded.length) {\r\n        return JSON.parse(encoded);\r\n    }\r\n    return {};\r\n});\r\nconst parseErrorBody = async (errorBody, context) => {\r\n    const value = await parseBody(errorBody, context);\r\n    value.message = value.message ?? value.Message;\r\n    return value;\r\n};\r\nconst loadRestJsonErrorCode = (output, data) => {\r\n    const findKey = (object, key) => Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase());\r\n    const sanitizeErrorCode = (rawValue) => {\r\n        let cleanValue = rawValue;\r\n        if (typeof cleanValue === \"number\") {\r\n            cleanValue = cleanValue.toString();\r\n        }\r\n        if (cleanValue.indexOf(\",\") >= 0) {\r\n            cleanValue = cleanValue.split(\",\")[0];\r\n        }\r\n        if (cleanValue.indexOf(\":\") >= 0) {\r\n            cleanValue = cleanValue.split(\":\")[0];\r\n        }\r\n        if (cleanValue.indexOf(\"#\") >= 0) {\r\n            cleanValue = cleanValue.split(\"#\")[1];\r\n        }\r\n        return cleanValue;\r\n    };\r\n    const headerKey = findKey(output.headers, \"x-amzn-errortype\");\r\n    if (headerKey !== undefined) {\r\n        return sanitizeErrorCode(output.headers[headerKey]);\r\n    }\r\n    if (data.code !== undefined) {\r\n        return sanitizeErrorCode(data.code);\r\n    }\r\n    if (data[\"__type\"] !== undefined) {\r\n        return sanitizeErrorCode(data[\"__type\"]);\r\n    }\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}