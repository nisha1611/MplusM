{"ast":null,"code":"/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Tobias Koppers @sokra\r\n*/\n\n\"use strict\";\n\nconst makeSerializable = require(\"./util/makeSerializable\");\n\n/** @typedef {import(\"./AsyncDependenciesBlock\")} AsyncDependenciesBlock */\n/** @typedef {import(\"./ChunkGraph\")} ChunkGraph */\n/** @typedef {import(\"./ChunkGroup\")} ChunkGroup */\n/** @typedef {import(\"./Dependency\")} Dependency */\n/** @typedef {import(\"./Dependency\").UpdateHashContext} UpdateHashContext */\n/** @typedef {import(\"./util/Hash\")} Hash */\n\n/** @typedef {(d: Dependency) => boolean} DependencyFilterFunction */\n\nclass DependenciesBlock {\n  constructor() {\n    /** @type {Dependency[]} */\n    this.dependencies = [];\n    /** @type {AsyncDependenciesBlock[]} */\n    this.blocks = [];\n    /** @type {DependenciesBlock} */\n    this.parent = undefined;\n  }\n  getRootBlock() {\n    /** @type {DependenciesBlock} */\n    let current = this;\n    while (current.parent) current = current.parent;\n    return current;\n  }\n\n  /**\r\n   * Adds a DependencyBlock to DependencyBlock relationship.\r\n   * This is used for when a Module has a AsyncDependencyBlock tie (for code-splitting)\r\n   *\r\n   * @param {AsyncDependenciesBlock} block block being added\r\n   * @returns {void}\r\n   */\n  addBlock(block) {\n    this.blocks.push(block);\n    block.parent = this;\n  }\n\n  /**\r\n   * @param {Dependency} dependency dependency being tied to block.\r\n   * This is an \"edge\" pointing to another \"node\" on module graph.\r\n   * @returns {void}\r\n   */\n  addDependency(dependency) {\n    this.dependencies.push(dependency);\n  }\n\n  /**\r\n   * @param {Dependency} dependency dependency being removed\r\n   * @returns {void}\r\n   */\n  removeDependency(dependency) {\n    const idx = this.dependencies.indexOf(dependency);\n    if (idx >= 0) {\n      this.dependencies.splice(idx, 1);\n    }\n  }\n\n  /**\r\n   * Removes all dependencies and blocks\r\n   * @returns {void}\r\n   */\n  clearDependenciesAndBlocks() {\n    this.dependencies.length = 0;\n    this.blocks.length = 0;\n  }\n\n  /**\r\n   * @param {Hash} hash the hash used to track dependencies\r\n   * @param {UpdateHashContext} context context\r\n   * @returns {void}\r\n   */\n  updateHash(hash, context) {\n    for (const dep of this.dependencies) {\n      dep.updateHash(hash, context);\n    }\n    for (const block of this.blocks) {\n      block.updateHash(hash, context);\n    }\n  }\n  serialize(_ref) {\n    let {\n      write\n    } = _ref;\n    write(this.dependencies);\n    write(this.blocks);\n  }\n  deserialize(_ref2) {\n    let {\n      read\n    } = _ref2;\n    this.dependencies = read();\n    this.blocks = read();\n    for (const block of this.blocks) {\n      block.parent = this;\n    }\n  }\n}\nmakeSerializable(DependenciesBlock, \"webpack/lib/DependenciesBlock\");\nmodule.exports = DependenciesBlock;","map":{"version":3,"names":["makeSerializable","require","DependenciesBlock","constructor","dependencies","blocks","parent","undefined","getRootBlock","current","addBlock","block","push","addDependency","dependency","removeDependency","idx","indexOf","splice","clearDependenciesAndBlocks","length","updateHash","hash","context","dep","serialize","write","deserialize","read","module","exports"],"sources":["C:/Users/91930/Desktop/Github projects/Pharmacy Demo/front-end/node_modules/webpack/lib/DependenciesBlock.js"],"sourcesContent":["/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Tobias Koppers @sokra\r\n*/\r\n\r\n\"use strict\";\r\n\r\nconst makeSerializable = require(\"./util/makeSerializable\");\r\n\r\n/** @typedef {import(\"./AsyncDependenciesBlock\")} AsyncDependenciesBlock */\r\n/** @typedef {import(\"./ChunkGraph\")} ChunkGraph */\r\n/** @typedef {import(\"./ChunkGroup\")} ChunkGroup */\r\n/** @typedef {import(\"./Dependency\")} Dependency */\r\n/** @typedef {import(\"./Dependency\").UpdateHashContext} UpdateHashContext */\r\n/** @typedef {import(\"./util/Hash\")} Hash */\r\n\r\n/** @typedef {(d: Dependency) => boolean} DependencyFilterFunction */\r\n\r\nclass DependenciesBlock {\r\n\tconstructor() {\r\n\t\t/** @type {Dependency[]} */\r\n\t\tthis.dependencies = [];\r\n\t\t/** @type {AsyncDependenciesBlock[]} */\r\n\t\tthis.blocks = [];\r\n\t\t/** @type {DependenciesBlock} */\r\n\t\tthis.parent = undefined;\r\n\t}\r\n\r\n\tgetRootBlock() {\r\n\t\t/** @type {DependenciesBlock} */\r\n\t\tlet current = this;\r\n\t\twhile (current.parent) current = current.parent;\r\n\t\treturn current;\r\n\t}\r\n\r\n\t/**\r\n\t * Adds a DependencyBlock to DependencyBlock relationship.\r\n\t * This is used for when a Module has a AsyncDependencyBlock tie (for code-splitting)\r\n\t *\r\n\t * @param {AsyncDependenciesBlock} block block being added\r\n\t * @returns {void}\r\n\t */\r\n\taddBlock(block) {\r\n\t\tthis.blocks.push(block);\r\n\t\tblock.parent = this;\r\n\t}\r\n\r\n\t/**\r\n\t * @param {Dependency} dependency dependency being tied to block.\r\n\t * This is an \"edge\" pointing to another \"node\" on module graph.\r\n\t * @returns {void}\r\n\t */\r\n\taddDependency(dependency) {\r\n\t\tthis.dependencies.push(dependency);\r\n\t}\r\n\r\n\t/**\r\n\t * @param {Dependency} dependency dependency being removed\r\n\t * @returns {void}\r\n\t */\r\n\tremoveDependency(dependency) {\r\n\t\tconst idx = this.dependencies.indexOf(dependency);\r\n\t\tif (idx >= 0) {\r\n\t\t\tthis.dependencies.splice(idx, 1);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Removes all dependencies and blocks\r\n\t * @returns {void}\r\n\t */\r\n\tclearDependenciesAndBlocks() {\r\n\t\tthis.dependencies.length = 0;\r\n\t\tthis.blocks.length = 0;\r\n\t}\r\n\r\n\t/**\r\n\t * @param {Hash} hash the hash used to track dependencies\r\n\t * @param {UpdateHashContext} context context\r\n\t * @returns {void}\r\n\t */\r\n\tupdateHash(hash, context) {\r\n\t\tfor (const dep of this.dependencies) {\r\n\t\t\tdep.updateHash(hash, context);\r\n\t\t}\r\n\t\tfor (const block of this.blocks) {\r\n\t\t\tblock.updateHash(hash, context);\r\n\t\t}\r\n\t}\r\n\r\n\tserialize({ write }) {\r\n\t\twrite(this.dependencies);\r\n\t\twrite(this.blocks);\r\n\t}\r\n\r\n\tdeserialize({ read }) {\r\n\t\tthis.dependencies = read();\r\n\t\tthis.blocks = read();\r\n\t\tfor (const block of this.blocks) {\r\n\t\t\tblock.parent = this;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nmakeSerializable(DependenciesBlock, \"webpack/lib/DependenciesBlock\");\r\n\r\nmodule.exports = DependenciesBlock;\r\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ,MAAMA,gBAAgB,GAAGC,OAAO,CAAC,yBAAyB,CAAC;;AAE3D;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,MAAMC,iBAAiB,CAAC;EACvBC,WAAW,GAAG;IACb;IACA,IAAI,CAACC,YAAY,GAAG,EAAE;IACtB;IACA,IAAI,CAACC,MAAM,GAAG,EAAE;IAChB;IACA,IAAI,CAACC,MAAM,GAAGC,SAAS;EACxB;EAEAC,YAAY,GAAG;IACd;IACA,IAAIC,OAAO,GAAG,IAAI;IAClB,OAAOA,OAAO,CAACH,MAAM,EAAEG,OAAO,GAAGA,OAAO,CAACH,MAAM;IAC/C,OAAOG,OAAO;EACf;;EAEA;AACD;AACA;AACA;AACA;AACA;AACA;EACCC,QAAQ,CAACC,KAAK,EAAE;IACf,IAAI,CAACN,MAAM,CAACO,IAAI,CAACD,KAAK,CAAC;IACvBA,KAAK,CAACL,MAAM,GAAG,IAAI;EACpB;;EAEA;AACD;AACA;AACA;AACA;EACCO,aAAa,CAACC,UAAU,EAAE;IACzB,IAAI,CAACV,YAAY,CAACQ,IAAI,CAACE,UAAU,CAAC;EACnC;;EAEA;AACD;AACA;AACA;EACCC,gBAAgB,CAACD,UAAU,EAAE;IAC5B,MAAME,GAAG,GAAG,IAAI,CAACZ,YAAY,CAACa,OAAO,CAACH,UAAU,CAAC;IACjD,IAAIE,GAAG,IAAI,CAAC,EAAE;MACb,IAAI,CAACZ,YAAY,CAACc,MAAM,CAACF,GAAG,EAAE,CAAC,CAAC;IACjC;EACD;;EAEA;AACD;AACA;AACA;EACCG,0BAA0B,GAAG;IAC5B,IAAI,CAACf,YAAY,CAACgB,MAAM,GAAG,CAAC;IAC5B,IAAI,CAACf,MAAM,CAACe,MAAM,GAAG,CAAC;EACvB;;EAEA;AACD;AACA;AACA;AACA;EACCC,UAAU,CAACC,IAAI,EAAEC,OAAO,EAAE;IACzB,KAAK,MAAMC,GAAG,IAAI,IAAI,CAACpB,YAAY,EAAE;MACpCoB,GAAG,CAACH,UAAU,CAACC,IAAI,EAAEC,OAAO,CAAC;IAC9B;IACA,KAAK,MAAMZ,KAAK,IAAI,IAAI,CAACN,MAAM,EAAE;MAChCM,KAAK,CAACU,UAAU,CAACC,IAAI,EAAEC,OAAO,CAAC;IAChC;EACD;EAEAE,SAAS,OAAY;IAAA,IAAX;MAAEC;IAAM,CAAC;IAClBA,KAAK,CAAC,IAAI,CAACtB,YAAY,CAAC;IACxBsB,KAAK,CAAC,IAAI,CAACrB,MAAM,CAAC;EACnB;EAEAsB,WAAW,QAAW;IAAA,IAAV;MAAEC;IAAK,CAAC;IACnB,IAAI,CAACxB,YAAY,GAAGwB,IAAI,EAAE;IAC1B,IAAI,CAACvB,MAAM,GAAGuB,IAAI,EAAE;IACpB,KAAK,MAAMjB,KAAK,IAAI,IAAI,CAACN,MAAM,EAAE;MAChCM,KAAK,CAACL,MAAM,GAAG,IAAI;IACpB;EACD;AACD;AAEAN,gBAAgB,CAACE,iBAAiB,EAAE,+BAA+B,CAAC;AAEpE2B,MAAM,CAACC,OAAO,GAAG5B,iBAAiB"},"metadata":{},"sourceType":"script","externalDependencies":[]}