{"ast":null,"code":"'use strict';\n\nconst SchemaTypeOptions = require('./SchemaTypeOptions');\n\n/**\r\n * The options defined on an ObjectId schematype.\r\n *\r\n * #### Example:\r\n *\r\n *     const schema = new Schema({ testId: mongoose.ObjectId });\r\n *     schema.path('testId').options; // SchemaObjectIdOptions instance\r\n *\r\n * @api public\r\n * @inherits SchemaTypeOptions\r\n * @constructor SchemaObjectIdOptions\r\n */\n\nclass SchemaObjectIdOptions extends SchemaTypeOptions {}\nconst opts = require('./propertyOptions');\n\n/**\r\n * If truthy, uses Mongoose's default built-in ObjectId path.\r\n *\r\n * @api public\r\n * @property auto\r\n * @memberOf SchemaObjectIdOptions\r\n * @type {Boolean}\r\n * @instance\r\n */\n\nObject.defineProperty(SchemaObjectIdOptions.prototype, 'auto', opts);\n\n/**\r\n * Sets default [populate options](/docs/populate.html#query-conditions).\r\n *\r\n * #### Example:\r\n *\r\n *     const schema = new Schema({\r\n *       child: {\r\n *         type: 'ObjectId',\r\n *         ref: 'Child',\r\n *         populate: { select: 'name' }\r\n *       }\r\n *     });\r\n *     const Parent = mongoose.model('Parent', schema);\r\n *\r\n *     // Automatically adds `.select('name')`\r\n *     Parent.findOne().populate('child');\r\n *\r\n * @api public\r\n * @property populate\r\n * @memberOf SchemaObjectIdOptions\r\n * @type {Object}\r\n * @instance\r\n */\n\nObject.defineProperty(SchemaObjectIdOptions.prototype, 'populate', opts);\n\n/*!\r\n * ignore\r\n */\n\nmodule.exports = SchemaObjectIdOptions;","map":{"version":3,"names":["SchemaTypeOptions","require","SchemaObjectIdOptions","opts","Object","defineProperty","prototype","module","exports"],"sources":["C:/Users/91930/Desktop/Github projects/Pharmacy Demo/back-end/node_modules/mongoose/lib/options/SchemaObjectIdOptions.js"],"sourcesContent":["'use strict';\r\n\r\nconst SchemaTypeOptions = require('./SchemaTypeOptions');\r\n\r\n/**\r\n * The options defined on an ObjectId schematype.\r\n *\r\n * #### Example:\r\n *\r\n *     const schema = new Schema({ testId: mongoose.ObjectId });\r\n *     schema.path('testId').options; // SchemaObjectIdOptions instance\r\n *\r\n * @api public\r\n * @inherits SchemaTypeOptions\r\n * @constructor SchemaObjectIdOptions\r\n */\r\n\r\nclass SchemaObjectIdOptions extends SchemaTypeOptions {}\r\n\r\nconst opts = require('./propertyOptions');\r\n\r\n/**\r\n * If truthy, uses Mongoose's default built-in ObjectId path.\r\n *\r\n * @api public\r\n * @property auto\r\n * @memberOf SchemaObjectIdOptions\r\n * @type {Boolean}\r\n * @instance\r\n */\r\n\r\nObject.defineProperty(SchemaObjectIdOptions.prototype, 'auto', opts);\r\n\r\n/**\r\n * Sets default [populate options](/docs/populate.html#query-conditions).\r\n *\r\n * #### Example:\r\n *\r\n *     const schema = new Schema({\r\n *       child: {\r\n *         type: 'ObjectId',\r\n *         ref: 'Child',\r\n *         populate: { select: 'name' }\r\n *       }\r\n *     });\r\n *     const Parent = mongoose.model('Parent', schema);\r\n *\r\n *     // Automatically adds `.select('name')`\r\n *     Parent.findOne().populate('child');\r\n *\r\n * @api public\r\n * @property populate\r\n * @memberOf SchemaObjectIdOptions\r\n * @type {Object}\r\n * @instance\r\n */\r\n\r\nObject.defineProperty(SchemaObjectIdOptions.prototype, 'populate', opts);\r\n\r\n/*!\r\n * ignore\r\n */\r\n\r\nmodule.exports = SchemaObjectIdOptions;\r\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,iBAAiB,GAAGC,OAAO,CAAC,qBAAqB,CAAC;;AAExD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,qBAAqB,SAASF,iBAAiB,CAAC;AAEtD,MAAMG,IAAI,GAAGF,OAAO,CAAC,mBAAmB,CAAC;;AAEzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAG,MAAM,CAACC,cAAc,CAACH,qBAAqB,CAACI,SAAS,EAAE,MAAM,EAAEH,IAAI,CAAC;;AAEpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAC,MAAM,CAACC,cAAc,CAACH,qBAAqB,CAACI,SAAS,EAAE,UAAU,EAAEH,IAAI,CAAC;;AAExE;AACA;AACA;;AAEAI,MAAM,CAACC,OAAO,GAAGN,qBAAqB"},"metadata":{},"sourceType":"script","externalDependencies":[]}