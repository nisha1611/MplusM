{"ast":null,"code":"'use strict';\n\nconst SchemaTypeOptions = require('./SchemaTypeOptions');\n\n/**\r\n * The options defined on an Array schematype.\r\n *\r\n * #### Example:\r\n *\r\n *     const schema = new Schema({ tags: [String] });\r\n *     schema.path('tags').options; // SchemaArrayOptions instance\r\n *\r\n * @api public\r\n * @inherits SchemaTypeOptions\r\n * @constructor SchemaArrayOptions\r\n */\n\nclass SchemaArrayOptions extends SchemaTypeOptions {}\nconst opts = require('./propertyOptions');\n\n/**\r\n * If this is an array of strings, an array of allowed values for this path.\r\n * Throws an error if this array isn't an array of strings.\r\n *\r\n * @api public\r\n * @property enum\r\n * @memberOf SchemaArrayOptions\r\n * @type {Array}\r\n * @instance\r\n */\n\nObject.defineProperty(SchemaArrayOptions.prototype, 'enum', opts);\n\n/**\r\n * If set, specifies the type of this array's values. Equivalent to setting\r\n * `type` to an array whose first element is `of`.\r\n *\r\n * #### Example:\r\n *\r\n *     // `arr` is an array of numbers.\r\n *     new Schema({ arr: [Number] });\r\n *     // Equivalent way to define `arr` as an array of numbers\r\n *     new Schema({ arr: { type: Array, of: Number } });\r\n *\r\n * @api public\r\n * @property of\r\n * @memberOf SchemaArrayOptions\r\n * @type {Function|String}\r\n * @instance\r\n */\n\nObject.defineProperty(SchemaArrayOptions.prototype, 'of', opts);\n\n/**\r\n * If set to `false`, will always deactivate casting non-array values to arrays.\r\n * If set to `true`, will cast non-array values to arrays if `init` and `SchemaArray.options.castNonArrays` are also `true`\r\n *\r\n * #### Example:\r\n *\r\n *     const Model = db.model('Test', new Schema({ x1: { castNonArrays: false, type: [String] } }));\r\n *     const doc = new Model({ x1: \"some non-array value\" });\r\n *     await doc.validate(); // Errors with \"CastError\"\r\n *\r\n * @api public\r\n * @property castNonArrays\r\n * @memberOf SchemaArrayOptions\r\n * @type {Boolean}\r\n * @instance\r\n */\n\nObject.defineProperty(SchemaArrayOptions.prototype, 'castNonArrays', opts);\n\n/*!\r\n * ignore\r\n */\n\nmodule.exports = SchemaArrayOptions;","map":{"version":3,"names":["SchemaTypeOptions","require","SchemaArrayOptions","opts","Object","defineProperty","prototype","module","exports"],"sources":["C:/Users/91930/Desktop/Github projects/Pharmacy Demo/back-end/node_modules/mongoose/lib/options/SchemaArrayOptions.js"],"sourcesContent":["'use strict';\r\n\r\nconst SchemaTypeOptions = require('./SchemaTypeOptions');\r\n\r\n/**\r\n * The options defined on an Array schematype.\r\n *\r\n * #### Example:\r\n *\r\n *     const schema = new Schema({ tags: [String] });\r\n *     schema.path('tags').options; // SchemaArrayOptions instance\r\n *\r\n * @api public\r\n * @inherits SchemaTypeOptions\r\n * @constructor SchemaArrayOptions\r\n */\r\n\r\nclass SchemaArrayOptions extends SchemaTypeOptions {}\r\n\r\nconst opts = require('./propertyOptions');\r\n\r\n/**\r\n * If this is an array of strings, an array of allowed values for this path.\r\n * Throws an error if this array isn't an array of strings.\r\n *\r\n * @api public\r\n * @property enum\r\n * @memberOf SchemaArrayOptions\r\n * @type {Array}\r\n * @instance\r\n */\r\n\r\nObject.defineProperty(SchemaArrayOptions.prototype, 'enum', opts);\r\n\r\n/**\r\n * If set, specifies the type of this array's values. Equivalent to setting\r\n * `type` to an array whose first element is `of`.\r\n *\r\n * #### Example:\r\n *\r\n *     // `arr` is an array of numbers.\r\n *     new Schema({ arr: [Number] });\r\n *     // Equivalent way to define `arr` as an array of numbers\r\n *     new Schema({ arr: { type: Array, of: Number } });\r\n *\r\n * @api public\r\n * @property of\r\n * @memberOf SchemaArrayOptions\r\n * @type {Function|String}\r\n * @instance\r\n */\r\n\r\nObject.defineProperty(SchemaArrayOptions.prototype, 'of', opts);\r\n\r\n/**\r\n * If set to `false`, will always deactivate casting non-array values to arrays.\r\n * If set to `true`, will cast non-array values to arrays if `init` and `SchemaArray.options.castNonArrays` are also `true`\r\n *\r\n * #### Example:\r\n *\r\n *     const Model = db.model('Test', new Schema({ x1: { castNonArrays: false, type: [String] } }));\r\n *     const doc = new Model({ x1: \"some non-array value\" });\r\n *     await doc.validate(); // Errors with \"CastError\"\r\n *\r\n * @api public\r\n * @property castNonArrays\r\n * @memberOf SchemaArrayOptions\r\n * @type {Boolean}\r\n * @instance\r\n */\r\n\r\nObject.defineProperty(SchemaArrayOptions.prototype, 'castNonArrays', opts);\r\n\r\n/*!\r\n * ignore\r\n */\r\n\r\nmodule.exports = SchemaArrayOptions;\r\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,iBAAiB,GAAGC,OAAO,CAAC,qBAAqB,CAAC;;AAExD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,kBAAkB,SAASF,iBAAiB,CAAC;AAEnD,MAAMG,IAAI,GAAGF,OAAO,CAAC,mBAAmB,CAAC;;AAEzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAG,MAAM,CAACC,cAAc,CAACH,kBAAkB,CAACI,SAAS,EAAE,MAAM,EAAEH,IAAI,CAAC;;AAEjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAC,MAAM,CAACC,cAAc,CAACH,kBAAkB,CAACI,SAAS,EAAE,IAAI,EAAEH,IAAI,CAAC;;AAE/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAC,MAAM,CAACC,cAAc,CAACH,kBAAkB,CAACI,SAAS,EAAE,eAAe,EAAEH,IAAI,CAAC;;AAE1E;AACA;AACA;;AAEAI,MAAM,CAACC,OAAO,GAAGN,kBAAkB"},"metadata":{},"sourceType":"script","externalDependencies":[]}