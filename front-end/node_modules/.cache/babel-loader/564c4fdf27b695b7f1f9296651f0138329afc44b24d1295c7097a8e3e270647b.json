{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ReadConcern = exports.ReadConcernLevel = void 0;\n/** @public */\nexports.ReadConcernLevel = Object.freeze({\n  local: 'local',\n  majority: 'majority',\n  linearizable: 'linearizable',\n  available: 'available',\n  snapshot: 'snapshot'\n});\n/**\r\n * The MongoDB ReadConcern, which allows for control of the consistency and isolation properties\r\n * of the data read from replica sets and replica set shards.\r\n * @public\r\n *\r\n * @see https://docs.mongodb.com/manual/reference/read-concern/index.html\r\n */\nclass ReadConcern {\n  /** Constructs a ReadConcern from the read concern level.*/\n  constructor(level) {\n    var _a;\n    /**\r\n     * A spec test exists that allows level to be any string.\r\n     * \"invalid readConcern with out stage\"\r\n     * @see ./test/spec/crud/v2/aggregate-out-readConcern.json\r\n     * @see https://github.com/mongodb/specifications/blob/master/source/read-write-concern/read-write-concern.rst#unknown-levels-and-additional-options-for-string-based-readconcerns\r\n     */\n    this.level = (_a = exports.ReadConcernLevel[level]) !== null && _a !== void 0 ? _a : level;\n  }\n  /**\r\n   * Construct a ReadConcern given an options object.\r\n   *\r\n   * @param options - The options object from which to extract the write concern.\r\n   */\n  static fromOptions(options) {\n    if (options == null) {\n      return;\n    }\n    if (options.readConcern) {\n      const {\n        readConcern\n      } = options;\n      if (readConcern instanceof ReadConcern) {\n        return readConcern;\n      } else if (typeof readConcern === 'string') {\n        return new ReadConcern(readConcern);\n      } else if ('level' in readConcern && readConcern.level) {\n        return new ReadConcern(readConcern.level);\n      }\n    }\n    if (options.level) {\n      return new ReadConcern(options.level);\n    }\n    return;\n  }\n  static get MAJORITY() {\n    return exports.ReadConcernLevel.majority;\n  }\n  static get AVAILABLE() {\n    return exports.ReadConcernLevel.available;\n  }\n  static get LINEARIZABLE() {\n    return exports.ReadConcernLevel.linearizable;\n  }\n  static get SNAPSHOT() {\n    return exports.ReadConcernLevel.snapshot;\n  }\n  toJSON() {\n    return {\n      level: this.level\n    };\n  }\n}\nexports.ReadConcern = ReadConcern;","map":{"version":3,"mappings":";;;;;;AAEA;AACaA,wBAAgB,GAAGC,MAAM,CAACC,MAAM,CAAC;EAC5CC,KAAK,EAAE,OAAO;EACdC,QAAQ,EAAE,UAAU;EACpBC,YAAY,EAAE,cAAc;EAC5BC,SAAS,EAAE,WAAW;EACtBC,QAAQ,EAAE;CACF,CAAC;AAQX;;;;;;;AAOA,MAAaC,WAAW;EAGtB;EACAC,YAAYC,KAAuB;;IACjC;;;;;;IAMA,IAAI,CAACA,KAAK,GAAG,8BAAgB,CAACA,KAAK,CAAC,mCAAIA,KAAK;EAC/C;EAEA;;;;;EAKA,OAAOC,WAAW,CAACC,OAGlB;IACC,IAAIA,OAAO,IAAI,IAAI,EAAE;MACnB;;IAGF,IAAIA,OAAO,CAACC,WAAW,EAAE;MACvB,MAAM;QAAEA;MAAW,CAAE,GAAGD,OAAO;MAC/B,IAAIC,WAAW,YAAYL,WAAW,EAAE;QACtC,OAAOK,WAAW;OACnB,MAAM,IAAI,OAAOA,WAAW,KAAK,QAAQ,EAAE;QAC1C,OAAO,IAAIL,WAAW,CAACK,WAAW,CAAC;OACpC,MAAM,IAAI,OAAO,IAAIA,WAAW,IAAIA,WAAW,CAACH,KAAK,EAAE;QACtD,OAAO,IAAIF,WAAW,CAACK,WAAW,CAACH,KAAK,CAAC;;;IAI7C,IAAIE,OAAO,CAACF,KAAK,EAAE;MACjB,OAAO,IAAIF,WAAW,CAACI,OAAO,CAACF,KAAK,CAAC;;IAEvC;EACF;EAEA,WAAWI,QAAQ;IACjB,OAAOd,wBAAgB,CAACI,QAAQ;EAClC;EAEA,WAAWW,SAAS;IAClB,OAAOf,wBAAgB,CAACM,SAAS;EACnC;EAEA,WAAWU,YAAY;IACrB,OAAOhB,wBAAgB,CAACK,YAAY;EACtC;EAEA,WAAWY,QAAQ;IACjB,OAAOjB,wBAAgB,CAACO,QAAQ;EAClC;EAEAW,MAAM;IACJ,OAAO;MAAER,KAAK,EAAE,IAAI,CAACA;IAAK,CAAE;EAC9B;;AA9DFV","names":["exports","Object","freeze","local","majority","linearizable","available","snapshot","ReadConcern","constructor","level","fromOptions","options","readConcern","MAJORITY","AVAILABLE","LINEARIZABLE","SNAPSHOT","toJSON"],"sources":["C:\\Users\\91930\\Desktop\\Github projects\\Pharmacy Demo\\back-end\\node_modules\\mongoose\\node_modules\\mongodb\\src\\read_concern.ts"],"sourcesContent":["import type { Document } from './bson';\r\n\r\n/** @public */\r\nexport const ReadConcernLevel = Object.freeze({\r\n  local: 'local',\r\n  majority: 'majority',\r\n  linearizable: 'linearizable',\r\n  available: 'available',\r\n  snapshot: 'snapshot'\r\n} as const);\r\n\r\n/** @public */\r\nexport type ReadConcernLevel = typeof ReadConcernLevel[keyof typeof ReadConcernLevel];\r\n\r\n/** @public */\r\nexport type ReadConcernLike = ReadConcern | { level: ReadConcernLevel } | ReadConcernLevel;\r\n\r\n/**\r\n * The MongoDB ReadConcern, which allows for control of the consistency and isolation properties\r\n * of the data read from replica sets and replica set shards.\r\n * @public\r\n *\r\n * @see https://docs.mongodb.com/manual/reference/read-concern/index.html\r\n */\r\nexport class ReadConcern {\r\n  level: ReadConcernLevel | string;\r\n\r\n  /** Constructs a ReadConcern from the read concern level.*/\r\n  constructor(level: ReadConcernLevel) {\r\n    /**\r\n     * A spec test exists that allows level to be any string.\r\n     * \"invalid readConcern with out stage\"\r\n     * @see ./test/spec/crud/v2/aggregate-out-readConcern.json\r\n     * @see https://github.com/mongodb/specifications/blob/master/source/read-write-concern/read-write-concern.rst#unknown-levels-and-additional-options-for-string-based-readconcerns\r\n     */\r\n    this.level = ReadConcernLevel[level] ?? level;\r\n  }\r\n\r\n  /**\r\n   * Construct a ReadConcern given an options object.\r\n   *\r\n   * @param options - The options object from which to extract the write concern.\r\n   */\r\n  static fromOptions(options?: {\r\n    readConcern?: ReadConcernLike;\r\n    level?: ReadConcernLevel;\r\n  }): ReadConcern | undefined {\r\n    if (options == null) {\r\n      return;\r\n    }\r\n\r\n    if (options.readConcern) {\r\n      const { readConcern } = options;\r\n      if (readConcern instanceof ReadConcern) {\r\n        return readConcern;\r\n      } else if (typeof readConcern === 'string') {\r\n        return new ReadConcern(readConcern);\r\n      } else if ('level' in readConcern && readConcern.level) {\r\n        return new ReadConcern(readConcern.level);\r\n      }\r\n    }\r\n\r\n    if (options.level) {\r\n      return new ReadConcern(options.level);\r\n    }\r\n    return;\r\n  }\r\n\r\n  static get MAJORITY(): 'majority' {\r\n    return ReadConcernLevel.majority;\r\n  }\r\n\r\n  static get AVAILABLE(): 'available' {\r\n    return ReadConcernLevel.available;\r\n  }\r\n\r\n  static get LINEARIZABLE(): 'linearizable' {\r\n    return ReadConcernLevel.linearizable;\r\n  }\r\n\r\n  static get SNAPSHOT(): 'snapshot' {\r\n    return ReadConcernLevel.snapshot;\r\n  }\r\n\r\n  toJSON(): Document {\r\n    return { level: this.level };\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}