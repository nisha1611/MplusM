{"ast":null,"code":"import { CredentialsProviderError } from \"@aws-sdk/property-provider\";\nimport { getProfileName } from \"@aws-sdk/shared-ini-file-loader\";\nimport { resolveCredentialSource } from \"./resolveCredentialSource\";\nimport { resolveProfileData } from \"./resolveProfileData\";\nexport const isAssumeRoleProfile = arg => Boolean(arg) && typeof arg === \"object\" && typeof arg.role_arn === \"string\" && [\"undefined\", \"string\"].indexOf(typeof arg.role_session_name) > -1 && [\"undefined\", \"string\"].indexOf(typeof arg.external_id) > -1 && [\"undefined\", \"string\"].indexOf(typeof arg.mfa_serial) > -1 && (isAssumeRoleWithSourceProfile(arg) || isAssumeRoleWithProviderProfile(arg));\nconst isAssumeRoleWithSourceProfile = arg => typeof arg.source_profile === \"string\" && typeof arg.credential_source === \"undefined\";\nconst isAssumeRoleWithProviderProfile = arg => typeof arg.credential_source === \"string\" && typeof arg.source_profile === \"undefined\";\nexport const resolveAssumeRoleCredentials = async function (profileName, profiles, options) {\n  let visitedProfiles = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  const data = profiles[profileName];\n  if (!options.roleAssumer) {\n    throw new CredentialsProviderError(`Profile ${profileName} requires a role to be assumed, but no role assumption callback was provided.`, false);\n  }\n  const {\n    source_profile\n  } = data;\n  if (source_profile && source_profile in visitedProfiles) {\n    throw new CredentialsProviderError(`Detected a cycle attempting to resolve credentials for profile` + ` ${getProfileName(options)}. Profiles visited: ` + Object.keys(visitedProfiles).join(\", \"), false);\n  }\n  const sourceCredsProvider = source_profile ? resolveProfileData(source_profile, profiles, options, {\n    ...visitedProfiles,\n    [source_profile]: true\n  }) : resolveCredentialSource(data.credential_source, profileName)();\n  const params = {\n    RoleArn: data.role_arn,\n    RoleSessionName: data.role_session_name || `aws-sdk-js-${Date.now()}`,\n    ExternalId: data.external_id\n  };\n  const {\n    mfa_serial\n  } = data;\n  if (mfa_serial) {\n    if (!options.mfaCodeProvider) {\n      throw new CredentialsProviderError(`Profile ${profileName} requires multi-factor authentication, but no MFA code callback was provided.`, false);\n    }\n    params.SerialNumber = mfa_serial;\n    params.TokenCode = await options.mfaCodeProvider(mfa_serial);\n  }\n  const sourceCreds = await sourceCredsProvider;\n  return options.roleAssumer(sourceCreds, params);\n};","map":{"version":3,"names":["CredentialsProviderError","getProfileName","resolveCredentialSource","resolveProfileData","isAssumeRoleProfile","arg","Boolean","role_arn","indexOf","role_session_name","external_id","mfa_serial","isAssumeRoleWithSourceProfile","isAssumeRoleWithProviderProfile","source_profile","credential_source","resolveAssumeRoleCredentials","profileName","profiles","options","visitedProfiles","data","roleAssumer","Object","keys","join","sourceCredsProvider","params","RoleArn","RoleSessionName","Date","now","ExternalId","mfaCodeProvider","SerialNumber","TokenCode","sourceCreds"],"sources":["C:/Users/91930/Desktop/Github projects/Pharmacy Demo/back-end/node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveAssumeRoleCredentials.js"],"sourcesContent":["import { CredentialsProviderError } from \"@aws-sdk/property-provider\";\r\nimport { getProfileName } from \"@aws-sdk/shared-ini-file-loader\";\r\nimport { resolveCredentialSource } from \"./resolveCredentialSource\";\r\nimport { resolveProfileData } from \"./resolveProfileData\";\r\nexport const isAssumeRoleProfile = (arg) => Boolean(arg) &&\r\n    typeof arg === \"object\" &&\r\n    typeof arg.role_arn === \"string\" &&\r\n    [\"undefined\", \"string\"].indexOf(typeof arg.role_session_name) > -1 &&\r\n    [\"undefined\", \"string\"].indexOf(typeof arg.external_id) > -1 &&\r\n    [\"undefined\", \"string\"].indexOf(typeof arg.mfa_serial) > -1 &&\r\n    (isAssumeRoleWithSourceProfile(arg) || isAssumeRoleWithProviderProfile(arg));\r\nconst isAssumeRoleWithSourceProfile = (arg) => typeof arg.source_profile === \"string\" && typeof arg.credential_source === \"undefined\";\r\nconst isAssumeRoleWithProviderProfile = (arg) => typeof arg.credential_source === \"string\" && typeof arg.source_profile === \"undefined\";\r\nexport const resolveAssumeRoleCredentials = async (profileName, profiles, options, visitedProfiles = {}) => {\r\n    const data = profiles[profileName];\r\n    if (!options.roleAssumer) {\r\n        throw new CredentialsProviderError(`Profile ${profileName} requires a role to be assumed, but no role assumption callback was provided.`, false);\r\n    }\r\n    const { source_profile } = data;\r\n    if (source_profile && source_profile in visitedProfiles) {\r\n        throw new CredentialsProviderError(`Detected a cycle attempting to resolve credentials for profile` +\r\n            ` ${getProfileName(options)}. Profiles visited: ` +\r\n            Object.keys(visitedProfiles).join(\", \"), false);\r\n    }\r\n    const sourceCredsProvider = source_profile\r\n        ? resolveProfileData(source_profile, profiles, options, {\r\n            ...visitedProfiles,\r\n            [source_profile]: true,\r\n        })\r\n        : resolveCredentialSource(data.credential_source, profileName)();\r\n    const params = {\r\n        RoleArn: data.role_arn,\r\n        RoleSessionName: data.role_session_name || `aws-sdk-js-${Date.now()}`,\r\n        ExternalId: data.external_id,\r\n    };\r\n    const { mfa_serial } = data;\r\n    if (mfa_serial) {\r\n        if (!options.mfaCodeProvider) {\r\n            throw new CredentialsProviderError(`Profile ${profileName} requires multi-factor authentication, but no MFA code callback was provided.`, false);\r\n        }\r\n        params.SerialNumber = mfa_serial;\r\n        params.TokenCode = await options.mfaCodeProvider(mfa_serial);\r\n    }\r\n    const sourceCreds = await sourceCredsProvider;\r\n    return options.roleAssumer(sourceCreds, params);\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}