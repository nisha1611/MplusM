{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getRegionInfo = void 0;\nconst getHostnameFromVariants_1 = require(\"./getHostnameFromVariants\");\nconst getResolvedHostname_1 = require(\"./getResolvedHostname\");\nconst getResolvedPartition_1 = require(\"./getResolvedPartition\");\nconst getResolvedSigningRegion_1 = require(\"./getResolvedSigningRegion\");\nconst getRegionInfo = (region, _ref) => {\n  let {\n    useFipsEndpoint = false,\n    useDualstackEndpoint = false,\n    signingService,\n    regionHash,\n    partitionHash\n  } = _ref;\n  var _a, _b, _c, _d, _e, _f;\n  const partition = (0, getResolvedPartition_1.getResolvedPartition)(region, {\n    partitionHash\n  });\n  const resolvedRegion = region in regionHash ? region : (_b = (_a = partitionHash[partition]) === null || _a === void 0 ? void 0 : _a.endpoint) !== null && _b !== void 0 ? _b : region;\n  const hostnameOptions = {\n    useFipsEndpoint,\n    useDualstackEndpoint\n  };\n  const regionHostname = (0, getHostnameFromVariants_1.getHostnameFromVariants)((_c = regionHash[resolvedRegion]) === null || _c === void 0 ? void 0 : _c.variants, hostnameOptions);\n  const partitionHostname = (0, getHostnameFromVariants_1.getHostnameFromVariants)((_d = partitionHash[partition]) === null || _d === void 0 ? void 0 : _d.variants, hostnameOptions);\n  const hostname = (0, getResolvedHostname_1.getResolvedHostname)(resolvedRegion, {\n    regionHostname,\n    partitionHostname\n  });\n  if (hostname === undefined) {\n    throw new Error(`Endpoint resolution failed for: ${{\n      resolvedRegion,\n      useFipsEndpoint,\n      useDualstackEndpoint\n    }}`);\n  }\n  const signingRegion = (0, getResolvedSigningRegion_1.getResolvedSigningRegion)(hostname, {\n    signingRegion: (_e = regionHash[resolvedRegion]) === null || _e === void 0 ? void 0 : _e.signingRegion,\n    regionRegex: partitionHash[partition].regionRegex,\n    useFipsEndpoint\n  });\n  return {\n    partition,\n    signingService,\n    hostname,\n    ...(signingRegion && {\n      signingRegion\n    }),\n    ...(((_f = regionHash[resolvedRegion]) === null || _f === void 0 ? void 0 : _f.signingService) && {\n      signingService: regionHash[resolvedRegion].signingService\n    })\n  };\n};\nexports.getRegionInfo = getRegionInfo;","map":{"version":3,"names":["Object","defineProperty","exports","value","getRegionInfo","getHostnameFromVariants_1","require","getResolvedHostname_1","getResolvedPartition_1","getResolvedSigningRegion_1","region","useFipsEndpoint","useDualstackEndpoint","signingService","regionHash","partitionHash","_a","_b","_c","_d","_e","_f","partition","getResolvedPartition","resolvedRegion","endpoint","hostnameOptions","regionHostname","getHostnameFromVariants","variants","partitionHostname","hostname","getResolvedHostname","undefined","Error","signingRegion","getResolvedSigningRegion","regionRegex"],"sources":["C:/Users/91930/Desktop/Github projects/Pharmacy Demo/back-end/node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/getRegionInfo.js"],"sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.getRegionInfo = void 0;\r\nconst getHostnameFromVariants_1 = require(\"./getHostnameFromVariants\");\r\nconst getResolvedHostname_1 = require(\"./getResolvedHostname\");\r\nconst getResolvedPartition_1 = require(\"./getResolvedPartition\");\r\nconst getResolvedSigningRegion_1 = require(\"./getResolvedSigningRegion\");\r\nconst getRegionInfo = (region, { useFipsEndpoint = false, useDualstackEndpoint = false, signingService, regionHash, partitionHash, }) => {\r\n    var _a, _b, _c, _d, _e, _f;\r\n    const partition = (0, getResolvedPartition_1.getResolvedPartition)(region, { partitionHash });\r\n    const resolvedRegion = region in regionHash ? region : (_b = (_a = partitionHash[partition]) === null || _a === void 0 ? void 0 : _a.endpoint) !== null && _b !== void 0 ? _b : region;\r\n    const hostnameOptions = { useFipsEndpoint, useDualstackEndpoint };\r\n    const regionHostname = (0, getHostnameFromVariants_1.getHostnameFromVariants)((_c = regionHash[resolvedRegion]) === null || _c === void 0 ? void 0 : _c.variants, hostnameOptions);\r\n    const partitionHostname = (0, getHostnameFromVariants_1.getHostnameFromVariants)((_d = partitionHash[partition]) === null || _d === void 0 ? void 0 : _d.variants, hostnameOptions);\r\n    const hostname = (0, getResolvedHostname_1.getResolvedHostname)(resolvedRegion, { regionHostname, partitionHostname });\r\n    if (hostname === undefined) {\r\n        throw new Error(`Endpoint resolution failed for: ${{ resolvedRegion, useFipsEndpoint, useDualstackEndpoint }}`);\r\n    }\r\n    const signingRegion = (0, getResolvedSigningRegion_1.getResolvedSigningRegion)(hostname, {\r\n        signingRegion: (_e = regionHash[resolvedRegion]) === null || _e === void 0 ? void 0 : _e.signingRegion,\r\n        regionRegex: partitionHash[partition].regionRegex,\r\n        useFipsEndpoint,\r\n    });\r\n    return {\r\n        partition,\r\n        signingService,\r\n        hostname,\r\n        ...(signingRegion && { signingRegion }),\r\n        ...(((_f = regionHash[resolvedRegion]) === null || _f === void 0 ? void 0 : _f.signingService) && {\r\n            signingService: regionHash[resolvedRegion].signingService,\r\n        }),\r\n    };\r\n};\r\nexports.getRegionInfo = getRegionInfo;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}