{"ast":null,"code":"/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Sergey Melyukov @smelukov\r\n*/\n\n\"use strict\";\n\nconst {\n  ReplaceSource\n} = require(\"webpack-sources\");\nconst Generator = require(\"../Generator\");\nconst InitFragment = require(\"../InitFragment\");\nconst RuntimeGlobals = require(\"../RuntimeGlobals\");\n\n/** @typedef {import(\"webpack-sources\").Source} Source */\n/** @typedef {import(\"../Dependency\")} Dependency */\n/** @typedef {import(\"../Generator\").GenerateContext} GenerateContext */\n/** @typedef {import(\"../Generator\").UpdateHashContext} UpdateHashContext */\n/** @typedef {import(\"../NormalModule\")} NormalModule */\n/** @typedef {import(\"../util/Hash\")} Hash */\n\nconst TYPES = new Set([\"css\"]);\nclass CssGenerator extends Generator {\n  constructor() {\n    super();\n  }\n\n  /**\r\n   * @param {NormalModule} module module for which the code should be generated\r\n   * @param {GenerateContext} generateContext context for generate\r\n   * @returns {Source} generated code\r\n   */\n  generate(module, generateContext) {\n    const originalSource = module.originalSource();\n    const source = new ReplaceSource(originalSource);\n    const initFragments = [];\n    const cssExports = new Map();\n    generateContext.runtimeRequirements.add(RuntimeGlobals.hasCssModules);\n    const templateContext = {\n      runtimeTemplate: generateContext.runtimeTemplate,\n      dependencyTemplates: generateContext.dependencyTemplates,\n      moduleGraph: generateContext.moduleGraph,\n      chunkGraph: generateContext.chunkGraph,\n      module,\n      runtime: generateContext.runtime,\n      runtimeRequirements: generateContext.runtimeRequirements,\n      concatenationScope: generateContext.concatenationScope,\n      codeGenerationResults: generateContext.codeGenerationResults,\n      initFragments,\n      cssExports\n    };\n    const handleDependency = dependency => {\n      const constructor = /** @type {new (...args: any[]) => Dependency} */\n      dependency.constructor;\n      const template = generateContext.dependencyTemplates.get(constructor);\n      if (!template) {\n        throw new Error(\"No template for dependency: \" + dependency.constructor.name);\n      }\n      template.apply(dependency, source, templateContext);\n    };\n    module.dependencies.forEach(handleDependency);\n    if (module.presentationalDependencies !== undefined) module.presentationalDependencies.forEach(handleDependency);\n    if (cssExports.size > 0) {\n      const data = generateContext.getData();\n      data.set(\"css-exports\", cssExports);\n    }\n    return InitFragment.addToSource(source, initFragments, generateContext);\n  }\n\n  /**\r\n   * @param {NormalModule} module fresh module\r\n   * @returns {Set<string>} available types (do not mutate)\r\n   */\n  getTypes(module) {\n    return TYPES;\n  }\n\n  /**\r\n   * @param {NormalModule} module the module\r\n   * @param {string=} type source type\r\n   * @returns {number} estimate size of the module\r\n   */\n  getSize(module, type) {\n    const originalSource = module.originalSource();\n    if (!originalSource) {\n      return 0;\n    }\n    return originalSource.size();\n  }\n\n  /**\r\n   * @param {Hash} hash hash that will be modified\r\n   * @param {UpdateHashContext} updateHashContext context for updating hash\r\n   */\n  updateHash(hash, _ref) {\n    let {\n      module\n    } = _ref;\n  }\n}\nmodule.exports = CssGenerator;","map":{"version":3,"names":["ReplaceSource","require","Generator","InitFragment","RuntimeGlobals","TYPES","Set","CssGenerator","constructor","generate","module","generateContext","originalSource","source","initFragments","cssExports","Map","runtimeRequirements","add","hasCssModules","templateContext","runtimeTemplate","dependencyTemplates","moduleGraph","chunkGraph","runtime","concatenationScope","codeGenerationResults","handleDependency","dependency","template","get","Error","name","apply","dependencies","forEach","presentationalDependencies","undefined","size","data","getData","set","addToSource","getTypes","getSize","type","updateHash","hash","exports"],"sources":["C:/Users/91930/Desktop/Github projects/Pharmacy Demo/front-end/node_modules/webpack/lib/css/CssGenerator.js"],"sourcesContent":["/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Sergey Melyukov @smelukov\r\n*/\r\n\r\n\"use strict\";\r\n\r\nconst { ReplaceSource } = require(\"webpack-sources\");\r\nconst Generator = require(\"../Generator\");\r\nconst InitFragment = require(\"../InitFragment\");\r\nconst RuntimeGlobals = require(\"../RuntimeGlobals\");\r\n\r\n/** @typedef {import(\"webpack-sources\").Source} Source */\r\n/** @typedef {import(\"../Dependency\")} Dependency */\r\n/** @typedef {import(\"../Generator\").GenerateContext} GenerateContext */\r\n/** @typedef {import(\"../Generator\").UpdateHashContext} UpdateHashContext */\r\n/** @typedef {import(\"../NormalModule\")} NormalModule */\r\n/** @typedef {import(\"../util/Hash\")} Hash */\r\n\r\nconst TYPES = new Set([\"css\"]);\r\n\r\nclass CssGenerator extends Generator {\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t}\r\n\r\n\t/**\r\n\t * @param {NormalModule} module module for which the code should be generated\r\n\t * @param {GenerateContext} generateContext context for generate\r\n\t * @returns {Source} generated code\r\n\t */\r\n\tgenerate(module, generateContext) {\r\n\t\tconst originalSource = module.originalSource();\r\n\t\tconst source = new ReplaceSource(originalSource);\r\n\t\tconst initFragments = [];\r\n\t\tconst cssExports = new Map();\r\n\r\n\t\tgenerateContext.runtimeRequirements.add(RuntimeGlobals.hasCssModules);\r\n\r\n\t\tconst templateContext = {\r\n\t\t\truntimeTemplate: generateContext.runtimeTemplate,\r\n\t\t\tdependencyTemplates: generateContext.dependencyTemplates,\r\n\t\t\tmoduleGraph: generateContext.moduleGraph,\r\n\t\t\tchunkGraph: generateContext.chunkGraph,\r\n\t\t\tmodule,\r\n\t\t\truntime: generateContext.runtime,\r\n\t\t\truntimeRequirements: generateContext.runtimeRequirements,\r\n\t\t\tconcatenationScope: generateContext.concatenationScope,\r\n\t\t\tcodeGenerationResults: generateContext.codeGenerationResults,\r\n\t\t\tinitFragments,\r\n\t\t\tcssExports\r\n\t\t};\r\n\r\n\t\tconst handleDependency = dependency => {\r\n\t\t\tconst constructor = /** @type {new (...args: any[]) => Dependency} */ (\r\n\t\t\t\tdependency.constructor\r\n\t\t\t);\r\n\t\t\tconst template = generateContext.dependencyTemplates.get(constructor);\r\n\t\t\tif (!template) {\r\n\t\t\t\tthrow new Error(\r\n\t\t\t\t\t\"No template for dependency: \" + dependency.constructor.name\r\n\t\t\t\t);\r\n\t\t\t}\r\n\r\n\t\t\ttemplate.apply(dependency, source, templateContext);\r\n\t\t};\r\n\t\tmodule.dependencies.forEach(handleDependency);\r\n\t\tif (module.presentationalDependencies !== undefined)\r\n\t\t\tmodule.presentationalDependencies.forEach(handleDependency);\r\n\r\n\t\tif (cssExports.size > 0) {\r\n\t\t\tconst data = generateContext.getData();\r\n\t\t\tdata.set(\"css-exports\", cssExports);\r\n\t\t}\r\n\r\n\t\treturn InitFragment.addToSource(source, initFragments, generateContext);\r\n\t}\r\n\r\n\t/**\r\n\t * @param {NormalModule} module fresh module\r\n\t * @returns {Set<string>} available types (do not mutate)\r\n\t */\r\n\tgetTypes(module) {\r\n\t\treturn TYPES;\r\n\t}\r\n\r\n\t/**\r\n\t * @param {NormalModule} module the module\r\n\t * @param {string=} type source type\r\n\t * @returns {number} estimate size of the module\r\n\t */\r\n\tgetSize(module, type) {\r\n\t\tconst originalSource = module.originalSource();\r\n\r\n\t\tif (!originalSource) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\r\n\t\treturn originalSource.size();\r\n\t}\r\n\r\n\t/**\r\n\t * @param {Hash} hash hash that will be modified\r\n\t * @param {UpdateHashContext} updateHashContext context for updating hash\r\n\t */\r\n\tupdateHash(hash, { module }) {}\r\n}\r\n\r\nmodule.exports = CssGenerator;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}