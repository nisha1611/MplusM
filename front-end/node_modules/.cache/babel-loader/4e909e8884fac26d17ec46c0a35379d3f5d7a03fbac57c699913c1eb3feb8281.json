{"ast":null,"code":"/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Tobias Koppers @sokra\r\n*/\n\n\"use strict\";\n\nconst {\n  compareModulesByIdentifier\n} = require(\"../util/comparators\");\nconst {\n  getShortModuleName,\n  getLongModuleName,\n  assignNames,\n  getUsedModuleIdsAndModules,\n  assignAscendingModuleIds\n} = require(\"./IdHelpers\");\n\n/** @typedef {import(\"../Compiler\")} Compiler */\n/** @typedef {import(\"../Module\")} Module */\n\nclass NamedModuleIdsPlugin {\n  constructor(options) {\n    this.options = options || {};\n  }\n\n  /**\r\n   * Apply the plugin\r\n   * @param {Compiler} compiler the compiler instance\r\n   * @returns {void}\r\n   */\n  apply(compiler) {\n    const {\n      root\n    } = compiler;\n    compiler.hooks.compilation.tap(\"NamedModuleIdsPlugin\", compilation => {\n      const {\n        hashFunction\n      } = compilation.outputOptions;\n      compilation.hooks.moduleIds.tap(\"NamedModuleIdsPlugin\", () => {\n        const chunkGraph = compilation.chunkGraph;\n        const context = this.options.context ? this.options.context : compiler.context;\n        const [usedIds, modules] = getUsedModuleIdsAndModules(compilation);\n        const unnamedModules = assignNames(modules, m => getShortModuleName(m, context, root), (m, shortName) => getLongModuleName(shortName, m, context, hashFunction, root), compareModulesByIdentifier, usedIds, (m, name) => chunkGraph.setModuleId(m, name));\n        if (unnamedModules.length > 0) {\n          assignAscendingModuleIds(usedIds, unnamedModules, compilation);\n        }\n      });\n    });\n  }\n}\nmodule.exports = NamedModuleIdsPlugin;","map":{"version":3,"names":["compareModulesByIdentifier","require","getShortModuleName","getLongModuleName","assignNames","getUsedModuleIdsAndModules","assignAscendingModuleIds","NamedModuleIdsPlugin","constructor","options","apply","compiler","root","hooks","compilation","tap","hashFunction","outputOptions","moduleIds","chunkGraph","context","usedIds","modules","unnamedModules","m","shortName","name","setModuleId","length","module","exports"],"sources":["C:/Users/91930/Desktop/Github projects/Pharmacy Demo/front-end/node_modules/webpack/lib/ids/NamedModuleIdsPlugin.js"],"sourcesContent":["/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Tobias Koppers @sokra\r\n*/\r\n\r\n\"use strict\";\r\n\r\nconst { compareModulesByIdentifier } = require(\"../util/comparators\");\r\nconst {\r\n\tgetShortModuleName,\r\n\tgetLongModuleName,\r\n\tassignNames,\r\n\tgetUsedModuleIdsAndModules,\r\n\tassignAscendingModuleIds\r\n} = require(\"./IdHelpers\");\r\n\r\n/** @typedef {import(\"../Compiler\")} Compiler */\r\n/** @typedef {import(\"../Module\")} Module */\r\n\r\nclass NamedModuleIdsPlugin {\r\n\tconstructor(options) {\r\n\t\tthis.options = options || {};\r\n\t}\r\n\r\n\t/**\r\n\t * Apply the plugin\r\n\t * @param {Compiler} compiler the compiler instance\r\n\t * @returns {void}\r\n\t */\r\n\tapply(compiler) {\r\n\t\tconst { root } = compiler;\r\n\t\tcompiler.hooks.compilation.tap(\"NamedModuleIdsPlugin\", compilation => {\r\n\t\t\tconst { hashFunction } = compilation.outputOptions;\r\n\t\t\tcompilation.hooks.moduleIds.tap(\"NamedModuleIdsPlugin\", () => {\r\n\t\t\t\tconst chunkGraph = compilation.chunkGraph;\r\n\t\t\t\tconst context = this.options.context\r\n\t\t\t\t\t? this.options.context\r\n\t\t\t\t\t: compiler.context;\r\n\r\n\t\t\t\tconst [usedIds, modules] = getUsedModuleIdsAndModules(compilation);\r\n\t\t\t\tconst unnamedModules = assignNames(\r\n\t\t\t\t\tmodules,\r\n\t\t\t\t\tm => getShortModuleName(m, context, root),\r\n\t\t\t\t\t(m, shortName) =>\r\n\t\t\t\t\t\tgetLongModuleName(shortName, m, context, hashFunction, root),\r\n\t\t\t\t\tcompareModulesByIdentifier,\r\n\t\t\t\t\tusedIds,\r\n\t\t\t\t\t(m, name) => chunkGraph.setModuleId(m, name)\r\n\t\t\t\t);\r\n\t\t\t\tif (unnamedModules.length > 0) {\r\n\t\t\t\t\tassignAscendingModuleIds(usedIds, unnamedModules, compilation);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n}\r\n\r\nmodule.exports = NamedModuleIdsPlugin;\r\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ,MAAM;EAAEA;AAA2B,CAAC,GAAGC,OAAO,CAAC,qBAAqB,CAAC;AACrE,MAAM;EACLC,kBAAkB;EAClBC,iBAAiB;EACjBC,WAAW;EACXC,0BAA0B;EAC1BC;AACD,CAAC,GAAGL,OAAO,CAAC,aAAa,CAAC;;AAE1B;AACA;;AAEA,MAAMM,oBAAoB,CAAC;EAC1BC,WAAW,CAACC,OAAO,EAAE;IACpB,IAAI,CAACA,OAAO,GAAGA,OAAO,IAAI,CAAC,CAAC;EAC7B;;EAEA;AACD;AACA;AACA;AACA;EACCC,KAAK,CAACC,QAAQ,EAAE;IACf,MAAM;MAAEC;IAAK,CAAC,GAAGD,QAAQ;IACzBA,QAAQ,CAACE,KAAK,CAACC,WAAW,CAACC,GAAG,CAAC,sBAAsB,EAAED,WAAW,IAAI;MACrE,MAAM;QAAEE;MAAa,CAAC,GAAGF,WAAW,CAACG,aAAa;MAClDH,WAAW,CAACD,KAAK,CAACK,SAAS,CAACH,GAAG,CAAC,sBAAsB,EAAE,MAAM;QAC7D,MAAMI,UAAU,GAAGL,WAAW,CAACK,UAAU;QACzC,MAAMC,OAAO,GAAG,IAAI,CAACX,OAAO,CAACW,OAAO,GACjC,IAAI,CAACX,OAAO,CAACW,OAAO,GACpBT,QAAQ,CAACS,OAAO;QAEnB,MAAM,CAACC,OAAO,EAAEC,OAAO,CAAC,GAAGjB,0BAA0B,CAACS,WAAW,CAAC;QAClE,MAAMS,cAAc,GAAGnB,WAAW,CACjCkB,OAAO,EACPE,CAAC,IAAItB,kBAAkB,CAACsB,CAAC,EAAEJ,OAAO,EAAER,IAAI,CAAC,EACzC,CAACY,CAAC,EAAEC,SAAS,KACZtB,iBAAiB,CAACsB,SAAS,EAAED,CAAC,EAAEJ,OAAO,EAAEJ,YAAY,EAAEJ,IAAI,CAAC,EAC7DZ,0BAA0B,EAC1BqB,OAAO,EACP,CAACG,CAAC,EAAEE,IAAI,KAAKP,UAAU,CAACQ,WAAW,CAACH,CAAC,EAAEE,IAAI,CAAC,CAC5C;QACD,IAAIH,cAAc,CAACK,MAAM,GAAG,CAAC,EAAE;UAC9BtB,wBAAwB,CAACe,OAAO,EAAEE,cAAc,EAAET,WAAW,CAAC;QAC/D;MACD,CAAC,CAAC;IACH,CAAC,CAAC;EACH;AACD;AAEAe,MAAM,CAACC,OAAO,GAAGvB,oBAAoB"},"metadata":{},"sourceType":"script","externalDependencies":[]}