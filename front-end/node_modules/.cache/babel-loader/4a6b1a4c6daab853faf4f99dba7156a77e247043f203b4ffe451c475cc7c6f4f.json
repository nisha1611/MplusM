{"ast":null,"code":"/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Tobias Koppers @sokra\r\n*/\n\n\"use strict\";\n\nconst {\n  parseResource\n} = require(\"../util/identifier\");\n\n/** @typedef {import(\"estree\").Node} EsTreeNode */\n/** @typedef {import(\"../../declarations/WebpackOptions\").JavascriptParserOptions} JavascriptParserOptions */\n/** @typedef {import(\"../../declarations/WebpackOptions\").ModuleOptionsNormalized} ModuleOptions */\n/** @typedef {import(\"../javascript/BasicEvaluatedExpression\")} BasicEvaluatedExpression */\n/** @typedef {import(\"../javascript/JavascriptParser\")} JavascriptParser */\n/** @typedef {import(\"./ContextDependency\")} ContextDependency */\n/** @typedef {import(\"./ContextDependency\").ContextDependencyOptions} ContextDependencyOptions */\n\n/**\r\n * Escapes regular expression metacharacters\r\n * @param {string} str String to quote\r\n * @returns {string} Escaped string\r\n */\nconst quoteMeta = str => {\n  return str.replace(/[-[\\]\\\\/{}()*+?.^$|]/g, \"\\\\$&\");\n};\nconst splitContextFromPrefix = prefix => {\n  const idx = prefix.lastIndexOf(\"/\");\n  let context = \".\";\n  if (idx >= 0) {\n    context = prefix.slice(0, idx);\n    prefix = `.${prefix.slice(idx)}`;\n  }\n  return {\n    context,\n    prefix\n  };\n};\n\n/** @typedef {Partial<Omit<ContextDependencyOptions, \"resource\">>} PartialContextDependencyOptions */\n\n/** @typedef {{ new(options: ContextDependencyOptions, range: [number, number], valueRange: [number, number], ...args: any[]): ContextDependency }} ContextDependencyConstructor */\n\n/**\r\n * @param {ContextDependencyConstructor} Dep the Dependency class\r\n * @param {[number, number]} range source range\r\n * @param {BasicEvaluatedExpression} param context param\r\n * @param {EsTreeNode} expr expr\r\n * @param {Pick<JavascriptParserOptions, `${\"expr\"|\"wrapped\"}Context${\"Critical\"|\"Recursive\"|\"RegExp\"}` | \"exprContextRequest\">} options options for context creation\r\n * @param {PartialContextDependencyOptions} contextOptions options for the ContextModule\r\n * @param {JavascriptParser} parser the parser\r\n * @param {...any} depArgs depArgs\r\n * @returns {ContextDependency} the created Dependency\r\n */\nexports.create = function (Dep, range, param, expr, options, contextOptions, parser) {\n  for (var _len = arguments.length, depArgs = new Array(_len > 7 ? _len - 7 : 0), _key = 7; _key < _len; _key++) {\n    depArgs[_key - 7] = arguments[_key];\n  }\n  if (param.isTemplateString()) {\n    let prefixRaw = param.quasis[0].string;\n    let postfixRaw = param.quasis.length > 1 ? param.quasis[param.quasis.length - 1].string : \"\";\n    const valueRange = param.range;\n    const {\n      context,\n      prefix\n    } = splitContextFromPrefix(prefixRaw);\n    const {\n      path: postfix,\n      query,\n      fragment\n    } = parseResource(postfixRaw, parser);\n\n    // When there are more than two quasis, the generated RegExp can be more precise\n    // We join the quasis with the expression regexp\n    const innerQuasis = param.quasis.slice(1, param.quasis.length - 1);\n    const innerRegExp = options.wrappedContextRegExp.source + innerQuasis.map(q => quoteMeta(q.string) + options.wrappedContextRegExp.source).join(\"\");\n\n    // Example: `./context/pre${e}inner${e}inner2${e}post?query#frag`\n    // context: \"./context\"\n    // prefix: \"./pre\"\n    // innerQuasis: [BEE(\"inner\"), BEE(\"inner2\")]\n    // (BEE = BasicEvaluatedExpression)\n    // postfix: \"post\"\n    // query: \"?query\"\n    // fragment: \"#frag\"\n    // regExp: /^\\.\\/pre.*inner.*inner2.*post$/\n    const regExp = new RegExp(`^${quoteMeta(prefix)}${innerRegExp}${quoteMeta(postfix)}$`);\n    const dep = new Dep({\n      request: context + query + fragment,\n      recursive: options.wrappedContextRecursive,\n      regExp,\n      mode: \"sync\",\n      ...contextOptions\n    }, range, valueRange, ...depArgs);\n    dep.loc = expr.loc;\n    const replaces = [];\n    param.parts.forEach((part, i) => {\n      if (i % 2 === 0) {\n        // Quasis or merged quasi\n        let range = part.range;\n        let value = part.string;\n        if (param.templateStringKind === \"cooked\") {\n          value = JSON.stringify(value);\n          value = value.slice(1, value.length - 1);\n        }\n        if (i === 0) {\n          // prefix\n          value = prefix;\n          range = [param.range[0], part.range[1]];\n          value = (param.templateStringKind === \"cooked\" ? \"`\" : \"String.raw`\") + value;\n        } else if (i === param.parts.length - 1) {\n          // postfix\n          value = postfix;\n          range = [part.range[0], param.range[1]];\n          value = value + \"`\";\n        } else if (part.expression && part.expression.type === \"TemplateElement\" && part.expression.value.raw === value) {\n          // Shortcut when it's a single quasi and doesn't need to be replaced\n          return;\n        }\n        replaces.push({\n          range,\n          value\n        });\n      } else {\n        // Expression\n        parser.walkExpression(part.expression);\n      }\n    });\n    dep.replaces = replaces;\n    dep.critical = options.wrappedContextCritical && \"a part of the request of a dependency is an expression\";\n    return dep;\n  } else if (param.isWrapped() && (param.prefix && param.prefix.isString() || param.postfix && param.postfix.isString())) {\n    let prefixRaw = param.prefix && param.prefix.isString() ? param.prefix.string : \"\";\n    let postfixRaw = param.postfix && param.postfix.isString() ? param.postfix.string : \"\";\n    const prefixRange = param.prefix && param.prefix.isString() ? param.prefix.range : null;\n    const postfixRange = param.postfix && param.postfix.isString() ? param.postfix.range : null;\n    const valueRange = param.range;\n    const {\n      context,\n      prefix\n    } = splitContextFromPrefix(prefixRaw);\n    const {\n      path: postfix,\n      query,\n      fragment\n    } = parseResource(postfixRaw, parser);\n    const regExp = new RegExp(`^${quoteMeta(prefix)}${options.wrappedContextRegExp.source}${quoteMeta(postfix)}$`);\n    const dep = new Dep({\n      request: context + query + fragment,\n      recursive: options.wrappedContextRecursive,\n      regExp,\n      mode: \"sync\",\n      ...contextOptions\n    }, range, valueRange, ...depArgs);\n    dep.loc = expr.loc;\n    const replaces = [];\n    if (prefixRange) {\n      replaces.push({\n        range: prefixRange,\n        value: JSON.stringify(prefix)\n      });\n    }\n    if (postfixRange) {\n      replaces.push({\n        range: postfixRange,\n        value: JSON.stringify(postfix)\n      });\n    }\n    dep.replaces = replaces;\n    dep.critical = options.wrappedContextCritical && \"a part of the request of a dependency is an expression\";\n    if (parser && param.wrappedInnerExpressions) {\n      for (const part of param.wrappedInnerExpressions) {\n        if (part.expression) parser.walkExpression(part.expression);\n      }\n    }\n    return dep;\n  } else {\n    const dep = new Dep({\n      request: options.exprContextRequest,\n      recursive: options.exprContextRecursive,\n      regExp: /** @type {RegExp} */options.exprContextRegExp,\n      mode: \"sync\",\n      ...contextOptions\n    }, range, param.range, ...depArgs);\n    dep.loc = expr.loc;\n    dep.critical = options.exprContextCritical && \"the request of a dependency is an expression\";\n    parser.walkExpression(param.expression);\n    return dep;\n  }\n};","map":{"version":3,"names":["parseResource","require","quoteMeta","str","replace","splitContextFromPrefix","prefix","idx","lastIndexOf","context","slice","exports","create","Dep","range","param","expr","options","contextOptions","parser","depArgs","isTemplateString","prefixRaw","quasis","string","postfixRaw","length","valueRange","path","postfix","query","fragment","innerQuasis","innerRegExp","wrappedContextRegExp","source","map","q","join","regExp","RegExp","dep","request","recursive","wrappedContextRecursive","mode","loc","replaces","parts","forEach","part","i","value","templateStringKind","JSON","stringify","expression","type","raw","push","walkExpression","critical","wrappedContextCritical","isWrapped","isString","prefixRange","postfixRange","wrappedInnerExpressions","exprContextRequest","exprContextRecursive","exprContextRegExp","exprContextCritical"],"sources":["C:/Users/91930/Desktop/Github projects/Pharmacy Demo/front-end/node_modules/webpack/lib/dependencies/ContextDependencyHelpers.js"],"sourcesContent":["/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Tobias Koppers @sokra\r\n*/\r\n\r\n\"use strict\";\r\n\r\nconst { parseResource } = require(\"../util/identifier\");\r\n\r\n/** @typedef {import(\"estree\").Node} EsTreeNode */\r\n/** @typedef {import(\"../../declarations/WebpackOptions\").JavascriptParserOptions} JavascriptParserOptions */\r\n/** @typedef {import(\"../../declarations/WebpackOptions\").ModuleOptionsNormalized} ModuleOptions */\r\n/** @typedef {import(\"../javascript/BasicEvaluatedExpression\")} BasicEvaluatedExpression */\r\n/** @typedef {import(\"../javascript/JavascriptParser\")} JavascriptParser */\r\n/** @typedef {import(\"./ContextDependency\")} ContextDependency */\r\n/** @typedef {import(\"./ContextDependency\").ContextDependencyOptions} ContextDependencyOptions */\r\n\r\n/**\r\n * Escapes regular expression metacharacters\r\n * @param {string} str String to quote\r\n * @returns {string} Escaped string\r\n */\r\nconst quoteMeta = str => {\r\n\treturn str.replace(/[-[\\]\\\\/{}()*+?.^$|]/g, \"\\\\$&\");\r\n};\r\n\r\nconst splitContextFromPrefix = prefix => {\r\n\tconst idx = prefix.lastIndexOf(\"/\");\r\n\tlet context = \".\";\r\n\tif (idx >= 0) {\r\n\t\tcontext = prefix.slice(0, idx);\r\n\t\tprefix = `.${prefix.slice(idx)}`;\r\n\t}\r\n\treturn {\r\n\t\tcontext,\r\n\t\tprefix\r\n\t};\r\n};\r\n\r\n/** @typedef {Partial<Omit<ContextDependencyOptions, \"resource\">>} PartialContextDependencyOptions */\r\n\r\n/** @typedef {{ new(options: ContextDependencyOptions, range: [number, number], valueRange: [number, number], ...args: any[]): ContextDependency }} ContextDependencyConstructor */\r\n\r\n/**\r\n * @param {ContextDependencyConstructor} Dep the Dependency class\r\n * @param {[number, number]} range source range\r\n * @param {BasicEvaluatedExpression} param context param\r\n * @param {EsTreeNode} expr expr\r\n * @param {Pick<JavascriptParserOptions, `${\"expr\"|\"wrapped\"}Context${\"Critical\"|\"Recursive\"|\"RegExp\"}` | \"exprContextRequest\">} options options for context creation\r\n * @param {PartialContextDependencyOptions} contextOptions options for the ContextModule\r\n * @param {JavascriptParser} parser the parser\r\n * @param {...any} depArgs depArgs\r\n * @returns {ContextDependency} the created Dependency\r\n */\r\nexports.create = (\r\n\tDep,\r\n\trange,\r\n\tparam,\r\n\texpr,\r\n\toptions,\r\n\tcontextOptions,\r\n\tparser,\r\n\t...depArgs\r\n) => {\r\n\tif (param.isTemplateString()) {\r\n\t\tlet prefixRaw = param.quasis[0].string;\r\n\t\tlet postfixRaw =\r\n\t\t\tparam.quasis.length > 1\r\n\t\t\t\t? param.quasis[param.quasis.length - 1].string\r\n\t\t\t\t: \"\";\r\n\r\n\t\tconst valueRange = param.range;\r\n\t\tconst { context, prefix } = splitContextFromPrefix(prefixRaw);\r\n\t\tconst {\r\n\t\t\tpath: postfix,\r\n\t\t\tquery,\r\n\t\t\tfragment\r\n\t\t} = parseResource(postfixRaw, parser);\r\n\r\n\t\t// When there are more than two quasis, the generated RegExp can be more precise\r\n\t\t// We join the quasis with the expression regexp\r\n\t\tconst innerQuasis = param.quasis.slice(1, param.quasis.length - 1);\r\n\t\tconst innerRegExp =\r\n\t\t\toptions.wrappedContextRegExp.source +\r\n\t\t\tinnerQuasis\r\n\t\t\t\t.map(q => quoteMeta(q.string) + options.wrappedContextRegExp.source)\r\n\t\t\t\t.join(\"\");\r\n\r\n\t\t// Example: `./context/pre${e}inner${e}inner2${e}post?query#frag`\r\n\t\t// context: \"./context\"\r\n\t\t// prefix: \"./pre\"\r\n\t\t// innerQuasis: [BEE(\"inner\"), BEE(\"inner2\")]\r\n\t\t// (BEE = BasicEvaluatedExpression)\r\n\t\t// postfix: \"post\"\r\n\t\t// query: \"?query\"\r\n\t\t// fragment: \"#frag\"\r\n\t\t// regExp: /^\\.\\/pre.*inner.*inner2.*post$/\r\n\t\tconst regExp = new RegExp(\r\n\t\t\t`^${quoteMeta(prefix)}${innerRegExp}${quoteMeta(postfix)}$`\r\n\t\t);\r\n\t\tconst dep = new Dep(\r\n\t\t\t{\r\n\t\t\t\trequest: context + query + fragment,\r\n\t\t\t\trecursive: options.wrappedContextRecursive,\r\n\t\t\t\tregExp,\r\n\t\t\t\tmode: \"sync\",\r\n\t\t\t\t...contextOptions\r\n\t\t\t},\r\n\t\t\trange,\r\n\t\t\tvalueRange,\r\n\t\t\t...depArgs\r\n\t\t);\r\n\t\tdep.loc = expr.loc;\r\n\t\tconst replaces = [];\r\n\r\n\t\tparam.parts.forEach((part, i) => {\r\n\t\t\tif (i % 2 === 0) {\r\n\t\t\t\t// Quasis or merged quasi\r\n\t\t\t\tlet range = part.range;\r\n\t\t\t\tlet value = part.string;\r\n\t\t\t\tif (param.templateStringKind === \"cooked\") {\r\n\t\t\t\t\tvalue = JSON.stringify(value);\r\n\t\t\t\t\tvalue = value.slice(1, value.length - 1);\r\n\t\t\t\t}\r\n\t\t\t\tif (i === 0) {\r\n\t\t\t\t\t// prefix\r\n\t\t\t\t\tvalue = prefix;\r\n\t\t\t\t\trange = [param.range[0], part.range[1]];\r\n\t\t\t\t\tvalue =\r\n\t\t\t\t\t\t(param.templateStringKind === \"cooked\" ? \"`\" : \"String.raw`\") +\r\n\t\t\t\t\t\tvalue;\r\n\t\t\t\t} else if (i === param.parts.length - 1) {\r\n\t\t\t\t\t// postfix\r\n\t\t\t\t\tvalue = postfix;\r\n\t\t\t\t\trange = [part.range[0], param.range[1]];\r\n\t\t\t\t\tvalue = value + \"`\";\r\n\t\t\t\t} else if (\r\n\t\t\t\t\tpart.expression &&\r\n\t\t\t\t\tpart.expression.type === \"TemplateElement\" &&\r\n\t\t\t\t\tpart.expression.value.raw === value\r\n\t\t\t\t) {\r\n\t\t\t\t\t// Shortcut when it's a single quasi and doesn't need to be replaced\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\treplaces.push({\r\n\t\t\t\t\trange,\r\n\t\t\t\t\tvalue\r\n\t\t\t\t});\r\n\t\t\t} else {\r\n\t\t\t\t// Expression\r\n\t\t\t\tparser.walkExpression(part.expression);\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tdep.replaces = replaces;\r\n\t\tdep.critical =\r\n\t\t\toptions.wrappedContextCritical &&\r\n\t\t\t\"a part of the request of a dependency is an expression\";\r\n\t\treturn dep;\r\n\t} else if (\r\n\t\tparam.isWrapped() &&\r\n\t\t((param.prefix && param.prefix.isString()) ||\r\n\t\t\t(param.postfix && param.postfix.isString()))\r\n\t) {\r\n\t\tlet prefixRaw =\r\n\t\t\tparam.prefix && param.prefix.isString() ? param.prefix.string : \"\";\r\n\t\tlet postfixRaw =\r\n\t\t\tparam.postfix && param.postfix.isString() ? param.postfix.string : \"\";\r\n\t\tconst prefixRange =\r\n\t\t\tparam.prefix && param.prefix.isString() ? param.prefix.range : null;\r\n\t\tconst postfixRange =\r\n\t\t\tparam.postfix && param.postfix.isString() ? param.postfix.range : null;\r\n\t\tconst valueRange = param.range;\r\n\t\tconst { context, prefix } = splitContextFromPrefix(prefixRaw);\r\n\t\tconst {\r\n\t\t\tpath: postfix,\r\n\t\t\tquery,\r\n\t\t\tfragment\r\n\t\t} = parseResource(postfixRaw, parser);\r\n\t\tconst regExp = new RegExp(\r\n\t\t\t`^${quoteMeta(prefix)}${options.wrappedContextRegExp.source}${quoteMeta(\r\n\t\t\t\tpostfix\r\n\t\t\t)}$`\r\n\t\t);\r\n\t\tconst dep = new Dep(\r\n\t\t\t{\r\n\t\t\t\trequest: context + query + fragment,\r\n\t\t\t\trecursive: options.wrappedContextRecursive,\r\n\t\t\t\tregExp,\r\n\t\t\t\tmode: \"sync\",\r\n\t\t\t\t...contextOptions\r\n\t\t\t},\r\n\t\t\trange,\r\n\t\t\tvalueRange,\r\n\t\t\t...depArgs\r\n\t\t);\r\n\t\tdep.loc = expr.loc;\r\n\t\tconst replaces = [];\r\n\t\tif (prefixRange) {\r\n\t\t\treplaces.push({\r\n\t\t\t\trange: prefixRange,\r\n\t\t\t\tvalue: JSON.stringify(prefix)\r\n\t\t\t});\r\n\t\t}\r\n\t\tif (postfixRange) {\r\n\t\t\treplaces.push({\r\n\t\t\t\trange: postfixRange,\r\n\t\t\t\tvalue: JSON.stringify(postfix)\r\n\t\t\t});\r\n\t\t}\r\n\t\tdep.replaces = replaces;\r\n\t\tdep.critical =\r\n\t\t\toptions.wrappedContextCritical &&\r\n\t\t\t\"a part of the request of a dependency is an expression\";\r\n\r\n\t\tif (parser && param.wrappedInnerExpressions) {\r\n\t\t\tfor (const part of param.wrappedInnerExpressions) {\r\n\t\t\t\tif (part.expression) parser.walkExpression(part.expression);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn dep;\r\n\t} else {\r\n\t\tconst dep = new Dep(\r\n\t\t\t{\r\n\t\t\t\trequest: options.exprContextRequest,\r\n\t\t\t\trecursive: options.exprContextRecursive,\r\n\t\t\t\tregExp: /** @type {RegExp} */ (options.exprContextRegExp),\r\n\t\t\t\tmode: \"sync\",\r\n\t\t\t\t...contextOptions\r\n\t\t\t},\r\n\t\t\trange,\r\n\t\t\tparam.range,\r\n\t\t\t...depArgs\r\n\t\t);\r\n\t\tdep.loc = expr.loc;\r\n\t\tdep.critical =\r\n\t\t\toptions.exprContextCritical &&\r\n\t\t\t\"the request of a dependency is an expression\";\r\n\r\n\t\tparser.walkExpression(param.expression);\r\n\r\n\t\treturn dep;\r\n\t}\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}