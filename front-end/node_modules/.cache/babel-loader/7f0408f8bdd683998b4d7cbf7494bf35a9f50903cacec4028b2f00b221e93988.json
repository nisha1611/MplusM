{"ast":null,"code":"'use strict';\n\nfunction getRelatedSchemaIndexes(model, schemaIndexes) {\n  return getRelatedIndexes({\n    baseModelName: model.baseModelName,\n    discriminatorMapping: model.schema.discriminatorMapping,\n    indexes: schemaIndexes,\n    indexesType: 'schema'\n  });\n}\nfunction getRelatedDBIndexes(model, dbIndexes) {\n  return getRelatedIndexes({\n    baseModelName: model.baseModelName,\n    discriminatorMapping: model.schema.discriminatorMapping,\n    indexes: dbIndexes,\n    indexesType: 'db'\n  });\n}\nmodule.exports = {\n  getRelatedSchemaIndexes,\n  getRelatedDBIndexes\n};\nfunction getRelatedIndexes(_ref) {\n  let {\n    baseModelName,\n    discriminatorMapping,\n    indexes,\n    indexesType\n  } = _ref;\n  const discriminatorKey = discriminatorMapping && discriminatorMapping.key;\n  const discriminatorValue = discriminatorMapping && discriminatorMapping.value;\n  if (!discriminatorKey) {\n    return indexes;\n  }\n  const isChildDiscriminatorModel = Boolean(baseModelName);\n  if (isChildDiscriminatorModel) {\n    return indexes.filter(index => {\n      const partialFilterExpression = getPartialFilterExpression(index, indexesType);\n      return partialFilterExpression && partialFilterExpression[discriminatorKey] === discriminatorValue;\n    });\n  }\n  return indexes.filter(index => {\n    const partialFilterExpression = getPartialFilterExpression(index, indexesType);\n    return !partialFilterExpression || !partialFilterExpression[discriminatorKey];\n  });\n}\nfunction getPartialFilterExpression(index, indexesType) {\n  if (indexesType === 'schema') {\n    const options = index[1];\n    return options && options.partialFilterExpression;\n  }\n  return index.partialFilterExpression;\n}","map":{"version":3,"names":["getRelatedSchemaIndexes","model","schemaIndexes","getRelatedIndexes","baseModelName","discriminatorMapping","schema","indexes","indexesType","getRelatedDBIndexes","dbIndexes","module","exports","discriminatorKey","key","discriminatorValue","value","isChildDiscriminatorModel","Boolean","filter","index","partialFilterExpression","getPartialFilterExpression","options"],"sources":["C:/Users/91930/Desktop/Github projects/Pharmacy Demo/back-end/node_modules/mongoose/lib/helpers/indexes/getRelatedIndexes.js"],"sourcesContent":["'use strict';\r\n\r\nfunction getRelatedSchemaIndexes(model, schemaIndexes) {\r\n  return getRelatedIndexes({\r\n    baseModelName: model.baseModelName,\r\n    discriminatorMapping: model.schema.discriminatorMapping,\r\n    indexes: schemaIndexes,\r\n    indexesType: 'schema'\r\n  });\r\n}\r\n\r\nfunction getRelatedDBIndexes(model, dbIndexes) {\r\n  return getRelatedIndexes({\r\n    baseModelName: model.baseModelName,\r\n    discriminatorMapping: model.schema.discriminatorMapping,\r\n    indexes: dbIndexes,\r\n    indexesType: 'db'\r\n  });\r\n}\r\n\r\nmodule.exports = {\r\n  getRelatedSchemaIndexes,\r\n  getRelatedDBIndexes\r\n};\r\n\r\nfunction getRelatedIndexes({\r\n  baseModelName,\r\n  discriminatorMapping,\r\n  indexes,\r\n  indexesType\r\n}) {\r\n  const discriminatorKey = discriminatorMapping && discriminatorMapping.key;\r\n  const discriminatorValue = discriminatorMapping && discriminatorMapping.value;\r\n\r\n  if (!discriminatorKey) {\r\n    return indexes;\r\n  }\r\n\r\n  const isChildDiscriminatorModel = Boolean(baseModelName);\r\n  if (isChildDiscriminatorModel) {\r\n    return indexes.filter(index => {\r\n      const partialFilterExpression = getPartialFilterExpression(index, indexesType);\r\n      return partialFilterExpression && partialFilterExpression[discriminatorKey] === discriminatorValue;\r\n    });\r\n  }\r\n\r\n  return indexes.filter(index => {\r\n    const partialFilterExpression = getPartialFilterExpression(index, indexesType);\r\n    return !partialFilterExpression || !partialFilterExpression[discriminatorKey];\r\n  });\r\n}\r\n\r\nfunction getPartialFilterExpression(index, indexesType) {\r\n  if (indexesType === 'schema') {\r\n    const options = index[1];\r\n    return options && options.partialFilterExpression;\r\n  }\r\n  return index.partialFilterExpression;\r\n}\r\n"],"mappings":"AAAA,YAAY;;AAEZ,SAASA,uBAAuB,CAACC,KAAK,EAAEC,aAAa,EAAE;EACrD,OAAOC,iBAAiB,CAAC;IACvBC,aAAa,EAAEH,KAAK,CAACG,aAAa;IAClCC,oBAAoB,EAAEJ,KAAK,CAACK,MAAM,CAACD,oBAAoB;IACvDE,OAAO,EAAEL,aAAa;IACtBM,WAAW,EAAE;EACf,CAAC,CAAC;AACJ;AAEA,SAASC,mBAAmB,CAACR,KAAK,EAAES,SAAS,EAAE;EAC7C,OAAOP,iBAAiB,CAAC;IACvBC,aAAa,EAAEH,KAAK,CAACG,aAAa;IAClCC,oBAAoB,EAAEJ,KAAK,CAACK,MAAM,CAACD,oBAAoB;IACvDE,OAAO,EAAEG,SAAS;IAClBF,WAAW,EAAE;EACf,CAAC,CAAC;AACJ;AAEAG,MAAM,CAACC,OAAO,GAAG;EACfZ,uBAAuB;EACvBS;AACF,CAAC;AAED,SAASN,iBAAiB,OAKvB;EAAA,IALwB;IACzBC,aAAa;IACbC,oBAAoB;IACpBE,OAAO;IACPC;EACF,CAAC;EACC,MAAMK,gBAAgB,GAAGR,oBAAoB,IAAIA,oBAAoB,CAACS,GAAG;EACzE,MAAMC,kBAAkB,GAAGV,oBAAoB,IAAIA,oBAAoB,CAACW,KAAK;EAE7E,IAAI,CAACH,gBAAgB,EAAE;IACrB,OAAON,OAAO;EAChB;EAEA,MAAMU,yBAAyB,GAAGC,OAAO,CAACd,aAAa,CAAC;EACxD,IAAIa,yBAAyB,EAAE;IAC7B,OAAOV,OAAO,CAACY,MAAM,CAACC,KAAK,IAAI;MAC7B,MAAMC,uBAAuB,GAAGC,0BAA0B,CAACF,KAAK,EAAEZ,WAAW,CAAC;MAC9E,OAAOa,uBAAuB,IAAIA,uBAAuB,CAACR,gBAAgB,CAAC,KAAKE,kBAAkB;IACpG,CAAC,CAAC;EACJ;EAEA,OAAOR,OAAO,CAACY,MAAM,CAACC,KAAK,IAAI;IAC7B,MAAMC,uBAAuB,GAAGC,0BAA0B,CAACF,KAAK,EAAEZ,WAAW,CAAC;IAC9E,OAAO,CAACa,uBAAuB,IAAI,CAACA,uBAAuB,CAACR,gBAAgB,CAAC;EAC/E,CAAC,CAAC;AACJ;AAEA,SAASS,0BAA0B,CAACF,KAAK,EAAEZ,WAAW,EAAE;EACtD,IAAIA,WAAW,KAAK,QAAQ,EAAE;IAC5B,MAAMe,OAAO,GAAGH,KAAK,CAAC,CAAC,CAAC;IACxB,OAAOG,OAAO,IAAIA,OAAO,CAACF,uBAAuB;EACnD;EACA,OAAOD,KAAK,CAACC,uBAAuB;AACtC"},"metadata":{},"sourceType":"script","externalDependencies":[]}