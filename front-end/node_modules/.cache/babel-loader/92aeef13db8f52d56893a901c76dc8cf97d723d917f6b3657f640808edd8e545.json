{"ast":null,"code":"'use strict';\n\n/*!\r\n * Module dependencies.\r\n */\nconst SchemaType = require('../schematype');\nconst MongooseError = require('../error/index');\nconst SchemaStringOptions = require('../options/SchemaStringOptions');\nconst castString = require('../cast/string');\nconst utils = require('../utils');\nconst isBsonType = require('../helpers/isBsonType');\nconst CastError = SchemaType.CastError;\n\n/**\r\n * String SchemaType constructor.\r\n *\r\n * @param {String} key\r\n * @param {Object} options\r\n * @inherits SchemaType\r\n * @api public\r\n */\n\nfunction SchemaString(key, options) {\n  this.enumValues = [];\n  this.regExp = null;\n  SchemaType.call(this, key, options, 'String');\n}\n\n/**\r\n * This schema type's name, to defend against minifiers that mangle\r\n * function names.\r\n *\r\n * @api public\r\n */\nSchemaString.schemaName = 'String';\nSchemaString.defaultOptions = {};\n\n/*!\r\n * Inherits from SchemaType.\r\n */\nSchemaString.prototype = Object.create(SchemaType.prototype);\nSchemaString.prototype.constructor = SchemaString;\nObject.defineProperty(SchemaString.prototype, 'OptionsConstructor', {\n  configurable: false,\n  enumerable: false,\n  writable: false,\n  value: SchemaStringOptions\n});\n\n/*!\r\n * ignore\r\n */\n\nSchemaString._cast = castString;\n\n/**\r\n * Get/set the function used to cast arbitrary values to strings.\r\n *\r\n * #### Example:\r\n *\r\n *     // Throw an error if you pass in an object. Normally, Mongoose allows\r\n *     // objects with custom `toString()` functions.\r\n *     const original = mongoose.Schema.Types.String.cast();\r\n *     mongoose.Schema.Types.String.cast(v => {\r\n *       assert.ok(v == null || typeof v !== 'object');\r\n *       return original(v);\r\n *     });\r\n *\r\n *     // Or disable casting entirely\r\n *     mongoose.Schema.Types.String.cast(false);\r\n *\r\n * @param {Function} caster\r\n * @return {Function}\r\n * @function get\r\n * @static\r\n * @api public\r\n */\n\nSchemaString.cast = function cast(caster) {\n  if (arguments.length === 0) {\n    return this._cast;\n  }\n  if (caster === false) {\n    caster = this._defaultCaster;\n  }\n  this._cast = caster;\n  return this._cast;\n};\n\n/*!\r\n * ignore\r\n */\n\nSchemaString._defaultCaster = v => {\n  if (v != null && typeof v !== 'string') {\n    throw new Error();\n  }\n  return v;\n};\n\n/**\r\n * Attaches a getter for all String instances.\r\n *\r\n * #### Example:\r\n *\r\n *     // Make all numbers round down\r\n *     mongoose.Schema.String.get(v => v.toLowerCase());\r\n *\r\n *     const Model = mongoose.model('Test', new Schema({ test: String }));\r\n *     new Model({ test: 'FOO' }).test; // 'foo'\r\n *\r\n * @param {Function} getter\r\n * @return {this}\r\n * @function get\r\n * @static\r\n * @api public\r\n */\n\nSchemaString.get = SchemaType.get;\n\n/**\r\n * Sets a default option for all String instances.\r\n *\r\n * #### Example:\r\n *\r\n *     // Make all strings have option `trim` equal to true.\r\n *     mongoose.Schema.String.set('trim', true);\r\n *\r\n *     const User = mongoose.model('User', new Schema({ name: String }));\r\n *     new User({ name: '   John Doe   ' }).name; // 'John Doe'\r\n *\r\n * @param {String} option The option you'd like to set the value for\r\n * @param {Any} value value for option\r\n * @return {undefined}\r\n * @function set\r\n * @static\r\n * @api public\r\n */\n\nSchemaString.set = SchemaType.set;\n\n/*!\r\n * ignore\r\n */\n\nSchemaString._checkRequired = v => (v instanceof String || typeof v === 'string') && v.length;\n\n/**\r\n * Override the function the required validator uses to check whether a string\r\n * passes the `required` check.\r\n *\r\n * #### Example:\r\n *\r\n *     // Allow empty strings to pass `required` check\r\n *     mongoose.Schema.Types.String.checkRequired(v => v != null);\r\n *\r\n *     const M = mongoose.model({ str: { type: String, required: true } });\r\n *     new M({ str: '' }).validateSync(); // `null`, validation passes!\r\n *\r\n * @param {Function} fn\r\n * @return {Function}\r\n * @function checkRequired\r\n * @static\r\n * @api public\r\n */\n\nSchemaString.checkRequired = SchemaType.checkRequired;\n\n/**\r\n * Adds an enum validator\r\n *\r\n * #### Example:\r\n *\r\n *     const states = ['opening', 'open', 'closing', 'closed']\r\n *     const s = new Schema({ state: { type: String, enum: states }})\r\n *     const M = db.model('M', s)\r\n *     const m = new M({ state: 'invalid' })\r\n *     m.save(function (err) {\r\n *       console.error(String(err)) // ValidationError: `invalid` is not a valid enum value for path `state`.\r\n *       m.state = 'open'\r\n *       m.save(callback) // success\r\n *     })\r\n *\r\n *     // or with custom error messages\r\n *     const enum = {\r\n *       values: ['opening', 'open', 'closing', 'closed'],\r\n *       message: 'enum validator failed for path `{PATH}` with value `{VALUE}`'\r\n *     }\r\n *     const s = new Schema({ state: { type: String, enum: enum })\r\n *     const M = db.model('M', s)\r\n *     const m = new M({ state: 'invalid' })\r\n *     m.save(function (err) {\r\n *       console.error(String(err)) // ValidationError: enum validator failed for path `state` with value `invalid`\r\n *       m.state = 'open'\r\n *       m.save(callback) // success\r\n *     })\r\n *\r\n * @param {...String|Object} [args] enumeration values\r\n * @return {SchemaType} this\r\n * @see Customized Error Messages #error_messages_MongooseError-messages\r\n * @api public\r\n */\n\nSchemaString.prototype.enum = function () {\n  if (this.enumValidator) {\n    this.validators = this.validators.filter(function (v) {\n      return v.validator !== this.enumValidator;\n    }, this);\n    this.enumValidator = false;\n  }\n  if (arguments[0] === void 0 || arguments[0] === false) {\n    return this;\n  }\n  let values;\n  let errorMessage;\n  if (utils.isObject(arguments[0])) {\n    if (Array.isArray(arguments[0].values)) {\n      values = arguments[0].values;\n      errorMessage = arguments[0].message;\n    } else {\n      values = utils.object.vals(arguments[0]);\n      errorMessage = MongooseError.messages.String.enum;\n    }\n  } else {\n    values = arguments;\n    errorMessage = MongooseError.messages.String.enum;\n  }\n  for (const value of values) {\n    if (value !== undefined) {\n      this.enumValues.push(this.cast(value));\n    }\n  }\n  const vals = this.enumValues;\n  this.enumValidator = function (v) {\n    return undefined === v || ~vals.indexOf(v);\n  };\n  this.validators.push({\n    validator: this.enumValidator,\n    message: errorMessage,\n    type: 'enum',\n    enumValues: vals\n  });\n  return this;\n};\n\n/**\r\n * Adds a lowercase [setter](https://mongoosejs.com/docs/api/schematype.html#schematype_SchemaType-set).\r\n *\r\n * #### Example:\r\n *\r\n *     const s = new Schema({ email: { type: String, lowercase: true }})\r\n *     const M = db.model('M', s);\r\n *     const m = new M({ email: 'SomeEmail@example.COM' });\r\n *     console.log(m.email) // someemail@example.com\r\n *     M.find({ email: 'SomeEmail@example.com' }); // Queries by 'someemail@example.com'\r\n *\r\n * Note that `lowercase` does **not** affect regular expression queries:\r\n *\r\n * #### Example:\r\n *\r\n *     // Still queries for documents whose `email` matches the regular\r\n *     // expression /SomeEmail/. Mongoose does **not** convert the RegExp\r\n *     // to lowercase.\r\n *     M.find({ email: /SomeEmail/ });\r\n *\r\n * @api public\r\n * @return {SchemaType} this\r\n */\n\nSchemaString.prototype.lowercase = function (shouldApply) {\n  if (arguments.length > 0 && !shouldApply) {\n    return this;\n  }\n  return this.set(v => {\n    if (typeof v !== 'string') {\n      v = this.cast(v);\n    }\n    if (v) {\n      return v.toLowerCase();\n    }\n    return v;\n  });\n};\n\n/**\r\n * Adds an uppercase [setter](https://mongoosejs.com/docs/api/schematype.html#schematype_SchemaType-set).\r\n *\r\n * #### Example:\r\n *\r\n *     const s = new Schema({ caps: { type: String, uppercase: true }})\r\n *     const M = db.model('M', s);\r\n *     const m = new M({ caps: 'an example' });\r\n *     console.log(m.caps) // AN EXAMPLE\r\n *     M.find({ caps: 'an example' }) // Matches documents where caps = 'AN EXAMPLE'\r\n *\r\n * Note that `uppercase` does **not** affect regular expression queries:\r\n *\r\n * #### Example:\r\n *\r\n *     // Mongoose does **not** convert the RegExp to uppercase.\r\n *     M.find({ email: /an example/ });\r\n *\r\n * @api public\r\n * @return {SchemaType} this\r\n */\n\nSchemaString.prototype.uppercase = function (shouldApply) {\n  if (arguments.length > 0 && !shouldApply) {\n    return this;\n  }\n  return this.set(v => {\n    if (typeof v !== 'string') {\n      v = this.cast(v);\n    }\n    if (v) {\n      return v.toUpperCase();\n    }\n    return v;\n  });\n};\n\n/**\r\n * Adds a trim [setter](https://mongoosejs.com/docs/api/schematype.html#schematype_SchemaType-set).\r\n *\r\n * The string value will be [trimmed](https://masteringjs.io/tutorials/fundamentals/trim-string) when set.\r\n *\r\n * #### Example:\r\n *\r\n *     const s = new Schema({ name: { type: String, trim: true }});\r\n *     const M = db.model('M', s);\r\n *     const string = ' some name ';\r\n *     console.log(string.length); // 11\r\n *     const m = new M({ name: string });\r\n *     console.log(m.name.length); // 9\r\n *\r\n *     // Equivalent to `findOne({ name: string.trim() })`\r\n *     M.findOne({ name: string });\r\n *\r\n * Note that `trim` does **not** affect regular expression queries:\r\n *\r\n * #### Example:\r\n *\r\n *     // Mongoose does **not** trim whitespace from the RegExp.\r\n *     M.find({ name: / some name / });\r\n *\r\n * @api public\r\n * @return {SchemaType} this\r\n */\n\nSchemaString.prototype.trim = function (shouldTrim) {\n  if (arguments.length > 0 && !shouldTrim) {\n    return this;\n  }\n  return this.set(v => {\n    if (typeof v !== 'string') {\n      v = this.cast(v);\n    }\n    if (v) {\n      return v.trim();\n    }\n    return v;\n  });\n};\n\n/**\r\n * Sets a minimum length validator.\r\n *\r\n * #### Example:\r\n *\r\n *     const schema = new Schema({ postalCode: { type: String, minlength: 5 })\r\n *     const Address = db.model('Address', schema)\r\n *     const address = new Address({ postalCode: '9512' })\r\n *     address.save(function (err) {\r\n *       console.error(err) // validator error\r\n *       address.postalCode = '95125';\r\n *       address.save() // success\r\n *     })\r\n *\r\n *     // custom error messages\r\n *     // We can also use the special {MINLENGTH} token which will be replaced with the minimum allowed length\r\n *     const minlength = [5, 'The value of path `{PATH}` (`{VALUE}`) is shorter than the minimum allowed length ({MINLENGTH}).'];\r\n *     const schema = new Schema({ postalCode: { type: String, minlength: minlength })\r\n *     const Address = mongoose.model('Address', schema);\r\n *     const address = new Address({ postalCode: '9512' });\r\n *     address.validate(function (err) {\r\n *       console.log(String(err)) // ValidationError: The value of path `postalCode` (`9512`) is shorter than the minimum length (5).\r\n *     })\r\n *\r\n * @param {Number} value minimum string length\r\n * @param {String} [message] optional custom error message\r\n * @return {SchemaType} this\r\n * @see Customized Error Messages #error_messages_MongooseError-messages\r\n * @api public\r\n */\n\nSchemaString.prototype.minlength = function (value, message) {\n  if (this.minlengthValidator) {\n    this.validators = this.validators.filter(function (v) {\n      return v.validator !== this.minlengthValidator;\n    }, this);\n  }\n  if (value !== null && value !== undefined) {\n    let msg = message || MongooseError.messages.String.minlength;\n    msg = msg.replace(/{MINLENGTH}/, value);\n    this.validators.push({\n      validator: this.minlengthValidator = function (v) {\n        return v === null || v.length >= value;\n      },\n      message: msg,\n      type: 'minlength',\n      minlength: value\n    });\n  }\n  return this;\n};\nSchemaString.prototype.minLength = SchemaString.prototype.minlength;\n\n/**\r\n * Sets a maximum length validator.\r\n *\r\n * #### Example:\r\n *\r\n *     const schema = new Schema({ postalCode: { type: String, maxlength: 9 })\r\n *     const Address = db.model('Address', schema)\r\n *     const address = new Address({ postalCode: '9512512345' })\r\n *     address.save(function (err) {\r\n *       console.error(err) // validator error\r\n *       address.postalCode = '95125';\r\n *       address.save() // success\r\n *     })\r\n *\r\n *     // custom error messages\r\n *     // We can also use the special {MAXLENGTH} token which will be replaced with the maximum allowed length\r\n *     const maxlength = [9, 'The value of path `{PATH}` (`{VALUE}`) exceeds the maximum allowed length ({MAXLENGTH}).'];\r\n *     const schema = new Schema({ postalCode: { type: String, maxlength: maxlength })\r\n *     const Address = mongoose.model('Address', schema);\r\n *     const address = new Address({ postalCode: '9512512345' });\r\n *     address.validate(function (err) {\r\n *       console.log(String(err)) // ValidationError: The value of path `postalCode` (`9512512345`) exceeds the maximum allowed length (9).\r\n *     })\r\n *\r\n * @param {Number} value maximum string length\r\n * @param {String} [message] optional custom error message\r\n * @return {SchemaType} this\r\n * @see Customized Error Messages #error_messages_MongooseError-messages\r\n * @api public\r\n */\n\nSchemaString.prototype.maxlength = function (value, message) {\n  if (this.maxlengthValidator) {\n    this.validators = this.validators.filter(function (v) {\n      return v.validator !== this.maxlengthValidator;\n    }, this);\n  }\n  if (value !== null && value !== undefined) {\n    let msg = message || MongooseError.messages.String.maxlength;\n    msg = msg.replace(/{MAXLENGTH}/, value);\n    this.validators.push({\n      validator: this.maxlengthValidator = function (v) {\n        return v === null || v.length <= value;\n      },\n      message: msg,\n      type: 'maxlength',\n      maxlength: value\n    });\n  }\n  return this;\n};\nSchemaString.prototype.maxLength = SchemaString.prototype.maxlength;\n\n/**\r\n * Sets a regexp validator.\r\n *\r\n * Any value that does not pass `regExp`.test(val) will fail validation.\r\n *\r\n * #### Example:\r\n *\r\n *     const s = new Schema({ name: { type: String, match: /^a/ }})\r\n *     const M = db.model('M', s)\r\n *     const m = new M({ name: 'I am invalid' })\r\n *     m.validate(function (err) {\r\n *       console.error(String(err)) // \"ValidationError: Path `name` is invalid (I am invalid).\"\r\n *       m.name = 'apples'\r\n *       m.validate(function (err) {\r\n *         assert.ok(err) // success\r\n *       })\r\n *     })\r\n *\r\n *     // using a custom error message\r\n *     const match = [ /\\.html$/, \"That file doesn't end in .html ({VALUE})\" ];\r\n *     const s = new Schema({ file: { type: String, match: match }})\r\n *     const M = db.model('M', s);\r\n *     const m = new M({ file: 'invalid' });\r\n *     m.validate(function (err) {\r\n *       console.log(String(err)) // \"ValidationError: That file doesn't end in .html (invalid)\"\r\n *     })\r\n *\r\n * Empty strings, `undefined`, and `null` values always pass the match validator. If you require these values, enable the `required` validator also.\r\n *\r\n *     const s = new Schema({ name: { type: String, match: /^a/, required: true }})\r\n *\r\n * @param {RegExp} regExp regular expression to test against\r\n * @param {String} [message] optional custom error message\r\n * @return {SchemaType} this\r\n * @see Customized Error Messages #error_messages_MongooseError-messages\r\n * @api public\r\n */\n\nSchemaString.prototype.match = function match(regExp, message) {\n  // yes, we allow multiple match validators\n\n  const msg = message || MongooseError.messages.String.match;\n  const matchValidator = function (v) {\n    if (!regExp) {\n      return false;\n    }\n\n    // In case RegExp happens to have `/g` flag set, we need to reset the\n    // `lastIndex`, otherwise `match` will intermittently fail.\n    regExp.lastIndex = 0;\n    const ret = v != null && v !== '' ? regExp.test(v) : true;\n    return ret;\n  };\n  this.validators.push({\n    validator: matchValidator,\n    message: msg,\n    type: 'regexp',\n    regexp: regExp\n  });\n  return this;\n};\n\n/**\r\n * Check if the given value satisfies the `required` validator. The value is\r\n * considered valid if it is a string (that is, not `null` or `undefined`) and\r\n * has positive length. The `required` validator **will** fail for empty\r\n * strings.\r\n *\r\n * @param {Any} value\r\n * @param {Document} doc\r\n * @return {Boolean}\r\n * @api public\r\n */\n\nSchemaString.prototype.checkRequired = function checkRequired(value, doc) {\n  if (typeof value === 'object' && SchemaType._isRef(this, value, doc, true)) {\n    return value != null;\n  }\n\n  // `require('util').inherits()` does **not** copy static properties, and\n  // plugins like mongoose-float use `inherits()` for pre-ES6.\n  const _checkRequired = typeof this.constructor.checkRequired === 'function' ? this.constructor.checkRequired() : SchemaString.checkRequired();\n  return _checkRequired(value);\n};\n\n/**\r\n * Casts to String\r\n *\r\n * @api private\r\n */\n\nSchemaString.prototype.cast = function (value, doc, init) {\n  if (typeof value !== 'string' && SchemaType._isRef(this, value, doc, init)) {\n    return this._castRef(value, doc, init);\n  }\n  let castString;\n  if (typeof this._castFunction === 'function') {\n    castString = this._castFunction;\n  } else if (typeof this.constructor.cast === 'function') {\n    castString = this.constructor.cast();\n  } else {\n    castString = SchemaString.cast();\n  }\n  try {\n    return castString(value);\n  } catch (error) {\n    throw new CastError('string', value, this.path, null, this);\n  }\n};\n\n/*!\r\n * ignore\r\n */\n\nfunction handleSingle(val) {\n  return this.castForQuery(val);\n}\n\n/*!\r\n * ignore\r\n */\n\nfunction handleArray(val) {\n  const _this = this;\n  if (!Array.isArray(val)) {\n    return [this.castForQuery(val)];\n  }\n  return val.map(function (m) {\n    return _this.castForQuery(m);\n  });\n}\n\n/*!\r\n * ignore\r\n */\n\nfunction handleSingleNoSetters(val) {\n  if (val == null) {\n    return this._castNullish(val);\n  }\n  return this.cast(val, this);\n}\nconst $conditionalHandlers = utils.options(SchemaType.prototype.$conditionalHandlers, {\n  $all: handleArray,\n  $gt: handleSingle,\n  $gte: handleSingle,\n  $lt: handleSingle,\n  $lte: handleSingle,\n  $options: handleSingleNoSetters,\n  $regex: function handle$regex(val) {\n    if (Object.prototype.toString.call(val) === '[object RegExp]') {\n      return val;\n    }\n    return handleSingleNoSetters.call(this, val);\n  },\n  $not: handleSingle\n});\nObject.defineProperty(SchemaString.prototype, '$conditionalHandlers', {\n  configurable: false,\n  enumerable: false,\n  writable: false,\n  value: Object.freeze($conditionalHandlers)\n});\n\n/**\r\n * Casts contents for queries.\r\n *\r\n * @param {String} $conditional\r\n * @param {any} [val]\r\n * @api private\r\n */\n\nSchemaString.prototype.castForQuery = function ($conditional, val) {\n  let handler;\n  if (arguments.length === 2) {\n    handler = this.$conditionalHandlers[$conditional];\n    if (!handler) {\n      throw new Error('Can\\'t use ' + $conditional + ' with String.');\n    }\n    return handler.call(this, val);\n  }\n  val = $conditional;\n  if (Object.prototype.toString.call(val) === '[object RegExp]' || isBsonType(val, 'BSONRegExp')) {\n    return val;\n  }\n  return this._castForQuery(val);\n};\n\n/*!\r\n * Module exports.\r\n */\n\nmodule.exports = SchemaString;","map":{"version":3,"names":["SchemaType","require","MongooseError","SchemaStringOptions","castString","utils","isBsonType","CastError","SchemaString","key","options","enumValues","regExp","call","schemaName","defaultOptions","prototype","Object","create","constructor","defineProperty","configurable","enumerable","writable","value","_cast","cast","caster","arguments","length","_defaultCaster","v","Error","get","set","_checkRequired","String","checkRequired","enum","enumValidator","validators","filter","validator","values","errorMessage","isObject","Array","isArray","message","object","vals","messages","undefined","push","indexOf","type","lowercase","shouldApply","toLowerCase","uppercase","toUpperCase","trim","shouldTrim","minlength","minlengthValidator","msg","replace","minLength","maxlength","maxlengthValidator","maxLength","match","matchValidator","lastIndex","ret","test","regexp","doc","_isRef","init","_castRef","_castFunction","error","path","handleSingle","val","castForQuery","handleArray","_this","map","m","handleSingleNoSetters","_castNullish","$conditionalHandlers","$all","$gt","$gte","$lt","$lte","$options","$regex","handle$regex","toString","$not","freeze","$conditional","handler","_castForQuery","module","exports"],"sources":["C:/Users/91930/Desktop/Github projects/Pharmacy Demo/back-end/node_modules/mongoose/lib/schema/string.js"],"sourcesContent":["'use strict';\r\n\r\n/*!\r\n * Module dependencies.\r\n */\r\n\r\nconst SchemaType = require('../schematype');\r\nconst MongooseError = require('../error/index');\r\nconst SchemaStringOptions = require('../options/SchemaStringOptions');\r\nconst castString = require('../cast/string');\r\nconst utils = require('../utils');\r\nconst isBsonType = require('../helpers/isBsonType');\r\n\r\nconst CastError = SchemaType.CastError;\r\n\r\n/**\r\n * String SchemaType constructor.\r\n *\r\n * @param {String} key\r\n * @param {Object} options\r\n * @inherits SchemaType\r\n * @api public\r\n */\r\n\r\nfunction SchemaString(key, options) {\r\n  this.enumValues = [];\r\n  this.regExp = null;\r\n  SchemaType.call(this, key, options, 'String');\r\n}\r\n\r\n/**\r\n * This schema type's name, to defend against minifiers that mangle\r\n * function names.\r\n *\r\n * @api public\r\n */\r\nSchemaString.schemaName = 'String';\r\n\r\nSchemaString.defaultOptions = {};\r\n\r\n/*!\r\n * Inherits from SchemaType.\r\n */\r\nSchemaString.prototype = Object.create(SchemaType.prototype);\r\nSchemaString.prototype.constructor = SchemaString;\r\nObject.defineProperty(SchemaString.prototype, 'OptionsConstructor', {\r\n  configurable: false,\r\n  enumerable: false,\r\n  writable: false,\r\n  value: SchemaStringOptions\r\n});\r\n\r\n/*!\r\n * ignore\r\n */\r\n\r\nSchemaString._cast = castString;\r\n\r\n/**\r\n * Get/set the function used to cast arbitrary values to strings.\r\n *\r\n * #### Example:\r\n *\r\n *     // Throw an error if you pass in an object. Normally, Mongoose allows\r\n *     // objects with custom `toString()` functions.\r\n *     const original = mongoose.Schema.Types.String.cast();\r\n *     mongoose.Schema.Types.String.cast(v => {\r\n *       assert.ok(v == null || typeof v !== 'object');\r\n *       return original(v);\r\n *     });\r\n *\r\n *     // Or disable casting entirely\r\n *     mongoose.Schema.Types.String.cast(false);\r\n *\r\n * @param {Function} caster\r\n * @return {Function}\r\n * @function get\r\n * @static\r\n * @api public\r\n */\r\n\r\nSchemaString.cast = function cast(caster) {\r\n  if (arguments.length === 0) {\r\n    return this._cast;\r\n  }\r\n  if (caster === false) {\r\n    caster = this._defaultCaster;\r\n  }\r\n  this._cast = caster;\r\n\r\n  return this._cast;\r\n};\r\n\r\n/*!\r\n * ignore\r\n */\r\n\r\nSchemaString._defaultCaster = v => {\r\n  if (v != null && typeof v !== 'string') {\r\n    throw new Error();\r\n  }\r\n  return v;\r\n};\r\n\r\n/**\r\n * Attaches a getter for all String instances.\r\n *\r\n * #### Example:\r\n *\r\n *     // Make all numbers round down\r\n *     mongoose.Schema.String.get(v => v.toLowerCase());\r\n *\r\n *     const Model = mongoose.model('Test', new Schema({ test: String }));\r\n *     new Model({ test: 'FOO' }).test; // 'foo'\r\n *\r\n * @param {Function} getter\r\n * @return {this}\r\n * @function get\r\n * @static\r\n * @api public\r\n */\r\n\r\nSchemaString.get = SchemaType.get;\r\n\r\n/**\r\n * Sets a default option for all String instances.\r\n *\r\n * #### Example:\r\n *\r\n *     // Make all strings have option `trim` equal to true.\r\n *     mongoose.Schema.String.set('trim', true);\r\n *\r\n *     const User = mongoose.model('User', new Schema({ name: String }));\r\n *     new User({ name: '   John Doe   ' }).name; // 'John Doe'\r\n *\r\n * @param {String} option The option you'd like to set the value for\r\n * @param {Any} value value for option\r\n * @return {undefined}\r\n * @function set\r\n * @static\r\n * @api public\r\n */\r\n\r\nSchemaString.set = SchemaType.set;\r\n\r\n/*!\r\n * ignore\r\n */\r\n\r\nSchemaString._checkRequired = v => (v instanceof String || typeof v === 'string') && v.length;\r\n\r\n/**\r\n * Override the function the required validator uses to check whether a string\r\n * passes the `required` check.\r\n *\r\n * #### Example:\r\n *\r\n *     // Allow empty strings to pass `required` check\r\n *     mongoose.Schema.Types.String.checkRequired(v => v != null);\r\n *\r\n *     const M = mongoose.model({ str: { type: String, required: true } });\r\n *     new M({ str: '' }).validateSync(); // `null`, validation passes!\r\n *\r\n * @param {Function} fn\r\n * @return {Function}\r\n * @function checkRequired\r\n * @static\r\n * @api public\r\n */\r\n\r\nSchemaString.checkRequired = SchemaType.checkRequired;\r\n\r\n/**\r\n * Adds an enum validator\r\n *\r\n * #### Example:\r\n *\r\n *     const states = ['opening', 'open', 'closing', 'closed']\r\n *     const s = new Schema({ state: { type: String, enum: states }})\r\n *     const M = db.model('M', s)\r\n *     const m = new M({ state: 'invalid' })\r\n *     m.save(function (err) {\r\n *       console.error(String(err)) // ValidationError: `invalid` is not a valid enum value for path `state`.\r\n *       m.state = 'open'\r\n *       m.save(callback) // success\r\n *     })\r\n *\r\n *     // or with custom error messages\r\n *     const enum = {\r\n *       values: ['opening', 'open', 'closing', 'closed'],\r\n *       message: 'enum validator failed for path `{PATH}` with value `{VALUE}`'\r\n *     }\r\n *     const s = new Schema({ state: { type: String, enum: enum })\r\n *     const M = db.model('M', s)\r\n *     const m = new M({ state: 'invalid' })\r\n *     m.save(function (err) {\r\n *       console.error(String(err)) // ValidationError: enum validator failed for path `state` with value `invalid`\r\n *       m.state = 'open'\r\n *       m.save(callback) // success\r\n *     })\r\n *\r\n * @param {...String|Object} [args] enumeration values\r\n * @return {SchemaType} this\r\n * @see Customized Error Messages #error_messages_MongooseError-messages\r\n * @api public\r\n */\r\n\r\nSchemaString.prototype.enum = function() {\r\n  if (this.enumValidator) {\r\n    this.validators = this.validators.filter(function(v) {\r\n      return v.validator !== this.enumValidator;\r\n    }, this);\r\n    this.enumValidator = false;\r\n  }\r\n\r\n  if (arguments[0] === void 0 || arguments[0] === false) {\r\n    return this;\r\n  }\r\n\r\n  let values;\r\n  let errorMessage;\r\n\r\n  if (utils.isObject(arguments[0])) {\r\n    if (Array.isArray(arguments[0].values)) {\r\n      values = arguments[0].values;\r\n      errorMessage = arguments[0].message;\r\n    } else {\r\n      values = utils.object.vals(arguments[0]);\r\n      errorMessage = MongooseError.messages.String.enum;\r\n    }\r\n  } else {\r\n    values = arguments;\r\n    errorMessage = MongooseError.messages.String.enum;\r\n  }\r\n\r\n  for (const value of values) {\r\n    if (value !== undefined) {\r\n      this.enumValues.push(this.cast(value));\r\n    }\r\n  }\r\n\r\n  const vals = this.enumValues;\r\n  this.enumValidator = function(v) {\r\n    return undefined === v || ~vals.indexOf(v);\r\n  };\r\n  this.validators.push({\r\n    validator: this.enumValidator,\r\n    message: errorMessage,\r\n    type: 'enum',\r\n    enumValues: vals\r\n  });\r\n\r\n  return this;\r\n};\r\n\r\n/**\r\n * Adds a lowercase [setter](https://mongoosejs.com/docs/api/schematype.html#schematype_SchemaType-set).\r\n *\r\n * #### Example:\r\n *\r\n *     const s = new Schema({ email: { type: String, lowercase: true }})\r\n *     const M = db.model('M', s);\r\n *     const m = new M({ email: 'SomeEmail@example.COM' });\r\n *     console.log(m.email) // someemail@example.com\r\n *     M.find({ email: 'SomeEmail@example.com' }); // Queries by 'someemail@example.com'\r\n *\r\n * Note that `lowercase` does **not** affect regular expression queries:\r\n *\r\n * #### Example:\r\n *\r\n *     // Still queries for documents whose `email` matches the regular\r\n *     // expression /SomeEmail/. Mongoose does **not** convert the RegExp\r\n *     // to lowercase.\r\n *     M.find({ email: /SomeEmail/ });\r\n *\r\n * @api public\r\n * @return {SchemaType} this\r\n */\r\n\r\nSchemaString.prototype.lowercase = function(shouldApply) {\r\n  if (arguments.length > 0 && !shouldApply) {\r\n    return this;\r\n  }\r\n  return this.set(v => {\r\n    if (typeof v !== 'string') {\r\n      v = this.cast(v);\r\n    }\r\n    if (v) {\r\n      return v.toLowerCase();\r\n    }\r\n    return v;\r\n  });\r\n};\r\n\r\n/**\r\n * Adds an uppercase [setter](https://mongoosejs.com/docs/api/schematype.html#schematype_SchemaType-set).\r\n *\r\n * #### Example:\r\n *\r\n *     const s = new Schema({ caps: { type: String, uppercase: true }})\r\n *     const M = db.model('M', s);\r\n *     const m = new M({ caps: 'an example' });\r\n *     console.log(m.caps) // AN EXAMPLE\r\n *     M.find({ caps: 'an example' }) // Matches documents where caps = 'AN EXAMPLE'\r\n *\r\n * Note that `uppercase` does **not** affect regular expression queries:\r\n *\r\n * #### Example:\r\n *\r\n *     // Mongoose does **not** convert the RegExp to uppercase.\r\n *     M.find({ email: /an example/ });\r\n *\r\n * @api public\r\n * @return {SchemaType} this\r\n */\r\n\r\nSchemaString.prototype.uppercase = function(shouldApply) {\r\n  if (arguments.length > 0 && !shouldApply) {\r\n    return this;\r\n  }\r\n  return this.set(v => {\r\n    if (typeof v !== 'string') {\r\n      v = this.cast(v);\r\n    }\r\n    if (v) {\r\n      return v.toUpperCase();\r\n    }\r\n    return v;\r\n  });\r\n};\r\n\r\n/**\r\n * Adds a trim [setter](https://mongoosejs.com/docs/api/schematype.html#schematype_SchemaType-set).\r\n *\r\n * The string value will be [trimmed](https://masteringjs.io/tutorials/fundamentals/trim-string) when set.\r\n *\r\n * #### Example:\r\n *\r\n *     const s = new Schema({ name: { type: String, trim: true }});\r\n *     const M = db.model('M', s);\r\n *     const string = ' some name ';\r\n *     console.log(string.length); // 11\r\n *     const m = new M({ name: string });\r\n *     console.log(m.name.length); // 9\r\n *\r\n *     // Equivalent to `findOne({ name: string.trim() })`\r\n *     M.findOne({ name: string });\r\n *\r\n * Note that `trim` does **not** affect regular expression queries:\r\n *\r\n * #### Example:\r\n *\r\n *     // Mongoose does **not** trim whitespace from the RegExp.\r\n *     M.find({ name: / some name / });\r\n *\r\n * @api public\r\n * @return {SchemaType} this\r\n */\r\n\r\nSchemaString.prototype.trim = function(shouldTrim) {\r\n  if (arguments.length > 0 && !shouldTrim) {\r\n    return this;\r\n  }\r\n  return this.set(v => {\r\n    if (typeof v !== 'string') {\r\n      v = this.cast(v);\r\n    }\r\n    if (v) {\r\n      return v.trim();\r\n    }\r\n    return v;\r\n  });\r\n};\r\n\r\n/**\r\n * Sets a minimum length validator.\r\n *\r\n * #### Example:\r\n *\r\n *     const schema = new Schema({ postalCode: { type: String, minlength: 5 })\r\n *     const Address = db.model('Address', schema)\r\n *     const address = new Address({ postalCode: '9512' })\r\n *     address.save(function (err) {\r\n *       console.error(err) // validator error\r\n *       address.postalCode = '95125';\r\n *       address.save() // success\r\n *     })\r\n *\r\n *     // custom error messages\r\n *     // We can also use the special {MINLENGTH} token which will be replaced with the minimum allowed length\r\n *     const minlength = [5, 'The value of path `{PATH}` (`{VALUE}`) is shorter than the minimum allowed length ({MINLENGTH}).'];\r\n *     const schema = new Schema({ postalCode: { type: String, minlength: minlength })\r\n *     const Address = mongoose.model('Address', schema);\r\n *     const address = new Address({ postalCode: '9512' });\r\n *     address.validate(function (err) {\r\n *       console.log(String(err)) // ValidationError: The value of path `postalCode` (`9512`) is shorter than the minimum length (5).\r\n *     })\r\n *\r\n * @param {Number} value minimum string length\r\n * @param {String} [message] optional custom error message\r\n * @return {SchemaType} this\r\n * @see Customized Error Messages #error_messages_MongooseError-messages\r\n * @api public\r\n */\r\n\r\nSchemaString.prototype.minlength = function(value, message) {\r\n  if (this.minlengthValidator) {\r\n    this.validators = this.validators.filter(function(v) {\r\n      return v.validator !== this.minlengthValidator;\r\n    }, this);\r\n  }\r\n\r\n  if (value !== null && value !== undefined) {\r\n    let msg = message || MongooseError.messages.String.minlength;\r\n    msg = msg.replace(/{MINLENGTH}/, value);\r\n    this.validators.push({\r\n      validator: this.minlengthValidator = function(v) {\r\n        return v === null || v.length >= value;\r\n      },\r\n      message: msg,\r\n      type: 'minlength',\r\n      minlength: value\r\n    });\r\n  }\r\n\r\n  return this;\r\n};\r\n\r\nSchemaString.prototype.minLength = SchemaString.prototype.minlength;\r\n\r\n/**\r\n * Sets a maximum length validator.\r\n *\r\n * #### Example:\r\n *\r\n *     const schema = new Schema({ postalCode: { type: String, maxlength: 9 })\r\n *     const Address = db.model('Address', schema)\r\n *     const address = new Address({ postalCode: '9512512345' })\r\n *     address.save(function (err) {\r\n *       console.error(err) // validator error\r\n *       address.postalCode = '95125';\r\n *       address.save() // success\r\n *     })\r\n *\r\n *     // custom error messages\r\n *     // We can also use the special {MAXLENGTH} token which will be replaced with the maximum allowed length\r\n *     const maxlength = [9, 'The value of path `{PATH}` (`{VALUE}`) exceeds the maximum allowed length ({MAXLENGTH}).'];\r\n *     const schema = new Schema({ postalCode: { type: String, maxlength: maxlength })\r\n *     const Address = mongoose.model('Address', schema);\r\n *     const address = new Address({ postalCode: '9512512345' });\r\n *     address.validate(function (err) {\r\n *       console.log(String(err)) // ValidationError: The value of path `postalCode` (`9512512345`) exceeds the maximum allowed length (9).\r\n *     })\r\n *\r\n * @param {Number} value maximum string length\r\n * @param {String} [message] optional custom error message\r\n * @return {SchemaType} this\r\n * @see Customized Error Messages #error_messages_MongooseError-messages\r\n * @api public\r\n */\r\n\r\nSchemaString.prototype.maxlength = function(value, message) {\r\n  if (this.maxlengthValidator) {\r\n    this.validators = this.validators.filter(function(v) {\r\n      return v.validator !== this.maxlengthValidator;\r\n    }, this);\r\n  }\r\n\r\n  if (value !== null && value !== undefined) {\r\n    let msg = message || MongooseError.messages.String.maxlength;\r\n    msg = msg.replace(/{MAXLENGTH}/, value);\r\n    this.validators.push({\r\n      validator: this.maxlengthValidator = function(v) {\r\n        return v === null || v.length <= value;\r\n      },\r\n      message: msg,\r\n      type: 'maxlength',\r\n      maxlength: value\r\n    });\r\n  }\r\n\r\n  return this;\r\n};\r\n\r\nSchemaString.prototype.maxLength = SchemaString.prototype.maxlength;\r\n\r\n/**\r\n * Sets a regexp validator.\r\n *\r\n * Any value that does not pass `regExp`.test(val) will fail validation.\r\n *\r\n * #### Example:\r\n *\r\n *     const s = new Schema({ name: { type: String, match: /^a/ }})\r\n *     const M = db.model('M', s)\r\n *     const m = new M({ name: 'I am invalid' })\r\n *     m.validate(function (err) {\r\n *       console.error(String(err)) // \"ValidationError: Path `name` is invalid (I am invalid).\"\r\n *       m.name = 'apples'\r\n *       m.validate(function (err) {\r\n *         assert.ok(err) // success\r\n *       })\r\n *     })\r\n *\r\n *     // using a custom error message\r\n *     const match = [ /\\.html$/, \"That file doesn't end in .html ({VALUE})\" ];\r\n *     const s = new Schema({ file: { type: String, match: match }})\r\n *     const M = db.model('M', s);\r\n *     const m = new M({ file: 'invalid' });\r\n *     m.validate(function (err) {\r\n *       console.log(String(err)) // \"ValidationError: That file doesn't end in .html (invalid)\"\r\n *     })\r\n *\r\n * Empty strings, `undefined`, and `null` values always pass the match validator. If you require these values, enable the `required` validator also.\r\n *\r\n *     const s = new Schema({ name: { type: String, match: /^a/, required: true }})\r\n *\r\n * @param {RegExp} regExp regular expression to test against\r\n * @param {String} [message] optional custom error message\r\n * @return {SchemaType} this\r\n * @see Customized Error Messages #error_messages_MongooseError-messages\r\n * @api public\r\n */\r\n\r\nSchemaString.prototype.match = function match(regExp, message) {\r\n  // yes, we allow multiple match validators\r\n\r\n  const msg = message || MongooseError.messages.String.match;\r\n\r\n  const matchValidator = function(v) {\r\n    if (!regExp) {\r\n      return false;\r\n    }\r\n\r\n    // In case RegExp happens to have `/g` flag set, we need to reset the\r\n    // `lastIndex`, otherwise `match` will intermittently fail.\r\n    regExp.lastIndex = 0;\r\n\r\n    const ret = ((v != null && v !== '')\r\n      ? regExp.test(v)\r\n      : true);\r\n    return ret;\r\n  };\r\n\r\n  this.validators.push({\r\n    validator: matchValidator,\r\n    message: msg,\r\n    type: 'regexp',\r\n    regexp: regExp\r\n  });\r\n  return this;\r\n};\r\n\r\n/**\r\n * Check if the given value satisfies the `required` validator. The value is\r\n * considered valid if it is a string (that is, not `null` or `undefined`) and\r\n * has positive length. The `required` validator **will** fail for empty\r\n * strings.\r\n *\r\n * @param {Any} value\r\n * @param {Document} doc\r\n * @return {Boolean}\r\n * @api public\r\n */\r\n\r\nSchemaString.prototype.checkRequired = function checkRequired(value, doc) {\r\n  if (typeof value === 'object' && SchemaType._isRef(this, value, doc, true)) {\r\n    return value != null;\r\n  }\r\n\r\n  // `require('util').inherits()` does **not** copy static properties, and\r\n  // plugins like mongoose-float use `inherits()` for pre-ES6.\r\n  const _checkRequired = typeof this.constructor.checkRequired === 'function' ?\r\n    this.constructor.checkRequired() :\r\n    SchemaString.checkRequired();\r\n\r\n  return _checkRequired(value);\r\n};\r\n\r\n/**\r\n * Casts to String\r\n *\r\n * @api private\r\n */\r\n\r\nSchemaString.prototype.cast = function(value, doc, init) {\r\n  if (typeof value !== 'string' && SchemaType._isRef(this, value, doc, init)) {\r\n    return this._castRef(value, doc, init);\r\n  }\r\n\r\n  let castString;\r\n  if (typeof this._castFunction === 'function') {\r\n    castString = this._castFunction;\r\n  } else if (typeof this.constructor.cast === 'function') {\r\n    castString = this.constructor.cast();\r\n  } else {\r\n    castString = SchemaString.cast();\r\n  }\r\n\r\n  try {\r\n    return castString(value);\r\n  } catch (error) {\r\n    throw new CastError('string', value, this.path, null, this);\r\n  }\r\n};\r\n\r\n/*!\r\n * ignore\r\n */\r\n\r\nfunction handleSingle(val) {\r\n  return this.castForQuery(val);\r\n}\r\n\r\n/*!\r\n * ignore\r\n */\r\n\r\nfunction handleArray(val) {\r\n  const _this = this;\r\n  if (!Array.isArray(val)) {\r\n    return [this.castForQuery(val)];\r\n  }\r\n  return val.map(function(m) {\r\n    return _this.castForQuery(m);\r\n  });\r\n}\r\n\r\n/*!\r\n * ignore\r\n */\r\n\r\nfunction handleSingleNoSetters(val) {\r\n  if (val == null) {\r\n    return this._castNullish(val);\r\n  }\r\n\r\n  return this.cast(val, this);\r\n}\r\n\r\nconst $conditionalHandlers = utils.options(SchemaType.prototype.$conditionalHandlers, {\r\n  $all: handleArray,\r\n  $gt: handleSingle,\r\n  $gte: handleSingle,\r\n  $lt: handleSingle,\r\n  $lte: handleSingle,\r\n  $options: handleSingleNoSetters,\r\n  $regex: function handle$regex(val) {\r\n    if (Object.prototype.toString.call(val) === '[object RegExp]') {\r\n      return val;\r\n    }\r\n\r\n    return handleSingleNoSetters.call(this, val);\r\n  },\r\n  $not: handleSingle\r\n});\r\n\r\nObject.defineProperty(SchemaString.prototype, '$conditionalHandlers', {\r\n  configurable: false,\r\n  enumerable: false,\r\n  writable: false,\r\n  value: Object.freeze($conditionalHandlers)\r\n});\r\n\r\n/**\r\n * Casts contents for queries.\r\n *\r\n * @param {String} $conditional\r\n * @param {any} [val]\r\n * @api private\r\n */\r\n\r\nSchemaString.prototype.castForQuery = function($conditional, val) {\r\n  let handler;\r\n  if (arguments.length === 2) {\r\n    handler = this.$conditionalHandlers[$conditional];\r\n    if (!handler) {\r\n      throw new Error('Can\\'t use ' + $conditional + ' with String.');\r\n    }\r\n    return handler.call(this, val);\r\n  }\r\n  val = $conditional;\r\n  if (Object.prototype.toString.call(val) === '[object RegExp]' || isBsonType(val, 'BSONRegExp')) {\r\n    return val;\r\n  }\r\n\r\n  return this._castForQuery(val);\r\n};\r\n\r\n/*!\r\n * Module exports.\r\n */\r\n\r\nmodule.exports = SchemaString;\r\n"],"mappings":"AAAA,YAAY;;AAEZ;AACA;AACA;AAEA,MAAMA,UAAU,GAAGC,OAAO,CAAC,eAAe,CAAC;AAC3C,MAAMC,aAAa,GAAGD,OAAO,CAAC,gBAAgB,CAAC;AAC/C,MAAME,mBAAmB,GAAGF,OAAO,CAAC,gCAAgC,CAAC;AACrE,MAAMG,UAAU,GAAGH,OAAO,CAAC,gBAAgB,CAAC;AAC5C,MAAMI,KAAK,GAAGJ,OAAO,CAAC,UAAU,CAAC;AACjC,MAAMK,UAAU,GAAGL,OAAO,CAAC,uBAAuB,CAAC;AAEnD,MAAMM,SAAS,GAAGP,UAAU,CAACO,SAAS;;AAEtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASC,YAAY,CAACC,GAAG,EAAEC,OAAO,EAAE;EAClC,IAAI,CAACC,UAAU,GAAG,EAAE;EACpB,IAAI,CAACC,MAAM,GAAG,IAAI;EAClBZ,UAAU,CAACa,IAAI,CAAC,IAAI,EAAEJ,GAAG,EAAEC,OAAO,EAAE,QAAQ,CAAC;AAC/C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACAF,YAAY,CAACM,UAAU,GAAG,QAAQ;AAElCN,YAAY,CAACO,cAAc,GAAG,CAAC,CAAC;;AAEhC;AACA;AACA;AACAP,YAAY,CAACQ,SAAS,GAAGC,MAAM,CAACC,MAAM,CAAClB,UAAU,CAACgB,SAAS,CAAC;AAC5DR,YAAY,CAACQ,SAAS,CAACG,WAAW,GAAGX,YAAY;AACjDS,MAAM,CAACG,cAAc,CAACZ,YAAY,CAACQ,SAAS,EAAE,oBAAoB,EAAE;EAClEK,YAAY,EAAE,KAAK;EACnBC,UAAU,EAAE,KAAK;EACjBC,QAAQ,EAAE,KAAK;EACfC,KAAK,EAAErB;AACT,CAAC,CAAC;;AAEF;AACA;AACA;;AAEAK,YAAY,CAACiB,KAAK,GAAGrB,UAAU;;AAE/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAI,YAAY,CAACkB,IAAI,GAAG,SAASA,IAAI,CAACC,MAAM,EAAE;EACxC,IAAIC,SAAS,CAACC,MAAM,KAAK,CAAC,EAAE;IAC1B,OAAO,IAAI,CAACJ,KAAK;EACnB;EACA,IAAIE,MAAM,KAAK,KAAK,EAAE;IACpBA,MAAM,GAAG,IAAI,CAACG,cAAc;EAC9B;EACA,IAAI,CAACL,KAAK,GAAGE,MAAM;EAEnB,OAAO,IAAI,CAACF,KAAK;AACnB,CAAC;;AAED;AACA;AACA;;AAEAjB,YAAY,CAACsB,cAAc,GAAGC,CAAC,IAAI;EACjC,IAAIA,CAAC,IAAI,IAAI,IAAI,OAAOA,CAAC,KAAK,QAAQ,EAAE;IACtC,MAAM,IAAIC,KAAK,EAAE;EACnB;EACA,OAAOD,CAAC;AACV,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAvB,YAAY,CAACyB,GAAG,GAAGjC,UAAU,CAACiC,GAAG;;AAEjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAzB,YAAY,CAAC0B,GAAG,GAAGlC,UAAU,CAACkC,GAAG;;AAEjC;AACA;AACA;;AAEA1B,YAAY,CAAC2B,cAAc,GAAGJ,CAAC,IAAI,CAACA,CAAC,YAAYK,MAAM,IAAI,OAAOL,CAAC,KAAK,QAAQ,KAAKA,CAAC,CAACF,MAAM;;AAE7F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEArB,YAAY,CAAC6B,aAAa,GAAGrC,UAAU,CAACqC,aAAa;;AAErD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA7B,YAAY,CAACQ,SAAS,CAACsB,IAAI,GAAG,YAAW;EACvC,IAAI,IAAI,CAACC,aAAa,EAAE;IACtB,IAAI,CAACC,UAAU,GAAG,IAAI,CAACA,UA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"},"metadata":{},"sourceType":"script","externalDependencies":[]}