{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getEndpointFromRegion = void 0;\nconst getEndpointFromRegion = async input => {\n  var _a;\n  const {\n    tls = true\n  } = input;\n  const region = await input.region();\n  const dnsHostRegex = new RegExp(/^([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9-]{0,61}[a-zA-Z0-9])$/);\n  if (!dnsHostRegex.test(region)) {\n    throw new Error(\"Invalid region in client config\");\n  }\n  const useDualstackEndpoint = await input.useDualstackEndpoint();\n  const useFipsEndpoint = await input.useFipsEndpoint();\n  const {\n    hostname\n  } = (_a = await input.regionInfoProvider(region, {\n    useDualstackEndpoint,\n    useFipsEndpoint\n  })) !== null && _a !== void 0 ? _a : {};\n  if (!hostname) {\n    throw new Error(\"Cannot resolve hostname from client config\");\n  }\n  return input.urlParser(`${tls ? \"https:\" : \"http:\"}//${hostname}`);\n};\nexports.getEndpointFromRegion = getEndpointFromRegion;","map":{"version":3,"names":["Object","defineProperty","exports","value","getEndpointFromRegion","input","_a","tls","region","dnsHostRegex","RegExp","test","Error","useDualstackEndpoint","useFipsEndpoint","hostname","regionInfoProvider","urlParser"],"sources":["C:/Users/91930/Desktop/Github projects/Pharmacy Demo/back-end/node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/utils/getEndpointFromRegion.js"],"sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.getEndpointFromRegion = void 0;\r\nconst getEndpointFromRegion = async (input) => {\r\n    var _a;\r\n    const { tls = true } = input;\r\n    const region = await input.region();\r\n    const dnsHostRegex = new RegExp(/^([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9-]{0,61}[a-zA-Z0-9])$/);\r\n    if (!dnsHostRegex.test(region)) {\r\n        throw new Error(\"Invalid region in client config\");\r\n    }\r\n    const useDualstackEndpoint = await input.useDualstackEndpoint();\r\n    const useFipsEndpoint = await input.useFipsEndpoint();\r\n    const { hostname } = (_a = (await input.regionInfoProvider(region, { useDualstackEndpoint, useFipsEndpoint }))) !== null && _a !== void 0 ? _a : {};\r\n    if (!hostname) {\r\n        throw new Error(\"Cannot resolve hostname from client config\");\r\n    }\r\n    return input.urlParser(`${tls ? \"https:\" : \"http:\"}//${hostname}`);\r\n};\r\nexports.getEndpointFromRegion = getEndpointFromRegion;\r\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,qBAAqB,GAAG,KAAK,CAAC;AACtC,MAAMA,qBAAqB,GAAG,MAAOC,KAAK,IAAK;EAC3C,IAAIC,EAAE;EACN,MAAM;IAAEC,GAAG,GAAG;EAAK,CAAC,GAAGF,KAAK;EAC5B,MAAMG,MAAM,GAAG,MAAMH,KAAK,CAACG,MAAM,EAAE;EACnC,MAAMC,YAAY,GAAG,IAAIC,MAAM,CAAC,0DAA0D,CAAC;EAC3F,IAAI,CAACD,YAAY,CAACE,IAAI,CAACH,MAAM,CAAC,EAAE;IAC5B,MAAM,IAAII,KAAK,CAAC,iCAAiC,CAAC;EACtD;EACA,MAAMC,oBAAoB,GAAG,MAAMR,KAAK,CAACQ,oBAAoB,EAAE;EAC/D,MAAMC,eAAe,GAAG,MAAMT,KAAK,CAACS,eAAe,EAAE;EACrD,MAAM;IAAEC;EAAS,CAAC,GAAG,CAACT,EAAE,GAAI,MAAMD,KAAK,CAACW,kBAAkB,CAACR,MAAM,EAAE;IAAEK,oBAAoB;IAAEC;EAAgB,CAAC,CAAE,MAAM,IAAI,IAAIR,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAG,CAAC,CAAC;EACnJ,IAAI,CAACS,QAAQ,EAAE;IACX,MAAM,IAAIH,KAAK,CAAC,4CAA4C,CAAC;EACjE;EACA,OAAOP,KAAK,CAACY,SAAS,CAAE,GAAEV,GAAG,GAAG,QAAQ,GAAG,OAAQ,KAAIQ,QAAS,EAAC,CAAC;AACtE,CAAC;AACDb,OAAO,CAACE,qBAAqB,GAAGA,qBAAqB"},"metadata":{},"sourceType":"script","externalDependencies":[]}