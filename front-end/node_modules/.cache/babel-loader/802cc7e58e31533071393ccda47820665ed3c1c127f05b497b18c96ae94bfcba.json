{"ast":null,"code":"import { ListAccountRolesCommand } from \"../commands/ListAccountRolesCommand\";\nimport { SSO } from \"../SSO\";\nimport { SSOClient } from \"../SSOClient\";\nconst makePagedClientRequest = async function (client, input) {\n  for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n    args[_key - 2] = arguments[_key];\n  }\n  return await client.send(new ListAccountRolesCommand(input), ...args);\n};\nconst makePagedRequest = async function (client, input) {\n  for (var _len2 = arguments.length, args = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {\n    args[_key2 - 2] = arguments[_key2];\n  }\n  return await client.listAccountRoles(input, ...args);\n};\nexport async function* paginateListAccountRoles(config, input) {\n  let token = config.startingToken || undefined;\n  let hasNext = true;\n  let page;\n  for (var _len3 = arguments.length, additionalArguments = new Array(_len3 > 2 ? _len3 - 2 : 0), _key3 = 2; _key3 < _len3; _key3++) {\n    additionalArguments[_key3 - 2] = arguments[_key3];\n  }\n  while (hasNext) {\n    input.nextToken = token;\n    input[\"maxResults\"] = config.pageSize;\n    if (config.client instanceof SSO) {\n      page = await makePagedRequest(config.client, input, ...additionalArguments);\n    } else if (config.client instanceof SSOClient) {\n      page = await makePagedClientRequest(config.client, input, ...additionalArguments);\n    } else {\n      throw new Error(\"Invalid client, expected SSO | SSOClient\");\n    }\n    yield page;\n    const prevToken = token;\n    token = page.nextToken;\n    hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));\n  }\n  return undefined;\n}","map":{"version":3,"names":["ListAccountRolesCommand","SSO","SSOClient","makePagedClientRequest","client","input","args","send","makePagedRequest","listAccountRoles","paginateListAccountRoles","config","token","startingToken","undefined","hasNext","page","additionalArguments","nextToken","pageSize","Error","prevToken","stopOnSameToken"],"sources":["C:/Users/91930/Desktop/Github projects/Pharmacy Demo/back-end/node_modules/@aws-sdk/client-sso/dist-es/pagination/ListAccountRolesPaginator.js"],"sourcesContent":["import { ListAccountRolesCommand, } from \"../commands/ListAccountRolesCommand\";\r\nimport { SSO } from \"../SSO\";\r\nimport { SSOClient } from \"../SSOClient\";\r\nconst makePagedClientRequest = async (client, input, ...args) => {\r\n    return await client.send(new ListAccountRolesCommand(input), ...args);\r\n};\r\nconst makePagedRequest = async (client, input, ...args) => {\r\n    return await client.listAccountRoles(input, ...args);\r\n};\r\nexport async function* paginateListAccountRoles(config, input, ...additionalArguments) {\r\n    let token = config.startingToken || undefined;\r\n    let hasNext = true;\r\n    let page;\r\n    while (hasNext) {\r\n        input.nextToken = token;\r\n        input[\"maxResults\"] = config.pageSize;\r\n        if (config.client instanceof SSO) {\r\n            page = await makePagedRequest(config.client, input, ...additionalArguments);\r\n        }\r\n        else if (config.client instanceof SSOClient) {\r\n            page = await makePagedClientRequest(config.client, input, ...additionalArguments);\r\n        }\r\n        else {\r\n            throw new Error(\"Invalid client, expected SSO | SSOClient\");\r\n        }\r\n        yield page;\r\n        const prevToken = token;\r\n        token = page.nextToken;\r\n        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));\r\n    }\r\n    return undefined;\r\n}\r\n"],"mappings":"AAAA,SAASA,uBAAuB,QAAS,qCAAqC;AAC9E,SAASC,GAAG,QAAQ,QAAQ;AAC5B,SAASC,SAAS,QAAQ,cAAc;AACxC,MAAMC,sBAAsB,GAAG,gBAAOC,MAAM,EAAEC,KAAK,EAAc;EAAA,kCAATC,IAAI;IAAJA,IAAI;EAAA;EACxD,OAAO,MAAMF,MAAM,CAACG,IAAI,CAAC,IAAIP,uBAAuB,CAACK,KAAK,CAAC,EAAE,GAAGC,IAAI,CAAC;AACzE,CAAC;AACD,MAAME,gBAAgB,GAAG,gBAAOJ,MAAM,EAAEC,KAAK,EAAc;EAAA,mCAATC,IAAI;IAAJA,IAAI;EAAA;EAClD,OAAO,MAAMF,MAAM,CAACK,gBAAgB,CAACJ,KAAK,EAAE,GAAGC,IAAI,CAAC;AACxD,CAAC;AACD,OAAO,gBAAgBI,wBAAwB,CAACC,MAAM,EAAEN,KAAK,EAA0B;EACnF,IAAIO,KAAK,GAAGD,MAAM,CAACE,aAAa,IAAIC,SAAS;EAC7C,IAAIC,OAAO,GAAG,IAAI;EAClB,IAAIC,IAAI;EAAC,mCAHqDC,mBAAmB;IAAnBA,mBAAmB;EAAA;EAIjF,OAAOF,OAAO,EAAE;IACZV,KAAK,CAACa,SAAS,GAAGN,KAAK;IACvBP,KAAK,CAAC,YAAY,CAAC,GAAGM,MAAM,CAACQ,QAAQ;IACrC,IAAIR,MAAM,CAACP,MAAM,YAAYH,GAAG,EAAE;MAC9Be,IAAI,GAAG,MAAMR,gBAAgB,CAACG,MAAM,CAACP,MAAM,EAAEC,KAAK,EAAE,GAAGY,mBAAmB,CAAC;IAC/E,CAAC,MACI,IAAIN,MAAM,CAACP,MAAM,YAAYF,SAAS,EAAE;MACzCc,IAAI,GAAG,MAAMb,sBAAsB,CAACQ,MAAM,CAACP,MAAM,EAAEC,KAAK,EAAE,GAAGY,mBAAmB,CAAC;IACrF,CAAC,MACI;MACD,MAAM,IAAIG,KAAK,CAAC,0CAA0C,CAAC;IAC/D;IACA,MAAMJ,IAAI;IACV,MAAMK,SAAS,GAAGT,KAAK;IACvBA,KAAK,GAAGI,IAAI,CAACE,SAAS;IACtBH,OAAO,GAAG,CAAC,EAAEH,KAAK,KAAK,CAACD,MAAM,CAACW,eAAe,IAAIV,KAAK,KAAKS,SAAS,CAAC,CAAC;EAC3E;EACA,OAAOP,SAAS;AACpB"},"metadata":{},"sourceType":"module","externalDependencies":[]}