{"ast":null,"code":"'use strict';\n\nconst CastError = require('../error/cast');\n\n/**\r\n * Given a value, cast it to a string, or throw a `CastError` if the value\r\n * cannot be casted. `null` and `undefined` are considered valid.\r\n *\r\n * @param {Any} value\r\n * @param {String} [path] optional the path to set on the CastError\r\n * @return {string|null|undefined}\r\n * @throws {CastError}\r\n * @api private\r\n */\n\nmodule.exports = function castString(value, path) {\n  // If null or undefined\n  if (value == null) {\n    return value;\n  }\n\n  // handle documents being passed\n  if (value._id && typeof value._id === 'string') {\n    return value._id;\n  }\n\n  // Re: gh-647 and gh-3030, we're ok with casting using `toString()`\n  // **unless** its the default Object.toString, because \"[object Object]\"\n  // doesn't really qualify as useful data\n  if (value.toString && value.toString !== Object.prototype.toString && !Array.isArray(value)) {\n    return value.toString();\n  }\n  throw new CastError('string', value, path);\n};","map":{"version":3,"names":["CastError","require","module","exports","castString","value","path","_id","toString","Object","prototype","Array","isArray"],"sources":["C:/Users/91930/Desktop/Github projects/Pharmacy Demo/back-end/node_modules/mongoose/lib/cast/string.js"],"sourcesContent":["'use strict';\r\n\r\nconst CastError = require('../error/cast');\r\n\r\n/**\r\n * Given a value, cast it to a string, or throw a `CastError` if the value\r\n * cannot be casted. `null` and `undefined` are considered valid.\r\n *\r\n * @param {Any} value\r\n * @param {String} [path] optional the path to set on the CastError\r\n * @return {string|null|undefined}\r\n * @throws {CastError}\r\n * @api private\r\n */\r\n\r\nmodule.exports = function castString(value, path) {\r\n  // If null or undefined\r\n  if (value == null) {\r\n    return value;\r\n  }\r\n\r\n  // handle documents being passed\r\n  if (value._id && typeof value._id === 'string') {\r\n    return value._id;\r\n  }\r\n\r\n  // Re: gh-647 and gh-3030, we're ok with casting using `toString()`\r\n  // **unless** its the default Object.toString, because \"[object Object]\"\r\n  // doesn't really qualify as useful data\r\n  if (value.toString &&\r\n      value.toString !== Object.prototype.toString &&\r\n      !Array.isArray(value)) {\r\n    return value.toString();\r\n  }\r\n\r\n  throw new CastError('string', value, path);\r\n};\r\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,SAAS,GAAGC,OAAO,CAAC,eAAe,CAAC;;AAE1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAC,MAAM,CAACC,OAAO,GAAG,SAASC,UAAU,CAACC,KAAK,EAAEC,IAAI,EAAE;EAChD;EACA,IAAID,KAAK,IAAI,IAAI,EAAE;IACjB,OAAOA,KAAK;EACd;;EAEA;EACA,IAAIA,KAAK,CAACE,GAAG,IAAI,OAAOF,KAAK,CAACE,GAAG,KAAK,QAAQ,EAAE;IAC9C,OAAOF,KAAK,CAACE,GAAG;EAClB;;EAEA;EACA;EACA;EACA,IAAIF,KAAK,CAACG,QAAQ,IACdH,KAAK,CAACG,QAAQ,KAAKC,MAAM,CAACC,SAAS,CAACF,QAAQ,IAC5C,CAACG,KAAK,CAACC,OAAO,CAACP,KAAK,CAAC,EAAE;IACzB,OAAOA,KAAK,CAACG,QAAQ,EAAE;EACzB;EAEA,MAAM,IAAIR,SAAS,CAAC,QAAQ,EAAEK,KAAK,EAAEC,IAAI,CAAC;AAC5C,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}