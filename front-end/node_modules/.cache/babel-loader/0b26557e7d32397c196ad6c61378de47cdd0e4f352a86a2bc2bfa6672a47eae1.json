{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.defineAspects = exports.AbstractOperation = exports.Aspect = void 0;\nconst util_1 = require(\"util\");\nconst bson_1 = require(\"../bson\");\nconst read_preference_1 = require(\"../read_preference\");\nexports.Aspect = {\n  READ_OPERATION: Symbol('READ_OPERATION'),\n  WRITE_OPERATION: Symbol('WRITE_OPERATION'),\n  RETRYABLE: Symbol('RETRYABLE'),\n  EXPLAINABLE: Symbol('EXPLAINABLE'),\n  SKIP_COLLATION: Symbol('SKIP_COLLATION'),\n  CURSOR_CREATING: Symbol('CURSOR_CREATING'),\n  MUST_SELECT_SAME_SERVER: Symbol('MUST_SELECT_SAME_SERVER')\n};\n/** @internal */\nconst kSession = Symbol('session');\n/**\r\n * This class acts as a parent class for any operation and is responsible for setting this.options,\r\n * as well as setting and getting a session.\r\n * Additionally, this class implements `hasAspect`, which determines whether an operation has\r\n * a specific aspect.\r\n * @internal\r\n */\nclass AbstractOperation {\n  constructor() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var _a;\n    this.executeAsync = (0, util_1.promisify)((server, session, callback) => {\n      this.execute(server, session, callback);\n    });\n    this.readPreference = this.hasAspect(exports.Aspect.WRITE_OPERATION) ? read_preference_1.ReadPreference.primary : (_a = read_preference_1.ReadPreference.fromOptions(options)) !== null && _a !== void 0 ? _a : read_preference_1.ReadPreference.primary;\n    // Pull the BSON serialize options from the already-resolved options\n    this.bsonOptions = (0, bson_1.resolveBSONOptions)(options);\n    this[kSession] = options.session != null ? options.session : undefined;\n    this.options = options;\n    this.bypassPinningCheck = !!options.bypassPinningCheck;\n    this.trySecondaryWrite = false;\n  }\n  hasAspect(aspect) {\n    const ctor = this.constructor;\n    if (ctor.aspects == null) {\n      return false;\n    }\n    return ctor.aspects.has(aspect);\n  }\n  get session() {\n    return this[kSession];\n  }\n  clearSession() {\n    this[kSession] = undefined;\n  }\n  get canRetryRead() {\n    return true;\n  }\n  get canRetryWrite() {\n    return true;\n  }\n}\nexports.AbstractOperation = AbstractOperation;\nfunction defineAspects(operation, aspects) {\n  if (!Array.isArray(aspects) && !(aspects instanceof Set)) {\n    aspects = [aspects];\n  }\n  aspects = new Set(aspects);\n  Object.defineProperty(operation, 'aspects', {\n    value: aspects,\n    writable: false\n  });\n  return aspects;\n}\nexports.defineAspects = defineAspects;","map":{"version":3,"mappings":";;;;;;AAAA;AAEA;AACA;AAKaA,cAAM,GAAG;EACpBC,cAAc,EAAEC,MAAM,CAAC,gBAAgB,CAAC;EACxCC,eAAe,EAAED,MAAM,CAAC,iBAAiB,CAAC;EAC1CE,SAAS,EAAEF,MAAM,CAAC,WAAW,CAAC;EAC9BG,WAAW,EAAEH,MAAM,CAAC,aAAa,CAAC;EAClCI,cAAc,EAAEJ,MAAM,CAAC,gBAAgB,CAAC;EACxCK,eAAe,EAAEL,MAAM,CAAC,iBAAiB,CAAC;EAC1CM,uBAAuB,EAAEN,MAAM,CAAC,yBAAyB;CACjD;AAuBV;AACA,MAAMO,QAAQ,GAAGP,MAAM,CAAC,SAAS,CAAC;AAElC;;;;;;;AAOA,MAAsBQ,iBAAiB;EAiBrCC,cAA0C;IAAA,IAA9BC,8EAA4B,EAAE;;IACxC,IAAI,CAACC,YAAY,GAAG,oBAAS,EAC3B,CACEC,MAAc,EACdC,OAAkC,EAClCC,QAAwC,KACtC;MACF,IAAI,CAACC,OAAO,CAACH,MAAM,EAAEC,OAAO,EAAEC,QAAe,CAAC;IAChD,CAAC,CACF;IAED,IAAI,CAACE,cAAc,GAAG,IAAI,CAACC,SAAS,CAACnB,cAAM,CAACG,eAAe,CAAC,GACxDiB,gCAAc,CAACC,OAAO,GACtB,sCAAc,CAACC,WAAW,CAACV,OAAO,CAAC,mCAAIQ,gCAAc,CAACC,OAAO;IAEjE;IACA,IAAI,CAACE,WAAW,GAAG,6BAAkB,EAACX,OAAO,CAAC;IAE9C,IAAI,CAACH,QAAQ,CAAC,GAAGG,OAAO,CAACG,OAAO,IAAI,IAAI,GAAGH,OAAO,CAACG,OAAO,GAAGS,SAAS;IAEtE,IAAI,CAACZ,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACa,kBAAkB,GAAG,CAAC,CAACb,OAAO,CAACa,kBAAkB;IACtD,IAAI,CAACC,iBAAiB,GAAG,KAAK;EAChC;EAQAP,SAAS,CAACQ,MAAc;IACtB,MAAMC,IAAI,GAAG,IAAI,CAACjB,WAAmC;IACrD,IAAIiB,IAAI,CAACC,OAAO,IAAI,IAAI,EAAE;MACxB,OAAO,KAAK;;IAGd,OAAOD,IAAI,CAACC,OAAO,CAACC,GAAG,CAACH,MAAM,CAAC;EACjC;EAEA,IAAIZ,OAAO;IACT,OAAO,IAAI,CAACN,QAAQ,CAAC;EACvB;EAEAsB,YAAY;IACV,IAAI,CAACtB,QAAQ,CAAC,GAAGe,SAAS;EAC5B;EAEA,IAAIQ,YAAY;IACd,OAAO,IAAI;EACb;EAEA,IAAIC,aAAa;IACf,OAAO,IAAI;EACb;;AAvEFjC;AA0EA,SAAgBkC,aAAa,CAC3BC,SAA+B,EAC/BN,OAAwC;EAExC,IAAI,CAACO,KAAK,CAACC,OAAO,CAACR,OAAO,CAAC,IAAI,EAAEA,OAAO,YAAYS,GAAG,CAAC,EAAE;IACxDT,OAAO,GAAG,CAACA,OAAO,CAAC;;EAGrBA,OAAO,GAAG,IAAIS,GAAG,CAACT,OAAO,CAAC;EAC1BU,MAAM,CAACC,cAAc,CAACL,SAAS,EAAE,SAAS,EAAE;IAC1CM,KAAK,EAAEZ,OAAO;IACda,QAAQ,EAAE;GACX,CAAC;EAEF,OAAOb,OAAO;AAChB;AAfA7B","names":["exports","READ_OPERATION","Symbol","WRITE_OPERATION","RETRYABLE","EXPLAINABLE","SKIP_COLLATION","CURSOR_CREATING","MUST_SELECT_SAME_SERVER","kSession","AbstractOperation","constructor","options","executeAsync","server","session","callback","execute","readPreference","hasAspect","read_preference_1","primary","fromOptions","bsonOptions","undefined","bypassPinningCheck","trySecondaryWrite","aspect","ctor","aspects","has","clearSession","canRetryRead","canRetryWrite","defineAspects","operation","Array","isArray","Set","Object","defineProperty","value","writable"],"sources":["C:\\Users\\91930\\Desktop\\Github projects\\Pharmacy Demo\\back-end\\node_modules\\mongoose\\node_modules\\mongodb\\src\\operations\\operation.ts"],"sourcesContent":["import { promisify } from 'util';\r\n\r\nimport { BSONSerializeOptions, Document, resolveBSONOptions } from '../bson';\r\nimport { ReadPreference, ReadPreferenceLike } from '../read_preference';\r\nimport type { Server } from '../sdam/server';\r\nimport type { ClientSession } from '../sessions';\r\nimport type { Callback, MongoDBNamespace } from '../utils';\r\n\r\nexport const Aspect = {\r\n  READ_OPERATION: Symbol('READ_OPERATION'),\r\n  WRITE_OPERATION: Symbol('WRITE_OPERATION'),\r\n  RETRYABLE: Symbol('RETRYABLE'),\r\n  EXPLAINABLE: Symbol('EXPLAINABLE'),\r\n  SKIP_COLLATION: Symbol('SKIP_COLLATION'),\r\n  CURSOR_CREATING: Symbol('CURSOR_CREATING'),\r\n  MUST_SELECT_SAME_SERVER: Symbol('MUST_SELECT_SAME_SERVER')\r\n} as const;\r\n\r\n/** @public */\r\nexport type Hint = string | Document;\r\n\r\nexport interface OperationConstructor extends Function {\r\n  aspects?: Set<symbol>;\r\n}\r\n\r\n/** @public */\r\nexport interface OperationOptions extends BSONSerializeOptions {\r\n  /** Specify ClientSession for this command */\r\n  session?: ClientSession;\r\n  willRetryWrite?: boolean;\r\n\r\n  /** The preferred read preference (ReadPreference.primary, ReadPreference.primary_preferred, ReadPreference.secondary, ReadPreference.secondary_preferred, ReadPreference.nearest). */\r\n  readPreference?: ReadPreferenceLike;\r\n\r\n  /** @internal Hints to `executeOperation` that this operation should not unpin on an ended transaction */\r\n  bypassPinningCheck?: boolean;\r\n  omitReadPreference?: boolean;\r\n}\r\n\r\n/** @internal */\r\nconst kSession = Symbol('session');\r\n\r\n/**\r\n * This class acts as a parent class for any operation and is responsible for setting this.options,\r\n * as well as setting and getting a session.\r\n * Additionally, this class implements `hasAspect`, which determines whether an operation has\r\n * a specific aspect.\r\n * @internal\r\n */\r\nexport abstract class AbstractOperation<TResult = any> {\r\n  ns!: MongoDBNamespace;\r\n  cmd!: Document;\r\n  readPreference: ReadPreference;\r\n  server!: Server;\r\n  bypassPinningCheck: boolean;\r\n  trySecondaryWrite: boolean;\r\n\r\n  // BSON serialization options\r\n  bsonOptions?: BSONSerializeOptions;\r\n\r\n  options: OperationOptions;\r\n\r\n  [kSession]: ClientSession | undefined;\r\n\r\n  executeAsync: (server: Server, session: ClientSession | undefined) => Promise<TResult>;\r\n\r\n  constructor(options: OperationOptions = {}) {\r\n    this.executeAsync = promisify(\r\n      (\r\n        server: Server,\r\n        session: ClientSession | undefined,\r\n        callback: (e: Error, r: TResult) => void\r\n      ) => {\r\n        this.execute(server, session, callback as any);\r\n      }\r\n    );\r\n\r\n    this.readPreference = this.hasAspect(Aspect.WRITE_OPERATION)\r\n      ? ReadPreference.primary\r\n      : ReadPreference.fromOptions(options) ?? ReadPreference.primary;\r\n\r\n    // Pull the BSON serialize options from the already-resolved options\r\n    this.bsonOptions = resolveBSONOptions(options);\r\n\r\n    this[kSession] = options.session != null ? options.session : undefined;\r\n\r\n    this.options = options;\r\n    this.bypassPinningCheck = !!options.bypassPinningCheck;\r\n    this.trySecondaryWrite = false;\r\n  }\r\n\r\n  abstract execute(\r\n    server: Server,\r\n    session: ClientSession | undefined,\r\n    callback: Callback<TResult>\r\n  ): void;\r\n\r\n  hasAspect(aspect: symbol): boolean {\r\n    const ctor = this.constructor as OperationConstructor;\r\n    if (ctor.aspects == null) {\r\n      return false;\r\n    }\r\n\r\n    return ctor.aspects.has(aspect);\r\n  }\r\n\r\n  get session(): ClientSession | undefined {\r\n    return this[kSession];\r\n  }\r\n\r\n  clearSession() {\r\n    this[kSession] = undefined;\r\n  }\r\n\r\n  get canRetryRead(): boolean {\r\n    return true;\r\n  }\r\n\r\n  get canRetryWrite(): boolean {\r\n    return true;\r\n  }\r\n}\r\n\r\nexport function defineAspects(\r\n  operation: OperationConstructor,\r\n  aspects: symbol | symbol[] | Set<symbol>\r\n): Set<symbol> {\r\n  if (!Array.isArray(aspects) && !(aspects instanceof Set)) {\r\n    aspects = [aspects];\r\n  }\r\n\r\n  aspects = new Set(aspects);\r\n  Object.defineProperty(operation, 'aspects', {\r\n    value: aspects,\r\n    writable: false\r\n  });\r\n\r\n  return aspects;\r\n}\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}