{"ast":null,"code":"import { RETRY_MODES } from \"./config\";\nimport { DefaultRateLimiter } from \"./DefaultRateLimiter\";\nimport { StandardRetryStrategy } from \"./StandardRetryStrategy\";\nexport class AdaptiveRetryStrategy {\n  constructor(maxAttemptsProvider, options) {\n    this.maxAttemptsProvider = maxAttemptsProvider;\n    this.mode = RETRY_MODES.ADAPTIVE;\n    const {\n      rateLimiter\n    } = options ?? {};\n    this.rateLimiter = rateLimiter ?? new DefaultRateLimiter();\n    this.standardRetryStrategy = new StandardRetryStrategy(maxAttemptsProvider);\n  }\n  async acquireInitialRetryToken(retryTokenScope) {\n    await this.rateLimiter.getSendToken();\n    return this.standardRetryStrategy.acquireInitialRetryToken(retryTokenScope);\n  }\n  async refreshRetryTokenForRetry(tokenToRenew, errorInfo) {\n    this.rateLimiter.updateClientSendingRate(errorInfo);\n    return this.standardRetryStrategy.refreshRetryTokenForRetry(tokenToRenew, errorInfo);\n  }\n  recordSuccess(token) {\n    this.rateLimiter.updateClientSendingRate({});\n    this.standardRetryStrategy.recordSuccess(token);\n  }\n}","map":{"version":3,"names":["RETRY_MODES","DefaultRateLimiter","StandardRetryStrategy","AdaptiveRetryStrategy","constructor","maxAttemptsProvider","options","mode","ADAPTIVE","rateLimiter","standardRetryStrategy","acquireInitialRetryToken","retryTokenScope","getSendToken","refreshRetryTokenForRetry","tokenToRenew","errorInfo","updateClientSendingRate","recordSuccess","token"],"sources":["C:/Users/91930/Desktop/Github projects/Pharmacy Demo/back-end/node_modules/@aws-sdk/util-retry/dist-es/AdaptiveRetryStrategy.js"],"sourcesContent":["import { RETRY_MODES } from \"./config\";\r\nimport { DefaultRateLimiter } from \"./DefaultRateLimiter\";\r\nimport { StandardRetryStrategy } from \"./StandardRetryStrategy\";\r\nexport class AdaptiveRetryStrategy {\r\n    constructor(maxAttemptsProvider, options) {\r\n        this.maxAttemptsProvider = maxAttemptsProvider;\r\n        this.mode = RETRY_MODES.ADAPTIVE;\r\n        const { rateLimiter } = options ?? {};\r\n        this.rateLimiter = rateLimiter ?? new DefaultRateLimiter();\r\n        this.standardRetryStrategy = new StandardRetryStrategy(maxAttemptsProvider);\r\n    }\r\n    async acquireInitialRetryToken(retryTokenScope) {\r\n        await this.rateLimiter.getSendToken();\r\n        return this.standardRetryStrategy.acquireInitialRetryToken(retryTokenScope);\r\n    }\r\n    async refreshRetryTokenForRetry(tokenToRenew, errorInfo) {\r\n        this.rateLimiter.updateClientSendingRate(errorInfo);\r\n        return this.standardRetryStrategy.refreshRetryTokenForRetry(tokenToRenew, errorInfo);\r\n    }\r\n    recordSuccess(token) {\r\n        this.rateLimiter.updateClientSendingRate({});\r\n        this.standardRetryStrategy.recordSuccess(token);\r\n    }\r\n}\r\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,UAAU;AACtC,SAASC,kBAAkB,QAAQ,sBAAsB;AACzD,SAASC,qBAAqB,QAAQ,yBAAyB;AAC/D,OAAO,MAAMC,qBAAqB,CAAC;EAC/BC,WAAW,CAACC,mBAAmB,EAAEC,OAAO,EAAE;IACtC,IAAI,CAACD,mBAAmB,GAAGA,mBAAmB;IAC9C,IAAI,CAACE,IAAI,GAAGP,WAAW,CAACQ,QAAQ;IAChC,MAAM;MAAEC;IAAY,CAAC,GAAGH,OAAO,IAAI,CAAC,CAAC;IACrC,IAAI,CAACG,WAAW,GAAGA,WAAW,IAAI,IAAIR,kBAAkB,EAAE;IAC1D,IAAI,CAACS,qBAAqB,GAAG,IAAIR,qBAAqB,CAACG,mBAAmB,CAAC;EAC/E;EACA,MAAMM,wBAAwB,CAACC,eAAe,EAAE;IAC5C,MAAM,IAAI,CAACH,WAAW,CAACI,YAAY,EAAE;IACrC,OAAO,IAAI,CAACH,qBAAqB,CAACC,wBAAwB,CAACC,eAAe,CAAC;EAC/E;EACA,MAAME,yBAAyB,CAACC,YAAY,EAAEC,SAAS,EAAE;IACrD,IAAI,CAACP,WAAW,CAACQ,uBAAuB,CAACD,SAAS,CAAC;IACnD,OAAO,IAAI,CAACN,qBAAqB,CAACI,yBAAyB,CAACC,YAAY,EAAEC,SAAS,CAAC;EACxF;EACAE,aAAa,CAACC,KAAK,EAAE;IACjB,IAAI,CAACV,WAAW,CAACQ,uBAAuB,CAAC,CAAC,CAAC,CAAC;IAC5C,IAAI,CAACP,qBAAqB,CAACQ,aAAa,CAACC,KAAK,CAAC;EACnD;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}