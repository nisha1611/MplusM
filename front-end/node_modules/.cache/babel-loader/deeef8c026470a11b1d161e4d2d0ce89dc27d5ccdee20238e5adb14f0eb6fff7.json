{"ast":null,"code":"'use strict';\n\n/*!\r\n * Module dependencies.\r\n */\nconst CastError = require('../error/cast');\nconst SchemaType = require('../schematype');\nconst castBoolean = require('../cast/boolean');\nconst utils = require('../utils');\n\n/**\r\n * Boolean SchemaType constructor.\r\n *\r\n * @param {String} path\r\n * @param {Object} options\r\n * @inherits SchemaType\r\n * @api public\r\n */\n\nfunction SchemaBoolean(path, options) {\n  SchemaType.call(this, path, options, 'Boolean');\n}\n\n/**\r\n * This schema type's name, to defend against minifiers that mangle\r\n * function names.\r\n *\r\n * @api public\r\n */\nSchemaBoolean.schemaName = 'Boolean';\nSchemaBoolean.defaultOptions = {};\n\n/*!\r\n * Inherits from SchemaType.\r\n */\nSchemaBoolean.prototype = Object.create(SchemaType.prototype);\nSchemaBoolean.prototype.constructor = SchemaBoolean;\n\n/*!\r\n * ignore\r\n */\n\nSchemaBoolean._cast = castBoolean;\n\n/**\r\n * Sets a default option for all Boolean instances.\r\n *\r\n * #### Example:\r\n *\r\n *     // Make all booleans have `default` of false.\r\n *     mongoose.Schema.Boolean.set('default', false);\r\n *\r\n *     const Order = mongoose.model('Order', new Schema({ isPaid: Boolean }));\r\n *     new Order({ }).isPaid; // false\r\n *\r\n * @param {String} option The option you'd like to set the value for\r\n * @param {Any} value value for option\r\n * @return {undefined}\r\n * @function set\r\n * @static\r\n * @api public\r\n */\n\nSchemaBoolean.set = SchemaType.set;\n\n/**\r\n * Get/set the function used to cast arbitrary values to booleans.\r\n *\r\n * #### Example:\r\n *\r\n *     // Make Mongoose cast empty string '' to false.\r\n *     const original = mongoose.Schema.Boolean.cast();\r\n *     mongoose.Schema.Boolean.cast(v => {\r\n *       if (v === '') {\r\n *         return false;\r\n *       }\r\n *       return original(v);\r\n *     });\r\n *\r\n *     // Or disable casting entirely\r\n *     mongoose.Schema.Boolean.cast(false);\r\n *\r\n * @param {Function} caster\r\n * @return {Function}\r\n * @function get\r\n * @static\r\n * @api public\r\n */\n\nSchemaBoolean.cast = function cast(caster) {\n  if (arguments.length === 0) {\n    return this._cast;\n  }\n  if (caster === false) {\n    caster = this._defaultCaster;\n  }\n  this._cast = caster;\n  return this._cast;\n};\n\n/*!\r\n * ignore\r\n */\n\nSchemaBoolean._defaultCaster = v => {\n  if (v != null && typeof v !== 'boolean') {\n    throw new Error();\n  }\n  return v;\n};\n\n/*!\r\n * ignore\r\n */\n\nSchemaBoolean._checkRequired = v => v === true || v === false;\n\n/**\r\n * Override the function the required validator uses to check whether a boolean\r\n * passes the `required` check.\r\n *\r\n * @param {Function} fn\r\n * @return {Function}\r\n * @function checkRequired\r\n * @static\r\n * @api public\r\n */\n\nSchemaBoolean.checkRequired = SchemaType.checkRequired;\n\n/**\r\n * Check if the given value satisfies a required validator. For a boolean\r\n * to satisfy a required validator, it must be strictly equal to true or to\r\n * false.\r\n *\r\n * @param {Any} value\r\n * @return {Boolean}\r\n * @api public\r\n */\n\nSchemaBoolean.prototype.checkRequired = function (value) {\n  return this.constructor._checkRequired(value);\n};\n\n/**\r\n * Configure which values get casted to `true`.\r\n *\r\n * #### Example:\r\n *\r\n *     const M = mongoose.model('Test', new Schema({ b: Boolean }));\r\n *     new M({ b: 'affirmative' }).b; // undefined\r\n *     mongoose.Schema.Boolean.convertToTrue.add('affirmative');\r\n *     new M({ b: 'affirmative' }).b; // true\r\n *\r\n * @property convertToTrue\r\n * @type {Set}\r\n * @api public\r\n */\n\nObject.defineProperty(SchemaBoolean, 'convertToTrue', {\n  get: () => castBoolean.convertToTrue,\n  set: v => {\n    castBoolean.convertToTrue = v;\n  }\n});\n\n/**\r\n * Configure which values get casted to `false`.\r\n *\r\n * #### Example:\r\n *\r\n *     const M = mongoose.model('Test', new Schema({ b: Boolean }));\r\n *     new M({ b: 'nay' }).b; // undefined\r\n *     mongoose.Schema.Types.Boolean.convertToFalse.add('nay');\r\n *     new M({ b: 'nay' }).b; // false\r\n *\r\n * @property convertToFalse\r\n * @type {Set}\r\n * @api public\r\n */\n\nObject.defineProperty(SchemaBoolean, 'convertToFalse', {\n  get: () => castBoolean.convertToFalse,\n  set: v => {\n    castBoolean.convertToFalse = v;\n  }\n});\n\n/**\r\n * Casts to boolean\r\n *\r\n * @param {Object} value\r\n * @param {Object} model this value is optional\r\n * @api private\r\n */\n\nSchemaBoolean.prototype.cast = function (value) {\n  let castBoolean;\n  if (typeof this._castFunction === 'function') {\n    castBoolean = this._castFunction;\n  } else if (typeof this.constructor.cast === 'function') {\n    castBoolean = this.constructor.cast();\n  } else {\n    castBoolean = SchemaBoolean.cast();\n  }\n  try {\n    return castBoolean(value);\n  } catch (error) {\n    throw new CastError('Boolean', value, this.path, error, this);\n  }\n};\nSchemaBoolean.$conditionalHandlers = utils.options(SchemaType.prototype.$conditionalHandlers, {});\n\n/**\r\n * Casts contents for queries.\r\n *\r\n * @param {String} $conditional\r\n * @param {any} val\r\n * @api private\r\n */\n\nSchemaBoolean.prototype.castForQuery = function ($conditional, val) {\n  let handler;\n  if (arguments.length === 2) {\n    handler = SchemaBoolean.$conditionalHandlers[$conditional];\n    if (handler) {\n      return handler.call(this, val);\n    }\n    return this._castForQuery(val);\n  }\n  return this._castForQuery($conditional);\n};\n\n/**\r\n *\r\n * @api private\r\n */\n\nSchemaBoolean.prototype._castNullish = function _castNullish(v) {\n  if (typeof v === 'undefined') {\n    return v;\n  }\n  const castBoolean = typeof this.constructor.cast === 'function' ? this.constructor.cast() : SchemaBoolean.cast();\n  if (castBoolean == null) {\n    return v;\n  }\n  if (castBoolean.convertToFalse instanceof Set && castBoolean.convertToFalse.has(v)) {\n    return false;\n  }\n  if (castBoolean.convertToTrue instanceof Set && castBoolean.convertToTrue.has(v)) {\n    return true;\n  }\n  return v;\n};\n\n/*!\r\n * Module exports.\r\n */\n\nmodule.exports = SchemaBoolean;","map":{"version":3,"names":["CastError","require","SchemaType","castBoolean","utils","SchemaBoolean","path","options","call","schemaName","defaultOptions","prototype","Object","create","constructor","_cast","set","cast","caster","arguments","length","_defaultCaster","v","Error","_checkRequired","checkRequired","value","defineProperty","get","convertToTrue","convertToFalse","_castFunction","error","$conditionalHandlers","castForQuery","$conditional","val","handler","_castForQuery","_castNullish","Set","has","module","exports"],"sources":["C:/Users/91930/Desktop/Github projects/Pharmacy Demo/back-end/node_modules/mongoose/lib/schema/boolean.js"],"sourcesContent":["'use strict';\r\n\r\n/*!\r\n * Module dependencies.\r\n */\r\n\r\nconst CastError = require('../error/cast');\r\nconst SchemaType = require('../schematype');\r\nconst castBoolean = require('../cast/boolean');\r\nconst utils = require('../utils');\r\n\r\n/**\r\n * Boolean SchemaType constructor.\r\n *\r\n * @param {String} path\r\n * @param {Object} options\r\n * @inherits SchemaType\r\n * @api public\r\n */\r\n\r\nfunction SchemaBoolean(path, options) {\r\n  SchemaType.call(this, path, options, 'Boolean');\r\n}\r\n\r\n/**\r\n * This schema type's name, to defend against minifiers that mangle\r\n * function names.\r\n *\r\n * @api public\r\n */\r\nSchemaBoolean.schemaName = 'Boolean';\r\n\r\nSchemaBoolean.defaultOptions = {};\r\n\r\n/*!\r\n * Inherits from SchemaType.\r\n */\r\nSchemaBoolean.prototype = Object.create(SchemaType.prototype);\r\nSchemaBoolean.prototype.constructor = SchemaBoolean;\r\n\r\n/*!\r\n * ignore\r\n */\r\n\r\nSchemaBoolean._cast = castBoolean;\r\n\r\n/**\r\n * Sets a default option for all Boolean instances.\r\n *\r\n * #### Example:\r\n *\r\n *     // Make all booleans have `default` of false.\r\n *     mongoose.Schema.Boolean.set('default', false);\r\n *\r\n *     const Order = mongoose.model('Order', new Schema({ isPaid: Boolean }));\r\n *     new Order({ }).isPaid; // false\r\n *\r\n * @param {String} option The option you'd like to set the value for\r\n * @param {Any} value value for option\r\n * @return {undefined}\r\n * @function set\r\n * @static\r\n * @api public\r\n */\r\n\r\nSchemaBoolean.set = SchemaType.set;\r\n\r\n/**\r\n * Get/set the function used to cast arbitrary values to booleans.\r\n *\r\n * #### Example:\r\n *\r\n *     // Make Mongoose cast empty string '' to false.\r\n *     const original = mongoose.Schema.Boolean.cast();\r\n *     mongoose.Schema.Boolean.cast(v => {\r\n *       if (v === '') {\r\n *         return false;\r\n *       }\r\n *       return original(v);\r\n *     });\r\n *\r\n *     // Or disable casting entirely\r\n *     mongoose.Schema.Boolean.cast(false);\r\n *\r\n * @param {Function} caster\r\n * @return {Function}\r\n * @function get\r\n * @static\r\n * @api public\r\n */\r\n\r\nSchemaBoolean.cast = function cast(caster) {\r\n  if (arguments.length === 0) {\r\n    return this._cast;\r\n  }\r\n  if (caster === false) {\r\n    caster = this._defaultCaster;\r\n  }\r\n  this._cast = caster;\r\n\r\n  return this._cast;\r\n};\r\n\r\n/*!\r\n * ignore\r\n */\r\n\r\nSchemaBoolean._defaultCaster = v => {\r\n  if (v != null && typeof v !== 'boolean') {\r\n    throw new Error();\r\n  }\r\n  return v;\r\n};\r\n\r\n/*!\r\n * ignore\r\n */\r\n\r\nSchemaBoolean._checkRequired = v => v === true || v === false;\r\n\r\n/**\r\n * Override the function the required validator uses to check whether a boolean\r\n * passes the `required` check.\r\n *\r\n * @param {Function} fn\r\n * @return {Function}\r\n * @function checkRequired\r\n * @static\r\n * @api public\r\n */\r\n\r\nSchemaBoolean.checkRequired = SchemaType.checkRequired;\r\n\r\n/**\r\n * Check if the given value satisfies a required validator. For a boolean\r\n * to satisfy a required validator, it must be strictly equal to true or to\r\n * false.\r\n *\r\n * @param {Any} value\r\n * @return {Boolean}\r\n * @api public\r\n */\r\n\r\nSchemaBoolean.prototype.checkRequired = function(value) {\r\n  return this.constructor._checkRequired(value);\r\n};\r\n\r\n/**\r\n * Configure which values get casted to `true`.\r\n *\r\n * #### Example:\r\n *\r\n *     const M = mongoose.model('Test', new Schema({ b: Boolean }));\r\n *     new M({ b: 'affirmative' }).b; // undefined\r\n *     mongoose.Schema.Boolean.convertToTrue.add('affirmative');\r\n *     new M({ b: 'affirmative' }).b; // true\r\n *\r\n * @property convertToTrue\r\n * @type {Set}\r\n * @api public\r\n */\r\n\r\nObject.defineProperty(SchemaBoolean, 'convertToTrue', {\r\n  get: () => castBoolean.convertToTrue,\r\n  set: v => { castBoolean.convertToTrue = v; }\r\n});\r\n\r\n/**\r\n * Configure which values get casted to `false`.\r\n *\r\n * #### Example:\r\n *\r\n *     const M = mongoose.model('Test', new Schema({ b: Boolean }));\r\n *     new M({ b: 'nay' }).b; // undefined\r\n *     mongoose.Schema.Types.Boolean.convertToFalse.add('nay');\r\n *     new M({ b: 'nay' }).b; // false\r\n *\r\n * @property convertToFalse\r\n * @type {Set}\r\n * @api public\r\n */\r\n\r\nObject.defineProperty(SchemaBoolean, 'convertToFalse', {\r\n  get: () => castBoolean.convertToFalse,\r\n  set: v => { castBoolean.convertToFalse = v; }\r\n});\r\n\r\n/**\r\n * Casts to boolean\r\n *\r\n * @param {Object} value\r\n * @param {Object} model this value is optional\r\n * @api private\r\n */\r\n\r\nSchemaBoolean.prototype.cast = function(value) {\r\n  let castBoolean;\r\n  if (typeof this._castFunction === 'function') {\r\n    castBoolean = this._castFunction;\r\n  } else if (typeof this.constructor.cast === 'function') {\r\n    castBoolean = this.constructor.cast();\r\n  } else {\r\n    castBoolean = SchemaBoolean.cast();\r\n  }\r\n\r\n  try {\r\n    return castBoolean(value);\r\n  } catch (error) {\r\n    throw new CastError('Boolean', value, this.path, error, this);\r\n  }\r\n};\r\n\r\nSchemaBoolean.$conditionalHandlers =\r\n    utils.options(SchemaType.prototype.$conditionalHandlers, {});\r\n\r\n/**\r\n * Casts contents for queries.\r\n *\r\n * @param {String} $conditional\r\n * @param {any} val\r\n * @api private\r\n */\r\n\r\nSchemaBoolean.prototype.castForQuery = function($conditional, val) {\r\n  let handler;\r\n  if (arguments.length === 2) {\r\n    handler = SchemaBoolean.$conditionalHandlers[$conditional];\r\n\r\n    if (handler) {\r\n      return handler.call(this, val);\r\n    }\r\n\r\n    return this._castForQuery(val);\r\n  }\r\n\r\n  return this._castForQuery($conditional);\r\n};\r\n\r\n/**\r\n *\r\n * @api private\r\n */\r\n\r\nSchemaBoolean.prototype._castNullish = function _castNullish(v) {\r\n  if (typeof v === 'undefined') {\r\n    return v;\r\n  }\r\n  const castBoolean = typeof this.constructor.cast === 'function' ?\r\n    this.constructor.cast() :\r\n    SchemaBoolean.cast();\r\n  if (castBoolean == null) {\r\n    return v;\r\n  }\r\n  if (castBoolean.convertToFalse instanceof Set && castBoolean.convertToFalse.has(v)) {\r\n    return false;\r\n  }\r\n  if (castBoolean.convertToTrue instanceof Set && castBoolean.convertToTrue.has(v)) {\r\n    return true;\r\n  }\r\n  return v;\r\n};\r\n\r\n/*!\r\n * Module exports.\r\n */\r\n\r\nmodule.exports = SchemaBoolean;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}