{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.fromContainerMetadata = exports.ENV_CMDS_AUTH_TOKEN = exports.ENV_CMDS_RELATIVE_URI = exports.ENV_CMDS_FULL_URI = void 0;\nconst property_provider_1 = require(\"@aws-sdk/property-provider\");\nconst url_1 = require(\"url\");\nconst httpRequest_1 = require(\"./remoteProvider/httpRequest\");\nconst ImdsCredentials_1 = require(\"./remoteProvider/ImdsCredentials\");\nconst RemoteProviderInit_1 = require(\"./remoteProvider/RemoteProviderInit\");\nconst retry_1 = require(\"./remoteProvider/retry\");\nexports.ENV_CMDS_FULL_URI = \"AWS_CONTAINER_CREDENTIALS_FULL_URI\";\nexports.ENV_CMDS_RELATIVE_URI = \"AWS_CONTAINER_CREDENTIALS_RELATIVE_URI\";\nexports.ENV_CMDS_AUTH_TOKEN = \"AWS_CONTAINER_AUTHORIZATION_TOKEN\";\nconst fromContainerMetadata = function () {\n  let init = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const {\n    timeout,\n    maxRetries\n  } = (0, RemoteProviderInit_1.providerConfigFromInit)(init);\n  return () => (0, retry_1.retry)(async () => {\n    const requestOptions = await getCmdsUri();\n    const credsResponse = JSON.parse(await requestFromEcsImds(timeout, requestOptions));\n    if (!(0, ImdsCredentials_1.isImdsCredentials)(credsResponse)) {\n      throw new property_provider_1.CredentialsProviderError(\"Invalid response received from instance metadata service.\");\n    }\n    return (0, ImdsCredentials_1.fromImdsCredentials)(credsResponse);\n  }, maxRetries);\n};\nexports.fromContainerMetadata = fromContainerMetadata;\nconst requestFromEcsImds = async (timeout, options) => {\n  if (process.env[exports.ENV_CMDS_AUTH_TOKEN]) {\n    options.headers = {\n      ...options.headers,\n      Authorization: process.env[exports.ENV_CMDS_AUTH_TOKEN]\n    };\n  }\n  const buffer = await (0, httpRequest_1.httpRequest)({\n    ...options,\n    timeout\n  });\n  return buffer.toString();\n};\nconst CMDS_IP = \"169.254.170.2\";\nconst GREENGRASS_HOSTS = {\n  localhost: true,\n  \"127.0.0.1\": true\n};\nconst GREENGRASS_PROTOCOLS = {\n  \"http:\": true,\n  \"https:\": true\n};\nconst getCmdsUri = async () => {\n  if (process.env[exports.ENV_CMDS_RELATIVE_URI]) {\n    return {\n      hostname: CMDS_IP,\n      path: process.env[exports.ENV_CMDS_RELATIVE_URI]\n    };\n  }\n  if (process.env[exports.ENV_CMDS_FULL_URI]) {\n    const parsed = (0, url_1.parse)(process.env[exports.ENV_CMDS_FULL_URI]);\n    if (!parsed.hostname || !(parsed.hostname in GREENGRASS_HOSTS)) {\n      throw new property_provider_1.CredentialsProviderError(`${parsed.hostname} is not a valid container metadata service hostname`, false);\n    }\n    if (!parsed.protocol || !(parsed.protocol in GREENGRASS_PROTOCOLS)) {\n      throw new property_provider_1.CredentialsProviderError(`${parsed.protocol} is not a valid container metadata service protocol`, false);\n    }\n    return {\n      ...parsed,\n      port: parsed.port ? parseInt(parsed.port, 10) : undefined\n    };\n  }\n  throw new property_provider_1.CredentialsProviderError(\"The container metadata credential provider cannot be used unless\" + ` the ${exports.ENV_CMDS_RELATIVE_URI} or ${exports.ENV_CMDS_FULL_URI} environment` + \" variable is set\", false);\n};","map":{"version":3,"names":["Object","defineProperty","exports","value","fromContainerMetadata","ENV_CMDS_AUTH_TOKEN","ENV_CMDS_RELATIVE_URI","ENV_CMDS_FULL_URI","property_provider_1","require","url_1","httpRequest_1","ImdsCredentials_1","RemoteProviderInit_1","retry_1","init","timeout","maxRetries","providerConfigFromInit","retry","requestOptions","getCmdsUri","credsResponse","JSON","parse","requestFromEcsImds","isImdsCredentials","CredentialsProviderError","fromImdsCredentials","options","process","env","headers","Authorization","buffer","httpRequest","toString","CMDS_IP","GREENGRASS_HOSTS","localhost","GREENGRASS_PROTOCOLS","hostname","path","parsed","protocol","port","parseInt","undefined"],"sources":["C:/Users/91930/Desktop/Github projects/Pharmacy Demo/back-end/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/fromContainerMetadata.js"],"sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.fromContainerMetadata = exports.ENV_CMDS_AUTH_TOKEN = exports.ENV_CMDS_RELATIVE_URI = exports.ENV_CMDS_FULL_URI = void 0;\r\nconst property_provider_1 = require(\"@aws-sdk/property-provider\");\r\nconst url_1 = require(\"url\");\r\nconst httpRequest_1 = require(\"./remoteProvider/httpRequest\");\r\nconst ImdsCredentials_1 = require(\"./remoteProvider/ImdsCredentials\");\r\nconst RemoteProviderInit_1 = require(\"./remoteProvider/RemoteProviderInit\");\r\nconst retry_1 = require(\"./remoteProvider/retry\");\r\nexports.ENV_CMDS_FULL_URI = \"AWS_CONTAINER_CREDENTIALS_FULL_URI\";\r\nexports.ENV_CMDS_RELATIVE_URI = \"AWS_CONTAINER_CREDENTIALS_RELATIVE_URI\";\r\nexports.ENV_CMDS_AUTH_TOKEN = \"AWS_CONTAINER_AUTHORIZATION_TOKEN\";\r\nconst fromContainerMetadata = (init = {}) => {\r\n    const { timeout, maxRetries } = (0, RemoteProviderInit_1.providerConfigFromInit)(init);\r\n    return () => (0, retry_1.retry)(async () => {\r\n        const requestOptions = await getCmdsUri();\r\n        const credsResponse = JSON.parse(await requestFromEcsImds(timeout, requestOptions));\r\n        if (!(0, ImdsCredentials_1.isImdsCredentials)(credsResponse)) {\r\n            throw new property_provider_1.CredentialsProviderError(\"Invalid response received from instance metadata service.\");\r\n        }\r\n        return (0, ImdsCredentials_1.fromImdsCredentials)(credsResponse);\r\n    }, maxRetries);\r\n};\r\nexports.fromContainerMetadata = fromContainerMetadata;\r\nconst requestFromEcsImds = async (timeout, options) => {\r\n    if (process.env[exports.ENV_CMDS_AUTH_TOKEN]) {\r\n        options.headers = {\r\n            ...options.headers,\r\n            Authorization: process.env[exports.ENV_CMDS_AUTH_TOKEN],\r\n        };\r\n    }\r\n    const buffer = await (0, httpRequest_1.httpRequest)({\r\n        ...options,\r\n        timeout,\r\n    });\r\n    return buffer.toString();\r\n};\r\nconst CMDS_IP = \"169.254.170.2\";\r\nconst GREENGRASS_HOSTS = {\r\n    localhost: true,\r\n    \"127.0.0.1\": true,\r\n};\r\nconst GREENGRASS_PROTOCOLS = {\r\n    \"http:\": true,\r\n    \"https:\": true,\r\n};\r\nconst getCmdsUri = async () => {\r\n    if (process.env[exports.ENV_CMDS_RELATIVE_URI]) {\r\n        return {\r\n            hostname: CMDS_IP,\r\n            path: process.env[exports.ENV_CMDS_RELATIVE_URI],\r\n        };\r\n    }\r\n    if (process.env[exports.ENV_CMDS_FULL_URI]) {\r\n        const parsed = (0, url_1.parse)(process.env[exports.ENV_CMDS_FULL_URI]);\r\n        if (!parsed.hostname || !(parsed.hostname in GREENGRASS_HOSTS)) {\r\n            throw new property_provider_1.CredentialsProviderError(`${parsed.hostname} is not a valid container metadata service hostname`, false);\r\n        }\r\n        if (!parsed.protocol || !(parsed.protocol in GREENGRASS_PROTOCOLS)) {\r\n            throw new property_provider_1.CredentialsProviderError(`${parsed.protocol} is not a valid container metadata service protocol`, false);\r\n        }\r\n        return {\r\n            ...parsed,\r\n            port: parsed.port ? parseInt(parsed.port, 10) : undefined,\r\n        };\r\n    }\r\n    throw new property_provider_1.CredentialsProviderError(\"The container metadata credential provider cannot be used unless\" +\r\n        ` the ${exports.ENV_CMDS_RELATIVE_URI} or ${exports.ENV_CMDS_FULL_URI} environment` +\r\n        \" variable is set\", false);\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}