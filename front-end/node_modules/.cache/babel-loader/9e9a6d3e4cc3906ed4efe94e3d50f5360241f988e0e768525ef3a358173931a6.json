{"ast":null,"code":"'use strict';\n\nconst assert = require('assert');\nconst {\n  randomFillSync\n} = require('crypto');\nconst {\n  inspect\n} = require('util');\nconst busboy = require('..');\nconst {\n  mustCall\n} = require('./common.js');\nconst BOUNDARY = 'u2KxIV5yF1y+xUspOQCCZopaVgeV6Jxihv35XQJmuTx8X3sh';\nfunction formDataSection(key, value) {\n  return Buffer.from(`\\r\\n--${BOUNDARY}` + `\\r\\nContent-Disposition: form-data; name=\"${key}\"` + `\\r\\n\\r\\n${value}`);\n}\nfunction formDataFile(key, filename, contentType) {\n  const buf = Buffer.allocUnsafe(100000);\n  return Buffer.concat([Buffer.from(`\\r\\n--${BOUNDARY}\\r\\n`), Buffer.from(`Content-Disposition: form-data; name=\"${key}\"` + `; filename=\"${filename}\"\\r\\n`), Buffer.from(`Content-Type: ${contentType}\\r\\n\\r\\n`), randomFillSync(buf)]);\n}\nconst reqChunks = [Buffer.concat([formDataFile('file', 'file.bin', 'application/octet-stream'), formDataSection('foo', 'foo value')]), formDataSection('bar', 'bar value'), Buffer.from(`\\r\\n--${BOUNDARY}--\\r\\n`)];\nconst bb = busboy({\n  headers: {\n    'content-type': `multipart/form-data; boundary=${BOUNDARY}`\n  }\n});\nconst expected = [{\n  type: 'file',\n  name: 'file',\n  info: {\n    filename: 'file.bin',\n    encoding: '7bit',\n    mimeType: 'application/octet-stream'\n  }\n}, {\n  type: 'field',\n  name: 'foo',\n  val: 'foo value',\n  info: {\n    nameTruncated: false,\n    valueTruncated: false,\n    encoding: '7bit',\n    mimeType: 'text/plain'\n  }\n}, {\n  type: 'field',\n  name: 'bar',\n  val: 'bar value',\n  info: {\n    nameTruncated: false,\n    valueTruncated: false,\n    encoding: '7bit',\n    mimeType: 'text/plain'\n  }\n}];\nconst results = [];\nbb.on('field', (name, val, info) => {\n  results.push({\n    type: 'field',\n    name,\n    val,\n    info\n  });\n});\nbb.on('file', (name, stream, info) => {\n  results.push({\n    type: 'file',\n    name,\n    info\n  });\n  // Simulate a pipe where the destination is pausing (perhaps due to waiting\n  // for file system write to finish)\n  setTimeout(() => {\n    stream.resume();\n  }, 10);\n});\nbb.on('close', mustCall(() => {\n  assert.deepStrictEqual(results, expected, 'Results mismatch.\\n' + `Parsed: ${inspect(results)}\\n` + `Expected: ${inspect(expected)}`);\n}));\nfor (const chunk of reqChunks) bb.write(chunk);\nbb.end();","map":{"version":3,"names":["assert","require","randomFillSync","inspect","busboy","mustCall","BOUNDARY","formDataSection","key","value","Buffer","from","formDataFile","filename","contentType","buf","allocUnsafe","concat","reqChunks","bb","headers","expected","type","name","info","encoding","mimeType","val","nameTruncated","valueTruncated","results","on","push","stream","setTimeout","resume","deepStrictEqual","chunk","write","end"],"sources":["C:/Users/91930/Desktop/Github projects/Pharmacy Demo/back-end/node_modules/busboy/test/test-types-multipart-stream-pause.js"],"sourcesContent":["'use strict';\n\nconst assert = require('assert');\nconst { randomFillSync } = require('crypto');\nconst { inspect } = require('util');\n\nconst busboy = require('..');\n\nconst { mustCall } = require('./common.js');\n\nconst BOUNDARY = 'u2KxIV5yF1y+xUspOQCCZopaVgeV6Jxihv35XQJmuTx8X3sh';\n\nfunction formDataSection(key, value) {\n  return Buffer.from(\n    `\\r\\n--${BOUNDARY}`\n      + `\\r\\nContent-Disposition: form-data; name=\"${key}\"`\n      + `\\r\\n\\r\\n${value}`\n  );\n}\n\nfunction formDataFile(key, filename, contentType) {\n  const buf = Buffer.allocUnsafe(100000);\n  return Buffer.concat([\n    Buffer.from(`\\r\\n--${BOUNDARY}\\r\\n`),\n    Buffer.from(`Content-Disposition: form-data; name=\"${key}\"`\n                  + `; filename=\"${filename}\"\\r\\n`),\n    Buffer.from(`Content-Type: ${contentType}\\r\\n\\r\\n`),\n    randomFillSync(buf)\n  ]);\n}\n\nconst reqChunks = [\n  Buffer.concat([\n    formDataFile('file', 'file.bin', 'application/octet-stream'),\n    formDataSection('foo', 'foo value'),\n  ]),\n  formDataSection('bar', 'bar value'),\n  Buffer.from(`\\r\\n--${BOUNDARY}--\\r\\n`)\n];\nconst bb = busboy({\n  headers: {\n    'content-type': `multipart/form-data; boundary=${BOUNDARY}`\n  }\n});\nconst expected = [\n  { type: 'file',\n    name: 'file',\n    info: {\n      filename: 'file.bin',\n      encoding: '7bit',\n      mimeType: 'application/octet-stream',\n    },\n  },\n  { type: 'field',\n    name: 'foo',\n    val: 'foo value',\n    info: {\n      nameTruncated: false,\n      valueTruncated: false,\n      encoding: '7bit',\n      mimeType: 'text/plain',\n    },\n  },\n  { type: 'field',\n    name: 'bar',\n    val: 'bar value',\n    info: {\n      nameTruncated: false,\n      valueTruncated: false,\n      encoding: '7bit',\n      mimeType: 'text/plain',\n    },\n  },\n];\nconst results = [];\n\nbb.on('field', (name, val, info) => {\n  results.push({ type: 'field', name, val, info });\n});\n\nbb.on('file', (name, stream, info) => {\n  results.push({ type: 'file', name, info });\n  // Simulate a pipe where the destination is pausing (perhaps due to waiting\n  // for file system write to finish)\n  setTimeout(() => {\n    stream.resume();\n  }, 10);\n});\n\nbb.on('close', mustCall(() => {\n  assert.deepStrictEqual(\n    results,\n    expected,\n    'Results mismatch.\\n'\n      + `Parsed: ${inspect(results)}\\n`\n      + `Expected: ${inspect(expected)}`\n  );\n}));\n\nfor (const chunk of reqChunks)\n  bb.write(chunk);\nbb.end();\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}