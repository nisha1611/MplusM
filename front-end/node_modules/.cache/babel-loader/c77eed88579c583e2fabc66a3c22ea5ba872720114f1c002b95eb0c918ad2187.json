{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Int32 = void 0;\n/**\r\n * A class representation of a BSON Int32 type.\r\n * @public\r\n * @category BSONType\r\n */\nvar Int32 = /** @class */function () {\n  /**\r\n   * Create an Int32 type\r\n   *\r\n   * @param value - the number we want to represent as an int32.\r\n   */\n  function Int32(value) {\n    if (!(this instanceof Int32)) return new Int32(value);\n    if (value instanceof Number) {\n      value = value.valueOf();\n    }\n    this.value = +value | 0;\n  }\n  /**\r\n   * Access the number value.\r\n   *\r\n   * @returns returns the wrapped int32 number.\r\n   */\n  Int32.prototype.valueOf = function () {\n    return this.value;\n  };\n  Int32.prototype.toString = function (radix) {\n    return this.value.toString(radix);\n  };\n  Int32.prototype.toJSON = function () {\n    return this.value;\n  };\n  /** @internal */\n  Int32.prototype.toExtendedJSON = function (options) {\n    if (options && (options.relaxed || options.legacy)) return this.value;\n    return {\n      $numberInt: this.value.toString()\n    };\n  };\n  /** @internal */\n  Int32.fromExtendedJSON = function (doc, options) {\n    return options && options.relaxed ? parseInt(doc.$numberInt, 10) : new Int32(doc.$numberInt);\n  };\n  /** @internal */\n  Int32.prototype[Symbol.for('nodejs.util.inspect.custom')] = function () {\n    return this.inspect();\n  };\n  Int32.prototype.inspect = function () {\n    return \"new Int32(\".concat(this.valueOf(), \")\");\n  };\n  return Int32;\n}();\nexports.Int32 = Int32;\nObject.defineProperty(Int32.prototype, '_bsontype', {\n  value: 'Int32'\n});","map":{"version":3,"mappings":";;;;;;AAOA;;;;;AAKA;EAIE;;;;;EAKA,eAAYA,KAAsB;IAChC,IAAI,EAAE,IAAI,YAAYC,KAAK,CAAC,EAAE,OAAO,IAAIA,KAAK,CAACD,KAAK,CAAC;IAErD,IAAKA,KAAiB,YAAYE,MAAM,EAAE;MACxCF,KAAK,GAAGA,KAAK,CAACG,OAAO,EAAE;;IAGzB,IAAI,CAACH,KAAK,GAAG,CAACA,KAAK,GAAG,CAAC;EACzB;EAEA;;;;;EAKAC,uBAAO,GAAP;IACE,OAAO,IAAI,CAACD,KAAK;EACnB,CAAC;EAEDC,wBAAQ,GAAR,UAASG,KAAc;IACrB,OAAO,IAAI,CAACJ,KAAK,CAACK,QAAQ,CAACD,KAAK,CAAC;EACnC,CAAC;EAEDH,sBAAM,GAAN;IACE,OAAO,IAAI,CAACD,KAAK;EACnB,CAAC;EAED;EACAC,8BAAc,GAAd,UAAeK,OAAsB;IACnC,IAAIA,OAAO,KAAKA,OAAO,CAACC,OAAO,IAAID,OAAO,CAACE,MAAM,CAAC,EAAE,OAAO,IAAI,CAACR,KAAK;IACrE,OAAO;MAAES,UAAU,EAAE,IAAI,CAACT,KAAK,CAACK,QAAQ;IAAE,CAAE;EAC9C,CAAC;EAED;EACOJ,sBAAgB,GAAvB,UAAwBS,GAAkB,EAAEJ,OAAsB;IAChE,OAAOA,OAAO,IAAIA,OAAO,CAACC,OAAO,GAAGI,QAAQ,CAACD,GAAG,CAACD,UAAU,EAAE,EAAE,CAAC,GAAG,IAAIR,KAAK,CAACS,GAAG,CAACD,UAAU,CAAC;EAC9F,CAAC;EAED;EACAR,gBAACW,MAAM,CAACC,GAAG,CAAC,4BAA4B,CAAC,CAAC,GAA1C;IACE,OAAO,IAAI,CAACC,OAAO,EAAE;EACvB,CAAC;EAEDb,uBAAO,GAAP;IACE,OAAO,oBAAa,IAAI,CAACE,OAAO,EAAE,MAAG;EACvC,CAAC;EACH,YAAC;AAAD,CAAC,EAvDD;AAAaY;AAyDbC,MAAM,CAACC,cAAc,CAAChB,KAAK,CAACiB,SAAS,EAAE,WAAW,EAAE;EAAElB,KAAK,EAAE;AAAO,CAAE,CAAC","names":["value","Int32","Number","valueOf","radix","toString","options","relaxed","legacy","$numberInt","doc","parseInt","Symbol","for","inspect","exports","Object","defineProperty","prototype"],"sources":["C:\\Users\\91930\\Desktop\\Github projects\\Pharmacy Demo\\back-end\\node_modules\\bson\\src\\int_32.ts"],"sourcesContent":["import type { EJSONOptions } from './extended_json';\r\n\r\n/** @public */\r\nexport interface Int32Extended {\r\n  $numberInt: string;\r\n}\r\n\r\n/**\r\n * A class representation of a BSON Int32 type.\r\n * @public\r\n * @category BSONType\r\n */\r\nexport class Int32 {\r\n  _bsontype!: 'Int32';\r\n\r\n  value!: number;\r\n  /**\r\n   * Create an Int32 type\r\n   *\r\n   * @param value - the number we want to represent as an int32.\r\n   */\r\n  constructor(value: number | string) {\r\n    if (!(this instanceof Int32)) return new Int32(value);\r\n\r\n    if ((value as unknown) instanceof Number) {\r\n      value = value.valueOf();\r\n    }\r\n\r\n    this.value = +value | 0;\r\n  }\r\n\r\n  /**\r\n   * Access the number value.\r\n   *\r\n   * @returns returns the wrapped int32 number.\r\n   */\r\n  valueOf(): number {\r\n    return this.value;\r\n  }\r\n\r\n  toString(radix?: number): string {\r\n    return this.value.toString(radix);\r\n  }\r\n\r\n  toJSON(): number {\r\n    return this.value;\r\n  }\r\n\r\n  /** @internal */\r\n  toExtendedJSON(options?: EJSONOptions): number | Int32Extended {\r\n    if (options && (options.relaxed || options.legacy)) return this.value;\r\n    return { $numberInt: this.value.toString() };\r\n  }\r\n\r\n  /** @internal */\r\n  static fromExtendedJSON(doc: Int32Extended, options?: EJSONOptions): number | Int32 {\r\n    return options && options.relaxed ? parseInt(doc.$numberInt, 10) : new Int32(doc.$numberInt);\r\n  }\r\n\r\n  /** @internal */\r\n  [Symbol.for('nodejs.util.inspect.custom')](): string {\r\n    return this.inspect();\r\n  }\r\n\r\n  inspect(): string {\r\n    return `new Int32(${this.valueOf()})`;\r\n  }\r\n}\r\n\r\nObject.defineProperty(Int32.prototype, '_bsontype', { value: 'Int32' });\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}