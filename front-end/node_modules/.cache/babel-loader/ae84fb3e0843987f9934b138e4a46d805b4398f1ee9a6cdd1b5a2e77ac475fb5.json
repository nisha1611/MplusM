{"ast":null,"code":"/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Tobias Koppers @sokra\r\n*/\n\n\"use strict\";\n\nconst RuntimeGlobals = require(\"../RuntimeGlobals\");\nconst Template = require(\"../Template\");\nconst AsyncWasmLoadingRuntimeModule = require(\"../wasm-async/AsyncWasmLoadingRuntimeModule\");\n\n/** @typedef {import(\"../Compiler\")} Compiler */\n\nclass ReadFileCompileAsyncWasmPlugin {\n  constructor() {\n    let {\n      type = \"async-node\",\n      import: useImport = false\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    this._type = type;\n    this._import = useImport;\n  }\n  /**\r\n   * Apply the plugin\r\n   * @param {Compiler} compiler the compiler instance\r\n   * @returns {void}\r\n   */\n  apply(compiler) {\n    compiler.hooks.thisCompilation.tap(\"ReadFileCompileAsyncWasmPlugin\", compilation => {\n      const globalWasmLoading = compilation.outputOptions.wasmLoading;\n      const isEnabledForChunk = chunk => {\n        const options = chunk.getEntryOptions();\n        const wasmLoading = options && options.wasmLoading !== undefined ? options.wasmLoading : globalWasmLoading;\n        return wasmLoading === this._type;\n      };\n      const generateLoadBinaryCode = this._import ? path => Template.asString([\"Promise.all([import('fs'), import('url')]).then(([{ readFile }, { URL }]) => new Promise((resolve, reject) => {\", Template.indent([`readFile(new URL(${path}, import.meta.url), (err, buffer) => {`, Template.indent([\"if (err) return reject(err);\", \"\", \"// Fake fetch response\", \"resolve({\", Template.indent([\"arrayBuffer() { return buffer; }\"]), \"});\"]), \"});\"]), \"}))\"]) : path => Template.asString([\"new Promise(function (resolve, reject) {\", Template.indent([\"try {\", Template.indent([\"var { readFile } = require('fs');\", \"var { join } = require('path');\", \"\", `readFile(join(__dirname, ${path}), function(err, buffer){`, Template.indent([\"if (err) return reject(err);\", \"\", \"// Fake fetch response\", \"resolve({\", Template.indent([\"arrayBuffer() { return buffer; }\"]), \"});\"]), \"});\"]), \"} catch (err) { reject(err); }\"]), \"})\"]);\n      compilation.hooks.runtimeRequirementInTree.for(RuntimeGlobals.instantiateWasm).tap(\"ReadFileCompileAsyncWasmPlugin\", (chunk, set) => {\n        if (!isEnabledForChunk(chunk)) return;\n        const chunkGraph = compilation.chunkGraph;\n        if (!chunkGraph.hasModuleInGraph(chunk, m => m.type === \"webassembly/async\")) {\n          return;\n        }\n        set.add(RuntimeGlobals.publicPath);\n        compilation.addRuntimeModule(chunk, new AsyncWasmLoadingRuntimeModule({\n          generateLoadBinaryCode,\n          supportsStreaming: false\n        }));\n      });\n    });\n  }\n}\nmodule.exports = ReadFileCompileAsyncWasmPlugin;","map":{"version":3,"names":["RuntimeGlobals","require","Template","AsyncWasmLoadingRuntimeModule","ReadFileCompileAsyncWasmPlugin","constructor","type","import","useImport","_type","_import","apply","compiler","hooks","thisCompilation","tap","compilation","globalWasmLoading","outputOptions","wasmLoading","isEnabledForChunk","chunk","options","getEntryOptions","undefined","generateLoadBinaryCode","path","asString","indent","runtimeRequirementInTree","for","instantiateWasm","set","chunkGraph","hasModuleInGraph","m","add","publicPath","addRuntimeModule","supportsStreaming","module","exports"],"sources":["C:/Users/91930/Desktop/Github projects/Pharmacy Demo/front-end/node_modules/webpack/lib/node/ReadFileCompileAsyncWasmPlugin.js"],"sourcesContent":["/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Tobias Koppers @sokra\r\n*/\r\n\r\n\"use strict\";\r\n\r\nconst RuntimeGlobals = require(\"../RuntimeGlobals\");\r\nconst Template = require(\"../Template\");\r\nconst AsyncWasmLoadingRuntimeModule = require(\"../wasm-async/AsyncWasmLoadingRuntimeModule\");\r\n\r\n/** @typedef {import(\"../Compiler\")} Compiler */\r\n\r\nclass ReadFileCompileAsyncWasmPlugin {\r\n\tconstructor({ type = \"async-node\", import: useImport = false } = {}) {\r\n\t\tthis._type = type;\r\n\t\tthis._import = useImport;\r\n\t}\r\n\t/**\r\n\t * Apply the plugin\r\n\t * @param {Compiler} compiler the compiler instance\r\n\t * @returns {void}\r\n\t */\r\n\tapply(compiler) {\r\n\t\tcompiler.hooks.thisCompilation.tap(\r\n\t\t\t\"ReadFileCompileAsyncWasmPlugin\",\r\n\t\t\tcompilation => {\r\n\t\t\t\tconst globalWasmLoading = compilation.outputOptions.wasmLoading;\r\n\t\t\t\tconst isEnabledForChunk = chunk => {\r\n\t\t\t\t\tconst options = chunk.getEntryOptions();\r\n\t\t\t\t\tconst wasmLoading =\r\n\t\t\t\t\t\toptions && options.wasmLoading !== undefined\r\n\t\t\t\t\t\t\t? options.wasmLoading\r\n\t\t\t\t\t\t\t: globalWasmLoading;\r\n\t\t\t\t\treturn wasmLoading === this._type;\r\n\t\t\t\t};\r\n\t\t\t\tconst generateLoadBinaryCode = this._import\r\n\t\t\t\t\t? path =>\r\n\t\t\t\t\t\t\tTemplate.asString([\r\n\t\t\t\t\t\t\t\t\"Promise.all([import('fs'), import('url')]).then(([{ readFile }, { URL }]) => new Promise((resolve, reject) => {\",\r\n\t\t\t\t\t\t\t\tTemplate.indent([\r\n\t\t\t\t\t\t\t\t\t`readFile(new URL(${path}, import.meta.url), (err, buffer) => {`,\r\n\t\t\t\t\t\t\t\t\tTemplate.indent([\r\n\t\t\t\t\t\t\t\t\t\t\"if (err) return reject(err);\",\r\n\t\t\t\t\t\t\t\t\t\t\"\",\r\n\t\t\t\t\t\t\t\t\t\t\"// Fake fetch response\",\r\n\t\t\t\t\t\t\t\t\t\t\"resolve({\",\r\n\t\t\t\t\t\t\t\t\t\tTemplate.indent([\"arrayBuffer() { return buffer; }\"]),\r\n\t\t\t\t\t\t\t\t\t\t\"});\"\r\n\t\t\t\t\t\t\t\t\t]),\r\n\t\t\t\t\t\t\t\t\t\"});\"\r\n\t\t\t\t\t\t\t\t]),\r\n\t\t\t\t\t\t\t\t\"}))\"\r\n\t\t\t\t\t\t\t])\r\n\t\t\t\t\t: path =>\r\n\t\t\t\t\t\t\tTemplate.asString([\r\n\t\t\t\t\t\t\t\t\"new Promise(function (resolve, reject) {\",\r\n\t\t\t\t\t\t\t\tTemplate.indent([\r\n\t\t\t\t\t\t\t\t\t\"try {\",\r\n\t\t\t\t\t\t\t\t\tTemplate.indent([\r\n\t\t\t\t\t\t\t\t\t\t\"var { readFile } = require('fs');\",\r\n\t\t\t\t\t\t\t\t\t\t\"var { join } = require('path');\",\r\n\t\t\t\t\t\t\t\t\t\t\"\",\r\n\t\t\t\t\t\t\t\t\t\t`readFile(join(__dirname, ${path}), function(err, buffer){`,\r\n\t\t\t\t\t\t\t\t\t\tTemplate.indent([\r\n\t\t\t\t\t\t\t\t\t\t\t\"if (err) return reject(err);\",\r\n\t\t\t\t\t\t\t\t\t\t\t\"\",\r\n\t\t\t\t\t\t\t\t\t\t\t\"// Fake fetch response\",\r\n\t\t\t\t\t\t\t\t\t\t\t\"resolve({\",\r\n\t\t\t\t\t\t\t\t\t\t\tTemplate.indent([\"arrayBuffer() { return buffer; }\"]),\r\n\t\t\t\t\t\t\t\t\t\t\t\"});\"\r\n\t\t\t\t\t\t\t\t\t\t]),\r\n\t\t\t\t\t\t\t\t\t\t\"});\"\r\n\t\t\t\t\t\t\t\t\t]),\r\n\t\t\t\t\t\t\t\t\t\"} catch (err) { reject(err); }\"\r\n\t\t\t\t\t\t\t\t]),\r\n\t\t\t\t\t\t\t\t\"})\"\r\n\t\t\t\t\t\t\t]);\r\n\r\n\t\t\t\tcompilation.hooks.runtimeRequirementInTree\r\n\t\t\t\t\t.for(RuntimeGlobals.instantiateWasm)\r\n\t\t\t\t\t.tap(\"ReadFileCompileAsyncWasmPlugin\", (chunk, set) => {\r\n\t\t\t\t\t\tif (!isEnabledForChunk(chunk)) return;\r\n\t\t\t\t\t\tconst chunkGraph = compilation.chunkGraph;\r\n\t\t\t\t\t\tif (\r\n\t\t\t\t\t\t\t!chunkGraph.hasModuleInGraph(\r\n\t\t\t\t\t\t\t\tchunk,\r\n\t\t\t\t\t\t\t\tm => m.type === \"webassembly/async\"\r\n\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t) {\r\n\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tset.add(RuntimeGlobals.publicPath);\r\n\t\t\t\t\t\tcompilation.addRuntimeModule(\r\n\t\t\t\t\t\t\tchunk,\r\n\t\t\t\t\t\t\tnew AsyncWasmLoadingRuntimeModule({\r\n\t\t\t\t\t\t\t\tgenerateLoadBinaryCode,\r\n\t\t\t\t\t\t\t\tsupportsStreaming: false\r\n\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t});\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n}\r\n\r\nmodule.exports = ReadFileCompileAsyncWasmPlugin;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}