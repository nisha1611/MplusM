{"ast":null,"code":"/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Tobias Koppers @sokra\r\n*/\n\n\"use strict\";\n\nconst t = require(\"@webassemblyjs/ast\");\nconst {\n  moduleContextFromModuleAST\n} = require(\"@webassemblyjs/ast\");\nconst {\n  decode\n} = require(\"@webassemblyjs/wasm-parser\");\nconst Parser = require(\"../Parser\");\nconst StaticExportsDependency = require(\"../dependencies/StaticExportsDependency\");\nconst WebAssemblyExportImportedDependency = require(\"../dependencies/WebAssemblyExportImportedDependency\");\nconst WebAssemblyImportDependency = require(\"../dependencies/WebAssemblyImportDependency\");\n\n/** @typedef {import(\"../Module\")} Module */\n/** @typedef {import(\"../Parser\").ParserState} ParserState */\n/** @typedef {import(\"../Parser\").PreparsedAst} PreparsedAst */\n\nconst JS_COMPAT_TYPES = new Set([\"i32\", \"i64\", \"f32\", \"f64\"]);\n\n/**\r\n * @param {t.Signature} signature the func signature\r\n * @returns {null | string} the type incompatible with js types\r\n */\nconst getJsIncompatibleType = signature => {\n  for (const param of signature.params) {\n    if (!JS_COMPAT_TYPES.has(param.valtype)) {\n      return `${param.valtype} as parameter`;\n    }\n  }\n  for (const type of signature.results) {\n    if (!JS_COMPAT_TYPES.has(type)) return `${type} as result`;\n  }\n  return null;\n};\n\n/**\r\n * TODO why are there two different Signature types?\r\n * @param {t.FuncSignature} signature the func signature\r\n * @returns {null | string} the type incompatible with js types\r\n */\nconst getJsIncompatibleTypeOfFuncSignature = signature => {\n  for (const param of signature.args) {\n    if (!JS_COMPAT_TYPES.has(param)) {\n      return `${param} as parameter`;\n    }\n  }\n  for (const type of signature.result) {\n    if (!JS_COMPAT_TYPES.has(type)) return `${type} as result`;\n  }\n  return null;\n};\nconst decoderOpts = {\n  ignoreCodeSection: true,\n  ignoreDataSection: true,\n  // this will avoid having to lookup with identifiers in the ModuleContext\n  ignoreCustomNameSection: true\n};\nclass WebAssemblyParser extends Parser {\n  constructor(options) {\n    super();\n    this.hooks = Object.freeze({});\n    this.options = options;\n  }\n\n  /**\r\n   * @param {string | Buffer | PreparsedAst} source the source to parse\r\n   * @param {ParserState} state the parser state\r\n   * @returns {ParserState} the parser state\r\n   */\n  parse(source, state) {\n    if (!Buffer.isBuffer(source)) {\n      throw new Error(\"WebAssemblyParser input must be a Buffer\");\n    }\n\n    // flag it as ESM\n    state.module.buildInfo.strict = true;\n    state.module.buildMeta.exportsType = \"namespace\";\n\n    // parse it\n    const program = decode(source, decoderOpts);\n    const module = program.body[0];\n    const moduleContext = moduleContextFromModuleAST(module);\n\n    // extract imports and exports\n    const exports = [];\n    let jsIncompatibleExports = state.module.buildMeta.jsIncompatibleExports = undefined;\n    const importedGlobals = [];\n    t.traverse(module, {\n      ModuleExport(_ref) {\n        let {\n          node\n        } = _ref;\n        const descriptor = node.descr;\n        if (descriptor.exportType === \"Func\") {\n          const funcIdx = descriptor.id.value;\n\n          /** @type {t.FuncSignature} */\n          const funcSignature = moduleContext.getFunction(funcIdx);\n          const incompatibleType = getJsIncompatibleTypeOfFuncSignature(funcSignature);\n          if (incompatibleType) {\n            if (jsIncompatibleExports === undefined) {\n              jsIncompatibleExports = state.module.buildMeta.jsIncompatibleExports = {};\n            }\n            jsIncompatibleExports[node.name] = incompatibleType;\n          }\n        }\n        exports.push(node.name);\n        if (node.descr && node.descr.exportType === \"Global\") {\n          const refNode = importedGlobals[node.descr.id.value];\n          if (refNode) {\n            const dep = new WebAssemblyExportImportedDependency(node.name, refNode.module, refNode.name, refNode.descr.valtype);\n            state.module.addDependency(dep);\n          }\n        }\n      },\n      Global(_ref2) {\n        let {\n          node\n        } = _ref2;\n        const init = node.init[0];\n        let importNode = null;\n        if (init.id === \"get_global\") {\n          const globalIdx = init.args[0].value;\n          if (globalIdx < importedGlobals.length) {\n            importNode = importedGlobals[globalIdx];\n          }\n        }\n        importedGlobals.push(importNode);\n      },\n      ModuleImport(_ref3) {\n        let {\n          node\n        } = _ref3;\n        /** @type {false | string} */\n        let onlyDirectImport = false;\n        if (t.isMemory(node.descr) === true) {\n          onlyDirectImport = \"Memory\";\n        } else if (t.isTable(node.descr) === true) {\n          onlyDirectImport = \"Table\";\n        } else if (t.isFuncImportDescr(node.descr) === true) {\n          const incompatibleType = getJsIncompatibleType(node.descr.signature);\n          if (incompatibleType) {\n            onlyDirectImport = `Non-JS-compatible Func Signature (${incompatibleType})`;\n          }\n        } else if (t.isGlobalType(node.descr) === true) {\n          const type = node.descr.valtype;\n          if (!JS_COMPAT_TYPES.has(type)) {\n            onlyDirectImport = `Non-JS-compatible Global Type (${type})`;\n          }\n        }\n        const dep = new WebAssemblyImportDependency(node.module, node.name, node.descr, onlyDirectImport);\n        state.module.addDependency(dep);\n        if (t.isGlobalType(node.descr)) {\n          importedGlobals.push(node);\n        }\n      }\n    });\n    state.module.addDependency(new StaticExportsDependency(exports, false));\n    return state;\n  }\n}\nmodule.exports = WebAssemblyParser;","map":{"version":3,"names":["t","require","moduleContextFromModuleAST","decode","Parser","StaticExportsDependency","WebAssemblyExportImportedDependency","WebAssemblyImportDependency","JS_COMPAT_TYPES","Set","getJsIncompatibleType","signature","param","params","has","valtype","type","results","getJsIncompatibleTypeOfFuncSignature","args","result","decoderOpts","ignoreCodeSection","ignoreDataSection","ignoreCustomNameSection","WebAssemblyParser","constructor","options","hooks","Object","freeze","parse","source","state","Buffer","isBuffer","Error","module","buildInfo","strict","buildMeta","exportsType","program","body","moduleContext","exports","jsIncompatibleExports","undefined","importedGlobals","traverse","ModuleExport","node","descriptor","descr","exportType","funcIdx","id","value","funcSignature","getFunction","incompatibleType","name","push","refNode","dep","addDependency","Global","init","importNode","globalIdx","length","ModuleImport","onlyDirectImport","isMemory","isTable","isFuncImportDescr","isGlobalType"],"sources":["C:/Users/91930/Desktop/Github projects/Pharmacy Demo/front-end/node_modules/webpack/lib/wasm-sync/WebAssemblyParser.js"],"sourcesContent":["/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Tobias Koppers @sokra\r\n*/\r\n\r\n\"use strict\";\r\n\r\nconst t = require(\"@webassemblyjs/ast\");\r\nconst { moduleContextFromModuleAST } = require(\"@webassemblyjs/ast\");\r\nconst { decode } = require(\"@webassemblyjs/wasm-parser\");\r\nconst Parser = require(\"../Parser\");\r\nconst StaticExportsDependency = require(\"../dependencies/StaticExportsDependency\");\r\nconst WebAssemblyExportImportedDependency = require(\"../dependencies/WebAssemblyExportImportedDependency\");\r\nconst WebAssemblyImportDependency = require(\"../dependencies/WebAssemblyImportDependency\");\r\n\r\n/** @typedef {import(\"../Module\")} Module */\r\n/** @typedef {import(\"../Parser\").ParserState} ParserState */\r\n/** @typedef {import(\"../Parser\").PreparsedAst} PreparsedAst */\r\n\r\nconst JS_COMPAT_TYPES = new Set([\"i32\", \"i64\", \"f32\", \"f64\"]);\r\n\r\n/**\r\n * @param {t.Signature} signature the func signature\r\n * @returns {null | string} the type incompatible with js types\r\n */\r\nconst getJsIncompatibleType = signature => {\r\n\tfor (const param of signature.params) {\r\n\t\tif (!JS_COMPAT_TYPES.has(param.valtype)) {\r\n\t\t\treturn `${param.valtype} as parameter`;\r\n\t\t}\r\n\t}\r\n\tfor (const type of signature.results) {\r\n\t\tif (!JS_COMPAT_TYPES.has(type)) return `${type} as result`;\r\n\t}\r\n\treturn null;\r\n};\r\n\r\n/**\r\n * TODO why are there two different Signature types?\r\n * @param {t.FuncSignature} signature the func signature\r\n * @returns {null | string} the type incompatible with js types\r\n */\r\nconst getJsIncompatibleTypeOfFuncSignature = signature => {\r\n\tfor (const param of signature.args) {\r\n\t\tif (!JS_COMPAT_TYPES.has(param)) {\r\n\t\t\treturn `${param} as parameter`;\r\n\t\t}\r\n\t}\r\n\tfor (const type of signature.result) {\r\n\t\tif (!JS_COMPAT_TYPES.has(type)) return `${type} as result`;\r\n\t}\r\n\treturn null;\r\n};\r\n\r\nconst decoderOpts = {\r\n\tignoreCodeSection: true,\r\n\tignoreDataSection: true,\r\n\r\n\t// this will avoid having to lookup with identifiers in the ModuleContext\r\n\tignoreCustomNameSection: true\r\n};\r\n\r\nclass WebAssemblyParser extends Parser {\r\n\tconstructor(options) {\r\n\t\tsuper();\r\n\t\tthis.hooks = Object.freeze({});\r\n\t\tthis.options = options;\r\n\t}\r\n\r\n\t/**\r\n\t * @param {string | Buffer | PreparsedAst} source the source to parse\r\n\t * @param {ParserState} state the parser state\r\n\t * @returns {ParserState} the parser state\r\n\t */\r\n\tparse(source, state) {\r\n\t\tif (!Buffer.isBuffer(source)) {\r\n\t\t\tthrow new Error(\"WebAssemblyParser input must be a Buffer\");\r\n\t\t}\r\n\r\n\t\t// flag it as ESM\r\n\t\tstate.module.buildInfo.strict = true;\r\n\t\tstate.module.buildMeta.exportsType = \"namespace\";\r\n\r\n\t\t// parse it\r\n\t\tconst program = decode(source, decoderOpts);\r\n\t\tconst module = program.body[0];\r\n\r\n\t\tconst moduleContext = moduleContextFromModuleAST(module);\r\n\r\n\t\t// extract imports and exports\r\n\t\tconst exports = [];\r\n\t\tlet jsIncompatibleExports = (state.module.buildMeta.jsIncompatibleExports =\r\n\t\t\tundefined);\r\n\r\n\t\tconst importedGlobals = [];\r\n\t\tt.traverse(module, {\r\n\t\t\tModuleExport({ node }) {\r\n\t\t\t\tconst descriptor = node.descr;\r\n\r\n\t\t\t\tif (descriptor.exportType === \"Func\") {\r\n\t\t\t\t\tconst funcIdx = descriptor.id.value;\r\n\r\n\t\t\t\t\t/** @type {t.FuncSignature} */\r\n\t\t\t\t\tconst funcSignature = moduleContext.getFunction(funcIdx);\r\n\r\n\t\t\t\t\tconst incompatibleType =\r\n\t\t\t\t\t\tgetJsIncompatibleTypeOfFuncSignature(funcSignature);\r\n\r\n\t\t\t\t\tif (incompatibleType) {\r\n\t\t\t\t\t\tif (jsIncompatibleExports === undefined) {\r\n\t\t\t\t\t\t\tjsIncompatibleExports =\r\n\t\t\t\t\t\t\t\tstate.module.buildMeta.jsIncompatibleExports = {};\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tjsIncompatibleExports[node.name] = incompatibleType;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\texports.push(node.name);\r\n\r\n\t\t\t\tif (node.descr && node.descr.exportType === \"Global\") {\r\n\t\t\t\t\tconst refNode = importedGlobals[node.descr.id.value];\r\n\t\t\t\t\tif (refNode) {\r\n\t\t\t\t\t\tconst dep = new WebAssemblyExportImportedDependency(\r\n\t\t\t\t\t\t\tnode.name,\r\n\t\t\t\t\t\t\trefNode.module,\r\n\t\t\t\t\t\t\trefNode.name,\r\n\t\t\t\t\t\t\trefNode.descr.valtype\r\n\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\tstate.module.addDependency(dep);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t},\r\n\r\n\t\t\tGlobal({ node }) {\r\n\t\t\t\tconst init = node.init[0];\r\n\r\n\t\t\t\tlet importNode = null;\r\n\r\n\t\t\t\tif (init.id === \"get_global\") {\r\n\t\t\t\t\tconst globalIdx = init.args[0].value;\r\n\r\n\t\t\t\t\tif (globalIdx < importedGlobals.length) {\r\n\t\t\t\t\t\timportNode = importedGlobals[globalIdx];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\timportedGlobals.push(importNode);\r\n\t\t\t},\r\n\r\n\t\t\tModuleImport({ node }) {\r\n\t\t\t\t/** @type {false | string} */\r\n\t\t\t\tlet onlyDirectImport = false;\r\n\r\n\t\t\t\tif (t.isMemory(node.descr) === true) {\r\n\t\t\t\t\tonlyDirectImport = \"Memory\";\r\n\t\t\t\t} else if (t.isTable(node.descr) === true) {\r\n\t\t\t\t\tonlyDirectImport = \"Table\";\r\n\t\t\t\t} else if (t.isFuncImportDescr(node.descr) === true) {\r\n\t\t\t\t\tconst incompatibleType = getJsIncompatibleType(node.descr.signature);\r\n\t\t\t\t\tif (incompatibleType) {\r\n\t\t\t\t\t\tonlyDirectImport = `Non-JS-compatible Func Signature (${incompatibleType})`;\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (t.isGlobalType(node.descr) === true) {\r\n\t\t\t\t\tconst type = node.descr.valtype;\r\n\t\t\t\t\tif (!JS_COMPAT_TYPES.has(type)) {\r\n\t\t\t\t\t\tonlyDirectImport = `Non-JS-compatible Global Type (${type})`;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst dep = new WebAssemblyImportDependency(\r\n\t\t\t\t\tnode.module,\r\n\t\t\t\t\tnode.name,\r\n\t\t\t\t\tnode.descr,\r\n\t\t\t\t\tonlyDirectImport\r\n\t\t\t\t);\r\n\r\n\t\t\t\tstate.module.addDependency(dep);\r\n\r\n\t\t\t\tif (t.isGlobalType(node.descr)) {\r\n\t\t\t\t\timportedGlobals.push(node);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tstate.module.addDependency(new StaticExportsDependency(exports, false));\r\n\r\n\t\treturn state;\r\n\t}\r\n}\r\n\r\nmodule.exports = WebAssemblyParser;\r\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ,MAAMA,CAAC,GAAGC,OAAO,CAAC,oBAAoB,CAAC;AACvC,MAAM;EAAEC;AAA2B,CAAC,GAAGD,OAAO,CAAC,oBAAoB,CAAC;AACpE,MAAM;EAAEE;AAAO,CAAC,GAAGF,OAAO,CAAC,4BAA4B,CAAC;AACxD,MAAMG,MAAM,GAAGH,OAAO,CAAC,WAAW,CAAC;AACnC,MAAMI,uBAAuB,GAAGJ,OAAO,CAAC,yCAAyC,CAAC;AAClF,MAAMK,mCAAmC,GAAGL,OAAO,CAAC,qDAAqD,CAAC;AAC1G,MAAMM,2BAA2B,GAAGN,OAAO,CAAC,6CAA6C,CAAC;;AAE1F;AACA;AACA;;AAEA,MAAMO,eAAe,GAAG,IAAIC,GAAG,CAAC,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;;AAE7D;AACA;AACA;AACA;AACA,MAAMC,qBAAqB,GAAGC,SAAS,IAAI;EAC1C,KAAK,MAAMC,KAAK,IAAID,SAAS,CAACE,MAAM,EAAE;IACrC,IAAI,CAACL,eAAe,CAACM,GAAG,CAACF,KAAK,CAACG,OAAO,CAAC,EAAE;MACxC,OAAQ,GAAEH,KAAK,CAACG,OAAQ,eAAc;IACvC;EACD;EACA,KAAK,MAAMC,IAAI,IAAIL,SAAS,CAACM,OAAO,EAAE;IACrC,IAAI,CAACT,eAAe,CAACM,GAAG,CAACE,IAAI,CAAC,EAAE,OAAQ,GAAEA,IAAK,YAAW;EAC3D;EACA,OAAO,IAAI;AACZ,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,MAAME,oCAAoC,GAAGP,SAAS,IAAI;EACzD,KAAK,MAAMC,KAAK,IAAID,SAAS,CAACQ,IAAI,EAAE;IACnC,IAAI,CAACX,eAAe,CAACM,GAAG,CAACF,KAAK,CAAC,EAAE;MAChC,OAAQ,GAAEA,KAAM,eAAc;IAC/B;EACD;EACA,KAAK,MAAMI,IAAI,IAAIL,SAAS,CAACS,MAAM,EAAE;IACpC,IAAI,CAACZ,eAAe,CAACM,GAAG,CAACE,IAAI,CAAC,EAAE,OAAQ,GAAEA,IAAK,YAAW;EAC3D;EACA,OAAO,IAAI;AACZ,CAAC;AAED,MAAMK,WAAW,GAAG;EACnBC,iBAAiB,EAAE,IAAI;EACvBC,iBAAiB,EAAE,IAAI;EAEvB;EACAC,uBAAuB,EAAE;AAC1B,CAAC;AAED,MAAMC,iBAAiB,SAASrB,MAAM,CAAC;EACtCsB,WAAW,CAACC,OAAO,EAAE;IACpB,KAAK,EAAE;IACP,IAAI,CAACC,KAAK,GAAGC,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,CAAC;IAC9B,IAAI,CAACH,OAAO,GAAGA,OAAO;EACvB;;EAEA;AACD;AACA;AACA;AACA;EACCI,KAAK,CAACC,MAAM,EAAEC,KAAK,EAAE;IACpB,IAAI,CAACC,MAAM,CAACC,QAAQ,CAACH,MAAM,CAAC,EAAE;MAC7B,MAAM,IAAII,KAAK,CAAC,0CAA0C,CAAC;IAC5D;;IAEA;IACAH,KAAK,CAACI,MAAM,CAACC,SAAS,CAACC,MAAM,GAAG,IAAI;IACpCN,KAAK,CAACI,MAAM,CAACG,SAAS,CAACC,WAAW,GAAG,WAAW;;IAEhD;IACA,MAAMC,OAAO,GAAGvC,MAAM,CAAC6B,MAAM,EAAEX,WAAW,CAAC;IAC3C,MAAMgB,MAAM,GAAGK,OAAO,CAACC,IAAI,CAAC,CAAC,CAAC;IAE9B,MAAMC,aAAa,GAAG1C,0BAA0B,CAACmC,MAAM,CAAC;;IAExD;IACA,MAAMQ,OAAO,GAAG,EAAE;IAClB,IAAIC,qBAAqB,GAAIb,KAAK,CAACI,MAAM,CAACG,SAAS,CAACM,qBAAqB,GACxEC,SAAU;IAEX,MAAMC,eAAe,GAAG,EAAE;IAC1BhD,CAAC,CAACiD,QAAQ,CAACZ,MAAM,EAAE;MAClBa,YAAY,OAAW;QAAA,IAAV;UAAEC;QAAK,CAAC;QACpB,MAAMC,UAAU,GAAGD,IAAI,CAACE,KAAK;QAE7B,IAAID,UAAU,CAACE,UAAU,KAAK,MAAM,EAAE;UACrC,MAAMC,OAAO,GAAGH,UAAU,CAACI,EAAE,CAACC,KAAK;;UAEnC;UACA,MAAMC,aAAa,GAAGd,aAAa,CAACe,WAAW,CAACJ,OAAO,CAAC;UAExD,MAAMK,gBAAgB,GACrB1C,oCAAoC,CAACwC,aAAa,CAAC;UAEpD,IAAIE,gBAAgB,EAAE;YACrB,IAAId,qBAAqB,KAAKC,SAAS,EAAE;cACxCD,qBAAqB,GACpBb,KAAK,CAACI,MAAM,CAACG,SAAS,CAACM,qBAAqB,GAAG,CAAC,CAAC;YACnD;YACAA,qBAAqB,CAACK,IAAI,CAACU,IAAI,CAAC,GAAGD,gBAAgB;UACpD;QACD;QAEAf,OAAO,CAACiB,IAAI,CAACX,IAAI,CAACU,IAAI,CAAC;QAEvB,IAAIV,IAAI,CAACE,KAAK,IAAIF,IAAI,CAACE,KAAK,CAACC,UAAU,KAAK,QAAQ,EAAE;UACrD,MAAMS,OAAO,GAAGf,eAAe,CAACG,IAAI,CAACE,KAAK,CAACG,EAAE,CAACC,KAAK,CAAC;UACpD,IAAIM,OAAO,EAAE;YACZ,MAAMC,GAAG,GAAG,IAAI1D,mCAAmC,CAClD6C,IAAI,CAACU,IAAI,EACTE,OAAO,CAAC1B,MAAM,EACd0B,OAAO,CAACF,IAAI,EACZE,OAAO,CAACV,KAAK,CAACtC,OAAO,CACrB;YAEDkB,KAAK,CAACI,MAAM,CAAC4B,aAAa,CAACD,GAAG,CAAC;UAChC;QACD;MACD,CAAC;MAEDE,MAAM,QAAW;QAAA,IAAV;UAAEf;QAAK,CAAC;QACd,MAAMgB,IAAI,GAAGhB,IAAI,CAACgB,IAAI,CAAC,CAAC,CAAC;QAEzB,IAAIC,UAAU,GAAG,IAAI;QAErB,IAAID,IAAI,CAACX,EAAE,KAAK,YAAY,EAAE;UAC7B,MAAMa,SAAS,GAAGF,IAAI,CAAChD,IAAI,CAAC,CAAC,CAAC,CAACsC,KAAK;UAEpC,IAAIY,SAAS,GAAGrB,eAAe,CAACsB,MAAM,EAAE;YACvCF,UAAU,GAAGpB,eAAe,CAACqB,SAAS,CAAC;UACxC;QACD;QAEArB,eAAe,CAACc,IAAI,CAACM,UAAU,CAAC;MACjC,CAAC;MAEDG,YAAY,QAAW;QAAA,IAAV;UAAEpB;QAAK,CAAC;QACpB;QACA,IAAIqB,gBAAgB,GAAG,KAAK;QAE5B,IAAIxE,CAAC,CAACyE,QAAQ,CAACtB,IAAI,CAACE,KAAK,CAAC,KAAK,IAAI,EAAE;UACpCmB,gBAAgB,GAAG,QAAQ;QAC5B,CAAC,MAAM,IAAIxE,CAAC,CAAC0E,OAAO,CAACvB,IAAI,CAACE,KAAK,CAAC,KAAK,IAAI,EAAE;UAC1CmB,gBAAgB,GAAG,OAAO;QAC3B,CAAC,MAAM,IAAIxE,CAAC,CAAC2E,iBAAiB,CAACxB,IAAI,CAACE,KAAK,CAAC,KAAK,IAAI,EAAE;UACpD,MAAMO,gBAAgB,GAAGlD,qBAAqB,CAACyC,IAAI,CAACE,KAAK,CAAC1C,SAAS,CAAC;UACpE,IAAIiD,gBAAgB,EAAE;YACrBY,gBAAgB,GAAI,qCAAoCZ,gBAAiB,GAAE;UAC5E;QACD,CAAC,MAAM,IAAI5D,CAAC,CAAC4E,YAAY,CAACzB,IAAI,CAACE,KAAK,CAAC,KAAK,IAAI,EAAE;UAC/C,MAAMrC,IAAI,GAAGmC,IAAI,CAACE,KAAK,CAACtC,OAAO;UAC/B,IAAI,CAACP,eAAe,CAACM,GAAG,CAACE,IAAI,CAAC,EAAE;YAC/BwD,gBAAgB,GAAI,kCAAiCxD,IAAK,GAAE;UAC7D;QACD;QAEA,MAAMgD,GAAG,GAAG,IAAIzD,2BAA2B,CAC1C4C,IAAI,CAACd,MAAM,EACXc,IAAI,CAACU,IAAI,EACTV,IAAI,CAACE,KAAK,EACVmB,gBAAgB,CAChB;QAEDvC,KAAK,CAACI,MAAM,CAAC4B,aAAa,CAACD,GAAG,CAAC;QAE/B,IAAIhE,CAAC,CAAC4E,YAAY,CAACzB,IAAI,CAACE,KAAK,CAAC,EAAE;UAC/BL,eAAe,CAACc,IAAI,CAACX,IAAI,CAAC;QAC3B;MACD;IACD,CAAC,CAAC;IAEFlB,KAAK,CAACI,MAAM,CAAC4B,aAAa,CAAC,IAAI5D,uBAAuB,CAACwC,OAAO,EAAE,KAAK,CAAC,CAAC;IAEvE,OAAOZ,KAAK;EACb;AACD;AAEAI,MAAM,CAACQ,OAAO,GAAGpB,iBAAiB"},"metadata":{},"sourceType":"script","externalDependencies":[]}