{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isSharded = exports.applyCommonQueryOptions = exports.getReadPreference = void 0;\nconst error_1 = require(\"../../error\");\nconst read_preference_1 = require(\"../../read_preference\");\nconst common_1 = require(\"../../sdam/common\");\nconst topology_description_1 = require(\"../../sdam/topology_description\");\nfunction getReadPreference(cmd, options) {\n  // Default to command version of the readPreference\n  let readPreference = cmd.readPreference || read_preference_1.ReadPreference.primary;\n  // If we have an option readPreference override the command one\n  if (options === null || options === void 0 ? void 0 : options.readPreference) {\n    readPreference = options.readPreference;\n  }\n  if (typeof readPreference === 'string') {\n    readPreference = read_preference_1.ReadPreference.fromString(readPreference);\n  }\n  if (!(readPreference instanceof read_preference_1.ReadPreference)) {\n    throw new error_1.MongoInvalidArgumentError('Option \"readPreference\" must be a ReadPreference instance');\n  }\n  return readPreference;\n}\nexports.getReadPreference = getReadPreference;\nfunction applyCommonQueryOptions(queryOptions, options) {\n  Object.assign(queryOptions, {\n    raw: typeof options.raw === 'boolean' ? options.raw : false,\n    promoteLongs: typeof options.promoteLongs === 'boolean' ? options.promoteLongs : true,\n    promoteValues: typeof options.promoteValues === 'boolean' ? options.promoteValues : true,\n    promoteBuffers: typeof options.promoteBuffers === 'boolean' ? options.promoteBuffers : false,\n    bsonRegExp: typeof options.bsonRegExp === 'boolean' ? options.bsonRegExp : false,\n    enableUtf8Validation: typeof options.enableUtf8Validation === 'boolean' ? options.enableUtf8Validation : true\n  });\n  if (options.session) {\n    queryOptions.session = options.session;\n  }\n  return queryOptions;\n}\nexports.applyCommonQueryOptions = applyCommonQueryOptions;\nfunction isSharded(topologyOrServer) {\n  if (topologyOrServer == null) {\n    return false;\n  }\n  if (topologyOrServer.description && topologyOrServer.description.type === common_1.ServerType.Mongos) {\n    return true;\n  }\n  // NOTE: This is incredibly inefficient, and should be removed once command construction\n  //       happens based on `Server` not `Topology`.\n  if (topologyOrServer.description && topologyOrServer.description instanceof topology_description_1.TopologyDescription) {\n    const servers = Array.from(topologyOrServer.description.servers.values());\n    return servers.some(server => server.type === common_1.ServerType.Mongos);\n  }\n  return false;\n}\nexports.isSharded = isSharded;","map":{"version":3,"mappings":";;;;;;AACA;AAEA;AACA;AAIA;AAQA,SAAgBA,iBAAiB,CAACC,GAAa,EAAEC,OAA8B;EAC7E;EACA,IAAIC,cAAc,GAAGF,GAAG,CAACE,cAAc,IAAIC,gCAAc,CAACC,OAAO;EACjE;EACA,IAAIH,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEC,cAAc,EAAE;IAC3BA,cAAc,GAAGD,OAAO,CAACC,cAAc;;EAGzC,IAAI,OAAOA,cAAc,KAAK,QAAQ,EAAE;IACtCA,cAAc,GAAGC,gCAAc,CAACE,UAAU,CAACH,cAAc,CAAC;;EAG5D,IAAI,EAAEA,cAAc,YAAYC,gCAAc,CAAC,EAAE;IAC/C,MAAM,IAAIG,iCAAyB,CACjC,2DAA2D,CAC5D;;EAGH,OAAOJ,cAAc;AACvB;AAnBAK;AAqBA,SAAgBC,uBAAuB,CACrCC,YAA4B,EAC5BR,OAAuB;EAEvBS,MAAM,CAACC,MAAM,CAACF,YAAY,EAAE;IAC1BG,GAAG,EAAE,OAAOX,OAAO,CAACW,GAAG,KAAK,SAAS,GAAGX,OAAO,CAACW,GAAG,GAAG,KAAK;IAC3DC,YAAY,EAAE,OAAOZ,OAAO,CAACY,YAAY,KAAK,SAAS,GAAGZ,OAAO,CAACY,YAAY,GAAG,IAAI;IACrFC,aAAa,EAAE,OAAOb,OAAO,CAACa,aAAa,KAAK,SAAS,GAAGb,OAAO,CAACa,aAAa,GAAG,IAAI;IACxFC,cAAc,EAAE,OAAOd,OAAO,CAACc,cAAc,KAAK,SAAS,GAAGd,OAAO,CAACc,cAAc,GAAG,KAAK;IAC5FC,UAAU,EAAE,OAAOf,OAAO,CAACe,UAAU,KAAK,SAAS,GAAGf,OAAO,CAACe,UAAU,GAAG,KAAK;IAChFC,oBAAoB,EAClB,OAAOhB,OAAO,CAACgB,oBAAoB,KAAK,SAAS,GAAGhB,OAAO,CAACgB,oBAAoB,GAAG;GACtF,CAAC;EAEF,IAAIhB,OAAO,CAACiB,OAAO,EAAE;IACnBT,YAAY,CAACS,OAAO,GAAGjB,OAAO,CAACiB,OAAO;;EAGxC,OAAOT,YAAY;AACrB;AAnBAF;AAqBA,SAAgBY,SAAS,CAACC,gBAAiD;EACzE,IAAIA,gBAAgB,IAAI,IAAI,EAAE;IAC5B,OAAO,KAAK;;EAGd,IAAIA,gBAAgB,CAACC,WAAW,IAAID,gBAAgB,CAACC,WAAW,CAACC,IAAI,KAAKC,mBAAU,CAACC,MAAM,EAAE;IAC3F,OAAO,IAAI;;EAGb;EACA;EACA,IAAIJ,gBAAgB,CAACC,WAAW,IAAID,gBAAgB,CAACC,WAAW,YAAYI,0CAAmB,EAAE;IAC/F,MAAMC,OAAO,GAAwBC,KAAK,CAACC,IAAI,CAACR,gBAAgB,CAACC,WAAW,CAACK,OAAO,CAACG,MAAM,EAAE,CAAC;IAC9F,OAAOH,OAAO,CAACI,IAAI,CAAEC,MAAyB,IAAKA,MAAM,CAACT,IAAI,KAAKC,mBAAU,CAACC,MAAM,CAAC;;EAGvF,OAAO,KAAK;AACd;AAjBAjB","names":["getReadPreference","cmd","options","readPreference","read_preference_1","primary","fromString","error_1","exports","applyCommonQueryOptions","queryOptions","Object","assign","raw","promoteLongs","promoteValues","promoteBuffers","bsonRegExp","enableUtf8Validation","session","isSharded","topologyOrServer","description","type","common_1","Mongos","topology_description_1","servers","Array","from","values","some","server"],"sources":["C:\\Users\\91930\\Desktop\\Github projects\\Pharmacy Demo\\back-end\\node_modules\\mongodb\\src\\cmap\\wire_protocol\\shared.ts"],"sourcesContent":["import type { Document } from '../../bson';\r\nimport { MongoInvalidArgumentError } from '../../error';\r\nimport type { ReadPreferenceLike } from '../../read_preference';\r\nimport { ReadPreference } from '../../read_preference';\r\nimport { ServerType } from '../../sdam/common';\r\nimport type { Server } from '../../sdam/server';\r\nimport type { ServerDescription } from '../../sdam/server_description';\r\nimport type { Topology } from '../../sdam/topology';\r\nimport { TopologyDescription } from '../../sdam/topology_description';\r\nimport type { OpQueryOptions } from '../commands';\r\nimport type { CommandOptions, Connection } from '../connection';\r\n\r\nexport interface ReadPreferenceOption {\r\n  readPreference?: ReadPreferenceLike;\r\n}\r\n\r\nexport function getReadPreference(cmd: Document, options?: ReadPreferenceOption): ReadPreference {\r\n  // Default to command version of the readPreference\r\n  let readPreference = cmd.readPreference || ReadPreference.primary;\r\n  // If we have an option readPreference override the command one\r\n  if (options?.readPreference) {\r\n    readPreference = options.readPreference;\r\n  }\r\n\r\n  if (typeof readPreference === 'string') {\r\n    readPreference = ReadPreference.fromString(readPreference);\r\n  }\r\n\r\n  if (!(readPreference instanceof ReadPreference)) {\r\n    throw new MongoInvalidArgumentError(\r\n      'Option \"readPreference\" must be a ReadPreference instance'\r\n    );\r\n  }\r\n\r\n  return readPreference;\r\n}\r\n\r\nexport function applyCommonQueryOptions(\r\n  queryOptions: OpQueryOptions,\r\n  options: CommandOptions\r\n): CommandOptions {\r\n  Object.assign(queryOptions, {\r\n    raw: typeof options.raw === 'boolean' ? options.raw : false,\r\n    promoteLongs: typeof options.promoteLongs === 'boolean' ? options.promoteLongs : true,\r\n    promoteValues: typeof options.promoteValues === 'boolean' ? options.promoteValues : true,\r\n    promoteBuffers: typeof options.promoteBuffers === 'boolean' ? options.promoteBuffers : false,\r\n    bsonRegExp: typeof options.bsonRegExp === 'boolean' ? options.bsonRegExp : false,\r\n    enableUtf8Validation:\r\n      typeof options.enableUtf8Validation === 'boolean' ? options.enableUtf8Validation : true\r\n  });\r\n\r\n  if (options.session) {\r\n    queryOptions.session = options.session;\r\n  }\r\n\r\n  return queryOptions;\r\n}\r\n\r\nexport function isSharded(topologyOrServer?: Topology | Server | Connection): boolean {\r\n  if (topologyOrServer == null) {\r\n    return false;\r\n  }\r\n\r\n  if (topologyOrServer.description && topologyOrServer.description.type === ServerType.Mongos) {\r\n    return true;\r\n  }\r\n\r\n  // NOTE: This is incredibly inefficient, and should be removed once command construction\r\n  //       happens based on `Server` not `Topology`.\r\n  if (topologyOrServer.description && topologyOrServer.description instanceof TopologyDescription) {\r\n    const servers: ServerDescription[] = Array.from(topologyOrServer.description.servers.values());\r\n    return servers.some((server: ServerDescription) => server.type === ServerType.Mongos);\r\n  }\r\n\r\n  return false;\r\n}\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}