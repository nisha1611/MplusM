{"ast":null,"code":"/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Tobias Koppers @sokra\r\n*/\n\n\"use strict\";\n\nconst NONE = Symbol(\"not sorted\");\n\n/**\r\n * A subset of Set that offers sorting functionality\r\n * @template T item type in set\r\n * @extends {Set<T>}\r\n */\nclass SortableSet extends Set {\n  /**\r\n   * Create a new sortable set\r\n   * @param {Iterable<T>=} initialIterable The initial iterable value\r\n   * @typedef {function(T, T): number} SortFunction\r\n   * @param {SortFunction=} defaultSort Default sorting function\r\n   */\n  constructor(initialIterable, defaultSort) {\n    super(initialIterable);\n    /** @private @type {undefined | function(T, T): number}} */\n    this._sortFn = defaultSort;\n    /** @private @type {typeof NONE | undefined | function(T, T): number}} */\n    this._lastActiveSortFn = NONE;\n    /** @private @type {Map<Function, any> | undefined} */\n    this._cache = undefined;\n    /** @private @type {Map<Function, any> | undefined} */\n    this._cacheOrderIndependent = undefined;\n  }\n\n  /**\r\n   * @param {T} value value to add to set\r\n   * @returns {this} returns itself\r\n   */\n  add(value) {\n    this._lastActiveSortFn = NONE;\n    this._invalidateCache();\n    this._invalidateOrderedCache();\n    super.add(value);\n    return this;\n  }\n\n  /**\r\n   * @param {T} value value to delete\r\n   * @returns {boolean} true if value existed in set, false otherwise\r\n   */\n  delete(value) {\n    this._invalidateCache();\n    this._invalidateOrderedCache();\n    return super.delete(value);\n  }\n\n  /**\r\n   * @returns {void}\r\n   */\n  clear() {\n    this._invalidateCache();\n    this._invalidateOrderedCache();\n    return super.clear();\n  }\n\n  /**\r\n   * Sort with a comparer function\r\n   * @param {SortFunction} sortFn Sorting comparer function\r\n   * @returns {void}\r\n   */\n  sortWith(sortFn) {\n    if (this.size <= 1 || sortFn === this._lastActiveSortFn) {\n      // already sorted - nothing to do\n      return;\n    }\n    const sortedArray = Array.from(this).sort(sortFn);\n    super.clear();\n    for (let i = 0; i < sortedArray.length; i += 1) {\n      super.add(sortedArray[i]);\n    }\n    this._lastActiveSortFn = sortFn;\n    this._invalidateCache();\n  }\n  sort() {\n    this.sortWith(this._sortFn);\n    return this;\n  }\n\n  /**\r\n   * Get data from cache\r\n   * @template R\r\n   * @param {function(SortableSet<T>): R} fn function to calculate value\r\n   * @returns {R} returns result of fn(this), cached until set changes\r\n   */\n  getFromCache(fn) {\n    if (this._cache === undefined) {\n      this._cache = new Map();\n    } else {\n      const result = this._cache.get(fn);\n      const data = /** @type {R} */result;\n      if (data !== undefined) {\n        return data;\n      }\n    }\n    const newData = fn(this);\n    this._cache.set(fn, newData);\n    return newData;\n  }\n\n  /**\r\n   * Get data from cache (ignoring sorting)\r\n   * @template R\r\n   * @param {function(SortableSet<T>): R} fn function to calculate value\r\n   * @returns {R} returns result of fn(this), cached until set changes\r\n   */\n  getFromUnorderedCache(fn) {\n    if (this._cacheOrderIndependent === undefined) {\n      this._cacheOrderIndependent = new Map();\n    } else {\n      const result = this._cacheOrderIndependent.get(fn);\n      const data = /** @type {R} */result;\n      if (data !== undefined) {\n        return data;\n      }\n    }\n    const newData = fn(this);\n    this._cacheOrderIndependent.set(fn, newData);\n    return newData;\n  }\n\n  /**\r\n   * @private\r\n   * @returns {void}\r\n   */\n  _invalidateCache() {\n    if (this._cache !== undefined) {\n      this._cache.clear();\n    }\n  }\n\n  /**\r\n   * @private\r\n   * @returns {void}\r\n   */\n  _invalidateOrderedCache() {\n    if (this._cacheOrderIndependent !== undefined) {\n      this._cacheOrderIndependent.clear();\n    }\n  }\n\n  /**\r\n   * @returns {T[]} the raw array\r\n   */\n  toJSON() {\n    return Array.from(this);\n  }\n}\nmodule.exports = SortableSet;","map":{"version":3,"names":["NONE","Symbol","SortableSet","Set","constructor","initialIterable","defaultSort","_sortFn","_lastActiveSortFn","_cache","undefined","_cacheOrderIndependent","add","value","_invalidateCache","_invalidateOrderedCache","delete","clear","sortWith","sortFn","size","sortedArray","Array","from","sort","i","length","getFromCache","fn","Map","result","get","data","newData","set","getFromUnorderedCache","toJSON","module","exports"],"sources":["C:/Users/91930/Desktop/Github projects/Pharmacy Demo/front-end/node_modules/webpack/lib/util/SortableSet.js"],"sourcesContent":["/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Tobias Koppers @sokra\r\n*/\r\n\r\n\"use strict\";\r\n\r\nconst NONE = Symbol(\"not sorted\");\r\n\r\n/**\r\n * A subset of Set that offers sorting functionality\r\n * @template T item type in set\r\n * @extends {Set<T>}\r\n */\r\nclass SortableSet extends Set {\r\n\t/**\r\n\t * Create a new sortable set\r\n\t * @param {Iterable<T>=} initialIterable The initial iterable value\r\n\t * @typedef {function(T, T): number} SortFunction\r\n\t * @param {SortFunction=} defaultSort Default sorting function\r\n\t */\r\n\tconstructor(initialIterable, defaultSort) {\r\n\t\tsuper(initialIterable);\r\n\t\t/** @private @type {undefined | function(T, T): number}} */\r\n\t\tthis._sortFn = defaultSort;\r\n\t\t/** @private @type {typeof NONE | undefined | function(T, T): number}} */\r\n\t\tthis._lastActiveSortFn = NONE;\r\n\t\t/** @private @type {Map<Function, any> | undefined} */\r\n\t\tthis._cache = undefined;\r\n\t\t/** @private @type {Map<Function, any> | undefined} */\r\n\t\tthis._cacheOrderIndependent = undefined;\r\n\t}\r\n\r\n\t/**\r\n\t * @param {T} value value to add to set\r\n\t * @returns {this} returns itself\r\n\t */\r\n\tadd(value) {\r\n\t\tthis._lastActiveSortFn = NONE;\r\n\t\tthis._invalidateCache();\r\n\t\tthis._invalidateOrderedCache();\r\n\t\tsuper.add(value);\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * @param {T} value value to delete\r\n\t * @returns {boolean} true if value existed in set, false otherwise\r\n\t */\r\n\tdelete(value) {\r\n\t\tthis._invalidateCache();\r\n\t\tthis._invalidateOrderedCache();\r\n\t\treturn super.delete(value);\r\n\t}\r\n\r\n\t/**\r\n\t * @returns {void}\r\n\t */\r\n\tclear() {\r\n\t\tthis._invalidateCache();\r\n\t\tthis._invalidateOrderedCache();\r\n\t\treturn super.clear();\r\n\t}\r\n\r\n\t/**\r\n\t * Sort with a comparer function\r\n\t * @param {SortFunction} sortFn Sorting comparer function\r\n\t * @returns {void}\r\n\t */\r\n\tsortWith(sortFn) {\r\n\t\tif (this.size <= 1 || sortFn === this._lastActiveSortFn) {\r\n\t\t\t// already sorted - nothing to do\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst sortedArray = Array.from(this).sort(sortFn);\r\n\t\tsuper.clear();\r\n\t\tfor (let i = 0; i < sortedArray.length; i += 1) {\r\n\t\t\tsuper.add(sortedArray[i]);\r\n\t\t}\r\n\t\tthis._lastActiveSortFn = sortFn;\r\n\t\tthis._invalidateCache();\r\n\t}\r\n\r\n\tsort() {\r\n\t\tthis.sortWith(this._sortFn);\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * Get data from cache\r\n\t * @template R\r\n\t * @param {function(SortableSet<T>): R} fn function to calculate value\r\n\t * @returns {R} returns result of fn(this), cached until set changes\r\n\t */\r\n\tgetFromCache(fn) {\r\n\t\tif (this._cache === undefined) {\r\n\t\t\tthis._cache = new Map();\r\n\t\t} else {\r\n\t\t\tconst result = this._cache.get(fn);\r\n\t\t\tconst data = /** @type {R} */ (result);\r\n\t\t\tif (data !== undefined) {\r\n\t\t\t\treturn data;\r\n\t\t\t}\r\n\t\t}\r\n\t\tconst newData = fn(this);\r\n\t\tthis._cache.set(fn, newData);\r\n\t\treturn newData;\r\n\t}\r\n\r\n\t/**\r\n\t * Get data from cache (ignoring sorting)\r\n\t * @template R\r\n\t * @param {function(SortableSet<T>): R} fn function to calculate value\r\n\t * @returns {R} returns result of fn(this), cached until set changes\r\n\t */\r\n\tgetFromUnorderedCache(fn) {\r\n\t\tif (this._cacheOrderIndependent === undefined) {\r\n\t\t\tthis._cacheOrderIndependent = new Map();\r\n\t\t} else {\r\n\t\t\tconst result = this._cacheOrderIndependent.get(fn);\r\n\t\t\tconst data = /** @type {R} */ (result);\r\n\t\t\tif (data !== undefined) {\r\n\t\t\t\treturn data;\r\n\t\t\t}\r\n\t\t}\r\n\t\tconst newData = fn(this);\r\n\t\tthis._cacheOrderIndependent.set(fn, newData);\r\n\t\treturn newData;\r\n\t}\r\n\r\n\t/**\r\n\t * @private\r\n\t * @returns {void}\r\n\t */\r\n\t_invalidateCache() {\r\n\t\tif (this._cache !== undefined) {\r\n\t\t\tthis._cache.clear();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @private\r\n\t * @returns {void}\r\n\t */\r\n\t_invalidateOrderedCache() {\r\n\t\tif (this._cacheOrderIndependent !== undefined) {\r\n\t\t\tthis._cacheOrderIndependent.clear();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @returns {T[]} the raw array\r\n\t */\r\n\ttoJSON() {\r\n\t\treturn Array.from(this);\r\n\t}\r\n}\r\n\r\nmodule.exports = SortableSet;\r\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ,MAAMA,IAAI,GAAGC,MAAM,CAAC,YAAY,CAAC;;AAEjC;AACA;AACA;AACA;AACA;AACA,MAAMC,WAAW,SAASC,GAAG,CAAC;EAC7B;AACD;AACA;AACA;AACA;AACA;EACCC,WAAW,CAACC,eAAe,EAAEC,WAAW,EAAE;IACzC,KAAK,CAACD,eAAe,CAAC;IACtB;IACA,IAAI,CAACE,OAAO,GAAGD,WAAW;IAC1B;IACA,IAAI,CAACE,iBAAiB,GAAGR,IAAI;IAC7B;IACA,IAAI,CAACS,MAAM,GAAGC,SAAS;IACvB;IACA,IAAI,CAACC,sBAAsB,GAAGD,SAAS;EACxC;;EAEA;AACD;AACA;AACA;EACCE,GAAG,CAACC,KAAK,EAAE;IACV,IAAI,CAACL,iBAAiB,GAAGR,IAAI;IAC7B,IAAI,CAACc,gBAAgB,EAAE;IACvB,IAAI,CAACC,uBAAuB,EAAE;IAC9B,KAAK,CAACH,GAAG,CAACC,KAAK,CAAC;IAChB,OAAO,IAAI;EACZ;;EAEA;AACD;AACA;AACA;EACCG,MAAM,CAACH,KAAK,EAAE;IACb,IAAI,CAACC,gBAAgB,EAAE;IACvB,IAAI,CAACC,uBAAuB,EAAE;IAC9B,OAAO,KAAK,CAACC,MAAM,CAACH,KAAK,CAAC;EAC3B;;EAEA;AACD;AACA;EACCI,KAAK,GAAG;IACP,IAAI,CAACH,gBAAgB,EAAE;IACvB,IAAI,CAACC,uBAAuB,EAAE;IAC9B,OAAO,KAAK,CAACE,KAAK,EAAE;EACrB;;EAEA;AACD;AACA;AACA;AACA;EACCC,QAAQ,CAACC,MAAM,EAAE;IAChB,IAAI,IAAI,CAACC,IAAI,IAAI,CAAC,IAAID,MAAM,KAAK,IAAI,CAACX,iBAAiB,EAAE;MACxD;MACA;IACD;IAEA,MAAMa,WAAW,GAAGC,KAAK,CAACC,IAAI,CAAC,IAAI,CAAC,CAACC,IAAI,CAACL,MAAM,CAAC;IACjD,KAAK,CAACF,KAAK,EAAE;IACb,KAAK,IAAIQ,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,WAAW,CAACK,MAAM,EAAED,CAAC,IAAI,CAAC,EAAE;MAC/C,KAAK,CAACb,GAAG,CAACS,WAAW,CAACI,CAAC,CAAC,CAAC;IAC1B;IACA,IAAI,CAACjB,iBAAiB,GAAGW,MAAM;IAC/B,IAAI,CAACL,gBAAgB,EAAE;EACxB;EAEAU,IAAI,GAAG;IACN,IAAI,CAACN,QAAQ,CAAC,IAAI,CAACX,OAAO,CAAC;IAC3B,OAAO,IAAI;EACZ;;EAEA;AACD;AACA;AACA;AACA;AACA;EACCoB,YAAY,CAACC,EAAE,EAAE;IAChB,IAAI,IAAI,CAACnB,MAAM,KAAKC,SAAS,EAAE;MAC9B,IAAI,CAACD,MAAM,GAAG,IAAIoB,GAAG,EAAE;IACxB,CAAC,MAAM;MACN,MAAMC,MAAM,GAAG,IAAI,CAACrB,MAAM,CAACsB,GAAG,CAACH,EAAE,CAAC;MAClC,MAAMI,IAAI,GAAG,gBAAkBF,MAAO;MACtC,IAAIE,IAAI,KAAKtB,SAAS,EAAE;QACvB,OAAOsB,IAAI;MACZ;IACD;IACA,MAAMC,OAAO,GAAGL,EAAE,CAAC,IAAI,CAAC;IACxB,IAAI,CAACnB,MAAM,CAACyB,GAAG,CAACN,EAAE,EAAEK,OAAO,CAAC;IAC5B,OAAOA,OAAO;EACf;;EAEA;AACD;AACA;AACA;AACA;AACA;EACCE,qBAAqB,CAACP,EAAE,EAAE;IACzB,IAAI,IAAI,CAACjB,sBAAsB,KAAKD,SAAS,EAAE;MAC9C,IAAI,CAACC,sBAAsB,GAAG,IAAIkB,GAAG,EAAE;IACxC,CAAC,MAAM;MACN,MAAMC,MAAM,GAAG,IAAI,CAACnB,sBAAsB,CAACoB,GAAG,CAACH,EAAE,CAAC;MAClD,MAAMI,IAAI,GAAG,gBAAkBF,MAAO;MACtC,IAAIE,IAAI,KAAKtB,SAAS,EAAE;QACvB,OAAOsB,IAAI;MACZ;IACD;IACA,MAAMC,OAAO,GAAGL,EAAE,CAAC,IAAI,CAAC;IACxB,IAAI,CAACjB,sBAAsB,CAACuB,GAAG,CAACN,EAAE,EAAEK,OAAO,CAAC;IAC5C,OAAOA,OAAO;EACf;;EAEA;AACD;AACA;AACA;EACCnB,gBAAgB,GAAG;IAClB,IAAI,IAAI,CAACL,MAAM,KAAKC,SAAS,EAAE;MAC9B,IAAI,CAACD,MAAM,CAACQ,KAAK,EAAE;IACpB;EACD;;EAEA;AACD;AACA;AACA;EACCF,uBAAuB,GAAG;IACzB,IAAI,IAAI,CAACJ,sBAAsB,KAAKD,SAAS,EAAE;MAC9C,IAAI,CAACC,sBAAsB,CAACM,KAAK,EAAE;IACpC;EACD;;EAEA;AACD;AACA;EACCmB,MAAM,GAAG;IACR,OAAOd,KAAK,CAACC,IAAI,CAAC,IAAI,CAAC;EACxB;AACD;AAEAc,MAAM,CAACC,OAAO,GAAGpC,WAAW"},"metadata":{},"sourceType":"script","externalDependencies":[]}