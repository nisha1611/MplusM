{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.IndexedDbStorage = void 0;\nconst STORE_NAME = \"IdentityIds\";\nclass IndexedDbStorage {\n  constructor() {\n    let dbName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"aws:cognito-identity-ids\";\n    this.dbName = dbName;\n  }\n  getItem(key) {\n    return this.withObjectStore(\"readonly\", store => {\n      const req = store.get(key);\n      return new Promise(resolve => {\n        req.onerror = () => resolve(null);\n        req.onsuccess = () => resolve(req.result ? req.result.value : null);\n      });\n    }).catch(() => null);\n  }\n  removeItem(key) {\n    return this.withObjectStore(\"readwrite\", store => {\n      const req = store.delete(key);\n      return new Promise((resolve, reject) => {\n        req.onerror = () => reject(req.error);\n        req.onsuccess = () => resolve();\n      });\n    });\n  }\n  setItem(id, value) {\n    return this.withObjectStore(\"readwrite\", store => {\n      const req = store.put({\n        id,\n        value\n      });\n      return new Promise((resolve, reject) => {\n        req.onerror = () => reject(req.error);\n        req.onsuccess = () => resolve();\n      });\n    });\n  }\n  getDb() {\n    const openDbRequest = self.indexedDB.open(this.dbName, 1);\n    return new Promise((resolve, reject) => {\n      openDbRequest.onsuccess = () => {\n        resolve(openDbRequest.result);\n      };\n      openDbRequest.onerror = () => {\n        reject(openDbRequest.error);\n      };\n      openDbRequest.onblocked = () => {\n        reject(new Error(\"Unable to access DB\"));\n      };\n      openDbRequest.onupgradeneeded = () => {\n        const db = openDbRequest.result;\n        db.onerror = () => {\n          reject(new Error(\"Failed to create object store\"));\n        };\n        db.createObjectStore(STORE_NAME, {\n          keyPath: \"id\"\n        });\n      };\n    });\n  }\n  withObjectStore(mode, action) {\n    return this.getDb().then(db => {\n      const tx = db.transaction(STORE_NAME, mode);\n      tx.oncomplete = () => db.close();\n      return new Promise((resolve, reject) => {\n        tx.onerror = () => reject(tx.error);\n        resolve(action(tx.objectStore(STORE_NAME)));\n      }).catch(err => {\n        db.close();\n        throw err;\n      });\n    });\n  }\n}\nexports.IndexedDbStorage = IndexedDbStorage;","map":{"version":3,"names":["Object","defineProperty","exports","value","IndexedDbStorage","STORE_NAME","constructor","dbName","getItem","key","withObjectStore","store","req","get","Promise","resolve","onerror","onsuccess","result","catch","removeItem","delete","reject","error","setItem","id","put","getDb","openDbRequest","self","indexedDB","open","onblocked","Error","onupgradeneeded","db","createObjectStore","keyPath","mode","action","then","tx","transaction","oncomplete","close","objectStore","err"],"sources":["C:/Users/91930/Desktop/Github projects/Pharmacy Demo/back-end/node_modules/@aws-sdk/credential-provider-cognito-identity/dist-cjs/IndexedDbStorage.js"],"sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.IndexedDbStorage = void 0;\r\nconst STORE_NAME = \"IdentityIds\";\r\nclass IndexedDbStorage {\r\n    constructor(dbName = \"aws:cognito-identity-ids\") {\r\n        this.dbName = dbName;\r\n    }\r\n    getItem(key) {\r\n        return this.withObjectStore(\"readonly\", (store) => {\r\n            const req = store.get(key);\r\n            return new Promise((resolve) => {\r\n                req.onerror = () => resolve(null);\r\n                req.onsuccess = () => resolve(req.result ? req.result.value : null);\r\n            });\r\n        }).catch(() => null);\r\n    }\r\n    removeItem(key) {\r\n        return this.withObjectStore(\"readwrite\", (store) => {\r\n            const req = store.delete(key);\r\n            return new Promise((resolve, reject) => {\r\n                req.onerror = () => reject(req.error);\r\n                req.onsuccess = () => resolve();\r\n            });\r\n        });\r\n    }\r\n    setItem(id, value) {\r\n        return this.withObjectStore(\"readwrite\", (store) => {\r\n            const req = store.put({ id, value });\r\n            return new Promise((resolve, reject) => {\r\n                req.onerror = () => reject(req.error);\r\n                req.onsuccess = () => resolve();\r\n            });\r\n        });\r\n    }\r\n    getDb() {\r\n        const openDbRequest = self.indexedDB.open(this.dbName, 1);\r\n        return new Promise((resolve, reject) => {\r\n            openDbRequest.onsuccess = () => {\r\n                resolve(openDbRequest.result);\r\n            };\r\n            openDbRequest.onerror = () => {\r\n                reject(openDbRequest.error);\r\n            };\r\n            openDbRequest.onblocked = () => {\r\n                reject(new Error(\"Unable to access DB\"));\r\n            };\r\n            openDbRequest.onupgradeneeded = () => {\r\n                const db = openDbRequest.result;\r\n                db.onerror = () => {\r\n                    reject(new Error(\"Failed to create object store\"));\r\n                };\r\n                db.createObjectStore(STORE_NAME, { keyPath: \"id\" });\r\n            };\r\n        });\r\n    }\r\n    withObjectStore(mode, action) {\r\n        return this.getDb().then((db) => {\r\n            const tx = db.transaction(STORE_NAME, mode);\r\n            tx.oncomplete = () => db.close();\r\n            return new Promise((resolve, reject) => {\r\n                tx.onerror = () => reject(tx.error);\r\n                resolve(action(tx.objectStore(STORE_NAME)));\r\n            }).catch((err) => {\r\n                db.close();\r\n                throw err;\r\n            });\r\n        });\r\n    }\r\n}\r\nexports.IndexedDbStorage = IndexedDbStorage;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}