{"ast":null,"code":"/**\r\n * Usage: node test.js\r\n */\n\nvar mime = require('../mime');\nvar assert = require('assert');\nvar path = require('path');\n\n//\n// Test mime lookups\n//\n\nassert.equal('text/plain', mime.lookup('text.txt')); // normal file\nassert.equal('text/plain', mime.lookup('TEXT.TXT')); // uppercase\nassert.equal('text/plain', mime.lookup('dir/text.txt')); // dir + file\nassert.equal('text/plain', mime.lookup('.text.txt')); // hidden file\nassert.equal('text/plain', mime.lookup('.txt')); // nameless\nassert.equal('text/plain', mime.lookup('txt')); // extension-only\nassert.equal('text/plain', mime.lookup('/txt')); // extension-less ()\nassert.equal('text/plain', mime.lookup('\\\\txt')); // Windows, extension-less\nassert.equal('application/octet-stream', mime.lookup('text.nope')); // unrecognized\nassert.equal('fallback', mime.lookup('text.fallback', 'fallback')); // alternate default\n\n//\n// Test extensions\n//\n\nassert.equal('txt', mime.extension(mime.types.text));\nassert.equal('html', mime.extension(mime.types.htm));\nassert.equal('bin', mime.extension('application/octet-stream'));\nassert.equal('bin', mime.extension('application/octet-stream '));\nassert.equal('html', mime.extension(' text/html; charset=UTF-8'));\nassert.equal('html', mime.extension('text/html; charset=UTF-8 '));\nassert.equal('html', mime.extension('text/html; charset=UTF-8'));\nassert.equal('html', mime.extension('text/html ; charset=UTF-8'));\nassert.equal('html', mime.extension('text/html;charset=UTF-8'));\nassert.equal('html', mime.extension('text/Html;charset=UTF-8'));\nassert.equal(undefined, mime.extension('unrecognized'));\n\n//\n// Test node.types lookups\n//\n\nassert.equal('font/woff', mime.lookup('file.woff'));\nassert.equal('application/octet-stream', mime.lookup('file.buffer'));\n// TODO: Uncomment once #157 is resolved\n// assert.equal('audio/mp4', mime.lookup('file.m4a'));\nassert.equal('font/otf', mime.lookup('file.otf'));\n\n//\n// Test charsets\n//\n\nassert.equal('UTF-8', mime.charsets.lookup('text/plain'));\nassert.equal('UTF-8', mime.charsets.lookup(mime.types.js));\nassert.equal('UTF-8', mime.charsets.lookup(mime.types.json));\nassert.equal(undefined, mime.charsets.lookup(mime.types.bin));\nassert.equal('fallback', mime.charsets.lookup('application/octet-stream', 'fallback'));\nconsole.log('\\nAll tests passed');","map":{"version":3,"names":["mime","require","assert","path","equal","lookup","extension","types","text","htm","undefined","charsets","js","json","bin","console","log"],"sources":["C:/Users/91930/Desktop/Github projects/Pharmacy Demo/back-end/node_modules/mime/src/test.js"],"sourcesContent":["/**\r\n * Usage: node test.js\r\n */\r\n\r\nvar mime = require('../mime');\r\nvar assert = require('assert');\r\nvar path = require('path');\r\n\r\n//\r\n// Test mime lookups\r\n//\r\n\r\nassert.equal('text/plain', mime.lookup('text.txt'));     // normal file\r\nassert.equal('text/plain', mime.lookup('TEXT.TXT'));     // uppercase\r\nassert.equal('text/plain', mime.lookup('dir/text.txt')); // dir + file\r\nassert.equal('text/plain', mime.lookup('.text.txt'));    // hidden file\r\nassert.equal('text/plain', mime.lookup('.txt'));         // nameless\r\nassert.equal('text/plain', mime.lookup('txt'));          // extension-only\r\nassert.equal('text/plain', mime.lookup('/txt'));         // extension-less ()\r\nassert.equal('text/plain', mime.lookup('\\\\txt'));        // Windows, extension-less\r\nassert.equal('application/octet-stream', mime.lookup('text.nope')); // unrecognized\r\nassert.equal('fallback', mime.lookup('text.fallback', 'fallback')); // alternate default\r\n\r\n//\r\n// Test extensions\r\n//\r\n\r\nassert.equal('txt', mime.extension(mime.types.text));\r\nassert.equal('html', mime.extension(mime.types.htm));\r\nassert.equal('bin', mime.extension('application/octet-stream'));\r\nassert.equal('bin', mime.extension('application/octet-stream '));\r\nassert.equal('html', mime.extension(' text/html; charset=UTF-8'));\r\nassert.equal('html', mime.extension('text/html; charset=UTF-8 '));\r\nassert.equal('html', mime.extension('text/html; charset=UTF-8'));\r\nassert.equal('html', mime.extension('text/html ; charset=UTF-8'));\r\nassert.equal('html', mime.extension('text/html;charset=UTF-8'));\r\nassert.equal('html', mime.extension('text/Html;charset=UTF-8'));\r\nassert.equal(undefined, mime.extension('unrecognized'));\r\n\r\n//\r\n// Test node.types lookups\r\n//\r\n\r\nassert.equal('font/woff', mime.lookup('file.woff'));\r\nassert.equal('application/octet-stream', mime.lookup('file.buffer'));\r\n// TODO: Uncomment once #157 is resolved\r\n// assert.equal('audio/mp4', mime.lookup('file.m4a'));\r\nassert.equal('font/otf', mime.lookup('file.otf'));\r\n\r\n//\r\n// Test charsets\r\n//\r\n\r\nassert.equal('UTF-8', mime.charsets.lookup('text/plain'));\r\nassert.equal('UTF-8', mime.charsets.lookup(mime.types.js));\r\nassert.equal('UTF-8', mime.charsets.lookup(mime.types.json));\r\nassert.equal(undefined, mime.charsets.lookup(mime.types.bin));\r\nassert.equal('fallback', mime.charsets.lookup('application/octet-stream', 'fallback'));\r\n\r\nconsole.log('\\nAll tests passed');\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}