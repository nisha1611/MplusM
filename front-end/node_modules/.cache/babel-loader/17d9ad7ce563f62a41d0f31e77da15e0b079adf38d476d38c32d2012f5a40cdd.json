{"ast":null,"code":"/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Tobias Koppers @sokra\r\n*/\n\n\"use strict\";\n\n/** @typedef {import(\"../../declarations/WebpackOptions\").LibraryOptions} LibraryOptions */\n/** @typedef {import(\"../../declarations/WebpackOptions\").WasmLoadingType} WasmLoadingType */\n/** @typedef {import(\"../Compiler\")} Compiler */\n\n/** @type {WeakMap<Compiler, Set<WasmLoadingType>>} */\nconst enabledTypes = new WeakMap();\nconst getEnabledTypes = compiler => {\n  let set = enabledTypes.get(compiler);\n  if (set === undefined) {\n    set = new Set();\n    enabledTypes.set(compiler, set);\n  }\n  return set;\n};\nclass EnableWasmLoadingPlugin {\n  /**\r\n   * @param {WasmLoadingType} type library type that should be available\r\n   */\n  constructor(type) {\n    this.type = type;\n  }\n\n  /**\r\n   * @param {Compiler} compiler the compiler instance\r\n   * @param {WasmLoadingType} type type of library\r\n   * @returns {void}\r\n   */\n  static setEnabled(compiler, type) {\n    getEnabledTypes(compiler).add(type);\n  }\n\n  /**\r\n   * @param {Compiler} compiler the compiler instance\r\n   * @param {WasmLoadingType} type type of library\r\n   * @returns {void}\r\n   */\n  static checkEnabled(compiler, type) {\n    if (!getEnabledTypes(compiler).has(type)) {\n      throw new Error(`Library type \"${type}\" is not enabled. ` + \"EnableWasmLoadingPlugin need to be used to enable this type of wasm loading. \" + 'This usually happens through the \"output.enabledWasmLoadingTypes\" option. ' + 'If you are using a function as entry which sets \"wasmLoading\", you need to add all potential library types to \"output.enabledWasmLoadingTypes\". ' + \"These types are enabled: \" + Array.from(getEnabledTypes(compiler)).join(\", \"));\n    }\n  }\n\n  /**\r\n   * Apply the plugin\r\n   * @param {Compiler} compiler the compiler instance\r\n   * @returns {void}\r\n   */\n  apply(compiler) {\n    const {\n      type\n    } = this;\n\n    // Only enable once\n    const enabled = getEnabledTypes(compiler);\n    if (enabled.has(type)) return;\n    enabled.add(type);\n    if (typeof type === \"string\") {\n      switch (type) {\n        case \"fetch\":\n          {\n            // TODO webpack 6 remove FetchCompileWasmPlugin\n            const FetchCompileWasmPlugin = require(\"../web/FetchCompileWasmPlugin\");\n            const FetchCompileAsyncWasmPlugin = require(\"../web/FetchCompileAsyncWasmPlugin\");\n            new FetchCompileWasmPlugin({\n              mangleImports: compiler.options.optimization.mangleWasmImports\n            }).apply(compiler);\n            new FetchCompileAsyncWasmPlugin().apply(compiler);\n            break;\n          }\n        case \"async-node\":\n          {\n            // TODO webpack 6 remove ReadFileCompileWasmPlugin\n            const ReadFileCompileWasmPlugin = require(\"../node/ReadFileCompileWasmPlugin\");\n            // @ts-expect-error typescript bug for duplicate require\n            const ReadFileCompileAsyncWasmPlugin = require(\"../node/ReadFileCompileAsyncWasmPlugin\");\n            new ReadFileCompileWasmPlugin({\n              mangleImports: compiler.options.optimization.mangleWasmImports\n            }).apply(compiler);\n            new ReadFileCompileAsyncWasmPlugin({\n              type\n            }).apply(compiler);\n            break;\n          }\n        case \"async-node-module\":\n          {\n            // @ts-expect-error typescript bug for duplicate require\n            const ReadFileCompileAsyncWasmPlugin = require(\"../node/ReadFileCompileAsyncWasmPlugin\");\n            new ReadFileCompileAsyncWasmPlugin({\n              type,\n              import: true\n            }).apply(compiler);\n            break;\n          }\n        case \"universal\":\n          throw new Error(\"Universal WebAssembly Loading is not implemented yet\");\n        default:\n          throw new Error(`Unsupported wasm loading type ${type}.\nPlugins which provide custom wasm loading types must call EnableWasmLoadingPlugin.setEnabled(compiler, type) to disable this error.`);\n      }\n    } else {\n      // TODO support plugin instances here\n      // apply them to the compiler\n    }\n  }\n}\nmodule.exports = EnableWasmLoadingPlugin;","map":{"version":3,"names":["enabledTypes","WeakMap","getEnabledTypes","compiler","set","get","undefined","Set","EnableWasmLoadingPlugin","constructor","type","setEnabled","add","checkEnabled","has","Error","Array","from","join","apply","enabled","FetchCompileWasmPlugin","require","FetchCompileAsyncWasmPlugin","mangleImports","options","optimization","mangleWasmImports","ReadFileCompileWasmPlugin","ReadFileCompileAsyncWasmPlugin","import","module","exports"],"sources":["C:/Users/91930/Desktop/Github projects/Pharmacy Demo/front-end/node_modules/webpack/lib/wasm/EnableWasmLoadingPlugin.js"],"sourcesContent":["/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Tobias Koppers @sokra\r\n*/\r\n\r\n\"use strict\";\r\n\r\n/** @typedef {import(\"../../declarations/WebpackOptions\").LibraryOptions} LibraryOptions */\r\n/** @typedef {import(\"../../declarations/WebpackOptions\").WasmLoadingType} WasmLoadingType */\r\n/** @typedef {import(\"../Compiler\")} Compiler */\r\n\r\n/** @type {WeakMap<Compiler, Set<WasmLoadingType>>} */\r\nconst enabledTypes = new WeakMap();\r\n\r\nconst getEnabledTypes = compiler => {\r\n\tlet set = enabledTypes.get(compiler);\r\n\tif (set === undefined) {\r\n\t\tset = new Set();\r\n\t\tenabledTypes.set(compiler, set);\r\n\t}\r\n\treturn set;\r\n};\r\n\r\nclass EnableWasmLoadingPlugin {\r\n\t/**\r\n\t * @param {WasmLoadingType} type library type that should be available\r\n\t */\r\n\tconstructor(type) {\r\n\t\tthis.type = type;\r\n\t}\r\n\r\n\t/**\r\n\t * @param {Compiler} compiler the compiler instance\r\n\t * @param {WasmLoadingType} type type of library\r\n\t * @returns {void}\r\n\t */\r\n\tstatic setEnabled(compiler, type) {\r\n\t\tgetEnabledTypes(compiler).add(type);\r\n\t}\r\n\r\n\t/**\r\n\t * @param {Compiler} compiler the compiler instance\r\n\t * @param {WasmLoadingType} type type of library\r\n\t * @returns {void}\r\n\t */\r\n\tstatic checkEnabled(compiler, type) {\r\n\t\tif (!getEnabledTypes(compiler).has(type)) {\r\n\t\t\tthrow new Error(\r\n\t\t\t\t`Library type \"${type}\" is not enabled. ` +\r\n\t\t\t\t\t\"EnableWasmLoadingPlugin need to be used to enable this type of wasm loading. \" +\r\n\t\t\t\t\t'This usually happens through the \"output.enabledWasmLoadingTypes\" option. ' +\r\n\t\t\t\t\t'If you are using a function as entry which sets \"wasmLoading\", you need to add all potential library types to \"output.enabledWasmLoadingTypes\". ' +\r\n\t\t\t\t\t\"These types are enabled: \" +\r\n\t\t\t\t\tArray.from(getEnabledTypes(compiler)).join(\", \")\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Apply the plugin\r\n\t * @param {Compiler} compiler the compiler instance\r\n\t * @returns {void}\r\n\t */\r\n\tapply(compiler) {\r\n\t\tconst { type } = this;\r\n\r\n\t\t// Only enable once\r\n\t\tconst enabled = getEnabledTypes(compiler);\r\n\t\tif (enabled.has(type)) return;\r\n\t\tenabled.add(type);\r\n\r\n\t\tif (typeof type === \"string\") {\r\n\t\t\tswitch (type) {\r\n\t\t\t\tcase \"fetch\": {\r\n\t\t\t\t\t// TODO webpack 6 remove FetchCompileWasmPlugin\r\n\t\t\t\t\tconst FetchCompileWasmPlugin = require(\"../web/FetchCompileWasmPlugin\");\r\n\t\t\t\t\tconst FetchCompileAsyncWasmPlugin = require(\"../web/FetchCompileAsyncWasmPlugin\");\r\n\t\t\t\t\tnew FetchCompileWasmPlugin({\r\n\t\t\t\t\t\tmangleImports: compiler.options.optimization.mangleWasmImports\r\n\t\t\t\t\t}).apply(compiler);\r\n\t\t\t\t\tnew FetchCompileAsyncWasmPlugin().apply(compiler);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tcase \"async-node\": {\r\n\t\t\t\t\t// TODO webpack 6 remove ReadFileCompileWasmPlugin\r\n\t\t\t\t\tconst ReadFileCompileWasmPlugin = require(\"../node/ReadFileCompileWasmPlugin\");\r\n\t\t\t\t\t// @ts-expect-error typescript bug for duplicate require\r\n\t\t\t\t\tconst ReadFileCompileAsyncWasmPlugin = require(\"../node/ReadFileCompileAsyncWasmPlugin\");\r\n\t\t\t\t\tnew ReadFileCompileWasmPlugin({\r\n\t\t\t\t\t\tmangleImports: compiler.options.optimization.mangleWasmImports\r\n\t\t\t\t\t}).apply(compiler);\r\n\t\t\t\t\tnew ReadFileCompileAsyncWasmPlugin({ type }).apply(compiler);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tcase \"async-node-module\": {\r\n\t\t\t\t\t// @ts-expect-error typescript bug for duplicate require\r\n\t\t\t\t\tconst ReadFileCompileAsyncWasmPlugin = require(\"../node/ReadFileCompileAsyncWasmPlugin\");\r\n\t\t\t\t\tnew ReadFileCompileAsyncWasmPlugin({ type, import: true }).apply(\r\n\t\t\t\t\t\tcompiler\r\n\t\t\t\t\t);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tcase \"universal\":\r\n\t\t\t\t\tthrow new Error(\r\n\t\t\t\t\t\t\"Universal WebAssembly Loading is not implemented yet\"\r\n\t\t\t\t\t);\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tthrow new Error(`Unsupported wasm loading type ${type}.\r\nPlugins which provide custom wasm loading types must call EnableWasmLoadingPlugin.setEnabled(compiler, type) to disable this error.`);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\t// TODO support plugin instances here\r\n\t\t\t// apply them to the compiler\r\n\t\t}\r\n\t}\r\n}\r\n\r\nmodule.exports = EnableWasmLoadingPlugin;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}