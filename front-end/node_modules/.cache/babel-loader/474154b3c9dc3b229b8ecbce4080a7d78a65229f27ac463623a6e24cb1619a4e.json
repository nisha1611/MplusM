{"ast":null,"code":"/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Tobias Koppers @sokra\r\n*/\n\n\"use strict\";\n\nconst {\n  ConcatSource,\n  PrefixSource,\n  RawSource\n} = require(\"webpack-sources\");\nconst {\n  RuntimeGlobals\n} = require(\"..\");\nconst HotUpdateChunk = require(\"../HotUpdateChunk\");\nconst Template = require(\"../Template\");\nconst {\n  getCompilationHooks\n} = require(\"./JavascriptModulesPlugin\");\nconst {\n  generateEntryStartup,\n  updateHashForEntryStartup\n} = require(\"./StartupHelpers\");\n\n/** @typedef {import(\"../Compiler\")} Compiler */\n\nclass ArrayPushCallbackChunkFormatPlugin {\n  /**\r\n   * Apply the plugin\r\n   * @param {Compiler} compiler the compiler instance\r\n   * @returns {void}\r\n   */\n  apply(compiler) {\n    compiler.hooks.thisCompilation.tap(\"ArrayPushCallbackChunkFormatPlugin\", compilation => {\n      compilation.hooks.additionalChunkRuntimeRequirements.tap(\"ArrayPushCallbackChunkFormatPlugin\", (chunk, set, _ref) => {\n        let {\n          chunkGraph\n        } = _ref;\n        if (chunk.hasRuntime()) return;\n        if (chunkGraph.getNumberOfEntryModules(chunk) > 0) {\n          set.add(RuntimeGlobals.onChunksLoaded);\n          set.add(RuntimeGlobals.require);\n        }\n        set.add(RuntimeGlobals.chunkCallback);\n      });\n      const hooks = getCompilationHooks(compilation);\n      hooks.renderChunk.tap(\"ArrayPushCallbackChunkFormatPlugin\", (modules, renderContext) => {\n        const {\n          chunk,\n          chunkGraph,\n          runtimeTemplate\n        } = renderContext;\n        const hotUpdateChunk = chunk instanceof HotUpdateChunk ? chunk : null;\n        const globalObject = runtimeTemplate.globalObject;\n        const source = new ConcatSource();\n        const runtimeModules = chunkGraph.getChunkRuntimeModulesInOrder(chunk);\n        if (hotUpdateChunk) {\n          const hotUpdateGlobal = runtimeTemplate.outputOptions.hotUpdateGlobal;\n          source.add(`${globalObject}[${JSON.stringify(hotUpdateGlobal)}](`);\n          source.add(`${JSON.stringify(chunk.id)},`);\n          source.add(modules);\n          if (runtimeModules.length > 0) {\n            source.add(\",\\n\");\n            const runtimePart = Template.renderChunkRuntimeModules(runtimeModules, renderContext);\n            source.add(runtimePart);\n          }\n          source.add(\")\");\n        } else {\n          const chunkLoadingGlobal = runtimeTemplate.outputOptions.chunkLoadingGlobal;\n          source.add(`(${globalObject}[${JSON.stringify(chunkLoadingGlobal)}] = ${globalObject}[${JSON.stringify(chunkLoadingGlobal)}] || []).push([`);\n          source.add(`${JSON.stringify(chunk.ids)},`);\n          source.add(modules);\n          const entries = Array.from(chunkGraph.getChunkEntryModulesWithChunkGroupIterable(chunk));\n          if (runtimeModules.length > 0 || entries.length > 0) {\n            const runtime = new ConcatSource((runtimeTemplate.supportsArrowFunction() ? \"__webpack_require__ =>\" : \"function(__webpack_require__)\") + \" { // webpackRuntimeModules\\n\");\n            if (runtimeModules.length > 0) {\n              runtime.add(Template.renderRuntimeModules(runtimeModules, {\n                ...renderContext,\n                codeGenerationResults: compilation.codeGenerationResults\n              }));\n            }\n            if (entries.length > 0) {\n              const startupSource = new RawSource(generateEntryStartup(chunkGraph, runtimeTemplate, entries, chunk, true));\n              runtime.add(hooks.renderStartup.call(startupSource, entries[entries.length - 1][0], {\n                ...renderContext,\n                inlined: false\n              }));\n              if (chunkGraph.getChunkRuntimeRequirements(chunk).has(RuntimeGlobals.returnExportsFromRuntime)) {\n                runtime.add(\"return __webpack_exports__;\\n\");\n              }\n            }\n            runtime.add(\"}\\n\");\n            source.add(\",\\n\");\n            source.add(new PrefixSource(\"/******/ \", runtime));\n          }\n          source.add(\"])\");\n        }\n        return source;\n      });\n      hooks.chunkHash.tap(\"ArrayPushCallbackChunkFormatPlugin\", (chunk, hash, _ref2) => {\n        let {\n          chunkGraph,\n          runtimeTemplate\n        } = _ref2;\n        if (chunk.hasRuntime()) return;\n        hash.update(`ArrayPushCallbackChunkFormatPlugin1${runtimeTemplate.outputOptions.chunkLoadingGlobal}${runtimeTemplate.outputOptions.hotUpdateGlobal}${runtimeTemplate.globalObject}`);\n        const entries = Array.from(chunkGraph.getChunkEntryModulesWithChunkGroupIterable(chunk));\n        updateHashForEntryStartup(hash, chunkGraph, entries, chunk);\n      });\n    });\n  }\n}\nmodule.exports = ArrayPushCallbackChunkFormatPlugin;","map":{"version":3,"names":["ConcatSource","PrefixSource","RawSource","require","RuntimeGlobals","HotUpdateChunk","Template","getCompilationHooks","generateEntryStartup","updateHashForEntryStartup","ArrayPushCallbackChunkFormatPlugin","apply","compiler","hooks","thisCompilation","tap","compilation","additionalChunkRuntimeRequirements","chunk","set","chunkGraph","hasRuntime","getNumberOfEntryModules","add","onChunksLoaded","chunkCallback","renderChunk","modules","renderContext","runtimeTemplate","hotUpdateChunk","globalObject","source","runtimeModules","getChunkRuntimeModulesInOrder","hotUpdateGlobal","outputOptions","JSON","stringify","id","length","runtimePart","renderChunkRuntimeModules","chunkLoadingGlobal","ids","entries","Array","from","getChunkEntryModulesWithChunkGroupIterable","runtime","supportsArrowFunction","renderRuntimeModules","codeGenerationResults","startupSource","renderStartup","call","inlined","getChunkRuntimeRequirements","has","returnExportsFromRuntime","chunkHash","hash","update","module","exports"],"sources":["C:/Users/91930/Desktop/Github projects/Pharmacy Demo/front-end/node_modules/webpack/lib/javascript/ArrayPushCallbackChunkFormatPlugin.js"],"sourcesContent":["/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Tobias Koppers @sokra\r\n*/\r\n\r\n\"use strict\";\r\n\r\nconst { ConcatSource, PrefixSource, RawSource } = require(\"webpack-sources\");\r\nconst { RuntimeGlobals } = require(\"..\");\r\nconst HotUpdateChunk = require(\"../HotUpdateChunk\");\r\nconst Template = require(\"../Template\");\r\nconst { getCompilationHooks } = require(\"./JavascriptModulesPlugin\");\r\nconst {\r\n\tgenerateEntryStartup,\r\n\tupdateHashForEntryStartup\r\n} = require(\"./StartupHelpers\");\r\n\r\n/** @typedef {import(\"../Compiler\")} Compiler */\r\n\r\nclass ArrayPushCallbackChunkFormatPlugin {\r\n\t/**\r\n\t * Apply the plugin\r\n\t * @param {Compiler} compiler the compiler instance\r\n\t * @returns {void}\r\n\t */\r\n\tapply(compiler) {\r\n\t\tcompiler.hooks.thisCompilation.tap(\r\n\t\t\t\"ArrayPushCallbackChunkFormatPlugin\",\r\n\t\t\tcompilation => {\r\n\t\t\t\tcompilation.hooks.additionalChunkRuntimeRequirements.tap(\r\n\t\t\t\t\t\"ArrayPushCallbackChunkFormatPlugin\",\r\n\t\t\t\t\t(chunk, set, { chunkGraph }) => {\r\n\t\t\t\t\t\tif (chunk.hasRuntime()) return;\r\n\t\t\t\t\t\tif (chunkGraph.getNumberOfEntryModules(chunk) > 0) {\r\n\t\t\t\t\t\t\tset.add(RuntimeGlobals.onChunksLoaded);\r\n\t\t\t\t\t\t\tset.add(RuntimeGlobals.require);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tset.add(RuntimeGlobals.chunkCallback);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t\tconst hooks = getCompilationHooks(compilation);\r\n\t\t\t\thooks.renderChunk.tap(\r\n\t\t\t\t\t\"ArrayPushCallbackChunkFormatPlugin\",\r\n\t\t\t\t\t(modules, renderContext) => {\r\n\t\t\t\t\t\tconst { chunk, chunkGraph, runtimeTemplate } = renderContext;\r\n\t\t\t\t\t\tconst hotUpdateChunk =\r\n\t\t\t\t\t\t\tchunk instanceof HotUpdateChunk ? chunk : null;\r\n\t\t\t\t\t\tconst globalObject = runtimeTemplate.globalObject;\r\n\t\t\t\t\t\tconst source = new ConcatSource();\r\n\t\t\t\t\t\tconst runtimeModules =\r\n\t\t\t\t\t\t\tchunkGraph.getChunkRuntimeModulesInOrder(chunk);\r\n\t\t\t\t\t\tif (hotUpdateChunk) {\r\n\t\t\t\t\t\t\tconst hotUpdateGlobal =\r\n\t\t\t\t\t\t\t\truntimeTemplate.outputOptions.hotUpdateGlobal;\r\n\t\t\t\t\t\t\tsource.add(\r\n\t\t\t\t\t\t\t\t`${globalObject}[${JSON.stringify(hotUpdateGlobal)}](`\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\tsource.add(`${JSON.stringify(chunk.id)},`);\r\n\t\t\t\t\t\t\tsource.add(modules);\r\n\t\t\t\t\t\t\tif (runtimeModules.length > 0) {\r\n\t\t\t\t\t\t\t\tsource.add(\",\\n\");\r\n\t\t\t\t\t\t\t\tconst runtimePart = Template.renderChunkRuntimeModules(\r\n\t\t\t\t\t\t\t\t\truntimeModules,\r\n\t\t\t\t\t\t\t\t\trenderContext\r\n\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\tsource.add(runtimePart);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tsource.add(\")\");\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tconst chunkLoadingGlobal =\r\n\t\t\t\t\t\t\t\truntimeTemplate.outputOptions.chunkLoadingGlobal;\r\n\t\t\t\t\t\t\tsource.add(\r\n\t\t\t\t\t\t\t\t`(${globalObject}[${JSON.stringify(\r\n\t\t\t\t\t\t\t\t\tchunkLoadingGlobal\r\n\t\t\t\t\t\t\t\t)}] = ${globalObject}[${JSON.stringify(\r\n\t\t\t\t\t\t\t\t\tchunkLoadingGlobal\r\n\t\t\t\t\t\t\t\t)}] || []).push([`\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\tsource.add(`${JSON.stringify(chunk.ids)},`);\r\n\t\t\t\t\t\t\tsource.add(modules);\r\n\t\t\t\t\t\t\tconst entries = Array.from(\r\n\t\t\t\t\t\t\t\tchunkGraph.getChunkEntryModulesWithChunkGroupIterable(chunk)\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\tif (runtimeModules.length > 0 || entries.length > 0) {\r\n\t\t\t\t\t\t\t\tconst runtime = new ConcatSource(\r\n\t\t\t\t\t\t\t\t\t(runtimeTemplate.supportsArrowFunction()\r\n\t\t\t\t\t\t\t\t\t\t? \"__webpack_require__ =>\"\r\n\t\t\t\t\t\t\t\t\t\t: \"function(__webpack_require__)\") +\r\n\t\t\t\t\t\t\t\t\t\t\" { // webpackRuntimeModules\\n\"\r\n\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\tif (runtimeModules.length > 0) {\r\n\t\t\t\t\t\t\t\t\truntime.add(\r\n\t\t\t\t\t\t\t\t\t\tTemplate.renderRuntimeModules(runtimeModules, {\r\n\t\t\t\t\t\t\t\t\t\t\t...renderContext,\r\n\t\t\t\t\t\t\t\t\t\t\tcodeGenerationResults: compilation.codeGenerationResults\r\n\t\t\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tif (entries.length > 0) {\r\n\t\t\t\t\t\t\t\t\tconst startupSource = new RawSource(\r\n\t\t\t\t\t\t\t\t\t\tgenerateEntryStartup(\r\n\t\t\t\t\t\t\t\t\t\t\tchunkGraph,\r\n\t\t\t\t\t\t\t\t\t\t\truntimeTemplate,\r\n\t\t\t\t\t\t\t\t\t\t\tentries,\r\n\t\t\t\t\t\t\t\t\t\t\tchunk,\r\n\t\t\t\t\t\t\t\t\t\t\ttrue\r\n\t\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\t\truntime.add(\r\n\t\t\t\t\t\t\t\t\t\thooks.renderStartup.call(\r\n\t\t\t\t\t\t\t\t\t\t\tstartupSource,\r\n\t\t\t\t\t\t\t\t\t\t\tentries[entries.length - 1][0],\r\n\t\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\t\t...renderContext,\r\n\t\t\t\t\t\t\t\t\t\t\t\tinlined: false\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\t\tif (\r\n\t\t\t\t\t\t\t\t\t\tchunkGraph\r\n\t\t\t\t\t\t\t\t\t\t\t.getChunkRuntimeRequirements(chunk)\r\n\t\t\t\t\t\t\t\t\t\t\t.has(RuntimeGlobals.returnExportsFromRuntime)\r\n\t\t\t\t\t\t\t\t\t) {\r\n\t\t\t\t\t\t\t\t\t\truntime.add(\"return __webpack_exports__;\\n\");\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\truntime.add(\"}\\n\");\r\n\t\t\t\t\t\t\t\tsource.add(\",\\n\");\r\n\t\t\t\t\t\t\t\tsource.add(new PrefixSource(\"/******/ \", runtime));\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tsource.add(\"])\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn source;\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t\thooks.chunkHash.tap(\r\n\t\t\t\t\t\"ArrayPushCallbackChunkFormatPlugin\",\r\n\t\t\t\t\t(chunk, hash, { chunkGraph, runtimeTemplate }) => {\r\n\t\t\t\t\t\tif (chunk.hasRuntime()) return;\r\n\t\t\t\t\t\thash.update(\r\n\t\t\t\t\t\t\t`ArrayPushCallbackChunkFormatPlugin1${runtimeTemplate.outputOptions.chunkLoadingGlobal}${runtimeTemplate.outputOptions.hotUpdateGlobal}${runtimeTemplate.globalObject}`\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t\tconst entries = Array.from(\r\n\t\t\t\t\t\t\tchunkGraph.getChunkEntryModulesWithChunkGroupIterable(chunk)\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t\tupdateHashForEntryStartup(hash, chunkGraph, entries, chunk);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n}\r\n\r\nmodule.exports = ArrayPushCallbackChunkFormatPlugin;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}