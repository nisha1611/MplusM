{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Sha256 = void 0;\nvar util_1 = require(\"@aws-crypto/util\");\nvar constants_1 = require(\"./constants\");\nvar util_locate_window_1 = require(\"@aws-sdk/util-locate-window\");\nvar Sha256 = /** @class */function () {\n  function Sha256(secret) {\n    this.toHash = new Uint8Array(0);\n    if (secret !== void 0) {\n      this.key = new Promise(function (resolve, reject) {\n        (0, util_locate_window_1.locateWindow)().crypto.subtle.importKey(\"raw\", (0, util_1.convertToBuffer)(secret), constants_1.SHA_256_HMAC_ALGO, false, [\"sign\"]).then(resolve, reject);\n      });\n      this.key.catch(function () {});\n    }\n  }\n  Sha256.prototype.update = function (data) {\n    if ((0, util_1.isEmptyData)(data)) {\n      return;\n    }\n    var update = (0, util_1.convertToBuffer)(data);\n    var typedArray = new Uint8Array(this.toHash.byteLength + update.byteLength);\n    typedArray.set(this.toHash, 0);\n    typedArray.set(update, this.toHash.byteLength);\n    this.toHash = typedArray;\n  };\n  Sha256.prototype.digest = function () {\n    var _this = this;\n    if (this.key) {\n      return this.key.then(function (key) {\n        return (0, util_locate_window_1.locateWindow)().crypto.subtle.sign(constants_1.SHA_256_HMAC_ALGO, key, _this.toHash).then(function (data) {\n          return new Uint8Array(data);\n        });\n      });\n    }\n    if ((0, util_1.isEmptyData)(this.toHash)) {\n      return Promise.resolve(constants_1.EMPTY_DATA_SHA_256);\n    }\n    return Promise.resolve().then(function () {\n      return (0, util_locate_window_1.locateWindow)().crypto.subtle.digest(constants_1.SHA_256_HASH, _this.toHash);\n    }).then(function (data) {\n      return Promise.resolve(new Uint8Array(data));\n    });\n  };\n  return Sha256;\n}();\nexports.Sha256 = Sha256;","map":{"version":3,"mappings":";;;;;;AACA;AACA;AAKA;AAEA;EAIE,gBAAYA,MAAmB;IAFvB,WAAM,GAAe,IAAIC,UAAU,CAAC,CAAC,CAAC;IAG5C,IAAID,MAAM,KAAK,KAAK,CAAC,EAAE;MACrB,IAAI,CAACE,GAAG,GAAG,IAAIC,OAAO,CAAC,UAACC,OAAO,EAAEC,MAAM;QACrC,qCAAY,GAAE,CACXC,MAAM,CAACC,MAAM,CAACC,SAAS,CACtB,KAAK,EACL,0BAAe,EAACR,MAAM,CAAC,EACvBS,6BAAiB,EACjB,KAAK,EACL,CAAC,MAAM,CAAC,CACT,CACAC,IAAI,CAACN,OAAO,EAAEC,MAAM,CAAC;MAC1B,CAAC,CAAC;MACF,IAAI,CAACH,GAAG,CAACS,KAAK,CAAC,aAAO,CAAC,CAAC;;EAE5B;EAEAC,uBAAM,GAAN,UAAOC,IAAgB;IACrB,IAAI,sBAAW,EAACA,IAAI,CAAC,EAAE;MACrB;;IAGF,IAAMC,MAAM,GAAG,0BAAe,EAACD,IAAI,CAAC;IACpC,IAAME,UAAU,GAAG,IAAId,UAAU,CAC/B,IAAI,CAACe,MAAM,CAACC,UAAU,GAAGH,MAAM,CAACG,UAAU,CAC3C;IACDF,UAAU,CAACG,GAAG,CAAC,IAAI,CAACF,MAAM,EAAE,CAAC,CAAC;IAC9BD,UAAU,CAACG,GAAG,CAACJ,MAAM,EAAE,IAAI,CAACE,MAAM,CAACC,UAAU,CAAC;IAC9C,IAAI,CAACD,MAAM,GAAGD,UAAU;EAC1B,CAAC;EAEDH,uBAAM,GAAN;IAAA;IACE,IAAI,IAAI,CAACV,GAAG,EAAE;MACZ,OAAO,IAAI,CAACA,GAAG,CAACQ,IAAI,CAAC,UAACR,GAAG;QACvB,4CAAY,GAAE,CACXI,MAAM,CAACC,MAAM,CAACY,IAAI,CAACV,6BAAiB,EAAEP,GAAG,EAAEkB,KAAI,CAACJ,MAAM,CAAC,CACvDN,IAAI,CAAC,UAACG,IAAI;UAAK,WAAIZ,UAAU,CAACY,IAAI,CAAC;QAApB,CAAoB,CAAC;MAFvC,CAEuC,CACxC;;IAGH,IAAI,sBAAW,EAAC,IAAI,CAACG,MAAM,CAAC,EAAE;MAC5B,OAAOb,OAAO,CAACC,OAAO,CAACK,8BAAkB,CAAC;;IAG5C,OAAON,OAAO,CAACC,OAAO,EAAE,CACrBM,IAAI,CAAC;MACJ,4CAAY,GAAE,CAACJ,MAAM,CAACC,MAAM,CAACc,MAAM,CAACZ,wBAAY,EAAEW,KAAI,CAACJ,MAAM,CAAC;IAA9D,CAA8D,CAC/D,CACAN,IAAI,CAAC,UAACG,IAAI;MAAK,cAAO,CAACT,OAAO,CAAC,IAAIH,UAAU,CAACY,IAAI,CAAC,CAAC;IAArC,CAAqC,CAAC;EAC1D,CAAC;EACH,aAAC;AAAD,CAAC,EAtDD;AAAaS","names":["secret","Uint8Array","key","Promise","resolve","reject","crypto","subtle","importKey","constants_1","then","catch","Sha256","data","update","typedArray","toHash","byteLength","set","sign","_this","digest","exports"],"sources":["C:\\Users\\91930\\Desktop\\Github projects\\Pharmacy Demo\\back-end\\node_modules\\@aws-crypto\\sha256-browser\\src\\webCryptoSha256.ts"],"sourcesContent":["import { Hash, SourceData } from \"@aws-sdk/types\";\nimport { isEmptyData, convertToBuffer } from \"@aws-crypto/util\";\nimport {\n  EMPTY_DATA_SHA_256,\n  SHA_256_HASH,\n  SHA_256_HMAC_ALGO,\n} from \"./constants\";\nimport { locateWindow } from \"@aws-sdk/util-locate-window\";\n\nexport class Sha256 implements Hash {\n  private readonly key: Promise<CryptoKey> | undefined;\n  private toHash: Uint8Array = new Uint8Array(0);\n\n  constructor(secret?: SourceData) {\n    if (secret !== void 0) {\n      this.key = new Promise((resolve, reject) => {\n        locateWindow()\n          .crypto.subtle.importKey(\n            \"raw\",\n            convertToBuffer(secret),\n            SHA_256_HMAC_ALGO,\n            false,\n            [\"sign\"]\n          )\n          .then(resolve, reject);\n      });\n      this.key.catch(() => {});\n    }\n  }\n\n  update(data: SourceData): void {\n    if (isEmptyData(data)) {\n      return;\n    }\n\n    const update = convertToBuffer(data);\n    const typedArray = new Uint8Array(\n      this.toHash.byteLength + update.byteLength\n    );\n    typedArray.set(this.toHash, 0);\n    typedArray.set(update, this.toHash.byteLength);\n    this.toHash = typedArray;\n  }\n\n  digest(): Promise<Uint8Array> {\n    if (this.key) {\n      return this.key.then((key) =>\n        locateWindow()\n          .crypto.subtle.sign(SHA_256_HMAC_ALGO, key, this.toHash)\n          .then((data) => new Uint8Array(data))\n      );\n    }\n\n    if (isEmptyData(this.toHash)) {\n      return Promise.resolve(EMPTY_DATA_SHA_256);\n    }\n\n    return Promise.resolve()\n      .then(() =>\n        locateWindow().crypto.subtle.digest(SHA_256_HASH, this.toHash)\n      )\n      .then((data) => Promise.resolve(new Uint8Array(data)));\n  }\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}