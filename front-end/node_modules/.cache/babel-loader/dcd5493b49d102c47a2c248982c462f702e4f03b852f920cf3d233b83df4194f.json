{"ast":null,"code":"'use strict';\n\nconst MongooseError = require('../../error/mongooseError');\nconst isMongooseObject = require('../isMongooseObject');\nconst setDottedPath = require('../path/setDottedPath');\nconst util = require('util');\n\n/**\r\n * Given an object that may contain dotted paths, flatten the paths out.\r\n * For example: `flattenObjectWithDottedPaths({ a: { 'b.c': 42 } })` => `{ a: { b: { c: 42 } } }`\r\n */\n\nmodule.exports = function flattenObjectWithDottedPaths(obj) {\n  if (obj == null || typeof obj !== 'object' || Array.isArray(obj)) {\n    return;\n  }\n  // Avoid Mongoose docs, like docs and maps, because these may cause infinite recursion\n  if (isMongooseObject(obj)) {\n    return;\n  }\n  const keys = Object.keys(obj);\n  for (const key of keys) {\n    const val = obj[key];\n    if (key.indexOf('.') !== -1) {\n      try {\n        delete obj[key];\n        setDottedPath(obj, key, val);\n      } catch (err) {\n        if (!(err instanceof TypeError)) {\n          throw err;\n        }\n        throw new MongooseError(`Conflicting dotted paths when setting document path, key: \"${key}\", value: ${util.inspect(val)}`);\n      }\n      continue;\n    }\n    flattenObjectWithDottedPaths(obj[key]);\n  }\n};","map":{"version":3,"names":["MongooseError","require","isMongooseObject","setDottedPath","util","module","exports","flattenObjectWithDottedPaths","obj","Array","isArray","keys","Object","key","val","indexOf","err","TypeError","inspect"],"sources":["C:/Users/91930/Desktop/Github projects/Pharmacy Demo/back-end/node_modules/mongoose/lib/helpers/path/flattenObjectWithDottedPaths.js"],"sourcesContent":["'use strict';\r\n\r\nconst MongooseError = require('../../error/mongooseError');\r\nconst isMongooseObject = require('../isMongooseObject');\r\nconst setDottedPath = require('../path/setDottedPath');\r\nconst util = require('util');\r\n\r\n/**\r\n * Given an object that may contain dotted paths, flatten the paths out.\r\n * For example: `flattenObjectWithDottedPaths({ a: { 'b.c': 42 } })` => `{ a: { b: { c: 42 } } }`\r\n */\r\n\r\nmodule.exports = function flattenObjectWithDottedPaths(obj) {\r\n  if (obj == null || typeof obj !== 'object' || Array.isArray(obj)) {\r\n    return;\r\n  }\r\n  // Avoid Mongoose docs, like docs and maps, because these may cause infinite recursion\r\n  if (isMongooseObject(obj)) {\r\n    return;\r\n  }\r\n  const keys = Object.keys(obj);\r\n  for (const key of keys) {\r\n    const val = obj[key];\r\n    if (key.indexOf('.') !== -1) {\r\n      try {\r\n        delete obj[key];\r\n        setDottedPath(obj, key, val);\r\n      } catch (err) {\r\n        if (!(err instanceof TypeError)) {\r\n          throw err;\r\n        }\r\n        throw new MongooseError(`Conflicting dotted paths when setting document path, key: \"${key}\", value: ${util.inspect(val)}`);\r\n      }\r\n      continue;\r\n    }\r\n\r\n    flattenObjectWithDottedPaths(obj[key]);\r\n  }\r\n};\r\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,aAAa,GAAGC,OAAO,CAAC,2BAA2B,CAAC;AAC1D,MAAMC,gBAAgB,GAAGD,OAAO,CAAC,qBAAqB,CAAC;AACvD,MAAME,aAAa,GAAGF,OAAO,CAAC,uBAAuB,CAAC;AACtD,MAAMG,IAAI,GAAGH,OAAO,CAAC,MAAM,CAAC;;AAE5B;AACA;AACA;AACA;;AAEAI,MAAM,CAACC,OAAO,GAAG,SAASC,4BAA4B,CAACC,GAAG,EAAE;EAC1D,IAAIA,GAAG,IAAI,IAAI,IAAI,OAAOA,GAAG,KAAK,QAAQ,IAAIC,KAAK,CAACC,OAAO,CAACF,GAAG,CAAC,EAAE;IAChE;EACF;EACA;EACA,IAAIN,gBAAgB,CAACM,GAAG,CAAC,EAAE;IACzB;EACF;EACA,MAAMG,IAAI,GAAGC,MAAM,CAACD,IAAI,CAACH,GAAG,CAAC;EAC7B,KAAK,MAAMK,GAAG,IAAIF,IAAI,EAAE;IACtB,MAAMG,GAAG,GAAGN,GAAG,CAACK,GAAG,CAAC;IACpB,IAAIA,GAAG,CAACE,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE;MAC3B,IAAI;QACF,OAAOP,GAAG,CAACK,GAAG,CAAC;QACfV,aAAa,CAACK,GAAG,EAAEK,GAAG,EAAEC,GAAG,CAAC;MAC9B,CAAC,CAAC,OAAOE,GAAG,EAAE;QACZ,IAAI,EAAEA,GAAG,YAAYC,SAAS,CAAC,EAAE;UAC/B,MAAMD,GAAG;QACX;QACA,MAAM,IAAIhB,aAAa,CAAE,8DAA6Da,GAAI,aAAYT,IAAI,CAACc,OAAO,CAACJ,GAAG,CAAE,EAAC,CAAC;MAC5H;MACA;IACF;IAEAP,4BAA4B,CAACC,GAAG,CAACK,GAAG,CAAC,CAAC;EACxC;AACF,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}