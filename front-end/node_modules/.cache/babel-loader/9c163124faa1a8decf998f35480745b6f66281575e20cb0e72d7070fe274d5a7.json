{"ast":null,"code":"'use strict';\n\nconst ArrayMethods = require('../../array/methods');\nconst Document = require('../../../document');\nconst castObjectId = require('../../../cast/objectid');\nconst getDiscriminatorByValue = require('../../../helpers/discriminator/getDiscriminatorByValue');\nconst internalToObjectOptions = require('../../../options').internalToObjectOptions;\nconst utils = require('../../../utils');\nconst isBsonType = require('../../../helpers/isBsonType');\nconst arrayParentSymbol = require('../../../helpers/symbols').arrayParentSymbol;\nconst arrayPathSymbol = require('../../../helpers/symbols').arrayPathSymbol;\nconst arraySchemaSymbol = require('../../../helpers/symbols').arraySchemaSymbol;\nconst documentArrayParent = require('../../../helpers/symbols').documentArrayParent;\nconst methods = {\n  /*!\r\n   * ignore\r\n   */\n\n  toBSON() {\n    return this.toObject(internalToObjectOptions);\n  },\n  /*!\r\n   * ignore\r\n   */\n\n  getArrayParent() {\n    return this[arrayParentSymbol];\n  },\n  /**\r\n   * Overrides MongooseArray#cast\r\n   *\r\n   * @method _cast\r\n   * @api private\r\n   * @memberOf MongooseDocumentArray\r\n   */\n\n  _cast(value, index) {\n    if (this[arraySchemaSymbol] == null) {\n      return value;\n    }\n    let Constructor = this[arraySchemaSymbol].casterConstructor;\n    const isInstance = Constructor.$isMongooseDocumentArray ? utils.isMongooseDocumentArray(value) : value instanceof Constructor;\n    if (isInstance ||\n    // Hack re: #5001, see #5005\n    value && value.constructor && value.constructor.baseCasterConstructor === Constructor) {\n      if (!(value[documentArrayParent] && value.__parentArray)) {\n        // value may have been created using array.create()\n        value[documentArrayParent] = this[arrayParentSymbol];\n        value.__parentArray = this;\n      }\n      value.$setIndex(index);\n      return value;\n    }\n    if (value === undefined || value === null) {\n      return null;\n    }\n\n    // handle cast('string') or cast(ObjectId) etc.\n    // only objects are permitted so we can safely assume that\n    // non-objects are to be interpreted as _id\n    if (Buffer.isBuffer(value) || isBsonType(value, 'ObjectID') || !utils.isObject(value)) {\n      value = {\n        _id: value\n      };\n    }\n    if (value && Constructor.discriminators && Constructor.schema && Constructor.schema.options && Constructor.schema.options.discriminatorKey) {\n      if (typeof value[Constructor.schema.options.discriminatorKey] === 'string' && Constructor.discriminators[value[Constructor.schema.options.discriminatorKey]]) {\n        Constructor = Constructor.discriminators[value[Constructor.schema.options.discriminatorKey]];\n      } else {\n        const constructorByValue = getDiscriminatorByValue(Constructor.discriminators, value[Constructor.schema.options.discriminatorKey]);\n        if (constructorByValue) {\n          Constructor = constructorByValue;\n        }\n      }\n    }\n    if (Constructor.$isMongooseDocumentArray) {\n      return Constructor.cast(value, this, undefined, undefined, index);\n    }\n    const ret = new Constructor(value, this, undefined, undefined, index);\n    ret.isNew = true;\n    return ret;\n  },\n  /**\r\n   * Searches array items for the first document with a matching _id.\r\n   *\r\n   * #### Example:\r\n   *\r\n   *     const embeddedDoc = m.array.id(some_id);\r\n   *\r\n   * @return {EmbeddedDocument|null} the subdocument or null if not found.\r\n   * @param {ObjectId|String|Number|Buffer} id\r\n   * @TODO cast to the _id based on schema for proper comparison\r\n   * @method id\r\n   * @api public\r\n   * @memberOf MongooseDocumentArray\r\n   */\n\n  id(id) {\n    let casted;\n    let sid;\n    let _id;\n    try {\n      casted = castObjectId(id).toString();\n    } catch (e) {\n      casted = null;\n    }\n    for (const val of this) {\n      if (!val) {\n        continue;\n      }\n      _id = val.get('_id');\n      if (_id === null || typeof _id === 'undefined') {\n        continue;\n      } else if (_id instanceof Document) {\n        sid || (sid = String(id));\n        if (sid == _id._id) {\n          return val;\n        }\n      } else if (!isBsonType(id, 'ObjectID') && !isBsonType(_id, 'ObjectID')) {\n        if (id == _id || utils.deepEqual(id, _id)) {\n          return val;\n        }\n      } else if (casted == _id) {\n        return val;\n      }\n    }\n    return null;\n  },\n  /**\r\n   * Returns a native js Array of plain js objects\r\n   *\r\n   * #### Note:\r\n   *\r\n   * _Each sub-document is converted to a plain object by calling its `#toObject` method._\r\n   *\r\n   * @param {Object} [options] optional options to pass to each documents `toObject` method call during conversion\r\n   * @return {Array}\r\n   * @method toObject\r\n   * @api public\r\n   * @memberOf MongooseDocumentArray\r\n   */\n\n  toObject(options) {\n    // `[].concat` coerces the return value into a vanilla JS array, rather\n    // than a Mongoose array.\n    return [].concat(this.map(function (doc) {\n      if (doc == null) {\n        return null;\n      }\n      if (typeof doc.toObject !== 'function') {\n        return doc;\n      }\n      return doc.toObject(options);\n    }));\n  },\n  $toObject() {\n    return this.constructor.prototype.toObject.apply(this, arguments);\n  },\n  /**\r\n   * Wraps [`Array#push`](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/push) with proper change tracking.\r\n   *\r\n   * @param {...Object} [args]\r\n   * @api public\r\n   * @method push\r\n   * @memberOf MongooseDocumentArray\r\n   */\n\n  push() {\n    const ret = ArrayMethods.push.apply(this, arguments);\n    _updateParentPopulated(this);\n    return ret;\n  },\n  /**\r\n   * Pulls items from the array atomically.\r\n   *\r\n   * @param {...Object} [args]\r\n   * @api public\r\n   * @method pull\r\n   * @memberOf MongooseDocumentArray\r\n   */\n\n  pull() {\n    const ret = ArrayMethods.pull.apply(this, arguments);\n    _updateParentPopulated(this);\n    return ret;\n  },\n  /**\r\n   * Wraps [`Array#shift`](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/unshift) with proper change tracking.\r\n   * @api private\r\n   */\n\n  shift() {\n    const ret = ArrayMethods.shift.apply(this, arguments);\n    _updateParentPopulated(this);\n    return ret;\n  },\n  /**\r\n   * Wraps [`Array#splice`](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/splice) with proper change tracking and casting.\r\n   * @api private\r\n   */\n\n  splice() {\n    const ret = ArrayMethods.splice.apply(this, arguments);\n    _updateParentPopulated(this);\n    return ret;\n  },\n  /**\r\n   * Helper for console.log\r\n   *\r\n   * @method inspect\r\n   * @api public\r\n   * @memberOf MongooseDocumentArray\r\n   */\n\n  inspect() {\n    return this.toObject();\n  },\n  /**\r\n   * Creates a subdocument casted to this schema.\r\n   *\r\n   * This is the same subdocument constructor used for casting.\r\n   *\r\n   * @param {Object} obj the value to cast to this arrays SubDocument schema\r\n   * @method create\r\n   * @api public\r\n   * @memberOf MongooseDocumentArray\r\n   */\n\n  create(obj) {\n    let Constructor = this[arraySchemaSymbol].casterConstructor;\n    if (obj && Constructor.discriminators && Constructor.schema && Constructor.schema.options && Constructor.schema.options.discriminatorKey) {\n      if (typeof obj[Constructor.schema.options.discriminatorKey] === 'string' && Constructor.discriminators[obj[Constructor.schema.options.discriminatorKey]]) {\n        Constructor = Constructor.discriminators[obj[Constructor.schema.options.discriminatorKey]];\n      } else {\n        const constructorByValue = getDiscriminatorByValue(Constructor.discriminators, obj[Constructor.schema.options.discriminatorKey]);\n        if (constructorByValue) {\n          Constructor = constructorByValue;\n        }\n      }\n    }\n    return new Constructor(obj, this);\n  },\n  /*!\r\n   * ignore\r\n   */\n\n  notify(event) {\n    const _this = this;\n    return function notify(val, _arr) {\n      _arr = _arr || _this;\n      let i = _arr.length;\n      while (i--) {\n        if (_arr[i] == null) {\n          continue;\n        }\n        switch (event) {\n          // only swap for save event for now, we may change this to all event types later\n          case 'save':\n            val = _this[i];\n            break;\n          default:\n            // NO-OP\n            break;\n        }\n        if (utils.isMongooseArray(_arr[i])) {\n          notify(val, _arr[i]);\n        } else if (_arr[i]) {\n          _arr[i].emit(event, val);\n        }\n      }\n    };\n  },\n  set(i, val, skipModified) {\n    const arr = this.__array;\n    if (skipModified) {\n      arr[i] = val;\n      return this;\n    }\n    const value = methods._cast.call(this, val, i);\n    methods._markModified.call(this, i);\n    arr[i] = value;\n    return this;\n  },\n  _markModified(elem, embeddedPath) {\n    const parent = this[arrayParentSymbol];\n    let dirtyPath;\n    if (parent) {\n      dirtyPath = this[arrayPathSymbol];\n      if (arguments.length) {\n        if (embeddedPath != null) {\n          // an embedded doc bubbled up the change\n          const index = elem.__index;\n          dirtyPath = dirtyPath + '.' + index + '.' + embeddedPath;\n        } else {\n          // directly set an index\n          dirtyPath = dirtyPath + '.' + elem;\n        }\n      }\n      if (dirtyPath != null && dirtyPath.endsWith('.$')) {\n        return this;\n      }\n      parent.markModified(dirtyPath, arguments.length !== 0 ? elem : parent);\n    }\n    return this;\n  }\n};\nmodule.exports = methods;\n\n/**\r\n * If this is a document array, each element may contain single\r\n * populated paths, so we need to modify the top-level document's\r\n * populated cache. See gh-8247, gh-8265.\r\n * @param {Array} arr\r\n * @api private\r\n */\n\nfunction _updateParentPopulated(arr) {\n  const parent = arr[arrayParentSymbol];\n  if (!parent || parent.$__.populated == null) return;\n  const populatedPaths = Object.keys(parent.$__.populated).filter(p => p.startsWith(arr[arrayPathSymbol] + '.'));\n  for (const path of populatedPaths) {\n    const remnant = path.slice((arr[arrayPathSymbol] + '.').length);\n    if (!Array.isArray(parent.$__.populated[path].value)) {\n      continue;\n    }\n    parent.$__.populated[path].value = arr.map(val => val.$populated(remnant));\n  }\n}","map":{"version":3,"names":["ArrayMethods","require","Document","castObjectId","getDiscriminatorByValue","internalToObjectOptions","utils","isBsonType","arrayParentSymbol","arrayPathSymbol","arraySchemaSymbol","documentArrayParent","methods","toBSON","toObject","getArrayParent","_cast","value","index","Constructor","casterConstructor","isInstance","$isMongooseDocumentArray","isMongooseDocumentArray","constructor","baseCasterConstructor","__parentArray","$setIndex","undefined","Buffer","isBuffer","isObject","_id","discriminators","schema","options","discriminatorKey","constructorByValue","cast","ret","isNew","id","casted","sid","toString","e","val","get","String","deepEqual","concat","map","doc","$toObject","prototype","apply","arguments","push","_updateParentPopulated","pull","shift","splice","inspect","create","obj","notify","event","_this","_arr","i","length","isMongooseArray","emit","set","skipModified","arr","__array","call","_markModified","elem","embeddedPath","parent","dirtyPath","__index","endsWith","markModified","module","exports","$__","populated","populatedPaths","Object","keys","filter","p","startsWith","path","remnant","slice","Array","isArray","$populated"],"sources":["C:/Users/91930/Desktop/Github projects/Pharmacy Demo/back-end/node_modules/mongoose/lib/types/DocumentArray/methods/index.js"],"sourcesContent":["'use strict';\r\n\r\nconst ArrayMethods = require('../../array/methods');\r\nconst Document = require('../../../document');\r\nconst castObjectId = require('../../../cast/objectid');\r\nconst getDiscriminatorByValue = require('../../../helpers/discriminator/getDiscriminatorByValue');\r\nconst internalToObjectOptions = require('../../../options').internalToObjectOptions;\r\nconst utils = require('../../../utils');\r\nconst isBsonType = require('../../../helpers/isBsonType');\r\n\r\nconst arrayParentSymbol = require('../../../helpers/symbols').arrayParentSymbol;\r\nconst arrayPathSymbol = require('../../../helpers/symbols').arrayPathSymbol;\r\nconst arraySchemaSymbol = require('../../../helpers/symbols').arraySchemaSymbol;\r\nconst documentArrayParent = require('../../../helpers/symbols').documentArrayParent;\r\n\r\nconst methods = {\r\n  /*!\r\n   * ignore\r\n   */\r\n\r\n  toBSON() {\r\n    return this.toObject(internalToObjectOptions);\r\n  },\r\n\r\n  /*!\r\n   * ignore\r\n   */\r\n\r\n  getArrayParent() {\r\n    return this[arrayParentSymbol];\r\n  },\r\n\r\n  /**\r\n   * Overrides MongooseArray#cast\r\n   *\r\n   * @method _cast\r\n   * @api private\r\n   * @memberOf MongooseDocumentArray\r\n   */\r\n\r\n  _cast(value, index) {\r\n    if (this[arraySchemaSymbol] == null) {\r\n      return value;\r\n    }\r\n    let Constructor = this[arraySchemaSymbol].casterConstructor;\r\n    const isInstance = Constructor.$isMongooseDocumentArray ?\r\n      utils.isMongooseDocumentArray(value) :\r\n      value instanceof Constructor;\r\n    if (isInstance ||\r\n        // Hack re: #5001, see #5005\r\n        (value && value.constructor && value.constructor.baseCasterConstructor === Constructor)) {\r\n      if (!(value[documentArrayParent] && value.__parentArray)) {\r\n        // value may have been created using array.create()\r\n        value[documentArrayParent] = this[arrayParentSymbol];\r\n        value.__parentArray = this;\r\n      }\r\n      value.$setIndex(index);\r\n      return value;\r\n    }\r\n\r\n    if (value === undefined || value === null) {\r\n      return null;\r\n    }\r\n\r\n    // handle cast('string') or cast(ObjectId) etc.\r\n    // only objects are permitted so we can safely assume that\r\n    // non-objects are to be interpreted as _id\r\n    if (Buffer.isBuffer(value) ||\r\n        isBsonType(value, 'ObjectID') || !utils.isObject(value)) {\r\n      value = { _id: value };\r\n    }\r\n\r\n    if (value &&\r\n        Constructor.discriminators &&\r\n        Constructor.schema &&\r\n        Constructor.schema.options &&\r\n        Constructor.schema.options.discriminatorKey) {\r\n      if (typeof value[Constructor.schema.options.discriminatorKey] === 'string' &&\r\n          Constructor.discriminators[value[Constructor.schema.options.discriminatorKey]]) {\r\n        Constructor = Constructor.discriminators[value[Constructor.schema.options.discriminatorKey]];\r\n      } else {\r\n        const constructorByValue = getDiscriminatorByValue(Constructor.discriminators, value[Constructor.schema.options.discriminatorKey]);\r\n        if (constructorByValue) {\r\n          Constructor = constructorByValue;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (Constructor.$isMongooseDocumentArray) {\r\n      return Constructor.cast(value, this, undefined, undefined, index);\r\n    }\r\n    const ret = new Constructor(value, this, undefined, undefined, index);\r\n    ret.isNew = true;\r\n    return ret;\r\n  },\r\n\r\n  /**\r\n   * Searches array items for the first document with a matching _id.\r\n   *\r\n   * #### Example:\r\n   *\r\n   *     const embeddedDoc = m.array.id(some_id);\r\n   *\r\n   * @return {EmbeddedDocument|null} the subdocument or null if not found.\r\n   * @param {ObjectId|String|Number|Buffer} id\r\n   * @TODO cast to the _id based on schema for proper comparison\r\n   * @method id\r\n   * @api public\r\n   * @memberOf MongooseDocumentArray\r\n   */\r\n\r\n  id(id) {\r\n    let casted;\r\n    let sid;\r\n    let _id;\r\n\r\n    try {\r\n      casted = castObjectId(id).toString();\r\n    } catch (e) {\r\n      casted = null;\r\n    }\r\n\r\n    for (const val of this) {\r\n      if (!val) {\r\n        continue;\r\n      }\r\n\r\n      _id = val.get('_id');\r\n\r\n      if (_id === null || typeof _id === 'undefined') {\r\n        continue;\r\n      } else if (_id instanceof Document) {\r\n        sid || (sid = String(id));\r\n        if (sid == _id._id) {\r\n          return val;\r\n        }\r\n      } else if (!isBsonType(id, 'ObjectID') && !isBsonType(_id, 'ObjectID')) {\r\n        if (id == _id || utils.deepEqual(id, _id)) {\r\n          return val;\r\n        }\r\n      } else if (casted == _id) {\r\n        return val;\r\n      }\r\n    }\r\n\r\n    return null;\r\n  },\r\n\r\n  /**\r\n   * Returns a native js Array of plain js objects\r\n   *\r\n   * #### Note:\r\n   *\r\n   * _Each sub-document is converted to a plain object by calling its `#toObject` method._\r\n   *\r\n   * @param {Object} [options] optional options to pass to each documents `toObject` method call during conversion\r\n   * @return {Array}\r\n   * @method toObject\r\n   * @api public\r\n   * @memberOf MongooseDocumentArray\r\n   */\r\n\r\n  toObject(options) {\r\n    // `[].concat` coerces the return value into a vanilla JS array, rather\r\n    // than a Mongoose array.\r\n    return [].concat(this.map(function(doc) {\r\n      if (doc == null) {\r\n        return null;\r\n      }\r\n      if (typeof doc.toObject !== 'function') {\r\n        return doc;\r\n      }\r\n      return doc.toObject(options);\r\n    }));\r\n  },\r\n\r\n  $toObject() {\r\n    return this.constructor.prototype.toObject.apply(this, arguments);\r\n  },\r\n\r\n  /**\r\n   * Wraps [`Array#push`](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/push) with proper change tracking.\r\n   *\r\n   * @param {...Object} [args]\r\n   * @api public\r\n   * @method push\r\n   * @memberOf MongooseDocumentArray\r\n   */\r\n\r\n  push() {\r\n    const ret = ArrayMethods.push.apply(this, arguments);\r\n\r\n    _updateParentPopulated(this);\r\n\r\n    return ret;\r\n  },\r\n\r\n  /**\r\n   * Pulls items from the array atomically.\r\n   *\r\n   * @param {...Object} [args]\r\n   * @api public\r\n   * @method pull\r\n   * @memberOf MongooseDocumentArray\r\n   */\r\n\r\n  pull() {\r\n    const ret = ArrayMethods.pull.apply(this, arguments);\r\n\r\n    _updateParentPopulated(this);\r\n\r\n    return ret;\r\n  },\r\n\r\n  /**\r\n   * Wraps [`Array#shift`](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/unshift) with proper change tracking.\r\n   * @api private\r\n   */\r\n\r\n  shift() {\r\n    const ret = ArrayMethods.shift.apply(this, arguments);\r\n\r\n    _updateParentPopulated(this);\r\n\r\n    return ret;\r\n  },\r\n\r\n  /**\r\n   * Wraps [`Array#splice`](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/splice) with proper change tracking and casting.\r\n   * @api private\r\n   */\r\n\r\n  splice() {\r\n    const ret = ArrayMethods.splice.apply(this, arguments);\r\n\r\n    _updateParentPopulated(this);\r\n\r\n    return ret;\r\n  },\r\n\r\n  /**\r\n   * Helper for console.log\r\n   *\r\n   * @method inspect\r\n   * @api public\r\n   * @memberOf MongooseDocumentArray\r\n   */\r\n\r\n  inspect() {\r\n    return this.toObject();\r\n  },\r\n\r\n  /**\r\n   * Creates a subdocument casted to this schema.\r\n   *\r\n   * This is the same subdocument constructor used for casting.\r\n   *\r\n   * @param {Object} obj the value to cast to this arrays SubDocument schema\r\n   * @method create\r\n   * @api public\r\n   * @memberOf MongooseDocumentArray\r\n   */\r\n\r\n  create(obj) {\r\n    let Constructor = this[arraySchemaSymbol].casterConstructor;\r\n    if (obj &&\r\n        Constructor.discriminators &&\r\n        Constructor.schema &&\r\n        Constructor.schema.options &&\r\n        Constructor.schema.options.discriminatorKey) {\r\n      if (typeof obj[Constructor.schema.options.discriminatorKey] === 'string' &&\r\n          Constructor.discriminators[obj[Constructor.schema.options.discriminatorKey]]) {\r\n        Constructor = Constructor.discriminators[obj[Constructor.schema.options.discriminatorKey]];\r\n      } else {\r\n        const constructorByValue = getDiscriminatorByValue(Constructor.discriminators, obj[Constructor.schema.options.discriminatorKey]);\r\n        if (constructorByValue) {\r\n          Constructor = constructorByValue;\r\n        }\r\n      }\r\n    }\r\n\r\n    return new Constructor(obj, this);\r\n  },\r\n\r\n  /*!\r\n   * ignore\r\n   */\r\n\r\n  notify(event) {\r\n    const _this = this;\r\n    return function notify(val, _arr) {\r\n      _arr = _arr || _this;\r\n      let i = _arr.length;\r\n      while (i--) {\r\n        if (_arr[i] == null) {\r\n          continue;\r\n        }\r\n        switch (event) {\r\n          // only swap for save event for now, we may change this to all event types later\r\n          case 'save':\r\n            val = _this[i];\r\n            break;\r\n          default:\r\n            // NO-OP\r\n            break;\r\n        }\r\n\r\n        if (utils.isMongooseArray(_arr[i])) {\r\n          notify(val, _arr[i]);\r\n        } else if (_arr[i]) {\r\n          _arr[i].emit(event, val);\r\n        }\r\n      }\r\n    };\r\n  },\r\n\r\n  set(i, val, skipModified) {\r\n    const arr = this.__array;\r\n    if (skipModified) {\r\n      arr[i] = val;\r\n      return this;\r\n    }\r\n    const value = methods._cast.call(this, val, i);\r\n    methods._markModified.call(this, i);\r\n    arr[i] = value;\r\n    return this;\r\n  },\r\n\r\n  _markModified(elem, embeddedPath) {\r\n    const parent = this[arrayParentSymbol];\r\n    let dirtyPath;\r\n\r\n    if (parent) {\r\n      dirtyPath = this[arrayPathSymbol];\r\n\r\n      if (arguments.length) {\r\n        if (embeddedPath != null) {\r\n          // an embedded doc bubbled up the change\r\n          const index = elem.__index;\r\n          dirtyPath = dirtyPath + '.' + index + '.' + embeddedPath;\r\n        } else {\r\n          // directly set an index\r\n          dirtyPath = dirtyPath + '.' + elem;\r\n        }\r\n      }\r\n\r\n      if (dirtyPath != null && dirtyPath.endsWith('.$')) {\r\n        return this;\r\n      }\r\n\r\n      parent.markModified(dirtyPath, arguments.length !== 0 ? elem : parent);\r\n    }\r\n\r\n    return this;\r\n  }\r\n};\r\n\r\nmodule.exports = methods;\r\n\r\n/**\r\n * If this is a document array, each element may contain single\r\n * populated paths, so we need to modify the top-level document's\r\n * populated cache. See gh-8247, gh-8265.\r\n * @param {Array} arr\r\n * @api private\r\n */\r\n\r\nfunction _updateParentPopulated(arr) {\r\n  const parent = arr[arrayParentSymbol];\r\n  if (!parent || parent.$__.populated == null) return;\r\n\r\n  const populatedPaths = Object.keys(parent.$__.populated).\r\n    filter(p => p.startsWith(arr[arrayPathSymbol] + '.'));\r\n\r\n  for (const path of populatedPaths) {\r\n    const remnant = path.slice((arr[arrayPathSymbol] + '.').length);\r\n    if (!Array.isArray(parent.$__.populated[path].value)) {\r\n      continue;\r\n    }\r\n\r\n    parent.$__.populated[path].value = arr.map(val => val.$populated(remnant));\r\n  }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}