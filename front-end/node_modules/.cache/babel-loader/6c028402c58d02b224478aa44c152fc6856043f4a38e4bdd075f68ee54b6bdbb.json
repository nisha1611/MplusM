{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.resolveAssumeRoleCredentials = exports.isAssumeRoleProfile = void 0;\nconst property_provider_1 = require(\"@aws-sdk/property-provider\");\nconst shared_ini_file_loader_1 = require(\"@aws-sdk/shared-ini-file-loader\");\nconst resolveCredentialSource_1 = require(\"./resolveCredentialSource\");\nconst resolveProfileData_1 = require(\"./resolveProfileData\");\nconst isAssumeRoleProfile = arg => Boolean(arg) && typeof arg === \"object\" && typeof arg.role_arn === \"string\" && [\"undefined\", \"string\"].indexOf(typeof arg.role_session_name) > -1 && [\"undefined\", \"string\"].indexOf(typeof arg.external_id) > -1 && [\"undefined\", \"string\"].indexOf(typeof arg.mfa_serial) > -1 && (isAssumeRoleWithSourceProfile(arg) || isAssumeRoleWithProviderProfile(arg));\nexports.isAssumeRoleProfile = isAssumeRoleProfile;\nconst isAssumeRoleWithSourceProfile = arg => typeof arg.source_profile === \"string\" && typeof arg.credential_source === \"undefined\";\nconst isAssumeRoleWithProviderProfile = arg => typeof arg.credential_source === \"string\" && typeof arg.source_profile === \"undefined\";\nconst resolveAssumeRoleCredentials = async function (profileName, profiles, options) {\n  let visitedProfiles = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  const data = profiles[profileName];\n  if (!options.roleAssumer) {\n    throw new property_provider_1.CredentialsProviderError(`Profile ${profileName} requires a role to be assumed, but no role assumption callback was provided.`, false);\n  }\n  const {\n    source_profile\n  } = data;\n  if (source_profile && source_profile in visitedProfiles) {\n    throw new property_provider_1.CredentialsProviderError(`Detected a cycle attempting to resolve credentials for profile` + ` ${(0, shared_ini_file_loader_1.getProfileName)(options)}. Profiles visited: ` + Object.keys(visitedProfiles).join(\", \"), false);\n  }\n  const sourceCredsProvider = source_profile ? (0, resolveProfileData_1.resolveProfileData)(source_profile, profiles, options, {\n    ...visitedProfiles,\n    [source_profile]: true\n  }) : (0, resolveCredentialSource_1.resolveCredentialSource)(data.credential_source, profileName)();\n  const params = {\n    RoleArn: data.role_arn,\n    RoleSessionName: data.role_session_name || `aws-sdk-js-${Date.now()}`,\n    ExternalId: data.external_id\n  };\n  const {\n    mfa_serial\n  } = data;\n  if (mfa_serial) {\n    if (!options.mfaCodeProvider) {\n      throw new property_provider_1.CredentialsProviderError(`Profile ${profileName} requires multi-factor authentication, but no MFA code callback was provided.`, false);\n    }\n    params.SerialNumber = mfa_serial;\n    params.TokenCode = await options.mfaCodeProvider(mfa_serial);\n  }\n  const sourceCreds = await sourceCredsProvider;\n  return options.roleAssumer(sourceCreds, params);\n};\nexports.resolveAssumeRoleCredentials = resolveAssumeRoleCredentials;","map":{"version":3,"names":["Object","defineProperty","exports","value","resolveAssumeRoleCredentials","isAssumeRoleProfile","property_provider_1","require","shared_ini_file_loader_1","resolveCredentialSource_1","resolveProfileData_1","arg","Boolean","role_arn","indexOf","role_session_name","external_id","mfa_serial","isAssumeRoleWithSourceProfile","isAssumeRoleWithProviderProfile","source_profile","credential_source","profileName","profiles","options","visitedProfiles","data","roleAssumer","CredentialsProviderError","getProfileName","keys","join","sourceCredsProvider","resolveProfileData","resolveCredentialSource","params","RoleArn","RoleSessionName","Date","now","ExternalId","mfaCodeProvider","SerialNumber","TokenCode","sourceCreds"],"sources":["C:/Users/91930/Desktop/Github projects/Pharmacy Demo/back-end/node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveAssumeRoleCredentials.js"],"sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.resolveAssumeRoleCredentials = exports.isAssumeRoleProfile = void 0;\r\nconst property_provider_1 = require(\"@aws-sdk/property-provider\");\r\nconst shared_ini_file_loader_1 = require(\"@aws-sdk/shared-ini-file-loader\");\r\nconst resolveCredentialSource_1 = require(\"./resolveCredentialSource\");\r\nconst resolveProfileData_1 = require(\"./resolveProfileData\");\r\nconst isAssumeRoleProfile = (arg) => Boolean(arg) &&\r\n    typeof arg === \"object\" &&\r\n    typeof arg.role_arn === \"string\" &&\r\n    [\"undefined\", \"string\"].indexOf(typeof arg.role_session_name) > -1 &&\r\n    [\"undefined\", \"string\"].indexOf(typeof arg.external_id) > -1 &&\r\n    [\"undefined\", \"string\"].indexOf(typeof arg.mfa_serial) > -1 &&\r\n    (isAssumeRoleWithSourceProfile(arg) || isAssumeRoleWithProviderProfile(arg));\r\nexports.isAssumeRoleProfile = isAssumeRoleProfile;\r\nconst isAssumeRoleWithSourceProfile = (arg) => typeof arg.source_profile === \"string\" && typeof arg.credential_source === \"undefined\";\r\nconst isAssumeRoleWithProviderProfile = (arg) => typeof arg.credential_source === \"string\" && typeof arg.source_profile === \"undefined\";\r\nconst resolveAssumeRoleCredentials = async (profileName, profiles, options, visitedProfiles = {}) => {\r\n    const data = profiles[profileName];\r\n    if (!options.roleAssumer) {\r\n        throw new property_provider_1.CredentialsProviderError(`Profile ${profileName} requires a role to be assumed, but no role assumption callback was provided.`, false);\r\n    }\r\n    const { source_profile } = data;\r\n    if (source_profile && source_profile in visitedProfiles) {\r\n        throw new property_provider_1.CredentialsProviderError(`Detected a cycle attempting to resolve credentials for profile` +\r\n            ` ${(0, shared_ini_file_loader_1.getProfileName)(options)}. Profiles visited: ` +\r\n            Object.keys(visitedProfiles).join(\", \"), false);\r\n    }\r\n    const sourceCredsProvider = source_profile\r\n        ? (0, resolveProfileData_1.resolveProfileData)(source_profile, profiles, options, {\r\n            ...visitedProfiles,\r\n            [source_profile]: true,\r\n        })\r\n        : (0, resolveCredentialSource_1.resolveCredentialSource)(data.credential_source, profileName)();\r\n    const params = {\r\n        RoleArn: data.role_arn,\r\n        RoleSessionName: data.role_session_name || `aws-sdk-js-${Date.now()}`,\r\n        ExternalId: data.external_id,\r\n    };\r\n    const { mfa_serial } = data;\r\n    if (mfa_serial) {\r\n        if (!options.mfaCodeProvider) {\r\n            throw new property_provider_1.CredentialsProviderError(`Profile ${profileName} requires multi-factor authentication, but no MFA code callback was provided.`, false);\r\n        }\r\n        params.SerialNumber = mfa_serial;\r\n        params.TokenCode = await options.mfaCodeProvider(mfa_serial);\r\n    }\r\n    const sourceCreds = await sourceCredsProvider;\r\n    return options.roleAssumer(sourceCreds, params);\r\n};\r\nexports.resolveAssumeRoleCredentials = resolveAssumeRoleCredentials;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}