{"ast":null,"code":"/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Tobias Koppers @sokra\r\n*/\n\n\"use strict\";\n\nconst util = require(\"util\");\nconst ModuleDependency = require(\"../dependencies/ModuleDependency\");\nconst formatLocation = require(\"../formatLocation\");\nconst {\n  LogType\n} = require(\"../logging/Logger\");\nconst AggressiveSplittingPlugin = require(\"../optimize/AggressiveSplittingPlugin\");\nconst SizeLimitsPlugin = require(\"../performance/SizeLimitsPlugin\");\nconst {\n  countIterable\n} = require(\"../util/IterableHelpers\");\nconst {\n  compareLocations,\n  compareChunksById,\n  compareNumbers,\n  compareIds,\n  concatComparators,\n  compareSelect,\n  compareModulesByIdentifier\n} = require(\"../util/comparators\");\nconst {\n  makePathsRelative,\n  parseResource\n} = require(\"../util/identifier\");\n\n/** @typedef {import(\"webpack-sources\").Source} Source */\n/** @typedef {import(\"../Chunk\")} Chunk */\n/** @typedef {import(\"../ChunkGroup\")} ChunkGroup */\n/** @typedef {import(\"../ChunkGroup\").OriginRecord} OriginRecord */\n/** @typedef {import(\"../Compilation\")} Compilation */\n/** @typedef {import(\"../Compilation\").Asset} Asset */\n/** @typedef {import(\"../Compilation\").AssetInfo} AssetInfo */\n/** @typedef {import(\"../Compilation\").NormalizedStatsOptions} NormalizedStatsOptions */\n/** @typedef {import(\"../Compiler\")} Compiler */\n/** @typedef {import(\"../Dependency\")} Dependency */\n/** @typedef {import(\"../Dependency\").DependencyLocation} DependencyLocation */\n/** @typedef {import(\"../Module\")} Module */\n/** @typedef {import(\"../ModuleGraphConnection\")} ModuleGraphConnection */\n/** @typedef {import(\"../ModuleProfile\")} ModuleProfile */\n/** @typedef {import(\"../RequestShortener\")} RequestShortener */\n/** @typedef {import(\"../WebpackError\")} WebpackError */\n/** @template T @typedef {import(\"../util/comparators\").Comparator<T>} Comparator<T> */\n/** @typedef {import(\"../util/runtime\").RuntimeSpec} RuntimeSpec */\n/** @typedef {import(\"../util/smartGrouping\").GroupConfig<any, object>} GroupConfig */\n/** @typedef {import(\"./StatsFactory\")} StatsFactory */\n/** @typedef {import(\"./StatsFactory\").StatsFactoryContext} StatsFactoryContext */\n\n/** @typedef {KnownStatsCompilation & Record<string, any>} StatsCompilation */\n/**\r\n * @typedef {Object} KnownStatsCompilation\r\n * @property {any=} env\r\n * @property {string=} name\r\n * @property {string=} hash\r\n * @property {string=} version\r\n * @property {number=} time\r\n * @property {number=} builtAt\r\n * @property {boolean=} needAdditionalPass\r\n * @property {string=} publicPath\r\n * @property {string=} outputPath\r\n * @property {Record<string, string[]>=} assetsByChunkName\r\n * @property {StatsAsset[]=} assets\r\n * @property {number=} filteredAssets\r\n * @property {StatsChunk[]=} chunks\r\n * @property {StatsModule[]=} modules\r\n * @property {number=} filteredModules\r\n * @property {Record<string, StatsChunkGroup>=} entrypoints\r\n * @property {Record<string, StatsChunkGroup>=} namedChunkGroups\r\n * @property {StatsError[]=} errors\r\n * @property {number=} errorsCount\r\n * @property {StatsError[]=} warnings\r\n * @property {number=} warningsCount\r\n * @property {StatsCompilation[]=} children\r\n * @property {Record<string, StatsLogging>=} logging\r\n */\n\n/** @typedef {KnownStatsLogging & Record<string, any>} StatsLogging */\n/**\r\n * @typedef {Object} KnownStatsLogging\r\n * @property {StatsLoggingEntry[]} entries\r\n * @property {number} filteredEntries\r\n * @property {boolean} debug\r\n */\n\n/** @typedef {KnownStatsLoggingEntry & Record<string, any>} StatsLoggingEntry */\n/**\r\n * @typedef {Object} KnownStatsLoggingEntry\r\n * @property {string} type\r\n * @property {string} message\r\n * @property {string[]=} trace\r\n * @property {StatsLoggingEntry[]=} children\r\n * @property {any[]=} args\r\n * @property {number=} time\r\n */\n\n/** @typedef {KnownStatsAsset & Record<string, any>} StatsAsset */\n/**\r\n * @typedef {Object} KnownStatsAsset\r\n * @property {string} type\r\n * @property {string} name\r\n * @property {AssetInfo} info\r\n * @property {number} size\r\n * @property {boolean} emitted\r\n * @property {boolean} comparedForEmit\r\n * @property {boolean} cached\r\n * @property {StatsAsset[]=} related\r\n * @property {(string|number)[]=} chunkNames\r\n * @property {(string|number)[]=} chunkIdHints\r\n * @property {(string|number)[]=} chunks\r\n * @property {(string|number)[]=} auxiliaryChunkNames\r\n * @property {(string|number)[]=} auxiliaryChunks\r\n * @property {(string|number)[]=} auxiliaryChunkIdHints\r\n * @property {number=} filteredRelated\r\n * @property {boolean=} isOverSizeLimit\r\n */\n\n/** @typedef {KnownStatsChunkGroup & Record<string, any>} StatsChunkGroup */\n/**\r\n * @typedef {Object} KnownStatsChunkGroup\r\n * @property {string=} name\r\n * @property {(string|number)[]=} chunks\r\n * @property {({ name: string, size?: number })[]=} assets\r\n * @property {number=} filteredAssets\r\n * @property {number=} assetsSize\r\n * @property {({ name: string, size?: number })[]=} auxiliaryAssets\r\n * @property {number=} filteredAuxiliaryAssets\r\n * @property {number=} auxiliaryAssetsSize\r\n * @property {{ [x: string]: StatsChunkGroup[] }=} children\r\n * @property {{ [x: string]: string[] }=} childAssets\r\n * @property {boolean=} isOverSizeLimit\r\n */\n\n/** @typedef {KnownStatsModule & Record<string, any>} StatsModule */\n/**\r\n * @typedef {Object} KnownStatsModule\r\n * @property {string=} type\r\n * @property {string=} moduleType\r\n * @property {string=} layer\r\n * @property {string=} identifier\r\n * @property {string=} name\r\n * @property {string=} nameForCondition\r\n * @property {number=} index\r\n * @property {number=} preOrderIndex\r\n * @property {number=} index2\r\n * @property {number=} postOrderIndex\r\n * @property {number=} size\r\n * @property {{[x: string]: number}=} sizes\r\n * @property {boolean=} cacheable\r\n * @property {boolean=} built\r\n * @property {boolean=} codeGenerated\r\n * @property {boolean=} buildTimeExecuted\r\n * @property {boolean=} cached\r\n * @property {boolean=} optional\r\n * @property {boolean=} orphan\r\n * @property {string|number=} id\r\n * @property {string|number=} issuerId\r\n * @property {(string|number)[]=} chunks\r\n * @property {(string|number)[]=} assets\r\n * @property {boolean=} dependent\r\n * @property {string=} issuer\r\n * @property {string=} issuerName\r\n * @property {StatsModuleIssuer[]=} issuerPath\r\n * @property {boolean=} failed\r\n * @property {number=} errors\r\n * @property {number=} warnings\r\n * @property {StatsProfile=} profile\r\n * @property {StatsModuleReason[]=} reasons\r\n * @property {(boolean | string[])=} usedExports\r\n * @property {string[]=} providedExports\r\n * @property {string[]=} optimizationBailout\r\n * @property {number=} depth\r\n * @property {StatsModule[]=} modules\r\n * @property {number=} filteredModules\r\n * @property {ReturnType<Source[\"source\"]>=} source\r\n */\n\n/** @typedef {KnownStatsProfile & Record<string, any>} StatsProfile */\n/**\r\n * @typedef {Object} KnownStatsProfile\r\n * @property {number} total\r\n * @property {number} resolving\r\n * @property {number} restoring\r\n * @property {number} building\r\n * @property {number} integration\r\n * @property {number} storing\r\n * @property {number} additionalResolving\r\n * @property {number} additionalIntegration\r\n * @property {number} factory\r\n * @property {number} dependencies\r\n */\n\n/** @typedef {KnownStatsModuleIssuer & Record<string, any>} StatsModuleIssuer */\n/**\r\n * @typedef {Object} KnownStatsModuleIssuer\r\n * @property {string=} identifier\r\n * @property {string=} name\r\n * @property {(string|number)=} id\r\n * @property {StatsProfile=} profile\r\n */\n\n/** @typedef {KnownStatsModuleReason & Record<string, any>} StatsModuleReason */\n/**\r\n * @typedef {Object} KnownStatsModuleReason\r\n * @property {string=} moduleIdentifier\r\n * @property {string=} module\r\n * @property {string=} moduleName\r\n * @property {string=} resolvedModuleIdentifier\r\n * @property {string=} resolvedModule\r\n * @property {string=} type\r\n * @property {boolean} active\r\n * @property {string=} explanation\r\n * @property {string=} userRequest\r\n * @property {string=} loc\r\n * @property {(string|number)=} moduleId\r\n * @property {(string|number)=} resolvedModuleId\r\n */\n\n/** @typedef {KnownStatsChunk & Record<string, any>} StatsChunk */\n/**\r\n * @typedef {Object} KnownStatsChunk\r\n * @property {boolean} rendered\r\n * @property {boolean} initial\r\n * @property {boolean} entry\r\n * @property {boolean} recorded\r\n * @property {string=} reason\r\n * @property {number} size\r\n * @property {Record<string, number>=} sizes\r\n * @property {string[]=} names\r\n * @property {string[]=} idHints\r\n * @property {string[]=} runtime\r\n * @property {string[]=} files\r\n * @property {string[]=} auxiliaryFiles\r\n * @property {string} hash\r\n * @property {Record<string, (string|number)[]>=} childrenByOrder\r\n * @property {(string|number)=} id\r\n * @property {(string|number)[]=} siblings\r\n * @property {(string|number)[]=} parents\r\n * @property {(string|number)[]=} children\r\n * @property {StatsModule[]=} modules\r\n * @property {number=} filteredModules\r\n * @property {StatsChunkOrigin[]=} origins\r\n */\n\n/** @typedef {KnownStatsChunkOrigin & Record<string, any>} StatsChunkOrigin */\n/**\r\n * @typedef {Object} KnownStatsChunkOrigin\r\n * @property {string=} module\r\n * @property {string=} moduleIdentifier\r\n * @property {string=} moduleName\r\n * @property {string=} loc\r\n * @property {string=} request\r\n * @property {(string|number)=} moduleId\r\n */\n\n/** @typedef {KnownStatsModuleTraceItem & Record<string, any>} StatsModuleTraceItem */\n/**\r\n * @typedef {Object} KnownStatsModuleTraceItem\r\n * @property {string=} originIdentifier\r\n * @property {string=} originName\r\n * @property {string=} moduleIdentifier\r\n * @property {string=} moduleName\r\n * @property {StatsModuleTraceDependency[]=} dependencies\r\n * @property {(string|number)=} originId\r\n * @property {(string|number)=} moduleId\r\n */\n\n/** @typedef {KnownStatsModuleTraceDependency & Record<string, any>} StatsModuleTraceDependency */\n/**\r\n * @typedef {Object} KnownStatsModuleTraceDependency\r\n * @property {string=} loc\r\n */\n\n/** @typedef {KnownStatsError & Record<string, any>} StatsError */\n/**\r\n * @typedef {Object} KnownStatsError\r\n * @property {string} message\r\n * @property {string=} chunkName\r\n * @property {boolean=} chunkEntry\r\n * @property {boolean=} chunkInitial\r\n * @property {string=} file\r\n * @property {string=} moduleIdentifier\r\n * @property {string=} moduleName\r\n * @property {string=} loc\r\n * @property {string|number=} chunkId\r\n * @property {string|number=} moduleId\r\n * @property {StatsModuleTraceItem[]=} moduleTrace\r\n * @property {any=} details\r\n * @property {string=} stack\r\n */\n\n/** @typedef {Asset & { type: string, related: PreprocessedAsset[] }} PreprocessedAsset */\n\n/**\r\n * @template T\r\n * @template O\r\n * @typedef {Record<string, (object: O, data: T, context: StatsFactoryContext, options: NormalizedStatsOptions, factory: StatsFactory) => void>} ExtractorsByOption\r\n */\n\n/**\r\n * @typedef {Object} SimpleExtractors\r\n * @property {ExtractorsByOption<Compilation, StatsCompilation>} compilation\r\n * @property {ExtractorsByOption<PreprocessedAsset, StatsAsset>} asset\r\n * @property {ExtractorsByOption<PreprocessedAsset, StatsAsset>} asset$visible\r\n * @property {ExtractorsByOption<{ name: string, chunkGroup: ChunkGroup }, StatsChunkGroup>} chunkGroup\r\n * @property {ExtractorsByOption<Module, StatsModule>} module\r\n * @property {ExtractorsByOption<Module, StatsModule>} module$visible\r\n * @property {ExtractorsByOption<Module, StatsModuleIssuer>} moduleIssuer\r\n * @property {ExtractorsByOption<ModuleProfile, StatsProfile>} profile\r\n * @property {ExtractorsByOption<ModuleGraphConnection, StatsModuleReason>} moduleReason\r\n * @property {ExtractorsByOption<Chunk, StatsChunk>} chunk\r\n * @property {ExtractorsByOption<OriginRecord, StatsChunkOrigin>} chunkOrigin\r\n * @property {ExtractorsByOption<WebpackError, StatsError>} error\r\n * @property {ExtractorsByOption<WebpackError, StatsError>} warning\r\n * @property {ExtractorsByOption<{ origin: Module, module: Module }, StatsModuleTraceItem>} moduleTraceItem\r\n * @property {ExtractorsByOption<Dependency, StatsModuleTraceDependency>} moduleTraceDependency\r\n */\n\n/**\r\n * @template T\r\n * @template I\r\n * @param {Iterable<T>} items items to select from\r\n * @param {function(T): Iterable<I>} selector selector function to select values from item\r\n * @returns {I[]} array of values\r\n */\nconst uniqueArray = (items, selector) => {\n  /** @type {Set<I>} */\n  const set = new Set();\n  for (const item of items) {\n    for (const i of selector(item)) {\n      set.add(i);\n    }\n  }\n  return Array.from(set);\n};\n\n/**\r\n * @template T\r\n * @template I\r\n * @param {Iterable<T>} items items to select from\r\n * @param {function(T): Iterable<I>} selector selector function to select values from item\r\n * @param {Comparator<I>} comparator comparator function\r\n * @returns {I[]} array of values\r\n */\nconst uniqueOrderedArray = (items, selector, comparator) => {\n  return uniqueArray(items, selector).sort(comparator);\n};\n\n/** @template T @template R @typedef {{ [P in keyof T]: R }} MappedValues<T, R> */\n\n/**\r\n * @template T\r\n * @template R\r\n * @param {T} obj object to be mapped\r\n * @param {function(T[keyof T], keyof T): R} fn mapping function\r\n * @returns {MappedValues<T, R>} mapped object\r\n */\nconst mapObject = (obj, fn) => {\n  const newObj = Object.create(null);\n  for (const key of Object.keys(obj)) {\n    newObj[key] = fn(obj[key], /** @type {keyof T} */key);\n  }\n  return newObj;\n};\n\n/**\r\n * @param {Compilation} compilation the compilation\r\n * @param {function(Compilation, string): any[]} getItems get items\r\n * @returns {number} total number\r\n */\nconst countWithChildren = (compilation, getItems) => {\n  let count = getItems(compilation, \"\").length;\n  for (const child of compilation.children) {\n    count += countWithChildren(child, (c, type) => getItems(c, `.children[].compilation${type}`));\n  }\n  return count;\n};\n\n/** @type {ExtractorsByOption<WebpackError | string, StatsError>} */\nconst EXTRACT_ERROR = {\n  _: (object, error, context, _ref) => {\n    let {\n      requestShortener\n    } = _ref;\n    // TODO webpack 6 disallow strings in the errors/warnings list\n    if (typeof error === \"string\") {\n      object.message = error;\n    } else {\n      if (error.chunk) {\n        object.chunkName = error.chunk.name;\n        object.chunkEntry = error.chunk.hasRuntime();\n        object.chunkInitial = error.chunk.canBeInitial();\n      }\n      if (error.file) {\n        object.file = error.file;\n      }\n      if (error.module) {\n        object.moduleIdentifier = error.module.identifier();\n        object.moduleName = error.module.readableIdentifier(requestShortener);\n      }\n      if (error.loc) {\n        object.loc = formatLocation(error.loc);\n      }\n      object.message = error.message;\n    }\n  },\n  ids: (object, error, _ref2) => {\n    let {\n      compilation: {\n        chunkGraph\n      }\n    } = _ref2;\n    if (typeof error !== \"string\") {\n      if (error.chunk) {\n        object.chunkId = error.chunk.id;\n      }\n      if (error.module) {\n        object.moduleId = chunkGraph.getModuleId(error.module);\n      }\n    }\n  },\n  moduleTrace: (object, error, context, options, factory) => {\n    if (typeof error !== \"string\" && error.module) {\n      const {\n        type,\n        compilation: {\n          moduleGraph\n        }\n      } = context;\n      /** @type {Set<Module>} */\n      const visitedModules = new Set();\n      const moduleTrace = [];\n      let current = error.module;\n      while (current) {\n        if (visitedModules.has(current)) break; // circular (technically impossible, but how knows)\n        visitedModules.add(current);\n        const origin = moduleGraph.getIssuer(current);\n        if (!origin) break;\n        moduleTrace.push({\n          origin,\n          module: current\n        });\n        current = origin;\n      }\n      object.moduleTrace = factory.create(`${type}.moduleTrace`, moduleTrace, context);\n    }\n  },\n  errorDetails: (object, error, _ref3, _ref4) => {\n    let {\n      type,\n      compilation,\n      cachedGetErrors,\n      cachedGetWarnings\n    } = _ref3;\n    let {\n      errorDetails\n    } = _ref4;\n    if (typeof error !== \"string\" && (errorDetails === true || type.endsWith(\".error\") && cachedGetErrors(compilation).length < 3)) {\n      object.details = error.details;\n    }\n  },\n  errorStack: (object, error) => {\n    if (typeof error !== \"string\") {\n      object.stack = error.stack;\n    }\n  }\n};\n\n/** @type {SimpleExtractors} */\nconst SIMPLE_EXTRACTORS = {\n  compilation: {\n    _: (object, compilation, context, options) => {\n      if (!context.makePathsRelative) {\n        context.makePathsRelative = makePathsRelative.bindContextCache(compilation.compiler.context, compilation.compiler.root);\n      }\n      if (!context.cachedGetErrors) {\n        const map = new WeakMap();\n        context.cachedGetErrors = compilation => {\n          return map.get(compilation) || (errors => (map.set(compilation, errors), errors))(compilation.getErrors());\n        };\n      }\n      if (!context.cachedGetWarnings) {\n        const map = new WeakMap();\n        context.cachedGetWarnings = compilation => {\n          return map.get(compilation) || (warnings => (map.set(compilation, warnings), warnings))(compilation.getWarnings());\n        };\n      }\n      if (compilation.name) {\n        object.name = compilation.name;\n      }\n      if (compilation.needAdditionalPass) {\n        object.needAdditionalPass = true;\n      }\n      const {\n        logging,\n        loggingDebug,\n        loggingTrace\n      } = options;\n      if (logging || loggingDebug && loggingDebug.length > 0) {\n        const util = require(\"util\");\n        object.logging = {};\n        let acceptedTypes;\n        let collapsedGroups = false;\n        switch (logging) {\n          default:\n            acceptedTypes = new Set();\n            break;\n          case \"error\":\n            acceptedTypes = new Set([LogType.error]);\n            break;\n          case \"warn\":\n            acceptedTypes = new Set([LogType.error, LogType.warn]);\n            break;\n          case \"info\":\n            acceptedTypes = new Set([LogType.error, LogType.warn, LogType.info]);\n            break;\n          case \"log\":\n            acceptedTypes = new Set([LogType.error, LogType.warn, LogType.info, LogType.log, LogType.group, LogType.groupEnd, LogType.groupCollapsed, LogType.clear]);\n            break;\n          case \"verbose\":\n            acceptedTypes = new Set([LogType.error, LogType.warn, LogType.info, LogType.log, LogType.group, LogType.groupEnd, LogType.groupCollapsed, LogType.profile, LogType.profileEnd, LogType.time, LogType.status, LogType.clear]);\n            collapsedGroups = true;\n            break;\n        }\n        const cachedMakePathsRelative = makePathsRelative.bindContextCache(options.context, compilation.compiler.root);\n        let depthInCollapsedGroup = 0;\n        for (const [origin, logEntries] of compilation.logging) {\n          const debugMode = loggingDebug.some(fn => fn(origin));\n          if (logging === false && !debugMode) continue;\n          /** @type {KnownStatsLoggingEntry[]} */\n          const groupStack = [];\n          /** @type {KnownStatsLoggingEntry[]} */\n          const rootList = [];\n          let currentList = rootList;\n          let processedLogEntries = 0;\n          for (const entry of logEntries) {\n            let type = entry.type;\n            if (!debugMode && !acceptedTypes.has(type)) continue;\n\n            // Expand groups in verbose and debug modes\n            if (type === LogType.groupCollapsed && (debugMode || collapsedGroups)) type = LogType.group;\n            if (depthInCollapsedGroup === 0) {\n              processedLogEntries++;\n            }\n            if (type === LogType.groupEnd) {\n              groupStack.pop();\n              if (groupStack.length > 0) {\n                currentList = groupStack[groupStack.length - 1].children;\n              } else {\n                currentList = rootList;\n              }\n              if (depthInCollapsedGroup > 0) depthInCollapsedGroup--;\n              continue;\n            }\n            let message = undefined;\n            if (entry.type === LogType.time) {\n              message = `${entry.args[0]}: ${entry.args[1] * 1000 + entry.args[2] / 1000000} ms`;\n            } else if (entry.args && entry.args.length > 0) {\n              message = util.format(entry.args[0], ...entry.args.slice(1));\n            }\n            /** @type {KnownStatsLoggingEntry} */\n            const newEntry = {\n              ...entry,\n              type,\n              message,\n              trace: loggingTrace ? entry.trace : undefined,\n              children: type === LogType.group || type === LogType.groupCollapsed ? [] : undefined\n            };\n            currentList.push(newEntry);\n            if (newEntry.children) {\n              groupStack.push(newEntry);\n              currentList = newEntry.children;\n              if (depthInCollapsedGroup > 0) {\n                depthInCollapsedGroup++;\n              } else if (type === LogType.groupCollapsed) {\n                depthInCollapsedGroup = 1;\n              }\n            }\n          }\n          let name = cachedMakePathsRelative(origin).replace(/\\|/g, \" \");\n          if (name in object.logging) {\n            let i = 1;\n            while (`${name}#${i}` in object.logging) {\n              i++;\n            }\n            name = `${name}#${i}`;\n          }\n          object.logging[name] = {\n            entries: rootList,\n            filteredEntries: logEntries.length - processedLogEntries,\n            debug: debugMode\n          };\n        }\n      }\n    },\n    hash: (object, compilation) => {\n      object.hash = compilation.hash;\n    },\n    version: object => {\n      object.version = require(\"../../package.json\").version;\n    },\n    env: (object, compilation, context, _ref5) => {\n      let {\n        _env\n      } = _ref5;\n      object.env = _env;\n    },\n    timings: (object, compilation) => {\n      object.time = compilation.endTime - compilation.startTime;\n    },\n    builtAt: (object, compilation) => {\n      object.builtAt = compilation.endTime;\n    },\n    publicPath: (object, compilation) => {\n      object.publicPath = compilation.getPath(compilation.outputOptions.publicPath);\n    },\n    outputPath: (object, compilation) => {\n      object.outputPath = compilation.outputOptions.path;\n    },\n    assets: (object, compilation, context, options, factory) => {\n      const {\n        type\n      } = context;\n      /** @type {Map<string, Chunk[]>} */\n      const compilationFileToChunks = new Map();\n      /** @type {Map<string, Chunk[]>} */\n      const compilationAuxiliaryFileToChunks = new Map();\n      for (const chunk of compilation.chunks) {\n        for (const file of chunk.files) {\n          let array = compilationFileToChunks.get(file);\n          if (array === undefined) {\n            array = [];\n            compilationFileToChunks.set(file, array);\n          }\n          array.push(chunk);\n        }\n        for (const file of chunk.auxiliaryFiles) {\n          let array = compilationAuxiliaryFileToChunks.get(file);\n          if (array === undefined) {\n            array = [];\n            compilationAuxiliaryFileToChunks.set(file, array);\n          }\n          array.push(chunk);\n        }\n      }\n      /** @type {Map<string, PreprocessedAsset>} */\n      const assetMap = new Map();\n      /** @type {Set<PreprocessedAsset>} */\n      const assets = new Set();\n      for (const asset of compilation.getAssets()) {\n        /** @type {PreprocessedAsset} */\n        const item = {\n          ...asset,\n          type: \"asset\",\n          related: undefined\n        };\n        assets.add(item);\n        assetMap.set(asset.name, item);\n      }\n      for (const item of assetMap.values()) {\n        const related = item.info.related;\n        if (!related) continue;\n        for (const type of Object.keys(related)) {\n          const relatedEntry = related[type];\n          const deps = Array.isArray(relatedEntry) ? relatedEntry : [relatedEntry];\n          for (const dep of deps) {\n            const depItem = assetMap.get(dep);\n            if (!depItem) continue;\n            assets.delete(depItem);\n            depItem.type = type;\n            item.related = item.related || [];\n            item.related.push(depItem);\n          }\n        }\n      }\n      object.assetsByChunkName = {};\n      for (const [file, chunks] of compilationFileToChunks) {\n        for (const chunk of chunks) {\n          const name = chunk.name;\n          if (!name) continue;\n          if (!Object.prototype.hasOwnProperty.call(object.assetsByChunkName, name)) {\n            object.assetsByChunkName[name] = [];\n          }\n          object.assetsByChunkName[name].push(file);\n        }\n      }\n      const groupedAssets = factory.create(`${type}.assets`, Array.from(assets), {\n        ...context,\n        compilationFileToChunks,\n        compilationAuxiliaryFileToChunks\n      });\n      const limited = spaceLimited(groupedAssets, options.assetsSpace);\n      object.assets = limited.children;\n      object.filteredAssets = limited.filteredChildren;\n    },\n    chunks: (object, compilation, context, options, factory) => {\n      const {\n        type\n      } = context;\n      object.chunks = factory.create(`${type}.chunks`, Array.from(compilation.chunks), context);\n    },\n    modules: (object, compilation, context, options, factory) => {\n      const {\n        type\n      } = context;\n      const array = Array.from(compilation.modules);\n      const groupedModules = factory.create(`${type}.modules`, array, context);\n      const limited = spaceLimited(groupedModules, options.modulesSpace);\n      object.modules = limited.children;\n      object.filteredModules = limited.filteredChildren;\n    },\n    entrypoints: (object, compilation, context, _ref6, factory) => {\n      let {\n        entrypoints,\n        chunkGroups,\n        chunkGroupAuxiliary,\n        chunkGroupChildren\n      } = _ref6;\n      const {\n        type\n      } = context;\n      const array = Array.from(compilation.entrypoints, _ref7 => {\n        let [key, value] = _ref7;\n        return {\n          name: key,\n          chunkGroup: value\n        };\n      });\n      if (entrypoints === \"auto\" && !chunkGroups) {\n        if (array.length > 5) return;\n        if (!chunkGroupChildren && array.every(_ref8 => {\n          let {\n            chunkGroup\n          } = _ref8;\n          if (chunkGroup.chunks.length !== 1) return false;\n          const chunk = chunkGroup.chunks[0];\n          return chunk.files.size === 1 && (!chunkGroupAuxiliary || chunk.auxiliaryFiles.size === 0);\n        })) {\n          return;\n        }\n      }\n      object.entrypoints = factory.create(`${type}.entrypoints`, array, context);\n    },\n    chunkGroups: (object, compilation, context, options, factory) => {\n      const {\n        type\n      } = context;\n      const array = Array.from(compilation.namedChunkGroups, _ref9 => {\n        let [key, value] = _ref9;\n        return {\n          name: key,\n          chunkGroup: value\n        };\n      });\n      object.namedChunkGroups = factory.create(`${type}.namedChunkGroups`, array, context);\n    },\n    errors: (object, compilation, context, options, factory) => {\n      const {\n        type,\n        cachedGetErrors\n      } = context;\n      object.errors = factory.create(`${type}.errors`, cachedGetErrors(compilation), context);\n    },\n    errorsCount: (object, compilation, _ref10) => {\n      let {\n        cachedGetErrors\n      } = _ref10;\n      object.errorsCount = countWithChildren(compilation, c => cachedGetErrors(c));\n    },\n    warnings: (object, compilation, context, options, factory) => {\n      const {\n        type,\n        cachedGetWarnings\n      } = context;\n      object.warnings = factory.create(`${type}.warnings`, cachedGetWarnings(compilation), context);\n    },\n    warningsCount: (object, compilation, context, _ref11, factory) => {\n      let {\n        warningsFilter\n      } = _ref11;\n      const {\n        type,\n        cachedGetWarnings\n      } = context;\n      object.warningsCount = countWithChildren(compilation, (c, childType) => {\n        if (!warningsFilter && warningsFilter.length === 0) return cachedGetWarnings(c);\n        return factory.create(`${type}${childType}.warnings`, cachedGetWarnings(c), context).filter(warning => {\n          const warningString = Object.keys(warning).map(key => `${warning[key]}`).join(\"\\n\");\n          return !warningsFilter.some(filter => filter(warning, warningString));\n        });\n      });\n    },\n    errorDetails: (object, compilation, _ref12, _ref13) => {\n      let {\n        cachedGetErrors,\n        cachedGetWarnings\n      } = _ref12;\n      let {\n        errorDetails,\n        errors,\n        warnings\n      } = _ref13;\n      if (errorDetails === \"auto\") {\n        if (warnings) {\n          const warnings = cachedGetWarnings(compilation);\n          object.filteredWarningDetailsCount = warnings.map(e => typeof e !== \"string\" && e.details).filter(Boolean).length;\n        }\n        if (errors) {\n          const errors = cachedGetErrors(compilation);\n          if (errors.length >= 3) {\n            object.filteredErrorDetailsCount = errors.map(e => typeof e !== \"string\" && e.details).filter(Boolean).length;\n          }\n        }\n      }\n    },\n    children: (object, compilation, context, options, factory) => {\n      const {\n        type\n      } = context;\n      object.children = factory.create(`${type}.children`, compilation.children, context);\n    }\n  },\n  asset: {\n    _: (object, asset, context, options, factory) => {\n      const {\n        compilation\n      } = context;\n      object.type = asset.type;\n      object.name = asset.name;\n      object.size = asset.source.size();\n      object.emitted = compilation.emittedAssets.has(asset.name);\n      object.comparedForEmit = compilation.comparedForEmitAssets.has(asset.name);\n      const cached = !object.emitted && !object.comparedForEmit;\n      object.cached = cached;\n      object.info = asset.info;\n      if (!cached || options.cachedAssets) {\n        Object.assign(object, factory.create(`${context.type}$visible`, asset, context));\n      }\n    }\n  },\n  asset$visible: {\n    _: (object, asset, _ref14) => {\n      let {\n        compilation,\n        compilationFileToChunks,\n        compilationAuxiliaryFileToChunks\n      } = _ref14;\n      const chunks = compilationFileToChunks.get(asset.name) || [];\n      const auxiliaryChunks = compilationAuxiliaryFileToChunks.get(asset.name) || [];\n      object.chunkNames = uniqueOrderedArray(chunks, c => c.name ? [c.name] : [], compareIds);\n      object.chunkIdHints = uniqueOrderedArray(chunks, c => Array.from(c.idNameHints), compareIds);\n      object.auxiliaryChunkNames = uniqueOrderedArray(auxiliaryChunks, c => c.name ? [c.name] : [], compareIds);\n      object.auxiliaryChunkIdHints = uniqueOrderedArray(auxiliaryChunks, c => Array.from(c.idNameHints), compareIds);\n      object.filteredRelated = asset.related ? asset.related.length : undefined;\n    },\n    relatedAssets: (object, asset, context, options, factory) => {\n      const {\n        type\n      } = context;\n      object.related = factory.create(`${type.slice(0, -8)}.related`, asset.related, context);\n      object.filteredRelated = asset.related ? asset.related.length - object.related.length : undefined;\n    },\n    ids: (object, asset, _ref15) => {\n      let {\n        compilationFileToChunks,\n        compilationAuxiliaryFileToChunks\n      } = _ref15;\n      const chunks = compilationFileToChunks.get(asset.name) || [];\n      const auxiliaryChunks = compilationAuxiliaryFileToChunks.get(asset.name) || [];\n      object.chunks = uniqueOrderedArray(chunks, c => c.ids, compareIds);\n      object.auxiliaryChunks = uniqueOrderedArray(auxiliaryChunks, c => c.ids, compareIds);\n    },\n    performance: (object, asset) => {\n      object.isOverSizeLimit = SizeLimitsPlugin.isOverSizeLimit(asset.source);\n    }\n  },\n  chunkGroup: {\n    _: (object, _ref16, _ref17, _ref18) => {\n      let {\n        name,\n        chunkGroup\n      } = _ref16;\n      let {\n        compilation,\n        compilation: {\n          moduleGraph,\n          chunkGraph\n        }\n      } = _ref17;\n      let {\n        ids,\n        chunkGroupAuxiliary,\n        chunkGroupChildren,\n        chunkGroupMaxAssets\n      } = _ref18;\n      const children = chunkGroupChildren && chunkGroup.getChildrenByOrders(moduleGraph, chunkGraph);\n      /**\r\n       * @param {string} name Name\r\n       * @returns {{ name: string, size: number }} Asset object\r\n       */\n      const toAsset = name => {\n        const asset = compilation.getAsset(name);\n        return {\n          name,\n          size: asset ? asset.info.size : -1\n        };\n      };\n      /** @type {(total: number, asset: { size: number }) => number} */\n      const sizeReducer = (total, _ref19) => {\n        let {\n          size\n        } = _ref19;\n        return total + size;\n      };\n      const assets = uniqueArray(chunkGroup.chunks, c => c.files).map(toAsset);\n      const auxiliaryAssets = uniqueOrderedArray(chunkGroup.chunks, c => c.auxiliaryFiles, compareIds).map(toAsset);\n      const assetsSize = assets.reduce(sizeReducer, 0);\n      const auxiliaryAssetsSize = auxiliaryAssets.reduce(sizeReducer, 0);\n      /** @type {KnownStatsChunkGroup} */\n      const statsChunkGroup = {\n        name,\n        chunks: ids ? chunkGroup.chunks.map(c => c.id) : undefined,\n        assets: assets.length <= chunkGroupMaxAssets ? assets : undefined,\n        filteredAssets: assets.length <= chunkGroupMaxAssets ? 0 : assets.length,\n        assetsSize,\n        auxiliaryAssets: chunkGroupAuxiliary && auxiliaryAssets.length <= chunkGroupMaxAssets ? auxiliaryAssets : undefined,\n        filteredAuxiliaryAssets: chunkGroupAuxiliary && auxiliaryAssets.length <= chunkGroupMaxAssets ? 0 : auxiliaryAssets.length,\n        auxiliaryAssetsSize,\n        children: children ? mapObject(children, groups => groups.map(group => {\n          const assets = uniqueArray(group.chunks, c => c.files).map(toAsset);\n          const auxiliaryAssets = uniqueOrderedArray(group.chunks, c => c.auxiliaryFiles, compareIds).map(toAsset);\n\n          /** @type {KnownStatsChunkGroup} */\n          const childStatsChunkGroup = {\n            name: group.name,\n            chunks: ids ? group.chunks.map(c => c.id) : undefined,\n            assets: assets.length <= chunkGroupMaxAssets ? assets : undefined,\n            filteredAssets: assets.length <= chunkGroupMaxAssets ? 0 : assets.length,\n            auxiliaryAssets: chunkGroupAuxiliary && auxiliaryAssets.length <= chunkGroupMaxAssets ? auxiliaryAssets : undefined,\n            filteredAuxiliaryAssets: chunkGroupAuxiliary && auxiliaryAssets.length <= chunkGroupMaxAssets ? 0 : auxiliaryAssets.length\n          };\n          return childStatsChunkGroup;\n        })) : undefined,\n        childAssets: children ? mapObject(children, groups => {\n          /** @type {Set<string>} */\n          const set = new Set();\n          for (const group of groups) {\n            for (const chunk of group.chunks) {\n              for (const asset of chunk.files) {\n                set.add(asset);\n              }\n            }\n          }\n          return Array.from(set);\n        }) : undefined\n      };\n      Object.assign(object, statsChunkGroup);\n    },\n    performance: (object, _ref20) => {\n      let {\n        chunkGroup\n      } = _ref20;\n      object.isOverSizeLimit = SizeLimitsPlugin.isOverSizeLimit(chunkGroup);\n    }\n  },\n  module: {\n    _: (object, module, context, options, factory) => {\n      const {\n        compilation,\n        type\n      } = context;\n      const built = compilation.builtModules.has(module);\n      const codeGenerated = compilation.codeGeneratedModules.has(module);\n      const buildTimeExecuted = compilation.buildTimeExecutedModules.has(module);\n      /** @type {{[x: string]: number}} */\n      const sizes = {};\n      for (const sourceType of module.getSourceTypes()) {\n        sizes[sourceType] = module.size(sourceType);\n      }\n      /** @type {KnownStatsModule} */\n      const statsModule = {\n        type: \"module\",\n        moduleType: module.type,\n        layer: module.layer,\n        size: module.size(),\n        sizes,\n        built,\n        codeGenerated,\n        buildTimeExecuted,\n        cached: !built && !codeGenerated\n      };\n      Object.assign(object, statsModule);\n      if (built || codeGenerated || options.cachedModules) {\n        Object.assign(object, factory.create(`${type}$visible`, module, context));\n      }\n    }\n  },\n  module$visible: {\n    _: (object, module, context, _ref21, factory) => {\n      let {\n        requestShortener\n      } = _ref21;\n      const {\n        compilation,\n        type,\n        rootModules\n      } = context;\n      const {\n        moduleGraph\n      } = compilation;\n      /** @type {Module[]} */\n      const path = [];\n      const issuer = moduleGraph.getIssuer(module);\n      let current = issuer;\n      while (current) {\n        path.push(current);\n        current = moduleGraph.getIssuer(current);\n      }\n      path.reverse();\n      const profile = moduleGraph.getProfile(module);\n      const errors = module.getErrors();\n      const errorsCount = errors !== undefined ? countIterable(errors) : 0;\n      const warnings = module.getWarnings();\n      const warningsCount = warnings !== undefined ? countIterable(warnings) : 0;\n      /** @type {{[x: string]: number}} */\n      const sizes = {};\n      for (const sourceType of module.getSourceTypes()) {\n        sizes[sourceType] = module.size(sourceType);\n      }\n      /** @type {KnownStatsModule} */\n      const statsModule = {\n        identifier: module.identifier(),\n        name: module.readableIdentifier(requestShortener),\n        nameForCondition: module.nameForCondition(),\n        index: moduleGraph.getPreOrderIndex(module),\n        preOrderIndex: moduleGraph.getPreOrderIndex(module),\n        index2: moduleGraph.getPostOrderIndex(module),\n        postOrderIndex: moduleGraph.getPostOrderIndex(module),\n        cacheable: module.buildInfo.cacheable,\n        optional: module.isOptional(moduleGraph),\n        orphan: !type.endsWith(\"module.modules[].module$visible\") && compilation.chunkGraph.getNumberOfModuleChunks(module) === 0,\n        dependent: rootModules ? !rootModules.has(module) : undefined,\n        issuer: issuer && issuer.identifier(),\n        issuerName: issuer && issuer.readableIdentifier(requestShortener),\n        issuerPath: issuer && factory.create(`${type.slice(0, -8)}.issuerPath`, path, context),\n        failed: errorsCount > 0,\n        errors: errorsCount,\n        warnings: warningsCount\n      };\n      Object.assign(object, statsModule);\n      if (profile) {\n        object.profile = factory.create(`${type.slice(0, -8)}.profile`, profile, context);\n      }\n    },\n    ids: (object, module, _ref22) => {\n      let {\n        compilation: {\n          chunkGraph,\n          moduleGraph\n        }\n      } = _ref22;\n      object.id = chunkGraph.getModuleId(module);\n      const issuer = moduleGraph.getIssuer(module);\n      object.issuerId = issuer && chunkGraph.getModuleId(issuer);\n      object.chunks = Array.from(chunkGraph.getOrderedModuleChunksIterable(module, compareChunksById), chunk => chunk.id);\n    },\n    moduleAssets: (object, module) => {\n      object.assets = module.buildInfo.assets ? Object.keys(module.buildInfo.assets) : [];\n    },\n    reasons: (object, module, context, options, factory) => {\n      const {\n        type,\n        compilation: {\n          moduleGraph\n        }\n      } = context;\n      const groupsReasons = factory.create(`${type.slice(0, -8)}.reasons`, Array.from(moduleGraph.getIncomingConnections(module)), context);\n      const limited = spaceLimited(groupsReasons, options.reasonsSpace);\n      object.reasons = limited.children;\n      object.filteredReasons = limited.filteredChildren;\n    },\n    usedExports: (object, module, _ref23) => {\n      let {\n        runtime,\n        compilation: {\n          moduleGraph\n        }\n      } = _ref23;\n      const usedExports = moduleGraph.getUsedExports(module, runtime);\n      if (usedExports === null) {\n        object.usedExports = null;\n      } else if (typeof usedExports === \"boolean\") {\n        object.usedExports = usedExports;\n      } else {\n        object.usedExports = Array.from(usedExports);\n      }\n    },\n    providedExports: (object, module, _ref24) => {\n      let {\n        compilation: {\n          moduleGraph\n        }\n      } = _ref24;\n      const providedExports = moduleGraph.getProvidedExports(module);\n      object.providedExports = Array.isArray(providedExports) ? providedExports : null;\n    },\n    optimizationBailout: (object, module, _ref25, _ref26) => {\n      let {\n        compilation: {\n          moduleGraph\n        }\n      } = _ref25;\n      let {\n        requestShortener\n      } = _ref26;\n      object.optimizationBailout = moduleGraph.getOptimizationBailout(module).map(item => {\n        if (typeof item === \"function\") return item(requestShortener);\n        return item;\n      });\n    },\n    depth: (object, module, _ref27) => {\n      let {\n        compilation: {\n          moduleGraph\n        }\n      } = _ref27;\n      object.depth = moduleGraph.getDepth(module);\n    },\n    nestedModules: (object, module, context, options, factory) => {\n      const {\n        type\n      } = context;\n      const innerModules = /** @type {Module & { modules?: Module[] }} */module.modules;\n      if (Array.isArray(innerModules)) {\n        const groupedModules = factory.create(`${type.slice(0, -8)}.modules`, innerModules, context);\n        const limited = spaceLimited(groupedModules, options.nestedModulesSpace);\n        object.modules = limited.children;\n        object.filteredModules = limited.filteredChildren;\n      }\n    },\n    source: (object, module) => {\n      const originalSource = module.originalSource();\n      if (originalSource) {\n        object.source = originalSource.source();\n      }\n    }\n  },\n  profile: {\n    _: (object, profile) => {\n      /** @type {KnownStatsProfile} */\n      const statsProfile = {\n        total: profile.factory + profile.restoring + profile.integration + profile.building + profile.storing,\n        resolving: profile.factory,\n        restoring: profile.restoring,\n        building: profile.building,\n        integration: profile.integration,\n        storing: profile.storing,\n        additionalResolving: profile.additionalFactories,\n        additionalIntegration: profile.additionalIntegration,\n        // TODO remove this in webpack 6\n        factory: profile.factory,\n        // TODO remove this in webpack 6\n        dependencies: profile.additionalFactories\n      };\n      Object.assign(object, statsProfile);\n    }\n  },\n  moduleIssuer: {\n    _: (object, module, context, _ref28, factory) => {\n      let {\n        requestShortener\n      } = _ref28;\n      const {\n        compilation,\n        type\n      } = context;\n      const {\n        moduleGraph\n      } = compilation;\n      const profile = moduleGraph.getProfile(module);\n      /** @type {KnownStatsModuleIssuer} */\n      const statsModuleIssuer = {\n        identifier: module.identifier(),\n        name: module.readableIdentifier(requestShortener)\n      };\n      Object.assign(object, statsModuleIssuer);\n      if (profile) {\n        object.profile = factory.create(`${type}.profile`, profile, context);\n      }\n    },\n    ids: (object, module, _ref29) => {\n      let {\n        compilation: {\n          chunkGraph\n        }\n      } = _ref29;\n      object.id = chunkGraph.getModuleId(module);\n    }\n  },\n  moduleReason: {\n    _: (object, reason, _ref30, _ref31) => {\n      let {\n        runtime\n      } = _ref30;\n      let {\n        requestShortener\n      } = _ref31;\n      const dep = reason.dependency;\n      const moduleDep = dep && dep instanceof ModuleDependency ? dep : undefined;\n      /** @type {KnownStatsModuleReason} */\n      const statsModuleReason = {\n        moduleIdentifier: reason.originModule ? reason.originModule.identifier() : null,\n        module: reason.originModule ? reason.originModule.readableIdentifier(requestShortener) : null,\n        moduleName: reason.originModule ? reason.originModule.readableIdentifier(requestShortener) : null,\n        resolvedModuleIdentifier: reason.resolvedOriginModule ? reason.resolvedOriginModule.identifier() : null,\n        resolvedModule: reason.resolvedOriginModule ? reason.resolvedOriginModule.readableIdentifier(requestShortener) : null,\n        type: reason.dependency ? reason.dependency.type : null,\n        active: reason.isActive(runtime),\n        explanation: reason.explanation,\n        userRequest: moduleDep && moduleDep.userRequest || null\n      };\n      Object.assign(object, statsModuleReason);\n      if (reason.dependency) {\n        const locInfo = formatLocation(reason.dependency.loc);\n        if (locInfo) {\n          object.loc = locInfo;\n        }\n      }\n    },\n    ids: (object, reason, _ref32) => {\n      let {\n        compilation: {\n          chunkGraph\n        }\n      } = _ref32;\n      object.moduleId = reason.originModule ? chunkGraph.getModuleId(reason.originModule) : null;\n      object.resolvedModuleId = reason.resolvedOriginModule ? chunkGraph.getModuleId(reason.resolvedOriginModule) : null;\n    }\n  },\n  chunk: {\n    _: (object, chunk, _ref33) => {\n      let {\n        makePathsRelative,\n        compilation: {\n          chunkGraph\n        }\n      } = _ref33;\n      const childIdByOrder = chunk.getChildIdsByOrders(chunkGraph);\n\n      /** @type {KnownStatsChunk} */\n      const statsChunk = {\n        rendered: chunk.rendered,\n        initial: chunk.canBeInitial(),\n        entry: chunk.hasRuntime(),\n        recorded: AggressiveSplittingPlugin.wasChunkRecorded(chunk),\n        reason: chunk.chunkReason,\n        size: chunkGraph.getChunkModulesSize(chunk),\n        sizes: chunkGraph.getChunkModulesSizes(chunk),\n        names: chunk.name ? [chunk.name] : [],\n        idHints: Array.from(chunk.idNameHints),\n        runtime: chunk.runtime === undefined ? undefined : typeof chunk.runtime === \"string\" ? [makePathsRelative(chunk.runtime)] : Array.from(chunk.runtime.sort(), makePathsRelative),\n        files: Array.from(chunk.files),\n        auxiliaryFiles: Array.from(chunk.auxiliaryFiles).sort(compareIds),\n        hash: chunk.renderedHash,\n        childrenByOrder: childIdByOrder\n      };\n      Object.assign(object, statsChunk);\n    },\n    ids: (object, chunk) => {\n      object.id = chunk.id;\n    },\n    chunkRelations: (object, chunk, _ref34) => {\n      let {\n        compilation: {\n          chunkGraph\n        }\n      } = _ref34;\n      /** @type {Set<string|number>} */\n      const parents = new Set();\n      /** @type {Set<string|number>} */\n      const children = new Set();\n      /** @type {Set<string|number>} */\n      const siblings = new Set();\n      for (const chunkGroup of chunk.groupsIterable) {\n        for (const parentGroup of chunkGroup.parentsIterable) {\n          for (const chunk of parentGroup.chunks) {\n            parents.add(chunk.id);\n          }\n        }\n        for (const childGroup of chunkGroup.childrenIterable) {\n          for (const chunk of childGroup.chunks) {\n            children.add(chunk.id);\n          }\n        }\n        for (const sibling of chunkGroup.chunks) {\n          if (sibling !== chunk) siblings.add(sibling.id);\n        }\n      }\n      object.siblings = Array.from(siblings).sort(compareIds);\n      object.parents = Array.from(parents).sort(compareIds);\n      object.children = Array.from(children).sort(compareIds);\n    },\n    chunkModules: (object, chunk, context, options, factory) => {\n      const {\n        type,\n        compilation: {\n          chunkGraph\n        }\n      } = context;\n      const array = chunkGraph.getChunkModules(chunk);\n      const groupedModules = factory.create(`${type}.modules`, array, {\n        ...context,\n        runtime: chunk.runtime,\n        rootModules: new Set(chunkGraph.getChunkRootModules(chunk))\n      });\n      const limited = spaceLimited(groupedModules, options.chunkModulesSpace);\n      object.modules = limited.children;\n      object.filteredModules = limited.filteredChildren;\n    },\n    chunkOrigins: (object, chunk, context, options, factory) => {\n      const {\n        type,\n        compilation: {\n          chunkGraph\n        }\n      } = context;\n      /** @type {Set<string>} */\n      const originsKeySet = new Set();\n      const origins = [];\n      for (const g of chunk.groupsIterable) {\n        origins.push(...g.origins);\n      }\n      const array = origins.filter(origin => {\n        const key = [origin.module ? chunkGraph.getModuleId(origin.module) : undefined, formatLocation(origin.loc), origin.request].join();\n        if (originsKeySet.has(key)) return false;\n        originsKeySet.add(key);\n        return true;\n      });\n      object.origins = factory.create(`${type}.origins`, array, context);\n    }\n  },\n  chunkOrigin: {\n    _: (object, origin, context, _ref35) => {\n      let {\n        requestShortener\n      } = _ref35;\n      /** @type {KnownStatsChunkOrigin} */\n      const statsChunkOrigin = {\n        module: origin.module ? origin.module.identifier() : \"\",\n        moduleIdentifier: origin.module ? origin.module.identifier() : \"\",\n        moduleName: origin.module ? origin.module.readableIdentifier(requestShortener) : \"\",\n        loc: formatLocation(origin.loc),\n        request: origin.request\n      };\n      Object.assign(object, statsChunkOrigin);\n    },\n    ids: (object, origin, _ref36) => {\n      let {\n        compilation: {\n          chunkGraph\n        }\n      } = _ref36;\n      object.moduleId = origin.module ? chunkGraph.getModuleId(origin.module) : undefined;\n    }\n  },\n  error: EXTRACT_ERROR,\n  warning: EXTRACT_ERROR,\n  moduleTraceItem: {\n    _: (object, _ref37, context, _ref38, factory) => {\n      let {\n        origin,\n        module\n      } = _ref37;\n      let {\n        requestShortener\n      } = _ref38;\n      const {\n        type,\n        compilation: {\n          moduleGraph\n        }\n      } = context;\n      object.originIdentifier = origin.identifier();\n      object.originName = origin.readableIdentifier(requestShortener);\n      object.moduleIdentifier = module.identifier();\n      object.moduleName = module.readableIdentifier(requestShortener);\n      const dependencies = Array.from(moduleGraph.getIncomingConnections(module)).filter(c => c.resolvedOriginModule === origin && c.dependency).map(c => c.dependency);\n      object.dependencies = factory.create(`${type}.dependencies`, Array.from(new Set(dependencies)), context);\n    },\n    ids: (object, _ref39, _ref40) => {\n      let {\n        origin,\n        module\n      } = _ref39;\n      let {\n        compilation: {\n          chunkGraph\n        }\n      } = _ref40;\n      object.originId = chunkGraph.getModuleId(origin);\n      object.moduleId = chunkGraph.getModuleId(module);\n    }\n  },\n  moduleTraceDependency: {\n    _: (object, dependency) => {\n      object.loc = formatLocation(dependency.loc);\n    }\n  }\n};\n\n/** @type {Record<string, Record<string, (thing: any, context: StatsFactoryContext, options: NormalizedStatsOptions) => boolean | undefined>>} */\nconst FILTER = {\n  \"module.reasons\": {\n    \"!orphanModules\": (reason, _ref41) => {\n      let {\n        compilation: {\n          chunkGraph\n        }\n      } = _ref41;\n      if (reason.originModule && chunkGraph.getNumberOfModuleChunks(reason.originModule) === 0) {\n        return false;\n      }\n    }\n  }\n};\n\n/** @type {Record<string, Record<string, (thing: Object, context: StatsFactoryContext, options: NormalizedStatsOptions) => boolean | undefined>>} */\nconst FILTER_RESULTS = {\n  \"compilation.warnings\": {\n    warningsFilter: util.deprecate((warning, context, _ref42) => {\n      let {\n        warningsFilter\n      } = _ref42;\n      const warningString = Object.keys(warning).map(key => `${warning[key]}`).join(\"\\n\");\n      return !warningsFilter.some(filter => filter(warning, warningString));\n    }, \"config.stats.warningsFilter is deprecated in favor of config.ignoreWarnings\", \"DEP_WEBPACK_STATS_WARNINGS_FILTER\")\n  }\n};\n\n/** @type {Record<string, (comparators: Function[], context: StatsFactoryContext) => void>} */\nconst MODULES_SORTER = {\n  _: (comparators, _ref43) => {\n    let {\n      compilation: {\n        moduleGraph\n      }\n    } = _ref43;\n    comparators.push(compareSelect(\n    /**\r\n     * @param {Module} m module\r\n     * @returns {number} depth\r\n     */\n    m => moduleGraph.getDepth(m), compareNumbers), compareSelect(\n    /**\r\n     * @param {Module} m module\r\n     * @returns {number} index\r\n     */\n    m => moduleGraph.getPreOrderIndex(m), compareNumbers), compareSelect(\n    /**\r\n     * @param {Module} m module\r\n     * @returns {string} identifier\r\n     */\n    m => m.identifier(), compareIds));\n  }\n};\n\n/** @type {Record<string, Record<string, (comparators: Function[], context: StatsFactoryContext) => void>>} */\nconst SORTERS = {\n  \"compilation.chunks\": {\n    _: comparators => {\n      comparators.push(compareSelect(c => c.id, compareIds));\n    }\n  },\n  \"compilation.modules\": MODULES_SORTER,\n  \"chunk.rootModules\": MODULES_SORTER,\n  \"chunk.modules\": MODULES_SORTER,\n  \"module.modules\": MODULES_SORTER,\n  \"module.reasons\": {\n    _: (comparators, _ref44) => {\n      let {\n        compilation: {\n          chunkGraph\n        }\n      } = _ref44;\n      comparators.push(compareSelect(x => x.originModule, compareModulesByIdentifier));\n      comparators.push(compareSelect(x => x.resolvedOriginModule, compareModulesByIdentifier));\n      comparators.push(compareSelect(x => x.dependency, concatComparators(compareSelect(\n      /**\r\n       * @param {Dependency} x dependency\r\n       * @returns {DependencyLocation} location\r\n       */\n      x => x.loc, compareLocations), compareSelect(x => x.type, compareIds))));\n    }\n  },\n  \"chunk.origins\": {\n    _: (comparators, _ref45) => {\n      let {\n        compilation: {\n          chunkGraph\n        }\n      } = _ref45;\n      comparators.push(compareSelect(origin => origin.module ? chunkGraph.getModuleId(origin.module) : undefined, compareIds), compareSelect(origin => formatLocation(origin.loc), compareIds), compareSelect(origin => origin.request, compareIds));\n    }\n  }\n};\nconst getItemSize = item => {\n  // Each item takes 1 line\n  // + the size of the children\n  // + 1 extra line when it has children and filteredChildren\n  return !item.children ? 1 : item.filteredChildren ? 2 + getTotalSize(item.children) : 1 + getTotalSize(item.children);\n};\nconst getTotalSize = children => {\n  let size = 0;\n  for (const child of children) {\n    size += getItemSize(child);\n  }\n  return size;\n};\nconst getTotalItems = children => {\n  let count = 0;\n  for (const child of children) {\n    if (!child.children && !child.filteredChildren) {\n      count++;\n    } else {\n      if (child.children) count += getTotalItems(child.children);\n      if (child.filteredChildren) count += child.filteredChildren;\n    }\n  }\n  return count;\n};\nconst collapse = children => {\n  // After collapse each child must take exactly one line\n  const newChildren = [];\n  for (const child of children) {\n    if (child.children) {\n      let filteredChildren = child.filteredChildren || 0;\n      filteredChildren += getTotalItems(child.children);\n      newChildren.push({\n        ...child,\n        children: undefined,\n        filteredChildren\n      });\n    } else {\n      newChildren.push(child);\n    }\n  }\n  return newChildren;\n};\nconst spaceLimited = function (itemsAndGroups, max) {\n  let filteredChildrenLineReserved = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  if (max < 1) {\n    return {\n      children: undefined,\n      filteredChildren: getTotalItems(itemsAndGroups)\n    };\n  }\n  /** @type {any[] | undefined} */\n  let children = undefined;\n  /** @type {number | undefined} */\n  let filteredChildren = undefined;\n  // This are the groups, which take 1+ lines each\n  const groups = [];\n  // The sizes of the groups are stored in groupSizes\n  const groupSizes = [];\n  // This are the items, which take 1 line each\n  const items = [];\n  // The total of group sizes\n  let groupsSize = 0;\n  for (const itemOrGroup of itemsAndGroups) {\n    // is item\n    if (!itemOrGroup.children && !itemOrGroup.filteredChildren) {\n      items.push(itemOrGroup);\n    } else {\n      groups.push(itemOrGroup);\n      const size = getItemSize(itemOrGroup);\n      groupSizes.push(size);\n      groupsSize += size;\n    }\n  }\n  if (groupsSize + items.length <= max) {\n    // The total size in the current state fits into the max\n    // keep all\n    children = groups.length > 0 ? groups.concat(items) : items;\n  } else if (groups.length === 0) {\n    // slice items to max\n    // inner space marks that lines for filteredChildren already reserved\n    const limit = max - (filteredChildrenLineReserved ? 0 : 1);\n    filteredChildren = items.length - limit;\n    items.length = limit;\n    children = items;\n  } else {\n    // limit is the size when all groups are collapsed\n    const limit = groups.length + (filteredChildrenLineReserved || items.length === 0 ? 0 : 1);\n    if (limit < max) {\n      // calculate how much we are over the size limit\n      // this allows to approach the limit faster\n      let oversize;\n      // If each group would take 1 line the total would be below the maximum\n      // collapse some groups, keep items\n      while ((oversize = groupsSize + items.length + (filteredChildren && !filteredChildrenLineReserved ? 1 : 0) - max) > 0) {\n        // Find the maximum group and process only this one\n        const maxGroupSize = Math.max(...groupSizes);\n        if (maxGroupSize < items.length) {\n          filteredChildren = items.length;\n          items.length = 0;\n          continue;\n        }\n        for (let i = 0; i < groups.length; i++) {\n          if (groupSizes[i] === maxGroupSize) {\n            const group = groups[i];\n            // run this algorithm recursively and limit the size of the children to\n            // current size - oversize / number of groups\n            // So it should always end up being smaller\n            const headerSize = group.filteredChildren ? 2 : 1;\n            const limited = spaceLimited(group.children, maxGroupSize -\n            // we should use ceil to always feet in max\n            Math.ceil(oversize / groups.length) -\n            // we substitute size of group head\n            headerSize, headerSize === 2);\n            groups[i] = {\n              ...group,\n              children: limited.children,\n              filteredChildren: limited.filteredChildren ? (group.filteredChildren || 0) + limited.filteredChildren : group.filteredChildren\n            };\n            const newSize = getItemSize(groups[i]);\n            groupsSize -= maxGroupSize - newSize;\n            groupSizes[i] = newSize;\n            break;\n          }\n        }\n      }\n      children = groups.concat(items);\n    } else if (limit === max) {\n      // If we have only enough space to show one line per group and one line for the filtered items\n      // collapse all groups and items\n      children = collapse(groups);\n      filteredChildren = items.length;\n    } else {\n      // If we have no space\n      // collapse complete group\n      filteredChildren = getTotalItems(itemsAndGroups);\n    }\n  }\n  return {\n    children,\n    filteredChildren\n  };\n};\nconst assetGroup = (children, assets) => {\n  let size = 0;\n  for (const asset of children) {\n    size += asset.size;\n  }\n  return {\n    size\n  };\n};\nconst moduleGroup = (children, modules) => {\n  let size = 0;\n  const sizes = {};\n  for (const module of children) {\n    size += module.size;\n    for (const key of Object.keys(module.sizes)) {\n      sizes[key] = (sizes[key] || 0) + module.sizes[key];\n    }\n  }\n  return {\n    size,\n    sizes\n  };\n};\nconst reasonGroup = (children, reasons) => {\n  let active = false;\n  for (const reason of children) {\n    active = active || reason.active;\n  }\n  return {\n    active\n  };\n};\nconst GROUP_EXTENSION_REGEXP = /(\\.[^.]+?)(?:\\?|(?: \\+ \\d+ modules?)?$)/;\nconst GROUP_PATH_REGEXP = /(.+)[/\\\\][^/\\\\]+?(?:\\?|(?: \\+ \\d+ modules?)?$)/;\n\n/** @type {Record<string, (groupConfigs: GroupConfig[], context: StatsFactoryContext, options: NormalizedStatsOptions) => void>} */\nconst ASSETS_GROUPERS = {\n  _: (groupConfigs, context, options) => {\n    const groupByFlag = (name, exclude) => {\n      groupConfigs.push({\n        getKeys: asset => {\n          return asset[name] ? [\"1\"] : undefined;\n        },\n        getOptions: () => {\n          return {\n            groupChildren: !exclude,\n            force: exclude\n          };\n        },\n        createGroup: (key, children, assets) => {\n          return exclude ? {\n            type: \"assets by status\",\n            [name]: !!key,\n            filteredChildren: assets.length,\n            ...assetGroup(children, assets)\n          } : {\n            type: \"assets by status\",\n            [name]: !!key,\n            children,\n            ...assetGroup(children, assets)\n          };\n        }\n      });\n    };\n    const {\n      groupAssetsByEmitStatus,\n      groupAssetsByPath,\n      groupAssetsByExtension\n    } = options;\n    if (groupAssetsByEmitStatus) {\n      groupByFlag(\"emitted\");\n      groupByFlag(\"comparedForEmit\");\n      groupByFlag(\"isOverSizeLimit\");\n    }\n    if (groupAssetsByEmitStatus || !options.cachedAssets) {\n      groupByFlag(\"cached\", !options.cachedAssets);\n    }\n    if (groupAssetsByPath || groupAssetsByExtension) {\n      groupConfigs.push({\n        getKeys: asset => {\n          const extensionMatch = groupAssetsByExtension && GROUP_EXTENSION_REGEXP.exec(asset.name);\n          const extension = extensionMatch ? extensionMatch[1] : \"\";\n          const pathMatch = groupAssetsByPath && GROUP_PATH_REGEXP.exec(asset.name);\n          const path = pathMatch ? pathMatch[1].split(/[/\\\\]/) : [];\n          const keys = [];\n          if (groupAssetsByPath) {\n            keys.push(\".\");\n            if (extension) keys.push(path.length ? `${path.join(\"/\")}/*${extension}` : `*${extension}`);\n            while (path.length > 0) {\n              keys.push(path.join(\"/\") + \"/\");\n              path.pop();\n            }\n          } else {\n            if (extension) keys.push(`*${extension}`);\n          }\n          return keys;\n        },\n        createGroup: (key, children, assets) => {\n          return {\n            type: groupAssetsByPath ? \"assets by path\" : \"assets by extension\",\n            name: key,\n            children,\n            ...assetGroup(children, assets)\n          };\n        }\n      });\n    }\n  },\n  groupAssetsByInfo: (groupConfigs, context, options) => {\n    const groupByAssetInfoFlag = name => {\n      groupConfigs.push({\n        getKeys: asset => {\n          return asset.info && asset.info[name] ? [\"1\"] : undefined;\n        },\n        createGroup: (key, children, assets) => {\n          return {\n            type: \"assets by info\",\n            info: {\n              [name]: !!key\n            },\n            children,\n            ...assetGroup(children, assets)\n          };\n        }\n      });\n    };\n    groupByAssetInfoFlag(\"immutable\");\n    groupByAssetInfoFlag(\"development\");\n    groupByAssetInfoFlag(\"hotModuleReplacement\");\n  },\n  groupAssetsByChunk: (groupConfigs, context, options) => {\n    const groupByNames = name => {\n      groupConfigs.push({\n        getKeys: asset => {\n          return asset[name];\n        },\n        createGroup: (key, children, assets) => {\n          return {\n            type: \"assets by chunk\",\n            [name]: [key],\n            children,\n            ...assetGroup(children, assets)\n          };\n        }\n      });\n    };\n    groupByNames(\"chunkNames\");\n    groupByNames(\"auxiliaryChunkNames\");\n    groupByNames(\"chunkIdHints\");\n    groupByNames(\"auxiliaryChunkIdHints\");\n  },\n  excludeAssets: (groupConfigs, context, _ref46) => {\n    let {\n      excludeAssets\n    } = _ref46;\n    groupConfigs.push({\n      getKeys: asset => {\n        const ident = asset.name;\n        const excluded = excludeAssets.some(fn => fn(ident, asset));\n        if (excluded) return [\"excluded\"];\n      },\n      getOptions: () => ({\n        groupChildren: false,\n        force: true\n      }),\n      createGroup: (key, children, assets) => ({\n        type: \"hidden assets\",\n        filteredChildren: assets.length,\n        ...assetGroup(children, assets)\n      })\n    });\n  }\n};\n\n/** @type {function(\"module\" | \"chunk\" | \"root-of-chunk\" | \"nested\"): Record<string, (groupConfigs: GroupConfig[], context: StatsFactoryContext, options: NormalizedStatsOptions) => void>} */\nconst MODULES_GROUPERS = type => ({\n  _: (groupConfigs, context, options) => {\n    const groupByFlag = (name, type, exclude) => {\n      groupConfigs.push({\n        getKeys: module => {\n          return module[name] ? [\"1\"] : undefined;\n        },\n        getOptions: () => {\n          return {\n            groupChildren: !exclude,\n            force: exclude\n          };\n        },\n        createGroup: (key, children, modules) => {\n          return {\n            type,\n            [name]: !!key,\n            ...(exclude ? {\n              filteredChildren: modules.length\n            } : {\n              children\n            }),\n            ...moduleGroup(children, modules)\n          };\n        }\n      });\n    };\n    const {\n      groupModulesByCacheStatus,\n      groupModulesByLayer,\n      groupModulesByAttributes,\n      groupModulesByType,\n      groupModulesByPath,\n      groupModulesByExtension\n    } = options;\n    if (groupModulesByAttributes) {\n      groupByFlag(\"errors\", \"modules with errors\");\n      groupByFlag(\"warnings\", \"modules with warnings\");\n      groupByFlag(\"assets\", \"modules with assets\");\n      groupByFlag(\"optional\", \"optional modules\");\n    }\n    if (groupModulesByCacheStatus) {\n      groupByFlag(\"cacheable\", \"cacheable modules\");\n      groupByFlag(\"built\", \"built modules\");\n      groupByFlag(\"codeGenerated\", \"code generated modules\");\n    }\n    if (groupModulesByCacheStatus || !options.cachedModules) {\n      groupByFlag(\"cached\", \"cached modules\", !options.cachedModules);\n    }\n    if (groupModulesByAttributes || !options.orphanModules) {\n      groupByFlag(\"orphan\", \"orphan modules\", !options.orphanModules);\n    }\n    if (groupModulesByAttributes || !options.dependentModules) {\n      groupByFlag(\"dependent\", \"dependent modules\", !options.dependentModules);\n    }\n    if (groupModulesByType || !options.runtimeModules) {\n      groupConfigs.push({\n        getKeys: module => {\n          if (!module.moduleType) return;\n          if (groupModulesByType) {\n            return [module.moduleType.split(\"/\", 1)[0]];\n          } else if (module.moduleType === \"runtime\") {\n            return [\"runtime\"];\n          }\n        },\n        getOptions: key => {\n          const exclude = key === \"runtime\" && !options.runtimeModules;\n          return {\n            groupChildren: !exclude,\n            force: exclude\n          };\n        },\n        createGroup: (key, children, modules) => {\n          const exclude = key === \"runtime\" && !options.runtimeModules;\n          return {\n            type: `${key} modules`,\n            moduleType: key,\n            ...(exclude ? {\n              filteredChildren: modules.length\n            } : {\n              children\n            }),\n            ...moduleGroup(children, modules)\n          };\n        }\n      });\n    }\n    if (groupModulesByLayer) {\n      groupConfigs.push({\n        getKeys: module => {\n          return [module.layer];\n        },\n        createGroup: (key, children, modules) => {\n          return {\n            type: \"modules by layer\",\n            layer: key,\n            children,\n            ...moduleGroup(children, modules)\n          };\n        }\n      });\n    }\n    if (groupModulesByPath || groupModulesByExtension) {\n      groupConfigs.push({\n        getKeys: module => {\n          if (!module.name) return;\n          const resource = parseResource(module.name.split(\"!\").pop()).path;\n          const dataUrl = /^data:[^,;]+/.exec(resource);\n          if (dataUrl) return [dataUrl[0]];\n          const extensionMatch = groupModulesByExtension && GROUP_EXTENSION_REGEXP.exec(resource);\n          const extension = extensionMatch ? extensionMatch[1] : \"\";\n          const pathMatch = groupModulesByPath && GROUP_PATH_REGEXP.exec(resource);\n          const path = pathMatch ? pathMatch[1].split(/[/\\\\]/) : [];\n          const keys = [];\n          if (groupModulesByPath) {\n            if (extension) keys.push(path.length ? `${path.join(\"/\")}/*${extension}` : `*${extension}`);\n            while (path.length > 0) {\n              keys.push(path.join(\"/\") + \"/\");\n              path.pop();\n            }\n          } else {\n            if (extension) keys.push(`*${extension}`);\n          }\n          return keys;\n        },\n        createGroup: (key, children, modules) => {\n          const isDataUrl = key.startsWith(\"data:\");\n          return {\n            type: isDataUrl ? \"modules by mime type\" : groupModulesByPath ? \"modules by path\" : \"modules by extension\",\n            name: isDataUrl ? key.slice( /* 'data:'.length */5) : key,\n            children,\n            ...moduleGroup(children, modules)\n          };\n        }\n      });\n    }\n  },\n  excludeModules: (groupConfigs, context, _ref47) => {\n    let {\n      excludeModules\n    } = _ref47;\n    groupConfigs.push({\n      getKeys: module => {\n        const name = module.name;\n        if (name) {\n          const excluded = excludeModules.some(fn => fn(name, module, type));\n          if (excluded) return [\"1\"];\n        }\n      },\n      getOptions: () => ({\n        groupChildren: false,\n        force: true\n      }),\n      createGroup: (key, children, modules) => ({\n        type: \"hidden modules\",\n        filteredChildren: children.length,\n        ...moduleGroup(children, modules)\n      })\n    });\n  }\n});\n\n/** @type {Record<string, Record<string, (groupConfigs: GroupConfig[], context: StatsFactoryContext, options: NormalizedStatsOptions) => void>>} */\nconst RESULT_GROUPERS = {\n  \"compilation.assets\": ASSETS_GROUPERS,\n  \"asset.related\": ASSETS_GROUPERS,\n  \"compilation.modules\": MODULES_GROUPERS(\"module\"),\n  \"chunk.modules\": MODULES_GROUPERS(\"chunk\"),\n  \"chunk.rootModules\": MODULES_GROUPERS(\"root-of-chunk\"),\n  \"module.modules\": MODULES_GROUPERS(\"nested\"),\n  \"module.reasons\": {\n    groupReasonsByOrigin: groupConfigs => {\n      groupConfigs.push({\n        getKeys: reason => {\n          return [reason.module];\n        },\n        createGroup: (key, children, reasons) => {\n          return {\n            type: \"from origin\",\n            module: key,\n            children,\n            ...reasonGroup(children, reasons)\n          };\n        }\n      });\n    }\n  }\n};\n\n// remove a prefixed \"!\" that can be specified to reverse sort order\nconst normalizeFieldKey = field => {\n  if (field[0] === \"!\") {\n    return field.slice(1);\n  }\n  return field;\n};\n\n// if a field is prefixed by a \"!\" reverse sort order\nconst sortOrderRegular = field => {\n  if (field[0] === \"!\") {\n    return false;\n  }\n  return true;\n};\n\n/**\r\n * @param {string} field field name\r\n * @returns {function(Object, Object): number} comparators\r\n */\nconst sortByField = field => {\n  if (!field) {\n    /**\r\n     * @param {any} a first\r\n     * @param {any} b second\r\n     * @returns {-1|0|1} zero\r\n     */\n    const noSort = (a, b) => 0;\n    return noSort;\n  }\n  const fieldKey = normalizeFieldKey(field);\n  let sortFn = compareSelect(m => m[fieldKey], compareIds);\n\n  // if a field is prefixed with a \"!\" the sort is reversed!\n  const sortIsRegular = sortOrderRegular(field);\n  if (!sortIsRegular) {\n    const oldSortFn = sortFn;\n    sortFn = (a, b) => oldSortFn(b, a);\n  }\n  return sortFn;\n};\nconst ASSET_SORTERS = {\n  /** @type {(comparators: Function[], context: StatsFactoryContext, options: NormalizedStatsOptions) => void} */\n  assetsSort: (comparators, context, _ref48) => {\n    let {\n      assetsSort\n    } = _ref48;\n    comparators.push(sortByField(assetsSort));\n  },\n  _: comparators => {\n    comparators.push(compareSelect(a => a.name, compareIds));\n  }\n};\n\n/** @type {Record<string, Record<string, (comparators: Function[], context: StatsFactoryContext, options: NormalizedStatsOptions) => void>>} */\nconst RESULT_SORTERS = {\n  \"compilation.chunks\": {\n    chunksSort: (comparators, context, _ref49) => {\n      let {\n        chunksSort\n      } = _ref49;\n      comparators.push(sortByField(chunksSort));\n    }\n  },\n  \"compilation.modules\": {\n    modulesSort: (comparators, context, _ref50) => {\n      let {\n        modulesSort\n      } = _ref50;\n      comparators.push(sortByField(modulesSort));\n    }\n  },\n  \"chunk.modules\": {\n    chunkModulesSort: (comparators, context, _ref51) => {\n      let {\n        chunkModulesSort\n      } = _ref51;\n      comparators.push(sortByField(chunkModulesSort));\n    }\n  },\n  \"module.modules\": {\n    nestedModulesSort: (comparators, context, _ref52) => {\n      let {\n        nestedModulesSort\n      } = _ref52;\n      comparators.push(sortByField(nestedModulesSort));\n    }\n  },\n  \"compilation.assets\": ASSET_SORTERS,\n  \"asset.related\": ASSET_SORTERS\n};\n\n/**\r\n * @param {Record<string, Record<string, Function>>} config the config see above\r\n * @param {NormalizedStatsOptions} options stats options\r\n * @param {function(string, Function): void} fn handler function called for every active line in config\r\n * @returns {void}\r\n */\nconst iterateConfig = (config, options, fn) => {\n  for (const hookFor of Object.keys(config)) {\n    const subConfig = config[hookFor];\n    for (const option of Object.keys(subConfig)) {\n      if (option !== \"_\") {\n        if (option.startsWith(\"!\")) {\n          if (options[option.slice(1)]) continue;\n        } else {\n          const value = options[option];\n          if (value === false || value === undefined || Array.isArray(value) && value.length === 0) continue;\n        }\n      }\n      fn(hookFor, subConfig[option]);\n    }\n  }\n};\n\n/** @type {Record<string, string>} */\nconst ITEM_NAMES = {\n  \"compilation.children[]\": \"compilation\",\n  \"compilation.modules[]\": \"module\",\n  \"compilation.entrypoints[]\": \"chunkGroup\",\n  \"compilation.namedChunkGroups[]\": \"chunkGroup\",\n  \"compilation.errors[]\": \"error\",\n  \"compilation.warnings[]\": \"warning\",\n  \"chunk.modules[]\": \"module\",\n  \"chunk.rootModules[]\": \"module\",\n  \"chunk.origins[]\": \"chunkOrigin\",\n  \"compilation.chunks[]\": \"chunk\",\n  \"compilation.assets[]\": \"asset\",\n  \"asset.related[]\": \"asset\",\n  \"module.issuerPath[]\": \"moduleIssuer\",\n  \"module.reasons[]\": \"moduleReason\",\n  \"module.modules[]\": \"module\",\n  \"module.children[]\": \"module\",\n  \"moduleTrace[]\": \"moduleTraceItem\",\n  \"moduleTraceItem.dependencies[]\": \"moduleTraceDependency\"\n};\n\n/**\r\n * @param {Object[]} items items to be merged\r\n * @returns {Object} an object\r\n */\nconst mergeToObject = items => {\n  const obj = Object.create(null);\n  for (const item of items) {\n    obj[item.name] = item;\n  }\n  return obj;\n};\n\n/** @type {Record<string, (items: Object[]) => any>} */\nconst MERGER = {\n  \"compilation.entrypoints\": mergeToObject,\n  \"compilation.namedChunkGroups\": mergeToObject\n};\nclass DefaultStatsFactoryPlugin {\n  /**\r\n   * Apply the plugin\r\n   * @param {Compiler} compiler the compiler instance\r\n   * @returns {void}\r\n   */\n  apply(compiler) {\n    compiler.hooks.compilation.tap(\"DefaultStatsFactoryPlugin\", compilation => {\n      compilation.hooks.statsFactory.tap(\"DefaultStatsFactoryPlugin\", (stats, options, context) => {\n        iterateConfig(SIMPLE_EXTRACTORS, options, (hookFor, fn) => {\n          stats.hooks.extract.for(hookFor).tap(\"DefaultStatsFactoryPlugin\", (obj, data, ctx) => fn(obj, data, ctx, options, stats));\n        });\n        iterateConfig(FILTER, options, (hookFor, fn) => {\n          stats.hooks.filter.for(hookFor).tap(\"DefaultStatsFactoryPlugin\", (item, ctx, idx, i) => fn(item, ctx, options, idx, i));\n        });\n        iterateConfig(FILTER_RESULTS, options, (hookFor, fn) => {\n          stats.hooks.filterResults.for(hookFor).tap(\"DefaultStatsFactoryPlugin\", (item, ctx, idx, i) => fn(item, ctx, options, idx, i));\n        });\n        iterateConfig(SORTERS, options, (hookFor, fn) => {\n          stats.hooks.sort.for(hookFor).tap(\"DefaultStatsFactoryPlugin\", (comparators, ctx) => fn(comparators, ctx, options));\n        });\n        iterateConfig(RESULT_SORTERS, options, (hookFor, fn) => {\n          stats.hooks.sortResults.for(hookFor).tap(\"DefaultStatsFactoryPlugin\", (comparators, ctx) => fn(comparators, ctx, options));\n        });\n        iterateConfig(RESULT_GROUPERS, options, (hookFor, fn) => {\n          stats.hooks.groupResults.for(hookFor).tap(\"DefaultStatsFactoryPlugin\", (groupConfigs, ctx) => fn(groupConfigs, ctx, options));\n        });\n        for (const key of Object.keys(ITEM_NAMES)) {\n          const itemName = ITEM_NAMES[key];\n          stats.hooks.getItemName.for(key).tap(\"DefaultStatsFactoryPlugin\", () => itemName);\n        }\n        for (const key of Object.keys(MERGER)) {\n          const merger = MERGER[key];\n          stats.hooks.merge.for(key).tap(\"DefaultStatsFactoryPlugin\", merger);\n        }\n        if (options.children) {\n          if (Array.isArray(options.children)) {\n            stats.hooks.getItemFactory.for(\"compilation.children[].compilation\").tap(\"DefaultStatsFactoryPlugin\", (comp, _ref53) => {\n              let {\n                _index: idx\n              } = _ref53;\n              if (idx < options.children.length) {\n                return compilation.createStatsFactory(compilation.createStatsOptions(options.children[idx], context));\n              }\n            });\n          } else if (options.children !== true) {\n            const childFactory = compilation.createStatsFactory(compilation.createStatsOptions(options.children, context));\n            stats.hooks.getItemFactory.for(\"compilation.children[].compilation\").tap(\"DefaultStatsFactoryPlugin\", () => {\n              return childFactory;\n            });\n          }\n        }\n      });\n    });\n  }\n}\nmodule.exports = DefaultStatsFactoryPlugin;","map":{"version":3,"names":["util","require","ModuleDependency","formatLocation","LogType","AggressiveSplittingPlugin","SizeLimitsPlugin","countIterable","compareLocations","compareChunksById","compareNumbers","compareIds","concatComparators","compareSelect","compareModulesByIdentifier","makePathsRelative","parseResource","uniqueArray","items","selector","set","Set","item","i","add","Array","from","uniqueOrderedArray","comparator","sort","mapObject","obj","fn","newObj","Object","create","key","keys","countWithChildren","compilation","getItems","count","length","child","children","c","type","EXTRACT_ERROR","_","object","error","context","requestShortener","message","chunk","chunkName","name","chunkEntry","hasRuntime","chunkInitial","canBeInitial","file","module","moduleIdentifier","identifier","moduleName","readableIdentifier","loc","ids","chunkGraph","chunkId","id","moduleId","getModuleId","moduleTrace","options","factory","moduleGraph","visitedModules","current","has","origin","getIssuer","push","errorDetails","cachedGetErrors","cachedGetWarnings","endsWith","details","errorStack","stack","SIMPLE_EXTRACTORS","bindContextCache","compiler","root","map","WeakMap","get","errors","getErrors","warnings","getWarnings","needAdditionalPass","logging","loggingDebug","loggingTrace","acceptedTypes","collapsedGroups","warn","info","log","group","groupEnd","groupCollapsed","clear","profile","profileEnd","time","status","cachedMakePathsRelative","depthInCollapsedGroup","logEntries","debugMode","some","groupStack","rootList","currentList","processedLogEntries","entry","pop","undefined","args","format","slice","newEntry","trace","replace","entries","filteredEntries","debug","hash","version","env","_env","timings","endTime","startTime","builtAt","publicPath","getPath","outputOptions","outputPath","path","assets","compilationFileToChunks","Map","compilationAuxiliaryFileToChunks","chunks","files","array","auxiliaryFiles","assetMap","asset","getAssets","related","values","relatedEntry","deps","isArray","dep","depItem","delete","assetsByChunkName","prototype","hasOwnProperty","call","groupedAssets","limited","spaceLimited","assetsSpace","filteredAssets","filteredChildren","modules","groupedModules","modulesSpace","filteredModules","entrypoints","chunkGroups","chunkGroupAuxiliary","chunkGroupChildren","value","chunkGroup","every","size","namedChunkGroups","errorsCount","warningsCount","warningsFilter","childType","filter","warning","warningString","join","filteredWarningDetailsCount","e","Boolean","filteredErrorDetailsCount","source","emitted","emittedAssets","comparedForEmit","comparedForEmitAssets","cached","cachedAssets","assign","asset$visible","auxiliaryChunks","chunkNames","chunkIdHints","idNameHints","auxiliaryChunkNames","auxiliaryChunkIdHints","filteredRelated","relatedAssets","performance","isOverSizeLimit","chunkGroupMaxAssets","getChildrenByOrders","toAsset","getAsset","sizeReducer","total","auxiliaryAssets","assetsSize","reduce","auxiliaryAssetsSize","statsChunkGroup","filteredAuxiliaryAssets","groups","childStatsChunkGroup","childAssets","built","builtModules","codeGenerated","codeGeneratedModules","buildTimeExecuted","buildTimeExecutedModules","sizes","sourceType","getSourceTypes","statsModule","moduleType","layer","cachedModules","module$visible","rootModules","issuer","reverse","getProfile","nameForCondition","index","getPreOrderIndex","preOrderIndex","index2","getPostOrderIndex","postOrderIndex","cacheable","buildInfo","optional","isOptional","orphan","getNumberOfModuleChunks","dependent","issuerName","issuerPath","failed","issuerId","getOrderedModuleChunksIterable","moduleAssets","reasons","groupsReasons","getIncomingConnections","reasonsSpace","filteredReasons","usedExports","runtime","getUsedExports","providedExports","getProvidedExports","optimizationBailout","getOptimizationBailout","depth","getDepth","nestedModules","innerModules","nestedModulesSpace","originalSource","statsProfile","restoring","integration","building","storing","resolving","additionalResolving","additionalFactories","additionalIntegration","dependencies","moduleIssuer","statsModuleIssuer","moduleReason","reason","dependency","moduleDep","statsModuleReason","originModule","resolvedModuleIdentifier","resolvedOriginModule","resolvedModule","active","isActive","explanation","userRequest","locInfo","resolvedModuleId","childIdByOrder","getChildIdsByOrders","statsChunk","rendered","initial","recorded","wasChunkRecorded","chunkReason","getChunkModulesSize","getChunkModulesSizes","names","idHints","renderedHash","childrenByOrder","chunkRelations","parents","siblings","groupsIterable","parentGroup","parentsIterable","childGroup","childrenIterable","sibling","chunkModules","getChunkModules","getChunkRootModules","chunkModulesSpace","chunkOrigins","originsKeySet","origins","g","request","chunkOrigin","statsChunkOrigin","moduleTraceItem","originIdentifier","originName","originId","moduleTraceDependency","FILTER","FILTER_RESULTS","deprecate","MODULES_SORTER","comparators","m","SORTERS","x","getItemSize","getTotalSize","getTotalItems","collapse","newChildren","itemsAndGroups","max","filteredChildrenLineReserved","groupSizes","groupsSize","itemOrGroup","concat","limit","oversize","maxGroupSize","Math","headerSize","ceil","newSize","assetGroup","moduleGroup","reasonGroup","GROUP_EXTENSION_REGEXP","GROUP_PATH_REGEXP","ASSETS_GROUPERS","groupConfigs","groupByFlag","exclude","getKeys","getOptions","groupChildren","force","createGroup","groupAssetsByEmitStatus","groupAssetsByPath","groupAssetsByExtension","extensionMatch","exec","extension","pathMatch","split","groupAssetsByInfo","groupByAssetInfoFlag","groupAssetsByChunk","groupByNames","excludeAssets","ident","excluded","MODULES_GROUPERS","groupModulesByCacheStatus","groupModulesByLayer","groupModulesByAttributes","groupModulesByType","groupModulesByPath","groupModulesByExtension","orphanModules","dependentModules","runtimeModules","resource","dataUrl","isDataUrl","startsWith","excludeModules","RESULT_GROUPERS","groupReasonsByOrigin","normalizeFieldKey","field","sortOrderRegular","sortByField","noSort","a","b","fieldKey","sortFn","sortIsRegular","oldSortFn","ASSET_SORTERS","assetsSort","RESULT_SORTERS","chunksSort","modulesSort","chunkModulesSort","nestedModulesSort","iterateConfig","config","hookFor","subConfig","option","ITEM_NAMES","mergeToObject","MERGER","DefaultStatsFactoryPlugin","apply","hooks","tap","statsFactory","stats","extract","for","data","ctx","idx","filterResults","sortResults","groupResults","itemName","getItemName","merger","merge","getItemFactory","comp","_index","createStatsFactory","createStatsOptions","childFactory","exports"],"sources":["C:/Users/91930/Desktop/Github projects/Pharmacy Demo/front-end/node_modules/webpack/lib/stats/DefaultStatsFactoryPlugin.js"],"sourcesContent":["/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Tobias Koppers @sokra\r\n*/\r\n\r\n\"use strict\";\r\n\r\nconst util = require(\"util\");\r\nconst ModuleDependency = require(\"../dependencies/ModuleDependency\");\r\nconst formatLocation = require(\"../formatLocation\");\r\nconst { LogType } = require(\"../logging/Logger\");\r\nconst AggressiveSplittingPlugin = require(\"../optimize/AggressiveSplittingPlugin\");\r\nconst SizeLimitsPlugin = require(\"../performance/SizeLimitsPlugin\");\r\nconst { countIterable } = require(\"../util/IterableHelpers\");\r\nconst {\r\n\tcompareLocations,\r\n\tcompareChunksById,\r\n\tcompareNumbers,\r\n\tcompareIds,\r\n\tconcatComparators,\r\n\tcompareSelect,\r\n\tcompareModulesByIdentifier\r\n} = require(\"../util/comparators\");\r\nconst { makePathsRelative, parseResource } = require(\"../util/identifier\");\r\n\r\n/** @typedef {import(\"webpack-sources\").Source} Source */\r\n/** @typedef {import(\"../Chunk\")} Chunk */\r\n/** @typedef {import(\"../ChunkGroup\")} ChunkGroup */\r\n/** @typedef {import(\"../ChunkGroup\").OriginRecord} OriginRecord */\r\n/** @typedef {import(\"../Compilation\")} Compilation */\r\n/** @typedef {import(\"../Compilation\").Asset} Asset */\r\n/** @typedef {import(\"../Compilation\").AssetInfo} AssetInfo */\r\n/** @typedef {import(\"../Compilation\").NormalizedStatsOptions} NormalizedStatsOptions */\r\n/** @typedef {import(\"../Compiler\")} Compiler */\r\n/** @typedef {import(\"../Dependency\")} Dependency */\r\n/** @typedef {import(\"../Dependency\").DependencyLocation} DependencyLocation */\r\n/** @typedef {import(\"../Module\")} Module */\r\n/** @typedef {import(\"../ModuleGraphConnection\")} ModuleGraphConnection */\r\n/** @typedef {import(\"../ModuleProfile\")} ModuleProfile */\r\n/** @typedef {import(\"../RequestShortener\")} RequestShortener */\r\n/** @typedef {import(\"../WebpackError\")} WebpackError */\r\n/** @template T @typedef {import(\"../util/comparators\").Comparator<T>} Comparator<T> */\r\n/** @typedef {import(\"../util/runtime\").RuntimeSpec} RuntimeSpec */\r\n/** @typedef {import(\"../util/smartGrouping\").GroupConfig<any, object>} GroupConfig */\r\n/** @typedef {import(\"./StatsFactory\")} StatsFactory */\r\n/** @typedef {import(\"./StatsFactory\").StatsFactoryContext} StatsFactoryContext */\r\n\r\n/** @typedef {KnownStatsCompilation & Record<string, any>} StatsCompilation */\r\n/**\r\n * @typedef {Object} KnownStatsCompilation\r\n * @property {any=} env\r\n * @property {string=} name\r\n * @property {string=} hash\r\n * @property {string=} version\r\n * @property {number=} time\r\n * @property {number=} builtAt\r\n * @property {boolean=} needAdditionalPass\r\n * @property {string=} publicPath\r\n * @property {string=} outputPath\r\n * @property {Record<string, string[]>=} assetsByChunkName\r\n * @property {StatsAsset[]=} assets\r\n * @property {number=} filteredAssets\r\n * @property {StatsChunk[]=} chunks\r\n * @property {StatsModule[]=} modules\r\n * @property {number=} filteredModules\r\n * @property {Record<string, StatsChunkGroup>=} entrypoints\r\n * @property {Record<string, StatsChunkGroup>=} namedChunkGroups\r\n * @property {StatsError[]=} errors\r\n * @property {number=} errorsCount\r\n * @property {StatsError[]=} warnings\r\n * @property {number=} warningsCount\r\n * @property {StatsCompilation[]=} children\r\n * @property {Record<string, StatsLogging>=} logging\r\n */\r\n\r\n/** @typedef {KnownStatsLogging & Record<string, any>} StatsLogging */\r\n/**\r\n * @typedef {Object} KnownStatsLogging\r\n * @property {StatsLoggingEntry[]} entries\r\n * @property {number} filteredEntries\r\n * @property {boolean} debug\r\n */\r\n\r\n/** @typedef {KnownStatsLoggingEntry & Record<string, any>} StatsLoggingEntry */\r\n/**\r\n * @typedef {Object} KnownStatsLoggingEntry\r\n * @property {string} type\r\n * @property {string} message\r\n * @property {string[]=} trace\r\n * @property {StatsLoggingEntry[]=} children\r\n * @property {any[]=} args\r\n * @property {number=} time\r\n */\r\n\r\n/** @typedef {KnownStatsAsset & Record<string, any>} StatsAsset */\r\n/**\r\n * @typedef {Object} KnownStatsAsset\r\n * @property {string} type\r\n * @property {string} name\r\n * @property {AssetInfo} info\r\n * @property {number} size\r\n * @property {boolean} emitted\r\n * @property {boolean} comparedForEmit\r\n * @property {boolean} cached\r\n * @property {StatsAsset[]=} related\r\n * @property {(string|number)[]=} chunkNames\r\n * @property {(string|number)[]=} chunkIdHints\r\n * @property {(string|number)[]=} chunks\r\n * @property {(string|number)[]=} auxiliaryChunkNames\r\n * @property {(string|number)[]=} auxiliaryChunks\r\n * @property {(string|number)[]=} auxiliaryChunkIdHints\r\n * @property {number=} filteredRelated\r\n * @property {boolean=} isOverSizeLimit\r\n */\r\n\r\n/** @typedef {KnownStatsChunkGroup & Record<string, any>} StatsChunkGroup */\r\n/**\r\n * @typedef {Object} KnownStatsChunkGroup\r\n * @property {string=} name\r\n * @property {(string|number)[]=} chunks\r\n * @property {({ name: string, size?: number })[]=} assets\r\n * @property {number=} filteredAssets\r\n * @property {number=} assetsSize\r\n * @property {({ name: string, size?: number })[]=} auxiliaryAssets\r\n * @property {number=} filteredAuxiliaryAssets\r\n * @property {number=} auxiliaryAssetsSize\r\n * @property {{ [x: string]: StatsChunkGroup[] }=} children\r\n * @property {{ [x: string]: string[] }=} childAssets\r\n * @property {boolean=} isOverSizeLimit\r\n */\r\n\r\n/** @typedef {KnownStatsModule & Record<string, any>} StatsModule */\r\n/**\r\n * @typedef {Object} KnownStatsModule\r\n * @property {string=} type\r\n * @property {string=} moduleType\r\n * @property {string=} layer\r\n * @property {string=} identifier\r\n * @property {string=} name\r\n * @property {string=} nameForCondition\r\n * @property {number=} index\r\n * @property {number=} preOrderIndex\r\n * @property {number=} index2\r\n * @property {number=} postOrderIndex\r\n * @property {number=} size\r\n * @property {{[x: string]: number}=} sizes\r\n * @property {boolean=} cacheable\r\n * @property {boolean=} built\r\n * @property {boolean=} codeGenerated\r\n * @property {boolean=} buildTimeExecuted\r\n * @property {boolean=} cached\r\n * @property {boolean=} optional\r\n * @property {boolean=} orphan\r\n * @property {string|number=} id\r\n * @property {string|number=} issuerId\r\n * @property {(string|number)[]=} chunks\r\n * @property {(string|number)[]=} assets\r\n * @property {boolean=} dependent\r\n * @property {string=} issuer\r\n * @property {string=} issuerName\r\n * @property {StatsModuleIssuer[]=} issuerPath\r\n * @property {boolean=} failed\r\n * @property {number=} errors\r\n * @property {number=} warnings\r\n * @property {StatsProfile=} profile\r\n * @property {StatsModuleReason[]=} reasons\r\n * @property {(boolean | string[])=} usedExports\r\n * @property {string[]=} providedExports\r\n * @property {string[]=} optimizationBailout\r\n * @property {number=} depth\r\n * @property {StatsModule[]=} modules\r\n * @property {number=} filteredModules\r\n * @property {ReturnType<Source[\"source\"]>=} source\r\n */\r\n\r\n/** @typedef {KnownStatsProfile & Record<string, any>} StatsProfile */\r\n/**\r\n * @typedef {Object} KnownStatsProfile\r\n * @property {number} total\r\n * @property {number} resolving\r\n * @property {number} restoring\r\n * @property {number} building\r\n * @property {number} integration\r\n * @property {number} storing\r\n * @property {number} additionalResolving\r\n * @property {number} additionalIntegration\r\n * @property {number} factory\r\n * @property {number} dependencies\r\n */\r\n\r\n/** @typedef {KnownStatsModuleIssuer & Record<string, any>} StatsModuleIssuer */\r\n/**\r\n * @typedef {Object} KnownStatsModuleIssuer\r\n * @property {string=} identifier\r\n * @property {string=} name\r\n * @property {(string|number)=} id\r\n * @property {StatsProfile=} profile\r\n */\r\n\r\n/** @typedef {KnownStatsModuleReason & Record<string, any>} StatsModuleReason */\r\n/**\r\n * @typedef {Object} KnownStatsModuleReason\r\n * @property {string=} moduleIdentifier\r\n * @property {string=} module\r\n * @property {string=} moduleName\r\n * @property {string=} resolvedModuleIdentifier\r\n * @property {string=} resolvedModule\r\n * @property {string=} type\r\n * @property {boolean} active\r\n * @property {string=} explanation\r\n * @property {string=} userRequest\r\n * @property {string=} loc\r\n * @property {(string|number)=} moduleId\r\n * @property {(string|number)=} resolvedModuleId\r\n */\r\n\r\n/** @typedef {KnownStatsChunk & Record<string, any>} StatsChunk */\r\n/**\r\n * @typedef {Object} KnownStatsChunk\r\n * @property {boolean} rendered\r\n * @property {boolean} initial\r\n * @property {boolean} entry\r\n * @property {boolean} recorded\r\n * @property {string=} reason\r\n * @property {number} size\r\n * @property {Record<string, number>=} sizes\r\n * @property {string[]=} names\r\n * @property {string[]=} idHints\r\n * @property {string[]=} runtime\r\n * @property {string[]=} files\r\n * @property {string[]=} auxiliaryFiles\r\n * @property {string} hash\r\n * @property {Record<string, (string|number)[]>=} childrenByOrder\r\n * @property {(string|number)=} id\r\n * @property {(string|number)[]=} siblings\r\n * @property {(string|number)[]=} parents\r\n * @property {(string|number)[]=} children\r\n * @property {StatsModule[]=} modules\r\n * @property {number=} filteredModules\r\n * @property {StatsChunkOrigin[]=} origins\r\n */\r\n\r\n/** @typedef {KnownStatsChunkOrigin & Record<string, any>} StatsChunkOrigin */\r\n/**\r\n * @typedef {Object} KnownStatsChunkOrigin\r\n * @property {string=} module\r\n * @property {string=} moduleIdentifier\r\n * @property {string=} moduleName\r\n * @property {string=} loc\r\n * @property {string=} request\r\n * @property {(string|number)=} moduleId\r\n */\r\n\r\n/** @typedef {KnownStatsModuleTraceItem & Record<string, any>} StatsModuleTraceItem */\r\n/**\r\n * @typedef {Object} KnownStatsModuleTraceItem\r\n * @property {string=} originIdentifier\r\n * @property {string=} originName\r\n * @property {string=} moduleIdentifier\r\n * @property {string=} moduleName\r\n * @property {StatsModuleTraceDependency[]=} dependencies\r\n * @property {(string|number)=} originId\r\n * @property {(string|number)=} moduleId\r\n */\r\n\r\n/** @typedef {KnownStatsModuleTraceDependency & Record<string, any>} StatsModuleTraceDependency */\r\n/**\r\n * @typedef {Object} KnownStatsModuleTraceDependency\r\n * @property {string=} loc\r\n */\r\n\r\n/** @typedef {KnownStatsError & Record<string, any>} StatsError */\r\n/**\r\n * @typedef {Object} KnownStatsError\r\n * @property {string} message\r\n * @property {string=} chunkName\r\n * @property {boolean=} chunkEntry\r\n * @property {boolean=} chunkInitial\r\n * @property {string=} file\r\n * @property {string=} moduleIdentifier\r\n * @property {string=} moduleName\r\n * @property {string=} loc\r\n * @property {string|number=} chunkId\r\n * @property {string|number=} moduleId\r\n * @property {StatsModuleTraceItem[]=} moduleTrace\r\n * @property {any=} details\r\n * @property {string=} stack\r\n */\r\n\r\n/** @typedef {Asset & { type: string, related: PreprocessedAsset[] }} PreprocessedAsset */\r\n\r\n/**\r\n * @template T\r\n * @template O\r\n * @typedef {Record<string, (object: O, data: T, context: StatsFactoryContext, options: NormalizedStatsOptions, factory: StatsFactory) => void>} ExtractorsByOption\r\n */\r\n\r\n/**\r\n * @typedef {Object} SimpleExtractors\r\n * @property {ExtractorsByOption<Compilation, StatsCompilation>} compilation\r\n * @property {ExtractorsByOption<PreprocessedAsset, StatsAsset>} asset\r\n * @property {ExtractorsByOption<PreprocessedAsset, StatsAsset>} asset$visible\r\n * @property {ExtractorsByOption<{ name: string, chunkGroup: ChunkGroup }, StatsChunkGroup>} chunkGroup\r\n * @property {ExtractorsByOption<Module, StatsModule>} module\r\n * @property {ExtractorsByOption<Module, StatsModule>} module$visible\r\n * @property {ExtractorsByOption<Module, StatsModuleIssuer>} moduleIssuer\r\n * @property {ExtractorsByOption<ModuleProfile, StatsProfile>} profile\r\n * @property {ExtractorsByOption<ModuleGraphConnection, StatsModuleReason>} moduleReason\r\n * @property {ExtractorsByOption<Chunk, StatsChunk>} chunk\r\n * @property {ExtractorsByOption<OriginRecord, StatsChunkOrigin>} chunkOrigin\r\n * @property {ExtractorsByOption<WebpackError, StatsError>} error\r\n * @property {ExtractorsByOption<WebpackError, StatsError>} warning\r\n * @property {ExtractorsByOption<{ origin: Module, module: Module }, StatsModuleTraceItem>} moduleTraceItem\r\n * @property {ExtractorsByOption<Dependency, StatsModuleTraceDependency>} moduleTraceDependency\r\n */\r\n\r\n/**\r\n * @template T\r\n * @template I\r\n * @param {Iterable<T>} items items to select from\r\n * @param {function(T): Iterable<I>} selector selector function to select values from item\r\n * @returns {I[]} array of values\r\n */\r\nconst uniqueArray = (items, selector) => {\r\n\t/** @type {Set<I>} */\r\n\tconst set = new Set();\r\n\tfor (const item of items) {\r\n\t\tfor (const i of selector(item)) {\r\n\t\t\tset.add(i);\r\n\t\t}\r\n\t}\r\n\treturn Array.from(set);\r\n};\r\n\r\n/**\r\n * @template T\r\n * @template I\r\n * @param {Iterable<T>} items items to select from\r\n * @param {function(T): Iterable<I>} selector selector function to select values from item\r\n * @param {Comparator<I>} comparator comparator function\r\n * @returns {I[]} array of values\r\n */\r\nconst uniqueOrderedArray = (items, selector, comparator) => {\r\n\treturn uniqueArray(items, selector).sort(comparator);\r\n};\r\n\r\n/** @template T @template R @typedef {{ [P in keyof T]: R }} MappedValues<T, R> */\r\n\r\n/**\r\n * @template T\r\n * @template R\r\n * @param {T} obj object to be mapped\r\n * @param {function(T[keyof T], keyof T): R} fn mapping function\r\n * @returns {MappedValues<T, R>} mapped object\r\n */\r\nconst mapObject = (obj, fn) => {\r\n\tconst newObj = Object.create(null);\r\n\tfor (const key of Object.keys(obj)) {\r\n\t\tnewObj[key] = fn(obj[key], /** @type {keyof T} */ (key));\r\n\t}\r\n\treturn newObj;\r\n};\r\n\r\n/**\r\n * @param {Compilation} compilation the compilation\r\n * @param {function(Compilation, string): any[]} getItems get items\r\n * @returns {number} total number\r\n */\r\nconst countWithChildren = (compilation, getItems) => {\r\n\tlet count = getItems(compilation, \"\").length;\r\n\tfor (const child of compilation.children) {\r\n\t\tcount += countWithChildren(child, (c, type) =>\r\n\t\t\tgetItems(c, `.children[].compilation${type}`)\r\n\t\t);\r\n\t}\r\n\treturn count;\r\n};\r\n\r\n/** @type {ExtractorsByOption<WebpackError | string, StatsError>} */\r\nconst EXTRACT_ERROR = {\r\n\t_: (object, error, context, { requestShortener }) => {\r\n\t\t// TODO webpack 6 disallow strings in the errors/warnings list\r\n\t\tif (typeof error === \"string\") {\r\n\t\t\tobject.message = error;\r\n\t\t} else {\r\n\t\t\tif (error.chunk) {\r\n\t\t\t\tobject.chunkName = error.chunk.name;\r\n\t\t\t\tobject.chunkEntry = error.chunk.hasRuntime();\r\n\t\t\t\tobject.chunkInitial = error.chunk.canBeInitial();\r\n\t\t\t}\r\n\t\t\tif (error.file) {\r\n\t\t\t\tobject.file = error.file;\r\n\t\t\t}\r\n\t\t\tif (error.module) {\r\n\t\t\t\tobject.moduleIdentifier = error.module.identifier();\r\n\t\t\t\tobject.moduleName = error.module.readableIdentifier(requestShortener);\r\n\t\t\t}\r\n\t\t\tif (error.loc) {\r\n\t\t\t\tobject.loc = formatLocation(error.loc);\r\n\t\t\t}\r\n\t\t\tobject.message = error.message;\r\n\t\t}\r\n\t},\r\n\tids: (object, error, { compilation: { chunkGraph } }) => {\r\n\t\tif (typeof error !== \"string\") {\r\n\t\t\tif (error.chunk) {\r\n\t\t\t\tobject.chunkId = error.chunk.id;\r\n\t\t\t}\r\n\t\t\tif (error.module) {\r\n\t\t\t\tobject.moduleId = chunkGraph.getModuleId(error.module);\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\tmoduleTrace: (object, error, context, options, factory) => {\r\n\t\tif (typeof error !== \"string\" && error.module) {\r\n\t\t\tconst {\r\n\t\t\t\ttype,\r\n\t\t\t\tcompilation: { moduleGraph }\r\n\t\t\t} = context;\r\n\t\t\t/** @type {Set<Module>} */\r\n\t\t\tconst visitedModules = new Set();\r\n\t\t\tconst moduleTrace = [];\r\n\t\t\tlet current = error.module;\r\n\t\t\twhile (current) {\r\n\t\t\t\tif (visitedModules.has(current)) break; // circular (technically impossible, but how knows)\r\n\t\t\t\tvisitedModules.add(current);\r\n\t\t\t\tconst origin = moduleGraph.getIssuer(current);\r\n\t\t\t\tif (!origin) break;\r\n\t\t\t\tmoduleTrace.push({ origin, module: current });\r\n\t\t\t\tcurrent = origin;\r\n\t\t\t}\r\n\t\t\tobject.moduleTrace = factory.create(\r\n\t\t\t\t`${type}.moduleTrace`,\r\n\t\t\t\tmoduleTrace,\r\n\t\t\t\tcontext\r\n\t\t\t);\r\n\t\t}\r\n\t},\r\n\terrorDetails: (\r\n\t\tobject,\r\n\t\terror,\r\n\t\t{ type, compilation, cachedGetErrors, cachedGetWarnings },\r\n\t\t{ errorDetails }\r\n\t) => {\r\n\t\tif (\r\n\t\t\ttypeof error !== \"string\" &&\r\n\t\t\t(errorDetails === true ||\r\n\t\t\t\t(type.endsWith(\".error\") && cachedGetErrors(compilation).length < 3))\r\n\t\t) {\r\n\t\t\tobject.details = error.details;\r\n\t\t}\r\n\t},\r\n\terrorStack: (object, error) => {\r\n\t\tif (typeof error !== \"string\") {\r\n\t\t\tobject.stack = error.stack;\r\n\t\t}\r\n\t}\r\n};\r\n\r\n/** @type {SimpleExtractors} */\r\nconst SIMPLE_EXTRACTORS = {\r\n\tcompilation: {\r\n\t\t_: (object, compilation, context, options) => {\r\n\t\t\tif (!context.makePathsRelative) {\r\n\t\t\t\tcontext.makePathsRelative = makePathsRelative.bindContextCache(\r\n\t\t\t\t\tcompilation.compiler.context,\r\n\t\t\t\t\tcompilation.compiler.root\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t\tif (!context.cachedGetErrors) {\r\n\t\t\t\tconst map = new WeakMap();\r\n\t\t\t\tcontext.cachedGetErrors = compilation => {\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\tmap.get(compilation) ||\r\n\t\t\t\t\t\t(errors => (map.set(compilation, errors), errors))(\r\n\t\t\t\t\t\t\tcompilation.getErrors()\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t);\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t\tif (!context.cachedGetWarnings) {\r\n\t\t\t\tconst map = new WeakMap();\r\n\t\t\t\tcontext.cachedGetWarnings = compilation => {\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\tmap.get(compilation) ||\r\n\t\t\t\t\t\t(warnings => (map.set(compilation, warnings), warnings))(\r\n\t\t\t\t\t\t\tcompilation.getWarnings()\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t);\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t\tif (compilation.name) {\r\n\t\t\t\tobject.name = compilation.name;\r\n\t\t\t}\r\n\t\t\tif (compilation.needAdditionalPass) {\r\n\t\t\t\tobject.needAdditionalPass = true;\r\n\t\t\t}\r\n\r\n\t\t\tconst { logging, loggingDebug, loggingTrace } = options;\r\n\t\t\tif (logging || (loggingDebug && loggingDebug.length > 0)) {\r\n\t\t\t\tconst util = require(\"util\");\r\n\t\t\t\tobject.logging = {};\r\n\t\t\t\tlet acceptedTypes;\r\n\t\t\t\tlet collapsedGroups = false;\r\n\t\t\t\tswitch (logging) {\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tacceptedTypes = new Set();\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"error\":\r\n\t\t\t\t\t\tacceptedTypes = new Set([LogType.error]);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"warn\":\r\n\t\t\t\t\t\tacceptedTypes = new Set([LogType.error, LogType.warn]);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"info\":\r\n\t\t\t\t\t\tacceptedTypes = new Set([\r\n\t\t\t\t\t\t\tLogType.error,\r\n\t\t\t\t\t\t\tLogType.warn,\r\n\t\t\t\t\t\t\tLogType.info\r\n\t\t\t\t\t\t]);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"log\":\r\n\t\t\t\t\t\tacceptedTypes = new Set([\r\n\t\t\t\t\t\t\tLogType.error,\r\n\t\t\t\t\t\t\tLogType.warn,\r\n\t\t\t\t\t\t\tLogType.info,\r\n\t\t\t\t\t\t\tLogType.log,\r\n\t\t\t\t\t\t\tLogType.group,\r\n\t\t\t\t\t\t\tLogType.groupEnd,\r\n\t\t\t\t\t\t\tLogType.groupCollapsed,\r\n\t\t\t\t\t\t\tLogType.clear\r\n\t\t\t\t\t\t]);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"verbose\":\r\n\t\t\t\t\t\tacceptedTypes = new Set([\r\n\t\t\t\t\t\t\tLogType.error,\r\n\t\t\t\t\t\t\tLogType.warn,\r\n\t\t\t\t\t\t\tLogType.info,\r\n\t\t\t\t\t\t\tLogType.log,\r\n\t\t\t\t\t\t\tLogType.group,\r\n\t\t\t\t\t\t\tLogType.groupEnd,\r\n\t\t\t\t\t\t\tLogType.groupCollapsed,\r\n\t\t\t\t\t\t\tLogType.profile,\r\n\t\t\t\t\t\t\tLogType.profileEnd,\r\n\t\t\t\t\t\t\tLogType.time,\r\n\t\t\t\t\t\t\tLogType.status,\r\n\t\t\t\t\t\t\tLogType.clear\r\n\t\t\t\t\t\t]);\r\n\t\t\t\t\t\tcollapsedGroups = true;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tconst cachedMakePathsRelative = makePathsRelative.bindContextCache(\r\n\t\t\t\t\toptions.context,\r\n\t\t\t\t\tcompilation.compiler.root\r\n\t\t\t\t);\r\n\t\t\t\tlet depthInCollapsedGroup = 0;\r\n\t\t\t\tfor (const [origin, logEntries] of compilation.logging) {\r\n\t\t\t\t\tconst debugMode = loggingDebug.some(fn => fn(origin));\r\n\t\t\t\t\tif (logging === false && !debugMode) continue;\r\n\t\t\t\t\t/** @type {KnownStatsLoggingEntry[]} */\r\n\t\t\t\t\tconst groupStack = [];\r\n\t\t\t\t\t/** @type {KnownStatsLoggingEntry[]} */\r\n\t\t\t\t\tconst rootList = [];\r\n\t\t\t\t\tlet currentList = rootList;\r\n\t\t\t\t\tlet processedLogEntries = 0;\r\n\t\t\t\t\tfor (const entry of logEntries) {\r\n\t\t\t\t\t\tlet type = entry.type;\r\n\t\t\t\t\t\tif (!debugMode && !acceptedTypes.has(type)) continue;\r\n\r\n\t\t\t\t\t\t// Expand groups in verbose and debug modes\r\n\t\t\t\t\t\tif (\r\n\t\t\t\t\t\t\ttype === LogType.groupCollapsed &&\r\n\t\t\t\t\t\t\t(debugMode || collapsedGroups)\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\ttype = LogType.group;\r\n\r\n\t\t\t\t\t\tif (depthInCollapsedGroup === 0) {\r\n\t\t\t\t\t\t\tprocessedLogEntries++;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (type === LogType.groupEnd) {\r\n\t\t\t\t\t\t\tgroupStack.pop();\r\n\t\t\t\t\t\t\tif (groupStack.length > 0) {\r\n\t\t\t\t\t\t\t\tcurrentList = groupStack[groupStack.length - 1].children;\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tcurrentList = rootList;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif (depthInCollapsedGroup > 0) depthInCollapsedGroup--;\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tlet message = undefined;\r\n\t\t\t\t\t\tif (entry.type === LogType.time) {\r\n\t\t\t\t\t\t\tmessage = `${entry.args[0]}: ${\r\n\t\t\t\t\t\t\t\tentry.args[1] * 1000 + entry.args[2] / 1000000\r\n\t\t\t\t\t\t\t} ms`;\r\n\t\t\t\t\t\t} else if (entry.args && entry.args.length > 0) {\r\n\t\t\t\t\t\t\tmessage = util.format(entry.args[0], ...entry.args.slice(1));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t/** @type {KnownStatsLoggingEntry} */\r\n\t\t\t\t\t\tconst newEntry = {\r\n\t\t\t\t\t\t\t...entry,\r\n\t\t\t\t\t\t\ttype,\r\n\t\t\t\t\t\t\tmessage,\r\n\t\t\t\t\t\t\ttrace: loggingTrace ? entry.trace : undefined,\r\n\t\t\t\t\t\t\tchildren:\r\n\t\t\t\t\t\t\t\ttype === LogType.group || type === LogType.groupCollapsed\r\n\t\t\t\t\t\t\t\t\t? []\r\n\t\t\t\t\t\t\t\t\t: undefined\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tcurrentList.push(newEntry);\r\n\t\t\t\t\t\tif (newEntry.children) {\r\n\t\t\t\t\t\t\tgroupStack.push(newEntry);\r\n\t\t\t\t\t\t\tcurrentList = newEntry.children;\r\n\t\t\t\t\t\t\tif (depthInCollapsedGroup > 0) {\r\n\t\t\t\t\t\t\t\tdepthInCollapsedGroup++;\r\n\t\t\t\t\t\t\t} else if (type === LogType.groupCollapsed) {\r\n\t\t\t\t\t\t\t\tdepthInCollapsedGroup = 1;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tlet name = cachedMakePathsRelative(origin).replace(/\\|/g, \" \");\r\n\t\t\t\t\tif (name in object.logging) {\r\n\t\t\t\t\t\tlet i = 1;\r\n\t\t\t\t\t\twhile (`${name}#${i}` in object.logging) {\r\n\t\t\t\t\t\t\ti++;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tname = `${name}#${i}`;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tobject.logging[name] = {\r\n\t\t\t\t\t\tentries: rootList,\r\n\t\t\t\t\t\tfilteredEntries: logEntries.length - processedLogEntries,\r\n\t\t\t\t\t\tdebug: debugMode\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\t\thash: (object, compilation) => {\r\n\t\t\tobject.hash = compilation.hash;\r\n\t\t},\r\n\t\tversion: object => {\r\n\t\t\tobject.version = require(\"../../package.json\").version;\r\n\t\t},\r\n\t\tenv: (object, compilation, context, { _env }) => {\r\n\t\t\tobject.env = _env;\r\n\t\t},\r\n\t\ttimings: (object, compilation) => {\r\n\t\t\tobject.time = compilation.endTime - compilation.startTime;\r\n\t\t},\r\n\t\tbuiltAt: (object, compilation) => {\r\n\t\t\tobject.builtAt = compilation.endTime;\r\n\t\t},\r\n\t\tpublicPath: (object, compilation) => {\r\n\t\t\tobject.publicPath = compilation.getPath(\r\n\t\t\t\tcompilation.outputOptions.publicPath\r\n\t\t\t);\r\n\t\t},\r\n\t\toutputPath: (object, compilation) => {\r\n\t\t\tobject.outputPath = compilation.outputOptions.path;\r\n\t\t},\r\n\t\tassets: (object, compilation, context, options, factory) => {\r\n\t\t\tconst { type } = context;\r\n\t\t\t/** @type {Map<string, Chunk[]>} */\r\n\t\t\tconst compilationFileToChunks = new Map();\r\n\t\t\t/** @type {Map<string, Chunk[]>} */\r\n\t\t\tconst compilationAuxiliaryFileToChunks = new Map();\r\n\t\t\tfor (const chunk of compilation.chunks) {\r\n\t\t\t\tfor (const file of chunk.files) {\r\n\t\t\t\t\tlet array = compilationFileToChunks.get(file);\r\n\t\t\t\t\tif (array === undefined) {\r\n\t\t\t\t\t\tarray = [];\r\n\t\t\t\t\t\tcompilationFileToChunks.set(file, array);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tarray.push(chunk);\r\n\t\t\t\t}\r\n\t\t\t\tfor (const file of chunk.auxiliaryFiles) {\r\n\t\t\t\t\tlet array = compilationAuxiliaryFileToChunks.get(file);\r\n\t\t\t\t\tif (array === undefined) {\r\n\t\t\t\t\t\tarray = [];\r\n\t\t\t\t\t\tcompilationAuxiliaryFileToChunks.set(file, array);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tarray.push(chunk);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t/** @type {Map<string, PreprocessedAsset>} */\r\n\t\t\tconst assetMap = new Map();\r\n\t\t\t/** @type {Set<PreprocessedAsset>} */\r\n\t\t\tconst assets = new Set();\r\n\t\t\tfor (const asset of compilation.getAssets()) {\r\n\t\t\t\t/** @type {PreprocessedAsset} */\r\n\t\t\t\tconst item = {\r\n\t\t\t\t\t...asset,\r\n\t\t\t\t\ttype: \"asset\",\r\n\t\t\t\t\trelated: undefined\r\n\t\t\t\t};\r\n\t\t\t\tassets.add(item);\r\n\t\t\t\tassetMap.set(asset.name, item);\r\n\t\t\t}\r\n\t\t\tfor (const item of assetMap.values()) {\r\n\t\t\t\tconst related = item.info.related;\r\n\t\t\t\tif (!related) continue;\r\n\t\t\t\tfor (const type of Object.keys(related)) {\r\n\t\t\t\t\tconst relatedEntry = related[type];\r\n\t\t\t\t\tconst deps = Array.isArray(relatedEntry)\r\n\t\t\t\t\t\t? relatedEntry\r\n\t\t\t\t\t\t: [relatedEntry];\r\n\t\t\t\t\tfor (const dep of deps) {\r\n\t\t\t\t\t\tconst depItem = assetMap.get(dep);\r\n\t\t\t\t\t\tif (!depItem) continue;\r\n\t\t\t\t\t\tassets.delete(depItem);\r\n\t\t\t\t\t\tdepItem.type = type;\r\n\t\t\t\t\t\titem.related = item.related || [];\r\n\t\t\t\t\t\titem.related.push(depItem);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tobject.assetsByChunkName = {};\r\n\t\t\tfor (const [file, chunks] of compilationFileToChunks) {\r\n\t\t\t\tfor (const chunk of chunks) {\r\n\t\t\t\t\tconst name = chunk.name;\r\n\t\t\t\t\tif (!name) continue;\r\n\t\t\t\t\tif (\r\n\t\t\t\t\t\t!Object.prototype.hasOwnProperty.call(\r\n\t\t\t\t\t\t\tobject.assetsByChunkName,\r\n\t\t\t\t\t\t\tname\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t) {\r\n\t\t\t\t\t\tobject.assetsByChunkName[name] = [];\r\n\t\t\t\t\t}\r\n\t\t\t\t\tobject.assetsByChunkName[name].push(file);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tconst groupedAssets = factory.create(\r\n\t\t\t\t`${type}.assets`,\r\n\t\t\t\tArray.from(assets),\r\n\t\t\t\t{\r\n\t\t\t\t\t...context,\r\n\t\t\t\t\tcompilationFileToChunks,\r\n\t\t\t\t\tcompilationAuxiliaryFileToChunks\r\n\t\t\t\t}\r\n\t\t\t);\r\n\t\t\tconst limited = spaceLimited(groupedAssets, options.assetsSpace);\r\n\t\t\tobject.assets = limited.children;\r\n\t\t\tobject.filteredAssets = limited.filteredChildren;\r\n\t\t},\r\n\t\tchunks: (object, compilation, context, options, factory) => {\r\n\t\t\tconst { type } = context;\r\n\t\t\tobject.chunks = factory.create(\r\n\t\t\t\t`${type}.chunks`,\r\n\t\t\t\tArray.from(compilation.chunks),\r\n\t\t\t\tcontext\r\n\t\t\t);\r\n\t\t},\r\n\t\tmodules: (object, compilation, context, options, factory) => {\r\n\t\t\tconst { type } = context;\r\n\t\t\tconst array = Array.from(compilation.modules);\r\n\t\t\tconst groupedModules = factory.create(`${type}.modules`, array, context);\r\n\t\t\tconst limited = spaceLimited(groupedModules, options.modulesSpace);\r\n\t\t\tobject.modules = limited.children;\r\n\t\t\tobject.filteredModules = limited.filteredChildren;\r\n\t\t},\r\n\t\tentrypoints: (\r\n\t\t\tobject,\r\n\t\t\tcompilation,\r\n\t\t\tcontext,\r\n\t\t\t{ entrypoints, chunkGroups, chunkGroupAuxiliary, chunkGroupChildren },\r\n\t\t\tfactory\r\n\t\t) => {\r\n\t\t\tconst { type } = context;\r\n\t\t\tconst array = Array.from(compilation.entrypoints, ([key, value]) => ({\r\n\t\t\t\tname: key,\r\n\t\t\t\tchunkGroup: value\r\n\t\t\t}));\r\n\t\t\tif (entrypoints === \"auto\" && !chunkGroups) {\r\n\t\t\t\tif (array.length > 5) return;\r\n\t\t\t\tif (\r\n\t\t\t\t\t!chunkGroupChildren &&\r\n\t\t\t\t\tarray.every(({ chunkGroup }) => {\r\n\t\t\t\t\t\tif (chunkGroup.chunks.length !== 1) return false;\r\n\t\t\t\t\t\tconst chunk = chunkGroup.chunks[0];\r\n\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\tchunk.files.size === 1 &&\r\n\t\t\t\t\t\t\t(!chunkGroupAuxiliary || chunk.auxiliaryFiles.size === 0)\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t})\r\n\t\t\t\t) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tobject.entrypoints = factory.create(\r\n\t\t\t\t`${type}.entrypoints`,\r\n\t\t\t\tarray,\r\n\t\t\t\tcontext\r\n\t\t\t);\r\n\t\t},\r\n\t\tchunkGroups: (object, compilation, context, options, factory) => {\r\n\t\t\tconst { type } = context;\r\n\t\t\tconst array = Array.from(\r\n\t\t\t\tcompilation.namedChunkGroups,\r\n\t\t\t\t([key, value]) => ({\r\n\t\t\t\t\tname: key,\r\n\t\t\t\t\tchunkGroup: value\r\n\t\t\t\t})\r\n\t\t\t);\r\n\t\t\tobject.namedChunkGroups = factory.create(\r\n\t\t\t\t`${type}.namedChunkGroups`,\r\n\t\t\t\tarray,\r\n\t\t\t\tcontext\r\n\t\t\t);\r\n\t\t},\r\n\t\terrors: (object, compilation, context, options, factory) => {\r\n\t\t\tconst { type, cachedGetErrors } = context;\r\n\t\t\tobject.errors = factory.create(\r\n\t\t\t\t`${type}.errors`,\r\n\t\t\t\tcachedGetErrors(compilation),\r\n\t\t\t\tcontext\r\n\t\t\t);\r\n\t\t},\r\n\t\terrorsCount: (object, compilation, { cachedGetErrors }) => {\r\n\t\t\tobject.errorsCount = countWithChildren(compilation, c =>\r\n\t\t\t\tcachedGetErrors(c)\r\n\t\t\t);\r\n\t\t},\r\n\t\twarnings: (object, compilation, context, options, factory) => {\r\n\t\t\tconst { type, cachedGetWarnings } = context;\r\n\t\t\tobject.warnings = factory.create(\r\n\t\t\t\t`${type}.warnings`,\r\n\t\t\t\tcachedGetWarnings(compilation),\r\n\t\t\t\tcontext\r\n\t\t\t);\r\n\t\t},\r\n\t\twarningsCount: (\r\n\t\t\tobject,\r\n\t\t\tcompilation,\r\n\t\t\tcontext,\r\n\t\t\t{ warningsFilter },\r\n\t\t\tfactory\r\n\t\t) => {\r\n\t\t\tconst { type, cachedGetWarnings } = context;\r\n\t\t\tobject.warningsCount = countWithChildren(compilation, (c, childType) => {\r\n\t\t\t\tif (!warningsFilter && warningsFilter.length === 0)\r\n\t\t\t\t\treturn cachedGetWarnings(c);\r\n\t\t\t\treturn factory\r\n\t\t\t\t\t.create(`${type}${childType}.warnings`, cachedGetWarnings(c), context)\r\n\t\t\t\t\t.filter(warning => {\r\n\t\t\t\t\t\tconst warningString = Object.keys(warning)\r\n\t\t\t\t\t\t\t.map(key => `${warning[key]}`)\r\n\t\t\t\t\t\t\t.join(\"\\n\");\r\n\t\t\t\t\t\treturn !warningsFilter.some(filter =>\r\n\t\t\t\t\t\t\tfilter(warning, warningString)\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t});\r\n\t\t\t});\r\n\t\t},\r\n\t\terrorDetails: (\r\n\t\t\tobject,\r\n\t\t\tcompilation,\r\n\t\t\t{ cachedGetErrors, cachedGetWarnings },\r\n\t\t\t{ errorDetails, errors, warnings }\r\n\t\t) => {\r\n\t\t\tif (errorDetails === \"auto\") {\r\n\t\t\t\tif (warnings) {\r\n\t\t\t\t\tconst warnings = cachedGetWarnings(compilation);\r\n\t\t\t\t\tobject.filteredWarningDetailsCount = warnings\r\n\t\t\t\t\t\t.map(e => typeof e !== \"string\" && e.details)\r\n\t\t\t\t\t\t.filter(Boolean).length;\r\n\t\t\t\t}\r\n\t\t\t\tif (errors) {\r\n\t\t\t\t\tconst errors = cachedGetErrors(compilation);\r\n\t\t\t\t\tif (errors.length >= 3) {\r\n\t\t\t\t\t\tobject.filteredErrorDetailsCount = errors\r\n\t\t\t\t\t\t\t.map(e => typeof e !== \"string\" && e.details)\r\n\t\t\t\t\t\t\t.filter(Boolean).length;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\t\tchildren: (object, compilation, context, options, factory) => {\r\n\t\t\tconst { type } = context;\r\n\t\t\tobject.children = factory.create(\r\n\t\t\t\t`${type}.children`,\r\n\t\t\t\tcompilation.children,\r\n\t\t\t\tcontext\r\n\t\t\t);\r\n\t\t}\r\n\t},\r\n\tasset: {\r\n\t\t_: (object, asset, context, options, factory) => {\r\n\t\t\tconst { compilation } = context;\r\n\t\t\tobject.type = asset.type;\r\n\t\t\tobject.name = asset.name;\r\n\t\t\tobject.size = asset.source.size();\r\n\t\t\tobject.emitted = compilation.emittedAssets.has(asset.name);\r\n\t\t\tobject.comparedForEmit = compilation.comparedForEmitAssets.has(\r\n\t\t\t\tasset.name\r\n\t\t\t);\r\n\t\t\tconst cached = !object.emitted && !object.comparedForEmit;\r\n\t\t\tobject.cached = cached;\r\n\t\t\tobject.info = asset.info;\r\n\t\t\tif (!cached || options.cachedAssets) {\r\n\t\t\t\tObject.assign(\r\n\t\t\t\t\tobject,\r\n\t\t\t\t\tfactory.create(`${context.type}$visible`, asset, context)\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\tasset$visible: {\r\n\t\t_: (\r\n\t\t\tobject,\r\n\t\t\tasset,\r\n\t\t\t{ compilation, compilationFileToChunks, compilationAuxiliaryFileToChunks }\r\n\t\t) => {\r\n\t\t\tconst chunks = compilationFileToChunks.get(asset.name) || [];\r\n\t\t\tconst auxiliaryChunks =\r\n\t\t\t\tcompilationAuxiliaryFileToChunks.get(asset.name) || [];\r\n\t\t\tobject.chunkNames = uniqueOrderedArray(\r\n\t\t\t\tchunks,\r\n\t\t\t\tc => (c.name ? [c.name] : []),\r\n\t\t\t\tcompareIds\r\n\t\t\t);\r\n\t\t\tobject.chunkIdHints = uniqueOrderedArray(\r\n\t\t\t\tchunks,\r\n\t\t\t\tc => Array.from(c.idNameHints),\r\n\t\t\t\tcompareIds\r\n\t\t\t);\r\n\t\t\tobject.auxiliaryChunkNames = uniqueOrderedArray(\r\n\t\t\t\tauxiliaryChunks,\r\n\t\t\t\tc => (c.name ? [c.name] : []),\r\n\t\t\t\tcompareIds\r\n\t\t\t);\r\n\t\t\tobject.auxiliaryChunkIdHints = uniqueOrderedArray(\r\n\t\t\t\tauxiliaryChunks,\r\n\t\t\t\tc => Array.from(c.idNameHints),\r\n\t\t\t\tcompareIds\r\n\t\t\t);\r\n\t\t\tobject.filteredRelated = asset.related ? asset.related.length : undefined;\r\n\t\t},\r\n\t\trelatedAssets: (object, asset, context, options, factory) => {\r\n\t\t\tconst { type } = context;\r\n\t\t\tobject.related = factory.create(\r\n\t\t\t\t`${type.slice(0, -8)}.related`,\r\n\t\t\t\tasset.related,\r\n\t\t\t\tcontext\r\n\t\t\t);\r\n\t\t\tobject.filteredRelated = asset.related\r\n\t\t\t\t? asset.related.length - object.related.length\r\n\t\t\t\t: undefined;\r\n\t\t},\r\n\t\tids: (\r\n\t\t\tobject,\r\n\t\t\tasset,\r\n\t\t\t{ compilationFileToChunks, compilationAuxiliaryFileToChunks }\r\n\t\t) => {\r\n\t\t\tconst chunks = compilationFileToChunks.get(asset.name) || [];\r\n\t\t\tconst auxiliaryChunks =\r\n\t\t\t\tcompilationAuxiliaryFileToChunks.get(asset.name) || [];\r\n\t\t\tobject.chunks = uniqueOrderedArray(chunks, c => c.ids, compareIds);\r\n\t\t\tobject.auxiliaryChunks = uniqueOrderedArray(\r\n\t\t\t\tauxiliaryChunks,\r\n\t\t\t\tc => c.ids,\r\n\t\t\t\tcompareIds\r\n\t\t\t);\r\n\t\t},\r\n\t\tperformance: (object, asset) => {\r\n\t\t\tobject.isOverSizeLimit = SizeLimitsPlugin.isOverSizeLimit(asset.source);\r\n\t\t}\r\n\t},\r\n\tchunkGroup: {\r\n\t\t_: (\r\n\t\t\tobject,\r\n\t\t\t{ name, chunkGroup },\r\n\t\t\t{ compilation, compilation: { moduleGraph, chunkGraph } },\r\n\t\t\t{ ids, chunkGroupAuxiliary, chunkGroupChildren, chunkGroupMaxAssets }\r\n\t\t) => {\r\n\t\t\tconst children =\r\n\t\t\t\tchunkGroupChildren &&\r\n\t\t\t\tchunkGroup.getChildrenByOrders(moduleGraph, chunkGraph);\r\n\t\t\t/**\r\n\t\t\t * @param {string} name Name\r\n\t\t\t * @returns {{ name: string, size: number }} Asset object\r\n\t\t\t */\r\n\t\t\tconst toAsset = name => {\r\n\t\t\t\tconst asset = compilation.getAsset(name);\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname,\r\n\t\t\t\t\tsize: asset ? asset.info.size : -1\r\n\t\t\t\t};\r\n\t\t\t};\r\n\t\t\t/** @type {(total: number, asset: { size: number }) => number} */\r\n\t\t\tconst sizeReducer = (total, { size }) => total + size;\r\n\t\t\tconst assets = uniqueArray(chunkGroup.chunks, c => c.files).map(toAsset);\r\n\t\t\tconst auxiliaryAssets = uniqueOrderedArray(\r\n\t\t\t\tchunkGroup.chunks,\r\n\t\t\t\tc => c.auxiliaryFiles,\r\n\t\t\t\tcompareIds\r\n\t\t\t).map(toAsset);\r\n\t\t\tconst assetsSize = assets.reduce(sizeReducer, 0);\r\n\t\t\tconst auxiliaryAssetsSize = auxiliaryAssets.reduce(sizeReducer, 0);\r\n\t\t\t/** @type {KnownStatsChunkGroup} */\r\n\t\t\tconst statsChunkGroup = {\r\n\t\t\t\tname,\r\n\t\t\t\tchunks: ids ? chunkGroup.chunks.map(c => c.id) : undefined,\r\n\t\t\t\tassets: assets.length <= chunkGroupMaxAssets ? assets : undefined,\r\n\t\t\t\tfilteredAssets:\r\n\t\t\t\t\tassets.length <= chunkGroupMaxAssets ? 0 : assets.length,\r\n\t\t\t\tassetsSize,\r\n\t\t\t\tauxiliaryAssets:\r\n\t\t\t\t\tchunkGroupAuxiliary && auxiliaryAssets.length <= chunkGroupMaxAssets\r\n\t\t\t\t\t\t? auxiliaryAssets\r\n\t\t\t\t\t\t: undefined,\r\n\t\t\t\tfilteredAuxiliaryAssets:\r\n\t\t\t\t\tchunkGroupAuxiliary && auxiliaryAssets.length <= chunkGroupMaxAssets\r\n\t\t\t\t\t\t? 0\r\n\t\t\t\t\t\t: auxiliaryAssets.length,\r\n\t\t\t\tauxiliaryAssetsSize,\r\n\t\t\t\tchildren: children\r\n\t\t\t\t\t? mapObject(children, groups =>\r\n\t\t\t\t\t\t\tgroups.map(group => {\r\n\t\t\t\t\t\t\t\tconst assets = uniqueArray(group.chunks, c => c.files).map(\r\n\t\t\t\t\t\t\t\t\ttoAsset\r\n\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\tconst auxiliaryAssets = uniqueOrderedArray(\r\n\t\t\t\t\t\t\t\t\tgroup.chunks,\r\n\t\t\t\t\t\t\t\t\tc => c.auxiliaryFiles,\r\n\t\t\t\t\t\t\t\t\tcompareIds\r\n\t\t\t\t\t\t\t\t).map(toAsset);\r\n\r\n\t\t\t\t\t\t\t\t/** @type {KnownStatsChunkGroup} */\r\n\t\t\t\t\t\t\t\tconst childStatsChunkGroup = {\r\n\t\t\t\t\t\t\t\t\tname: group.name,\r\n\t\t\t\t\t\t\t\t\tchunks: ids ? group.chunks.map(c => c.id) : undefined,\r\n\t\t\t\t\t\t\t\t\tassets:\r\n\t\t\t\t\t\t\t\t\t\tassets.length <= chunkGroupMaxAssets ? assets : undefined,\r\n\t\t\t\t\t\t\t\t\tfilteredAssets:\r\n\t\t\t\t\t\t\t\t\t\tassets.length <= chunkGroupMaxAssets ? 0 : assets.length,\r\n\t\t\t\t\t\t\t\t\tauxiliaryAssets:\r\n\t\t\t\t\t\t\t\t\t\tchunkGroupAuxiliary &&\r\n\t\t\t\t\t\t\t\t\t\tauxiliaryAssets.length <= chunkGroupMaxAssets\r\n\t\t\t\t\t\t\t\t\t\t\t? auxiliaryAssets\r\n\t\t\t\t\t\t\t\t\t\t\t: undefined,\r\n\t\t\t\t\t\t\t\t\tfilteredAuxiliaryAssets:\r\n\t\t\t\t\t\t\t\t\t\tchunkGroupAuxiliary &&\r\n\t\t\t\t\t\t\t\t\t\tauxiliaryAssets.length <= chunkGroupMaxAssets\r\n\t\t\t\t\t\t\t\t\t\t\t? 0\r\n\t\t\t\t\t\t\t\t\t\t\t: auxiliaryAssets.length\r\n\t\t\t\t\t\t\t\t};\r\n\r\n\t\t\t\t\t\t\t\treturn childStatsChunkGroup;\r\n\t\t\t\t\t\t\t})\r\n\t\t\t\t\t  )\r\n\t\t\t\t\t: undefined,\r\n\t\t\t\tchildAssets: children\r\n\t\t\t\t\t? mapObject(children, groups => {\r\n\t\t\t\t\t\t\t/** @type {Set<string>} */\r\n\t\t\t\t\t\t\tconst set = new Set();\r\n\t\t\t\t\t\t\tfor (const group of groups) {\r\n\t\t\t\t\t\t\t\tfor (const chunk of group.chunks) {\r\n\t\t\t\t\t\t\t\t\tfor (const asset of chunk.files) {\r\n\t\t\t\t\t\t\t\t\t\tset.add(asset);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\treturn Array.from(set);\r\n\t\t\t\t\t  })\r\n\t\t\t\t\t: undefined\r\n\t\t\t};\r\n\t\t\tObject.assign(object, statsChunkGroup);\r\n\t\t},\r\n\t\tperformance: (object, { chunkGroup }) => {\r\n\t\t\tobject.isOverSizeLimit = SizeLimitsPlugin.isOverSizeLimit(chunkGroup);\r\n\t\t}\r\n\t},\r\n\tmodule: {\r\n\t\t_: (object, module, context, options, factory) => {\r\n\t\t\tconst { compilation, type } = context;\r\n\t\t\tconst built = compilation.builtModules.has(module);\r\n\t\t\tconst codeGenerated = compilation.codeGeneratedModules.has(module);\r\n\t\t\tconst buildTimeExecuted =\r\n\t\t\t\tcompilation.buildTimeExecutedModules.has(module);\r\n\t\t\t/** @type {{[x: string]: number}} */\r\n\t\t\tconst sizes = {};\r\n\t\t\tfor (const sourceType of module.getSourceTypes()) {\r\n\t\t\t\tsizes[sourceType] = module.size(sourceType);\r\n\t\t\t}\r\n\t\t\t/** @type {KnownStatsModule} */\r\n\t\t\tconst statsModule = {\r\n\t\t\t\ttype: \"module\",\r\n\t\t\t\tmoduleType: module.type,\r\n\t\t\t\tlayer: module.layer,\r\n\t\t\t\tsize: module.size(),\r\n\t\t\t\tsizes,\r\n\t\t\t\tbuilt,\r\n\t\t\t\tcodeGenerated,\r\n\t\t\t\tbuildTimeExecuted,\r\n\t\t\t\tcached: !built && !codeGenerated\r\n\t\t\t};\r\n\t\t\tObject.assign(object, statsModule);\r\n\r\n\t\t\tif (built || codeGenerated || options.cachedModules) {\r\n\t\t\t\tObject.assign(\r\n\t\t\t\t\tobject,\r\n\t\t\t\t\tfactory.create(`${type}$visible`, module, context)\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\tmodule$visible: {\r\n\t\t_: (object, module, context, { requestShortener }, factory) => {\r\n\t\t\tconst { compilation, type, rootModules } = context;\r\n\t\t\tconst { moduleGraph } = compilation;\r\n\t\t\t/** @type {Module[]} */\r\n\t\t\tconst path = [];\r\n\t\t\tconst issuer = moduleGraph.getIssuer(module);\r\n\t\t\tlet current = issuer;\r\n\t\t\twhile (current) {\r\n\t\t\t\tpath.push(current);\r\n\t\t\t\tcurrent = moduleGraph.getIssuer(current);\r\n\t\t\t}\r\n\t\t\tpath.reverse();\r\n\t\t\tconst profile = moduleGraph.getProfile(module);\r\n\t\t\tconst errors = module.getErrors();\r\n\t\t\tconst errorsCount = errors !== undefined ? countIterable(errors) : 0;\r\n\t\t\tconst warnings = module.getWarnings();\r\n\t\t\tconst warningsCount =\r\n\t\t\t\twarnings !== undefined ? countIterable(warnings) : 0;\r\n\t\t\t/** @type {{[x: string]: number}} */\r\n\t\t\tconst sizes = {};\r\n\t\t\tfor (const sourceType of module.getSourceTypes()) {\r\n\t\t\t\tsizes[sourceType] = module.size(sourceType);\r\n\t\t\t}\r\n\t\t\t/** @type {KnownStatsModule} */\r\n\t\t\tconst statsModule = {\r\n\t\t\t\tidentifier: module.identifier(),\r\n\t\t\t\tname: module.readableIdentifier(requestShortener),\r\n\t\t\t\tnameForCondition: module.nameForCondition(),\r\n\t\t\t\tindex: moduleGraph.getPreOrderIndex(module),\r\n\t\t\t\tpreOrderIndex: moduleGraph.getPreOrderIndex(module),\r\n\t\t\t\tindex2: moduleGraph.getPostOrderIndex(module),\r\n\t\t\t\tpostOrderIndex: moduleGraph.getPostOrderIndex(module),\r\n\t\t\t\tcacheable: module.buildInfo.cacheable,\r\n\t\t\t\toptional: module.isOptional(moduleGraph),\r\n\t\t\t\torphan:\r\n\t\t\t\t\t!type.endsWith(\"module.modules[].module$visible\") &&\r\n\t\t\t\t\tcompilation.chunkGraph.getNumberOfModuleChunks(module) === 0,\r\n\t\t\t\tdependent: rootModules ? !rootModules.has(module) : undefined,\r\n\t\t\t\tissuer: issuer && issuer.identifier(),\r\n\t\t\t\tissuerName: issuer && issuer.readableIdentifier(requestShortener),\r\n\t\t\t\tissuerPath:\r\n\t\t\t\t\tissuer &&\r\n\t\t\t\t\tfactory.create(`${type.slice(0, -8)}.issuerPath`, path, context),\r\n\t\t\t\tfailed: errorsCount > 0,\r\n\t\t\t\terrors: errorsCount,\r\n\t\t\t\twarnings: warningsCount\r\n\t\t\t};\r\n\t\t\tObject.assign(object, statsModule);\r\n\t\t\tif (profile) {\r\n\t\t\t\tobject.profile = factory.create(\r\n\t\t\t\t\t`${type.slice(0, -8)}.profile`,\r\n\t\t\t\t\tprofile,\r\n\t\t\t\t\tcontext\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t},\r\n\t\tids: (object, module, { compilation: { chunkGraph, moduleGraph } }) => {\r\n\t\t\tobject.id = chunkGraph.getModuleId(module);\r\n\t\t\tconst issuer = moduleGraph.getIssuer(module);\r\n\t\t\tobject.issuerId = issuer && chunkGraph.getModuleId(issuer);\r\n\t\t\tobject.chunks = Array.from(\r\n\t\t\t\tchunkGraph.getOrderedModuleChunksIterable(module, compareChunksById),\r\n\t\t\t\tchunk => chunk.id\r\n\t\t\t);\r\n\t\t},\r\n\t\tmoduleAssets: (object, module) => {\r\n\t\t\tobject.assets = module.buildInfo.assets\r\n\t\t\t\t? Object.keys(module.buildInfo.assets)\r\n\t\t\t\t: [];\r\n\t\t},\r\n\t\treasons: (object, module, context, options, factory) => {\r\n\t\t\tconst {\r\n\t\t\t\ttype,\r\n\t\t\t\tcompilation: { moduleGraph }\r\n\t\t\t} = context;\r\n\t\t\tconst groupsReasons = factory.create(\r\n\t\t\t\t`${type.slice(0, -8)}.reasons`,\r\n\t\t\t\tArray.from(moduleGraph.getIncomingConnections(module)),\r\n\t\t\t\tcontext\r\n\t\t\t);\r\n\t\t\tconst limited = spaceLimited(groupsReasons, options.reasonsSpace);\r\n\t\t\tobject.reasons = limited.children;\r\n\t\t\tobject.filteredReasons = limited.filteredChildren;\r\n\t\t},\r\n\t\tusedExports: (\r\n\t\t\tobject,\r\n\t\t\tmodule,\r\n\t\t\t{ runtime, compilation: { moduleGraph } }\r\n\t\t) => {\r\n\t\t\tconst usedExports = moduleGraph.getUsedExports(module, runtime);\r\n\t\t\tif (usedExports === null) {\r\n\t\t\t\tobject.usedExports = null;\r\n\t\t\t} else if (typeof usedExports === \"boolean\") {\r\n\t\t\t\tobject.usedExports = usedExports;\r\n\t\t\t} else {\r\n\t\t\t\tobject.usedExports = Array.from(usedExports);\r\n\t\t\t}\r\n\t\t},\r\n\t\tprovidedExports: (object, module, { compilation: { moduleGraph } }) => {\r\n\t\t\tconst providedExports = moduleGraph.getProvidedExports(module);\r\n\t\t\tobject.providedExports = Array.isArray(providedExports)\r\n\t\t\t\t? providedExports\r\n\t\t\t\t: null;\r\n\t\t},\r\n\t\toptimizationBailout: (\r\n\t\t\tobject,\r\n\t\t\tmodule,\r\n\t\t\t{ compilation: { moduleGraph } },\r\n\t\t\t{ requestShortener }\r\n\t\t) => {\r\n\t\t\tobject.optimizationBailout = moduleGraph\r\n\t\t\t\t.getOptimizationBailout(module)\r\n\t\t\t\t.map(item => {\r\n\t\t\t\t\tif (typeof item === \"function\") return item(requestShortener);\r\n\t\t\t\t\treturn item;\r\n\t\t\t\t});\r\n\t\t},\r\n\t\tdepth: (object, module, { compilation: { moduleGraph } }) => {\r\n\t\t\tobject.depth = moduleGraph.getDepth(module);\r\n\t\t},\r\n\t\tnestedModules: (object, module, context, options, factory) => {\r\n\t\t\tconst { type } = context;\r\n\t\t\tconst innerModules = /** @type {Module & { modules?: Module[] }} */ (\r\n\t\t\t\tmodule\r\n\t\t\t).modules;\r\n\t\t\tif (Array.isArray(innerModules)) {\r\n\t\t\t\tconst groupedModules = factory.create(\r\n\t\t\t\t\t`${type.slice(0, -8)}.modules`,\r\n\t\t\t\t\tinnerModules,\r\n\t\t\t\t\tcontext\r\n\t\t\t\t);\r\n\t\t\t\tconst limited = spaceLimited(\r\n\t\t\t\t\tgroupedModules,\r\n\t\t\t\t\toptions.nestedModulesSpace\r\n\t\t\t\t);\r\n\t\t\t\tobject.modules = limited.children;\r\n\t\t\t\tobject.filteredModules = limited.filteredChildren;\r\n\t\t\t}\r\n\t\t},\r\n\t\tsource: (object, module) => {\r\n\t\t\tconst originalSource = module.originalSource();\r\n\t\t\tif (originalSource) {\r\n\t\t\t\tobject.source = originalSource.source();\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\tprofile: {\r\n\t\t_: (object, profile) => {\r\n\t\t\t/** @type {KnownStatsProfile} */\r\n\t\t\tconst statsProfile = {\r\n\t\t\t\ttotal:\r\n\t\t\t\t\tprofile.factory +\r\n\t\t\t\t\tprofile.restoring +\r\n\t\t\t\t\tprofile.integration +\r\n\t\t\t\t\tprofile.building +\r\n\t\t\t\t\tprofile.storing,\r\n\t\t\t\tresolving: profile.factory,\r\n\t\t\t\trestoring: profile.restoring,\r\n\t\t\t\tbuilding: profile.building,\r\n\t\t\t\tintegration: profile.integration,\r\n\t\t\t\tstoring: profile.storing,\r\n\t\t\t\tadditionalResolving: profile.additionalFactories,\r\n\t\t\t\tadditionalIntegration: profile.additionalIntegration,\r\n\t\t\t\t// TODO remove this in webpack 6\r\n\t\t\t\tfactory: profile.factory,\r\n\t\t\t\t// TODO remove this in webpack 6\r\n\t\t\t\tdependencies: profile.additionalFactories\r\n\t\t\t};\r\n\t\t\tObject.assign(object, statsProfile);\r\n\t\t}\r\n\t},\r\n\tmoduleIssuer: {\r\n\t\t_: (object, module, context, { requestShortener }, factory) => {\r\n\t\t\tconst { compilation, type } = context;\r\n\t\t\tconst { moduleGraph } = compilation;\r\n\t\t\tconst profile = moduleGraph.getProfile(module);\r\n\t\t\t/** @type {KnownStatsModuleIssuer} */\r\n\t\t\tconst statsModuleIssuer = {\r\n\t\t\t\tidentifier: module.identifier(),\r\n\t\t\t\tname: module.readableIdentifier(requestShortener)\r\n\t\t\t};\r\n\t\t\tObject.assign(object, statsModuleIssuer);\r\n\t\t\tif (profile) {\r\n\t\t\t\tobject.profile = factory.create(`${type}.profile`, profile, context);\r\n\t\t\t}\r\n\t\t},\r\n\t\tids: (object, module, { compilation: { chunkGraph } }) => {\r\n\t\t\tobject.id = chunkGraph.getModuleId(module);\r\n\t\t}\r\n\t},\r\n\tmoduleReason: {\r\n\t\t_: (object, reason, { runtime }, { requestShortener }) => {\r\n\t\t\tconst dep = reason.dependency;\r\n\t\t\tconst moduleDep =\r\n\t\t\t\tdep && dep instanceof ModuleDependency ? dep : undefined;\r\n\t\t\t/** @type {KnownStatsModuleReason} */\r\n\t\t\tconst statsModuleReason = {\r\n\t\t\t\tmoduleIdentifier: reason.originModule\r\n\t\t\t\t\t? reason.originModule.identifier()\r\n\t\t\t\t\t: null,\r\n\t\t\t\tmodule: reason.originModule\r\n\t\t\t\t\t? reason.originModule.readableIdentifier(requestShortener)\r\n\t\t\t\t\t: null,\r\n\t\t\t\tmoduleName: reason.originModule\r\n\t\t\t\t\t? reason.originModule.readableIdentifier(requestShortener)\r\n\t\t\t\t\t: null,\r\n\t\t\t\tresolvedModuleIdentifier: reason.resolvedOriginModule\r\n\t\t\t\t\t? reason.resolvedOriginModule.identifier()\r\n\t\t\t\t\t: null,\r\n\t\t\t\tresolvedModule: reason.resolvedOriginModule\r\n\t\t\t\t\t? reason.resolvedOriginModule.readableIdentifier(requestShortener)\r\n\t\t\t\t\t: null,\r\n\t\t\t\ttype: reason.dependency ? reason.dependency.type : null,\r\n\t\t\t\tactive: reason.isActive(runtime),\r\n\t\t\t\texplanation: reason.explanation,\r\n\t\t\t\tuserRequest: (moduleDep && moduleDep.userRequest) || null\r\n\t\t\t};\r\n\t\t\tObject.assign(object, statsModuleReason);\r\n\t\t\tif (reason.dependency) {\r\n\t\t\t\tconst locInfo = formatLocation(reason.dependency.loc);\r\n\t\t\t\tif (locInfo) {\r\n\t\t\t\t\tobject.loc = locInfo;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\t\tids: (object, reason, { compilation: { chunkGraph } }) => {\r\n\t\t\tobject.moduleId = reason.originModule\r\n\t\t\t\t? chunkGraph.getModuleId(reason.originModule)\r\n\t\t\t\t: null;\r\n\t\t\tobject.resolvedModuleId = reason.resolvedOriginModule\r\n\t\t\t\t? chunkGraph.getModuleId(reason.resolvedOriginModule)\r\n\t\t\t\t: null;\r\n\t\t}\r\n\t},\r\n\tchunk: {\r\n\t\t_: (object, chunk, { makePathsRelative, compilation: { chunkGraph } }) => {\r\n\t\t\tconst childIdByOrder = chunk.getChildIdsByOrders(chunkGraph);\r\n\r\n\t\t\t/** @type {KnownStatsChunk} */\r\n\t\t\tconst statsChunk = {\r\n\t\t\t\trendered: chunk.rendered,\r\n\t\t\t\tinitial: chunk.canBeInitial(),\r\n\t\t\t\tentry: chunk.hasRuntime(),\r\n\t\t\t\trecorded: AggressiveSplittingPlugin.wasChunkRecorded(chunk),\r\n\t\t\t\treason: chunk.chunkReason,\r\n\t\t\t\tsize: chunkGraph.getChunkModulesSize(chunk),\r\n\t\t\t\tsizes: chunkGraph.getChunkModulesSizes(chunk),\r\n\t\t\t\tnames: chunk.name ? [chunk.name] : [],\r\n\t\t\t\tidHints: Array.from(chunk.idNameHints),\r\n\t\t\t\truntime:\r\n\t\t\t\t\tchunk.runtime === undefined\r\n\t\t\t\t\t\t? undefined\r\n\t\t\t\t\t\t: typeof chunk.runtime === \"string\"\r\n\t\t\t\t\t\t? [makePathsRelative(chunk.runtime)]\r\n\t\t\t\t\t\t: Array.from(chunk.runtime.sort(), makePathsRelative),\r\n\t\t\t\tfiles: Array.from(chunk.files),\r\n\t\t\t\tauxiliaryFiles: Array.from(chunk.auxiliaryFiles).sort(compareIds),\r\n\t\t\t\thash: chunk.renderedHash,\r\n\t\t\t\tchildrenByOrder: childIdByOrder\r\n\t\t\t};\r\n\t\t\tObject.assign(object, statsChunk);\r\n\t\t},\r\n\t\tids: (object, chunk) => {\r\n\t\t\tobject.id = chunk.id;\r\n\t\t},\r\n\t\tchunkRelations: (object, chunk, { compilation: { chunkGraph } }) => {\r\n\t\t\t/** @type {Set<string|number>} */\r\n\t\t\tconst parents = new Set();\r\n\t\t\t/** @type {Set<string|number>} */\r\n\t\t\tconst children = new Set();\r\n\t\t\t/** @type {Set<string|number>} */\r\n\t\t\tconst siblings = new Set();\r\n\r\n\t\t\tfor (const chunkGroup of chunk.groupsIterable) {\r\n\t\t\t\tfor (const parentGroup of chunkGroup.parentsIterable) {\r\n\t\t\t\t\tfor (const chunk of parentGroup.chunks) {\r\n\t\t\t\t\t\tparents.add(chunk.id);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tfor (const childGroup of chunkGroup.childrenIterable) {\r\n\t\t\t\t\tfor (const chunk of childGroup.chunks) {\r\n\t\t\t\t\t\tchildren.add(chunk.id);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tfor (const sibling of chunkGroup.chunks) {\r\n\t\t\t\t\tif (sibling !== chunk) siblings.add(sibling.id);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tobject.siblings = Array.from(siblings).sort(compareIds);\r\n\t\t\tobject.parents = Array.from(parents).sort(compareIds);\r\n\t\t\tobject.children = Array.from(children).sort(compareIds);\r\n\t\t},\r\n\t\tchunkModules: (object, chunk, context, options, factory) => {\r\n\t\t\tconst {\r\n\t\t\t\ttype,\r\n\t\t\t\tcompilation: { chunkGraph }\r\n\t\t\t} = context;\r\n\t\t\tconst array = chunkGraph.getChunkModules(chunk);\r\n\t\t\tconst groupedModules = factory.create(`${type}.modules`, array, {\r\n\t\t\t\t...context,\r\n\t\t\t\truntime: chunk.runtime,\r\n\t\t\t\trootModules: new Set(chunkGraph.getChunkRootModules(chunk))\r\n\t\t\t});\r\n\t\t\tconst limited = spaceLimited(groupedModules, options.chunkModulesSpace);\r\n\t\t\tobject.modules = limited.children;\r\n\t\t\tobject.filteredModules = limited.filteredChildren;\r\n\t\t},\r\n\t\tchunkOrigins: (object, chunk, context, options, factory) => {\r\n\t\t\tconst {\r\n\t\t\t\ttype,\r\n\t\t\t\tcompilation: { chunkGraph }\r\n\t\t\t} = context;\r\n\t\t\t/** @type {Set<string>} */\r\n\t\t\tconst originsKeySet = new Set();\r\n\t\t\tconst origins = [];\r\n\t\t\tfor (const g of chunk.groupsIterable) {\r\n\t\t\t\torigins.push(...g.origins);\r\n\t\t\t}\r\n\t\t\tconst array = origins.filter(origin => {\r\n\t\t\t\tconst key = [\r\n\t\t\t\t\torigin.module ? chunkGraph.getModuleId(origin.module) : undefined,\r\n\t\t\t\t\tformatLocation(origin.loc),\r\n\t\t\t\t\torigin.request\r\n\t\t\t\t].join();\r\n\t\t\t\tif (originsKeySet.has(key)) return false;\r\n\t\t\t\toriginsKeySet.add(key);\r\n\t\t\t\treturn true;\r\n\t\t\t});\r\n\t\t\tobject.origins = factory.create(`${type}.origins`, array, context);\r\n\t\t}\r\n\t},\r\n\tchunkOrigin: {\r\n\t\t_: (object, origin, context, { requestShortener }) => {\r\n\t\t\t/** @type {KnownStatsChunkOrigin} */\r\n\t\t\tconst statsChunkOrigin = {\r\n\t\t\t\tmodule: origin.module ? origin.module.identifier() : \"\",\r\n\t\t\t\tmoduleIdentifier: origin.module ? origin.module.identifier() : \"\",\r\n\t\t\t\tmoduleName: origin.module\r\n\t\t\t\t\t? origin.module.readableIdentifier(requestShortener)\r\n\t\t\t\t\t: \"\",\r\n\t\t\t\tloc: formatLocation(origin.loc),\r\n\t\t\t\trequest: origin.request\r\n\t\t\t};\r\n\t\t\tObject.assign(object, statsChunkOrigin);\r\n\t\t},\r\n\t\tids: (object, origin, { compilation: { chunkGraph } }) => {\r\n\t\t\tobject.moduleId = origin.module\r\n\t\t\t\t? chunkGraph.getModuleId(origin.module)\r\n\t\t\t\t: undefined;\r\n\t\t}\r\n\t},\r\n\terror: EXTRACT_ERROR,\r\n\twarning: EXTRACT_ERROR,\r\n\tmoduleTraceItem: {\r\n\t\t_: (object, { origin, module }, context, { requestShortener }, factory) => {\r\n\t\t\tconst {\r\n\t\t\t\ttype,\r\n\t\t\t\tcompilation: { moduleGraph }\r\n\t\t\t} = context;\r\n\t\t\tobject.originIdentifier = origin.identifier();\r\n\t\t\tobject.originName = origin.readableIdentifier(requestShortener);\r\n\t\t\tobject.moduleIdentifier = module.identifier();\r\n\t\t\tobject.moduleName = module.readableIdentifier(requestShortener);\r\n\t\t\tconst dependencies = Array.from(\r\n\t\t\t\tmoduleGraph.getIncomingConnections(module)\r\n\t\t\t)\r\n\t\t\t\t.filter(c => c.resolvedOriginModule === origin && c.dependency)\r\n\t\t\t\t.map(c => c.dependency);\r\n\t\t\tobject.dependencies = factory.create(\r\n\t\t\t\t`${type}.dependencies`,\r\n\t\t\t\tArray.from(new Set(dependencies)),\r\n\t\t\t\tcontext\r\n\t\t\t);\r\n\t\t},\r\n\t\tids: (object, { origin, module }, { compilation: { chunkGraph } }) => {\r\n\t\t\tobject.originId = chunkGraph.getModuleId(origin);\r\n\t\t\tobject.moduleId = chunkGraph.getModuleId(module);\r\n\t\t}\r\n\t},\r\n\tmoduleTraceDependency: {\r\n\t\t_: (object, dependency) => {\r\n\t\t\tobject.loc = formatLocation(dependency.loc);\r\n\t\t}\r\n\t}\r\n};\r\n\r\n/** @type {Record<string, Record<string, (thing: any, context: StatsFactoryContext, options: NormalizedStatsOptions) => boolean | undefined>>} */\r\nconst FILTER = {\r\n\t\"module.reasons\": {\r\n\t\t\"!orphanModules\": (reason, { compilation: { chunkGraph } }) => {\r\n\t\t\tif (\r\n\t\t\t\treason.originModule &&\r\n\t\t\t\tchunkGraph.getNumberOfModuleChunks(reason.originModule) === 0\r\n\t\t\t) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n};\r\n\r\n/** @type {Record<string, Record<string, (thing: Object, context: StatsFactoryContext, options: NormalizedStatsOptions) => boolean | undefined>>} */\r\nconst FILTER_RESULTS = {\r\n\t\"compilation.warnings\": {\r\n\t\twarningsFilter: util.deprecate(\r\n\t\t\t(warning, context, { warningsFilter }) => {\r\n\t\t\t\tconst warningString = Object.keys(warning)\r\n\t\t\t\t\t.map(key => `${warning[key]}`)\r\n\t\t\t\t\t.join(\"\\n\");\r\n\t\t\t\treturn !warningsFilter.some(filter => filter(warning, warningString));\r\n\t\t\t},\r\n\t\t\t\"config.stats.warningsFilter is deprecated in favor of config.ignoreWarnings\",\r\n\t\t\t\"DEP_WEBPACK_STATS_WARNINGS_FILTER\"\r\n\t\t)\r\n\t}\r\n};\r\n\r\n/** @type {Record<string, (comparators: Function[], context: StatsFactoryContext) => void>} */\r\nconst MODULES_SORTER = {\r\n\t_: (comparators, { compilation: { moduleGraph } }) => {\r\n\t\tcomparators.push(\r\n\t\t\tcompareSelect(\r\n\t\t\t\t/**\r\n\t\t\t\t * @param {Module} m module\r\n\t\t\t\t * @returns {number} depth\r\n\t\t\t\t */\r\n\t\t\t\tm => moduleGraph.getDepth(m),\r\n\t\t\t\tcompareNumbers\r\n\t\t\t),\r\n\t\t\tcompareSelect(\r\n\t\t\t\t/**\r\n\t\t\t\t * @param {Module} m module\r\n\t\t\t\t * @returns {number} index\r\n\t\t\t\t */\r\n\t\t\t\tm => moduleGraph.getPreOrderIndex(m),\r\n\t\t\t\tcompareNumbers\r\n\t\t\t),\r\n\t\t\tcompareSelect(\r\n\t\t\t\t/**\r\n\t\t\t\t * @param {Module} m module\r\n\t\t\t\t * @returns {string} identifier\r\n\t\t\t\t */\r\n\t\t\t\tm => m.identifier(),\r\n\t\t\t\tcompareIds\r\n\t\t\t)\r\n\t\t);\r\n\t}\r\n};\r\n\r\n/** @type {Record<string, Record<string, (comparators: Function[], context: StatsFactoryContext) => void>>} */\r\nconst SORTERS = {\r\n\t\"compilation.chunks\": {\r\n\t\t_: comparators => {\r\n\t\t\tcomparators.push(compareSelect(c => c.id, compareIds));\r\n\t\t}\r\n\t},\r\n\t\"compilation.modules\": MODULES_SORTER,\r\n\t\"chunk.rootModules\": MODULES_SORTER,\r\n\t\"chunk.modules\": MODULES_SORTER,\r\n\t\"module.modules\": MODULES_SORTER,\r\n\t\"module.reasons\": {\r\n\t\t_: (comparators, { compilation: { chunkGraph } }) => {\r\n\t\t\tcomparators.push(\r\n\t\t\t\tcompareSelect(x => x.originModule, compareModulesByIdentifier)\r\n\t\t\t);\r\n\t\t\tcomparators.push(\r\n\t\t\t\tcompareSelect(x => x.resolvedOriginModule, compareModulesByIdentifier)\r\n\t\t\t);\r\n\t\t\tcomparators.push(\r\n\t\t\t\tcompareSelect(\r\n\t\t\t\t\tx => x.dependency,\r\n\t\t\t\t\tconcatComparators(\r\n\t\t\t\t\t\tcompareSelect(\r\n\t\t\t\t\t\t\t/**\r\n\t\t\t\t\t\t\t * @param {Dependency} x dependency\r\n\t\t\t\t\t\t\t * @returns {DependencyLocation} location\r\n\t\t\t\t\t\t\t */\r\n\t\t\t\t\t\t\tx => x.loc,\r\n\t\t\t\t\t\t\tcompareLocations\r\n\t\t\t\t\t\t),\r\n\t\t\t\t\t\tcompareSelect(x => x.type, compareIds)\r\n\t\t\t\t\t)\r\n\t\t\t\t)\r\n\t\t\t);\r\n\t\t}\r\n\t},\r\n\t\"chunk.origins\": {\r\n\t\t_: (comparators, { compilation: { chunkGraph } }) => {\r\n\t\t\tcomparators.push(\r\n\t\t\t\tcompareSelect(\r\n\t\t\t\t\torigin =>\r\n\t\t\t\t\t\torigin.module ? chunkGraph.getModuleId(origin.module) : undefined,\r\n\t\t\t\t\tcompareIds\r\n\t\t\t\t),\r\n\t\t\t\tcompareSelect(origin => formatLocation(origin.loc), compareIds),\r\n\t\t\t\tcompareSelect(origin => origin.request, compareIds)\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n};\r\n\r\nconst getItemSize = item => {\r\n\t// Each item takes 1 line\r\n\t// + the size of the children\r\n\t// + 1 extra line when it has children and filteredChildren\r\n\treturn !item.children\r\n\t\t? 1\r\n\t\t: item.filteredChildren\r\n\t\t? 2 + getTotalSize(item.children)\r\n\t\t: 1 + getTotalSize(item.children);\r\n};\r\n\r\nconst getTotalSize = children => {\r\n\tlet size = 0;\r\n\tfor (const child of children) {\r\n\t\tsize += getItemSize(child);\r\n\t}\r\n\treturn size;\r\n};\r\n\r\nconst getTotalItems = children => {\r\n\tlet count = 0;\r\n\tfor (const child of children) {\r\n\t\tif (!child.children && !child.filteredChildren) {\r\n\t\t\tcount++;\r\n\t\t} else {\r\n\t\t\tif (child.children) count += getTotalItems(child.children);\r\n\t\t\tif (child.filteredChildren) count += child.filteredChildren;\r\n\t\t}\r\n\t}\r\n\treturn count;\r\n};\r\n\r\nconst collapse = children => {\r\n\t// After collapse each child must take exactly one line\r\n\tconst newChildren = [];\r\n\tfor (const child of children) {\r\n\t\tif (child.children) {\r\n\t\t\tlet filteredChildren = child.filteredChildren || 0;\r\n\t\t\tfilteredChildren += getTotalItems(child.children);\r\n\t\t\tnewChildren.push({\r\n\t\t\t\t...child,\r\n\t\t\t\tchildren: undefined,\r\n\t\t\t\tfilteredChildren\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\tnewChildren.push(child);\r\n\t\t}\r\n\t}\r\n\treturn newChildren;\r\n};\r\n\r\nconst spaceLimited = (\r\n\titemsAndGroups,\r\n\tmax,\r\n\tfilteredChildrenLineReserved = false\r\n) => {\r\n\tif (max < 1) {\r\n\t\treturn {\r\n\t\t\tchildren: undefined,\r\n\t\t\tfilteredChildren: getTotalItems(itemsAndGroups)\r\n\t\t};\r\n\t}\r\n\t/** @type {any[] | undefined} */\r\n\tlet children = undefined;\r\n\t/** @type {number | undefined} */\r\n\tlet filteredChildren = undefined;\r\n\t// This are the groups, which take 1+ lines each\r\n\tconst groups = [];\r\n\t// The sizes of the groups are stored in groupSizes\r\n\tconst groupSizes = [];\r\n\t// This are the items, which take 1 line each\r\n\tconst items = [];\r\n\t// The total of group sizes\r\n\tlet groupsSize = 0;\r\n\r\n\tfor (const itemOrGroup of itemsAndGroups) {\r\n\t\t// is item\r\n\t\tif (!itemOrGroup.children && !itemOrGroup.filteredChildren) {\r\n\t\t\titems.push(itemOrGroup);\r\n\t\t} else {\r\n\t\t\tgroups.push(itemOrGroup);\r\n\t\t\tconst size = getItemSize(itemOrGroup);\r\n\t\t\tgroupSizes.push(size);\r\n\t\t\tgroupsSize += size;\r\n\t\t}\r\n\t}\r\n\r\n\tif (groupsSize + items.length <= max) {\r\n\t\t// The total size in the current state fits into the max\r\n\t\t// keep all\r\n\t\tchildren = groups.length > 0 ? groups.concat(items) : items;\r\n\t} else if (groups.length === 0) {\r\n\t\t// slice items to max\r\n\t\t// inner space marks that lines for filteredChildren already reserved\r\n\t\tconst limit = max - (filteredChildrenLineReserved ? 0 : 1);\r\n\t\tfilteredChildren = items.length - limit;\r\n\t\titems.length = limit;\r\n\t\tchildren = items;\r\n\t} else {\r\n\t\t// limit is the size when all groups are collapsed\r\n\t\tconst limit =\r\n\t\t\tgroups.length +\r\n\t\t\t(filteredChildrenLineReserved || items.length === 0 ? 0 : 1);\r\n\t\tif (limit < max) {\r\n\t\t\t// calculate how much we are over the size limit\r\n\t\t\t// this allows to approach the limit faster\r\n\t\t\tlet oversize;\r\n\t\t\t// If each group would take 1 line the total would be below the maximum\r\n\t\t\t// collapse some groups, keep items\r\n\t\t\twhile (\r\n\t\t\t\t(oversize =\r\n\t\t\t\t\tgroupsSize +\r\n\t\t\t\t\titems.length +\r\n\t\t\t\t\t(filteredChildren && !filteredChildrenLineReserved ? 1 : 0) -\r\n\t\t\t\t\tmax) > 0\r\n\t\t\t) {\r\n\t\t\t\t// Find the maximum group and process only this one\r\n\t\t\t\tconst maxGroupSize = Math.max(...groupSizes);\r\n\t\t\t\tif (maxGroupSize < items.length) {\r\n\t\t\t\t\tfilteredChildren = items.length;\r\n\t\t\t\t\titems.length = 0;\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\tfor (let i = 0; i < groups.length; i++) {\r\n\t\t\t\t\tif (groupSizes[i] === maxGroupSize) {\r\n\t\t\t\t\t\tconst group = groups[i];\r\n\t\t\t\t\t\t// run this algorithm recursively and limit the size of the children to\r\n\t\t\t\t\t\t// current size - oversize / number of groups\r\n\t\t\t\t\t\t// So it should always end up being smaller\r\n\t\t\t\t\t\tconst headerSize = group.filteredChildren ? 2 : 1;\r\n\t\t\t\t\t\tconst limited = spaceLimited(\r\n\t\t\t\t\t\t\tgroup.children,\r\n\t\t\t\t\t\t\tmaxGroupSize -\r\n\t\t\t\t\t\t\t\t// we should use ceil to always feet in max\r\n\t\t\t\t\t\t\t\tMath.ceil(oversize / groups.length) -\r\n\t\t\t\t\t\t\t\t// we substitute size of group head\r\n\t\t\t\t\t\t\t\theaderSize,\r\n\t\t\t\t\t\t\theaderSize === 2\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t\tgroups[i] = {\r\n\t\t\t\t\t\t\t...group,\r\n\t\t\t\t\t\t\tchildren: limited.children,\r\n\t\t\t\t\t\t\tfilteredChildren: limited.filteredChildren\r\n\t\t\t\t\t\t\t\t? (group.filteredChildren || 0) + limited.filteredChildren\r\n\t\t\t\t\t\t\t\t: group.filteredChildren\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tconst newSize = getItemSize(groups[i]);\r\n\t\t\t\t\t\tgroupsSize -= maxGroupSize - newSize;\r\n\t\t\t\t\t\tgroupSizes[i] = newSize;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tchildren = groups.concat(items);\r\n\t\t} else if (limit === max) {\r\n\t\t\t// If we have only enough space to show one line per group and one line for the filtered items\r\n\t\t\t// collapse all groups and items\r\n\t\t\tchildren = collapse(groups);\r\n\t\t\tfilteredChildren = items.length;\r\n\t\t} else {\r\n\t\t\t// If we have no space\r\n\t\t\t// collapse complete group\r\n\t\t\tfilteredChildren = getTotalItems(itemsAndGroups);\r\n\t\t}\r\n\t}\r\n\r\n\treturn {\r\n\t\tchildren,\r\n\t\tfilteredChildren\r\n\t};\r\n};\r\n\r\nconst assetGroup = (children, assets) => {\r\n\tlet size = 0;\r\n\tfor (const asset of children) {\r\n\t\tsize += asset.size;\r\n\t}\r\n\treturn {\r\n\t\tsize\r\n\t};\r\n};\r\n\r\nconst moduleGroup = (children, modules) => {\r\n\tlet size = 0;\r\n\tconst sizes = {};\r\n\tfor (const module of children) {\r\n\t\tsize += module.size;\r\n\t\tfor (const key of Object.keys(module.sizes)) {\r\n\t\t\tsizes[key] = (sizes[key] || 0) + module.sizes[key];\r\n\t\t}\r\n\t}\r\n\treturn {\r\n\t\tsize,\r\n\t\tsizes\r\n\t};\r\n};\r\n\r\nconst reasonGroup = (children, reasons) => {\r\n\tlet active = false;\r\n\tfor (const reason of children) {\r\n\t\tactive = active || reason.active;\r\n\t}\r\n\treturn {\r\n\t\tactive\r\n\t};\r\n};\r\n\r\nconst GROUP_EXTENSION_REGEXP = /(\\.[^.]+?)(?:\\?|(?: \\+ \\d+ modules?)?$)/;\r\nconst GROUP_PATH_REGEXP = /(.+)[/\\\\][^/\\\\]+?(?:\\?|(?: \\+ \\d+ modules?)?$)/;\r\n\r\n/** @type {Record<string, (groupConfigs: GroupConfig[], context: StatsFactoryContext, options: NormalizedStatsOptions) => void>} */\r\nconst ASSETS_GROUPERS = {\r\n\t_: (groupConfigs, context, options) => {\r\n\t\tconst groupByFlag = (name, exclude) => {\r\n\t\t\tgroupConfigs.push({\r\n\t\t\t\tgetKeys: asset => {\r\n\t\t\t\t\treturn asset[name] ? [\"1\"] : undefined;\r\n\t\t\t\t},\r\n\t\t\t\tgetOptions: () => {\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tgroupChildren: !exclude,\r\n\t\t\t\t\t\tforce: exclude\r\n\t\t\t\t\t};\r\n\t\t\t\t},\r\n\t\t\t\tcreateGroup: (key, children, assets) => {\r\n\t\t\t\t\treturn exclude\r\n\t\t\t\t\t\t? {\r\n\t\t\t\t\t\t\t\ttype: \"assets by status\",\r\n\t\t\t\t\t\t\t\t[name]: !!key,\r\n\t\t\t\t\t\t\t\tfilteredChildren: assets.length,\r\n\t\t\t\t\t\t\t\t...assetGroup(children, assets)\r\n\t\t\t\t\t\t  }\r\n\t\t\t\t\t\t: {\r\n\t\t\t\t\t\t\t\ttype: \"assets by status\",\r\n\t\t\t\t\t\t\t\t[name]: !!key,\r\n\t\t\t\t\t\t\t\tchildren,\r\n\t\t\t\t\t\t\t\t...assetGroup(children, assets)\r\n\t\t\t\t\t\t  };\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t};\r\n\t\tconst {\r\n\t\t\tgroupAssetsByEmitStatus,\r\n\t\t\tgroupAssetsByPath,\r\n\t\t\tgroupAssetsByExtension\r\n\t\t} = options;\r\n\t\tif (groupAssetsByEmitStatus) {\r\n\t\t\tgroupByFlag(\"emitted\");\r\n\t\t\tgroupByFlag(\"comparedForEmit\");\r\n\t\t\tgroupByFlag(\"isOverSizeLimit\");\r\n\t\t}\r\n\t\tif (groupAssetsByEmitStatus || !options.cachedAssets) {\r\n\t\t\tgroupByFlag(\"cached\", !options.cachedAssets);\r\n\t\t}\r\n\t\tif (groupAssetsByPath || groupAssetsByExtension) {\r\n\t\t\tgroupConfigs.push({\r\n\t\t\t\tgetKeys: asset => {\r\n\t\t\t\t\tconst extensionMatch =\r\n\t\t\t\t\t\tgroupAssetsByExtension && GROUP_EXTENSION_REGEXP.exec(asset.name);\r\n\t\t\t\t\tconst extension = extensionMatch ? extensionMatch[1] : \"\";\r\n\t\t\t\t\tconst pathMatch =\r\n\t\t\t\t\t\tgroupAssetsByPath && GROUP_PATH_REGEXP.exec(asset.name);\r\n\t\t\t\t\tconst path = pathMatch ? pathMatch[1].split(/[/\\\\]/) : [];\r\n\t\t\t\t\tconst keys = [];\r\n\t\t\t\t\tif (groupAssetsByPath) {\r\n\t\t\t\t\t\tkeys.push(\".\");\r\n\t\t\t\t\t\tif (extension)\r\n\t\t\t\t\t\t\tkeys.push(\r\n\t\t\t\t\t\t\t\tpath.length\r\n\t\t\t\t\t\t\t\t\t? `${path.join(\"/\")}/*${extension}`\r\n\t\t\t\t\t\t\t\t\t: `*${extension}`\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\twhile (path.length > 0) {\r\n\t\t\t\t\t\t\tkeys.push(path.join(\"/\") + \"/\");\r\n\t\t\t\t\t\t\tpath.pop();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tif (extension) keys.push(`*${extension}`);\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn keys;\r\n\t\t\t\t},\r\n\t\t\t\tcreateGroup: (key, children, assets) => {\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\ttype: groupAssetsByPath ? \"assets by path\" : \"assets by extension\",\r\n\t\t\t\t\t\tname: key,\r\n\t\t\t\t\t\tchildren,\r\n\t\t\t\t\t\t...assetGroup(children, assets)\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t},\r\n\tgroupAssetsByInfo: (groupConfigs, context, options) => {\r\n\t\tconst groupByAssetInfoFlag = name => {\r\n\t\t\tgroupConfigs.push({\r\n\t\t\t\tgetKeys: asset => {\r\n\t\t\t\t\treturn asset.info && asset.info[name] ? [\"1\"] : undefined;\r\n\t\t\t\t},\r\n\t\t\t\tcreateGroup: (key, children, assets) => {\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\ttype: \"assets by info\",\r\n\t\t\t\t\t\tinfo: {\r\n\t\t\t\t\t\t\t[name]: !!key\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tchildren,\r\n\t\t\t\t\t\t...assetGroup(children, assets)\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t};\r\n\t\tgroupByAssetInfoFlag(\"immutable\");\r\n\t\tgroupByAssetInfoFlag(\"development\");\r\n\t\tgroupByAssetInfoFlag(\"hotModuleReplacement\");\r\n\t},\r\n\tgroupAssetsByChunk: (groupConfigs, context, options) => {\r\n\t\tconst groupByNames = name => {\r\n\t\t\tgroupConfigs.push({\r\n\t\t\t\tgetKeys: asset => {\r\n\t\t\t\t\treturn asset[name];\r\n\t\t\t\t},\r\n\t\t\t\tcreateGroup: (key, children, assets) => {\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\ttype: \"assets by chunk\",\r\n\t\t\t\t\t\t[name]: [key],\r\n\t\t\t\t\t\tchildren,\r\n\t\t\t\t\t\t...assetGroup(children, assets)\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t};\r\n\t\tgroupByNames(\"chunkNames\");\r\n\t\tgroupByNames(\"auxiliaryChunkNames\");\r\n\t\tgroupByNames(\"chunkIdHints\");\r\n\t\tgroupByNames(\"auxiliaryChunkIdHints\");\r\n\t},\r\n\texcludeAssets: (groupConfigs, context, { excludeAssets }) => {\r\n\t\tgroupConfigs.push({\r\n\t\t\tgetKeys: asset => {\r\n\t\t\t\tconst ident = asset.name;\r\n\t\t\t\tconst excluded = excludeAssets.some(fn => fn(ident, asset));\r\n\t\t\t\tif (excluded) return [\"excluded\"];\r\n\t\t\t},\r\n\t\t\tgetOptions: () => ({\r\n\t\t\t\tgroupChildren: false,\r\n\t\t\t\tforce: true\r\n\t\t\t}),\r\n\t\t\tcreateGroup: (key, children, assets) => ({\r\n\t\t\t\ttype: \"hidden assets\",\r\n\t\t\t\tfilteredChildren: assets.length,\r\n\t\t\t\t...assetGroup(children, assets)\r\n\t\t\t})\r\n\t\t});\r\n\t}\r\n};\r\n\r\n/** @type {function(\"module\" | \"chunk\" | \"root-of-chunk\" | \"nested\"): Record<string, (groupConfigs: GroupConfig[], context: StatsFactoryContext, options: NormalizedStatsOptions) => void>} */\r\nconst MODULES_GROUPERS = type => ({\r\n\t_: (groupConfigs, context, options) => {\r\n\t\tconst groupByFlag = (name, type, exclude) => {\r\n\t\t\tgroupConfigs.push({\r\n\t\t\t\tgetKeys: module => {\r\n\t\t\t\t\treturn module[name] ? [\"1\"] : undefined;\r\n\t\t\t\t},\r\n\t\t\t\tgetOptions: () => {\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tgroupChildren: !exclude,\r\n\t\t\t\t\t\tforce: exclude\r\n\t\t\t\t\t};\r\n\t\t\t\t},\r\n\t\t\t\tcreateGroup: (key, children, modules) => {\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\ttype,\r\n\t\t\t\t\t\t[name]: !!key,\r\n\t\t\t\t\t\t...(exclude ? { filteredChildren: modules.length } : { children }),\r\n\t\t\t\t\t\t...moduleGroup(children, modules)\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t};\r\n\t\tconst {\r\n\t\t\tgroupModulesByCacheStatus,\r\n\t\t\tgroupModulesByLayer,\r\n\t\t\tgroupModulesByAttributes,\r\n\t\t\tgroupModulesByType,\r\n\t\t\tgroupModulesByPath,\r\n\t\t\tgroupModulesByExtension\r\n\t\t} = options;\r\n\t\tif (groupModulesByAttributes) {\r\n\t\t\tgroupByFlag(\"errors\", \"modules with errors\");\r\n\t\t\tgroupByFlag(\"warnings\", \"modules with warnings\");\r\n\t\t\tgroupByFlag(\"assets\", \"modules with assets\");\r\n\t\t\tgroupByFlag(\"optional\", \"optional modules\");\r\n\t\t}\r\n\t\tif (groupModulesByCacheStatus) {\r\n\t\t\tgroupByFlag(\"cacheable\", \"cacheable modules\");\r\n\t\t\tgroupByFlag(\"built\", \"built modules\");\r\n\t\t\tgroupByFlag(\"codeGenerated\", \"code generated modules\");\r\n\t\t}\r\n\t\tif (groupModulesByCacheStatus || !options.cachedModules) {\r\n\t\t\tgroupByFlag(\"cached\", \"cached modules\", !options.cachedModules);\r\n\t\t}\r\n\t\tif (groupModulesByAttributes || !options.orphanModules) {\r\n\t\t\tgroupByFlag(\"orphan\", \"orphan modules\", !options.orphanModules);\r\n\t\t}\r\n\t\tif (groupModulesByAttributes || !options.dependentModules) {\r\n\t\t\tgroupByFlag(\"dependent\", \"dependent modules\", !options.dependentModules);\r\n\t\t}\r\n\t\tif (groupModulesByType || !options.runtimeModules) {\r\n\t\t\tgroupConfigs.push({\r\n\t\t\t\tgetKeys: module => {\r\n\t\t\t\t\tif (!module.moduleType) return;\r\n\t\t\t\t\tif (groupModulesByType) {\r\n\t\t\t\t\t\treturn [module.moduleType.split(\"/\", 1)[0]];\r\n\t\t\t\t\t} else if (module.moduleType === \"runtime\") {\r\n\t\t\t\t\t\treturn [\"runtime\"];\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\tgetOptions: key => {\r\n\t\t\t\t\tconst exclude = key === \"runtime\" && !options.runtimeModules;\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tgroupChildren: !exclude,\r\n\t\t\t\t\t\tforce: exclude\r\n\t\t\t\t\t};\r\n\t\t\t\t},\r\n\t\t\t\tcreateGroup: (key, children, modules) => {\r\n\t\t\t\t\tconst exclude = key === \"runtime\" && !options.runtimeModules;\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\ttype: `${key} modules`,\r\n\t\t\t\t\t\tmoduleType: key,\r\n\t\t\t\t\t\t...(exclude ? { filteredChildren: modules.length } : { children }),\r\n\t\t\t\t\t\t...moduleGroup(children, modules)\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t\tif (groupModulesByLayer) {\r\n\t\t\tgroupConfigs.push({\r\n\t\t\t\tgetKeys: module => {\r\n\t\t\t\t\treturn [module.layer];\r\n\t\t\t\t},\r\n\t\t\t\tcreateGroup: (key, children, modules) => {\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\ttype: \"modules by layer\",\r\n\t\t\t\t\t\tlayer: key,\r\n\t\t\t\t\t\tchildren,\r\n\t\t\t\t\t\t...moduleGroup(children, modules)\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t\tif (groupModulesByPath || groupModulesByExtension) {\r\n\t\t\tgroupConfigs.push({\r\n\t\t\t\tgetKeys: module => {\r\n\t\t\t\t\tif (!module.name) return;\r\n\t\t\t\t\tconst resource = parseResource(module.name.split(\"!\").pop()).path;\r\n\t\t\t\t\tconst dataUrl = /^data:[^,;]+/.exec(resource);\r\n\t\t\t\t\tif (dataUrl) return [dataUrl[0]];\r\n\t\t\t\t\tconst extensionMatch =\r\n\t\t\t\t\t\tgroupModulesByExtension && GROUP_EXTENSION_REGEXP.exec(resource);\r\n\t\t\t\t\tconst extension = extensionMatch ? extensionMatch[1] : \"\";\r\n\t\t\t\t\tconst pathMatch =\r\n\t\t\t\t\t\tgroupModulesByPath && GROUP_PATH_REGEXP.exec(resource);\r\n\t\t\t\t\tconst path = pathMatch ? pathMatch[1].split(/[/\\\\]/) : [];\r\n\t\t\t\t\tconst keys = [];\r\n\t\t\t\t\tif (groupModulesByPath) {\r\n\t\t\t\t\t\tif (extension)\r\n\t\t\t\t\t\t\tkeys.push(\r\n\t\t\t\t\t\t\t\tpath.length\r\n\t\t\t\t\t\t\t\t\t? `${path.join(\"/\")}/*${extension}`\r\n\t\t\t\t\t\t\t\t\t: `*${extension}`\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\twhile (path.length > 0) {\r\n\t\t\t\t\t\t\tkeys.push(path.join(\"/\") + \"/\");\r\n\t\t\t\t\t\t\tpath.pop();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tif (extension) keys.push(`*${extension}`);\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn keys;\r\n\t\t\t\t},\r\n\t\t\t\tcreateGroup: (key, children, modules) => {\r\n\t\t\t\t\tconst isDataUrl = key.startsWith(\"data:\");\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\ttype: isDataUrl\r\n\t\t\t\t\t\t\t? \"modules by mime type\"\r\n\t\t\t\t\t\t\t: groupModulesByPath\r\n\t\t\t\t\t\t\t? \"modules by path\"\r\n\t\t\t\t\t\t\t: \"modules by extension\",\r\n\t\t\t\t\t\tname: isDataUrl ? key.slice(/* 'data:'.length */ 5) : key,\r\n\t\t\t\t\t\tchildren,\r\n\t\t\t\t\t\t...moduleGroup(children, modules)\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t},\r\n\texcludeModules: (groupConfigs, context, { excludeModules }) => {\r\n\t\tgroupConfigs.push({\r\n\t\t\tgetKeys: module => {\r\n\t\t\t\tconst name = module.name;\r\n\t\t\t\tif (name) {\r\n\t\t\t\t\tconst excluded = excludeModules.some(fn => fn(name, module, type));\r\n\t\t\t\t\tif (excluded) return [\"1\"];\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tgetOptions: () => ({\r\n\t\t\t\tgroupChildren: false,\r\n\t\t\t\tforce: true\r\n\t\t\t}),\r\n\t\t\tcreateGroup: (key, children, modules) => ({\r\n\t\t\t\ttype: \"hidden modules\",\r\n\t\t\t\tfilteredChildren: children.length,\r\n\t\t\t\t...moduleGroup(children, modules)\r\n\t\t\t})\r\n\t\t});\r\n\t}\r\n});\r\n\r\n/** @type {Record<string, Record<string, (groupConfigs: GroupConfig[], context: StatsFactoryContext, options: NormalizedStatsOptions) => void>>} */\r\nconst RESULT_GROUPERS = {\r\n\t\"compilation.assets\": ASSETS_GROUPERS,\r\n\t\"asset.related\": ASSETS_GROUPERS,\r\n\t\"compilation.modules\": MODULES_GROUPERS(\"module\"),\r\n\t\"chunk.modules\": MODULES_GROUPERS(\"chunk\"),\r\n\t\"chunk.rootModules\": MODULES_GROUPERS(\"root-of-chunk\"),\r\n\t\"module.modules\": MODULES_GROUPERS(\"nested\"),\r\n\t\"module.reasons\": {\r\n\t\tgroupReasonsByOrigin: groupConfigs => {\r\n\t\t\tgroupConfigs.push({\r\n\t\t\t\tgetKeys: reason => {\r\n\t\t\t\t\treturn [reason.module];\r\n\t\t\t\t},\r\n\t\t\t\tcreateGroup: (key, children, reasons) => {\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\ttype: \"from origin\",\r\n\t\t\t\t\t\tmodule: key,\r\n\t\t\t\t\t\tchildren,\r\n\t\t\t\t\t\t...reasonGroup(children, reasons)\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n};\r\n\r\n// remove a prefixed \"!\" that can be specified to reverse sort order\r\nconst normalizeFieldKey = field => {\r\n\tif (field[0] === \"!\") {\r\n\t\treturn field.slice(1);\r\n\t}\r\n\treturn field;\r\n};\r\n\r\n// if a field is prefixed by a \"!\" reverse sort order\r\nconst sortOrderRegular = field => {\r\n\tif (field[0] === \"!\") {\r\n\t\treturn false;\r\n\t}\r\n\treturn true;\r\n};\r\n\r\n/**\r\n * @param {string} field field name\r\n * @returns {function(Object, Object): number} comparators\r\n */\r\nconst sortByField = field => {\r\n\tif (!field) {\r\n\t\t/**\r\n\t\t * @param {any} a first\r\n\t\t * @param {any} b second\r\n\t\t * @returns {-1|0|1} zero\r\n\t\t */\r\n\t\tconst noSort = (a, b) => 0;\r\n\t\treturn noSort;\r\n\t}\r\n\r\n\tconst fieldKey = normalizeFieldKey(field);\r\n\r\n\tlet sortFn = compareSelect(m => m[fieldKey], compareIds);\r\n\r\n\t// if a field is prefixed with a \"!\" the sort is reversed!\r\n\tconst sortIsRegular = sortOrderRegular(field);\r\n\r\n\tif (!sortIsRegular) {\r\n\t\tconst oldSortFn = sortFn;\r\n\t\tsortFn = (a, b) => oldSortFn(b, a);\r\n\t}\r\n\r\n\treturn sortFn;\r\n};\r\n\r\nconst ASSET_SORTERS = {\r\n\t/** @type {(comparators: Function[], context: StatsFactoryContext, options: NormalizedStatsOptions) => void} */\r\n\tassetsSort: (comparators, context, { assetsSort }) => {\r\n\t\tcomparators.push(sortByField(assetsSort));\r\n\t},\r\n\t_: comparators => {\r\n\t\tcomparators.push(compareSelect(a => a.name, compareIds));\r\n\t}\r\n};\r\n\r\n/** @type {Record<string, Record<string, (comparators: Function[], context: StatsFactoryContext, options: NormalizedStatsOptions) => void>>} */\r\nconst RESULT_SORTERS = {\r\n\t\"compilation.chunks\": {\r\n\t\tchunksSort: (comparators, context, { chunksSort }) => {\r\n\t\t\tcomparators.push(sortByField(chunksSort));\r\n\t\t}\r\n\t},\r\n\t\"compilation.modules\": {\r\n\t\tmodulesSort: (comparators, context, { modulesSort }) => {\r\n\t\t\tcomparators.push(sortByField(modulesSort));\r\n\t\t}\r\n\t},\r\n\t\"chunk.modules\": {\r\n\t\tchunkModulesSort: (comparators, context, { chunkModulesSort }) => {\r\n\t\t\tcomparators.push(sortByField(chunkModulesSort));\r\n\t\t}\r\n\t},\r\n\t\"module.modules\": {\r\n\t\tnestedModulesSort: (comparators, context, { nestedModulesSort }) => {\r\n\t\t\tcomparators.push(sortByField(nestedModulesSort));\r\n\t\t}\r\n\t},\r\n\t\"compilation.assets\": ASSET_SORTERS,\r\n\t\"asset.related\": ASSET_SORTERS\r\n};\r\n\r\n/**\r\n * @param {Record<string, Record<string, Function>>} config the config see above\r\n * @param {NormalizedStatsOptions} options stats options\r\n * @param {function(string, Function): void} fn handler function called for every active line in config\r\n * @returns {void}\r\n */\r\nconst iterateConfig = (config, options, fn) => {\r\n\tfor (const hookFor of Object.keys(config)) {\r\n\t\tconst subConfig = config[hookFor];\r\n\t\tfor (const option of Object.keys(subConfig)) {\r\n\t\t\tif (option !== \"_\") {\r\n\t\t\t\tif (option.startsWith(\"!\")) {\r\n\t\t\t\t\tif (options[option.slice(1)]) continue;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tconst value = options[option];\r\n\t\t\t\t\tif (\r\n\t\t\t\t\t\tvalue === false ||\r\n\t\t\t\t\t\tvalue === undefined ||\r\n\t\t\t\t\t\t(Array.isArray(value) && value.length === 0)\r\n\t\t\t\t\t)\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tfn(hookFor, subConfig[option]);\r\n\t\t}\r\n\t}\r\n};\r\n\r\n/** @type {Record<string, string>} */\r\nconst ITEM_NAMES = {\r\n\t\"compilation.children[]\": \"compilation\",\r\n\t\"compilation.modules[]\": \"module\",\r\n\t\"compilation.entrypoints[]\": \"chunkGroup\",\r\n\t\"compilation.namedChunkGroups[]\": \"chunkGroup\",\r\n\t\"compilation.errors[]\": \"error\",\r\n\t\"compilation.warnings[]\": \"warning\",\r\n\t\"chunk.modules[]\": \"module\",\r\n\t\"chunk.rootModules[]\": \"module\",\r\n\t\"chunk.origins[]\": \"chunkOrigin\",\r\n\t\"compilation.chunks[]\": \"chunk\",\r\n\t\"compilation.assets[]\": \"asset\",\r\n\t\"asset.related[]\": \"asset\",\r\n\t\"module.issuerPath[]\": \"moduleIssuer\",\r\n\t\"module.reasons[]\": \"moduleReason\",\r\n\t\"module.modules[]\": \"module\",\r\n\t\"module.children[]\": \"module\",\r\n\t\"moduleTrace[]\": \"moduleTraceItem\",\r\n\t\"moduleTraceItem.dependencies[]\": \"moduleTraceDependency\"\r\n};\r\n\r\n/**\r\n * @param {Object[]} items items to be merged\r\n * @returns {Object} an object\r\n */\r\nconst mergeToObject = items => {\r\n\tconst obj = Object.create(null);\r\n\tfor (const item of items) {\r\n\t\tobj[item.name] = item;\r\n\t}\r\n\treturn obj;\r\n};\r\n\r\n/** @type {Record<string, (items: Object[]) => any>} */\r\nconst MERGER = {\r\n\t\"compilation.entrypoints\": mergeToObject,\r\n\t\"compilation.namedChunkGroups\": mergeToObject\r\n};\r\n\r\nclass DefaultStatsFactoryPlugin {\r\n\t/**\r\n\t * Apply the plugin\r\n\t * @param {Compiler} compiler the compiler instance\r\n\t * @returns {void}\r\n\t */\r\n\tapply(compiler) {\r\n\t\tcompiler.hooks.compilation.tap(\"DefaultStatsFactoryPlugin\", compilation => {\r\n\t\t\tcompilation.hooks.statsFactory.tap(\r\n\t\t\t\t\"DefaultStatsFactoryPlugin\",\r\n\t\t\t\t(stats, options, context) => {\r\n\t\t\t\t\titerateConfig(SIMPLE_EXTRACTORS, options, (hookFor, fn) => {\r\n\t\t\t\t\t\tstats.hooks.extract\r\n\t\t\t\t\t\t\t.for(hookFor)\r\n\t\t\t\t\t\t\t.tap(\"DefaultStatsFactoryPlugin\", (obj, data, ctx) =>\r\n\t\t\t\t\t\t\t\tfn(obj, data, ctx, options, stats)\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t});\r\n\t\t\t\t\titerateConfig(FILTER, options, (hookFor, fn) => {\r\n\t\t\t\t\t\tstats.hooks.filter\r\n\t\t\t\t\t\t\t.for(hookFor)\r\n\t\t\t\t\t\t\t.tap(\"DefaultStatsFactoryPlugin\", (item, ctx, idx, i) =>\r\n\t\t\t\t\t\t\t\tfn(item, ctx, options, idx, i)\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t});\r\n\t\t\t\t\titerateConfig(FILTER_RESULTS, options, (hookFor, fn) => {\r\n\t\t\t\t\t\tstats.hooks.filterResults\r\n\t\t\t\t\t\t\t.for(hookFor)\r\n\t\t\t\t\t\t\t.tap(\"DefaultStatsFactoryPlugin\", (item, ctx, idx, i) =>\r\n\t\t\t\t\t\t\t\tfn(item, ctx, options, idx, i)\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t});\r\n\t\t\t\t\titerateConfig(SORTERS, options, (hookFor, fn) => {\r\n\t\t\t\t\t\tstats.hooks.sort\r\n\t\t\t\t\t\t\t.for(hookFor)\r\n\t\t\t\t\t\t\t.tap(\"DefaultStatsFactoryPlugin\", (comparators, ctx) =>\r\n\t\t\t\t\t\t\t\tfn(comparators, ctx, options)\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t});\r\n\t\t\t\t\titerateConfig(RESULT_SORTERS, options, (hookFor, fn) => {\r\n\t\t\t\t\t\tstats.hooks.sortResults\r\n\t\t\t\t\t\t\t.for(hookFor)\r\n\t\t\t\t\t\t\t.tap(\"DefaultStatsFactoryPlugin\", (comparators, ctx) =>\r\n\t\t\t\t\t\t\t\tfn(comparators, ctx, options)\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t});\r\n\t\t\t\t\titerateConfig(RESULT_GROUPERS, options, (hookFor, fn) => {\r\n\t\t\t\t\t\tstats.hooks.groupResults\r\n\t\t\t\t\t\t\t.for(hookFor)\r\n\t\t\t\t\t\t\t.tap(\"DefaultStatsFactoryPlugin\", (groupConfigs, ctx) =>\r\n\t\t\t\t\t\t\t\tfn(groupConfigs, ctx, options)\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t});\r\n\t\t\t\t\tfor (const key of Object.keys(ITEM_NAMES)) {\r\n\t\t\t\t\t\tconst itemName = ITEM_NAMES[key];\r\n\t\t\t\t\t\tstats.hooks.getItemName\r\n\t\t\t\t\t\t\t.for(key)\r\n\t\t\t\t\t\t\t.tap(\"DefaultStatsFactoryPlugin\", () => itemName);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tfor (const key of Object.keys(MERGER)) {\r\n\t\t\t\t\t\tconst merger = MERGER[key];\r\n\t\t\t\t\t\tstats.hooks.merge.for(key).tap(\"DefaultStatsFactoryPlugin\", merger);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (options.children) {\r\n\t\t\t\t\t\tif (Array.isArray(options.children)) {\r\n\t\t\t\t\t\t\tstats.hooks.getItemFactory\r\n\t\t\t\t\t\t\t\t.for(\"compilation.children[].compilation\")\r\n\t\t\t\t\t\t\t\t.tap(\"DefaultStatsFactoryPlugin\", (comp, { _index: idx }) => {\r\n\t\t\t\t\t\t\t\t\tif (idx < options.children.length) {\r\n\t\t\t\t\t\t\t\t\t\treturn compilation.createStatsFactory(\r\n\t\t\t\t\t\t\t\t\t\t\tcompilation.createStatsOptions(\r\n\t\t\t\t\t\t\t\t\t\t\t\toptions.children[idx],\r\n\t\t\t\t\t\t\t\t\t\t\t\tcontext\r\n\t\t\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t} else if (options.children !== true) {\r\n\t\t\t\t\t\t\tconst childFactory = compilation.createStatsFactory(\r\n\t\t\t\t\t\t\t\tcompilation.createStatsOptions(options.children, context)\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\tstats.hooks.getItemFactory\r\n\t\t\t\t\t\t\t\t.for(\"compilation.children[].compilation\")\r\n\t\t\t\t\t\t\t\t.tap(\"DefaultStatsFactoryPlugin\", () => {\r\n\t\t\t\t\t\t\t\t\treturn childFactory;\r\n\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t);\r\n\t\t});\r\n\t}\r\n}\r\nmodule.exports = DefaultStatsFactoryPlugin;\r\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ,MAAMA,IAAI,GAAGC,OAAO,CAAC,MAAM,CAAC;AAC5B,MAAMC,gBAAgB,GAAGD,OAAO,CAAC,kCAAkC,CAAC;AACpE,MAAME,cAAc,GAAGF,OAAO,CAAC,mBAAmB,CAAC;AACnD,MAAM;EAAEG;AAAQ,CAAC,GAAGH,OAAO,CAAC,mBAAmB,CAAC;AAChD,MAAMI,yBAAyB,GAAGJ,OAAO,CAAC,uCAAuC,CAAC;AAClF,MAAMK,gBAAgB,GAAGL,OAAO,CAAC,iCAAiC,CAAC;AACnE,MAAM;EAAEM;AAAc,CAAC,GAAGN,OAAO,CAAC,yBAAyB,CAAC;AAC5D,MAAM;EACLO,gBAAgB;EAChBC,iBAAiB;EACjBC,cAAc;EACdC,UAAU;EACVC,iBAAiB;EACjBC,aAAa;EACbC;AACD,CAAC,GAAGb,OAAO,CAAC,qBAAqB,CAAC;AAClC,MAAM;EAAEc,iBAAiB;EAAEC;AAAc,CAAC,GAAGf,OAAO,CAAC,oBAAoB,CAAC;;AAE1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMgB,WAAW,GAAG,CAACC,KAAK,EAAEC,QAAQ,KAAK;EACxC;EACA,MAAMC,GAAG,GAAG,IAAIC,GAAG,EAAE;EACrB,KAAK,MAAMC,IAAI,IAAIJ,KAAK,EAAE;IACzB,KAAK,MAAMK,CAAC,IAAIJ,QAAQ,CAACG,IAAI,CAAC,EAAE;MAC/BF,GAAG,CAACI,GAAG,CAACD,CAAC,CAAC;IACX;EACD;EACA,OAAOE,KAAK,CAACC,IAAI,CAACN,GAAG,CAAC;AACvB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMO,kBAAkB,GAAG,CAACT,KAAK,EAAEC,QAAQ,EAAES,UAAU,KAAK;EAC3D,OAAOX,WAAW,CAACC,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"},"metadata":{},"sourceType":"script","externalDependencies":[]}