{"ast":null,"code":"'use strict';\n\nconst SchemaTypeOptions = require('./SchemaTypeOptions');\n\n/**\r\n * The options defined on a Date schematype.\r\n *\r\n * #### Example:\r\n *\r\n *     const schema = new Schema({ startedAt: Date });\r\n *     schema.path('startedAt').options; // SchemaDateOptions instance\r\n *\r\n * @api public\r\n * @inherits SchemaTypeOptions\r\n * @constructor SchemaDateOptions\r\n */\n\nclass SchemaDateOptions extends SchemaTypeOptions {}\nconst opts = require('./propertyOptions');\n\n/**\r\n * If set, Mongoose adds a validator that checks that this path is after the\r\n * given `min`.\r\n *\r\n * @api public\r\n * @property min\r\n * @memberOf SchemaDateOptions\r\n * @type {Date}\r\n * @instance\r\n */\n\nObject.defineProperty(SchemaDateOptions.prototype, 'min', opts);\n\n/**\r\n * If set, Mongoose adds a validator that checks that this path is before the\r\n * given `max`.\r\n *\r\n * @api public\r\n * @property max\r\n * @memberOf SchemaDateOptions\r\n * @type {Date}\r\n * @instance\r\n */\n\nObject.defineProperty(SchemaDateOptions.prototype, 'max', opts);\n\n/**\r\n * If set, Mongoose creates a TTL index on this path.\r\n *\r\n * mongo TTL index `expireAfterSeconds` value will take 'expires' value expressed in seconds.\r\n *\r\n * #### Example:\r\n *\r\n *     const schema = new Schema({ \"expireAt\": { type: Date,  expires: 11 } });\r\n *     // if 'expireAt' is set, then document expires at expireAt + 11 seconds\r\n *\r\n * @api public\r\n * @property expires\r\n * @memberOf SchemaDateOptions\r\n * @type {Date}\r\n * @instance\r\n */\n\nObject.defineProperty(SchemaDateOptions.prototype, 'expires', opts);\n\n/*!\r\n * ignore\r\n */\n\nmodule.exports = SchemaDateOptions;","map":{"version":3,"names":["SchemaTypeOptions","require","SchemaDateOptions","opts","Object","defineProperty","prototype","module","exports"],"sources":["C:/Users/91930/Desktop/Github projects/Pharmacy Demo/back-end/node_modules/mongoose/lib/options/SchemaDateOptions.js"],"sourcesContent":["'use strict';\r\n\r\nconst SchemaTypeOptions = require('./SchemaTypeOptions');\r\n\r\n/**\r\n * The options defined on a Date schematype.\r\n *\r\n * #### Example:\r\n *\r\n *     const schema = new Schema({ startedAt: Date });\r\n *     schema.path('startedAt').options; // SchemaDateOptions instance\r\n *\r\n * @api public\r\n * @inherits SchemaTypeOptions\r\n * @constructor SchemaDateOptions\r\n */\r\n\r\nclass SchemaDateOptions extends SchemaTypeOptions {}\r\n\r\nconst opts = require('./propertyOptions');\r\n\r\n/**\r\n * If set, Mongoose adds a validator that checks that this path is after the\r\n * given `min`.\r\n *\r\n * @api public\r\n * @property min\r\n * @memberOf SchemaDateOptions\r\n * @type {Date}\r\n * @instance\r\n */\r\n\r\nObject.defineProperty(SchemaDateOptions.prototype, 'min', opts);\r\n\r\n/**\r\n * If set, Mongoose adds a validator that checks that this path is before the\r\n * given `max`.\r\n *\r\n * @api public\r\n * @property max\r\n * @memberOf SchemaDateOptions\r\n * @type {Date}\r\n * @instance\r\n */\r\n\r\nObject.defineProperty(SchemaDateOptions.prototype, 'max', opts);\r\n\r\n/**\r\n * If set, Mongoose creates a TTL index on this path.\r\n *\r\n * mongo TTL index `expireAfterSeconds` value will take 'expires' value expressed in seconds.\r\n *\r\n * #### Example:\r\n *\r\n *     const schema = new Schema({ \"expireAt\": { type: Date,  expires: 11 } });\r\n *     // if 'expireAt' is set, then document expires at expireAt + 11 seconds\r\n *\r\n * @api public\r\n * @property expires\r\n * @memberOf SchemaDateOptions\r\n * @type {Date}\r\n * @instance\r\n */\r\n\r\nObject.defineProperty(SchemaDateOptions.prototype, 'expires', opts);\r\n\r\n/*!\r\n * ignore\r\n */\r\n\r\nmodule.exports = SchemaDateOptions;\r\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,iBAAiB,GAAGC,OAAO,CAAC,qBAAqB,CAAC;;AAExD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,iBAAiB,SAASF,iBAAiB,CAAC;AAElD,MAAMG,IAAI,GAAGF,OAAO,CAAC,mBAAmB,CAAC;;AAEzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAG,MAAM,CAACC,cAAc,CAACH,iBAAiB,CAACI,SAAS,EAAE,KAAK,EAAEH,IAAI,CAAC;;AAE/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAC,MAAM,CAACC,cAAc,CAACH,iBAAiB,CAACI,SAAS,EAAE,KAAK,EAAEH,IAAI,CAAC;;AAE/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAC,MAAM,CAACC,cAAc,CAACH,iBAAiB,CAACI,SAAS,EAAE,SAAS,EAAEH,IAAI,CAAC;;AAEnE;AACA;AACA;;AAEAI,MAAM,CAACC,OAAO,GAAGN,iBAAiB"},"metadata":{},"sourceType":"script","externalDependencies":[]}