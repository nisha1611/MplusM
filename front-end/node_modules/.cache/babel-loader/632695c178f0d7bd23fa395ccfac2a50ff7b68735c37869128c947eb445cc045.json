{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BSONSymbol = void 0;\n/**\r\n * A class representation of the BSON Symbol type.\r\n * @public\r\n * @category BSONType\r\n */\nvar BSONSymbol = /** @class */function () {\n  /**\r\n   * @param value - the string representing the symbol.\r\n   */\n  function BSONSymbol(value) {\n    if (!(this instanceof BSONSymbol)) return new BSONSymbol(value);\n    this.value = value;\n  }\n  /** Access the wrapped string value. */\n  BSONSymbol.prototype.valueOf = function () {\n    return this.value;\n  };\n  BSONSymbol.prototype.toString = function () {\n    return this.value;\n  };\n  /** @internal */\n  BSONSymbol.prototype.inspect = function () {\n    return \"new BSONSymbol(\\\"\".concat(this.value, \"\\\")\");\n  };\n  BSONSymbol.prototype.toJSON = function () {\n    return this.value;\n  };\n  /** @internal */\n  BSONSymbol.prototype.toExtendedJSON = function () {\n    return {\n      $symbol: this.value\n    };\n  };\n  /** @internal */\n  BSONSymbol.fromExtendedJSON = function (doc) {\n    return new BSONSymbol(doc.$symbol);\n  };\n  /** @internal */\n  BSONSymbol.prototype[Symbol.for('nodejs.util.inspect.custom')] = function () {\n    return this.inspect();\n  };\n  return BSONSymbol;\n}();\nexports.BSONSymbol = BSONSymbol;\nObject.defineProperty(BSONSymbol.prototype, '_bsontype', {\n  value: 'Symbol'\n});","map":{"version":3,"mappings":";;;;;;AAKA;;;;;AAKA;EAIE;;;EAGA,oBAAYA,KAAa;IACvB,IAAI,EAAE,IAAI,YAAYC,UAAU,CAAC,EAAE,OAAO,IAAIA,UAAU,CAACD,KAAK,CAAC;IAE/D,IAAI,CAACA,KAAK,GAAGA,KAAK;EACpB;EAEA;EACAC,4BAAO,GAAP;IACE,OAAO,IAAI,CAACD,KAAK;EACnB,CAAC;EAEDC,6BAAQ,GAAR;IACE,OAAO,IAAI,CAACD,KAAK;EACnB,CAAC;EAED;EACAC,4BAAO,GAAP;IACE,OAAO,2BAAmB,IAAI,CAACD,KAAK,QAAI;EAC1C,CAAC;EAEDC,2BAAM,GAAN;IACE,OAAO,IAAI,CAACD,KAAK;EACnB,CAAC;EAED;EACAC,mCAAc,GAAd;IACE,OAAO;MAAEC,OAAO,EAAE,IAAI,CAACF;IAAK,CAAE;EAChC,CAAC;EAED;EACOC,2BAAgB,GAAvB,UAAwBE,GAAuB;IAC7C,OAAO,IAAIF,UAAU,CAACE,GAAG,CAACD,OAAO,CAAC;EACpC,CAAC;EAED;EACAD,qBAACG,MAAM,CAACC,GAAG,CAAC,4BAA4B,CAAC,CAAC,GAA1C;IACE,OAAO,IAAI,CAACC,OAAO,EAAE;EACvB,CAAC;EACH,iBAAC;AAAD,CAAC,EA7CD;AAAaC;AA+CbC,MAAM,CAACC,cAAc,CAACR,UAAU,CAACS,SAAS,EAAE,WAAW,EAAE;EAAEV,KAAK,EAAE;AAAQ,CAAE,CAAC","names":["value","BSONSymbol","$symbol","doc","Symbol","for","inspect","exports","Object","defineProperty","prototype"],"sources":["C:\\Users\\91930\\Desktop\\Github projects\\Pharmacy Demo\\back-end\\node_modules\\bson\\src\\symbol.ts"],"sourcesContent":["/** @public */\r\nexport interface BSONSymbolExtended {\r\n  $symbol: string;\r\n}\r\n\r\n/**\r\n * A class representation of the BSON Symbol type.\r\n * @public\r\n * @category BSONType\r\n */\r\nexport class BSONSymbol {\r\n  _bsontype!: 'Symbol';\r\n\r\n  value!: string;\r\n  /**\r\n   * @param value - the string representing the symbol.\r\n   */\r\n  constructor(value: string) {\r\n    if (!(this instanceof BSONSymbol)) return new BSONSymbol(value);\r\n\r\n    this.value = value;\r\n  }\r\n\r\n  /** Access the wrapped string value. */\r\n  valueOf(): string {\r\n    return this.value;\r\n  }\r\n\r\n  toString(): string {\r\n    return this.value;\r\n  }\r\n\r\n  /** @internal */\r\n  inspect(): string {\r\n    return `new BSONSymbol(\"${this.value}\")`;\r\n  }\r\n\r\n  toJSON(): string {\r\n    return this.value;\r\n  }\r\n\r\n  /** @internal */\r\n  toExtendedJSON(): BSONSymbolExtended {\r\n    return { $symbol: this.value };\r\n  }\r\n\r\n  /** @internal */\r\n  static fromExtendedJSON(doc: BSONSymbolExtended): BSONSymbol {\r\n    return new BSONSymbol(doc.$symbol);\r\n  }\r\n\r\n  /** @internal */\r\n  [Symbol.for('nodejs.util.inspect.custom')](): string {\r\n    return this.inspect();\r\n  }\r\n}\r\n\r\nObject.defineProperty(BSONSymbol.prototype, '_bsontype', { value: 'Symbol' });\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}