{"ast":null,"code":"'use strict';\n\nconst SchemaTypeOptions = require('./SchemaTypeOptions');\n\n/**\r\n * The options defined on a Map schematype.\r\n *\r\n * #### Example:\r\n *\r\n *     const schema = new Schema({ socialMediaHandles: { type: Map, of: String } });\r\n *     schema.path('socialMediaHandles').options; // SchemaMapOptions instance\r\n *\r\n * @api public\r\n * @inherits SchemaTypeOptions\r\n * @constructor SchemaMapOptions\r\n */\n\nclass SchemaMapOptions extends SchemaTypeOptions {}\nconst opts = require('./propertyOptions');\n\n/**\r\n * If set, specifies the type of this map's values. Mongoose will cast\r\n * this map's values to the given type.\r\n *\r\n * If not set, Mongoose will not cast the map's values.\r\n *\r\n * #### Example:\r\n *\r\n *     // Mongoose will cast `socialMediaHandles` values to strings\r\n *     const schema = new Schema({ socialMediaHandles: { type: Map, of: String } });\r\n *     schema.path('socialMediaHandles').options.of; // String\r\n *\r\n * @api public\r\n * @property of\r\n * @memberOf SchemaMapOptions\r\n * @type {Function|string}\r\n * @instance\r\n */\n\nObject.defineProperty(SchemaMapOptions.prototype, 'of', opts);\nmodule.exports = SchemaMapOptions;","map":{"version":3,"names":["SchemaTypeOptions","require","SchemaMapOptions","opts","Object","defineProperty","prototype","module","exports"],"sources":["C:/Users/91930/Desktop/Github projects/Pharmacy Demo/back-end/node_modules/mongoose/lib/options/SchemaMapOptions.js"],"sourcesContent":["'use strict';\r\n\r\nconst SchemaTypeOptions = require('./SchemaTypeOptions');\r\n\r\n/**\r\n * The options defined on a Map schematype.\r\n *\r\n * #### Example:\r\n *\r\n *     const schema = new Schema({ socialMediaHandles: { type: Map, of: String } });\r\n *     schema.path('socialMediaHandles').options; // SchemaMapOptions instance\r\n *\r\n * @api public\r\n * @inherits SchemaTypeOptions\r\n * @constructor SchemaMapOptions\r\n */\r\n\r\nclass SchemaMapOptions extends SchemaTypeOptions {}\r\n\r\nconst opts = require('./propertyOptions');\r\n\r\n/**\r\n * If set, specifies the type of this map's values. Mongoose will cast\r\n * this map's values to the given type.\r\n *\r\n * If not set, Mongoose will not cast the map's values.\r\n *\r\n * #### Example:\r\n *\r\n *     // Mongoose will cast `socialMediaHandles` values to strings\r\n *     const schema = new Schema({ socialMediaHandles: { type: Map, of: String } });\r\n *     schema.path('socialMediaHandles').options.of; // String\r\n *\r\n * @api public\r\n * @property of\r\n * @memberOf SchemaMapOptions\r\n * @type {Function|string}\r\n * @instance\r\n */\r\n\r\nObject.defineProperty(SchemaMapOptions.prototype, 'of', opts);\r\n\r\nmodule.exports = SchemaMapOptions;\r\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,iBAAiB,GAAGC,OAAO,CAAC,qBAAqB,CAAC;;AAExD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,gBAAgB,SAASF,iBAAiB,CAAC;AAEjD,MAAMG,IAAI,GAAGF,OAAO,CAAC,mBAAmB,CAAC;;AAEzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAG,MAAM,CAACC,cAAc,CAACH,gBAAgB,CAACI,SAAS,EAAE,IAAI,EAAEH,IAAI,CAAC;AAE7DI,MAAM,CAACC,OAAO,GAAGN,gBAAgB"},"metadata":{},"sourceType":"script","externalDependencies":[]}