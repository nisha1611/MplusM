{"ast":null,"code":"'use strict';\n\nconst isDefiningProjection = require('./isDefiningProjection');\n\n/*!\r\n * ignore\r\n */\n\nmodule.exports = function isInclusive(projection) {\n  if (projection == null) {\n    return false;\n  }\n  const props = Object.keys(projection);\n  const numProps = props.length;\n  if (numProps === 0) {\n    return false;\n  }\n  for (let i = 0; i < numProps; ++i) {\n    const prop = props[i];\n    // Plus paths can't define the projection (see gh-7050)\n    if (prop.startsWith('+')) {\n      continue;\n    }\n    // If field is truthy (1, true, etc.) and not an object, then this\n    // projection must be inclusive. If object, assume its $meta, $slice, etc.\n    if (isDefiningProjection(projection[prop]) && !!projection[prop]) {\n      if (projection[prop] != null && typeof projection[prop] === 'object') {\n        return isInclusive(projection[prop]);\n      } else {\n        return !!projection[prop];\n      }\n    }\n  }\n  return false;\n};","map":{"version":3,"names":["isDefiningProjection","require","module","exports","isInclusive","projection","props","Object","keys","numProps","length","i","prop","startsWith"],"sources":["C:/Users/91930/Desktop/Github projects/Pharmacy Demo/back-end/node_modules/mongoose/lib/helpers/projection/isInclusive.js"],"sourcesContent":["'use strict';\r\n\r\nconst isDefiningProjection = require('./isDefiningProjection');\r\n\r\n/*!\r\n * ignore\r\n */\r\n\r\nmodule.exports = function isInclusive(projection) {\r\n  if (projection == null) {\r\n    return false;\r\n  }\r\n\r\n  const props = Object.keys(projection);\r\n  const numProps = props.length;\r\n  if (numProps === 0) {\r\n    return false;\r\n  }\r\n\r\n  for (let i = 0; i < numProps; ++i) {\r\n    const prop = props[i];\r\n    // Plus paths can't define the projection (see gh-7050)\r\n    if (prop.startsWith('+')) {\r\n      continue;\r\n    }\r\n    // If field is truthy (1, true, etc.) and not an object, then this\r\n    // projection must be inclusive. If object, assume its $meta, $slice, etc.\r\n    if (isDefiningProjection(projection[prop]) && !!projection[prop]) {\r\n      if (projection[prop] != null && typeof projection[prop] === 'object') {\r\n        return isInclusive(projection[prop]);\r\n      } else {\r\n        return !!projection[prop];\r\n      }\r\n    }\r\n  }\r\n\r\n  return false;\r\n};\r\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,oBAAoB,GAAGC,OAAO,CAAC,wBAAwB,CAAC;;AAE9D;AACA;AACA;;AAEAC,MAAM,CAACC,OAAO,GAAG,SAASC,WAAW,CAACC,UAAU,EAAE;EAChD,IAAIA,UAAU,IAAI,IAAI,EAAE;IACtB,OAAO,KAAK;EACd;EAEA,MAAMC,KAAK,GAAGC,MAAM,CAACC,IAAI,CAACH,UAAU,CAAC;EACrC,MAAMI,QAAQ,GAAGH,KAAK,CAACI,MAAM;EAC7B,IAAID,QAAQ,KAAK,CAAC,EAAE;IAClB,OAAO,KAAK;EACd;EAEA,KAAK,IAAIE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,QAAQ,EAAE,EAAEE,CAAC,EAAE;IACjC,MAAMC,IAAI,GAAGN,KAAK,CAACK,CAAC,CAAC;IACrB;IACA,IAAIC,IAAI,CAACC,UAAU,CAAC,GAAG,CAAC,EAAE;MACxB;IACF;IACA;IACA;IACA,IAAIb,oBAAoB,CAACK,UAAU,CAACO,IAAI,CAAC,CAAC,IAAI,CAAC,CAACP,UAAU,CAACO,IAAI,CAAC,EAAE;MAChE,IAAIP,UAAU,CAACO,IAAI,CAAC,IAAI,IAAI,IAAI,OAAOP,UAAU,CAACO,IAAI,CAAC,KAAK,QAAQ,EAAE;QACpE,OAAOR,WAAW,CAACC,UAAU,CAACO,IAAI,CAAC,CAAC;MACtC,CAAC,MAAM;QACL,OAAO,CAAC,CAACP,UAAU,CAACO,IAAI,CAAC;MAC3B;IACF;EACF;EAEA,OAAO,KAAK;AACd,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}