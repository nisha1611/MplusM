{"ast":null,"code":"import { CredentialsProviderError } from \"@aws-sdk/property-provider\";\nimport { readFileSync } from \"fs\";\nimport { fromWebToken } from \"./fromWebToken\";\nconst ENV_TOKEN_FILE = \"AWS_WEB_IDENTITY_TOKEN_FILE\";\nconst ENV_ROLE_ARN = \"AWS_ROLE_ARN\";\nconst ENV_ROLE_SESSION_NAME = \"AWS_ROLE_SESSION_NAME\";\nexport const fromTokenFile = function () {\n  let init = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return async () => {\n    return resolveTokenFile(init);\n  };\n};\nconst resolveTokenFile = init => {\n  const webIdentityTokenFile = init?.webIdentityTokenFile ?? process.env[ENV_TOKEN_FILE];\n  const roleArn = init?.roleArn ?? process.env[ENV_ROLE_ARN];\n  const roleSessionName = init?.roleSessionName ?? process.env[ENV_ROLE_SESSION_NAME];\n  if (!webIdentityTokenFile || !roleArn) {\n    throw new CredentialsProviderError(\"Web identity configuration not specified\");\n  }\n  return fromWebToken({\n    ...init,\n    webIdentityToken: readFileSync(webIdentityTokenFile, {\n      encoding: \"ascii\"\n    }),\n    roleArn,\n    roleSessionName\n  })();\n};","map":{"version":3,"names":["CredentialsProviderError","readFileSync","fromWebToken","ENV_TOKEN_FILE","ENV_ROLE_ARN","ENV_ROLE_SESSION_NAME","fromTokenFile","init","resolveTokenFile","webIdentityTokenFile","process","env","roleArn","roleSessionName","webIdentityToken","encoding"],"sources":["C:/Users/91930/Desktop/Github projects/Pharmacy Demo/back-end/node_modules/@aws-sdk/credential-provider-web-identity/dist-es/fromTokenFile.js"],"sourcesContent":["import { CredentialsProviderError } from \"@aws-sdk/property-provider\";\r\nimport { readFileSync } from \"fs\";\r\nimport { fromWebToken } from \"./fromWebToken\";\r\nconst ENV_TOKEN_FILE = \"AWS_WEB_IDENTITY_TOKEN_FILE\";\r\nconst ENV_ROLE_ARN = \"AWS_ROLE_ARN\";\r\nconst ENV_ROLE_SESSION_NAME = \"AWS_ROLE_SESSION_NAME\";\r\nexport const fromTokenFile = (init = {}) => async () => {\r\n    return resolveTokenFile(init);\r\n};\r\nconst resolveTokenFile = (init) => {\r\n    const webIdentityTokenFile = init?.webIdentityTokenFile ?? process.env[ENV_TOKEN_FILE];\r\n    const roleArn = init?.roleArn ?? process.env[ENV_ROLE_ARN];\r\n    const roleSessionName = init?.roleSessionName ?? process.env[ENV_ROLE_SESSION_NAME];\r\n    if (!webIdentityTokenFile || !roleArn) {\r\n        throw new CredentialsProviderError(\"Web identity configuration not specified\");\r\n    }\r\n    return fromWebToken({\r\n        ...init,\r\n        webIdentityToken: readFileSync(webIdentityTokenFile, { encoding: \"ascii\" }),\r\n        roleArn,\r\n        roleSessionName,\r\n    })();\r\n};\r\n"],"mappings":"AAAA,SAASA,wBAAwB,QAAQ,4BAA4B;AACrE,SAASC,YAAY,QAAQ,IAAI;AACjC,SAASC,YAAY,QAAQ,gBAAgB;AAC7C,MAAMC,cAAc,GAAG,6BAA6B;AACpD,MAAMC,YAAY,GAAG,cAAc;AACnC,MAAMC,qBAAqB,GAAG,uBAAuB;AACrD,OAAO,MAAMC,aAAa,GAAG;EAAA,IAACC,IAAI,uEAAG,CAAC,CAAC;EAAA,OAAK,YAAY;IACpD,OAAOC,gBAAgB,CAACD,IAAI,CAAC;EACjC,CAAC;AAAA;AACD,MAAMC,gBAAgB,GAAID,IAAI,IAAK;EAC/B,MAAME,oBAAoB,GAAGF,IAAI,EAAEE,oBAAoB,IAAIC,OAAO,CAACC,GAAG,CAACR,cAAc,CAAC;EACtF,MAAMS,OAAO,GAAGL,IAAI,EAAEK,OAAO,IAAIF,OAAO,CAACC,GAAG,CAACP,YAAY,CAAC;EAC1D,MAAMS,eAAe,GAAGN,IAAI,EAAEM,eAAe,IAAIH,OAAO,CAACC,GAAG,CAACN,qBAAqB,CAAC;EACnF,IAAI,CAACI,oBAAoB,IAAI,CAACG,OAAO,EAAE;IACnC,MAAM,IAAIZ,wBAAwB,CAAC,0CAA0C,CAAC;EAClF;EACA,OAAOE,YAAY,CAAC;IAChB,GAAGK,IAAI;IACPO,gBAAgB,EAAEb,YAAY,CAACQ,oBAAoB,EAAE;MAAEM,QAAQ,EAAE;IAAQ,CAAC,CAAC;IAC3EH,OAAO;IACPC;EACJ,CAAC,CAAC,EAAE;AACR,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}