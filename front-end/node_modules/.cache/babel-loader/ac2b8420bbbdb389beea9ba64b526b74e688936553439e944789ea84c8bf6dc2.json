{"ast":null,"code":"/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Tobias Koppers @sokra\r\n*/\n\n\"use strict\";\n\nconst {\n  groupBy\n} = require(\"./util/ArrayHelpers\");\nconst createSchemaValidation = require(\"./util/create-schema-validation\");\n\n/** @typedef {import(\"../declarations/plugins/WatchIgnorePlugin\").WatchIgnorePluginOptions} WatchIgnorePluginOptions */\n/** @typedef {import(\"./Compiler\")} Compiler */\n/** @typedef {import(\"./util/fs\").WatchFileSystem} WatchFileSystem */\n\nconst validate = createSchemaValidation(require(\"../schemas/plugins/WatchIgnorePlugin.check.js\"), () => require(\"../schemas/plugins/WatchIgnorePlugin.json\"), {\n  name: \"Watch Ignore Plugin\",\n  baseDataPath: \"options\"\n});\nconst IGNORE_TIME_ENTRY = \"ignore\";\nclass IgnoringWatchFileSystem {\n  /**\r\n   * @param {WatchFileSystem} wfs original file system\r\n   * @param {(string|RegExp)[]} paths ignored paths\r\n   */\n  constructor(wfs, paths) {\n    this.wfs = wfs;\n    this.paths = paths;\n  }\n  watch(files, dirs, missing, startTime, options, callback, callbackUndelayed) {\n    files = Array.from(files);\n    dirs = Array.from(dirs);\n    const ignored = path => this.paths.some(p => p instanceof RegExp ? p.test(path) : path.indexOf(p) === 0);\n    const [ignoredFiles, notIgnoredFiles] = groupBy(files, ignored);\n    const [ignoredDirs, notIgnoredDirs] = groupBy(dirs, ignored);\n    const watcher = this.wfs.watch(notIgnoredFiles, notIgnoredDirs, missing, startTime, options, (err, fileTimestamps, dirTimestamps, changedFiles, removedFiles) => {\n      if (err) return callback(err);\n      for (const path of ignoredFiles) {\n        fileTimestamps.set(path, IGNORE_TIME_ENTRY);\n      }\n      for (const path of ignoredDirs) {\n        dirTimestamps.set(path, IGNORE_TIME_ENTRY);\n      }\n      callback(err, fileTimestamps, dirTimestamps, changedFiles, removedFiles);\n    }, callbackUndelayed);\n    return {\n      close: () => watcher.close(),\n      pause: () => watcher.pause(),\n      getContextTimeInfoEntries: () => {\n        const dirTimestamps = watcher.getContextTimeInfoEntries();\n        for (const path of ignoredDirs) {\n          dirTimestamps.set(path, IGNORE_TIME_ENTRY);\n        }\n        return dirTimestamps;\n      },\n      getFileTimeInfoEntries: () => {\n        const fileTimestamps = watcher.getFileTimeInfoEntries();\n        for (const path of ignoredFiles) {\n          fileTimestamps.set(path, IGNORE_TIME_ENTRY);\n        }\n        return fileTimestamps;\n      },\n      getInfo: watcher.getInfo && (() => {\n        const info = watcher.getInfo();\n        const {\n          fileTimeInfoEntries,\n          contextTimeInfoEntries\n        } = info;\n        for (const path of ignoredFiles) {\n          fileTimeInfoEntries.set(path, IGNORE_TIME_ENTRY);\n        }\n        for (const path of ignoredDirs) {\n          contextTimeInfoEntries.set(path, IGNORE_TIME_ENTRY);\n        }\n        return info;\n      })\n    };\n  }\n}\nclass WatchIgnorePlugin {\n  /**\r\n   * @param {WatchIgnorePluginOptions} options options\r\n   */\n  constructor(options) {\n    validate(options);\n    this.paths = options.paths;\n  }\n\n  /**\r\n   * Apply the plugin\r\n   * @param {Compiler} compiler the compiler instance\r\n   * @returns {void}\r\n   */\n  apply(compiler) {\n    compiler.hooks.afterEnvironment.tap(\"WatchIgnorePlugin\", () => {\n      compiler.watchFileSystem = new IgnoringWatchFileSystem(compiler.watchFileSystem, this.paths);\n    });\n  }\n}\nmodule.exports = WatchIgnorePlugin;","map":{"version":3,"names":["groupBy","require","createSchemaValidation","validate","name","baseDataPath","IGNORE_TIME_ENTRY","IgnoringWatchFileSystem","constructor","wfs","paths","watch","files","dirs","missing","startTime","options","callback","callbackUndelayed","Array","from","ignored","path","some","p","RegExp","test","indexOf","ignoredFiles","notIgnoredFiles","ignoredDirs","notIgnoredDirs","watcher","err","fileTimestamps","dirTimestamps","changedFiles","removedFiles","set","close","pause","getContextTimeInfoEntries","getFileTimeInfoEntries","getInfo","info","fileTimeInfoEntries","contextTimeInfoEntries","WatchIgnorePlugin","apply","compiler","hooks","afterEnvironment","tap","watchFileSystem","module","exports"],"sources":["C:/Users/91930/Desktop/Github projects/Pharmacy Demo/front-end/node_modules/webpack/lib/WatchIgnorePlugin.js"],"sourcesContent":["/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Tobias Koppers @sokra\r\n*/\r\n\r\n\"use strict\";\r\n\r\nconst { groupBy } = require(\"./util/ArrayHelpers\");\r\nconst createSchemaValidation = require(\"./util/create-schema-validation\");\r\n\r\n/** @typedef {import(\"../declarations/plugins/WatchIgnorePlugin\").WatchIgnorePluginOptions} WatchIgnorePluginOptions */\r\n/** @typedef {import(\"./Compiler\")} Compiler */\r\n/** @typedef {import(\"./util/fs\").WatchFileSystem} WatchFileSystem */\r\n\r\nconst validate = createSchemaValidation(\r\n\trequire(\"../schemas/plugins/WatchIgnorePlugin.check.js\"),\r\n\t() => require(\"../schemas/plugins/WatchIgnorePlugin.json\"),\r\n\t{\r\n\t\tname: \"Watch Ignore Plugin\",\r\n\t\tbaseDataPath: \"options\"\r\n\t}\r\n);\r\n\r\nconst IGNORE_TIME_ENTRY = \"ignore\";\r\n\r\nclass IgnoringWatchFileSystem {\r\n\t/**\r\n\t * @param {WatchFileSystem} wfs original file system\r\n\t * @param {(string|RegExp)[]} paths ignored paths\r\n\t */\r\n\tconstructor(wfs, paths) {\r\n\t\tthis.wfs = wfs;\r\n\t\tthis.paths = paths;\r\n\t}\r\n\r\n\twatch(files, dirs, missing, startTime, options, callback, callbackUndelayed) {\r\n\t\tfiles = Array.from(files);\r\n\t\tdirs = Array.from(dirs);\r\n\t\tconst ignored = path =>\r\n\t\t\tthis.paths.some(p =>\r\n\t\t\t\tp instanceof RegExp ? p.test(path) : path.indexOf(p) === 0\r\n\t\t\t);\r\n\r\n\t\tconst [ignoredFiles, notIgnoredFiles] = groupBy(files, ignored);\r\n\t\tconst [ignoredDirs, notIgnoredDirs] = groupBy(dirs, ignored);\r\n\r\n\t\tconst watcher = this.wfs.watch(\r\n\t\t\tnotIgnoredFiles,\r\n\t\t\tnotIgnoredDirs,\r\n\t\t\tmissing,\r\n\t\t\tstartTime,\r\n\t\t\toptions,\r\n\t\t\t(err, fileTimestamps, dirTimestamps, changedFiles, removedFiles) => {\r\n\t\t\t\tif (err) return callback(err);\r\n\t\t\t\tfor (const path of ignoredFiles) {\r\n\t\t\t\t\tfileTimestamps.set(path, IGNORE_TIME_ENTRY);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfor (const path of ignoredDirs) {\r\n\t\t\t\t\tdirTimestamps.set(path, IGNORE_TIME_ENTRY);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tcallback(\r\n\t\t\t\t\terr,\r\n\t\t\t\t\tfileTimestamps,\r\n\t\t\t\t\tdirTimestamps,\r\n\t\t\t\t\tchangedFiles,\r\n\t\t\t\t\tremovedFiles\r\n\t\t\t\t);\r\n\t\t\t},\r\n\t\t\tcallbackUndelayed\r\n\t\t);\r\n\r\n\t\treturn {\r\n\t\t\tclose: () => watcher.close(),\r\n\t\t\tpause: () => watcher.pause(),\r\n\t\t\tgetContextTimeInfoEntries: () => {\r\n\t\t\t\tconst dirTimestamps = watcher.getContextTimeInfoEntries();\r\n\t\t\t\tfor (const path of ignoredDirs) {\r\n\t\t\t\t\tdirTimestamps.set(path, IGNORE_TIME_ENTRY);\r\n\t\t\t\t}\r\n\t\t\t\treturn dirTimestamps;\r\n\t\t\t},\r\n\t\t\tgetFileTimeInfoEntries: () => {\r\n\t\t\t\tconst fileTimestamps = watcher.getFileTimeInfoEntries();\r\n\t\t\t\tfor (const path of ignoredFiles) {\r\n\t\t\t\t\tfileTimestamps.set(path, IGNORE_TIME_ENTRY);\r\n\t\t\t\t}\r\n\t\t\t\treturn fileTimestamps;\r\n\t\t\t},\r\n\t\t\tgetInfo:\r\n\t\t\t\twatcher.getInfo &&\r\n\t\t\t\t(() => {\r\n\t\t\t\t\tconst info = watcher.getInfo();\r\n\t\t\t\t\tconst { fileTimeInfoEntries, contextTimeInfoEntries } = info;\r\n\t\t\t\t\tfor (const path of ignoredFiles) {\r\n\t\t\t\t\t\tfileTimeInfoEntries.set(path, IGNORE_TIME_ENTRY);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tfor (const path of ignoredDirs) {\r\n\t\t\t\t\t\tcontextTimeInfoEntries.set(path, IGNORE_TIME_ENTRY);\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn info;\r\n\t\t\t\t})\r\n\t\t};\r\n\t}\r\n}\r\n\r\nclass WatchIgnorePlugin {\r\n\t/**\r\n\t * @param {WatchIgnorePluginOptions} options options\r\n\t */\r\n\tconstructor(options) {\r\n\t\tvalidate(options);\r\n\t\tthis.paths = options.paths;\r\n\t}\r\n\r\n\t/**\r\n\t * Apply the plugin\r\n\t * @param {Compiler} compiler the compiler instance\r\n\t * @returns {void}\r\n\t */\r\n\tapply(compiler) {\r\n\t\tcompiler.hooks.afterEnvironment.tap(\"WatchIgnorePlugin\", () => {\r\n\t\t\tcompiler.watchFileSystem = new IgnoringWatchFileSystem(\r\n\t\t\t\tcompiler.watchFileSystem,\r\n\t\t\t\tthis.paths\r\n\t\t\t);\r\n\t\t});\r\n\t}\r\n}\r\n\r\nmodule.exports = WatchIgnorePlugin;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}