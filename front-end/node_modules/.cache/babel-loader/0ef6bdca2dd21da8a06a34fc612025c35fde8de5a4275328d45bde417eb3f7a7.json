{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MongoLogger = exports.MongoLoggableComponent = exports.SeverityLevel = void 0;\nconst stream_1 = require(\"stream\");\nconst utils_1 = require(\"./utils\");\n/** @internal */\nexports.SeverityLevel = Object.freeze({\n  EMERGENCY: 'emergency',\n  ALERT: 'alert',\n  CRITICAL: 'critical',\n  ERROR: 'error',\n  WARNING: 'warn',\n  NOTICE: 'notice',\n  INFORMATIONAL: 'info',\n  DEBUG: 'debug',\n  TRACE: 'trace',\n  OFF: 'off'\n});\n/** @internal */\nexports.MongoLoggableComponent = Object.freeze({\n  COMMAND: 'command',\n  TOPOLOGY: 'topology',\n  SERVER_SELECTION: 'serverSelection',\n  CONNECTION: 'connection'\n});\n/**\r\n * Parses a string as one of SeverityLevel\r\n *\r\n * @param s - the value to be parsed\r\n * @returns one of SeverityLevel if value can be parsed as such, otherwise null\r\n */\nfunction parseSeverityFromString(s) {\n  const validSeverities = Object.values(exports.SeverityLevel);\n  const lowerSeverity = s === null || s === void 0 ? void 0 : s.toLowerCase();\n  if (lowerSeverity != null && validSeverities.includes(lowerSeverity)) {\n    return lowerSeverity;\n  }\n  return null;\n}\n/**\r\n * resolves the MONGODB_LOG_PATH and mongodbLogPath options from the environment and the\r\n * mongo client options respectively.\r\n *\r\n * @returns the Writable stream to write logs to\r\n */\nfunction resolveLogPath(_ref, _ref2) {\n  let {\n    MONGODB_LOG_PATH\n  } = _ref;\n  let {\n    mongodbLogPath\n  } = _ref2;\n  const isValidLogDestinationString = destination => ['stdout', 'stderr'].includes(destination.toLowerCase());\n  if (typeof mongodbLogPath === 'string' && isValidLogDestinationString(mongodbLogPath)) {\n    return mongodbLogPath.toLowerCase() === 'stderr' ? process.stderr : process.stdout;\n  }\n  // TODO(NODE-4813): check for minimal interface instead of instanceof Writable\n  if (typeof mongodbLogPath === 'object' && mongodbLogPath instanceof stream_1.Writable) {\n    return mongodbLogPath;\n  }\n  if (typeof MONGODB_LOG_PATH === 'string' && isValidLogDestinationString(MONGODB_LOG_PATH)) {\n    return MONGODB_LOG_PATH.toLowerCase() === 'stderr' ? process.stderr : process.stdout;\n  }\n  return process.stderr;\n}\n/** @internal */\nclass MongoLogger {\n  constructor(options) {\n    this.componentSeverities = options.componentSeverities;\n    this.maxDocumentLength = options.maxDocumentLength;\n    this.logDestination = options.logDestination;\n  }\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  /* eslint-disable @typescript-eslint/no-empty-function */\n  emergency(component, message) {}\n  alert(component, message) {}\n  critical(component, message) {}\n  error(component, message) {}\n  warn(component, message) {}\n  notice(component, message) {}\n  info(component, message) {}\n  debug(component, message) {}\n  trace(component, message) {}\n  /**\r\n   * Merges options set through environment variables and the MongoClient, preferring environment\r\n   * variables when both are set, and substituting defaults for values not set. Options set in\r\n   * constructor take precedence over both environment variables and MongoClient options.\r\n   *\r\n   * @remarks\r\n   * When parsing component severity levels, invalid values are treated as unset and replaced with\r\n   * the default severity.\r\n   *\r\n   * @param envOptions - options set for the logger from the environment\r\n   * @param clientOptions - options set for the logger in the MongoClient options\r\n   * @returns a MongoLoggerOptions object to be used when instantiating a new MongoLogger\r\n   */\n  static resolveOptions(envOptions, clientOptions) {\n    var _a, _b, _c, _d, _e, _f;\n    // client options take precedence over env options\n    const combinedOptions = {\n      ...envOptions,\n      ...clientOptions,\n      mongodbLogPath: resolveLogPath(envOptions, clientOptions)\n    };\n    const defaultSeverity = (_a = parseSeverityFromString(combinedOptions.MONGODB_LOG_ALL)) !== null && _a !== void 0 ? _a : exports.SeverityLevel.OFF;\n    return {\n      componentSeverities: {\n        command: (_b = parseSeverityFromString(combinedOptions.MONGODB_LOG_COMMAND)) !== null && _b !== void 0 ? _b : defaultSeverity,\n        topology: (_c = parseSeverityFromString(combinedOptions.MONGODB_LOG_TOPOLOGY)) !== null && _c !== void 0 ? _c : defaultSeverity,\n        serverSelection: (_d = parseSeverityFromString(combinedOptions.MONGODB_LOG_SERVER_SELECTION)) !== null && _d !== void 0 ? _d : defaultSeverity,\n        connection: (_e = parseSeverityFromString(combinedOptions.MONGODB_LOG_CONNECTION)) !== null && _e !== void 0 ? _e : defaultSeverity,\n        default: defaultSeverity\n      },\n      maxDocumentLength: (_f = (0, utils_1.parseUnsignedInteger)(combinedOptions.MONGODB_LOG_MAX_DOCUMENT_LENGTH)) !== null && _f !== void 0 ? _f : 1000,\n      logDestination: combinedOptions.mongodbLogPath\n    };\n  }\n}\nexports.MongoLogger = MongoLogger;","map":{"version":3,"mappings":"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","names":["exports","Object","freeze","EMERGENCY","ALERT","CRITICAL","ERROR","WARNING","NOTICE","INFORMATIONAL","DEBUG","TRACE","OFF","COMMAND","TOPOLOGY","SERVER_SELECTION","CONNECTION","parseSeverityFromString","s","validSeverities","values","lowerSeverity","toLowerCase","includes","resolveLogPath","MONGODB_LOG_PATH","mongodbLogPath","isValidLogDestinationString","destination","process","stderr","stdout","stream_1","MongoLogger","constructor","options","componentSeverities","maxDocumentLength","logDestination","emergency","component","message","alert","critical","error","warn","notice","info","debug","trace","resolveOptions","envOptions","clientOptions","combinedOptions","defaultSeverity","MONGODB_LOG_ALL","command","MONGODB_LOG_COMMAND","topology","MONGODB_LOG_TOPOLOGY","serverSelection","MONGODB_LOG_SERVER_SELECTION","connection","MONGODB_LOG_CONNECTION","default","MONGODB_LOG_MAX_DOCUMENT_LENGTH"],"sources":["C:\\Users\\91930\\Desktop\\Github projects\\Pharmacy Demo\\back-end\\node_modules\\mongodb\\src\\mongo_logger.ts"],"sourcesContent":["import { Writable } from 'stream';\r\n\r\nimport { parseUnsignedInteger } from './utils';\r\n\r\n/** @internal */\r\nexport const SeverityLevel = Object.freeze({\r\n  EMERGENCY: 'emergency',\r\n  ALERT: 'alert',\r\n  CRITICAL: 'critical',\r\n  ERROR: 'error',\r\n  WARNING: 'warn',\r\n  NOTICE: 'notice',\r\n  INFORMATIONAL: 'info',\r\n  DEBUG: 'debug',\r\n  TRACE: 'trace',\r\n  OFF: 'off'\r\n} as const);\r\n\r\n/** @internal */\r\nexport type SeverityLevel = typeof SeverityLevel[keyof typeof SeverityLevel];\r\n\r\n/** @internal */\r\nexport const MongoLoggableComponent = Object.freeze({\r\n  COMMAND: 'command',\r\n  TOPOLOGY: 'topology',\r\n  SERVER_SELECTION: 'serverSelection',\r\n  CONNECTION: 'connection'\r\n} as const);\r\n\r\n/** @internal */\r\nexport type MongoLoggableComponent =\r\n  typeof MongoLoggableComponent[keyof typeof MongoLoggableComponent];\r\n\r\n/** @internal */\r\nexport interface MongoLoggerEnvOptions {\r\n  /** Severity level for command component */\r\n  MONGODB_LOG_COMMAND?: string;\r\n  /** Severity level for topology component */\r\n  MONGODB_LOG_TOPOLOGY?: string;\r\n  /** Severity level for server selection component */\r\n  MONGODB_LOG_SERVER_SELECTION?: string;\r\n  /** Severity level for CMAP */\r\n  MONGODB_LOG_CONNECTION?: string;\r\n  /** Default severity level to be if any of the above are unset */\r\n  MONGODB_LOG_ALL?: string;\r\n  /** Max length of embedded EJSON docs. Setting to 0 disables truncation. Defaults to 1000. */\r\n  MONGODB_LOG_MAX_DOCUMENT_LENGTH?: string;\r\n  /** Destination for log messages. Must be 'stderr', 'stdout'. Defaults to 'stderr'. */\r\n  MONGODB_LOG_PATH?: string;\r\n}\r\n\r\n/** @internal */\r\nexport interface MongoLoggerMongoClientOptions {\r\n  /** Destination for log messages */\r\n  mongodbLogPath?: 'stdout' | 'stderr' | Writable;\r\n}\r\n\r\n/** @internal */\r\nexport interface MongoLoggerOptions {\r\n  componentSeverities: {\r\n    /** Severity level for command component */\r\n    command: SeverityLevel;\r\n    /** Severity level for topology component */\r\n    topology: SeverityLevel;\r\n    /** Severity level for server selection component */\r\n    serverSelection: SeverityLevel;\r\n    /** Severity level for connection component */\r\n    connection: SeverityLevel;\r\n    /** Default severity level to be used if any of the above are unset */\r\n    default: SeverityLevel;\r\n  };\r\n\r\n  /** Max length of embedded EJSON docs. Setting to 0 disables truncation. Defaults to 1000. */\r\n  maxDocumentLength: number;\r\n  /** Destination for log messages. */\r\n  logDestination: Writable;\r\n}\r\n\r\n/**\r\n * Parses a string as one of SeverityLevel\r\n *\r\n * @param s - the value to be parsed\r\n * @returns one of SeverityLevel if value can be parsed as such, otherwise null\r\n */\r\nfunction parseSeverityFromString(s?: string): SeverityLevel | null {\r\n  const validSeverities: string[] = Object.values(SeverityLevel);\r\n  const lowerSeverity = s?.toLowerCase();\r\n\r\n  if (lowerSeverity != null && validSeverities.includes(lowerSeverity)) {\r\n    return lowerSeverity as SeverityLevel;\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\n/**\r\n * resolves the MONGODB_LOG_PATH and mongodbLogPath options from the environment and the\r\n * mongo client options respectively.\r\n *\r\n * @returns the Writable stream to write logs to\r\n */\r\nfunction resolveLogPath(\r\n  { MONGODB_LOG_PATH }: MongoLoggerEnvOptions,\r\n  {\r\n    mongodbLogPath\r\n  }: {\r\n    mongodbLogPath?: unknown;\r\n  }\r\n): Writable {\r\n  const isValidLogDestinationString = (destination: string) =>\r\n    ['stdout', 'stderr'].includes(destination.toLowerCase());\r\n  if (typeof mongodbLogPath === 'string' && isValidLogDestinationString(mongodbLogPath)) {\r\n    return mongodbLogPath.toLowerCase() === 'stderr' ? process.stderr : process.stdout;\r\n  }\r\n\r\n  // TODO(NODE-4813): check for minimal interface instead of instanceof Writable\r\n  if (typeof mongodbLogPath === 'object' && mongodbLogPath instanceof Writable) {\r\n    return mongodbLogPath;\r\n  }\r\n\r\n  if (typeof MONGODB_LOG_PATH === 'string' && isValidLogDestinationString(MONGODB_LOG_PATH)) {\r\n    return MONGODB_LOG_PATH.toLowerCase() === 'stderr' ? process.stderr : process.stdout;\r\n  }\r\n\r\n  return process.stderr;\r\n}\r\n\r\n/** @internal */\r\nexport class MongoLogger {\r\n  componentSeverities: Record<MongoLoggableComponent, SeverityLevel>;\r\n  maxDocumentLength: number;\r\n  logDestination: Writable;\r\n\r\n  constructor(options: MongoLoggerOptions) {\r\n    this.componentSeverities = options.componentSeverities;\r\n    this.maxDocumentLength = options.maxDocumentLength;\r\n    this.logDestination = options.logDestination;\r\n  }\r\n\r\n  /* eslint-disable @typescript-eslint/no-unused-vars */\r\n  /* eslint-disable @typescript-eslint/no-empty-function */\r\n  emergency(component: any, message: any): void {}\r\n\r\n  alert(component: any, message: any): void {}\r\n\r\n  critical(component: any, message: any): void {}\r\n\r\n  error(component: any, message: any): void {}\r\n\r\n  warn(component: any, message: any): void {}\r\n\r\n  notice(component: any, message: any): void {}\r\n\r\n  info(component: any, message: any): void {}\r\n\r\n  debug(component: any, message: any): void {}\r\n\r\n  trace(component: any, message: any): void {}\r\n\r\n  /**\r\n   * Merges options set through environment variables and the MongoClient, preferring environment\r\n   * variables when both are set, and substituting defaults for values not set. Options set in\r\n   * constructor take precedence over both environment variables and MongoClient options.\r\n   *\r\n   * @remarks\r\n   * When parsing component severity levels, invalid values are treated as unset and replaced with\r\n   * the default severity.\r\n   *\r\n   * @param envOptions - options set for the logger from the environment\r\n   * @param clientOptions - options set for the logger in the MongoClient options\r\n   * @returns a MongoLoggerOptions object to be used when instantiating a new MongoLogger\r\n   */\r\n  static resolveOptions(\r\n    envOptions: MongoLoggerEnvOptions,\r\n    clientOptions: MongoLoggerMongoClientOptions\r\n  ): MongoLoggerOptions {\r\n    // client options take precedence over env options\r\n    const combinedOptions = {\r\n      ...envOptions,\r\n      ...clientOptions,\r\n      mongodbLogPath: resolveLogPath(envOptions, clientOptions)\r\n    };\r\n    const defaultSeverity =\r\n      parseSeverityFromString(combinedOptions.MONGODB_LOG_ALL) ?? SeverityLevel.OFF;\r\n\r\n    return {\r\n      componentSeverities: {\r\n        command: parseSeverityFromString(combinedOptions.MONGODB_LOG_COMMAND) ?? defaultSeverity,\r\n        topology: parseSeverityFromString(combinedOptions.MONGODB_LOG_TOPOLOGY) ?? defaultSeverity,\r\n        serverSelection:\r\n          parseSeverityFromString(combinedOptions.MONGODB_LOG_SERVER_SELECTION) ?? defaultSeverity,\r\n        connection:\r\n          parseSeverityFromString(combinedOptions.MONGODB_LOG_CONNECTION) ?? defaultSeverity,\r\n        default: defaultSeverity\r\n      },\r\n      maxDocumentLength:\r\n        parseUnsignedInteger(combinedOptions.MONGODB_LOG_MAX_DOCUMENT_LENGTH) ?? 1000,\r\n      logDestination: combinedOptions.mongodbLogPath\r\n    };\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}