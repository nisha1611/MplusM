{"ast":null,"code":"//TODO: handle comments\nfunction readDocType(xmlData, i) {\n  const entities = {};\n  if (xmlData[i + 3] === 'O' && xmlData[i + 4] === 'C' && xmlData[i + 5] === 'T' && xmlData[i + 6] === 'Y' && xmlData[i + 7] === 'P' && xmlData[i + 8] === 'E') {\n    i = i + 9;\n    let angleBracketsCount = 1;\n    let hasBody = false,\n      entity = false,\n      comment = false;\n    let exp = \"\";\n    for (; i < xmlData.length; i++) {\n      if (xmlData[i] === '<') {\n        if (hasBody && xmlData[i + 1] === '!' && xmlData[i + 2] === 'E' && xmlData[i + 3] === 'N' && xmlData[i + 4] === 'T' && xmlData[i + 5] === 'I' && xmlData[i + 6] === 'T' && xmlData[i + 7] === 'Y') {\n          i += 7;\n          entity = true;\n        } else if (hasBody && xmlData[i + 1] === '!' && xmlData[i + 2] === 'E' && xmlData[i + 3] === 'L' && xmlData[i + 4] === 'E' && xmlData[i + 5] === 'M' && xmlData[i + 6] === 'E' && xmlData[i + 7] === 'N' && xmlData[i + 8] === 'T') {\n          //Not supported\n          i += 8;\n        } else if (hasBody && xmlData[i + 1] === '!' && xmlData[i + 2] === 'A' && xmlData[i + 3] === 'T' && xmlData[i + 4] === 'T' && xmlData[i + 5] === 'L' && xmlData[i + 6] === 'I' && xmlData[i + 7] === 'S' && xmlData[i + 8] === 'T') {\n          //Not supported\n          i += 8;\n        } else if (hasBody && xmlData[i + 1] === '!' && xmlData[i + 2] === 'N' && xmlData[i + 3] === 'O' && xmlData[i + 4] === 'T' && xmlData[i + 5] === 'A' && xmlData[i + 6] === 'T' && xmlData[i + 7] === 'I' && xmlData[i + 8] === 'O' && xmlData[i + 9] === 'N') {\n          //Not supported\n          i += 9;\n        } else if (\n        //comment\n        xmlData[i + 1] === '!' && xmlData[i + 2] === '-' && xmlData[i + 3] === '-') {\n          comment = true;\n        } else {\n          throw new Error(\"Invalid DOCTYPE\");\n        }\n        angleBracketsCount++;\n        exp = \"\";\n      } else if (xmlData[i] === '>') {\n        if (comment) {\n          if (xmlData[i - 1] === \"-\" && xmlData[i - 2] === \"-\") {\n            comment = false;\n          } else {\n            throw new Error(`Invalid XML comment in DOCTYPE`);\n          }\n        } else if (entity) {\n          parseEntityExp(exp, entities);\n          entity = false;\n        }\n        angleBracketsCount--;\n        if (angleBracketsCount === 0) {\n          break;\n        }\n      } else if (xmlData[i] === '[') {\n        hasBody = true;\n      } else {\n        exp += xmlData[i];\n      }\n    }\n    if (angleBracketsCount !== 0) {\n      throw new Error(`Unclosed DOCTYPE`);\n    }\n  } else {\n    throw new Error(`Invalid Tag instead of DOCTYPE`);\n  }\n  return {\n    entities,\n    i\n  };\n}\nconst entityRegex = RegExp(\"^\\\\s([a-zA-z0-0]+)[ \\t](['\\\"])([^&]+)\\\\2\");\nfunction parseEntityExp(exp, entities) {\n  const match = entityRegex.exec(exp);\n  if (match) {\n    entities[match[1]] = {\n      regx: RegExp(`&${match[1]};`, \"g\"),\n      val: match[3]\n    };\n  }\n}\nmodule.exports = readDocType;","map":{"version":3,"names":["readDocType","xmlData","i","entities","angleBracketsCount","hasBody","entity","comment","exp","length","Error","parseEntityExp","entityRegex","RegExp","match","exec","regx","val","module","exports"],"sources":["C:/Users/91930/Desktop/Github projects/Pharmacy Demo/back-end/node_modules/fast-xml-parser/src/xmlparser/DocTypeReader.js"],"sourcesContent":["//TODO: handle comments\r\nfunction readDocType(xmlData, i){\r\n    \r\n    const entities = {};\r\n    if( xmlData[i + 3] === 'O' &&\r\n         xmlData[i + 4] === 'C' &&\r\n         xmlData[i + 5] === 'T' &&\r\n         xmlData[i + 6] === 'Y' &&\r\n         xmlData[i + 7] === 'P' &&\r\n         xmlData[i + 8] === 'E')\r\n    {    \r\n        i = i+9;\r\n        let angleBracketsCount = 1;\r\n        let hasBody = false, entity = false, comment = false;\r\n        let exp = \"\";\r\n        for(;i<xmlData.length;i++){\r\n            if (xmlData[i] === '<') {\r\n                if( hasBody && \r\n                     xmlData[i+1] === '!' &&\r\n                     xmlData[i+2] === 'E' &&\r\n                     xmlData[i+3] === 'N' &&\r\n                     xmlData[i+4] === 'T' &&\r\n                     xmlData[i+5] === 'I' &&\r\n                     xmlData[i+6] === 'T' &&\r\n                     xmlData[i+7] === 'Y'\r\n                ){\r\n                    i += 7;\r\n                    entity = true;\r\n                }else if( hasBody && \r\n                    xmlData[i+1] === '!' &&\r\n                     xmlData[i+2] === 'E' &&\r\n                     xmlData[i+3] === 'L' &&\r\n                     xmlData[i+4] === 'E' &&\r\n                     xmlData[i+5] === 'M' &&\r\n                     xmlData[i+6] === 'E' &&\r\n                     xmlData[i+7] === 'N' &&\r\n                     xmlData[i+8] === 'T'\r\n                ){\r\n                    //Not supported\r\n                    i += 8;\r\n                }else if( hasBody && \r\n                    xmlData[i+1] === '!' &&\r\n                    xmlData[i+2] === 'A' &&\r\n                    xmlData[i+3] === 'T' &&\r\n                    xmlData[i+4] === 'T' &&\r\n                    xmlData[i+5] === 'L' &&\r\n                    xmlData[i+6] === 'I' &&\r\n                    xmlData[i+7] === 'S' &&\r\n                    xmlData[i+8] === 'T'\r\n                ){\r\n                    //Not supported\r\n                    i += 8;\r\n                }else if( hasBody && \r\n                    xmlData[i+1] === '!' &&\r\n                    xmlData[i+2] === 'N' &&\r\n                    xmlData[i+3] === 'O' &&\r\n                    xmlData[i+4] === 'T' &&\r\n                    xmlData[i+5] === 'A' &&\r\n                    xmlData[i+6] === 'T' &&\r\n                    xmlData[i+7] === 'I' &&\r\n                    xmlData[i+8] === 'O' &&\r\n                    xmlData[i+9] === 'N'\r\n                ){\r\n                    //Not supported\r\n                    i += 9;\r\n                }else if( //comment\r\n                    xmlData[i+1] === '!' &&\r\n                    xmlData[i+2] === '-' &&\r\n                    xmlData[i+3] === '-'\r\n                ){\r\n                    comment = true;\r\n                }else{\r\n                    throw new Error(\"Invalid DOCTYPE\");\r\n                }\r\n                angleBracketsCount++;\r\n                exp = \"\";\r\n            } else if (xmlData[i] === '>') {\r\n                if(comment){\r\n                    if( xmlData[i - 1] === \"-\" && xmlData[i - 2] === \"-\"){\r\n                        comment = false;\r\n                    }else{\r\n                        throw new Error(`Invalid XML comment in DOCTYPE`);\r\n                    }\r\n                }else if(entity){\r\n                    parseEntityExp(exp, entities);\r\n                    entity = false;\r\n                }\r\n                angleBracketsCount--;\r\n                if (angleBracketsCount === 0) {\r\n                  break;\r\n                }\r\n            }else if( xmlData[i] === '['){\r\n                hasBody = true;\r\n            }else{\r\n                exp += xmlData[i];\r\n            }\r\n        }\r\n        if(angleBracketsCount !== 0){\r\n            throw new Error(`Unclosed DOCTYPE`);\r\n        }\r\n    }else{\r\n        throw new Error(`Invalid Tag instead of DOCTYPE`);\r\n    }\r\n    return {entities, i};\r\n}\r\n\r\nconst entityRegex = RegExp(\"^\\\\s([a-zA-z0-0]+)[ \\t](['\\\"])([^&]+)\\\\2\");\r\nfunction parseEntityExp(exp, entities){\r\n    const match = entityRegex.exec(exp);\r\n    if(match){\r\n        entities[ match[1] ] = {\r\n            regx : RegExp( `&${match[1]};`,\"g\"),\r\n            val: match[3]\r\n        };\r\n    }\r\n}\r\nmodule.exports = readDocType;"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}