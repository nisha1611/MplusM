{"ast":null,"code":"/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Tobias Koppers @sokra\r\n*/\n\n\"use strict\";\n\nconst CachedInputFileSystem = require(\"enhanced-resolve/lib/CachedInputFileSystem\");\nconst fs = require(\"graceful-fs\");\nconst createConsoleLogger = require(\"../logging/createConsoleLogger\");\nconst NodeWatchFileSystem = require(\"./NodeWatchFileSystem\");\nconst nodeConsole = require(\"./nodeConsole\");\n\n/** @typedef {import(\"../../declarations/WebpackOptions\").InfrastructureLogging} InfrastructureLogging */\n/** @typedef {import(\"../Compiler\")} Compiler */\n\nclass NodeEnvironmentPlugin {\n  /**\r\n   * @param {Object} options options\r\n   * @param {InfrastructureLogging} options.infrastructureLogging infrastructure logging options\r\n   */\n  constructor(options) {\n    this.options = options;\n  }\n\n  /**\r\n   * Apply the plugin\r\n   * @param {Compiler} compiler the compiler instance\r\n   * @returns {void}\r\n   */\n  apply(compiler) {\n    const {\n      infrastructureLogging\n    } = this.options;\n    compiler.infrastructureLogger = createConsoleLogger({\n      level: infrastructureLogging.level || \"info\",\n      debug: infrastructureLogging.debug || false,\n      console: infrastructureLogging.console || nodeConsole({\n        colors: infrastructureLogging.colors,\n        appendOnly: infrastructureLogging.appendOnly,\n        stream: infrastructureLogging.stream\n      })\n    });\n    compiler.inputFileSystem = new CachedInputFileSystem(fs, 60000);\n    const inputFileSystem = compiler.inputFileSystem;\n    compiler.outputFileSystem = fs;\n    compiler.intermediateFileSystem = fs;\n    compiler.watchFileSystem = new NodeWatchFileSystem(compiler.inputFileSystem);\n    compiler.hooks.beforeRun.tap(\"NodeEnvironmentPlugin\", compiler => {\n      if (compiler.inputFileSystem === inputFileSystem) {\n        compiler.fsStartTime = Date.now();\n        inputFileSystem.purge();\n      }\n    });\n  }\n}\nmodule.exports = NodeEnvironmentPlugin;","map":{"version":3,"names":["CachedInputFileSystem","require","fs","createConsoleLogger","NodeWatchFileSystem","nodeConsole","NodeEnvironmentPlugin","constructor","options","apply","compiler","infrastructureLogging","infrastructureLogger","level","debug","console","colors","appendOnly","stream","inputFileSystem","outputFileSystem","intermediateFileSystem","watchFileSystem","hooks","beforeRun","tap","fsStartTime","Date","now","purge","module","exports"],"sources":["C:/Users/91930/Desktop/Github projects/Pharmacy Demo/front-end/node_modules/webpack/lib/node/NodeEnvironmentPlugin.js"],"sourcesContent":["/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Tobias Koppers @sokra\r\n*/\r\n\r\n\"use strict\";\r\n\r\nconst CachedInputFileSystem = require(\"enhanced-resolve/lib/CachedInputFileSystem\");\r\nconst fs = require(\"graceful-fs\");\r\nconst createConsoleLogger = require(\"../logging/createConsoleLogger\");\r\nconst NodeWatchFileSystem = require(\"./NodeWatchFileSystem\");\r\nconst nodeConsole = require(\"./nodeConsole\");\r\n\r\n/** @typedef {import(\"../../declarations/WebpackOptions\").InfrastructureLogging} InfrastructureLogging */\r\n/** @typedef {import(\"../Compiler\")} Compiler */\r\n\r\nclass NodeEnvironmentPlugin {\r\n\t/**\r\n\t * @param {Object} options options\r\n\t * @param {InfrastructureLogging} options.infrastructureLogging infrastructure logging options\r\n\t */\r\n\tconstructor(options) {\r\n\t\tthis.options = options;\r\n\t}\r\n\r\n\t/**\r\n\t * Apply the plugin\r\n\t * @param {Compiler} compiler the compiler instance\r\n\t * @returns {void}\r\n\t */\r\n\tapply(compiler) {\r\n\t\tconst { infrastructureLogging } = this.options;\r\n\t\tcompiler.infrastructureLogger = createConsoleLogger({\r\n\t\t\tlevel: infrastructureLogging.level || \"info\",\r\n\t\t\tdebug: infrastructureLogging.debug || false,\r\n\t\t\tconsole:\r\n\t\t\t\tinfrastructureLogging.console ||\r\n\t\t\t\tnodeConsole({\r\n\t\t\t\t\tcolors: infrastructureLogging.colors,\r\n\t\t\t\t\tappendOnly: infrastructureLogging.appendOnly,\r\n\t\t\t\t\tstream: infrastructureLogging.stream\r\n\t\t\t\t})\r\n\t\t});\r\n\t\tcompiler.inputFileSystem = new CachedInputFileSystem(fs, 60000);\r\n\t\tconst inputFileSystem = compiler.inputFileSystem;\r\n\t\tcompiler.outputFileSystem = fs;\r\n\t\tcompiler.intermediateFileSystem = fs;\r\n\t\tcompiler.watchFileSystem = new NodeWatchFileSystem(\r\n\t\t\tcompiler.inputFileSystem\r\n\t\t);\r\n\t\tcompiler.hooks.beforeRun.tap(\"NodeEnvironmentPlugin\", compiler => {\r\n\t\t\tif (compiler.inputFileSystem === inputFileSystem) {\r\n\t\t\t\tcompiler.fsStartTime = Date.now();\r\n\t\t\t\tinputFileSystem.purge();\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n}\r\n\r\nmodule.exports = NodeEnvironmentPlugin;\r\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ,MAAMA,qBAAqB,GAAGC,OAAO,CAAC,4CAA4C,CAAC;AACnF,MAAMC,EAAE,GAAGD,OAAO,CAAC,aAAa,CAAC;AACjC,MAAME,mBAAmB,GAAGF,OAAO,CAAC,gCAAgC,CAAC;AACrE,MAAMG,mBAAmB,GAAGH,OAAO,CAAC,uBAAuB,CAAC;AAC5D,MAAMI,WAAW,GAAGJ,OAAO,CAAC,eAAe,CAAC;;AAE5C;AACA;;AAEA,MAAMK,qBAAqB,CAAC;EAC3B;AACD;AACA;AACA;EACCC,WAAW,CAACC,OAAO,EAAE;IACpB,IAAI,CAACA,OAAO,GAAGA,OAAO;EACvB;;EAEA;AACD;AACA;AACA;AACA;EACCC,KAAK,CAACC,QAAQ,EAAE;IACf,MAAM;MAAEC;IAAsB,CAAC,GAAG,IAAI,CAACH,OAAO;IAC9CE,QAAQ,CAACE,oBAAoB,GAAGT,mBAAmB,CAAC;MACnDU,KAAK,EAAEF,qBAAqB,CAACE,KAAK,IAAI,MAAM;MAC5CC,KAAK,EAAEH,qBAAqB,CAACG,KAAK,IAAI,KAAK;MAC3CC,OAAO,EACNJ,qBAAqB,CAACI,OAAO,IAC7BV,WAAW,CAAC;QACXW,MAAM,EAAEL,qBAAqB,CAACK,MAAM;QACpCC,UAAU,EAAEN,qBAAqB,CAACM,UAAU;QAC5CC,MAAM,EAAEP,qBAAqB,CAACO;MAC/B,CAAC;IACH,CAAC,CAAC;IACFR,QAAQ,CAACS,eAAe,GAAG,IAAInB,qBAAqB,CAACE,EAAE,EAAE,KAAK,CAAC;IAC/D,MAAMiB,eAAe,GAAGT,QAAQ,CAACS,eAAe;IAChDT,QAAQ,CAACU,gBAAgB,GAAGlB,EAAE;IAC9BQ,QAAQ,CAACW,sBAAsB,GAAGnB,EAAE;IACpCQ,QAAQ,CAACY,eAAe,GAAG,IAAIlB,mBAAmB,CACjDM,QAAQ,CAACS,eAAe,CACxB;IACDT,QAAQ,CAACa,KAAK,CAACC,SAAS,CAACC,GAAG,CAAC,uBAAuB,EAAEf,QAAQ,IAAI;MACjE,IAAIA,QAAQ,CAACS,eAAe,KAAKA,eAAe,EAAE;QACjDT,QAAQ,CAACgB,WAAW,GAAGC,IAAI,CAACC,GAAG,EAAE;QACjCT,eAAe,CAACU,KAAK,EAAE;MACxB;IACD,CAAC,CAAC;EACH;AACD;AAEAC,MAAM,CAACC,OAAO,GAAGzB,qBAAqB"},"metadata":{},"sourceType":"script","externalDependencies":[]}