{"ast":null,"code":"'use strict';\n\nrun().catch(error => {\n  console.error(error);\n  process.exit(-1);\n});\nasync function run() {\n  const Sharded = require('mongodb-topology-manager').Sharded;\n\n  // Create new instance\n  const topology = new Sharded({\n    mongod: 'mongod',\n    mongos: 'mongos'\n  });\n  await topology.addShard([{\n    options: {\n      bind_ip: '127.0.0.1',\n      port: 31000,\n      dbpath: '/data/db/31000',\n      shardsvr: null\n    }\n  }], {\n    replSet: 'rs1'\n  });\n  await topology.addConfigurationServers([{\n    options: {\n      bind_ip: '127.0.0.1',\n      port: 35000,\n      dbpath: '/data/db/35000'\n    }\n  }], {\n    replSet: 'rs0'\n  });\n  await topology.addProxies([{\n    bind_ip: '127.0.0.1',\n    port: 51000,\n    configdb: '127.0.0.1:35000'\n  }], {\n    binary: 'mongos'\n  });\n  console.log('Start...');\n  // Start up topology\n  await topology.start();\n  console.log('Started');\n\n  // Shard db\n  await topology.enableSharding('test');\n  console.log('done');\n}","map":{"version":3,"names":["run","catch","error","console","process","exit","Sharded","require","topology","mongod","mongos","addShard","options","bind_ip","port","dbpath","shardsvr","replSet","addConfigurationServers","addProxies","configdb","binary","log","start","enableSharding"],"sources":["C:/Users/91930/Desktop/Github projects/Pharmacy Demo/back-end/node_modules/mongoose/tools/sharded.js"],"sourcesContent":["'use strict';\r\n\r\nrun().catch(error => {\r\n  console.error(error);\r\n  process.exit(-1);\r\n});\r\n\r\n\r\nasync function run() {\r\n  const Sharded = require('mongodb-topology-manager').Sharded;\r\n\r\n  // Create new instance\r\n  const topology = new Sharded({\r\n    mongod: 'mongod',\r\n    mongos: 'mongos'\r\n  });\r\n\r\n  await topology.addShard([{\r\n    options: {\r\n      bind_ip: '127.0.0.1', port: 31000, dbpath: '/data/db/31000', shardsvr: null\r\n    }\r\n  }], { replSet: 'rs1' });\r\n\r\n  await topology.addConfigurationServers([{\r\n    options: {\r\n      bind_ip: '127.0.0.1', port: 35000, dbpath: '/data/db/35000'\r\n    }\r\n  }], { replSet: 'rs0' });\r\n\r\n  await topology.addProxies([{\r\n    bind_ip: '127.0.0.1', port: 51000, configdb: '127.0.0.1:35000'\r\n  }], {\r\n    binary: 'mongos'\r\n  });\r\n\r\n  console.log('Start...');\r\n  // Start up topology\r\n  await topology.start();\r\n\r\n  console.log('Started');\r\n\r\n  // Shard db\r\n  await topology.enableSharding('test');\r\n\r\n  console.log('done');\r\n}\r\n"],"mappings":"AAAA,YAAY;;AAEZA,GAAG,EAAE,CAACC,KAAK,CAACC,KAAK,IAAI;EACnBC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;EACpBE,OAAO,CAACC,IAAI,CAAC,CAAC,CAAC,CAAC;AAClB,CAAC,CAAC;AAGF,eAAeL,GAAG,GAAG;EACnB,MAAMM,OAAO,GAAGC,OAAO,CAAC,0BAA0B,CAAC,CAACD,OAAO;;EAE3D;EACA,MAAME,QAAQ,GAAG,IAAIF,OAAO,CAAC;IAC3BG,MAAM,EAAE,QAAQ;IAChBC,MAAM,EAAE;EACV,CAAC,CAAC;EAEF,MAAMF,QAAQ,CAACG,QAAQ,CAAC,CAAC;IACvBC,OAAO,EAAE;MACPC,OAAO,EAAE,WAAW;MAAEC,IAAI,EAAE,KAAK;MAAEC,MAAM,EAAE,gBAAgB;MAAEC,QAAQ,EAAE;IACzE;EACF,CAAC,CAAC,EAAE;IAAEC,OAAO,EAAE;EAAM,CAAC,CAAC;EAEvB,MAAMT,QAAQ,CAACU,uBAAuB,CAAC,CAAC;IACtCN,OAAO,EAAE;MACPC,OAAO,EAAE,WAAW;MAAEC,IAAI,EAAE,KAAK;MAAEC,MAAM,EAAE;IAC7C;EACF,CAAC,CAAC,EAAE;IAAEE,OAAO,EAAE;EAAM,CAAC,CAAC;EAEvB,MAAMT,QAAQ,CAACW,UAAU,CAAC,CAAC;IACzBN,OAAO,EAAE,WAAW;IAAEC,IAAI,EAAE,KAAK;IAAEM,QAAQ,EAAE;EAC/C,CAAC,CAAC,EAAE;IACFC,MAAM,EAAE;EACV,CAAC,CAAC;EAEFlB,OAAO,CAACmB,GAAG,CAAC,UAAU,CAAC;EACvB;EACA,MAAMd,QAAQ,CAACe,KAAK,EAAE;EAEtBpB,OAAO,CAACmB,GAAG,CAAC,SAAS,CAAC;;EAEtB;EACA,MAAMd,QAAQ,CAACgB,cAAc,CAAC,MAAM,CAAC;EAErCrB,OAAO,CAACmB,GAAG,CAAC,MAAM,CAAC;AACrB"},"metadata":{},"sourceType":"script","externalDependencies":[]}