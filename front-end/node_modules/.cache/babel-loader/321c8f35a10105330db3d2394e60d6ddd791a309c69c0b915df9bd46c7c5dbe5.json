{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.deserializeAws_restJson1LogoutCommand = exports.deserializeAws_restJson1ListAccountsCommand = exports.deserializeAws_restJson1ListAccountRolesCommand = exports.deserializeAws_restJson1GetRoleCredentialsCommand = exports.serializeAws_restJson1LogoutCommand = exports.serializeAws_restJson1ListAccountsCommand = exports.serializeAws_restJson1ListAccountRolesCommand = exports.serializeAws_restJson1GetRoleCredentialsCommand = void 0;\nconst protocol_http_1 = require(\"@aws-sdk/protocol-http\");\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\nconst models_0_1 = require(\"../models/models_0\");\nconst SSOServiceException_1 = require(\"../models/SSOServiceException\");\nconst serializeAws_restJson1GetRoleCredentialsCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"x-amz-sso_bearer_token\": input.accessToken\n  });\n  const resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/federation/credentials\";\n  const query = map({\n    role_name: [, (0, smithy_client_1.expectNonNull)(input.roleName, `roleName`)],\n    account_id: [, (0, smithy_client_1.expectNonNull)(input.accountId, `accountId`)]\n  });\n  let body;\n  return new protocol_http_1.HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexports.serializeAws_restJson1GetRoleCredentialsCommand = serializeAws_restJson1GetRoleCredentialsCommand;\nconst serializeAws_restJson1ListAccountRolesCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"x-amz-sso_bearer_token\": input.accessToken\n  });\n  const resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/assignment/roles\";\n  const query = map({\n    next_token: [, input.nextToken],\n    max_result: [() => input.maxResults !== void 0, () => input.maxResults.toString()],\n    account_id: [, (0, smithy_client_1.expectNonNull)(input.accountId, `accountId`)]\n  });\n  let body;\n  return new protocol_http_1.HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexports.serializeAws_restJson1ListAccountRolesCommand = serializeAws_restJson1ListAccountRolesCommand;\nconst serializeAws_restJson1ListAccountsCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"x-amz-sso_bearer_token\": input.accessToken\n  });\n  const resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/assignment/accounts\";\n  const query = map({\n    next_token: [, input.nextToken],\n    max_result: [() => input.maxResults !== void 0, () => input.maxResults.toString()]\n  });\n  let body;\n  return new protocol_http_1.HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body\n  });\n};\nexports.serializeAws_restJson1ListAccountsCommand = serializeAws_restJson1ListAccountsCommand;\nconst serializeAws_restJson1LogoutCommand = async (input, context) => {\n  const {\n    hostname,\n    protocol = \"https\",\n    port,\n    path: basePath\n  } = await context.endpoint();\n  const headers = map({}, isSerializableHeaderValue, {\n    \"x-amz-sso_bearer_token\": input.accessToken\n  });\n  const resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/logout\";\n  let body;\n  return new protocol_http_1.HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"POST\",\n    headers,\n    path: resolvedPath,\n    body\n  });\n};\nexports.serializeAws_restJson1LogoutCommand = serializeAws_restJson1LogoutCommand;\nconst deserializeAws_restJson1GetRoleCredentialsCommand = async (output, context) => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restJson1GetRoleCredentialsCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output)\n  });\n  const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), \"body\");\n  if (data.roleCredentials != null) {\n    contents.roleCredentials = deserializeAws_restJson1RoleCredentials(data.roleCredentials, context);\n  }\n  return contents;\n};\nexports.deserializeAws_restJson1GetRoleCredentialsCommand = deserializeAws_restJson1GetRoleCredentialsCommand;\nconst deserializeAws_restJson1GetRoleCredentialsCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    case \"InvalidRequestException\":\n    case \"com.amazonaws.sso#InvalidRequestException\":\n      throw await deserializeAws_restJson1InvalidRequestExceptionResponse(parsedOutput, context);\n    case \"ResourceNotFoundException\":\n    case \"com.amazonaws.sso#ResourceNotFoundException\":\n      throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);\n    case \"TooManyRequestsException\":\n    case \"com.amazonaws.sso#TooManyRequestsException\":\n      throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);\n    case \"UnauthorizedException\":\n    case \"com.amazonaws.sso#UnauthorizedException\":\n      throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);\n    default:\n      const parsedBody = parsedOutput.body;\n      (0, smithy_client_1.throwDefaultError)({\n        output,\n        parsedBody,\n        exceptionCtor: SSOServiceException_1.SSOServiceException,\n        errorCode\n      });\n  }\n};\nconst deserializeAws_restJson1ListAccountRolesCommand = async (output, context) => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restJson1ListAccountRolesCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output)\n  });\n  const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), \"body\");\n  if (data.nextToken != null) {\n    contents.nextToken = (0, smithy_client_1.expectString)(data.nextToken);\n  }\n  if (data.roleList != null) {\n    contents.roleList = deserializeAws_restJson1RoleListType(data.roleList, context);\n  }\n  return contents;\n};\nexports.deserializeAws_restJson1ListAccountRolesCommand = deserializeAws_restJson1ListAccountRolesCommand;\nconst deserializeAws_restJson1ListAccountRolesCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    case \"InvalidRequestException\":\n    case \"com.amazonaws.sso#InvalidRequestException\":\n      throw await deserializeAws_restJson1InvalidRequestExceptionResponse(parsedOutput, context);\n    case \"ResourceNotFoundException\":\n    case \"com.amazonaws.sso#ResourceNotFoundException\":\n      throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);\n    case \"TooManyRequestsException\":\n    case \"com.amazonaws.sso#TooManyRequestsException\":\n      throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);\n    case \"UnauthorizedException\":\n    case \"com.amazonaws.sso#UnauthorizedException\":\n      throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);\n    default:\n      const parsedBody = parsedOutput.body;\n      (0, smithy_client_1.throwDefaultError)({\n        output,\n        parsedBody,\n        exceptionCtor: SSOServiceException_1.SSOServiceException,\n        errorCode\n      });\n  }\n};\nconst deserializeAws_restJson1ListAccountsCommand = async (output, context) => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restJson1ListAccountsCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output)\n  });\n  const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), \"body\");\n  if (data.accountList != null) {\n    contents.accountList = deserializeAws_restJson1AccountListType(data.accountList, context);\n  }\n  if (data.nextToken != null) {\n    contents.nextToken = (0, smithy_client_1.expectString)(data.nextToken);\n  }\n  return contents;\n};\nexports.deserializeAws_restJson1ListAccountsCommand = deserializeAws_restJson1ListAccountsCommand;\nconst deserializeAws_restJson1ListAccountsCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    case \"InvalidRequestException\":\n    case \"com.amazonaws.sso#InvalidRequestException\":\n      throw await deserializeAws_restJson1InvalidRequestExceptionResponse(parsedOutput, context);\n    case \"ResourceNotFoundException\":\n    case \"com.amazonaws.sso#ResourceNotFoundException\":\n      throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);\n    case \"TooManyRequestsException\":\n    case \"com.amazonaws.sso#TooManyRequestsException\":\n      throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);\n    case \"UnauthorizedException\":\n    case \"com.amazonaws.sso#UnauthorizedException\":\n      throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);\n    default:\n      const parsedBody = parsedOutput.body;\n      (0, smithy_client_1.throwDefaultError)({\n        output,\n        parsedBody,\n        exceptionCtor: SSOServiceException_1.SSOServiceException,\n        errorCode\n      });\n  }\n};\nconst deserializeAws_restJson1LogoutCommand = async (output, context) => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restJson1LogoutCommandError(output, context);\n  }\n  const contents = map({\n    $metadata: deserializeMetadata(output)\n  });\n  await collectBody(output.body, context);\n  return contents;\n};\nexports.deserializeAws_restJson1LogoutCommand = deserializeAws_restJson1LogoutCommand;\nconst deserializeAws_restJson1LogoutCommandError = async (output, context) => {\n  const parsedOutput = {\n    ...output,\n    body: await parseErrorBody(output.body, context)\n  };\n  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    case \"InvalidRequestException\":\n    case \"com.amazonaws.sso#InvalidRequestException\":\n      throw await deserializeAws_restJson1InvalidRequestExceptionResponse(parsedOutput, context);\n    case \"TooManyRequestsException\":\n    case \"com.amazonaws.sso#TooManyRequestsException\":\n      throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);\n    case \"UnauthorizedException\":\n    case \"com.amazonaws.sso#UnauthorizedException\":\n      throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);\n    default:\n      const parsedBody = parsedOutput.body;\n      (0, smithy_client_1.throwDefaultError)({\n        output,\n        parsedBody,\n        exceptionCtor: SSOServiceException_1.SSOServiceException,\n        errorCode\n      });\n  }\n};\nconst map = smithy_client_1.map;\nconst deserializeAws_restJson1InvalidRequestExceptionResponse = async (parsedOutput, context) => {\n  const contents = map({});\n  const data = parsedOutput.body;\n  if (data.message != null) {\n    contents.message = (0, smithy_client_1.expectString)(data.message);\n  }\n  const exception = new models_0_1.InvalidRequestException({\n    $metadata: deserializeMetadata(parsedOutput),\n    ...contents\n  });\n  return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);\n};\nconst deserializeAws_restJson1ResourceNotFoundExceptionResponse = async (parsedOutput, context) => {\n  const contents = map({});\n  const data = parsedOutput.body;\n  if (data.message != null) {\n    contents.message = (0, smithy_client_1.expectString)(data.message);\n  }\n  const exception = new models_0_1.ResourceNotFoundException({\n    $metadata: deserializeMetadata(parsedOutput),\n    ...contents\n  });\n  return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);\n};\nconst deserializeAws_restJson1TooManyRequestsExceptionResponse = async (parsedOutput, context) => {\n  const contents = map({});\n  const data = parsedOutput.body;\n  if (data.message != null) {\n    contents.message = (0, smithy_client_1.expectString)(data.message);\n  }\n  const exception = new models_0_1.TooManyRequestsException({\n    $metadata: deserializeMetadata(parsedOutput),\n    ...contents\n  });\n  return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);\n};\nconst deserializeAws_restJson1UnauthorizedExceptionResponse = async (parsedOutput, context) => {\n  const contents = map({});\n  const data = parsedOutput.body;\n  if (data.message != null) {\n    contents.message = (0, smithy_client_1.expectString)(data.message);\n  }\n  const exception = new models_0_1.UnauthorizedException({\n    $metadata: deserializeMetadata(parsedOutput),\n    ...contents\n  });\n  return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);\n};\nconst deserializeAws_restJson1AccountInfo = (output, context) => {\n  return {\n    accountId: (0, smithy_client_1.expectString)(output.accountId),\n    accountName: (0, smithy_client_1.expectString)(output.accountName),\n    emailAddress: (0, smithy_client_1.expectString)(output.emailAddress)\n  };\n};\nconst deserializeAws_restJson1AccountListType = (output, context) => {\n  const retVal = (output || []).filter(e => e != null).map(entry => {\n    if (entry === null) {\n      return null;\n    }\n    return deserializeAws_restJson1AccountInfo(entry, context);\n  });\n  return retVal;\n};\nconst deserializeAws_restJson1RoleCredentials = (output, context) => {\n  return {\n    accessKeyId: (0, smithy_client_1.expectString)(output.accessKeyId),\n    expiration: (0, smithy_client_1.expectLong)(output.expiration),\n    secretAccessKey: (0, smithy_client_1.expectString)(output.secretAccessKey),\n    sessionToken: (0, smithy_client_1.expectString)(output.sessionToken)\n  };\n};\nconst deserializeAws_restJson1RoleInfo = (output, context) => {\n  return {\n    accountId: (0, smithy_client_1.expectString)(output.accountId),\n    roleName: (0, smithy_client_1.expectString)(output.roleName)\n  };\n};\nconst deserializeAws_restJson1RoleListType = (output, context) => {\n  const retVal = (output || []).filter(e => e != null).map(entry => {\n    if (entry === null) {\n      return null;\n    }\n    return deserializeAws_restJson1RoleInfo(entry, context);\n  });\n  return retVal;\n};\nconst deserializeMetadata = output => ({\n  httpStatusCode: output.statusCode,\n  requestId: output.headers[\"x-amzn-requestid\"] ?? output.headers[\"x-amzn-request-id\"] ?? output.headers[\"x-amz-request-id\"],\n  extendedRequestId: output.headers[\"x-amz-id-2\"],\n  cfId: output.headers[\"x-amz-cf-id\"]\n});\nconst collectBody = function () {\n  let streamBody = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Uint8Array();\n  let context = arguments.length > 1 ? arguments[1] : undefined;\n  if (streamBody instanceof Uint8Array) {\n    return Promise.resolve(streamBody);\n  }\n  return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());\n};\nconst collectBodyString = (streamBody, context) => collectBody(streamBody, context).then(body => context.utf8Encoder(body));\nconst isSerializableHeaderValue = value => value !== undefined && value !== null && value !== \"\" && (!Object.getOwnPropertyNames(value).includes(\"length\") || value.length != 0) && (!Object.getOwnPropertyNames(value).includes(\"size\") || value.size != 0);\nconst parseBody = (streamBody, context) => collectBodyString(streamBody, context).then(encoded => {\n  if (encoded.length) {\n    return JSON.parse(encoded);\n  }\n  return {};\n});\nconst parseErrorBody = async (errorBody, context) => {\n  const value = await parseBody(errorBody, context);\n  value.message = value.message ?? value.Message;\n  return value;\n};\nconst loadRestJsonErrorCode = (output, data) => {\n  const findKey = (object, key) => Object.keys(object).find(k => k.toLowerCase() === key.toLowerCase());\n  const sanitizeErrorCode = rawValue => {\n    let cleanValue = rawValue;\n    if (typeof cleanValue === \"number\") {\n      cleanValue = cleanValue.toString();\n    }\n    if (cleanValue.indexOf(\",\") >= 0) {\n      cleanValue = cleanValue.split(\",\")[0];\n    }\n    if (cleanValue.indexOf(\":\") >= 0) {\n      cleanValue = cleanValue.split(\":\")[0];\n    }\n    if (cleanValue.indexOf(\"#\") >= 0) {\n      cleanValue = cleanValue.split(\"#\")[1];\n    }\n    return cleanValue;\n  };\n  const headerKey = findKey(output.headers, \"x-amzn-errortype\");\n  if (headerKey !== undefined) {\n    return sanitizeErrorCode(output.headers[headerKey]);\n  }\n  if (data.code !== undefined) {\n    return sanitizeErrorCode(data.code);\n  }\n  if (data[\"__type\"] !== undefined) {\n    return sanitizeErrorCode(data[\"__type\"]);\n  }\n};","map":{"version":3,"names":["Object","defineProperty","exports","value","deserializeAws_restJson1LogoutCommand","deserializeAws_restJson1ListAccountsCommand","deserializeAws_restJson1ListAccountRolesCommand","deserializeAws_restJson1GetRoleCredentialsCommand","serializeAws_restJson1LogoutCommand","serializeAws_restJson1ListAccountsCommand","serializeAws_restJson1ListAccountRolesCommand","serializeAws_restJson1GetRoleCredentialsCommand","protocol_http_1","require","smithy_client_1","models_0_1","SSOServiceException_1","input","context","hostname","protocol","port","path","basePath","endpoint","headers","map","isSerializableHeaderValue","accessToken","resolvedPath","endsWith","slice","query","role_name","expectNonNull","roleName","account_id","accountId","body","HttpRequest","method","next_token","nextToken","max_result","maxResults","toString","output","statusCode","deserializeAws_restJson1GetRoleCredentialsCommandError","contents","$metadata","deserializeMetadata","data","expectObject","parseBody","roleCredentials","deserializeAws_restJson1RoleCredentials","parsedOutput","parseErrorBody","errorCode","loadRestJsonErrorCode","deserializeAws_restJson1InvalidRequestExceptionResponse","deserializeAws_restJson1ResourceNotFoundExceptionResponse","deserializeAws_restJson1TooManyRequestsExceptionResponse","deserializeAws_restJson1UnauthorizedExceptionResponse","parsedBody","throwDefaultError","exceptionCtor","SSOServiceException","deserializeAws_restJson1ListAccountRolesCommandError","expectString","roleList","deserializeAws_restJson1RoleListType","deserializeAws_restJson1ListAccountsCommandError","accountList","deserializeAws_restJson1AccountListType","deserializeAws_restJson1LogoutCommandError","collectBody","message","exception","InvalidRequestException","decorateServiceException","ResourceNotFoundException","TooManyRequestsException","UnauthorizedException","deserializeAws_restJson1AccountInfo","accountName","emailAddress","retVal","filter","e","entry","accessKeyId","expiration","expectLong","secretAccessKey","sessionToken","deserializeAws_restJson1RoleInfo","httpStatusCode","requestId","extendedRequestId","cfId","streamBody","Uint8Array","Promise","resolve","streamCollector","collectBodyString","then","utf8Encoder","undefined","getOwnPropertyNames","includes","length","size","encoded","JSON","parse","errorBody","Message","findKey","object","key","keys","find","k","toLowerCase","sanitizeErrorCode","rawValue","cleanValue","indexOf","split","headerKey","code"],"sources":["C:/Users/91930/Desktop/Github projects/Pharmacy Demo/back-end/node_modules/@aws-sdk/client-sso/dist-cjs/protocols/Aws_restJson1.js"],"sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.deserializeAws_restJson1LogoutCommand = exports.deserializeAws_restJson1ListAccountsCommand = exports.deserializeAws_restJson1ListAccountRolesCommand = exports.deserializeAws_restJson1GetRoleCredentialsCommand = exports.serializeAws_restJson1LogoutCommand = exports.serializeAws_restJson1ListAccountsCommand = exports.serializeAws_restJson1ListAccountRolesCommand = exports.serializeAws_restJson1GetRoleCredentialsCommand = void 0;\r\nconst protocol_http_1 = require(\"@aws-sdk/protocol-http\");\r\nconst smithy_client_1 = require(\"@aws-sdk/smithy-client\");\r\nconst models_0_1 = require(\"../models/models_0\");\r\nconst SSOServiceException_1 = require(\"../models/SSOServiceException\");\r\nconst serializeAws_restJson1GetRoleCredentialsCommand = async (input, context) => {\r\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\r\n    const headers = map({}, isSerializableHeaderValue, {\r\n        \"x-amz-sso_bearer_token\": input.accessToken,\r\n    });\r\n    const resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/federation/credentials\";\r\n    const query = map({\r\n        role_name: [, (0, smithy_client_1.expectNonNull)(input.roleName, `roleName`)],\r\n        account_id: [, (0, smithy_client_1.expectNonNull)(input.accountId, `accountId`)],\r\n    });\r\n    let body;\r\n    return new protocol_http_1.HttpRequest({\r\n        protocol,\r\n        hostname,\r\n        port,\r\n        method: \"GET\",\r\n        headers,\r\n        path: resolvedPath,\r\n        query,\r\n        body,\r\n    });\r\n};\r\nexports.serializeAws_restJson1GetRoleCredentialsCommand = serializeAws_restJson1GetRoleCredentialsCommand;\r\nconst serializeAws_restJson1ListAccountRolesCommand = async (input, context) => {\r\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\r\n    const headers = map({}, isSerializableHeaderValue, {\r\n        \"x-amz-sso_bearer_token\": input.accessToken,\r\n    });\r\n    const resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/assignment/roles\";\r\n    const query = map({\r\n        next_token: [, input.nextToken],\r\n        max_result: [() => input.maxResults !== void 0, () => input.maxResults.toString()],\r\n        account_id: [, (0, smithy_client_1.expectNonNull)(input.accountId, `accountId`)],\r\n    });\r\n    let body;\r\n    return new protocol_http_1.HttpRequest({\r\n        protocol,\r\n        hostname,\r\n        port,\r\n        method: \"GET\",\r\n        headers,\r\n        path: resolvedPath,\r\n        query,\r\n        body,\r\n    });\r\n};\r\nexports.serializeAws_restJson1ListAccountRolesCommand = serializeAws_restJson1ListAccountRolesCommand;\r\nconst serializeAws_restJson1ListAccountsCommand = async (input, context) => {\r\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\r\n    const headers = map({}, isSerializableHeaderValue, {\r\n        \"x-amz-sso_bearer_token\": input.accessToken,\r\n    });\r\n    const resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/assignment/accounts\";\r\n    const query = map({\r\n        next_token: [, input.nextToken],\r\n        max_result: [() => input.maxResults !== void 0, () => input.maxResults.toString()],\r\n    });\r\n    let body;\r\n    return new protocol_http_1.HttpRequest({\r\n        protocol,\r\n        hostname,\r\n        port,\r\n        method: \"GET\",\r\n        headers,\r\n        path: resolvedPath,\r\n        query,\r\n        body,\r\n    });\r\n};\r\nexports.serializeAws_restJson1ListAccountsCommand = serializeAws_restJson1ListAccountsCommand;\r\nconst serializeAws_restJson1LogoutCommand = async (input, context) => {\r\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\r\n    const headers = map({}, isSerializableHeaderValue, {\r\n        \"x-amz-sso_bearer_token\": input.accessToken,\r\n    });\r\n    const resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/logout\";\r\n    let body;\r\n    return new protocol_http_1.HttpRequest({\r\n        protocol,\r\n        hostname,\r\n        port,\r\n        method: \"POST\",\r\n        headers,\r\n        path: resolvedPath,\r\n        body,\r\n    });\r\n};\r\nexports.serializeAws_restJson1LogoutCommand = serializeAws_restJson1LogoutCommand;\r\nconst deserializeAws_restJson1GetRoleCredentialsCommand = async (output, context) => {\r\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\r\n        return deserializeAws_restJson1GetRoleCredentialsCommandError(output, context);\r\n    }\r\n    const contents = map({\r\n        $metadata: deserializeMetadata(output),\r\n    });\r\n    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), \"body\");\r\n    if (data.roleCredentials != null) {\r\n        contents.roleCredentials = deserializeAws_restJson1RoleCredentials(data.roleCredentials, context);\r\n    }\r\n    return contents;\r\n};\r\nexports.deserializeAws_restJson1GetRoleCredentialsCommand = deserializeAws_restJson1GetRoleCredentialsCommand;\r\nconst deserializeAws_restJson1GetRoleCredentialsCommandError = async (output, context) => {\r\n    const parsedOutput = {\r\n        ...output,\r\n        body: await parseErrorBody(output.body, context),\r\n    };\r\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\r\n    switch (errorCode) {\r\n        case \"InvalidRequestException\":\r\n        case \"com.amazonaws.sso#InvalidRequestException\":\r\n            throw await deserializeAws_restJson1InvalidRequestExceptionResponse(parsedOutput, context);\r\n        case \"ResourceNotFoundException\":\r\n        case \"com.amazonaws.sso#ResourceNotFoundException\":\r\n            throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);\r\n        case \"TooManyRequestsException\":\r\n        case \"com.amazonaws.sso#TooManyRequestsException\":\r\n            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);\r\n        case \"UnauthorizedException\":\r\n        case \"com.amazonaws.sso#UnauthorizedException\":\r\n            throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);\r\n        default:\r\n            const parsedBody = parsedOutput.body;\r\n            (0, smithy_client_1.throwDefaultError)({\r\n                output,\r\n                parsedBody,\r\n                exceptionCtor: SSOServiceException_1.SSOServiceException,\r\n                errorCode,\r\n            });\r\n    }\r\n};\r\nconst deserializeAws_restJson1ListAccountRolesCommand = async (output, context) => {\r\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\r\n        return deserializeAws_restJson1ListAccountRolesCommandError(output, context);\r\n    }\r\n    const contents = map({\r\n        $metadata: deserializeMetadata(output),\r\n    });\r\n    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), \"body\");\r\n    if (data.nextToken != null) {\r\n        contents.nextToken = (0, smithy_client_1.expectString)(data.nextToken);\r\n    }\r\n    if (data.roleList != null) {\r\n        contents.roleList = deserializeAws_restJson1RoleListType(data.roleList, context);\r\n    }\r\n    return contents;\r\n};\r\nexports.deserializeAws_restJson1ListAccountRolesCommand = deserializeAws_restJson1ListAccountRolesCommand;\r\nconst deserializeAws_restJson1ListAccountRolesCommandError = async (output, context) => {\r\n    const parsedOutput = {\r\n        ...output,\r\n        body: await parseErrorBody(output.body, context),\r\n    };\r\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\r\n    switch (errorCode) {\r\n        case \"InvalidRequestException\":\r\n        case \"com.amazonaws.sso#InvalidRequestException\":\r\n            throw await deserializeAws_restJson1InvalidRequestExceptionResponse(parsedOutput, context);\r\n        case \"ResourceNotFoundException\":\r\n        case \"com.amazonaws.sso#ResourceNotFoundException\":\r\n            throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);\r\n        case \"TooManyRequestsException\":\r\n        case \"com.amazonaws.sso#TooManyRequestsException\":\r\n            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);\r\n        case \"UnauthorizedException\":\r\n        case \"com.amazonaws.sso#UnauthorizedException\":\r\n            throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);\r\n        default:\r\n            const parsedBody = parsedOutput.body;\r\n            (0, smithy_client_1.throwDefaultError)({\r\n                output,\r\n                parsedBody,\r\n                exceptionCtor: SSOServiceException_1.SSOServiceException,\r\n                errorCode,\r\n            });\r\n    }\r\n};\r\nconst deserializeAws_restJson1ListAccountsCommand = async (output, context) => {\r\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\r\n        return deserializeAws_restJson1ListAccountsCommandError(output, context);\r\n    }\r\n    const contents = map({\r\n        $metadata: deserializeMetadata(output),\r\n    });\r\n    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), \"body\");\r\n    if (data.accountList != null) {\r\n        contents.accountList = deserializeAws_restJson1AccountListType(data.accountList, context);\r\n    }\r\n    if (data.nextToken != null) {\r\n        contents.nextToken = (0, smithy_client_1.expectString)(data.nextToken);\r\n    }\r\n    return contents;\r\n};\r\nexports.deserializeAws_restJson1ListAccountsCommand = deserializeAws_restJson1ListAccountsCommand;\r\nconst deserializeAws_restJson1ListAccountsCommandError = async (output, context) => {\r\n    const parsedOutput = {\r\n        ...output,\r\n        body: await parseErrorBody(output.body, context),\r\n    };\r\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\r\n    switch (errorCode) {\r\n        case \"InvalidRequestException\":\r\n        case \"com.amazonaws.sso#InvalidRequestException\":\r\n            throw await deserializeAws_restJson1InvalidRequestExceptionResponse(parsedOutput, context);\r\n        case \"ResourceNotFoundException\":\r\n        case \"com.amazonaws.sso#ResourceNotFoundException\":\r\n            throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);\r\n        case \"TooManyRequestsException\":\r\n        case \"com.amazonaws.sso#TooManyRequestsException\":\r\n            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);\r\n        case \"UnauthorizedException\":\r\n        case \"com.amazonaws.sso#UnauthorizedException\":\r\n            throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);\r\n        default:\r\n            const parsedBody = parsedOutput.body;\r\n            (0, smithy_client_1.throwDefaultError)({\r\n                output,\r\n                parsedBody,\r\n                exceptionCtor: SSOServiceException_1.SSOServiceException,\r\n                errorCode,\r\n            });\r\n    }\r\n};\r\nconst deserializeAws_restJson1LogoutCommand = async (output, context) => {\r\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\r\n        return deserializeAws_restJson1LogoutCommandError(output, context);\r\n    }\r\n    const contents = map({\r\n        $metadata: deserializeMetadata(output),\r\n    });\r\n    await collectBody(output.body, context);\r\n    return contents;\r\n};\r\nexports.deserializeAws_restJson1LogoutCommand = deserializeAws_restJson1LogoutCommand;\r\nconst deserializeAws_restJson1LogoutCommandError = async (output, context) => {\r\n    const parsedOutput = {\r\n        ...output,\r\n        body: await parseErrorBody(output.body, context),\r\n    };\r\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\r\n    switch (errorCode) {\r\n        case \"InvalidRequestException\":\r\n        case \"com.amazonaws.sso#InvalidRequestException\":\r\n            throw await deserializeAws_restJson1InvalidRequestExceptionResponse(parsedOutput, context);\r\n        case \"TooManyRequestsException\":\r\n        case \"com.amazonaws.sso#TooManyRequestsException\":\r\n            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);\r\n        case \"UnauthorizedException\":\r\n        case \"com.amazonaws.sso#UnauthorizedException\":\r\n            throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);\r\n        default:\r\n            const parsedBody = parsedOutput.body;\r\n            (0, smithy_client_1.throwDefaultError)({\r\n                output,\r\n                parsedBody,\r\n                exceptionCtor: SSOServiceException_1.SSOServiceException,\r\n                errorCode,\r\n            });\r\n    }\r\n};\r\nconst map = smithy_client_1.map;\r\nconst deserializeAws_restJson1InvalidRequestExceptionResponse = async (parsedOutput, context) => {\r\n    const contents = map({});\r\n    const data = parsedOutput.body;\r\n    if (data.message != null) {\r\n        contents.message = (0, smithy_client_1.expectString)(data.message);\r\n    }\r\n    const exception = new models_0_1.InvalidRequestException({\r\n        $metadata: deserializeMetadata(parsedOutput),\r\n        ...contents,\r\n    });\r\n    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);\r\n};\r\nconst deserializeAws_restJson1ResourceNotFoundExceptionResponse = async (parsedOutput, context) => {\r\n    const contents = map({});\r\n    const data = parsedOutput.body;\r\n    if (data.message != null) {\r\n        contents.message = (0, smithy_client_1.expectString)(data.message);\r\n    }\r\n    const exception = new models_0_1.ResourceNotFoundException({\r\n        $metadata: deserializeMetadata(parsedOutput),\r\n        ...contents,\r\n    });\r\n    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);\r\n};\r\nconst deserializeAws_restJson1TooManyRequestsExceptionResponse = async (parsedOutput, context) => {\r\n    const contents = map({});\r\n    const data = parsedOutput.body;\r\n    if (data.message != null) {\r\n        contents.message = (0, smithy_client_1.expectString)(data.message);\r\n    }\r\n    const exception = new models_0_1.TooManyRequestsException({\r\n        $metadata: deserializeMetadata(parsedOutput),\r\n        ...contents,\r\n    });\r\n    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);\r\n};\r\nconst deserializeAws_restJson1UnauthorizedExceptionResponse = async (parsedOutput, context) => {\r\n    const contents = map({});\r\n    const data = parsedOutput.body;\r\n    if (data.message != null) {\r\n        contents.message = (0, smithy_client_1.expectString)(data.message);\r\n    }\r\n    const exception = new models_0_1.UnauthorizedException({\r\n        $metadata: deserializeMetadata(parsedOutput),\r\n        ...contents,\r\n    });\r\n    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);\r\n};\r\nconst deserializeAws_restJson1AccountInfo = (output, context) => {\r\n    return {\r\n        accountId: (0, smithy_client_1.expectString)(output.accountId),\r\n        accountName: (0, smithy_client_1.expectString)(output.accountName),\r\n        emailAddress: (0, smithy_client_1.expectString)(output.emailAddress),\r\n    };\r\n};\r\nconst deserializeAws_restJson1AccountListType = (output, context) => {\r\n    const retVal = (output || [])\r\n        .filter((e) => e != null)\r\n        .map((entry) => {\r\n        if (entry === null) {\r\n            return null;\r\n        }\r\n        return deserializeAws_restJson1AccountInfo(entry, context);\r\n    });\r\n    return retVal;\r\n};\r\nconst deserializeAws_restJson1RoleCredentials = (output, context) => {\r\n    return {\r\n        accessKeyId: (0, smithy_client_1.expectString)(output.accessKeyId),\r\n        expiration: (0, smithy_client_1.expectLong)(output.expiration),\r\n        secretAccessKey: (0, smithy_client_1.expectString)(output.secretAccessKey),\r\n        sessionToken: (0, smithy_client_1.expectString)(output.sessionToken),\r\n    };\r\n};\r\nconst deserializeAws_restJson1RoleInfo = (output, context) => {\r\n    return {\r\n        accountId: (0, smithy_client_1.expectString)(output.accountId),\r\n        roleName: (0, smithy_client_1.expectString)(output.roleName),\r\n    };\r\n};\r\nconst deserializeAws_restJson1RoleListType = (output, context) => {\r\n    const retVal = (output || [])\r\n        .filter((e) => e != null)\r\n        .map((entry) => {\r\n        if (entry === null) {\r\n            return null;\r\n        }\r\n        return deserializeAws_restJson1RoleInfo(entry, context);\r\n    });\r\n    return retVal;\r\n};\r\nconst deserializeMetadata = (output) => ({\r\n    httpStatusCode: output.statusCode,\r\n    requestId: output.headers[\"x-amzn-requestid\"] ?? output.headers[\"x-amzn-request-id\"] ?? output.headers[\"x-amz-request-id\"],\r\n    extendedRequestId: output.headers[\"x-amz-id-2\"],\r\n    cfId: output.headers[\"x-amz-cf-id\"],\r\n});\r\nconst collectBody = (streamBody = new Uint8Array(), context) => {\r\n    if (streamBody instanceof Uint8Array) {\r\n        return Promise.resolve(streamBody);\r\n    }\r\n    return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());\r\n};\r\nconst collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));\r\nconst isSerializableHeaderValue = (value) => value !== undefined &&\r\n    value !== null &&\r\n    value !== \"\" &&\r\n    (!Object.getOwnPropertyNames(value).includes(\"length\") || value.length != 0) &&\r\n    (!Object.getOwnPropertyNames(value).includes(\"size\") || value.size != 0);\r\nconst parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {\r\n    if (encoded.length) {\r\n        return JSON.parse(encoded);\r\n    }\r\n    return {};\r\n});\r\nconst parseErrorBody = async (errorBody, context) => {\r\n    const value = await parseBody(errorBody, context);\r\n    value.message = value.message ?? value.Message;\r\n    return value;\r\n};\r\nconst loadRestJsonErrorCode = (output, data) => {\r\n    const findKey = (object, key) => Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase());\r\n    const sanitizeErrorCode = (rawValue) => {\r\n        let cleanValue = rawValue;\r\n        if (typeof cleanValue === \"number\") {\r\n            cleanValue = cleanValue.toString();\r\n        }\r\n        if (cleanValue.indexOf(\",\") >= 0) {\r\n            cleanValue = cleanValue.split(\",\")[0];\r\n        }\r\n        if (cleanValue.indexOf(\":\") >= 0) {\r\n            cleanValue = cleanValue.split(\":\")[0];\r\n        }\r\n        if (cleanValue.indexOf(\"#\") >= 0) {\r\n            cleanValue = cleanValue.split(\"#\")[1];\r\n        }\r\n        return cleanValue;\r\n    };\r\n    const headerKey = findKey(output.headers, \"x-amzn-errortype\");\r\n    if (headerKey !== undefined) {\r\n        return sanitizeErrorCode(output.headers[headerKey]);\r\n    }\r\n    if (data.code !== undefined) {\r\n        return sanitizeErrorCode(data.code);\r\n    }\r\n    if (data[\"__type\"] !== undefined) {\r\n        return sanitizeErrorCode(data[\"__type\"]);\r\n    }\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}