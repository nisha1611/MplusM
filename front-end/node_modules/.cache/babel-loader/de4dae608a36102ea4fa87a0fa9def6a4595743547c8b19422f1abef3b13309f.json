{"ast":null,"code":"/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Ivan Kopeykin @vankop\r\n*/\n\n\"use strict\";\n\nconst makeSerializable = require(\"../util/makeSerializable\");\nconst memoize = require(\"../util/memoize\");\nconst ModuleDependency = require(\"./ModuleDependency\");\n\n/** @typedef {import(\"webpack-sources\").ReplaceSource} ReplaceSource */\n/** @typedef {import(\"../ChunkGraph\")} ChunkGraph */\n/** @typedef {import(\"../Dependency\")} Dependency */\n/** @typedef {import(\"../Dependency\").UpdateHashContext} UpdateHashContext */\n/** @typedef {import(\"../DependencyTemplate\").DependencyTemplateContext} DependencyTemplateContext */\n/** @typedef {import(\"../Module\")} Module */\n/** @typedef {import(\"../ModuleGraph\")} ModuleGraph */\n/** @typedef {import(\"../ModuleGraphConnection\")} ModuleGraphConnection */\n/** @typedef {import(\"../ModuleGraphConnection\").ConnectionState} ConnectionState */\n/** @typedef {import(\"../util/Hash\")} Hash */\n/** @typedef {import(\"../util/runtime\").RuntimeSpec} RuntimeSpec */\n\nconst getRawDataUrlModule = memoize(() => require(\"../asset/RawDataUrlModule\"));\nclass CssUrlDependency extends ModuleDependency {\n  /**\r\n   * @param {string} request request\r\n   * @param {[number, number]} range range of the argument\r\n   * @param {string} cssFunctionKind kind of css function, e. g. url(), image()\r\n   */\n  constructor(request, range, cssFunctionKind) {\n    super(request);\n    this.range = range;\n    this.cssFunctionKind = cssFunctionKind;\n  }\n  get type() {\n    return \"css url()\";\n  }\n  get category() {\n    return \"url\";\n  }\n\n  /**\r\n   * @param {string} context context directory\r\n   * @returns {Module} a module\r\n   */\n  createIgnoredModule(context) {\n    const RawDataUrlModule = getRawDataUrlModule();\n    return new RawDataUrlModule(\"data:,\", `ignored-asset`, `(ignored asset)`);\n  }\n  serialize(context) {\n    const {\n      write\n    } = context;\n    write(this.cssFunctionKind);\n    super.serialize(context);\n  }\n  deserialize(context) {\n    const {\n      read\n    } = context;\n    this.cssFunctionKind = read();\n    super.deserialize(context);\n  }\n}\nconst cssEscapeString = str => {\n  let countWhiteOrBracket = 0;\n  let countQuotation = 0;\n  let countApostrophe = 0;\n  for (let i = 0; i < str.length; i++) {\n    const cc = str.charCodeAt(i);\n    switch (cc) {\n      case 9: // tab\n      case 10: // nl\n      case 32: // space\n      case 40: // (\n      case 41:\n        // )\n        countWhiteOrBracket++;\n        break;\n      case 34:\n        countQuotation++;\n        break;\n      case 39:\n        countApostrophe++;\n        break;\n    }\n  }\n  if (countWhiteOrBracket < 2) {\n    return str.replace(/[\\n\\t ()'\"\\\\]/g, m => `\\\\${m}`);\n  } else if (countQuotation <= countApostrophe) {\n    return `\"${str.replace(/[\\n\"\\\\]/g, m => `\\\\${m}`)}\"`;\n  } else {\n    return `'${str.replace(/[\\n'\\\\]/g, m => `\\\\${m}`)}'`;\n  }\n};\nCssUrlDependency.Template = class CssUrlDependencyTemplate extends ModuleDependency.Template {\n  /**\r\n   * @param {Dependency} dependency the dependency for which the template should be applied\r\n   * @param {ReplaceSource} source the current replace source which can be modified\r\n   * @param {DependencyTemplateContext} templateContext the context object\r\n   * @returns {void}\r\n   */\n  apply(dependency, source, _ref) {\n    let {\n      runtime,\n      moduleGraph,\n      runtimeTemplate,\n      codeGenerationResults\n    } = _ref;\n    const dep = /** @type {CssUrlDependency} */dependency;\n    source.replace(dep.range[0], dep.range[1] - 1, `${dep.cssFunctionKind}(${cssEscapeString(runtimeTemplate.assetUrl({\n      publicPath: \"\",\n      runtime,\n      module: moduleGraph.getModule(dep),\n      codeGenerationResults\n    }))})`);\n  }\n};\nmakeSerializable(CssUrlDependency, \"webpack/lib/dependencies/CssUrlDependency\");\nmodule.exports = CssUrlDependency;","map":{"version":3,"names":["makeSerializable","require","memoize","ModuleDependency","getRawDataUrlModule","CssUrlDependency","constructor","request","range","cssFunctionKind","type","category","createIgnoredModule","context","RawDataUrlModule","serialize","write","deserialize","read","cssEscapeString","str","countWhiteOrBracket","countQuotation","countApostrophe","i","length","cc","charCodeAt","replace","m","Template","CssUrlDependencyTemplate","apply","dependency","source","runtime","moduleGraph","runtimeTemplate","codeGenerationResults","dep","assetUrl","publicPath","module","getModule","exports"],"sources":["C:/Users/91930/Desktop/Github projects/Pharmacy Demo/front-end/node_modules/webpack/lib/dependencies/CssUrlDependency.js"],"sourcesContent":["/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Ivan Kopeykin @vankop\r\n*/\r\n\r\n\"use strict\";\r\n\r\nconst makeSerializable = require(\"../util/makeSerializable\");\r\nconst memoize = require(\"../util/memoize\");\r\nconst ModuleDependency = require(\"./ModuleDependency\");\r\n\r\n/** @typedef {import(\"webpack-sources\").ReplaceSource} ReplaceSource */\r\n/** @typedef {import(\"../ChunkGraph\")} ChunkGraph */\r\n/** @typedef {import(\"../Dependency\")} Dependency */\r\n/** @typedef {import(\"../Dependency\").UpdateHashContext} UpdateHashContext */\r\n/** @typedef {import(\"../DependencyTemplate\").DependencyTemplateContext} DependencyTemplateContext */\r\n/** @typedef {import(\"../Module\")} Module */\r\n/** @typedef {import(\"../ModuleGraph\")} ModuleGraph */\r\n/** @typedef {import(\"../ModuleGraphConnection\")} ModuleGraphConnection */\r\n/** @typedef {import(\"../ModuleGraphConnection\").ConnectionState} ConnectionState */\r\n/** @typedef {import(\"../util/Hash\")} Hash */\r\n/** @typedef {import(\"../util/runtime\").RuntimeSpec} RuntimeSpec */\r\n\r\nconst getRawDataUrlModule = memoize(() => require(\"../asset/RawDataUrlModule\"));\r\n\r\nclass CssUrlDependency extends ModuleDependency {\r\n\t/**\r\n\t * @param {string} request request\r\n\t * @param {[number, number]} range range of the argument\r\n\t * @param {string} cssFunctionKind kind of css function, e. g. url(), image()\r\n\t */\r\n\tconstructor(request, range, cssFunctionKind) {\r\n\t\tsuper(request);\r\n\t\tthis.range = range;\r\n\t\tthis.cssFunctionKind = cssFunctionKind;\r\n\t}\r\n\r\n\tget type() {\r\n\t\treturn \"css url()\";\r\n\t}\r\n\r\n\tget category() {\r\n\t\treturn \"url\";\r\n\t}\r\n\r\n\t/**\r\n\t * @param {string} context context directory\r\n\t * @returns {Module} a module\r\n\t */\r\n\tcreateIgnoredModule(context) {\r\n\t\tconst RawDataUrlModule = getRawDataUrlModule();\r\n\t\treturn new RawDataUrlModule(\"data:,\", `ignored-asset`, `(ignored asset)`);\r\n\t}\r\n\r\n\tserialize(context) {\r\n\t\tconst { write } = context;\r\n\t\twrite(this.cssFunctionKind);\r\n\t\tsuper.serialize(context);\r\n\t}\r\n\r\n\tdeserialize(context) {\r\n\t\tconst { read } = context;\r\n\t\tthis.cssFunctionKind = read();\r\n\t\tsuper.deserialize(context);\r\n\t}\r\n}\r\n\r\nconst cssEscapeString = str => {\r\n\tlet countWhiteOrBracket = 0;\r\n\tlet countQuotation = 0;\r\n\tlet countApostrophe = 0;\r\n\tfor (let i = 0; i < str.length; i++) {\r\n\t\tconst cc = str.charCodeAt(i);\r\n\t\tswitch (cc) {\r\n\t\t\tcase 9: // tab\r\n\t\t\tcase 10: // nl\r\n\t\t\tcase 32: // space\r\n\t\t\tcase 40: // (\r\n\t\t\tcase 41: // )\r\n\t\t\t\tcountWhiteOrBracket++;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 34:\r\n\t\t\t\tcountQuotation++;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 39:\r\n\t\t\t\tcountApostrophe++;\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\tif (countWhiteOrBracket < 2) {\r\n\t\treturn str.replace(/[\\n\\t ()'\"\\\\]/g, m => `\\\\${m}`);\r\n\t} else if (countQuotation <= countApostrophe) {\r\n\t\treturn `\"${str.replace(/[\\n\"\\\\]/g, m => `\\\\${m}`)}\"`;\r\n\t} else {\r\n\t\treturn `'${str.replace(/[\\n'\\\\]/g, m => `\\\\${m}`)}'`;\r\n\t}\r\n};\r\n\r\nCssUrlDependency.Template = class CssUrlDependencyTemplate extends (\r\n\tModuleDependency.Template\r\n) {\r\n\t/**\r\n\t * @param {Dependency} dependency the dependency for which the template should be applied\r\n\t * @param {ReplaceSource} source the current replace source which can be modified\r\n\t * @param {DependencyTemplateContext} templateContext the context object\r\n\t * @returns {void}\r\n\t */\r\n\tapply(\r\n\t\tdependency,\r\n\t\tsource,\r\n\t\t{ runtime, moduleGraph, runtimeTemplate, codeGenerationResults }\r\n\t) {\r\n\t\tconst dep = /** @type {CssUrlDependency} */ (dependency);\r\n\r\n\t\tsource.replace(\r\n\t\t\tdep.range[0],\r\n\t\t\tdep.range[1] - 1,\r\n\t\t\t`${dep.cssFunctionKind}(${cssEscapeString(\r\n\t\t\t\truntimeTemplate.assetUrl({\r\n\t\t\t\t\tpublicPath: \"\",\r\n\t\t\t\t\truntime,\r\n\t\t\t\t\tmodule: moduleGraph.getModule(dep),\r\n\t\t\t\t\tcodeGenerationResults\r\n\t\t\t\t})\r\n\t\t\t)})`\r\n\t\t);\r\n\t}\r\n};\r\n\r\nmakeSerializable(CssUrlDependency, \"webpack/lib/dependencies/CssUrlDependency\");\r\n\r\nmodule.exports = CssUrlDependency;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}