{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.partition = void 0;\nconst tslib_1 = require(\"tslib\");\nconst partitions_json_1 = tslib_1.__importDefault(require(\"./partitions.json\"));\nconst {\n  partitions\n} = partitions_json_1.default;\nconst DEFAULT_PARTITION = partitions.find(partition => partition.id === \"aws\");\nconst partition = value => {\n  for (const partition of partitions) {\n    const {\n      regions,\n      outputs\n    } = partition;\n    for (const [region, regionData] of Object.entries(regions)) {\n      if (region === value) {\n        return {\n          ...outputs,\n          ...regionData\n        };\n      }\n    }\n  }\n  for (const partition of partitions) {\n    const {\n      regionRegex,\n      outputs\n    } = partition;\n    if (new RegExp(regionRegex).test(value)) {\n      return {\n        ...outputs\n      };\n    }\n  }\n  if (!DEFAULT_PARTITION) {\n    throw new Error(\"Provided region was not found in the partition array or regex,\" + \" and default partition with id 'aws' doesn't exist.\");\n  }\n  return {\n    ...DEFAULT_PARTITION.outputs\n  };\n};\nexports.partition = partition;","map":{"version":3,"names":["Object","defineProperty","exports","value","partition","tslib_1","require","partitions_json_1","__importDefault","partitions","default","DEFAULT_PARTITION","find","id","regions","outputs","region","regionData","entries","regionRegex","RegExp","test","Error"],"sources":["C:/Users/91930/Desktop/Github projects/Pharmacy Demo/back-end/node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/aws/partition.js"],"sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.partition = void 0;\r\nconst tslib_1 = require(\"tslib\");\r\nconst partitions_json_1 = tslib_1.__importDefault(require(\"./partitions.json\"));\r\nconst { partitions } = partitions_json_1.default;\r\nconst DEFAULT_PARTITION = partitions.find((partition) => partition.id === \"aws\");\r\nconst partition = (value) => {\r\n    for (const partition of partitions) {\r\n        const { regions, outputs } = partition;\r\n        for (const [region, regionData] of Object.entries(regions)) {\r\n            if (region === value) {\r\n                return {\r\n                    ...outputs,\r\n                    ...regionData,\r\n                };\r\n            }\r\n        }\r\n    }\r\n    for (const partition of partitions) {\r\n        const { regionRegex, outputs } = partition;\r\n        if (new RegExp(regionRegex).test(value)) {\r\n            return {\r\n                ...outputs,\r\n            };\r\n        }\r\n    }\r\n    if (!DEFAULT_PARTITION) {\r\n        throw new Error(\"Provided region was not found in the partition array or regex,\" +\r\n            \" and default partition with id 'aws' doesn't exist.\");\r\n    }\r\n    return {\r\n        ...DEFAULT_PARTITION.outputs,\r\n    };\r\n};\r\nexports.partition = partition;\r\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,SAAS,GAAG,KAAK,CAAC;AAC1B,MAAMC,OAAO,GAAGC,OAAO,CAAC,OAAO,CAAC;AAChC,MAAMC,iBAAiB,GAAGF,OAAO,CAACG,eAAe,CAACF,OAAO,CAAC,mBAAmB,CAAC,CAAC;AAC/E,MAAM;EAAEG;AAAW,CAAC,GAAGF,iBAAiB,CAACG,OAAO;AAChD,MAAMC,iBAAiB,GAAGF,UAAU,CAACG,IAAI,CAAER,SAAS,IAAKA,SAAS,CAACS,EAAE,KAAK,KAAK,CAAC;AAChF,MAAMT,SAAS,GAAID,KAAK,IAAK;EACzB,KAAK,MAAMC,SAAS,IAAIK,UAAU,EAAE;IAChC,MAAM;MAAEK,OAAO;MAAEC;IAAQ,CAAC,GAAGX,SAAS;IACtC,KAAK,MAAM,CAACY,MAAM,EAAEC,UAAU,CAAC,IAAIjB,MAAM,CAACkB,OAAO,CAACJ,OAAO,CAAC,EAAE;MACxD,IAAIE,MAAM,KAAKb,KAAK,EAAE;QAClB,OAAO;UACH,GAAGY,OAAO;UACV,GAAGE;QACP,CAAC;MACL;IACJ;EACJ;EACA,KAAK,MAAMb,SAAS,IAAIK,UAAU,EAAE;IAChC,MAAM;MAAEU,WAAW;MAAEJ;IAAQ,CAAC,GAAGX,SAAS;IAC1C,IAAI,IAAIgB,MAAM,CAACD,WAAW,CAAC,CAACE,IAAI,CAAClB,KAAK,CAAC,EAAE;MACrC,OAAO;QACH,GAAGY;MACP,CAAC;IACL;EACJ;EACA,IAAI,CAACJ,iBAAiB,EAAE;IACpB,MAAM,IAAIW,KAAK,CAAC,gEAAgE,GAC5E,qDAAqD,CAAC;EAC9D;EACA,OAAO;IACH,GAAGX,iBAAiB,CAACI;EACzB,CAAC;AACL,CAAC;AACDb,OAAO,CAACE,SAAS,GAAGA,SAAS"},"metadata":{},"sourceType":"script","externalDependencies":[]}