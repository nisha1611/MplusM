{"ast":null,"code":"/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Tobias Koppers @sokra\r\n*/\n\n\"use strict\";\n\nconst t = require(\"@webassemblyjs/ast\");\nconst {\n  decode\n} = require(\"@webassemblyjs/wasm-parser\");\nconst Parser = require(\"../Parser\");\nconst StaticExportsDependency = require(\"../dependencies/StaticExportsDependency\");\nconst WebAssemblyImportDependency = require(\"../dependencies/WebAssemblyImportDependency\");\n\n/** @typedef {import(\"../Parser\").ParserState} ParserState */\n/** @typedef {import(\"../Parser\").PreparsedAst} PreparsedAst */\n\nconst decoderOpts = {\n  ignoreCodeSection: true,\n  ignoreDataSection: true,\n  // this will avoid having to lookup with identifiers in the ModuleContext\n  ignoreCustomNameSection: true\n};\nclass WebAssemblyParser extends Parser {\n  constructor(options) {\n    super();\n    this.hooks = Object.freeze({});\n    this.options = options;\n  }\n\n  /**\r\n   * @param {string | Buffer | PreparsedAst} source the source to parse\r\n   * @param {ParserState} state the parser state\r\n   * @returns {ParserState} the parser state\r\n   */\n  parse(source, state) {\n    if (!Buffer.isBuffer(source)) {\n      throw new Error(\"WebAssemblyParser input must be a Buffer\");\n    }\n\n    // flag it as async module\n    state.module.buildInfo.strict = true;\n    state.module.buildMeta.exportsType = \"namespace\";\n    state.module.buildMeta.async = true;\n\n    // parse it\n    const program = decode(source, decoderOpts);\n    const module = program.body[0];\n    const exports = [];\n    t.traverse(module, {\n      ModuleExport(_ref) {\n        let {\n          node\n        } = _ref;\n        exports.push(node.name);\n      },\n      ModuleImport(_ref2) {\n        let {\n          node\n        } = _ref2;\n        const dep = new WebAssemblyImportDependency(node.module, node.name, node.descr, false);\n        state.module.addDependency(dep);\n      }\n    });\n    state.module.addDependency(new StaticExportsDependency(exports, false));\n    return state;\n  }\n}\nmodule.exports = WebAssemblyParser;","map":{"version":3,"names":["t","require","decode","Parser","StaticExportsDependency","WebAssemblyImportDependency","decoderOpts","ignoreCodeSection","ignoreDataSection","ignoreCustomNameSection","WebAssemblyParser","constructor","options","hooks","Object","freeze","parse","source","state","Buffer","isBuffer","Error","module","buildInfo","strict","buildMeta","exportsType","async","program","body","exports","traverse","ModuleExport","node","push","name","ModuleImport","dep","descr","addDependency"],"sources":["C:/Users/91930/Desktop/Github projects/Pharmacy Demo/front-end/node_modules/webpack/lib/wasm-async/AsyncWebAssemblyParser.js"],"sourcesContent":["/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Tobias Koppers @sokra\r\n*/\r\n\r\n\"use strict\";\r\n\r\nconst t = require(\"@webassemblyjs/ast\");\r\nconst { decode } = require(\"@webassemblyjs/wasm-parser\");\r\nconst Parser = require(\"../Parser\");\r\nconst StaticExportsDependency = require(\"../dependencies/StaticExportsDependency\");\r\nconst WebAssemblyImportDependency = require(\"../dependencies/WebAssemblyImportDependency\");\r\n\r\n/** @typedef {import(\"../Parser\").ParserState} ParserState */\r\n/** @typedef {import(\"../Parser\").PreparsedAst} PreparsedAst */\r\n\r\nconst decoderOpts = {\r\n\tignoreCodeSection: true,\r\n\tignoreDataSection: true,\r\n\r\n\t// this will avoid having to lookup with identifiers in the ModuleContext\r\n\tignoreCustomNameSection: true\r\n};\r\n\r\nclass WebAssemblyParser extends Parser {\r\n\tconstructor(options) {\r\n\t\tsuper();\r\n\t\tthis.hooks = Object.freeze({});\r\n\t\tthis.options = options;\r\n\t}\r\n\r\n\t/**\r\n\t * @param {string | Buffer | PreparsedAst} source the source to parse\r\n\t * @param {ParserState} state the parser state\r\n\t * @returns {ParserState} the parser state\r\n\t */\r\n\tparse(source, state) {\r\n\t\tif (!Buffer.isBuffer(source)) {\r\n\t\t\tthrow new Error(\"WebAssemblyParser input must be a Buffer\");\r\n\t\t}\r\n\r\n\t\t// flag it as async module\r\n\t\tstate.module.buildInfo.strict = true;\r\n\t\tstate.module.buildMeta.exportsType = \"namespace\";\r\n\t\tstate.module.buildMeta.async = true;\r\n\r\n\t\t// parse it\r\n\t\tconst program = decode(source, decoderOpts);\r\n\t\tconst module = program.body[0];\r\n\r\n\t\tconst exports = [];\r\n\t\tt.traverse(module, {\r\n\t\t\tModuleExport({ node }) {\r\n\t\t\t\texports.push(node.name);\r\n\t\t\t},\r\n\r\n\t\t\tModuleImport({ node }) {\r\n\t\t\t\tconst dep = new WebAssemblyImportDependency(\r\n\t\t\t\t\tnode.module,\r\n\t\t\t\t\tnode.name,\r\n\t\t\t\t\tnode.descr,\r\n\t\t\t\t\tfalse\r\n\t\t\t\t);\r\n\r\n\t\t\t\tstate.module.addDependency(dep);\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tstate.module.addDependency(new StaticExportsDependency(exports, false));\r\n\r\n\t\treturn state;\r\n\t}\r\n}\r\n\r\nmodule.exports = WebAssemblyParser;\r\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ,MAAMA,CAAC,GAAGC,OAAO,CAAC,oBAAoB,CAAC;AACvC,MAAM;EAAEC;AAAO,CAAC,GAAGD,OAAO,CAAC,4BAA4B,CAAC;AACxD,MAAME,MAAM,GAAGF,OAAO,CAAC,WAAW,CAAC;AACnC,MAAMG,uBAAuB,GAAGH,OAAO,CAAC,yCAAyC,CAAC;AAClF,MAAMI,2BAA2B,GAAGJ,OAAO,CAAC,6CAA6C,CAAC;;AAE1F;AACA;;AAEA,MAAMK,WAAW,GAAG;EACnBC,iBAAiB,EAAE,IAAI;EACvBC,iBAAiB,EAAE,IAAI;EAEvB;EACAC,uBAAuB,EAAE;AAC1B,CAAC;AAED,MAAMC,iBAAiB,SAASP,MAAM,CAAC;EACtCQ,WAAW,CAACC,OAAO,EAAE;IACpB,KAAK,EAAE;IACP,IAAI,CAACC,KAAK,GAAGC,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,CAAC;IAC9B,IAAI,CAACH,OAAO,GAAGA,OAAO;EACvB;;EAEA;AACD;AACA;AACA;AACA;EACCI,KAAK,CAACC,MAAM,EAAEC,KAAK,EAAE;IACpB,IAAI,CAACC,MAAM,CAACC,QAAQ,CAACH,MAAM,CAAC,EAAE;MAC7B,MAAM,IAAII,KAAK,CAAC,0CAA0C,CAAC;IAC5D;;IAEA;IACAH,KAAK,CAACI,MAAM,CAACC,SAAS,CAACC,MAAM,GAAG,IAAI;IACpCN,KAAK,CAACI,MAAM,CAACG,SAAS,CAACC,WAAW,GAAG,WAAW;IAChDR,KAAK,CAACI,MAAM,CAACG,SAAS,CAACE,KAAK,GAAG,IAAI;;IAEnC;IACA,MAAMC,OAAO,GAAG1B,MAAM,CAACe,MAAM,EAAEX,WAAW,CAAC;IAC3C,MAAMgB,MAAM,GAAGM,OAAO,CAACC,IAAI,CAAC,CAAC,CAAC;IAE9B,MAAMC,OAAO,GAAG,EAAE;IAClB9B,CAAC,CAAC+B,QAAQ,CAACT,MAAM,EAAE;MAClBU,YAAY,OAAW;QAAA,IAAV;UAAEC;QAAK,CAAC;QACpBH,OAAO,CAACI,IAAI,CAACD,IAAI,CAACE,IAAI,CAAC;MACxB,CAAC;MAEDC,YAAY,QAAW;QAAA,IAAV;UAAEH;QAAK,CAAC;QACpB,MAAMI,GAAG,GAAG,IAAIhC,2BAA2B,CAC1C4B,IAAI,CAACX,MAAM,EACXW,IAAI,CAACE,IAAI,EACTF,IAAI,CAACK,KAAK,EACV,KAAK,CACL;QAEDpB,KAAK,CAACI,MAAM,CAACiB,aAAa,CAACF,GAAG,CAAC;MAChC;IACD,CAAC,CAAC;IAEFnB,KAAK,CAACI,MAAM,CAACiB,aAAa,CAAC,IAAInC,uBAAuB,CAAC0B,OAAO,EAAE,KAAK,CAAC,CAAC;IAEvE,OAAOZ,KAAK;EACb;AACD;AAEAI,MAAM,CAACQ,OAAO,GAAGpB,iBAAiB"},"metadata":{},"sourceType":"script","externalDependencies":[]}