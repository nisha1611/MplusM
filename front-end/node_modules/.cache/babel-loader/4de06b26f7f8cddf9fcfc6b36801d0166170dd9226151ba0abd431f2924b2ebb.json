{"ast":null,"code":"import { resolveParamsForS3 } from \"../service-customizations\";\nimport { createConfigValueProvider } from \"./createConfigValueProvider\";\nexport const getEndpointFromInstructions = async (commandInput, instructionsSupplier, clientConfig, context) => {\n  const endpointParams = await resolveParams(commandInput, instructionsSupplier, clientConfig);\n  if (typeof clientConfig.endpointProvider !== \"function\") {\n    throw new Error(\"config.endpointProvider is not set.\");\n  }\n  const endpoint = clientConfig.endpointProvider(endpointParams, context);\n  return endpoint;\n};\nexport const resolveParams = async (commandInput, instructionsSupplier, clientConfig) => {\n  const endpointParams = {};\n  const instructions = instructionsSupplier?.getEndpointParameterInstructions?.() || {};\n  for (const [name, instruction] of Object.entries(instructions)) {\n    switch (instruction.type) {\n      case \"staticContextParams\":\n        endpointParams[name] = instruction.value;\n        break;\n      case \"contextParams\":\n        endpointParams[name] = commandInput[instruction.name];\n        break;\n      case \"clientContextParams\":\n      case \"builtInParams\":\n        endpointParams[name] = await createConfigValueProvider(instruction.name, name, clientConfig)();\n        break;\n      default:\n        throw new Error(\"Unrecognized endpoint parameter instruction: \" + JSON.stringify(instruction));\n    }\n  }\n  if (Object.keys(instructions).length === 0) {\n    Object.assign(endpointParams, clientConfig);\n  }\n  if (String(clientConfig.serviceId).toLowerCase() === \"s3\") {\n    await resolveParamsForS3(endpointParams);\n  }\n  return endpointParams;\n};","map":{"version":3,"names":["resolveParamsForS3","createConfigValueProvider","getEndpointFromInstructions","commandInput","instructionsSupplier","clientConfig","context","endpointParams","resolveParams","endpointProvider","Error","endpoint","instructions","getEndpointParameterInstructions","name","instruction","Object","entries","type","value","JSON","stringify","keys","length","assign","String","serviceId","toLowerCase"],"sources":["C:/Users/91930/Desktop/Github projects/Pharmacy Demo/back-end/node_modules/@aws-sdk/middleware-endpoint/dist-es/adaptors/getEndpointFromInstructions.js"],"sourcesContent":["import { resolveParamsForS3 } from \"../service-customizations\";\r\nimport { createConfigValueProvider } from \"./createConfigValueProvider\";\r\nexport const getEndpointFromInstructions = async (commandInput, instructionsSupplier, clientConfig, context) => {\r\n    const endpointParams = await resolveParams(commandInput, instructionsSupplier, clientConfig);\r\n    if (typeof clientConfig.endpointProvider !== \"function\") {\r\n        throw new Error(\"config.endpointProvider is not set.\");\r\n    }\r\n    const endpoint = clientConfig.endpointProvider(endpointParams, context);\r\n    return endpoint;\r\n};\r\nexport const resolveParams = async (commandInput, instructionsSupplier, clientConfig) => {\r\n    const endpointParams = {};\r\n    const instructions = instructionsSupplier?.getEndpointParameterInstructions?.() || {};\r\n    for (const [name, instruction] of Object.entries(instructions)) {\r\n        switch (instruction.type) {\r\n            case \"staticContextParams\":\r\n                endpointParams[name] = instruction.value;\r\n                break;\r\n            case \"contextParams\":\r\n                endpointParams[name] = commandInput[instruction.name];\r\n                break;\r\n            case \"clientContextParams\":\r\n            case \"builtInParams\":\r\n                endpointParams[name] = await createConfigValueProvider(instruction.name, name, clientConfig)();\r\n                break;\r\n            default:\r\n                throw new Error(\"Unrecognized endpoint parameter instruction: \" + JSON.stringify(instruction));\r\n        }\r\n    }\r\n    if (Object.keys(instructions).length === 0) {\r\n        Object.assign(endpointParams, clientConfig);\r\n    }\r\n    if (String(clientConfig.serviceId).toLowerCase() === \"s3\") {\r\n        await resolveParamsForS3(endpointParams);\r\n    }\r\n    return endpointParams;\r\n};\r\n"],"mappings":"AAAA,SAASA,kBAAkB,QAAQ,2BAA2B;AAC9D,SAASC,yBAAyB,QAAQ,6BAA6B;AACvE,OAAO,MAAMC,2BAA2B,GAAG,OAAOC,YAAY,EAAEC,oBAAoB,EAAEC,YAAY,EAAEC,OAAO,KAAK;EAC5G,MAAMC,cAAc,GAAG,MAAMC,aAAa,CAACL,YAAY,EAAEC,oBAAoB,EAAEC,YAAY,CAAC;EAC5F,IAAI,OAAOA,YAAY,CAACI,gBAAgB,KAAK,UAAU,EAAE;IACrD,MAAM,IAAIC,KAAK,CAAC,qCAAqC,CAAC;EAC1D;EACA,MAAMC,QAAQ,GAAGN,YAAY,CAACI,gBAAgB,CAACF,cAAc,EAAED,OAAO,CAAC;EACvE,OAAOK,QAAQ;AACnB,CAAC;AACD,OAAO,MAAMH,aAAa,GAAG,OAAOL,YAAY,EAAEC,oBAAoB,EAAEC,YAAY,KAAK;EACrF,MAAME,cAAc,GAAG,CAAC,CAAC;EACzB,MAAMK,YAAY,GAAGR,oBAAoB,EAAES,gCAAgC,IAAI,IAAI,CAAC,CAAC;EACrF,KAAK,MAAM,CAACC,IAAI,EAAEC,WAAW,CAAC,IAAIC,MAAM,CAACC,OAAO,CAACL,YAAY,CAAC,EAAE;IAC5D,QAAQG,WAAW,CAACG,IAAI;MACpB,KAAK,qBAAqB;QACtBX,cAAc,CAACO,IAAI,CAAC,GAAGC,WAAW,CAACI,KAAK;QACxC;MACJ,KAAK,eAAe;QAChBZ,cAAc,CAACO,IAAI,CAAC,GAAGX,YAAY,CAACY,WAAW,CAACD,IAAI,CAAC;QACrD;MACJ,KAAK,qBAAqB;MAC1B,KAAK,eAAe;QAChBP,cAAc,CAACO,IAAI,CAAC,GAAG,MAAMb,yBAAyB,CAACc,WAAW,CAACD,IAAI,EAAEA,IAAI,EAAET,YAAY,CAAC,EAAE;QAC9F;MACJ;QACI,MAAM,IAAIK,KAAK,CAAC,+CAA+C,GAAGU,IAAI,CAACC,SAAS,CAACN,WAAW,CAAC,CAAC;IAAC;EAE3G;EACA,IAAIC,MAAM,CAACM,IAAI,CAACV,YAAY,CAAC,CAACW,MAAM,KAAK,CAAC,EAAE;IACxCP,MAAM,CAACQ,MAAM,CAACjB,cAAc,EAAEF,YAAY,CAAC;EAC/C;EACA,IAAIoB,MAAM,CAACpB,YAAY,CAACqB,SAAS,CAAC,CAACC,WAAW,EAAE,KAAK,IAAI,EAAE;IACvD,MAAM3B,kBAAkB,CAACO,cAAc,CAAC;EAC5C;EACA,OAAOA,cAAc;AACzB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}