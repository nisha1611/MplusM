{"ast":null,"code":"module.exports = version;\nmodule.exports.pin = pin;\nvar fs = require('fs');\nvar path = require('path');\nvar exec = require('child_process').exec;\nvar root = null;\nfunction pin() {\n  return version().then(function (v) {\n    version.pinned = v;\n  });\n}\nfunction version(callback) {\n  // first find the package.json as this will be our root\n  var promise = findPackage(path.dirname(module.parent.filename)).then(function (dir) {\n    // now try to load the package\n    var v = require(path.resolve(dir, 'package.json')).version;\n    if (v && v !== '0.0.0-development') {\n      return v;\n    }\n    root = dir;\n\n    // else we're in development, give the commit out\n    // get the last commit and whether the working dir is dirty\n    var promises = [branch().catch(function () {\n      return 'master';\n    }), commit().catch(function () {\n      return '<none>';\n    }), dirty().catch(function () {\n      return 0;\n    })];\n\n    // use the cached result as the export\n    return Promise.all(promises).then(function (res) {\n      var branch = res[0];\n      var commit = res[1];\n      var dirtyCount = parseInt(res[2], 10);\n      var curr = branch + ': ' + commit;\n      if (dirtyCount !== 0) {\n        curr += ' (' + dirtyCount + ' dirty files)';\n      }\n      return curr;\n    });\n  }).catch(function (error) {\n    console.log(error.stack);\n    throw error;\n  });\n  if (callback) {\n    promise.then(function (res) {\n      callback(null, res);\n    }, callback);\n  }\n  return promise;\n}\nfunction findPackage(dir) {\n  if (dir === '/') {\n    return Promise.reject(new Error('package not found'));\n  }\n  return new Promise(function (resolve) {\n    fs.stat(path.resolve(dir, 'package.json'), function (error, exists) {\n      if (error || !exists) {\n        return resolve(findPackage(path.resolve(dir, '..')));\n      }\n      resolve(dir);\n    });\n  });\n}\nfunction command(cmd) {\n  return new Promise(function (resolve, reject) {\n    exec(cmd, {\n      cwd: root\n    }, function (err, stdout, stderr) {\n      var error = stderr.trim();\n      if (error) {\n        return reject(new Error(error));\n      }\n      resolve(stdout.split('\\n').join(''));\n    });\n  });\n}\nfunction commit() {\n  return command('git rev-parse HEAD');\n}\nfunction branch() {\n  return command('git rev-parse --abbrev-ref HEAD');\n}\nfunction dirty() {\n  return command('expr $(git status --porcelain 2>/dev/null| ' + 'egrep \"^(M| M)\" | wc -l)');\n}","map":{"version":3,"names":["module","exports","version","pin","fs","require","path","exec","root","then","v","pinned","callback","promise","findPackage","dirname","parent","filename","dir","resolve","promises","branch","catch","commit","dirty","Promise","all","res","dirtyCount","parseInt","curr","error","console","log","stack","reject","Error","stat","exists","command","cmd","cwd","err","stdout","stderr","trim","split","join"],"sources":["C:/Users/91930/Desktop/Github projects/Pharmacy Demo/back-end/node_modules/nodemon/lib/version.js"],"sourcesContent":["module.exports = version;\r\nmodule.exports.pin = pin;\r\n\r\nvar fs = require('fs');\r\nvar path = require('path');\r\nvar exec = require('child_process').exec;\r\nvar root = null;\r\n\r\nfunction pin() {\r\n  return version().then(function (v) {\r\n    version.pinned = v;\r\n  });\r\n}\r\n\r\nfunction version(callback) {\r\n  // first find the package.json as this will be our root\r\n  var promise = findPackage(path.dirname(module.parent.filename))\r\n    .then(function (dir) {\r\n      // now try to load the package\r\n      var v = require(path.resolve(dir, 'package.json')).version;\r\n\r\n      if (v && v !== '0.0.0-development') {\r\n        return v;\r\n      }\r\n\r\n      root = dir;\r\n\r\n      // else we're in development, give the commit out\r\n      // get the last commit and whether the working dir is dirty\r\n      var promises = [\r\n        branch().catch(function () { return 'master'; }),\r\n        commit().catch(function () { return '<none>'; }),\r\n        dirty().catch(function () { return 0; }),\r\n      ];\r\n\r\n      // use the cached result as the export\r\n      return Promise.all(promises).then(function (res) {\r\n        var branch = res[0];\r\n        var commit = res[1];\r\n        var dirtyCount = parseInt(res[2], 10);\r\n        var curr = branch + ': ' + commit;\r\n        if (dirtyCount !== 0) {\r\n          curr += ' (' + dirtyCount + ' dirty files)';\r\n        }\r\n\r\n        return curr;\r\n      });\r\n    }).catch(function (error) {\r\n      console.log(error.stack);\r\n      throw error;\r\n    });\r\n\r\n  if (callback) {\r\n    promise.then(function (res) {\r\n      callback(null, res);\r\n    }, callback);\r\n  }\r\n\r\n  return promise;\r\n}\r\n\r\nfunction findPackage(dir) {\r\n  if (dir === '/') {\r\n    return Promise.reject(new Error('package not found'));\r\n  }\r\n  return new Promise(function (resolve) {\r\n    fs.stat(path.resolve(dir, 'package.json'), function (error, exists) {\r\n      if (error || !exists) {\r\n        return resolve(findPackage(path.resolve(dir, '..')));\r\n      }\r\n\r\n      resolve(dir);\r\n    });\r\n  });\r\n}\r\n\r\nfunction command(cmd) {\r\n  return new Promise(function (resolve, reject) {\r\n    exec(cmd, { cwd: root }, function (err, stdout, stderr) {\r\n      var error = stderr.trim();\r\n      if (error) {\r\n        return reject(new Error(error));\r\n      }\r\n      resolve(stdout.split('\\n').join(''));\r\n    });\r\n  });\r\n}\r\n\r\nfunction commit() {\r\n  return command('git rev-parse HEAD');\r\n}\r\n\r\nfunction branch() {\r\n  return command('git rev-parse --abbrev-ref HEAD');\r\n}\r\n\r\nfunction dirty() {\r\n  return command('expr $(git status --porcelain 2>/dev/null| ' +\r\n    'egrep \"^(M| M)\" | wc -l)');\r\n}\r\n"],"mappings":"AAAAA,MAAM,CAACC,OAAO,GAAGC,OAAO;AACxBF,MAAM,CAACC,OAAO,CAACE,GAAG,GAAGA,GAAG;AAExB,IAAIC,EAAE,GAAGC,OAAO,CAAC,IAAI,CAAC;AACtB,IAAIC,IAAI,GAAGD,OAAO,CAAC,MAAM,CAAC;AAC1B,IAAIE,IAAI,GAAGF,OAAO,CAAC,eAAe,CAAC,CAACE,IAAI;AACxC,IAAIC,IAAI,GAAG,IAAI;AAEf,SAASL,GAAG,GAAG;EACb,OAAOD,OAAO,EAAE,CAACO,IAAI,CAAC,UAAUC,CAAC,EAAE;IACjCR,OAAO,CAACS,MAAM,GAAGD,CAAC;EACpB,CAAC,CAAC;AACJ;AAEA,SAASR,OAAO,CAACU,QAAQ,EAAE;EACzB;EACA,IAAIC,OAAO,GAAGC,WAAW,CAACR,IAAI,CAACS,OAAO,CAACf,MAAM,CAACgB,MAAM,CAACC,QAAQ,CAAC,CAAC,CAC5DR,IAAI,CAAC,UAAUS,GAAG,EAAE;IACnB;IACA,IAAIR,CAAC,GAAGL,OAAO,CAACC,IAAI,CAACa,OAAO,CAACD,GAAG,EAAE,cAAc,CAAC,CAAC,CAAChB,OAAO;IAE1D,IAAIQ,CAAC,IAAIA,CAAC,KAAK,mBAAmB,EAAE;MAClC,OAAOA,CAAC;IACV;IAEAF,IAAI,GAAGU,GAAG;;IAEV;IACA;IACA,IAAIE,QAAQ,GAAG,CACbC,MAAM,EAAE,CAACC,KAAK,CAAC,YAAY;MAAE,OAAO,QAAQ;IAAE,CAAC,CAAC,EAChDC,MAAM,EAAE,CAACD,KAAK,CAAC,YAAY;MAAE,OAAO,QAAQ;IAAE,CAAC,CAAC,EAChDE,KAAK,EAAE,CAACF,KAAK,CAAC,YAAY;MAAE,OAAO,CAAC;IAAE,CAAC,CAAC,CACzC;;IAED;IACA,OAAOG,OAAO,CAACC,GAAG,CAACN,QAAQ,CAAC,CAACX,IAAI,CAAC,UAAUkB,GAAG,EAAE;MAC/C,IAAIN,MAAM,GAAGM,GAAG,CAAC,CAAC,CAAC;MACnB,IAAIJ,MAAM,GAAGI,GAAG,CAAC,CAAC,CAAC;MACnB,IAAIC,UAAU,GAAGC,QAAQ,CAACF,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;MACrC,IAAIG,IAAI,GAAGT,MAAM,GAAG,IAAI,GAAGE,MAAM;MACjC,IAAIK,UAAU,KAAK,CAAC,EAAE;QACpBE,IAAI,IAAI,IAAI,GAAGF,UAAU,GAAG,eAAe;MAC7C;MAEA,OAAOE,IAAI;IACb,CAAC,CAAC;EACJ,CAAC,CAAC,CAACR,KAAK,CAAC,UAAUS,KAAK,EAAE;IACxBC,OAAO,CAACC,GAAG,CAACF,KAAK,CAACG,KAAK,CAAC;IACxB,MAAMH,KAAK;EACb,CAAC,CAAC;EAEJ,IAAInB,QAAQ,EAAE;IACZC,OAAO,CAACJ,IAAI,CAAC,UAAUkB,GAAG,EAAE;MAC1Bf,QAAQ,CAAC,IAAI,EAAEe,GAAG,CAAC;IACrB,CAAC,EAAEf,QAAQ,CAAC;EACd;EAEA,OAAOC,OAAO;AAChB;AAEA,SAASC,WAAW,CAACI,GAAG,EAAE;EACxB,IAAIA,GAAG,KAAK,GAAG,EAAE;IACf,OAAOO,OAAO,CAACU,MAAM,CAAC,IAAIC,KAAK,CAAC,mBAAmB,CAAC,CAAC;EACvD;EACA,OAAO,IAAIX,OAAO,CAAC,UAAUN,OAAO,EAAE;IACpCf,EAAE,CAACiC,IAAI,CAAC/B,IAAI,CAACa,OAAO,CAACD,GAAG,EAAE,cAAc,CAAC,EAAE,UAAUa,KAAK,EAAEO,MAAM,EAAE;MAClE,IAAIP,KAAK,IAAI,CAACO,MAAM,EAAE;QACpB,OAAOnB,OAAO,CAACL,WAAW,CAACR,IAAI,CAACa,OAAO,CAACD,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC;MACtD;MAEAC,OAAO,CAACD,GAAG,CAAC;IACd,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ;AAEA,SAASqB,OAAO,CAACC,GAAG,EAAE;EACpB,OAAO,IAAIf,OAAO,CAAC,UAAUN,OAAO,EAAEgB,MAAM,EAAE;IAC5C5B,IAAI,CAACiC,GAAG,EAAE;MAAEC,GAAG,EAAEjC;IAAK,CAAC,EAAE,UAAUkC,GAAG,EAAEC,MAAM,EAAEC,MAAM,EAAE;MACtD,IAAIb,KAAK,GAAGa,MAAM,CAACC,IAAI,EAAE;MACzB,IAAId,KAAK,EAAE;QACT,OAAOI,MAAM,CAAC,IAAIC,KAAK,CAACL,KAAK,CAAC,CAAC;MACjC;MACAZ,OAAO,CAACwB,MAAM,CAACG,KAAK,CAAC,IAAI,CAAC,CAACC,IAAI,CAAC,EAAE,CAAC,CAAC;IACtC,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ;AAEA,SAASxB,MAAM,GAAG;EAChB,OAAOgB,OAAO,CAAC,oBAAoB,CAAC;AACtC;AAEA,SAASlB,MAAM,GAAG;EAChB,OAAOkB,OAAO,CAAC,iCAAiC,CAAC;AACnD;AAEA,SAASf,KAAK,GAAG;EACf,OAAOe,OAAO,CAAC,6CAA6C,GAC1D,0BAA0B,CAAC;AAC/B"},"metadata":{},"sourceType":"script","externalDependencies":[]}