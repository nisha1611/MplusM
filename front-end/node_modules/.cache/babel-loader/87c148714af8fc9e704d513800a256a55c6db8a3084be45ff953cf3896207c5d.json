{"ast":null,"code":"/* eslint-env browser */\n\n'use strict';\n\nrequire('./driver').set(require('./drivers/browser'));\nconst DocumentProvider = require('./document_provider.js');\nconst PromiseProvider = require('./promise_provider');\nDocumentProvider.setBrowser(true);\n\n/**\r\n * The Mongoose [Promise](#promise_Promise) constructor.\r\n *\r\n * @method Promise\r\n * @api public\r\n */\n\nObject.defineProperty(exports, 'Promise', {\n  get: function () {\n    return PromiseProvider.get();\n  },\n  set: function (lib) {\n    PromiseProvider.set(lib);\n  }\n});\n\n/**\r\n * Storage layer for mongoose promises\r\n *\r\n * @method PromiseProvider\r\n * @api public\r\n */\n\nexports.PromiseProvider = PromiseProvider;\n\n/**\r\n * The [MongooseError](#error_MongooseError) constructor.\r\n *\r\n * @method Error\r\n * @api public\r\n */\n\nexports.Error = require('./error/index');\n\n/**\r\n * The Mongoose [Schema](#schema_Schema) constructor\r\n *\r\n * #### Example:\r\n *\r\n *     const mongoose = require('mongoose');\r\n *     const Schema = mongoose.Schema;\r\n *     const CatSchema = new Schema(..);\r\n *\r\n * @method Schema\r\n * @api public\r\n */\n\nexports.Schema = require('./schema');\n\n/**\r\n * The various Mongoose Types.\r\n *\r\n * #### Example:\r\n *\r\n *     const mongoose = require('mongoose');\r\n *     const array = mongoose.Types.Array;\r\n *\r\n * #### Types:\r\n *\r\n * - [Array](/docs/schematypes.html#arrays)\r\n * - [Buffer](/docs/schematypes.html#buffers)\r\n * - [Embedded](/docs/schematypes.html#schemas)\r\n * - [DocumentArray](/docs/api/documentarraypath.html)\r\n * - [Decimal128](/docs/api/mongoose.html#mongoose_Mongoose-Decimal128)\r\n * - [ObjectId](/docs/schematypes.html#objectids)\r\n * - [Map](/docs/schematypes.html#maps)\r\n * - [Subdocument](/docs/schematypes.html#schemas)\r\n *\r\n * Using this exposed access to the `ObjectId` type, we can construct ids on demand.\r\n *\r\n *     const ObjectId = mongoose.Types.ObjectId;\r\n *     const id1 = new ObjectId;\r\n *\r\n * @property Types\r\n * @api public\r\n */\nexports.Types = require('./types');\n\n/**\r\n * The Mongoose [VirtualType](#virtualtype_VirtualType) constructor\r\n *\r\n * @method VirtualType\r\n * @api public\r\n */\nexports.VirtualType = require('./virtualtype');\n\n/**\r\n * The various Mongoose SchemaTypes.\r\n *\r\n * #### Note:\r\n *\r\n * _Alias of mongoose.Schema.Types for backwards compatibility._\r\n *\r\n * @property SchemaTypes\r\n * @see Schema.SchemaTypes #schema_Schema-Types\r\n * @api public\r\n */\n\nexports.SchemaType = require('./schematype.js');\n\n/**\r\n * Internal utils\r\n *\r\n * @property utils\r\n * @api private\r\n */\n\nexports.utils = require('./utils.js');\n\n/**\r\n * The Mongoose browser [Document](/api/document.html) constructor.\r\n *\r\n * @method Document\r\n * @api public\r\n */\nexports.Document = DocumentProvider();\n\n/**\r\n * Return a new browser model. In the browser, a model is just\r\n * a simplified document with a schema - it does **not** have\r\n * functions like `findOne()`, etc.\r\n *\r\n * @method model\r\n * @api public\r\n * @param {String} name\r\n * @param {Schema} schema\r\n * @return Class\r\n */\nexports.model = function (name, schema) {\n  class Model extends exports.Document {\n    constructor(obj, fields) {\n      super(obj, schema, fields);\n    }\n  }\n  Model.modelName = name;\n  return Model;\n};\n\n/*!\r\n * Module exports.\r\n */\n\nif (typeof window !== 'undefined') {\n  window.mongoose = module.exports;\n  window.Buffer = Buffer;\n}","map":{"version":3,"names":["require","set","DocumentProvider","PromiseProvider","setBrowser","Object","defineProperty","exports","get","lib","Error","Schema","Types","VirtualType","SchemaType","utils","Document","model","name","schema","Model","constructor","obj","fields","modelName","window","mongoose","module","Buffer"],"sources":["C:/Users/91930/Desktop/Github projects/Pharmacy Demo/back-end/node_modules/mongoose/lib/browser.js"],"sourcesContent":["/* eslint-env browser */\r\n\r\n'use strict';\r\n\r\nrequire('./driver').set(require('./drivers/browser'));\r\n\r\nconst DocumentProvider = require('./document_provider.js');\r\nconst PromiseProvider = require('./promise_provider');\r\n\r\nDocumentProvider.setBrowser(true);\r\n\r\n/**\r\n * The Mongoose [Promise](#promise_Promise) constructor.\r\n *\r\n * @method Promise\r\n * @api public\r\n */\r\n\r\nObject.defineProperty(exports, 'Promise', {\r\n  get: function() {\r\n    return PromiseProvider.get();\r\n  },\r\n  set: function(lib) {\r\n    PromiseProvider.set(lib);\r\n  }\r\n});\r\n\r\n/**\r\n * Storage layer for mongoose promises\r\n *\r\n * @method PromiseProvider\r\n * @api public\r\n */\r\n\r\nexports.PromiseProvider = PromiseProvider;\r\n\r\n/**\r\n * The [MongooseError](#error_MongooseError) constructor.\r\n *\r\n * @method Error\r\n * @api public\r\n */\r\n\r\nexports.Error = require('./error/index');\r\n\r\n/**\r\n * The Mongoose [Schema](#schema_Schema) constructor\r\n *\r\n * #### Example:\r\n *\r\n *     const mongoose = require('mongoose');\r\n *     const Schema = mongoose.Schema;\r\n *     const CatSchema = new Schema(..);\r\n *\r\n * @method Schema\r\n * @api public\r\n */\r\n\r\nexports.Schema = require('./schema');\r\n\r\n/**\r\n * The various Mongoose Types.\r\n *\r\n * #### Example:\r\n *\r\n *     const mongoose = require('mongoose');\r\n *     const array = mongoose.Types.Array;\r\n *\r\n * #### Types:\r\n *\r\n * - [Array](/docs/schematypes.html#arrays)\r\n * - [Buffer](/docs/schematypes.html#buffers)\r\n * - [Embedded](/docs/schematypes.html#schemas)\r\n * - [DocumentArray](/docs/api/documentarraypath.html)\r\n * - [Decimal128](/docs/api/mongoose.html#mongoose_Mongoose-Decimal128)\r\n * - [ObjectId](/docs/schematypes.html#objectids)\r\n * - [Map](/docs/schematypes.html#maps)\r\n * - [Subdocument](/docs/schematypes.html#schemas)\r\n *\r\n * Using this exposed access to the `ObjectId` type, we can construct ids on demand.\r\n *\r\n *     const ObjectId = mongoose.Types.ObjectId;\r\n *     const id1 = new ObjectId;\r\n *\r\n * @property Types\r\n * @api public\r\n */\r\nexports.Types = require('./types');\r\n\r\n/**\r\n * The Mongoose [VirtualType](#virtualtype_VirtualType) constructor\r\n *\r\n * @method VirtualType\r\n * @api public\r\n */\r\nexports.VirtualType = require('./virtualtype');\r\n\r\n/**\r\n * The various Mongoose SchemaTypes.\r\n *\r\n * #### Note:\r\n *\r\n * _Alias of mongoose.Schema.Types for backwards compatibility._\r\n *\r\n * @property SchemaTypes\r\n * @see Schema.SchemaTypes #schema_Schema-Types\r\n * @api public\r\n */\r\n\r\nexports.SchemaType = require('./schematype.js');\r\n\r\n/**\r\n * Internal utils\r\n *\r\n * @property utils\r\n * @api private\r\n */\r\n\r\nexports.utils = require('./utils.js');\r\n\r\n/**\r\n * The Mongoose browser [Document](/api/document.html) constructor.\r\n *\r\n * @method Document\r\n * @api public\r\n */\r\nexports.Document = DocumentProvider();\r\n\r\n/**\r\n * Return a new browser model. In the browser, a model is just\r\n * a simplified document with a schema - it does **not** have\r\n * functions like `findOne()`, etc.\r\n *\r\n * @method model\r\n * @api public\r\n * @param {String} name\r\n * @param {Schema} schema\r\n * @return Class\r\n */\r\nexports.model = function(name, schema) {\r\n  class Model extends exports.Document {\r\n    constructor(obj, fields) {\r\n      super(obj, schema, fields);\r\n    }\r\n  }\r\n  Model.modelName = name;\r\n\r\n  return Model;\r\n};\r\n\r\n/*!\r\n * Module exports.\r\n */\r\n\r\nif (typeof window !== 'undefined') {\r\n  window.mongoose = module.exports;\r\n  window.Buffer = Buffer;\r\n}\r\n"],"mappings":"AAAA;;AAEA,YAAY;;AAEZA,OAAO,CAAC,UAAU,CAAC,CAACC,GAAG,CAACD,OAAO,CAAC,mBAAmB,CAAC,CAAC;AAErD,MAAME,gBAAgB,GAAGF,OAAO,CAAC,wBAAwB,CAAC;AAC1D,MAAMG,eAAe,GAAGH,OAAO,CAAC,oBAAoB,CAAC;AAErDE,gBAAgB,CAACE,UAAU,CAAC,IAAI,CAAC;;AAEjC;AACA;AACA;AACA;AACA;AACA;;AAEAC,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,SAAS,EAAE;EACxCC,GAAG,EAAE,YAAW;IACd,OAAOL,eAAe,CAACK,GAAG,EAAE;EAC9B,CAAC;EACDP,GAAG,EAAE,UAASQ,GAAG,EAAE;IACjBN,eAAe,CAACF,GAAG,CAACQ,GAAG,CAAC;EAC1B;AACF,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;;AAEAF,OAAO,CAACJ,eAAe,GAAGA,eAAe;;AAEzC;AACA;AACA;AACA;AACA;AACA;;AAEAI,OAAO,CAACG,KAAK,GAAGV,OAAO,CAAC,eAAe,CAAC;;AAExC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAO,OAAO,CAACI,MAAM,GAAGX,OAAO,CAAC,UAAU,CAAC;;AAEpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAO,OAAO,CAACK,KAAK,GAAGZ,OAAO,CAAC,SAAS,CAAC;;AAElC;AACA;AACA;AACA;AACA;AACA;AACAO,OAAO,CAACM,WAAW,GAAGb,OAAO,CAAC,eAAe,CAAC;;AAE9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAO,OAAO,CAACO,UAAU,GAAGd,OAAO,CAAC,iBAAiB,CAAC;;AAE/C;AACA;AACA;AACA;AACA;AACA;;AAEAO,OAAO,CAACQ,KAAK,GAAGf,OAAO,CAAC,YAAY,CAAC;;AAErC;AACA;AACA;AACA;AACA;AACA;AACAO,OAAO,CAACS,QAAQ,GAAGd,gBAAgB,EAAE;;AAErC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAK,OAAO,CAACU,KAAK,GAAG,UAASC,IAAI,EAAEC,MAAM,EAAE;EACrC,MAAMC,KAAK,SAASb,OAAO,CAACS,QAAQ,CAAC;IACnCK,WAAW,CAACC,GAAG,EAAEC,MAAM,EAAE;MACvB,KAAK,CAACD,GAAG,EAAEH,MAAM,EAAEI,MAAM,CAAC;IAC5B;EACF;EACAH,KAAK,CAACI,SAAS,GAAGN,IAAI;EAEtB,OAAOE,KAAK;AACd,CAAC;;AAED;AACA;AACA;;AAEA,IAAI,OAAOK,MAAM,KAAK,WAAW,EAAE;EACjCA,MAAM,CAACC,QAAQ,GAAGC,MAAM,CAACpB,OAAO;EAChCkB,MAAM,CAACG,MAAM,GAAGA,MAAM;AACxB"},"metadata":{},"sourceType":"script","externalDependencies":[]}